/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateTimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details required to update the session times of a training.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrainingTimes {
  public static final String SERIALIZED_NAME_NOTIFY_REGISTRANTS = "notifyRegistrants";
  @SerializedName(SERIALIZED_NAME_NOTIFY_REGISTRANTS)
  private Boolean notifyRegistrants;

  public static final String SERIALIZED_NAME_NOTIFY_TRAINERS = "notifyTrainers";
  @SerializedName(SERIALIZED_NAME_NOTIFY_TRAINERS)
  private Boolean notifyTrainers;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TIMES = "times";
  @SerializedName(SERIALIZED_NAME_TIMES)
  private List<DateTimeRange> times = new ArrayList<>();

  public TrainingTimes() {
  }

  public TrainingTimes notifyRegistrants(Boolean notifyRegistrants) {
    this.notifyRegistrants = notifyRegistrants;
    return this;
  }

  /**
   * Notify registrants via email of change to training. Default is true
   * @return notifyRegistrants
   */
  @javax.annotation.Nullable
  public Boolean getNotifyRegistrants() {
    return notifyRegistrants;
  }

  public void setNotifyRegistrants(Boolean notifyRegistrants) {
    this.notifyRegistrants = notifyRegistrants;
  }


  public TrainingTimes notifyTrainers(Boolean notifyTrainers) {
    this.notifyTrainers = notifyTrainers;
    return this;
  }

  /**
   * Notify trainers via email of change to training. Default is true
   * @return notifyTrainers
   */
  @javax.annotation.Nullable
  public Boolean getNotifyTrainers() {
    return notifyTrainers;
  }

  public void setNotifyTrainers(Boolean notifyTrainers) {
    this.notifyTrainers = notifyTrainers;
  }


  public TrainingTimes timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone of the training. Must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones
   * @return timeZone
   */
  @javax.annotation.Nonnull
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public TrainingTimes times(List<DateTimeRange> times) {
    this.times = times;
    return this;
  }

  public TrainingTimes addTimesItem(DateTimeRange timesItem) {
    if (this.times == null) {
      this.times = new ArrayList<>();
    }
    this.times.add(timesItem);
    return this;
  }

  /**
   * Start and end times for the training sessions
   * @return times
   */
  @javax.annotation.Nonnull
  public List<DateTimeRange> getTimes() {
    return times;
  }

  public void setTimes(List<DateTimeRange> times) {
    this.times = times;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainingTimes trainingTimes = (TrainingTimes) o;
    return Objects.equals(this.notifyRegistrants, trainingTimes.notifyRegistrants) &&
        Objects.equals(this.notifyTrainers, trainingTimes.notifyTrainers) &&
        Objects.equals(this.timeZone, trainingTimes.timeZone) &&
        Objects.equals(this.times, trainingTimes.times);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notifyRegistrants, notifyTrainers, timeZone, times);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainingTimes {\n");
    sb.append("    notifyRegistrants: ").append(toIndentedString(notifyRegistrants)).append("\n");
    sb.append("    notifyTrainers: ").append(toIndentedString(notifyTrainers)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notifyRegistrants");
    openapiFields.add("notifyTrainers");
    openapiFields.add("timeZone");
    openapiFields.add("times");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timeZone");
    openapiRequiredFields.add("times");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrainingTimes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrainingTimes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainingTimes is not found in the empty JSON string", TrainingTimes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrainingTimes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrainingTimes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrainingTimes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("times").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `times` to be an array in the JSON string but got `%s`", jsonObj.get("times").toString()));
      }

      JsonArray jsonArraytimes = jsonObj.getAsJsonArray("times");
      // validate the required field `times` (array)
      for (int i = 0; i < jsonArraytimes.size(); i++) {
        DateTimeRange.validateJsonElement(jsonArraytimes.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainingTimes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainingTimes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainingTimes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainingTimes.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainingTimes>() {
           @Override
           public void write(JsonWriter out, TrainingTimes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainingTimes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrainingTimes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrainingTimes
   * @throws IOException if the JSON string is invalid with respect to TrainingTimes
   */
  public static TrainingTimes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainingTimes.class);
  }

  /**
   * Convert an instance of TrainingTimes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

