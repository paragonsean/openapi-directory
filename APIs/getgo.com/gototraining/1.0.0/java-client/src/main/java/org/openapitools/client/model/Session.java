/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Organizer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a completed training session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Session {
  public static final String SERIALIZED_NAME_ATTENDANCE_COUNT = "attendanceCount";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE_COUNT)
  private Integer attendanceCount;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_ORGANIZERS = "organizers";
  @SerializedName(SERIALIZED_NAME_ORGANIZERS)
  private List<Organizer> organizers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION_END_TIME = "sessionEndTime";
  @SerializedName(SERIALIZED_NAME_SESSION_END_TIME)
  private OffsetDateTime sessionEndTime;

  public static final String SERIALIZED_NAME_SESSION_KEY = "sessionKey";
  @SerializedName(SERIALIZED_NAME_SESSION_KEY)
  private String sessionKey;

  public static final String SERIALIZED_NAME_SESSION_START_TIME = "sessionStartTime";
  @SerializedName(SERIALIZED_NAME_SESSION_START_TIME)
  private OffsetDateTime sessionStartTime;

  public static final String SERIALIZED_NAME_TRAINING_NAME = "trainingName";
  @SerializedName(SERIALIZED_NAME_TRAINING_NAME)
  private String trainingName;

  public Session() {
  }

  public Session attendanceCount(Integer attendanceCount) {
    this.attendanceCount = attendanceCount;
    return this;
  }

  /**
   * The number of attendees at the training session
   * @return attendanceCount
   */
  @javax.annotation.Nonnull
  public Integer getAttendanceCount() {
    return attendanceCount;
  }

  public void setAttendanceCount(Integer attendanceCount) {
    this.attendanceCount = attendanceCount;
  }


  public Session duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the training session in minutes
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public Session organizers(List<Organizer> organizers) {
    this.organizers = organizers;
    return this;
  }

  public Session addOrganizersItem(Organizer organizersItem) {
    if (this.organizers == null) {
      this.organizers = new ArrayList<>();
    }
    this.organizers.add(organizersItem);
    return this;
  }

  /**
   * The organizers of the training session.
   * @return organizers
   */
  @javax.annotation.Nonnull
  public List<Organizer> getOrganizers() {
    return organizers;
  }

  public void setOrganizers(List<Organizer> organizers) {
    this.organizers = organizers;
  }


  public Session sessionEndTime(OffsetDateTime sessionEndTime) {
    this.sessionEndTime = sessionEndTime;
    return this;
  }

  /**
   * The time the training session finished
   * @return sessionEndTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSessionEndTime() {
    return sessionEndTime;
  }

  public void setSessionEndTime(OffsetDateTime sessionEndTime) {
    this.sessionEndTime = sessionEndTime;
  }


  public Session sessionKey(String sessionKey) {
    this.sessionKey = sessionKey;
    return this;
  }

  /**
   * The key of the training session
   * @return sessionKey
   */
  @javax.annotation.Nonnull
  public String getSessionKey() {
    return sessionKey;
  }

  public void setSessionKey(String sessionKey) {
    this.sessionKey = sessionKey;
  }


  public Session sessionStartTime(OffsetDateTime sessionStartTime) {
    this.sessionStartTime = sessionStartTime;
    return this;
  }

  /**
   * The time the training session started
   * @return sessionStartTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSessionStartTime() {
    return sessionStartTime;
  }

  public void setSessionStartTime(OffsetDateTime sessionStartTime) {
    this.sessionStartTime = sessionStartTime;
  }


  public Session trainingName(String trainingName) {
    this.trainingName = trainingName;
    return this;
  }

  /**
   * The subject of the training
   * @return trainingName
   */
  @javax.annotation.Nonnull
  public String getTrainingName() {
    return trainingName;
  }

  public void setTrainingName(String trainingName) {
    this.trainingName = trainingName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.attendanceCount, session.attendanceCount) &&
        Objects.equals(this.duration, session.duration) &&
        Objects.equals(this.organizers, session.organizers) &&
        Objects.equals(this.sessionEndTime, session.sessionEndTime) &&
        Objects.equals(this.sessionKey, session.sessionKey) &&
        Objects.equals(this.sessionStartTime, session.sessionStartTime) &&
        Objects.equals(this.trainingName, session.trainingName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attendanceCount, duration, organizers, sessionEndTime, sessionKey, sessionStartTime, trainingName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    attendanceCount: ").append(toIndentedString(attendanceCount)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    organizers: ").append(toIndentedString(organizers)).append("\n");
    sb.append("    sessionEndTime: ").append(toIndentedString(sessionEndTime)).append("\n");
    sb.append("    sessionKey: ").append(toIndentedString(sessionKey)).append("\n");
    sb.append("    sessionStartTime: ").append(toIndentedString(sessionStartTime)).append("\n");
    sb.append("    trainingName: ").append(toIndentedString(trainingName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attendanceCount");
    openapiFields.add("duration");
    openapiFields.add("organizers");
    openapiFields.add("sessionEndTime");
    openapiFields.add("sessionKey");
    openapiFields.add("sessionStartTime");
    openapiFields.add("trainingName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attendanceCount");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("organizers");
    openapiRequiredFields.add("sessionEndTime");
    openapiRequiredFields.add("sessionKey");
    openapiRequiredFields.add("sessionStartTime");
    openapiRequiredFields.add("trainingName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Session
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Session.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Session.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Session` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Session.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("organizers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizers` to be an array in the JSON string but got `%s`", jsonObj.get("organizers").toString()));
      }

      JsonArray jsonArrayorganizers = jsonObj.getAsJsonArray("organizers");
      // validate the required field `organizers` (array)
      for (int i = 0; i < jsonArrayorganizers.size(); i++) {
        Organizer.validateJsonElement(jsonArrayorganizers.get(i));
      };
      if (!jsonObj.get("sessionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionKey").toString()));
      }
      if (!jsonObj.get("trainingName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Session given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Session
   * @throws IOException if the JSON string is invalid with respect to Session
   */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

  /**
   * Convert an instance of Session to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

