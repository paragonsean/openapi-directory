/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details required to update the list of organizers for a training.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrainingOrganizers {
  public static final String SERIALIZED_NAME_NOTIFY_ORGANIZERS = "notifyOrganizers";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ORGANIZERS)
  private Boolean notifyOrganizers;

  public static final String SERIALIZED_NAME_ORGANIZERS = "organizers";
  @SerializedName(SERIALIZED_NAME_ORGANIZERS)
  private List<Long> organizers = new ArrayList<>();

  public TrainingOrganizers() {
  }

  public TrainingOrganizers notifyOrganizers(Boolean notifyOrganizers) {
    this.notifyOrganizers = notifyOrganizers;
    return this;
  }

  /**
   * Specifies whether an email should be sent notifying of the change to the training&#39;s organizers.
   * @return notifyOrganizers
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOrganizers() {
    return notifyOrganizers;
  }

  public void setNotifyOrganizers(Boolean notifyOrganizers) {
    this.notifyOrganizers = notifyOrganizers;
  }


  public TrainingOrganizers organizers(List<Long> organizers) {
    this.organizers = organizers;
    return this;
  }

  public TrainingOrganizers addOrganizersItem(Long organizersItem) {
    if (this.organizers == null) {
      this.organizers = new ArrayList<>();
    }
    this.organizers.add(organizersItem);
    return this;
  }

  /**
   * List of keys of the organizers for the training.
   * @return organizers
   */
  @javax.annotation.Nonnull
  public List<Long> getOrganizers() {
    return organizers;
  }

  public void setOrganizers(List<Long> organizers) {
    this.organizers = organizers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainingOrganizers trainingOrganizers = (TrainingOrganizers) o;
    return Objects.equals(this.notifyOrganizers, trainingOrganizers.notifyOrganizers) &&
        Objects.equals(this.organizers, trainingOrganizers.organizers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notifyOrganizers, organizers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainingOrganizers {\n");
    sb.append("    notifyOrganizers: ").append(toIndentedString(notifyOrganizers)).append("\n");
    sb.append("    organizers: ").append(toIndentedString(organizers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notifyOrganizers");
    openapiFields.add("organizers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("organizers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrainingOrganizers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrainingOrganizers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainingOrganizers is not found in the empty JSON string", TrainingOrganizers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrainingOrganizers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrainingOrganizers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrainingOrganizers.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("organizers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("organizers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizers` to be an array in the JSON string but got `%s`", jsonObj.get("organizers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainingOrganizers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainingOrganizers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainingOrganizers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainingOrganizers.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainingOrganizers>() {
           @Override
           public void write(JsonWriter out, TrainingOrganizers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainingOrganizers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrainingOrganizers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrainingOrganizers
   * @throws IOException if the JSON string is invalid with respect to TrainingOrganizers
   */
  public static TrainingOrganizers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainingOrganizers.class);
  }

  /**
   * Convert an instance of TrainingOrganizers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

