/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Registrant;
import org.openapitools.client.model.RegistrantCreated;
import org.openapitools.client.model.RegistrantReqCreate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelRegistration
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRegistrationCall(String authorization, Long organizerKey, Long trainingKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/trainings/{trainingKey}/registrants/{registrantKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "trainingKey" + "}", localVarApiClient.escapeString(trainingKey.toString()))
            .replace("{" + "registrantKey" + "}", localVarApiClient.escapeString(registrantKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelRegistrationValidateBeforeCall(String authorization, Long organizerKey, Long trainingKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling cancelRegistration(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling cancelRegistration(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling cancelRegistration(Async)");
        }

        // verify the required parameter 'registrantKey' is set
        if (registrantKey == null) {
            throw new ApiException("Missing the required parameter 'registrantKey' when calling cancelRegistration(Async)");
        }

        return cancelRegistrationCall(authorization, organizerKey, trainingKey, registrantKey, _callback);

    }

    /**
     * Cancel Registration
     * This call cancels a registration in a scheduled training for a specific registrant. If the registrant has paid for the training, a cancellation cannot be completed with this method; it must be completed on the external admin site. No notification is sent to the registrant or the organizer by default. The registrant can re-register if needed.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param registrantKey The key of the registrant (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void cancelRegistration(String authorization, Long organizerKey, Long trainingKey, Long registrantKey) throws ApiException {
        cancelRegistrationWithHttpInfo(authorization, organizerKey, trainingKey, registrantKey);
    }

    /**
     * Cancel Registration
     * This call cancels a registration in a scheduled training for a specific registrant. If the registrant has paid for the training, a cancellation cannot be completed with this method; it must be completed on the external admin site. No notification is sent to the registrant or the organizer by default. The registrant can re-register if needed.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param registrantKey The key of the registrant (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelRegistrationWithHttpInfo(String authorization, Long organizerKey, Long trainingKey, Long registrantKey) throws ApiException {
        okhttp3.Call localVarCall = cancelRegistrationValidateBeforeCall(authorization, organizerKey, trainingKey, registrantKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Registration (asynchronously)
     * This call cancels a registration in a scheduled training for a specific registrant. If the registrant has paid for the training, a cancellation cannot be completed with this method; it must be completed on the external admin site. No notification is sent to the registrant or the organizer by default. The registrant can re-register if needed.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRegistrationAsync(String authorization, Long organizerKey, Long trainingKey, Long registrantKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelRegistrationValidateBeforeCall(authorization, organizerKey, trainingKey, registrantKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrant
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrantCall(String authorization, Long organizerKey, Long trainingKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/trainings/{trainingKey}/registrants/{registrantKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "trainingKey" + "}", localVarApiClient.escapeString(trainingKey.toString()))
            .replace("{" + "registrantKey" + "}", localVarApiClient.escapeString(registrantKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrantValidateBeforeCall(String authorization, Long organizerKey, Long trainingKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRegistrant(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getRegistrant(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getRegistrant(Async)");
        }

        // verify the required parameter 'registrantKey' is set
        if (registrantKey == null) {
            throw new ApiException("Missing the required parameter 'registrantKey' when calling getRegistrant(Async)");
        }

        return getRegistrantCall(authorization, organizerKey, trainingKey, registrantKey, _callback);

    }

    /**
     * Get Registrant
     * Retrieves details for specific registrant in a specific training. Registrants can be:&lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval)&lt;br&gt;APPROVED - registrant registered and is approved&lt;br&gt;DENIED - registrant registered and was not approved.&lt;br&gt;&lt;br&gt;IMPORTANT: The registrant data caches are typically updated immediately and the data will be returned in the response. However, the update can take as long as two hours.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param registrantKey The key of the registrant (required)
     * @return Registrant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Registrant getRegistrant(String authorization, Long organizerKey, Long trainingKey, Long registrantKey) throws ApiException {
        ApiResponse<Registrant> localVarResp = getRegistrantWithHttpInfo(authorization, organizerKey, trainingKey, registrantKey);
        return localVarResp.getData();
    }

    /**
     * Get Registrant
     * Retrieves details for specific registrant in a specific training. Registrants can be:&lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval)&lt;br&gt;APPROVED - registrant registered and is approved&lt;br&gt;DENIED - registrant registered and was not approved.&lt;br&gt;&lt;br&gt;IMPORTANT: The registrant data caches are typically updated immediately and the data will be returned in the response. However, the update can take as long as two hours.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param registrantKey The key of the registrant (required)
     * @return ApiResponse&lt;Registrant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Registrant> getRegistrantWithHttpInfo(String authorization, Long organizerKey, Long trainingKey, Long registrantKey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrantValidateBeforeCall(authorization, organizerKey, trainingKey, registrantKey, null);
        Type localVarReturnType = new TypeToken<Registrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Registrant (asynchronously)
     * Retrieves details for specific registrant in a specific training. Registrants can be:&lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval)&lt;br&gt;APPROVED - registrant registered and is approved&lt;br&gt;DENIED - registrant registered and was not approved.&lt;br&gt;&lt;br&gt;IMPORTANT: The registrant data caches are typically updated immediately and the data will be returned in the response. However, the update can take as long as two hours.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrantAsync(String authorization, Long organizerKey, Long trainingKey, Long registrantKey, final ApiCallback<Registrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrantValidateBeforeCall(authorization, organizerKey, trainingKey, registrantKey, _callback);
        Type localVarReturnType = new TypeToken<Registrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrants
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrantsCall(String authorization, Long organizerKey, Long trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/trainings/{trainingKey}/registrants"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "trainingKey" + "}", localVarApiClient.escapeString(trainingKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrantsValidateBeforeCall(String authorization, Long organizerKey, Long trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRegistrants(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getRegistrants(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getRegistrants(Async)");
        }

        return getRegistrantsCall(authorization, organizerKey, trainingKey, _callback);

    }

    /**
     * Get Training Registrants
     * Retrieves details on all registrants for a specific training. Registrants can be:&lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval)&lt;br&gt;APPROVED - registrant registered and is approved&lt;br&gt;DENIED - registrant registered and was not approved.&lt;br&gt;&lt;br&gt;IMPORTANT: The registrant data caches are typically updated immediately and the data will be returned in the response. However, the update can take as long as two hours.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @return List&lt;Registrant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Registrant> getRegistrants(String authorization, Long organizerKey, Long trainingKey) throws ApiException {
        ApiResponse<List<Registrant>> localVarResp = getRegistrantsWithHttpInfo(authorization, organizerKey, trainingKey);
        return localVarResp.getData();
    }

    /**
     * Get Training Registrants
     * Retrieves details on all registrants for a specific training. Registrants can be:&lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval)&lt;br&gt;APPROVED - registrant registered and is approved&lt;br&gt;DENIED - registrant registered and was not approved.&lt;br&gt;&lt;br&gt;IMPORTANT: The registrant data caches are typically updated immediately and the data will be returned in the response. However, the update can take as long as two hours.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @return ApiResponse&lt;List&lt;Registrant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registrant>> getRegistrantsWithHttpInfo(String authorization, Long organizerKey, Long trainingKey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrantsValidateBeforeCall(authorization, organizerKey, trainingKey, null);
        Type localVarReturnType = new TypeToken<List<Registrant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Training Registrants (asynchronously)
     * Retrieves details on all registrants for a specific training. Registrants can be:&lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval)&lt;br&gt;APPROVED - registrant registered and is approved&lt;br&gt;DENIED - registrant registered and was not approved.&lt;br&gt;&lt;br&gt;IMPORTANT: The registrant data caches are typically updated immediately and the data will be returned in the response. However, the update can take as long as two hours.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrantsAsync(String authorization, Long organizerKey, Long trainingKey, final ApiCallback<List<Registrant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrantsValidateBeforeCall(authorization, organizerKey, trainingKey, _callback);
        Type localVarReturnType = new TypeToken<List<Registrant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerForTraining
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param body The details of the registrant to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerForTrainingCall(String authorization, Long organizerKey, Long trainingKey, RegistrantReqCreate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/trainings/{trainingKey}/registrants"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "trainingKey" + "}", localVarApiClient.escapeString(trainingKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerForTrainingValidateBeforeCall(String authorization, Long organizerKey, Long trainingKey, RegistrantReqCreate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling registerForTraining(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling registerForTraining(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling registerForTraining(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling registerForTraining(Async)");
        }

        return registerForTrainingCall(authorization, organizerKey, trainingKey, body, _callback);

    }

    /**
     * Register for Training
     * Registers one person, identified by a unique email address, for a training. Approval is automatic unless payment or approval is required. The response contains the Confirmation page URL and Join URL for the registrant. NOTE: If some registrants do not receive a confirmation email, the emails could be getting blocked by their email server due to spam filtering or a grey-listing setting.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param body The details of the registrant to create (required)
     * @return RegistrantCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public RegistrantCreated registerForTraining(String authorization, Long organizerKey, Long trainingKey, RegistrantReqCreate body) throws ApiException {
        ApiResponse<RegistrantCreated> localVarResp = registerForTrainingWithHttpInfo(authorization, organizerKey, trainingKey, body);
        return localVarResp.getData();
    }

    /**
     * Register for Training
     * Registers one person, identified by a unique email address, for a training. Approval is automatic unless payment or approval is required. The response contains the Confirmation page URL and Join URL for the registrant. NOTE: If some registrants do not receive a confirmation email, the emails could be getting blocked by their email server due to spam filtering or a grey-listing setting.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param body The details of the registrant to create (required)
     * @return ApiResponse&lt;RegistrantCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrantCreated> registerForTrainingWithHttpInfo(String authorization, Long organizerKey, Long trainingKey, RegistrantReqCreate body) throws ApiException {
        okhttp3.Call localVarCall = registerForTrainingValidateBeforeCall(authorization, organizerKey, trainingKey, body, null);
        Type localVarReturnType = new TypeToken<RegistrantCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register for Training (asynchronously)
     * Registers one person, identified by a unique email address, for a training. Approval is automatic unless payment or approval is required. The response contains the Confirmation page URL and Join URL for the registrant. NOTE: If some registrants do not receive a confirmation email, the emails could be getting blocked by their email server due to spam filtering or a grey-listing setting.
     * @param authorization Access token (required)
     * @param organizerKey The key of the training organizer (required)
     * @param trainingKey The key of the training (required)
     * @param body The details of the registrant to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerForTrainingAsync(String authorization, Long organizerKey, Long trainingKey, RegistrantReqCreate body, final ApiCallback<RegistrantCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerForTrainingValidateBeforeCall(authorization, organizerKey, trainingKey, body, _callback);
        Type localVarReturnType = new TypeToken<RegistrantCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
