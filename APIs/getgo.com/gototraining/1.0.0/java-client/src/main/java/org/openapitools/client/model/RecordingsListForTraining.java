/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Recording;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a list of recordings for the training.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecordingsListForTraining {
  public static final String SERIALIZED_NAME_RECORDING_LIST = "recordingList";
  @SerializedName(SERIALIZED_NAME_RECORDING_LIST)
  private List<Recording> recordingList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAINING_KEY = "trainingKey";
  @SerializedName(SERIALIZED_NAME_TRAINING_KEY)
  private Long trainingKey;

  public RecordingsListForTraining() {
  }

  public RecordingsListForTraining recordingList(List<Recording> recordingList) {
    this.recordingList = recordingList;
    return this;
  }

  public RecordingsListForTraining addRecordingListItem(Recording recordingListItem) {
    if (this.recordingList == null) {
      this.recordingList = new ArrayList<>();
    }
    this.recordingList.add(recordingListItem);
    return this;
  }

  /**
   * The list of online recordings for the training
   * @return recordingList
   */
  @javax.annotation.Nonnull
  public List<Recording> getRecordingList() {
    return recordingList;
  }

  public void setRecordingList(List<Recording> recordingList) {
    this.recordingList = recordingList;
  }


  public RecordingsListForTraining trainingKey(Long trainingKey) {
    this.trainingKey = trainingKey;
    return this;
  }

  /**
   * The training&#39;s unique key
   * @return trainingKey
   */
  @javax.annotation.Nonnull
  public Long getTrainingKey() {
    return trainingKey;
  }

  public void setTrainingKey(Long trainingKey) {
    this.trainingKey = trainingKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordingsListForTraining recordingsListForTraining = (RecordingsListForTraining) o;
    return Objects.equals(this.recordingList, recordingsListForTraining.recordingList) &&
        Objects.equals(this.trainingKey, recordingsListForTraining.trainingKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordingList, trainingKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordingsListForTraining {\n");
    sb.append("    recordingList: ").append(toIndentedString(recordingList)).append("\n");
    sb.append("    trainingKey: ").append(toIndentedString(trainingKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recordingList");
    openapiFields.add("trainingKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recordingList");
    openapiRequiredFields.add("trainingKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordingsListForTraining
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordingsListForTraining.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordingsListForTraining is not found in the empty JSON string", RecordingsListForTraining.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordingsListForTraining.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordingsListForTraining` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecordingsListForTraining.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("recordingList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordingList` to be an array in the JSON string but got `%s`", jsonObj.get("recordingList").toString()));
      }

      JsonArray jsonArrayrecordingList = jsonObj.getAsJsonArray("recordingList");
      // validate the required field `recordingList` (array)
      for (int i = 0; i < jsonArrayrecordingList.size(); i++) {
        Recording.validateJsonElement(jsonArrayrecordingList.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordingsListForTraining.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordingsListForTraining' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordingsListForTraining> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordingsListForTraining.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordingsListForTraining>() {
           @Override
           public void write(JsonWriter out, RecordingsListForTraining value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordingsListForTraining read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordingsListForTraining given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordingsListForTraining
   * @throws IOException if the JSON string is invalid with respect to RecordingsListForTraining
   */
  public static RecordingsListForTraining fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordingsListForTraining.class);
  }

  /**
   * Convert an instance of RecordingsListForTraining to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

