/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateTimeRange;
import org.openapitools.client.model.Organizer;
import org.openapitools.client.model.RegistrationSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a scheduled training.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Training {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZERS = "organizers";
  @SerializedName(SERIALIZED_NAME_ORGANIZERS)
  private List<Organizer> organizers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGISTRATION_SETTINGS = "registrationSettings";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_SETTINGS)
  private RegistrationSettings registrationSettings;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TIMES = "times";
  @SerializedName(SERIALIZED_NAME_TIMES)
  private List<DateTimeRange> times = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAINING_ID = "trainingId";
  @SerializedName(SERIALIZED_NAME_TRAINING_ID)
  private String trainingId;

  public static final String SERIALIZED_NAME_TRAINING_KEY = "trainingKey";
  @SerializedName(SERIALIZED_NAME_TRAINING_KEY)
  private String trainingKey;

  public Training() {
  }

  public Training description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The training&#39;s description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Training name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The training&#39;s subject
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Training organizers(List<Organizer> organizers) {
    this.organizers = organizers;
    return this;
  }

  public Training addOrganizersItem(Organizer organizersItem) {
    if (this.organizers == null) {
      this.organizers = new ArrayList<>();
    }
    this.organizers.add(organizersItem);
    return this;
  }

  /**
   * The list of (co-)organizers for the training
   * @return organizers
   */
  @javax.annotation.Nonnull
  public List<Organizer> getOrganizers() {
    return organizers;
  }

  public void setOrganizers(List<Organizer> organizers) {
    this.organizers = organizers;
  }


  public Training registrationSettings(RegistrationSettings registrationSettings) {
    this.registrationSettings = registrationSettings;
    return this;
  }

  /**
   * Get registrationSettings
   * @return registrationSettings
   */
  @javax.annotation.Nonnull
  public RegistrationSettings getRegistrationSettings() {
    return registrationSettings;
  }

  public void setRegistrationSettings(RegistrationSettings registrationSettings) {
    this.registrationSettings = registrationSettings;
  }


  public Training timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The time zone where the training takes place
   * @return timeZone
   */
  @javax.annotation.Nonnull
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public Training times(List<DateTimeRange> times) {
    this.times = times;
    return this;
  }

  public Training addTimesItem(DateTimeRange timesItem) {
    if (this.times == null) {
      this.times = new ArrayList<>();
    }
    this.times.add(timesItem);
    return this;
  }

  /**
   * Array with startDate and endDate for the training sessions
   * @return times
   */
  @javax.annotation.Nonnull
  public List<DateTimeRange> getTimes() {
    return times;
  }

  public void setTimes(List<DateTimeRange> times) {
    this.times = times;
  }


  public Training trainingId(String trainingId) {
    this.trainingId = trainingId;
    return this;
  }

  /**
   * The 9-digit training&#39;s ID
   * @return trainingId
   */
  @javax.annotation.Nonnull
  public String getTrainingId() {
    return trainingId;
  }

  public void setTrainingId(String trainingId) {
    this.trainingId = trainingId;
  }


  public Training trainingKey(String trainingKey) {
    this.trainingKey = trainingKey;
    return this;
  }

  /**
   * The training&#39;s unique key
   * @return trainingKey
   */
  @javax.annotation.Nonnull
  public String getTrainingKey() {
    return trainingKey;
  }

  public void setTrainingKey(String trainingKey) {
    this.trainingKey = trainingKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Training training = (Training) o;
    return Objects.equals(this.description, training.description) &&
        Objects.equals(this.name, training.name) &&
        Objects.equals(this.organizers, training.organizers) &&
        Objects.equals(this.registrationSettings, training.registrationSettings) &&
        Objects.equals(this.timeZone, training.timeZone) &&
        Objects.equals(this.times, training.times) &&
        Objects.equals(this.trainingId, training.trainingId) &&
        Objects.equals(this.trainingKey, training.trainingKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, organizers, registrationSettings, timeZone, times, trainingId, trainingKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Training {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizers: ").append(toIndentedString(organizers)).append("\n");
    sb.append("    registrationSettings: ").append(toIndentedString(registrationSettings)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("    trainingId: ").append(toIndentedString(trainingId)).append("\n");
    sb.append("    trainingKey: ").append(toIndentedString(trainingKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("organizers");
    openapiFields.add("registrationSettings");
    openapiFields.add("timeZone");
    openapiFields.add("times");
    openapiFields.add("trainingId");
    openapiFields.add("trainingKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("organizers");
    openapiRequiredFields.add("registrationSettings");
    openapiRequiredFields.add("timeZone");
    openapiRequiredFields.add("times");
    openapiRequiredFields.add("trainingId");
    openapiRequiredFields.add("trainingKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Training
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Training.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Training is not found in the empty JSON string", Training.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Training.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Training` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Training.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("organizers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizers` to be an array in the JSON string but got `%s`", jsonObj.get("organizers").toString()));
      }

      JsonArray jsonArrayorganizers = jsonObj.getAsJsonArray("organizers");
      // validate the required field `organizers` (array)
      for (int i = 0; i < jsonArrayorganizers.size(); i++) {
        Organizer.validateJsonElement(jsonArrayorganizers.get(i));
      };
      // validate the required field `registrationSettings`
      RegistrationSettings.validateJsonElement(jsonObj.get("registrationSettings"));
      if (!jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("times").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `times` to be an array in the JSON string but got `%s`", jsonObj.get("times").toString()));
      }

      JsonArray jsonArraytimes = jsonObj.getAsJsonArray("times");
      // validate the required field `times` (array)
      for (int i = 0; i < jsonArraytimes.size(); i++) {
        DateTimeRange.validateJsonElement(jsonArraytimes.get(i));
      };
      if (!jsonObj.get("trainingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingId").toString()));
      }
      if (!jsonObj.get("trainingKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Training.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Training' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Training> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Training.class));

       return (TypeAdapter<T>) new TypeAdapter<Training>() {
           @Override
           public void write(JsonWriter out, Training value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Training read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Training given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Training
   * @throws IOException if the JSON string is invalid with respect to Training
   */
  public static Training fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Training.class);
  }

  /**
   * Convert an instance of Training to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

