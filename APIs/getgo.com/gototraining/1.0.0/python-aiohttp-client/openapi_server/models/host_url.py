# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HostUrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_url: str=None):
        """HostUrl - a model defined in OpenAPI

        :param host_url: The host_url of this HostUrl.
        """
        self.openapi_types = {
            'host_url': str
        }

        self.attribute_map = {
            'host_url': 'hostURL'
        }

        self._host_url = host_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostUrl of this HostUrl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_url(self):
        """Gets the host_url of this HostUrl.

        The host URL that can be used to start a training

        :return: The host_url of this HostUrl.
        :rtype: str
        """
        return self._host_url

    @host_url.setter
    def host_url(self, host_url):
        """Sets the host_url of this HostUrl.

        The host URL that can be used to start a training

        :param host_url: The host_url of this HostUrl.
        :type host_url: str
        """
        if host_url is None:
            raise ValueError("Invalid value for `host_url`, must not be `None`")

        self._host_url = host_url
