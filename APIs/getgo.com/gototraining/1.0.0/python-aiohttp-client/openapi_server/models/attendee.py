# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attendance import Attendance
from openapi_server import util


class Attendee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, given_name: str=None, in_session_times: List[Attendance]=None, surname: str=None, time_in_session: int=None):
        """Attendee - a model defined in OpenAPI

        :param email: The email of this Attendee.
        :param given_name: The given_name of this Attendee.
        :param in_session_times: The in_session_times of this Attendee.
        :param surname: The surname of this Attendee.
        :param time_in_session: The time_in_session of this Attendee.
        """
        self.openapi_types = {
            'email': str,
            'given_name': str,
            'in_session_times': List[Attendance],
            'surname': str,
            'time_in_session': int
        }

        self.attribute_map = {
            'email': 'email',
            'given_name': 'givenName',
            'in_session_times': 'inSessionTimes',
            'surname': 'surname',
            'time_in_session': 'timeInSession'
        }

        self._email = email
        self._given_name = given_name
        self._in_session_times = in_session_times
        self._surname = surname
        self._time_in_session = time_in_session

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attendee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attendee of this Attendee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Attendee.

        The attendee's email address

        :return: The email of this Attendee.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Attendee.

        The attendee's email address

        :param email: The email of this Attendee.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def given_name(self):
        """Gets the given_name of this Attendee.

        The attendee's first name

        :return: The given_name of this Attendee.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Attendee.

        The attendee's first name

        :param given_name: The given_name of this Attendee.
        :type given_name: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")

        self._given_name = given_name

    @property
    def in_session_times(self):
        """Gets the in_session_times of this Attendee.

        List of the parts of the training session the attendee joined

        :return: The in_session_times of this Attendee.
        :rtype: List[Attendance]
        """
        return self._in_session_times

    @in_session_times.setter
    def in_session_times(self, in_session_times):
        """Sets the in_session_times of this Attendee.

        List of the parts of the training session the attendee joined

        :param in_session_times: The in_session_times of this Attendee.
        :type in_session_times: List[Attendance]
        """
        if in_session_times is None:
            raise ValueError("Invalid value for `in_session_times`, must not be `None`")

        self._in_session_times = in_session_times

    @property
    def surname(self):
        """Gets the surname of this Attendee.

        The attendee's surname

        :return: The surname of this Attendee.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Attendee.

        The attendee's surname

        :param surname: The surname of this Attendee.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")

        self._surname = surname

    @property
    def time_in_session(self):
        """Gets the time_in_session of this Attendee.

        The total time in minutes spent at all the parts of the training session the attendee joined

        :return: The time_in_session of this Attendee.
        :rtype: int
        """
        return self._time_in_session

    @time_in_session.setter
    def time_in_session(self, time_in_session):
        """Sets the time_in_session of this Attendee.

        The total time in minutes spent at all the parts of the training session the attendee joined

        :param time_in_session: The time_in_session of this Attendee.
        :type time_in_session: int
        """
        if time_in_session is None:
            raise ValueError("Invalid value for `time_in_session`, must not be `None`")

        self._time_in_session = time_in_session
