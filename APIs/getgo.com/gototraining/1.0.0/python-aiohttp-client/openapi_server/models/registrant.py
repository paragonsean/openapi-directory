# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Registrant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confirmation_url: str=None, email: str=None, given_name: str=None, join_url: str=None, registrant_key: str=None, registration_date: datetime=None, status: str=None, surname: str=None):
        """Registrant - a model defined in OpenAPI

        :param confirmation_url: The confirmation_url of this Registrant.
        :param email: The email of this Registrant.
        :param given_name: The given_name of this Registrant.
        :param join_url: The join_url of this Registrant.
        :param registrant_key: The registrant_key of this Registrant.
        :param registration_date: The registration_date of this Registrant.
        :param status: The status of this Registrant.
        :param surname: The surname of this Registrant.
        """
        self.openapi_types = {
            'confirmation_url': str,
            'email': str,
            'given_name': str,
            'join_url': str,
            'registrant_key': str,
            'registration_date': datetime,
            'status': str,
            'surname': str
        }

        self.attribute_map = {
            'confirmation_url': 'confirmationUrl',
            'email': 'email',
            'given_name': 'givenName',
            'join_url': 'joinUrl',
            'registrant_key': 'registrantKey',
            'registration_date': 'registrationDate',
            'status': 'status',
            'surname': 'surname'
        }

        self._confirmation_url = confirmation_url
        self._email = email
        self._given_name = given_name
        self._join_url = join_url
        self._registrant_key = registrant_key
        self._registration_date = registration_date
        self._status = status
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Registrant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Registrant of this Registrant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confirmation_url(self):
        """Gets the confirmation_url of this Registrant.

        The URL where the confirmation for the registration can be found

        :return: The confirmation_url of this Registrant.
        :rtype: str
        """
        return self._confirmation_url

    @confirmation_url.setter
    def confirmation_url(self, confirmation_url):
        """Sets the confirmation_url of this Registrant.

        The URL where the confirmation for the registration can be found

        :param confirmation_url: The confirmation_url of this Registrant.
        :type confirmation_url: str
        """
        if confirmation_url is None:
            raise ValueError("Invalid value for `confirmation_url`, must not be `None`")

        self._confirmation_url = confirmation_url

    @property
    def email(self):
        """Gets the email of this Registrant.

        The registrant's email address

        :return: The email of this Registrant.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Registrant.

        The registrant's email address

        :param email: The email of this Registrant.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def given_name(self):
        """Gets the given_name of this Registrant.

        The registrant's first name

        :return: The given_name of this Registrant.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Registrant.

        The registrant's first name

        :param given_name: The given_name of this Registrant.
        :type given_name: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")

        self._given_name = given_name

    @property
    def join_url(self):
        """Gets the join_url of this Registrant.

        The URL the registrant will use to join the training

        :return: The join_url of this Registrant.
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this Registrant.

        The URL the registrant will use to join the training

        :param join_url: The join_url of this Registrant.
        :type join_url: str
        """
        if join_url is None:
            raise ValueError("Invalid value for `join_url`, must not be `None`")

        self._join_url = join_url

    @property
    def registrant_key(self):
        """Gets the registrant_key of this Registrant.

        The registrant's key

        :return: The registrant_key of this Registrant.
        :rtype: str
        """
        return self._registrant_key

    @registrant_key.setter
    def registrant_key(self, registrant_key):
        """Sets the registrant_key of this Registrant.

        The registrant's key

        :param registrant_key: The registrant_key of this Registrant.
        :type registrant_key: str
        """
        if registrant_key is None:
            raise ValueError("Invalid value for `registrant_key`, must not be `None`")

        self._registrant_key = registrant_key

    @property
    def registration_date(self):
        """Gets the registration_date of this Registrant.

        The date and time the registration took place

        :return: The registration_date of this Registrant.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this Registrant.

        The date and time the registration took place

        :param registration_date: The registration_date of this Registrant.
        :type registration_date: datetime
        """
        if registration_date is None:
            raise ValueError("Invalid value for `registration_date`, must not be `None`")

        self._registration_date = registration_date

    @property
    def status(self):
        """Gets the status of this Registrant.

        The registrant's status

        :return: The status of this Registrant.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Registrant.

        The registrant's status

        :param status: The status of this Registrant.
        :type status: str
        """
        allowed_values = ["WAITING", "APPROVED", "DENIED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def surname(self):
        """Gets the surname of this Registrant.

        The registrant's surname

        :return: The surname of this Registrant.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Registrant.

        The registrant's surname

        :param surname: The surname of this Registrant.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")

        self._surname = surname
