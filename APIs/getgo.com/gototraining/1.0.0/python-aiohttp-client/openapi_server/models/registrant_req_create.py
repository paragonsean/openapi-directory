# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistrantReqCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, given_name: str=None, surname: str=None):
        """RegistrantReqCreate - a model defined in OpenAPI

        :param email: The email of this RegistrantReqCreate.
        :param given_name: The given_name of this RegistrantReqCreate.
        :param surname: The surname of this RegistrantReqCreate.
        """
        self.openapi_types = {
            'email': str,
            'given_name': str,
            'surname': str
        }

        self.attribute_map = {
            'email': 'email',
            'given_name': 'givenName',
            'surname': 'surname'
        }

        self._email = email
        self._given_name = given_name
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrantReqCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrantReqCreate of this RegistrantReqCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this RegistrantReqCreate.

        The registrant's email address

        :return: The email of this RegistrantReqCreate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegistrantReqCreate.

        The registrant's email address

        :param email: The email of this RegistrantReqCreate.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def given_name(self):
        """Gets the given_name of this RegistrantReqCreate.

        The registrant's first name

        :return: The given_name of this RegistrantReqCreate.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this RegistrantReqCreate.

        The registrant's first name

        :param given_name: The given_name of this RegistrantReqCreate.
        :type given_name: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")

        self._given_name = given_name

    @property
    def surname(self):
        """Gets the surname of this RegistrantReqCreate.

        The registrant's surname

        :return: The surname of this RegistrantReqCreate.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this RegistrantReqCreate.

        The registrant's surname

        :param surname: The surname of this RegistrantReqCreate.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")

        self._surname = surname
