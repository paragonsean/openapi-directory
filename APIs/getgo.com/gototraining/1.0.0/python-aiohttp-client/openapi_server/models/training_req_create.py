# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server.models.registration_settings import RegistrationSettings
from openapi_server import util


class TrainingReqCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, organizers: List[int]=None, registration_settings: RegistrationSettings=None, time_zone: str=None, times: List[DateTimeRange]=None):
        """TrainingReqCreate - a model defined in OpenAPI

        :param description: The description of this TrainingReqCreate.
        :param name: The name of this TrainingReqCreate.
        :param organizers: The organizers of this TrainingReqCreate.
        :param registration_settings: The registration_settings of this TrainingReqCreate.
        :param time_zone: The time_zone of this TrainingReqCreate.
        :param times: The times of this TrainingReqCreate.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'organizers': List[int],
            'registration_settings': RegistrationSettings,
            'time_zone': str,
            'times': List[DateTimeRange]
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'organizers': 'organizers',
            'registration_settings': 'registrationSettings',
            'time_zone': 'timeZone',
            'times': 'times'
        }

        self._description = description
        self._name = name
        self._organizers = organizers
        self._registration_settings = registration_settings
        self._time_zone = time_zone
        self._times = times

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingReqCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingReqCreate of this TrainingReqCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TrainingReqCreate.

        Description of the training

        :return: The description of this TrainingReqCreate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrainingReqCreate.

        Description of the training

        :param description: The description of this TrainingReqCreate.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this TrainingReqCreate.

        Name of the training

        :return: The name of this TrainingReqCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrainingReqCreate.

        Name of the training

        :param name: The name of this TrainingReqCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organizers(self):
        """Gets the organizers of this TrainingReqCreate.

        List of keys of the co-organizers for this training

        :return: The organizers of this TrainingReqCreate.
        :rtype: List[int]
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this TrainingReqCreate.

        List of keys of the co-organizers for this training

        :param organizers: The organizers of this TrainingReqCreate.
        :type organizers: List[int]
        """

        self._organizers = organizers

    @property
    def registration_settings(self):
        """Gets the registration_settings of this TrainingReqCreate.


        :return: The registration_settings of this TrainingReqCreate.
        :rtype: RegistrationSettings
        """
        return self._registration_settings

    @registration_settings.setter
    def registration_settings(self, registration_settings):
        """Sets the registration_settings of this TrainingReqCreate.


        :param registration_settings: The registration_settings of this TrainingReqCreate.
        :type registration_settings: RegistrationSettings
        """

        self._registration_settings = registration_settings

    @property
    def time_zone(self):
        """Gets the time_zone of this TrainingReqCreate.

        Time zone of the training. (Must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones)

        :return: The time_zone of this TrainingReqCreate.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this TrainingReqCreate.

        Time zone of the training. (Must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones)

        :param time_zone: The time_zone of this TrainingReqCreate.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone

    @property
    def times(self):
        """Gets the times of this TrainingReqCreate.

        Array with startDate and endDate for the training sessions

        :return: The times of this TrainingReqCreate.
        :rtype: List[DateTimeRange]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this TrainingReqCreate.

        Array with startDate and endDate for the training sessions

        :param times: The times of this TrainingReqCreate.
        :type times: List[DateTimeRange]
        """
        if times is None:
            raise ValueError("Invalid value for `times`, must not be `None`")

        self._times = times
