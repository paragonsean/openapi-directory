# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server import util


class TrainingTimes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notify_registrants: bool=None, notify_trainers: bool=None, time_zone: str=None, times: List[DateTimeRange]=None):
        """TrainingTimes - a model defined in OpenAPI

        :param notify_registrants: The notify_registrants of this TrainingTimes.
        :param notify_trainers: The notify_trainers of this TrainingTimes.
        :param time_zone: The time_zone of this TrainingTimes.
        :param times: The times of this TrainingTimes.
        """
        self.openapi_types = {
            'notify_registrants': bool,
            'notify_trainers': bool,
            'time_zone': str,
            'times': List[DateTimeRange]
        }

        self.attribute_map = {
            'notify_registrants': 'notifyRegistrants',
            'notify_trainers': 'notifyTrainers',
            'time_zone': 'timeZone',
            'times': 'times'
        }

        self._notify_registrants = notify_registrants
        self._notify_trainers = notify_trainers
        self._time_zone = time_zone
        self._times = times

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingTimes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingTimes of this TrainingTimes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notify_registrants(self):
        """Gets the notify_registrants of this TrainingTimes.

        Notify registrants via email of change to training. Default is true

        :return: The notify_registrants of this TrainingTimes.
        :rtype: bool
        """
        return self._notify_registrants

    @notify_registrants.setter
    def notify_registrants(self, notify_registrants):
        """Sets the notify_registrants of this TrainingTimes.

        Notify registrants via email of change to training. Default is true

        :param notify_registrants: The notify_registrants of this TrainingTimes.
        :type notify_registrants: bool
        """

        self._notify_registrants = notify_registrants

    @property
    def notify_trainers(self):
        """Gets the notify_trainers of this TrainingTimes.

        Notify trainers via email of change to training. Default is true

        :return: The notify_trainers of this TrainingTimes.
        :rtype: bool
        """
        return self._notify_trainers

    @notify_trainers.setter
    def notify_trainers(self, notify_trainers):
        """Sets the notify_trainers of this TrainingTimes.

        Notify trainers via email of change to training. Default is true

        :param notify_trainers: The notify_trainers of this TrainingTimes.
        :type notify_trainers: bool
        """

        self._notify_trainers = notify_trainers

    @property
    def time_zone(self):
        """Gets the time_zone of this TrainingTimes.

        Time zone of the training. Must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones

        :return: The time_zone of this TrainingTimes.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this TrainingTimes.

        Time zone of the training. Must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones

        :param time_zone: The time_zone of this TrainingTimes.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone

    @property
    def times(self):
        """Gets the times of this TrainingTimes.

        Start and end times for the training sessions

        :return: The times of this TrainingTimes.
        :rtype: List[DateTimeRange]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this TrainingTimes.

        Start and end times for the training sessions

        :param times: The times of this TrainingTimes.
        :type times: List[DateTimeRange]
        """
        if times is None:
            raise ValueError("Invalid value for `times`, must not be `None`")

        self._times = times
