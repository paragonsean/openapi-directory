# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recording import Recording
from openapi_server import util


class RecordingsListForTraining(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recording_list: List[Recording]=None, training_key: int=None):
        """RecordingsListForTraining - a model defined in OpenAPI

        :param recording_list: The recording_list of this RecordingsListForTraining.
        :param training_key: The training_key of this RecordingsListForTraining.
        """
        self.openapi_types = {
            'recording_list': List[Recording],
            'training_key': int
        }

        self.attribute_map = {
            'recording_list': 'recordingList',
            'training_key': 'trainingKey'
        }

        self._recording_list = recording_list
        self._training_key = training_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecordingsListForTraining':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecordingsListForTraining of this RecordingsListForTraining.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recording_list(self):
        """Gets the recording_list of this RecordingsListForTraining.

        The list of online recordings for the training

        :return: The recording_list of this RecordingsListForTraining.
        :rtype: List[Recording]
        """
        return self._recording_list

    @recording_list.setter
    def recording_list(self, recording_list):
        """Sets the recording_list of this RecordingsListForTraining.

        The list of online recordings for the training

        :param recording_list: The recording_list of this RecordingsListForTraining.
        :type recording_list: List[Recording]
        """
        if recording_list is None:
            raise ValueError("Invalid value for `recording_list`, must not be `None`")

        self._recording_list = recording_list

    @property
    def training_key(self):
        """Gets the training_key of this RecordingsListForTraining.

        The training's unique key

        :return: The training_key of this RecordingsListForTraining.
        :rtype: int
        """
        return self._training_key

    @training_key.setter
    def training_key(self, training_key):
        """Sets the training_key of this RecordingsListForTraining.

        The training's unique key

        :param training_key: The training_key of this RecordingsListForTraining.
        :type training_key: int
        """
        if training_key is None:
            raise ValueError("Invalid value for `training_key`, must not be `None`")

        self._training_key = training_key
