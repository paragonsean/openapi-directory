# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server.models.organizer import Organizer
from openapi_server.models.registration_settings import RegistrationSettings
from openapi_server import util


class Training(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, organizers: List[Organizer]=None, registration_settings: RegistrationSettings=None, time_zone: str=None, times: List[DateTimeRange]=None, training_id: str=None, training_key: str=None):
        """Training - a model defined in OpenAPI

        :param description: The description of this Training.
        :param name: The name of this Training.
        :param organizers: The organizers of this Training.
        :param registration_settings: The registration_settings of this Training.
        :param time_zone: The time_zone of this Training.
        :param times: The times of this Training.
        :param training_id: The training_id of this Training.
        :param training_key: The training_key of this Training.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'organizers': List[Organizer],
            'registration_settings': RegistrationSettings,
            'time_zone': str,
            'times': List[DateTimeRange],
            'training_id': str,
            'training_key': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'organizers': 'organizers',
            'registration_settings': 'registrationSettings',
            'time_zone': 'timeZone',
            'times': 'times',
            'training_id': 'trainingId',
            'training_key': 'trainingKey'
        }

        self._description = description
        self._name = name
        self._organizers = organizers
        self._registration_settings = registration_settings
        self._time_zone = time_zone
        self._times = times
        self._training_id = training_id
        self._training_key = training_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Training':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Training of this Training.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Training.

        The training's description

        :return: The description of this Training.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Training.

        The training's description

        :param description: The description of this Training.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this Training.

        The training's subject

        :return: The name of this Training.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Training.

        The training's subject

        :param name: The name of this Training.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organizers(self):
        """Gets the organizers of this Training.

        The list of (co-)organizers for the training

        :return: The organizers of this Training.
        :rtype: List[Organizer]
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this Training.

        The list of (co-)organizers for the training

        :param organizers: The organizers of this Training.
        :type organizers: List[Organizer]
        """
        if organizers is None:
            raise ValueError("Invalid value for `organizers`, must not be `None`")

        self._organizers = organizers

    @property
    def registration_settings(self):
        """Gets the registration_settings of this Training.


        :return: The registration_settings of this Training.
        :rtype: RegistrationSettings
        """
        return self._registration_settings

    @registration_settings.setter
    def registration_settings(self, registration_settings):
        """Sets the registration_settings of this Training.


        :param registration_settings: The registration_settings of this Training.
        :type registration_settings: RegistrationSettings
        """
        if registration_settings is None:
            raise ValueError("Invalid value for `registration_settings`, must not be `None`")

        self._registration_settings = registration_settings

    @property
    def time_zone(self):
        """Gets the time_zone of this Training.

        The time zone where the training takes place

        :return: The time_zone of this Training.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Training.

        The time zone where the training takes place

        :param time_zone: The time_zone of this Training.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone

    @property
    def times(self):
        """Gets the times of this Training.

        Array with startDate and endDate for the training sessions

        :return: The times of this Training.
        :rtype: List[DateTimeRange]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this Training.

        Array with startDate and endDate for the training sessions

        :param times: The times of this Training.
        :type times: List[DateTimeRange]
        """
        if times is None:
            raise ValueError("Invalid value for `times`, must not be `None`")

        self._times = times

    @property
    def training_id(self):
        """Gets the training_id of this Training.

        The 9-digit training's ID

        :return: The training_id of this Training.
        :rtype: str
        """
        return self._training_id

    @training_id.setter
    def training_id(self, training_id):
        """Sets the training_id of this Training.

        The 9-digit training's ID

        :param training_id: The training_id of this Training.
        :type training_id: str
        """
        if training_id is None:
            raise ValueError("Invalid value for `training_id`, must not be `None`")

        self._training_id = training_id

    @property
    def training_key(self):
        """Gets the training_key of this Training.

        The training's unique key

        :return: The training_key of this Training.
        :rtype: str
        """
        return self._training_key

    @training_key.setter
    def training_key(self, training_key):
        """Sets the training_key of this Training.

        The training's unique key

        :param training_key: The training_key of this Training.
        :type training_key: str
        """
        if training_key is None:
            raise ValueError("Invalid value for `training_key`, must not be `None`")

        self._training_key = training_key
