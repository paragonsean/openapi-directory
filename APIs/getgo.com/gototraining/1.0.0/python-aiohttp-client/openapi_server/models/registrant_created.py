# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistrantCreated(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confirmation_url: str=None, join_url: str=None, registrant_key: str=None):
        """RegistrantCreated - a model defined in OpenAPI

        :param confirmation_url: The confirmation_url of this RegistrantCreated.
        :param join_url: The join_url of this RegistrantCreated.
        :param registrant_key: The registrant_key of this RegistrantCreated.
        """
        self.openapi_types = {
            'confirmation_url': str,
            'join_url': str,
            'registrant_key': str
        }

        self.attribute_map = {
            'confirmation_url': 'confirmationUrl',
            'join_url': 'joinUrl',
            'registrant_key': 'registrantKey'
        }

        self._confirmation_url = confirmation_url
        self._join_url = join_url
        self._registrant_key = registrant_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrantCreated':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrantCreated of this RegistrantCreated.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confirmation_url(self):
        """Gets the confirmation_url of this RegistrantCreated.

        The URL where confirmation for the registration can be found

        :return: The confirmation_url of this RegistrantCreated.
        :rtype: str
        """
        return self._confirmation_url

    @confirmation_url.setter
    def confirmation_url(self, confirmation_url):
        """Sets the confirmation_url of this RegistrantCreated.

        The URL where confirmation for the registration can be found

        :param confirmation_url: The confirmation_url of this RegistrantCreated.
        :type confirmation_url: str
        """
        if confirmation_url is None:
            raise ValueError("Invalid value for `confirmation_url`, must not be `None`")

        self._confirmation_url = confirmation_url

    @property
    def join_url(self):
        """Gets the join_url of this RegistrantCreated.

        The URL the registrant will use to join the training

        :return: The join_url of this RegistrantCreated.
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this RegistrantCreated.

        The URL the registrant will use to join the training

        :param join_url: The join_url of this RegistrantCreated.
        :type join_url: str
        """
        if join_url is None:
            raise ValueError("Invalid value for `join_url`, must not be `None`")

        self._join_url = join_url

    @property
    def registrant_key(self):
        """Gets the registrant_key of this RegistrantCreated.

        The registrant's key

        :return: The registrant_key of this RegistrantCreated.
        :rtype: str
        """
        return self._registrant_key

    @registrant_key.setter
    def registrant_key(self, registrant_key):
        """Sets the registrant_key of this RegistrantCreated.

        The registrant's key

        :param registrant_key: The registrant_key of this RegistrantCreated.
        :type registrant_key: str
        """
        if registrant_key is None:
            raise ValueError("Invalid value for `registrant_key`, must not be `None`")

        self._registrant_key = registrant_key
