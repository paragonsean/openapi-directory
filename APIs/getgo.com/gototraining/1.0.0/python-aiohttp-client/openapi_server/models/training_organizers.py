# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrainingOrganizers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notify_organizers: bool=None, organizers: List[int]=None):
        """TrainingOrganizers - a model defined in OpenAPI

        :param notify_organizers: The notify_organizers of this TrainingOrganizers.
        :param organizers: The organizers of this TrainingOrganizers.
        """
        self.openapi_types = {
            'notify_organizers': bool,
            'organizers': List[int]
        }

        self.attribute_map = {
            'notify_organizers': 'notifyOrganizers',
            'organizers': 'organizers'
        }

        self._notify_organizers = notify_organizers
        self._organizers = organizers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingOrganizers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingOrganizers of this TrainingOrganizers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notify_organizers(self):
        """Gets the notify_organizers of this TrainingOrganizers.

        Specifies whether an email should be sent notifying of the change to the training's organizers.

        :return: The notify_organizers of this TrainingOrganizers.
        :rtype: bool
        """
        return self._notify_organizers

    @notify_organizers.setter
    def notify_organizers(self, notify_organizers):
        """Sets the notify_organizers of this TrainingOrganizers.

        Specifies whether an email should be sent notifying of the change to the training's organizers.

        :param notify_organizers: The notify_organizers of this TrainingOrganizers.
        :type notify_organizers: bool
        """

        self._notify_organizers = notify_organizers

    @property
    def organizers(self):
        """Gets the organizers of this TrainingOrganizers.

        List of keys of the organizers for the training.

        :return: The organizers of this TrainingOrganizers.
        :rtype: List[int]
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this TrainingOrganizers.

        List of keys of the organizers for the training.

        :param organizers: The organizers of this TrainingOrganizers.
        :type organizers: List[int]
        """
        if organizers is None:
            raise ValueError("Invalid value for `organizers`, must not be `None`")

        self._organizers = organizers
