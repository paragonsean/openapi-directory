# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotifiedParties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notified_registrants: int=None, notified_trainers: int=None):
        """NotifiedParties - a model defined in OpenAPI

        :param notified_registrants: The notified_registrants of this NotifiedParties.
        :param notified_trainers: The notified_trainers of this NotifiedParties.
        """
        self.openapi_types = {
            'notified_registrants': int,
            'notified_trainers': int
        }

        self.attribute_map = {
            'notified_registrants': 'notifiedRegistrants',
            'notified_trainers': 'notifiedTrainers'
        }

        self._notified_registrants = notified_registrants
        self._notified_trainers = notified_trainers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotifiedParties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotifiedParties of this NotifiedParties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notified_registrants(self):
        """Gets the notified_registrants of this NotifiedParties.

        Number of registrants notified of changes to a training

        :return: The notified_registrants of this NotifiedParties.
        :rtype: int
        """
        return self._notified_registrants

    @notified_registrants.setter
    def notified_registrants(self, notified_registrants):
        """Sets the notified_registrants of this NotifiedParties.

        Number of registrants notified of changes to a training

        :param notified_registrants: The notified_registrants of this NotifiedParties.
        :type notified_registrants: int
        """
        if notified_registrants is None:
            raise ValueError("Invalid value for `notified_registrants`, must not be `None`")

        self._notified_registrants = notified_registrants

    @property
    def notified_trainers(self):
        """Gets the notified_trainers of this NotifiedParties.

        Number of trainers notified of changes to a training

        :return: The notified_trainers of this NotifiedParties.
        :rtype: int
        """
        return self._notified_trainers

    @notified_trainers.setter
    def notified_trainers(self, notified_trainers):
        """Sets the notified_trainers of this NotifiedParties.

        Number of trainers notified of changes to a training

        :param notified_trainers: The notified_trainers of this NotifiedParties.
        :type notified_trainers: int
        """
        if notified_trainers is None:
            raise ValueError("Invalid value for `notified_trainers`, must not be `None`")

        self._notified_trainers = notified_trainers
