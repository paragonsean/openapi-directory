# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recording(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, download_url: str=None, end_date: datetime=None, name: str=None, recording_id: int=None, registration_url: str=None, start_date: datetime=None):
        """Recording - a model defined in OpenAPI

        :param description: The description of this Recording.
        :param download_url: The download_url of this Recording.
        :param end_date: The end_date of this Recording.
        :param name: The name of this Recording.
        :param recording_id: The recording_id of this Recording.
        :param registration_url: The registration_url of this Recording.
        :param start_date: The start_date of this Recording.
        """
        self.openapi_types = {
            'description': str,
            'download_url': str,
            'end_date': datetime,
            'name': str,
            'recording_id': int,
            'registration_url': str,
            'start_date': datetime
        }

        self.attribute_map = {
            'description': 'description',
            'download_url': 'downloadUrl',
            'end_date': 'endDate',
            'name': 'name',
            'recording_id': 'recordingId',
            'registration_url': 'registrationUrl',
            'start_date': 'startDate'
        }

        self._description = description
        self._download_url = download_url
        self._end_date = end_date
        self._name = name
        self._recording_id = recording_id
        self._registration_url = registration_url
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recording':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recording of this Recording.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Recording.

        The description of the recording

        :return: The description of this Recording.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Recording.

        The description of the recording

        :param description: The description of this Recording.
        :type description: str
        """

        self._description = description

    @property
    def download_url(self):
        """Gets the download_url of this Recording.

        The url used to download the recording to the local device

        :return: The download_url of this Recording.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Recording.

        The url used to download the recording to the local device

        :param download_url: The download_url of this Recording.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def end_date(self):
        """Gets the end_date of this Recording.

        The time the recording was ended

        :return: The end_date of this Recording.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Recording.

        The time the recording was ended

        :param end_date: The end_date of this Recording.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def name(self):
        """Gets the name of this Recording.

        The title of the recording

        :return: The name of this Recording.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Recording.

        The title of the recording

        :param name: The name of this Recording.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def recording_id(self):
        """Gets the recording_id of this Recording.

        The unique id of the recording

        :return: The recording_id of this Recording.
        :rtype: int
        """
        return self._recording_id

    @recording_id.setter
    def recording_id(self, recording_id):
        """Sets the recording_id of this Recording.

        The unique id of the recording

        :param recording_id: The recording_id of this Recording.
        :type recording_id: int
        """
        if recording_id is None:
            raise ValueError("Invalid value for `recording_id`, must not be `None`")

        self._recording_id = recording_id

    @property
    def registration_url(self):
        """Gets the registration_url of this Recording.

        The url where attendees can register to view the recording

        :return: The registration_url of this Recording.
        :rtype: str
        """
        return self._registration_url

    @registration_url.setter
    def registration_url(self, registration_url):
        """Sets the registration_url of this Recording.

        The url where attendees can register to view the recording

        :param registration_url: The registration_url of this Recording.
        :type registration_url: str
        """

        self._registration_url = registration_url

    @property
    def start_date(self):
        """Gets the start_date of this Recording.

        The time the recording was started

        :return: The start_date of this Recording.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Recording.

        The time the recording was started

        :param start_date: The start_date of this Recording.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
