# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DateTimeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: datetime=None, start_date: datetime=None):
        """DateTimeRange - a model defined in OpenAPI

        :param end_date: The end_date of this DateTimeRange.
        :param start_date: The start_date of this DateTimeRange.
        """
        self.openapi_types = {
            'end_date': datetime,
            'start_date': datetime
        }

        self.attribute_map = {
            'end_date': 'endDate',
            'start_date': 'startDate'
        }

        self._end_date = end_date
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTimeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateTimeRange of this DateTimeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this DateTimeRange.

        The ending time of an interval

        :return: The end_date of this DateTimeRange.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DateTimeRange.

        The ending time of an interval

        :param end_date: The end_date of this DateTimeRange.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def start_date(self):
        """Gets the start_date of this DateTimeRange.

        The starting time of an interval

        :return: The start_date of this DateTimeRange.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DateTimeRange.

        The starting time of an interval

        :param start_date: The start_date of this DateTimeRange.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
