# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organizer import Organizer
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attendance_count: int=None, duration: int=None, organizers: List[Organizer]=None, session_end_time: datetime=None, session_key: str=None, session_start_time: datetime=None, training_name: str=None):
        """Session - a model defined in OpenAPI

        :param attendance_count: The attendance_count of this Session.
        :param duration: The duration of this Session.
        :param organizers: The organizers of this Session.
        :param session_end_time: The session_end_time of this Session.
        :param session_key: The session_key of this Session.
        :param session_start_time: The session_start_time of this Session.
        :param training_name: The training_name of this Session.
        """
        self.openapi_types = {
            'attendance_count': int,
            'duration': int,
            'organizers': List[Organizer],
            'session_end_time': datetime,
            'session_key': str,
            'session_start_time': datetime,
            'training_name': str
        }

        self.attribute_map = {
            'attendance_count': 'attendanceCount',
            'duration': 'duration',
            'organizers': 'organizers',
            'session_end_time': 'sessionEndTime',
            'session_key': 'sessionKey',
            'session_start_time': 'sessionStartTime',
            'training_name': 'trainingName'
        }

        self._attendance_count = attendance_count
        self._duration = duration
        self._organizers = organizers
        self._session_end_time = session_end_time
        self._session_key = session_key
        self._session_start_time = session_start_time
        self._training_name = training_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attendance_count(self):
        """Gets the attendance_count of this Session.

        The number of attendees at the training session

        :return: The attendance_count of this Session.
        :rtype: int
        """
        return self._attendance_count

    @attendance_count.setter
    def attendance_count(self, attendance_count):
        """Sets the attendance_count of this Session.

        The number of attendees at the training session

        :param attendance_count: The attendance_count of this Session.
        :type attendance_count: int
        """
        if attendance_count is None:
            raise ValueError("Invalid value for `attendance_count`, must not be `None`")

        self._attendance_count = attendance_count

    @property
    def duration(self):
        """Gets the duration of this Session.

        The duration of the training session in minutes

        :return: The duration of this Session.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Session.

        The duration of the training session in minutes

        :param duration: The duration of this Session.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def organizers(self):
        """Gets the organizers of this Session.

        The organizers of the training session.

        :return: The organizers of this Session.
        :rtype: List[Organizer]
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this Session.

        The organizers of the training session.

        :param organizers: The organizers of this Session.
        :type organizers: List[Organizer]
        """
        if organizers is None:
            raise ValueError("Invalid value for `organizers`, must not be `None`")

        self._organizers = organizers

    @property
    def session_end_time(self):
        """Gets the session_end_time of this Session.

        The time the training session finished

        :return: The session_end_time of this Session.
        :rtype: datetime
        """
        return self._session_end_time

    @session_end_time.setter
    def session_end_time(self, session_end_time):
        """Sets the session_end_time of this Session.

        The time the training session finished

        :param session_end_time: The session_end_time of this Session.
        :type session_end_time: datetime
        """
        if session_end_time is None:
            raise ValueError("Invalid value for `session_end_time`, must not be `None`")

        self._session_end_time = session_end_time

    @property
    def session_key(self):
        """Gets the session_key of this Session.

        The key of the training session

        :return: The session_key of this Session.
        :rtype: str
        """
        return self._session_key

    @session_key.setter
    def session_key(self, session_key):
        """Sets the session_key of this Session.

        The key of the training session

        :param session_key: The session_key of this Session.
        :type session_key: str
        """
        if session_key is None:
            raise ValueError("Invalid value for `session_key`, must not be `None`")

        self._session_key = session_key

    @property
    def session_start_time(self):
        """Gets the session_start_time of this Session.

        The time the training session started

        :return: The session_start_time of this Session.
        :rtype: datetime
        """
        return self._session_start_time

    @session_start_time.setter
    def session_start_time(self, session_start_time):
        """Sets the session_start_time of this Session.

        The time the training session started

        :param session_start_time: The session_start_time of this Session.
        :type session_start_time: datetime
        """
        if session_start_time is None:
            raise ValueError("Invalid value for `session_start_time`, must not be `None`")

        self._session_start_time = session_start_time

    @property
    def training_name(self):
        """Gets the training_name of this Session.

        The subject of the training

        :return: The training_name of this Session.
        :rtype: str
        """
        return self._training_name

    @training_name.setter
    def training_name(self, training_name):
        """Sets the training_name of this Session.

        The subject of the training

        :param training_name: The training_name of this Session.
        :type training_name: str
        """
        if training_name is None:
            raise ValueError("Invalid value for `training_name`, must not be `None`")

        self._training_name = training_name
