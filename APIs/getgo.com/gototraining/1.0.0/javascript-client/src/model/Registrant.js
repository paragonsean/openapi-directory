/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Registrant model module.
 * @module model/Registrant
 * @version 1.0.0
 */
class Registrant {
    /**
     * Constructs a new <code>Registrant</code>.
     * Describes a training registrant.
     * @alias module:model/Registrant
     * @param confirmationUrl {String} The URL where the confirmation for the registration can be found
     * @param email {String} The registrant's email address
     * @param givenName {String} The registrant's first name
     * @param joinUrl {String} The URL the registrant will use to join the training
     * @param registrantKey {String} The registrant's key
     * @param registrationDate {Date} The date and time the registration took place
     * @param status {module:model/Registrant.StatusEnum} The registrant's status
     * @param surname {String} The registrant's surname
     */
    constructor(confirmationUrl, email, givenName, joinUrl, registrantKey, registrationDate, status, surname) { 
        
        Registrant.initialize(this, confirmationUrl, email, givenName, joinUrl, registrantKey, registrationDate, status, surname);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, confirmationUrl, email, givenName, joinUrl, registrantKey, registrationDate, status, surname) { 
        obj['confirmationUrl'] = confirmationUrl;
        obj['email'] = email;
        obj['givenName'] = givenName;
        obj['joinUrl'] = joinUrl;
        obj['registrantKey'] = registrantKey;
        obj['registrationDate'] = registrationDate;
        obj['status'] = status;
        obj['surname'] = surname;
    }

    /**
     * Constructs a <code>Registrant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Registrant} obj Optional instance to populate.
     * @return {module:model/Registrant} The populated <code>Registrant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Registrant();

            if (data.hasOwnProperty('confirmationUrl')) {
                obj['confirmationUrl'] = ApiClient.convertToType(data['confirmationUrl'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
            if (data.hasOwnProperty('joinUrl')) {
                obj['joinUrl'] = ApiClient.convertToType(data['joinUrl'], 'String');
            }
            if (data.hasOwnProperty('registrantKey')) {
                obj['registrantKey'] = ApiClient.convertToType(data['registrantKey'], 'String');
            }
            if (data.hasOwnProperty('registrationDate')) {
                obj['registrationDate'] = ApiClient.convertToType(data['registrationDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Registrant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Registrant</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Registrant.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['confirmationUrl'] && !(typeof data['confirmationUrl'] === 'string' || data['confirmationUrl'] instanceof String)) {
            throw new Error("Expected the field `confirmationUrl` to be a primitive type in the JSON string but got " + data['confirmationUrl']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }
        // ensure the json data is a string
        if (data['joinUrl'] && !(typeof data['joinUrl'] === 'string' || data['joinUrl'] instanceof String)) {
            throw new Error("Expected the field `joinUrl` to be a primitive type in the JSON string but got " + data['joinUrl']);
        }
        // ensure the json data is a string
        if (data['registrantKey'] && !(typeof data['registrantKey'] === 'string' || data['registrantKey'] instanceof String)) {
            throw new Error("Expected the field `registrantKey` to be a primitive type in the JSON string but got " + data['registrantKey']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }

        return true;
    }


}

Registrant.RequiredProperties = ["confirmationUrl", "email", "givenName", "joinUrl", "registrantKey", "registrationDate", "status", "surname"];

/**
 * The URL where the confirmation for the registration can be found
 * @member {String} confirmationUrl
 */
Registrant.prototype['confirmationUrl'] = undefined;

/**
 * The registrant's email address
 * @member {String} email
 */
Registrant.prototype['email'] = undefined;

/**
 * The registrant's first name
 * @member {String} givenName
 */
Registrant.prototype['givenName'] = undefined;

/**
 * The URL the registrant will use to join the training
 * @member {String} joinUrl
 */
Registrant.prototype['joinUrl'] = undefined;

/**
 * The registrant's key
 * @member {String} registrantKey
 */
Registrant.prototype['registrantKey'] = undefined;

/**
 * The date and time the registration took place
 * @member {Date} registrationDate
 */
Registrant.prototype['registrationDate'] = undefined;

/**
 * The registrant's status
 * @member {module:model/Registrant.StatusEnum} status
 */
Registrant.prototype['status'] = undefined;

/**
 * The registrant's surname
 * @member {String} surname
 */
Registrant.prototype['surname'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Registrant['StatusEnum'] = {

    /**
     * value: "WAITING"
     * @const
     */
    "WAITING": "WAITING",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "DENIED"
     * @const
     */
    "DENIED": "DENIED"
};



export default Registrant;

