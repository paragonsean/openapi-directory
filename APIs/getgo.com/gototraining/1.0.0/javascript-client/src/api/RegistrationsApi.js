/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Registrant from '../model/Registrant';
import RegistrantCreated from '../model/RegistrantCreated';
import RegistrantReqCreate from '../model/RegistrantReqCreate';

/**
* Registrations service.
* @module api/RegistrationsApi
* @version 1.0.0
*/
export default class RegistrationsApi {

    /**
    * Constructs a new RegistrationsApi. 
    * @alias module:api/RegistrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRegistration operation.
     * @callback module:api/RegistrationsApi~cancelRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Registration
     * This call cancels a registration in a scheduled training for a specific registrant. If the registrant has paid for the training, a cancellation cannot be completed with this method; it must be completed on the external admin site. No notification is sent to the registrant or the organizer by default. The registrant can re-register if needed.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {Number} registrantKey The key of the registrant
     * @param {module:api/RegistrationsApi~cancelRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelRegistration(authorization, organizerKey, trainingKey, registrantKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelRegistration");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling cancelRegistration");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling cancelRegistration");
      }
      // verify the required parameter 'registrantKey' is set
      if (registrantKey === undefined || registrantKey === null) {
        throw new Error("Missing the required parameter 'registrantKey' when calling cancelRegistration");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey,
        'registrantKey': registrantKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/registrants/{registrantKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrant operation.
     * @callback module:api/RegistrationsApi~getRegistrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Registrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Registrant
     * Retrieves details for specific registrant in a specific training. Registrants can be:<br>WAITING - registrant registered and is awaiting approval (where organizer has required approval)<br>APPROVED - registrant registered and is approved<br>DENIED - registrant registered and was not approved.<br><br>IMPORTANT: The registrant data caches are typically updated immediately and the data will be returned in the response. However, the update can take as long as two hours.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {Number} registrantKey The key of the registrant
     * @param {module:api/RegistrationsApi~getRegistrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Registrant}
     */
    getRegistrant(authorization, organizerKey, trainingKey, registrantKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRegistrant");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getRegistrant");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getRegistrant");
      }
      // verify the required parameter 'registrantKey' is set
      if (registrantKey === undefined || registrantKey === null) {
        throw new Error("Missing the required parameter 'registrantKey' when calling getRegistrant");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey,
        'registrantKey': registrantKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registrant;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/registrants/{registrantKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrants operation.
     * @callback module:api/RegistrationsApi~getRegistrantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Registrant>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Training Registrants
     * Retrieves details on all registrants for a specific training. Registrants can be:<br>WAITING - registrant registered and is awaiting approval (where organizer has required approval)<br>APPROVED - registrant registered and is approved<br>DENIED - registrant registered and was not approved.<br><br>IMPORTANT: The registrant data caches are typically updated immediately and the data will be returned in the response. However, the update can take as long as two hours.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:api/RegistrationsApi~getRegistrantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Registrant>}
     */
    getRegistrants(authorization, organizerKey, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRegistrants");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getRegistrants");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getRegistrants");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Registrant];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/registrants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerForTraining operation.
     * @callback module:api/RegistrationsApi~registerForTrainingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrantCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register for Training
     * Registers one person, identified by a unique email address, for a training. Approval is automatic unless payment or approval is required. The response contains the Confirmation page URL and Join URL for the registrant. NOTE: If some registrants do not receive a confirmation email, the emails could be getting blocked by their email server due to spam filtering or a grey-listing setting.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:model/RegistrantReqCreate} body The details of the registrant to create
     * @param {module:api/RegistrationsApi~registerForTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrantCreated}
     */
    registerForTraining(authorization, organizerKey, trainingKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling registerForTraining");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling registerForTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling registerForTraining");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerForTraining");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegistrantCreated;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/registrants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
