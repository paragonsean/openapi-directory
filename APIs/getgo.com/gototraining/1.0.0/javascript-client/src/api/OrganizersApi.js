/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Organizer from '../model/Organizer';

/**
* Organizers service.
* @module api/OrganizersApi
* @version 1.0.0
*/
export default class OrganizersApi {

    /**
    * Constructs a new OrganizersApi. 
    * @alias module:api/OrganizersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllOrganisers operation.
     * @callback module:api/OrganizersApi~getAllOrganisersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED: Get Organizers
     * DEPRECATED: Please use the Admin API call 'Get all users' instead. For details see https://goto-developer.logmein.com/get-all-users.
     * @param {String} authorization Access token
     * @param {Number} accountKey The key of the multi-user account
     * @param {module:api/OrganizersApi~getAllOrganisersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organizer>}
     */
    getAllOrganisers(authorization, accountKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllOrganisers");
      }
      // verify the required parameter 'accountKey' is set
      if (accountKey === undefined || accountKey === null) {
        throw new Error("Missing the required parameter 'accountKey' when calling getAllOrganisers");
      }

      let pathParams = {
        'accountKey': accountKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organizer];
      return this.apiClient.callApi(
        '/accounts/{accountKey}/organizers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
