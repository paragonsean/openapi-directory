/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HostUrl from '../model/HostUrl';
import NotifiedParties from '../model/NotifiedParties';
import Organizer from '../model/Organizer';
import RegistrationSettings from '../model/RegistrationSettings';
import Training from '../model/Training';
import TrainingNameDescription from '../model/TrainingNameDescription';
import TrainingOrganizers from '../model/TrainingOrganizers';
import TrainingReqCreate from '../model/TrainingReqCreate';
import TrainingTimes from '../model/TrainingTimes';

/**
* Trainings service.
* @module api/TrainingsApi
* @version 1.0.0
*/
export default class TrainingsApi {

    /**
    * Constructs a new TrainingsApi. 
    * @alias module:api/TrainingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelTraining operation.
     * @callback module:api/TrainingsApi~cancelTrainingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Training
     * Deletes a scheduled or completed training. For scheduled trainings, it deletes all scheduled sessions of the training. For completed trainings, the sessions remain in the database. No email is sent to organizers or registrants, but when participants attempt to start or join the training, they are directed to a page that states: Training Not Found: The training you are trying to join is no longer available.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:api/TrainingsApi~cancelTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelTraining(authorization, organizerKey, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelTraining");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling cancelTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling cancelTraining");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTrainings operation.
     * @callback module:api/TrainingsApi~getAllTrainingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Training>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Trainings
     * This call retrieves information on all scheduled trainings for a given organizer. The trainings are returned in the order in which they were created. Completed trainings are not included; ongoing trainings with past sessions are included along with the past sessions. If the organizer does not have any scheduled trainings, the response will be empty.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {module:api/TrainingsApi~getAllTrainingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Training>}
     */
    getAllTrainings(authorization, organizerKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllTrainings");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAllTrainings");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Training];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManageTrainingURL operation.
     * @callback module:api/TrainingsApi~getManageTrainingURLCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Management URL for Training
     * A request for a direct URL to the admin portal for a specific training. The request identifies the organizer and the training; the response provides a link the organizer can use to manage or launch the training in the admin portal. The training organizer will be required to log in. You can schedule and manage the training (e.g., add tests, polls and training materials) from the URL provided in the response.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:api/TrainingsApi~getManageTrainingURLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getManageTrainingURL(authorization, organizerKey, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getManageTrainingURL");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getManageTrainingURL");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getManageTrainingURL");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/manageUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisersForTraining operation.
     * @callback module:api/TrainingsApi~getOrganisersForTrainingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Training Organizers
     * Retrieves organizer details for a specific training. This is only applicable to multi-user accounts with sharing enabled (co-organizers).
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:api/TrainingsApi~getOrganisersForTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organizer>}
     */
    getOrganisersForTraining(authorization, organizerKey, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOrganisersForTraining");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getOrganisersForTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getOrganisersForTraining");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organizer];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/organizers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStartUrl operation.
     * @callback module:api/TrainingsApi~getStartUrlCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Start Url
     * Returns a URL that can be used to start a training. When this URL is opened in a web browser, the GoToTraining client will be downloaded and launched and the training will start after the organizer logs in with its credentials.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:api/TrainingsApi~getStartUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getStartUrl(authorization, organizerKey, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getStartUrl");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getStartUrl");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getStartUrl");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/startUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTraining operation.
     * @callback module:api/TrainingsApi~getTrainingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Training} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Training
     * Uses the organizer key and training key to retrieve information on a scheduled training.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:api/TrainingsApi~getTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Training}
     */
    getTraining(authorization, organizerKey, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTraining");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getTraining");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Training;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleTraining operation.
     * @callback module:api/TrainingsApi~scheduleTrainingCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Training
     * Schedules a training of one or more sessions. The call requires a training's name, at least one start and end time, and optionally may include additional sessions, a description, additional organizers (presenters), and registration settings. You can only add organizers to a training if you have a multi-user account. Once a training has been created with this method, you can accept registrations to the training. Registration is for the entire training - all sessions. (The GoToTraining admin site enables you to create trainings that allow participants to register for individual sessions as well as automatically create weekly or monthly events.) Registration settings controls whether you allow web registration for this training, and whether a confirmation email is sent to the registrant following registration. Disabling the confirmation email is an API-only setting. If the user registers through the GoToTraining website, a confirmation email is sent. If the user is manually approved by the training administrator through the GoToTraining web site, the confirmation email is sent. It is recommended that you disable web registration if you disable confirmation emails. The response contains a trainingKey for the scheduled training.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {module:model/TrainingReqCreate} body The details of the training to create
     * @param {module:api/TrainingsApi~scheduleTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    scheduleTraining(authorization, organizerKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling scheduleTraining");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling scheduleTraining");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling scheduleTraining");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTraining operation.
     * @callback module:api/TrainingsApi~startTrainingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Training
     * Returns a URL that can be used to start a training. When this URL is opened in a web browser, the GoToTraining client will be downloaded and launched and the training will start. A login of the organizer is not required.
     * @param {String} authorization Access token
     * @param {Number} trainingKey The key of the training
     * @param {module:api/TrainingsApi~startTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostUrl}
     */
    startTraining(authorization, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling startTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling startTraining");
      }

      let pathParams = {
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostUrl;
      return this.apiClient.callApi(
        '/trainings/{trainingKey}/start', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganisersForTraining operation.
     * @callback module:api/TrainingsApi~updateOrganisersForTrainingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Training Organizers
     * Replaces the co-organizers for a specific training. The scheduling organizer cannot be unassigned. Organizers will be notified via email if the notifyOrganizers parameter is set to true. Replaced organizers are not notified. This method is only applicable to multi-user accounts with sharing enabled (co-organizers).
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:model/TrainingOrganizers} body The details of the training to create
     * @param {module:api/TrainingsApi~updateOrganisersForTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganisersForTraining(authorization, organizerKey, trainingKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateOrganisersForTraining");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling updateOrganisersForTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling updateOrganisersForTraining");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOrganisersForTraining");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/organizers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRegistrationSettingsForTraining operation.
     * @callback module:api/TrainingsApi~updateRegistrationSettingsForTrainingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Training Registration Settings
     * An API request to automatically enable or disable web registrations and confirmation emails to registrants.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:model/RegistrationSettings} body The new registration settings for the training
     * @param {module:api/TrainingsApi~updateRegistrationSettingsForTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRegistrationSettingsForTraining(authorization, organizerKey, trainingKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateRegistrationSettingsForTraining");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling updateRegistrationSettingsForTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling updateRegistrationSettingsForTraining");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRegistrationSettingsForTraining");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/registrationSettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrainingNameDescription operation.
     * @callback module:api/TrainingsApi~updateTrainingNameDescriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Training Name and Description
     * Request to update a scheduled training name and description.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:model/TrainingNameDescription} body The new name and description for the training
     * @param {module:api/TrainingsApi~updateTrainingNameDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTrainingNameDescription(authorization, organizerKey, trainingKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateTrainingNameDescription");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling updateTrainingNameDescription");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling updateTrainingNameDescription");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTrainingNameDescription");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/nameDescription', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrainingTimes operation.
     * @callback module:api/TrainingsApi~updateTrainingTimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotifiedParties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Training Times
     *  A request to update a scheduled training's start and end times. If the request contains 'notifyTrainers = true' and 'notifyRegistrants = true', both organizers and registrants are notified. The response provides the number of notified trainers and registrants.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:model/TrainingTimes} body The new start and end times for the scheduled training
     * @param {module:api/TrainingsApi~updateTrainingTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotifiedParties}
     */
    updateTrainingTimes(authorization, organizerKey, trainingKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateTrainingTimes");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling updateTrainingTimes");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling updateTrainingTimes");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTrainingTimes");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotifiedParties;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/trainings/{trainingKey}/times', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
