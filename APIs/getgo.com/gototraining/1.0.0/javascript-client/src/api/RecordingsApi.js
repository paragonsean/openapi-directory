/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RecordingsListForTraining from '../model/RecordingsListForTraining';

/**
* Recordings service.
* @module api/RecordingsApi
* @version 1.0.0
*/
export default class RecordingsApi {

    /**
    * Constructs a new RecordingsApi. 
    * @alias module:api/RecordingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRecordingDownloadById operation.
     * @callback module:api/RecordingsApi~getRecordingDownloadByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Download for Online Recordings
     * This call provides the download for the given recording by returning a 302 redirect to the original file.
     * @param {String} authorization Access token
     * @param {Number} trainingKey The key of the training
     * @param {Number} recordingId the unique id of the recording
     * @param {module:api/RecordingsApi~getRecordingDownloadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecordingDownloadById(authorization, trainingKey, recordingId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRecordingDownloadById");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getRecordingDownloadById");
      }
      // verify the required parameter 'recordingId' is set
      if (recordingId === undefined || recordingId === null) {
        throw new Error("Missing the required parameter 'recordingId' when calling getRecordingDownloadById");
      }

      let pathParams = {
        'trainingKey': trainingKey,
        'recordingId': recordingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/trainings/{trainingKey}/recordings/{recordingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordingsForTraining operation.
     * @callback module:api/RecordingsApi~getRecordingsForTrainingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordingsListForTraining} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Online Recordings for Training
     * This call retrieves information on all online recordings for a given training. If there are none, it returns an empty list.
     * @param {String} authorization Access token
     * @param {Number} trainingKey The key of the training
     * @param {module:api/RecordingsApi~getRecordingsForTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordingsListForTraining}
     */
    getRecordingsForTraining(authorization, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRecordingsForTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getRecordingsForTraining");
      }

      let pathParams = {
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordingsListForTraining;
      return this.apiClient.callApi(
        '/trainings/{trainingKey}/recordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
