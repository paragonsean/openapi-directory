/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attendee from '../model/Attendee';
import DateTimeRange from '../model/DateTimeRange';
import Session from '../model/Session';

/**
* Reports service.
* @module api/ReportsApi
* @version 1.0.0
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAttendanceDetails operation.
     * @callback module:api/ReportsApi~getAttendanceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attendee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Attendance Details
     * This call retrieves a list of registrants from a specific completed training session. The response includes the registrants' email addresses, and if they attended, it includes the duration of each period of their attendance in minutes, and the times at which they joined and left. If a registrant does not attend, they appear at the bottom of the listing with timeInSession = 0.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} sessionKey The key of the training session
     * @param {module:api/ReportsApi~getAttendanceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attendee>}
     */
    getAttendanceDetails(authorization, organizerKey, sessionKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAttendanceDetails");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAttendanceDetails");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getAttendanceDetails");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'sessionKey': sessionKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Attendee];
      return this.apiClient.callApi(
        '/reports/organizers/{organizerKey}/sessions/{sessionKey}/attendees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionDetailsForDateRange operation.
     * @callback module:api/ReportsApi~getSessionDetailsForDateRangeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sessions by Date Range
     * This call returns all session details over a given date range for a given organizer. A session is a completed training event.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {module:model/DateTimeRange} body The start and end times for the time range over which to retrieve training sessions
     * @param {module:api/ReportsApi~getSessionDetailsForDateRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    getSessionDetailsForDateRange(authorization, organizerKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSessionDetailsForDateRange");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getSessionDetailsForDateRange");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSessionDetailsForDateRange");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Session];
      return this.apiClient.callApi(
        '/reports/organizers/{organizerKey}/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionDetailsForTraining operation.
     * @callback module:api/ReportsApi~getSessionDetailsForTrainingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sessions By Training
     * This call returns session details for a given training. A session is a completed training event. Each training may contain one or more sessions.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the training organizer
     * @param {Number} trainingKey The key of the training
     * @param {module:api/ReportsApi~getSessionDetailsForTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    getSessionDetailsForTraining(authorization, organizerKey, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSessionDetailsForTraining");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getSessionDetailsForTraining");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getSessionDetailsForTraining");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'trainingKey': trainingKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Session];
      return this.apiClient.callApi(
        '/reports/organizers/{organizerKey}/trainings/{trainingKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
