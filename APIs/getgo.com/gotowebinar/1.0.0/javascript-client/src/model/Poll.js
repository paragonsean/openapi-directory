/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PollResponse from './PollResponse';

/**
 * The Poll model module.
 * @module model/Poll
 * @version 1.0.0
 */
class Poll {
    /**
     * Constructs a new <code>Poll</code>.
     * A poll or survey launched by an organizer during or after a webinar session; includes the responses given to it by the attendees.
     * @alias module:model/Poll
     * @param numberOfResponses {Number} The total number of responses received for this poll or survey
     * @param question {String} The poll or survey question asked by the webinar organizer
     * @param responses {Array.<module:model/PollResponse>} The responses given by the attendees to the poll or survey
     */
    constructor(numberOfResponses, question, responses) { 
        
        Poll.initialize(this, numberOfResponses, question, responses);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, numberOfResponses, question, responses) { 
        obj['numberOfResponses'] = numberOfResponses;
        obj['question'] = question;
        obj['responses'] = responses;
    }

    /**
     * Constructs a <code>Poll</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Poll} obj Optional instance to populate.
     * @return {module:model/Poll} The populated <code>Poll</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Poll();

            if (data.hasOwnProperty('numberOfResponses')) {
                obj['numberOfResponses'] = ApiClient.convertToType(data['numberOfResponses'], 'Number');
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
            if (data.hasOwnProperty('responses')) {
                obj['responses'] = ApiClient.convertToType(data['responses'], [PollResponse]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Poll</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Poll</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Poll.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['question'] && !(typeof data['question'] === 'string' || data['question'] instanceof String)) {
            throw new Error("Expected the field `question` to be a primitive type in the JSON string but got " + data['question']);
        }
        if (data['responses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['responses'])) {
                throw new Error("Expected the field `responses` to be an array in the JSON data but got " + data['responses']);
            }
            // validate the optional field `responses` (array)
            for (const item of data['responses']) {
                PollResponse.validateJSON(item);
            };
        }

        return true;
    }


}

Poll.RequiredProperties = ["numberOfResponses", "question", "responses"];

/**
 * The total number of responses received for this poll or survey
 * @member {Number} numberOfResponses
 */
Poll.prototype['numberOfResponses'] = undefined;

/**
 * The poll or survey question asked by the webinar organizer
 * @member {String} question
 */
Poll.prototype['question'] = undefined;

/**
 * The responses given by the attendees to the poll or survey
 * @member {Array.<module:model/PollResponse>} responses
 */
Poll.prototype['responses'] = undefined;






export default Poll;

