/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PollsAndSurveysStatistics model module.
 * @module model/PollsAndSurveysStatistics
 * @version 1.0.0
 */
class PollsAndSurveysStatistics {
    /**
     * Constructs a new <code>PollsAndSurveysStatistics</code>.
     * Details on the polls and surveys for a webinar session.
     * @alias module:model/PollsAndSurveysStatistics
     * @param percentagePollsCompleted {Number} The percentage of polls completed by the attendees
     * @param percentageSurveysCompleted {Number} The percentage of surveys completed by the attendees
     * @param pollCount {Number} The number of polls launched at a webinar session
     * @param questionsAsked {Number} The number of questions asked at a webinar session
     * @param surveyCount {Number} The percentage of surveys launched at a webinar session
     */
    constructor(percentagePollsCompleted, percentageSurveysCompleted, pollCount, questionsAsked, surveyCount) { 
        
        PollsAndSurveysStatistics.initialize(this, percentagePollsCompleted, percentageSurveysCompleted, pollCount, questionsAsked, surveyCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, percentagePollsCompleted, percentageSurveysCompleted, pollCount, questionsAsked, surveyCount) { 
        obj['percentagePollsCompleted'] = percentagePollsCompleted;
        obj['percentageSurveysCompleted'] = percentageSurveysCompleted;
        obj['pollCount'] = pollCount;
        obj['questionsAsked'] = questionsAsked;
        obj['surveyCount'] = surveyCount;
    }

    /**
     * Constructs a <code>PollsAndSurveysStatistics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PollsAndSurveysStatistics} obj Optional instance to populate.
     * @return {module:model/PollsAndSurveysStatistics} The populated <code>PollsAndSurveysStatistics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PollsAndSurveysStatistics();

            if (data.hasOwnProperty('percentagePollsCompleted')) {
                obj['percentagePollsCompleted'] = ApiClient.convertToType(data['percentagePollsCompleted'], 'Number');
            }
            if (data.hasOwnProperty('percentageSurveysCompleted')) {
                obj['percentageSurveysCompleted'] = ApiClient.convertToType(data['percentageSurveysCompleted'], 'Number');
            }
            if (data.hasOwnProperty('pollCount')) {
                obj['pollCount'] = ApiClient.convertToType(data['pollCount'], 'Number');
            }
            if (data.hasOwnProperty('questionsAsked')) {
                obj['questionsAsked'] = ApiClient.convertToType(data['questionsAsked'], 'Number');
            }
            if (data.hasOwnProperty('surveyCount')) {
                obj['surveyCount'] = ApiClient.convertToType(data['surveyCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PollsAndSurveysStatistics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PollsAndSurveysStatistics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PollsAndSurveysStatistics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

PollsAndSurveysStatistics.RequiredProperties = ["percentagePollsCompleted", "percentageSurveysCompleted", "pollCount", "questionsAsked", "surveyCount"];

/**
 * The percentage of polls completed by the attendees
 * @member {Number} percentagePollsCompleted
 */
PollsAndSurveysStatistics.prototype['percentagePollsCompleted'] = undefined;

/**
 * The percentage of surveys completed by the attendees
 * @member {Number} percentageSurveysCompleted
 */
PollsAndSurveysStatistics.prototype['percentageSurveysCompleted'] = undefined;

/**
 * The number of polls launched at a webinar session
 * @member {Number} pollCount
 */
PollsAndSurveysStatistics.prototype['pollCount'] = undefined;

/**
 * The number of questions asked at a webinar session
 * @member {Number} questionsAsked
 */
PollsAndSurveysStatistics.prototype['questionsAsked'] = undefined;

/**
 * The percentage of surveys launched at a webinar session
 * @member {Number} surveyCount
 */
PollsAndSurveysStatistics.prototype['surveyCount'] = undefined;






export default PollsAndSurveysStatistics;

