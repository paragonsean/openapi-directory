/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateTimeRange from './DateTimeRange';

/**
 * The Webinar model module.
 * @module model/Webinar
 * @version 1.0.0
 */
class Webinar {
    /**
     * Constructs a new <code>Webinar</code>.
     * Describes a scheduled webinar
     * @alias module:model/Webinar
     * @param description {String} A short description of the webinar
     * @param inSession {Boolean} Indicates whether there is a webinar session currently in progress
     * @param numberOfRegistrants {Number} The number of registrants at the webinar
     * @param organizerKey {Number} The key of the webinar organizer
     * @param registrationUrl {String} The URL the webinar invitees can use to register
     * @param subject {String} The webinar subject
     * @param timeZone {String} The timezone where the webinar is taking place
     * @param times {Array.<module:model/DateTimeRange>} Array with startTime and endTime for the webinar sessions
     * @param webinarID {String} The 9-digit webinar ID
     * @param webinarKey {Number} The unique key of the webinar
     */
    constructor(description, inSession, numberOfRegistrants, organizerKey, registrationUrl, subject, timeZone, times, webinarID, webinarKey) { 
        
        Webinar.initialize(this, description, inSession, numberOfRegistrants, organizerKey, registrationUrl, subject, timeZone, times, webinarID, webinarKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, inSession, numberOfRegistrants, organizerKey, registrationUrl, subject, timeZone, times, webinarID, webinarKey) { 
        obj['description'] = description;
        obj['inSession'] = inSession;
        obj['numberOfRegistrants'] = numberOfRegistrants;
        obj['organizerKey'] = organizerKey;
        obj['registrationUrl'] = registrationUrl;
        obj['subject'] = subject;
        obj['timeZone'] = timeZone;
        obj['times'] = times;
        obj['webinarID'] = webinarID;
        obj['webinarKey'] = webinarKey;
    }

    /**
     * Constructs a <code>Webinar</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Webinar} obj Optional instance to populate.
     * @return {module:model/Webinar} The populated <code>Webinar</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Webinar();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('inSession')) {
                obj['inSession'] = ApiClient.convertToType(data['inSession'], 'Boolean');
            }
            if (data.hasOwnProperty('numberOfRegistrants')) {
                obj['numberOfRegistrants'] = ApiClient.convertToType(data['numberOfRegistrants'], 'Number');
            }
            if (data.hasOwnProperty('organizerKey')) {
                obj['organizerKey'] = ApiClient.convertToType(data['organizerKey'], 'Number');
            }
            if (data.hasOwnProperty('registrationUrl')) {
                obj['registrationUrl'] = ApiClient.convertToType(data['registrationUrl'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('times')) {
                obj['times'] = ApiClient.convertToType(data['times'], [DateTimeRange]);
            }
            if (data.hasOwnProperty('webinarID')) {
                obj['webinarID'] = ApiClient.convertToType(data['webinarID'], 'String');
            }
            if (data.hasOwnProperty('webinarKey')) {
                obj['webinarKey'] = ApiClient.convertToType(data['webinarKey'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Webinar</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Webinar</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Webinar.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['registrationUrl'] && !(typeof data['registrationUrl'] === 'string' || data['registrationUrl'] instanceof String)) {
            throw new Error("Expected the field `registrationUrl` to be a primitive type in the JSON string but got " + data['registrationUrl']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        if (data['times']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['times'])) {
                throw new Error("Expected the field `times` to be an array in the JSON data but got " + data['times']);
            }
            // validate the optional field `times` (array)
            for (const item of data['times']) {
                DateTimeRange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['webinarID'] && !(typeof data['webinarID'] === 'string' || data['webinarID'] instanceof String)) {
            throw new Error("Expected the field `webinarID` to be a primitive type in the JSON string but got " + data['webinarID']);
        }

        return true;
    }


}

Webinar.RequiredProperties = ["description", "inSession", "numberOfRegistrants", "organizerKey", "registrationUrl", "subject", "timeZone", "times", "webinarID", "webinarKey"];

/**
 * A short description of the webinar
 * @member {String} description
 */
Webinar.prototype['description'] = undefined;

/**
 * Indicates whether there is a webinar session currently in progress
 * @member {Boolean} inSession
 */
Webinar.prototype['inSession'] = undefined;

/**
 * The number of registrants at the webinar
 * @member {Number} numberOfRegistrants
 */
Webinar.prototype['numberOfRegistrants'] = undefined;

/**
 * The key of the webinar organizer
 * @member {Number} organizerKey
 */
Webinar.prototype['organizerKey'] = undefined;

/**
 * The URL the webinar invitees can use to register
 * @member {String} registrationUrl
 */
Webinar.prototype['registrationUrl'] = undefined;

/**
 * The webinar subject
 * @member {String} subject
 */
Webinar.prototype['subject'] = undefined;

/**
 * The timezone where the webinar is taking place
 * @member {String} timeZone
 */
Webinar.prototype['timeZone'] = undefined;

/**
 * Array with startTime and endTime for the webinar sessions
 * @member {Array.<module:model/DateTimeRange>} times
 */
Webinar.prototype['times'] = undefined;

/**
 * The 9-digit webinar ID
 * @member {String} webinarID
 */
Webinar.prototype['webinarID'] = undefined;

/**
 * The unique key of the webinar
 * @member {Number} webinarKey
 */
Webinar.prototype['webinarKey'] = undefined;






export default Webinar;

