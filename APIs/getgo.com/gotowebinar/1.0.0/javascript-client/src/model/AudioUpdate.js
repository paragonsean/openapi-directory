/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioType from './AudioType';
import PrivateInfoUpdate from './PrivateInfoUpdate';
import PstnInfoUpdate from './PstnInfoUpdate';

/**
 * The AudioUpdate model module.
 * @module model/AudioUpdate
 * @version 1.0.0
 */
class AudioUpdate {
    /**
     * Constructs a new <code>AudioUpdate</code>.
     * Defines the audio/conferencing settings for the specified webinar
     * @alias module:model/AudioUpdate
     * @param type {module:model/AudioType} 
     */
    constructor(type) { 
        
        AudioUpdate.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AudioUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioUpdate} obj Optional instance to populate.
     * @return {module:model/AudioUpdate} The populated <code>AudioUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioUpdate();

            if (data.hasOwnProperty('privateInfo')) {
                obj['privateInfo'] = PrivateInfoUpdate.constructFromObject(data['privateInfo']);
            }
            if (data.hasOwnProperty('pstnInfo')) {
                obj['pstnInfo'] = PstnInfoUpdate.constructFromObject(data['pstnInfo']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = AudioType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `privateInfo`
        if (data['privateInfo']) { // data not null
          PrivateInfoUpdate.validateJSON(data['privateInfo']);
        }
        // validate the optional field `pstnInfo`
        if (data['pstnInfo']) { // data not null
          PstnInfoUpdate.validateJSON(data['pstnInfo']);
        }

        return true;
    }


}

AudioUpdate.RequiredProperties = ["type"];

/**
 * @member {module:model/PrivateInfoUpdate} privateInfo
 */
AudioUpdate.prototype['privateInfo'] = undefined;

/**
 * @member {module:model/PstnInfoUpdate} pstnInfo
 */
AudioUpdate.prototype['pstnInfo'] = undefined;

/**
 * @member {module:model/AudioType} type
 */
AudioUpdate.prototype['type'] = undefined;






export default AudioUpdate;

