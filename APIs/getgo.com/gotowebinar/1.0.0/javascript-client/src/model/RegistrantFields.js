/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegistrantQAResponse from './RegistrantQAResponse';

/**
 * The RegistrantFields model module.
 * @module model/RegistrantFields
 * @version 1.0.0
 */
class RegistrantFields {
    /**
     * Constructs a new <code>RegistrantFields</code>.
     * Detailed description of a all fields to register a registrant for a webinar.
     * @alias module:model/RegistrantFields
     * @param email {String} The registrant's email address
     * @param firstName {String} The registrant's first name
     * @param lastName {String} The registrant's last name
     */
    constructor(email, firstName, lastName) { 
        
        RegistrantFields.initialize(this, email, firstName, lastName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, firstName, lastName) { 
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
    }

    /**
     * Constructs a <code>RegistrantFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrantFields} obj Optional instance to populate.
     * @return {module:model/RegistrantFields} The populated <code>RegistrantFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrantFields();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ApiClient.convertToType(data['industry'], 'String');
            }
            if (data.hasOwnProperty('jobTitle')) {
                obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('numberOfEmployees')) {
                obj['numberOfEmployees'] = ApiClient.convertToType(data['numberOfEmployees'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('purchasingRole')) {
                obj['purchasingRole'] = ApiClient.convertToType(data['purchasingRole'], 'String');
            }
            if (data.hasOwnProperty('purchasingTimeFrame')) {
                obj['purchasingTimeFrame'] = ApiClient.convertToType(data['purchasingTimeFrame'], 'String');
            }
            if (data.hasOwnProperty('questionsAndComments')) {
                obj['questionsAndComments'] = ApiClient.convertToType(data['questionsAndComments'], 'String');
            }
            if (data.hasOwnProperty('responses')) {
                obj['responses'] = ApiClient.convertToType(data['responses'], [RegistrantQAResponse]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('zipCode')) {
                obj['zipCode'] = ApiClient.convertToType(data['zipCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrantFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrantFields</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrantFields.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['industry'] && !(typeof data['industry'] === 'string' || data['industry'] instanceof String)) {
            throw new Error("Expected the field `industry` to be a primitive type in the JSON string but got " + data['industry']);
        }
        // ensure the json data is a string
        if (data['jobTitle'] && !(typeof data['jobTitle'] === 'string' || data['jobTitle'] instanceof String)) {
            throw new Error("Expected the field `jobTitle` to be a primitive type in the JSON string but got " + data['jobTitle']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['numberOfEmployees'] && !(typeof data['numberOfEmployees'] === 'string' || data['numberOfEmployees'] instanceof String)) {
            throw new Error("Expected the field `numberOfEmployees` to be a primitive type in the JSON string but got " + data['numberOfEmployees']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['purchasingRole'] && !(typeof data['purchasingRole'] === 'string' || data['purchasingRole'] instanceof String)) {
            throw new Error("Expected the field `purchasingRole` to be a primitive type in the JSON string but got " + data['purchasingRole']);
        }
        // ensure the json data is a string
        if (data['purchasingTimeFrame'] && !(typeof data['purchasingTimeFrame'] === 'string' || data['purchasingTimeFrame'] instanceof String)) {
            throw new Error("Expected the field `purchasingTimeFrame` to be a primitive type in the JSON string but got " + data['purchasingTimeFrame']);
        }
        // ensure the json data is a string
        if (data['questionsAndComments'] && !(typeof data['questionsAndComments'] === 'string' || data['questionsAndComments'] instanceof String)) {
            throw new Error("Expected the field `questionsAndComments` to be a primitive type in the JSON string but got " + data['questionsAndComments']);
        }
        if (data['responses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['responses'])) {
                throw new Error("Expected the field `responses` to be an array in the JSON data but got " + data['responses']);
            }
            // validate the optional field `responses` (array)
            for (const item of data['responses']) {
                RegistrantQAResponse.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['zipCode'] && !(typeof data['zipCode'] === 'string' || data['zipCode'] instanceof String)) {
            throw new Error("Expected the field `zipCode` to be a primitive type in the JSON string but got " + data['zipCode']);
        }

        return true;
    }


}

RegistrantFields.RequiredProperties = ["email", "firstName", "lastName"];

/**
 * The registrant's address
 * @member {String} address
 */
RegistrantFields.prototype['address'] = undefined;

/**
 * The registrant's city
 * @member {String} city
 */
RegistrantFields.prototype['city'] = undefined;

/**
 * The registrant's country
 * @member {String} country
 */
RegistrantFields.prototype['country'] = undefined;

/**
 * The registrant's email address
 * @member {String} email
 */
RegistrantFields.prototype['email'] = undefined;

/**
 * The registrant's first name
 * @member {String} firstName
 */
RegistrantFields.prototype['firstName'] = undefined;

/**
 * The type of industry the registrant's organization belongs to
 * @member {String} industry
 */
RegistrantFields.prototype['industry'] = undefined;

/**
 * The registrant's job title
 * @member {String} jobTitle
 */
RegistrantFields.prototype['jobTitle'] = undefined;

/**
 * The registrant's last name
 * @member {String} lastName
 */
RegistrantFields.prototype['lastName'] = undefined;

/**
 * The size in employees of the registrant's organization
 * @member {String} numberOfEmployees
 */
RegistrantFields.prototype['numberOfEmployees'] = undefined;

/**
 * The registrant's organization
 * @member {String} organization
 */
RegistrantFields.prototype['organization'] = undefined;

/**
 * The registrant's phone
 * @member {String} phone
 */
RegistrantFields.prototype['phone'] = undefined;

/**
 * The registrant's role in purchasing the product
 * @member {String} purchasingRole
 */
RegistrantFields.prototype['purchasingRole'] = undefined;

/**
 * The time frame within which the product will be purchased
 * @member {String} purchasingTimeFrame
 */
RegistrantFields.prototype['purchasingTimeFrame'] = undefined;

/**
 * Any questions or comments the registrant made at the time of registration
 * @member {String} questionsAndComments
 */
RegistrantFields.prototype['questionsAndComments'] = undefined;

/**
 * Set the answers of all questions
 * @member {Array.<module:model/RegistrantQAResponse>} responses
 */
RegistrantFields.prototype['responses'] = undefined;

/**
 * The source that led to the registration. This can be any string like 'Newsletter 123' or 'Marketing campaign ABC'
 * @member {String} source
 */
RegistrantFields.prototype['source'] = undefined;

/**
 * The registrant's state (US only)
 * @member {String} state
 */
RegistrantFields.prototype['state'] = undefined;

/**
 * The registrant's zip (post) code
 * @member {String} zipCode
 */
RegistrantFields.prototype['zipCode'] = undefined;






export default RegistrantFields;

