/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessCodes from './AccessCodes';

/**
 * The CallNumbers model module.
 * @module model/CallNumbers
 * @version 1.0.0
 */
class CallNumbers {
    /**
     * Constructs a new <code>CallNumbers</code>.
     * Conference call numbers per country.
     * @alias module:model/CallNumbers
     * @param accessCodes {module:model/AccessCodes} 
     * @param toll {String} Conference number for toll calls.
     */
    constructor(accessCodes, toll) { 
        
        CallNumbers.initialize(this, accessCodes, toll);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessCodes, toll) { 
        obj['accessCodes'] = accessCodes;
        obj['toll'] = toll;
    }

    /**
     * Constructs a <code>CallNumbers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallNumbers} obj Optional instance to populate.
     * @return {module:model/CallNumbers} The populated <code>CallNumbers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallNumbers();

            if (data.hasOwnProperty('accessCodes')) {
                obj['accessCodes'] = AccessCodes.constructFromObject(data['accessCodes']);
            }
            if (data.hasOwnProperty('toll')) {
                obj['toll'] = ApiClient.convertToType(data['toll'], 'String');
            }
            if (data.hasOwnProperty('tollFree')) {
                obj['tollFree'] = ApiClient.convertToType(data['tollFree'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallNumbers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallNumbers</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CallNumbers.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accessCodes`
        if (data['accessCodes']) { // data not null
          AccessCodes.validateJSON(data['accessCodes']);
        }
        // ensure the json data is a string
        if (data['toll'] && !(typeof data['toll'] === 'string' || data['toll'] instanceof String)) {
            throw new Error("Expected the field `toll` to be a primitive type in the JSON string but got " + data['toll']);
        }
        // ensure the json data is a string
        if (data['tollFree'] && !(typeof data['tollFree'] === 'string' || data['tollFree'] instanceof String)) {
            throw new Error("Expected the field `tollFree` to be a primitive type in the JSON string but got " + data['tollFree']);
        }

        return true;
    }


}

CallNumbers.RequiredProperties = ["accessCodes", "toll"];

/**
 * @member {module:model/AccessCodes} accessCodes
 */
CallNumbers.prototype['accessCodes'] = undefined;

/**
 * Conference number for toll calls.
 * @member {String} toll
 */
CallNumbers.prototype['toll'] = undefined;

/**
 * Conference number for toll-free calls.
 * @member {String} tollFree
 */
CallNumbers.prototype['tollFree'] = undefined;






export default CallNumbers;

