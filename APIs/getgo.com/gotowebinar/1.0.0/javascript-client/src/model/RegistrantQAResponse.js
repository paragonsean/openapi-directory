/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegistrantQAResponse model module.
 * @module model/RegistrantQAResponse
 * @version 1.0.0
 */
class RegistrantQAResponse {
    /**
     * Constructs a new <code>RegistrantQAResponse</code>.
     * Describes a completed registration question for a webinar registrant. If you use &#39;Multiple choice&#39; questions the response contains the numeric answerKey, otherwise the answer text. Example:&lt;br&gt;{&lt;br&gt;  \&quot;firstName\&quot;: \&quot;First\&quot;,&lt;br&gt;  \&quot;lastName\&quot;: \&quot;Last\&quot;,&lt;br&gt;  \&quot;email\&quot;: \&quot;First.Last@example.com\&quot;,&lt;br&gt;  \&quot;responses\&quot;: [{&lt;br&gt;      \&quot;questionKey\&quot;: 17023549,&lt;br&gt;      \&quot;responseText\&quot;: \&quot;This is a short answer\&quot;},{&lt;br&gt;      \&quot;questionKey\&quot;: 17023550,&lt;br&gt;      \&quot;answerKey\&quot;: 17023553}  ]&lt;br&gt;}
     * @alias module:model/RegistrantQAResponse
     * @param questionKey {Number} The unique key of the question
     */
    constructor(questionKey) { 
        
        RegistrantQAResponse.initialize(this, questionKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, questionKey) { 
        obj['questionKey'] = questionKey;
    }

    /**
     * Constructs a <code>RegistrantQAResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrantQAResponse} obj Optional instance to populate.
     * @return {module:model/RegistrantQAResponse} The populated <code>RegistrantQAResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrantQAResponse();

            if (data.hasOwnProperty('answerKey')) {
                obj['answerKey'] = ApiClient.convertToType(data['answerKey'], 'Number');
            }
            if (data.hasOwnProperty('questionKey')) {
                obj['questionKey'] = ApiClient.convertToType(data['questionKey'], 'Number');
            }
            if (data.hasOwnProperty('responseText')) {
                obj['responseText'] = ApiClient.convertToType(data['responseText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrantQAResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrantQAResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrantQAResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['responseText'] && !(typeof data['responseText'] === 'string' || data['responseText'] instanceof String)) {
            throw new Error("Expected the field `responseText` to be a primitive type in the JSON string but got " + data['responseText']);
        }

        return true;
    }


}

RegistrantQAResponse.RequiredProperties = ["questionKey"];

/**
 * The numeric key of the answer to a multiple-choice question.
 * @member {Number} answerKey
 */
RegistrantQAResponse.prototype['answerKey'] = undefined;

/**
 * The unique key of the question
 * @member {Number} questionKey
 */
RegistrantQAResponse.prototype['questionKey'] = undefined;

/**
 * Answer of the question.
 * @member {String} responseText
 */
RegistrantQAResponse.prototype['responseText'] = undefined;






export default RegistrantQAResponse;

