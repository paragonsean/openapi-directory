/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegistrationField model module.
 * @module model/RegistrationField
 * @version 1.0.0
 */
class RegistrationField {
    /**
     * Constructs a new <code>RegistrationField</code>.
     * Describes a field for a webinar registration.
     * @alias module:model/RegistrationField
     * @param field {String} The name of the registration field
     * @param maxSize {Number} The character size of the custom registration field (max 128)
     * @param required {Boolean} Indicates whether the custom registration field is compulsory
     */
    constructor(field, maxSize, required) { 
        
        RegistrationField.initialize(this, field, maxSize, required);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, field, maxSize, required) { 
        obj['field'] = field;
        obj['maxSize'] = maxSize;
        obj['required'] = required;
    }

    /**
     * Constructs a <code>RegistrationField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrationField} obj Optional instance to populate.
     * @return {module:model/RegistrationField} The populated <code>RegistrationField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrationField();

            if (data.hasOwnProperty('answers')) {
                obj['answers'] = ApiClient.convertToType(data['answers'], ['String']);
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('maxSize')) {
                obj['maxSize'] = ApiClient.convertToType(data['maxSize'], 'Number');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrationField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrationField</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrationField.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['answers'])) {
            throw new Error("Expected the field `answers` to be an array in the JSON data but got " + data['answers']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }

        return true;
    }


}

RegistrationField.RequiredProperties = ["field", "maxSize", "required"];

/**
 * List of choices for a multiple choice registration field
 * @member {Array.<String>} answers
 */
RegistrationField.prototype['answers'] = undefined;

/**
 * The name of the registration field
 * @member {String} field
 */
RegistrationField.prototype['field'] = undefined;

/**
 * The character size of the custom registration field (max 128)
 * @member {Number} maxSize
 */
RegistrationField.prototype['maxSize'] = undefined;

/**
 * Indicates whether the custom registration field is compulsory
 * @member {Boolean} required
 */
RegistrationField.prototype['required'] = undefined;






export default RegistrationField;

