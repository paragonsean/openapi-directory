/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attendance from './Attendance';

/**
 * The Attendee model module.
 * @module model/Attendee
 * @version 1.0.0
 */
class Attendee {
    /**
     * Constructs a new <code>Attendee</code>.
     * Describes the attendee of a webinar
     * @alias module:model/Attendee
     * @param attendance {Array.<module:model/Attendance>} The list of times the attendee joined and left the webinar session
     * @param attendanceTimeInSeconds {Number} The total attendance time in seconds
     * @param email {String} The attendee's email address
     * @param firstName {String} The attendee's first name
     * @param lastName {String} The attendee's last name
     * @param registrantKey {Number} The key of the webinar attendee
     * @param sessionKey {Number} The unique key of the webinar session
     */
    constructor(attendance, attendanceTimeInSeconds, email, firstName, lastName, registrantKey, sessionKey) { 
        
        Attendee.initialize(this, attendance, attendanceTimeInSeconds, email, firstName, lastName, registrantKey, sessionKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attendance, attendanceTimeInSeconds, email, firstName, lastName, registrantKey, sessionKey) { 
        obj['attendance'] = attendance;
        obj['attendanceTimeInSeconds'] = attendanceTimeInSeconds;
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
        obj['registrantKey'] = registrantKey;
        obj['sessionKey'] = sessionKey;
    }

    /**
     * Constructs a <code>Attendee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attendee} obj Optional instance to populate.
     * @return {module:model/Attendee} The populated <code>Attendee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attendee();

            if (data.hasOwnProperty('attendance')) {
                obj['attendance'] = ApiClient.convertToType(data['attendance'], [Attendance]);
            }
            if (data.hasOwnProperty('attendanceTimeInSeconds')) {
                obj['attendanceTimeInSeconds'] = ApiClient.convertToType(data['attendanceTimeInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('registrantKey')) {
                obj['registrantKey'] = ApiClient.convertToType(data['registrantKey'], 'Number');
            }
            if (data.hasOwnProperty('sessionKey')) {
                obj['sessionKey'] = ApiClient.convertToType(data['sessionKey'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attendee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attendee</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attendee.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attendance']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attendance'])) {
                throw new Error("Expected the field `attendance` to be an array in the JSON data but got " + data['attendance']);
            }
            // validate the optional field `attendance` (array)
            for (const item of data['attendance']) {
                Attendance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }

        return true;
    }


}

Attendee.RequiredProperties = ["attendance", "attendanceTimeInSeconds", "email", "firstName", "lastName", "registrantKey", "sessionKey"];

/**
 * The list of times the attendee joined and left the webinar session
 * @member {Array.<module:model/Attendance>} attendance
 */
Attendee.prototype['attendance'] = undefined;

/**
 * The total attendance time in seconds
 * @member {Number} attendanceTimeInSeconds
 */
Attendee.prototype['attendanceTimeInSeconds'] = undefined;

/**
 * The attendee's email address
 * @member {String} email
 */
Attendee.prototype['email'] = undefined;

/**
 * The attendee's first name
 * @member {String} firstName
 */
Attendee.prototype['firstName'] = undefined;

/**
 * The attendee's last name
 * @member {String} lastName
 */
Attendee.prototype['lastName'] = undefined;

/**
 * The key of the webinar attendee
 * @member {Number} registrantKey
 */
Attendee.prototype['registrantKey'] = undefined;

/**
 * The unique key of the webinar session
 * @member {Number} sessionKey
 */
Attendee.prototype['sessionKey'] = undefined;






export default Attendee;

