/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegistrationField from './RegistrationField';
import RegistrationQuestion from './RegistrationQuestion';

/**
 * The RegistrationFields model module.
 * @module model/RegistrationFields
 * @version 1.0.0
 */
class RegistrationFields {
    /**
     * Constructs a new <code>RegistrationFields</code>.
     * The fields to be completed on the webinar registration form.
     * @alias module:model/RegistrationFields
     * @param fields {Array.<module:model/RegistrationField>} The default fields the organizer has selected for the webinar registration form
     * @param questions {Array.<module:model/RegistrationQuestion>} Custom fields created by the organizer for the webinar registration form
     */
    constructor(fields, questions) { 
        
        RegistrationFields.initialize(this, fields, questions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fields, questions) { 
        obj['fields'] = fields;
        obj['questions'] = questions;
    }

    /**
     * Constructs a <code>RegistrationFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrationFields} obj Optional instance to populate.
     * @return {module:model/RegistrationFields} The populated <code>RegistrationFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrationFields();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [RegistrationField]);
            }
            if (data.hasOwnProperty('questions')) {
                obj['questions'] = ApiClient.convertToType(data['questions'], [RegistrationQuestion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrationFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrationFields</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrationFields.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                RegistrationField.validateJSON(item);
            };
        }
        if (data['questions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['questions'])) {
                throw new Error("Expected the field `questions` to be an array in the JSON data but got " + data['questions']);
            }
            // validate the optional field `questions` (array)
            for (const item of data['questions']) {
                RegistrationQuestion.validateJSON(item);
            };
        }

        return true;
    }


}

RegistrationFields.RequiredProperties = ["fields", "questions"];

/**
 * The default fields the organizer has selected for the webinar registration form
 * @member {Array.<module:model/RegistrationField>} fields
 */
RegistrationFields.prototype['fields'] = undefined;

/**
 * Custom fields created by the organizer for the webinar registration form
 * @member {Array.<module:model/RegistrationQuestion>} questions
 */
RegistrationFields.prototype['questions'] = undefined;






export default RegistrationFields;

