/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PollResponse model module.
 * @module model/PollResponse
 * @version 1.0.0
 */
class PollResponse {
    /**
     * Constructs a new <code>PollResponse</code>.
     * One of the potential responses/options to a poll or survey launched by an organizer during a webinar session.
     * @alias module:model/PollResponse
     * @param percentage {Number} The percentage of responses that favored this particular option
     * @param text {String} The text of the response/option to a poll or survey
     */
    constructor(percentage, text) { 
        
        PollResponse.initialize(this, percentage, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, percentage, text) { 
        obj['percentage'] = percentage;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>PollResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PollResponse} obj Optional instance to populate.
     * @return {module:model/PollResponse} The populated <code>PollResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PollResponse();

            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PollResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PollResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PollResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

PollResponse.RequiredProperties = ["percentage", "text"];

/**
 * The percentage of responses that favored this particular option
 * @member {Number} percentage
 */
PollResponse.prototype['percentage'] = undefined;

/**
 * The text of the response/option to a poll or survey
 * @member {String} text
 */
PollResponse.prototype['text'] = undefined;






export default PollResponse;

