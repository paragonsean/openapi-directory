/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegistrationAnswer from './RegistrationAnswer';

/**
 * The RegistrationQuestion model module.
 * @module model/RegistrationQuestion
 * @version 1.0.0
 */
class RegistrationQuestion {
    /**
     * Constructs a new <code>RegistrationQuestion</code>.
     * Describes a custom field for a webinar registration.
     * @alias module:model/RegistrationQuestion
     * @param maxSize {Number} The character size of the custom registration field (max 1000)
     * @param question {String} The value (text) of the custom registration field
     * @param questionKey {Number} The unique key of the custom registration field
     * @param required {Boolean} Indicates whether the custom registration field is compulsory
     * @param type {module:model/RegistrationQuestion.TypeEnum} Indicates whether the custom registration field requires a single short answer or whether it is a multiple choice question
     */
    constructor(maxSize, question, questionKey, required, type) { 
        
        RegistrationQuestion.initialize(this, maxSize, question, questionKey, required, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, maxSize, question, questionKey, required, type) { 
        obj['maxSize'] = maxSize;
        obj['question'] = question;
        obj['questionKey'] = questionKey;
        obj['required'] = required;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RegistrationQuestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrationQuestion} obj Optional instance to populate.
     * @return {module:model/RegistrationQuestion} The populated <code>RegistrationQuestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrationQuestion();

            if (data.hasOwnProperty('answers')) {
                obj['answers'] = ApiClient.convertToType(data['answers'], [RegistrationAnswer]);
            }
            if (data.hasOwnProperty('maxSize')) {
                obj['maxSize'] = ApiClient.convertToType(data['maxSize'], 'Number');
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
            if (data.hasOwnProperty('questionKey')) {
                obj['questionKey'] = ApiClient.convertToType(data['questionKey'], 'Number');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrationQuestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrationQuestion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrationQuestion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['answers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['answers'])) {
                throw new Error("Expected the field `answers` to be an array in the JSON data but got " + data['answers']);
            }
            // validate the optional field `answers` (array)
            for (const item of data['answers']) {
                RegistrationAnswer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['question'] && !(typeof data['question'] === 'string' || data['question'] instanceof String)) {
            throw new Error("Expected the field `question` to be a primitive type in the JSON string but got " + data['question']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RegistrationQuestion.RequiredProperties = ["maxSize", "question", "questionKey", "required", "type"];

/**
 * The answers to a multiple choice custom registration field
 * @member {Array.<module:model/RegistrationAnswer>} answers
 */
RegistrationQuestion.prototype['answers'] = undefined;

/**
 * The character size of the custom registration field (max 1000)
 * @member {Number} maxSize
 */
RegistrationQuestion.prototype['maxSize'] = undefined;

/**
 * The value (text) of the custom registration field
 * @member {String} question
 */
RegistrationQuestion.prototype['question'] = undefined;

/**
 * The unique key of the custom registration field
 * @member {Number} questionKey
 */
RegistrationQuestion.prototype['questionKey'] = undefined;

/**
 * Indicates whether the custom registration field is compulsory
 * @member {Boolean} required
 */
RegistrationQuestion.prototype['required'] = undefined;

/**
 * Indicates whether the custom registration field requires a single short answer or whether it is a multiple choice question
 * @member {module:model/RegistrationQuestion.TypeEnum} type
 */
RegistrationQuestion.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RegistrationQuestion['TypeEnum'] = {

    /**
     * value: "multipleChoice"
     * @const
     */
    "multipleChoice": "multipleChoice",

    /**
     * value: "shortAnswer"
     * @const
     */
    "shortAnswer": "shortAnswer"
};



export default RegistrationQuestion;

