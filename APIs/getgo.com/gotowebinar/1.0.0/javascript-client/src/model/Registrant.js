/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Registrant model module.
 * @module model/Registrant
 * @version 1.0.0
 */
class Registrant {
    /**
     * Constructs a new <code>Registrant</code>.
     * Describes a webinar registrant
     * @alias module:model/Registrant
     * @param email {String} The registrant's email address
     * @param firstName {String} The registrant's first name
     * @param joinUrl {String} The URL the registrant will use to join the webinar
     * @param lastName {String} The registrant's last name
     * @param registrantKey {Number} The registrant's key
     * @param registrationDate {Date} The registration date and time
     * @param status {module:model/Registrant.StatusEnum} The registration status
     * @param timeZone {String} The time zone where the webinar will take place
     */
    constructor(email, firstName, joinUrl, lastName, registrantKey, registrationDate, status, timeZone) { 
        
        Registrant.initialize(this, email, firstName, joinUrl, lastName, registrantKey, registrationDate, status, timeZone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, firstName, joinUrl, lastName, registrantKey, registrationDate, status, timeZone) { 
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['joinUrl'] = joinUrl;
        obj['lastName'] = lastName;
        obj['registrantKey'] = registrantKey;
        obj['registrationDate'] = registrationDate;
        obj['status'] = status;
        obj['timeZone'] = timeZone;
    }

    /**
     * Constructs a <code>Registrant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Registrant} obj Optional instance to populate.
     * @return {module:model/Registrant} The populated <code>Registrant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Registrant();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('joinUrl')) {
                obj['joinUrl'] = ApiClient.convertToType(data['joinUrl'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('registrantKey')) {
                obj['registrantKey'] = ApiClient.convertToType(data['registrantKey'], 'Number');
            }
            if (data.hasOwnProperty('registrationDate')) {
                obj['registrationDate'] = ApiClient.convertToType(data['registrationDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Registrant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Registrant</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Registrant.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['joinUrl'] && !(typeof data['joinUrl'] === 'string' || data['joinUrl'] instanceof String)) {
            throw new Error("Expected the field `joinUrl` to be a primitive type in the JSON string but got " + data['joinUrl']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}

Registrant.RequiredProperties = ["email", "firstName", "joinUrl", "lastName", "registrantKey", "registrationDate", "status", "timeZone"];

/**
 * The registrant's email address
 * @member {String} email
 */
Registrant.prototype['email'] = undefined;

/**
 * The registrant's first name
 * @member {String} firstName
 */
Registrant.prototype['firstName'] = undefined;

/**
 * The URL the registrant will use to join the webinar
 * @member {String} joinUrl
 */
Registrant.prototype['joinUrl'] = undefined;

/**
 * The registrant's last name
 * @member {String} lastName
 */
Registrant.prototype['lastName'] = undefined;

/**
 * The registrant's key
 * @member {Number} registrantKey
 */
Registrant.prototype['registrantKey'] = undefined;

/**
 * The registration date and time
 * @member {Date} registrationDate
 */
Registrant.prototype['registrationDate'] = undefined;

/**
 * The registration status
 * @member {module:model/Registrant.StatusEnum} status
 */
Registrant.prototype['status'] = undefined;

/**
 * The time zone where the webinar will take place
 * @member {String} timeZone
 */
Registrant.prototype['timeZone'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Registrant['StatusEnum'] = {

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "DENIED"
     * @const
     */
    "DENIED": "DENIED",

    /**
     * value: "WAITING"
     * @const
     */
    "WAITING": "WAITING"
};



export default Registrant;

