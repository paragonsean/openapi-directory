/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Session model module.
 * @module model/Session
 * @version 1.0.0
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * Describes a completed webinar session.
     * @alias module:model/Session
     * @param endTime {Date} The ending time of the webinar session
     * @param registrantsAttended {Number} The number of registrants who attended the webinar session
     * @param sessionKey {Number} The unique key of the webinar session
     * @param startTime {Date} The starting time of the webinar session
     * @param webinarID {String} The 9-digit webinar ID
     * @param webinarKey {Number} The unique key of the webinar
     */
    constructor(endTime, registrantsAttended, sessionKey, startTime, webinarID, webinarKey) { 
        
        Session.initialize(this, endTime, registrantsAttended, sessionKey, startTime, webinarID, webinarKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endTime, registrantsAttended, sessionKey, startTime, webinarID, webinarKey) { 
        obj['endTime'] = endTime;
        obj['registrantsAttended'] = registrantsAttended;
        obj['sessionKey'] = sessionKey;
        obj['startTime'] = startTime;
        obj['webinarID'] = webinarID;
        obj['webinarKey'] = webinarKey;
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('registrantsAttended')) {
                obj['registrantsAttended'] = ApiClient.convertToType(data['registrantsAttended'], 'Number');
            }
            if (data.hasOwnProperty('sessionKey')) {
                obj['sessionKey'] = ApiClient.convertToType(data['sessionKey'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('webinarID')) {
                obj['webinarID'] = ApiClient.convertToType(data['webinarID'], 'String');
            }
            if (data.hasOwnProperty('webinarKey')) {
                obj['webinarKey'] = ApiClient.convertToType(data['webinarKey'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Session.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['webinarID'] && !(typeof data['webinarID'] === 'string' || data['webinarID'] instanceof String)) {
            throw new Error("Expected the field `webinarID` to be a primitive type in the JSON string but got " + data['webinarID']);
        }

        return true;
    }


}

Session.RequiredProperties = ["endTime", "registrantsAttended", "sessionKey", "startTime", "webinarID", "webinarKey"];

/**
 * The ending time of the webinar session
 * @member {Date} endTime
 */
Session.prototype['endTime'] = undefined;

/**
 * The number of registrants who attended the webinar session
 * @member {Number} registrantsAttended
 */
Session.prototype['registrantsAttended'] = undefined;

/**
 * The unique key of the webinar session
 * @member {Number} sessionKey
 */
Session.prototype['sessionKey'] = undefined;

/**
 * The starting time of the webinar session
 * @member {Date} startTime
 */
Session.prototype['startTime'] = undefined;

/**
 * The 9-digit webinar ID
 * @member {String} webinarID
 */
Session.prototype['webinarID'] = undefined;

/**
 * The unique key of the webinar
 * @member {Number} webinarKey
 */
Session.prototype['webinarKey'] = undefined;






export default Session;

