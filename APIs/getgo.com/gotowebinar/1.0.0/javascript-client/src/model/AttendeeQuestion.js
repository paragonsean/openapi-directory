/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnswerToAttendeeQuestion from './AnswerToAttendeeQuestion';

/**
 * The AttendeeQuestion model module.
 * @module model/AttendeeQuestion
 * @version 1.0.0
 */
class AttendeeQuestion {
    /**
     * Constructs a new <code>AttendeeQuestion</code>.
     * Describes the question asked by an attendee during a webinar session; includes the answers given to it.
     * @alias module:model/AttendeeQuestion
     * @param answers {Array.<module:model/AnswerToAttendeeQuestion>} Answer to a question of an attendee and key of the organizer that answered
     * @param askedBy {String} The email address of the attendee that asked the question
     * @param question {String} The question asked by the attendee
     */
    constructor(answers, askedBy, question) { 
        
        AttendeeQuestion.initialize(this, answers, askedBy, question);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, answers, askedBy, question) { 
        obj['answers'] = answers;
        obj['askedBy'] = askedBy;
        obj['question'] = question;
    }

    /**
     * Constructs a <code>AttendeeQuestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttendeeQuestion} obj Optional instance to populate.
     * @return {module:model/AttendeeQuestion} The populated <code>AttendeeQuestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttendeeQuestion();

            if (data.hasOwnProperty('answers')) {
                obj['answers'] = ApiClient.convertToType(data['answers'], [AnswerToAttendeeQuestion]);
            }
            if (data.hasOwnProperty('askedBy')) {
                obj['askedBy'] = ApiClient.convertToType(data['askedBy'], 'String');
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttendeeQuestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttendeeQuestion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AttendeeQuestion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['answers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['answers'])) {
                throw new Error("Expected the field `answers` to be an array in the JSON data but got " + data['answers']);
            }
            // validate the optional field `answers` (array)
            for (const item of data['answers']) {
                AnswerToAttendeeQuestion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['askedBy'] && !(typeof data['askedBy'] === 'string' || data['askedBy'] instanceof String)) {
            throw new Error("Expected the field `askedBy` to be a primitive type in the JSON string but got " + data['askedBy']);
        }
        // ensure the json data is a string
        if (data['question'] && !(typeof data['question'] === 'string' || data['question'] instanceof String)) {
            throw new Error("Expected the field `question` to be a primitive type in the JSON string but got " + data['question']);
        }

        return true;
    }


}

AttendeeQuestion.RequiredProperties = ["answers", "askedBy", "question"];

/**
 * Answer to a question of an attendee and key of the organizer that answered
 * @member {Array.<module:model/AnswerToAttendeeQuestion>} answers
 */
AttendeeQuestion.prototype['answers'] = undefined;

/**
 * The email address of the attendee that asked the question
 * @member {String} askedBy
 */
AttendeeQuestion.prototype['askedBy'] = undefined;

/**
 * The question asked by the attendee
 * @member {String} question
 */
AttendeeQuestion.prototype['question'] = undefined;






export default AttendeeQuestion;

