/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreatedPanelist model module.
 * @module model/CreatedPanelist
 * @version 1.0.0
 */
class CreatedPanelist {
    /**
     * Constructs a new <code>CreatedPanelist</code>.
     * Describes a created panelist
     * @alias module:model/CreatedPanelist
     * @param email {String} The panelist's email address
     * @param joinLink {String} The panelist's join link
     * @param name {String} The panelist's name
     * @param panelistKey {String} The panelist's key
     */
    constructor(email, joinLink, name, panelistKey) { 
        
        CreatedPanelist.initialize(this, email, joinLink, name, panelistKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, joinLink, name, panelistKey) { 
        obj['email'] = email;
        obj['joinLink'] = joinLink;
        obj['name'] = name;
        obj['panelistKey'] = panelistKey;
    }

    /**
     * Constructs a <code>CreatedPanelist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreatedPanelist} obj Optional instance to populate.
     * @return {module:model/CreatedPanelist} The populated <code>CreatedPanelist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreatedPanelist();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('joinLink')) {
                obj['joinLink'] = ApiClient.convertToType(data['joinLink'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('panelistKey')) {
                obj['panelistKey'] = ApiClient.convertToType(data['panelistKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreatedPanelist</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreatedPanelist</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreatedPanelist.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['joinLink'] && !(typeof data['joinLink'] === 'string' || data['joinLink'] instanceof String)) {
            throw new Error("Expected the field `joinLink` to be a primitive type in the JSON string but got " + data['joinLink']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['panelistKey'] && !(typeof data['panelistKey'] === 'string' || data['panelistKey'] instanceof String)) {
            throw new Error("Expected the field `panelistKey` to be a primitive type in the JSON string but got " + data['panelistKey']);
        }

        return true;
    }


}

CreatedPanelist.RequiredProperties = ["email", "joinLink", "name", "panelistKey"];

/**
 * The panelist's email address
 * @member {String} email
 */
CreatedPanelist.prototype['email'] = undefined;

/**
 * The panelist's join link
 * @member {String} joinLink
 */
CreatedPanelist.prototype['joinLink'] = undefined;

/**
 * The panelist's name
 * @member {String} name
 */
CreatedPanelist.prototype['name'] = undefined;

/**
 * The panelist's key
 * @member {String} panelistKey
 */
CreatedPanelist.prototype['panelistKey'] = undefined;






export default CreatedPanelist;

