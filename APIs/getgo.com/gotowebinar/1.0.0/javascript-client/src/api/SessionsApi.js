/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attendee from '../model/Attendee';
import AttendeeQuestion from '../model/AttendeeQuestion';
import Poll from '../model/Poll';
import Session from '../model/Session';
import SessionPerformance from '../model/SessionPerformance';

/**
* Sessions service.
* @module api/SessionsApi
* @version 1.0.0
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllSessions operation.
     * @callback module:api/SessionsApi~getAllSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webinar sessions
     * Retrieves details for all past sessions of a specific webinar.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/SessionsApi~getAllSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    getAllSessions(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllSessions");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAllSessions");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAllSessions");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Session];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizerSessions operation.
     * @callback module:api/SessionsApi~getOrganizerSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organizer sessions
     * Retrieve all completed sessions of all the webinars of a given organizer.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Date} fromTime A required start of datetime range in ISO8601 UTC format, e.g. 2015-07-13T10:00:00Z
     * @param {Date} toTime A required end of datetime range in ISO8601 UTC format, e.g. 2015-07-13T22:00:00Z
     * @param {module:api/SessionsApi~getOrganizerSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    getOrganizerSessions(authorization, organizerKey, fromTime, toTime, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOrganizerSessions");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getOrganizerSessions");
      }
      // verify the required parameter 'fromTime' is set
      if (fromTime === undefined || fromTime === null) {
        throw new Error("Missing the required parameter 'fromTime' when calling getOrganizerSessions");
      }
      // verify the required parameter 'toTime' is set
      if (toTime === undefined || toTime === null) {
        throw new Error("Missing the required parameter 'toTime' when calling getOrganizerSessions");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
        'fromTime': fromTime,
        'toTime': toTime
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Session];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPerformance operation.
     * @callback module:api/SessionsApi~getPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionPerformance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session performance
     * Get performance details for a session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {module:api/SessionsApi~getPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionPerformance}
     */
    getPerformance(authorization, organizerKey, webinarKey, sessionKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPerformance");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getPerformance");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getPerformance");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getPerformance");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionPerformance;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolls operation.
     * @callback module:api/SessionsApi~getPollsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Poll>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session polls
     * Retrieve all collated attendee questions and answers for polls from a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {module:api/SessionsApi~getPollsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Poll>}
     */
    getPolls(authorization, organizerKey, webinarKey, sessionKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPolls");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getPolls");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getPolls");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getPolls");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Poll];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/polls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestions operation.
     * @callback module:api/SessionsApi~getQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AttendeeQuestion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session questions
     * Retrieve questions and answers for a past webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {module:api/SessionsApi~getQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AttendeeQuestion>}
     */
    getQuestions(authorization, organizerKey, webinarKey, sessionKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getQuestions");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getQuestions");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getQuestions");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getQuestions");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AttendeeQuestion];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSurveys operation.
     * @callback module:api/SessionsApi~getSurveysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Poll>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session surveys
     * Retrieve surveys for a past webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {module:api/SessionsApi~getSurveysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Poll>}
     */
    getSurveys(authorization, organizerKey, webinarKey, sessionKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSurveys");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getSurveys");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getSurveys");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getSurveys");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Poll];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/surveys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebinarSession operation.
     * @callback module:api/SessionsApi~getWebinarSessionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attendee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webinar session
     * Retrieves attendance details for a specific webinar session that has ended. If attendees attended the session ('registrantsAttended'), specific attendance details, such as attendenceTime for a registrant, will also be retrieved. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {module:api/SessionsApi~getWebinarSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attendee>}
     */
    getWebinarSession(authorization, organizerKey, webinarKey, sessionKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWebinarSession");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getWebinarSession");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getWebinarSession");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getWebinarSession");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Attendee];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
