/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Coorganizer from '../model/Coorganizer';
import CoorganizerReqCreate from '../model/CoorganizerReqCreate';

/**
* CoOrganizers service.
* @module api/CoOrganizersApi
* @version 1.0.0
*/
export default class CoOrganizersApi {

    /**
    * Constructs a new CoOrganizersApi. 
    * @alias module:api/CoOrganizersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCoorganizers operation.
     * @callback module:api/CoOrganizersApi~createCoorganizersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Coorganizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create co-organizers
     * Creates co-organizers for the specified webinar. For co-organizers that have a GoToWebinar account you have to set the parameter 'external' to 'false'. In this case you have to pass the parameter 'organizerKey' only. For co-organizers that have no GoToWebinar account you have to set the parameter 'external' to 'true'. In this case you have to pass the parameters 'givenName' and 'email'. Since there is no parameter for 'surname' you should pass first and last name to the parameter 'givenName'.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Array.<module:model/CoorganizerReqCreate>} body The co-organizer details
     * @param {module:api/CoOrganizersApi~createCoorganizersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Coorganizer>}
     */
    createCoorganizers(authorization, organizerKey, webinarKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createCoorganizers");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling createCoorganizers");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling createCoorganizers");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCoorganizers");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Coorganizer];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/coorganizers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoorganizer operation.
     * @callback module:api/CoOrganizersApi~deleteCoorganizerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete co-organizer
     * Deletes an internal co-organizer specified by the coorganizerKey (memberKey).
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} coorganizerKey The key of the internal or external co-organizer (memberKey)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [external] By default only internal co-organizers (with a GoToWebinar account) can be deleted. If you want to use this call for external co-organizers you have to set this parameter to 'true'.
     * @param {module:api/CoOrganizersApi~deleteCoorganizerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCoorganizer(authorization, organizerKey, webinarKey, coorganizerKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCoorganizer");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling deleteCoorganizer");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling deleteCoorganizer");
      }
      // verify the required parameter 'coorganizerKey' is set
      if (coorganizerKey === undefined || coorganizerKey === null) {
        throw new Error("Missing the required parameter 'coorganizerKey' when calling deleteCoorganizer");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'coorganizerKey': coorganizerKey
      };
      let queryParams = {
        'external': opts['external']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/coorganizers/{coorganizerKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCoorganizers operation.
     * @callback module:api/CoOrganizersApi~getCoorganizersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Coorganizer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get co-organizers
     * Returns the co-organizers for the specified webinar. The original organizer who created the webinar is filtered out of the list. If the webinar has no co-organizers, an empty array is returned. Co-organizers that do not have a GoToWebinar account are returned as external co-organizers. For those organizers no surname is returned.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/CoOrganizersApi~getCoorganizersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Coorganizer>}
     */
    getCoorganizers(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCoorganizers");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getCoorganizers");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getCoorganizers");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Coorganizer];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/coorganizers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendCoorganizerInvitation operation.
     * @callback module:api/CoOrganizersApi~resendCoorganizerInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend invitation
     * Resends an invitation email to the specified co-organizer
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} coorganizerKey The key of the internal or external co-organizer (memberKey)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [external] By default only internal co-organizers (with a GoToWebinar account) will retrieve the resent invitation email. If you want to use this call for external co-organizers you have to set this parameter to 'true'.
     * @param {module:api/CoOrganizersApi~resendCoorganizerInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resendCoorganizerInvitation(authorization, organizerKey, webinarKey, coorganizerKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling resendCoorganizerInvitation");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling resendCoorganizerInvitation");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling resendCoorganizerInvitation");
      }
      // verify the required parameter 'coorganizerKey' is set
      if (coorganizerKey === undefined || coorganizerKey === null) {
        throw new Error("Missing the required parameter 'coorganizerKey' when calling resendCoorganizerInvitation");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'coorganizerKey': coorganizerKey
      };
      let queryParams = {
        'external': opts['external']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/coorganizers/{coorganizerKey}/resendInvitation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
