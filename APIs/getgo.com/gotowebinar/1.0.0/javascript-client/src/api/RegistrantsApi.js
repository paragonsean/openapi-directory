/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Registrant from '../model/Registrant';
import RegistrantCreated from '../model/RegistrantCreated';
import RegistrantDetailed from '../model/RegistrantDetailed';
import RegistrantFields from '../model/RegistrantFields';
import RegistrationFields from '../model/RegistrationFields';

/**
* Registrants service.
* @module api/RegistrantsApi
* @version 1.0.0
*/
export default class RegistrantsApi {

    /**
    * Constructs a new RegistrantsApi. 
    * @alias module:api/RegistrantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRegistrant operation.
     * @callback module:api/RegistrantsApi~createRegistrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrantCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create registrant
     * Register an attendee for a scheduled webinar. The response contains the registrantKey and join URL for the registrant. An email will be sent to the registrant unless the organizer turns off the confirmation email setting from the GoToWebinar website. Please note that you must provide all required fields including custom fields defined during the webinar creation. Use the API call 'Get registration fields' to get a list of all fields, if they are required, and their possible values. At this time there are two versions of the 'Create Registrant' call. The first version only accepts firstName, lastName, and email and ignores all other fields. If you have custom fields or want to capture additional information this version won't work for you. The second version allows you to pass all required and optional fields, including custom fields defined when creating the webinar. To use the second version you must pass the header value 'Accept: application/vnd.citrix.g2wapi-v1.1+json' instead of 'Accept: application/json'. Leaving this header out results in the first version of the API call.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:model/RegistrantFields} body The registrant details. To get all possible values run the API call 'Get registration fields' which is also part of this documentation.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] Set to 'application/vnd.citrix.g2wapi-v1.1+json' to make a registration using fields (custom or default) additional to the basic ones.
     * @param {Boolean} [resendConfirmation] Indicates whether the confirmation email should be resent when a registrant is re-registered. The default value is false.
     * @param {module:api/RegistrantsApi~createRegistrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrantCreated}
     */
    createRegistrant(authorization, organizerKey, webinarKey, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createRegistrant");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling createRegistrant");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling createRegistrant");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRegistrant");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
        'resendConfirmation': opts['resendConfirmation']
      };
      let headerParams = {
        'Authorization': authorization,
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegistrantCreated;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/registrants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistrant operation.
     * @callback module:api/RegistrantsApi~deleteRegistrantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete registrant
     * Removes a webinar registrant from current registrations for the specified webinar. The webinar must be a scheduled, future webinar.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} registrantKey The key of the registrant
     * @param {module:api/RegistrantsApi~deleteRegistrantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRegistrant(authorization, organizerKey, webinarKey, registrantKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteRegistrant");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling deleteRegistrant");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling deleteRegistrant");
      }
      // verify the required parameter 'registrantKey' is set
      if (registrantKey === undefined || registrantKey === null) {
        throw new Error("Missing the required parameter 'registrantKey' when calling deleteRegistrant");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'registrantKey': registrantKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/registrants/{registrantKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRegistrantsForWebinar operation.
     * @callback module:api/RegistrantsApi~getAllRegistrantsForWebinarCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Registrant>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registrants
     * Retrieve registration details for all registrants of a specific webinar. Registrant details will not include all fields captured when creating the registrant. To see all data, use the API call 'Get Registrant'. Registrants can have one of the following states; <br>WAITING - registrant registered and is awaiting approval (where organizer has required approval), <br>APPROVED - registrant registered and is approved, and <br>DENIED - registrant registered and was denied.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/RegistrantsApi~getAllRegistrantsForWebinarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Registrant>}
     */
    getAllRegistrantsForWebinar(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllRegistrantsForWebinar");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAllRegistrantsForWebinar");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAllRegistrantsForWebinar");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Registrant];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/registrants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrant operation.
     * @callback module:api/RegistrantsApi~getRegistrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrantDetailed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registrant
     * Retrieve registration details for a specific registrant.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} registrantKey The key of the registrant
     * @param {module:api/RegistrantsApi~getRegistrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrantDetailed}
     */
    getRegistrant(authorization, organizerKey, webinarKey, registrantKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRegistrant");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getRegistrant");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getRegistrant");
      }
      // verify the required parameter 'registrantKey' is set
      if (registrantKey === undefined || registrantKey === null) {
        throw new Error("Missing the required parameter 'registrantKey' when calling getRegistrant");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'registrantKey': registrantKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegistrantDetailed;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/registrants/{registrantKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationFields operation.
     * @callback module:api/RegistrantsApi~getRegistrationFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrationFields} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registration fields
     * Retrieve required, optional registration, and custom questions for a specified webinar.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/RegistrantsApi~getRegistrationFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrationFields}
     */
    getRegistrationFields(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRegistrationFields");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getRegistrationFields");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getRegistrationFields");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegistrationFields;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/registrants/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
