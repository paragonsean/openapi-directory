/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attendee from '../model/Attendee';
import AttendeeQuestion from '../model/AttendeeQuestion';
import PollAnswer from '../model/PollAnswer';
import Registrant from '../model/Registrant';

/**
* Attendees service.
* @module api/AttendeesApi
* @version 1.0.0
*/
export default class AttendeesApi {

    /**
    * Constructs a new AttendeesApi. 
    * @alias module:api/AttendeesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAttendee operation.
     * @callback module:api/AttendeesApi~getAttendeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Registrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendee
     * Retrieve registration details for a particular attendee of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {Number} registrantKey The key of the registrant
     * @param {module:api/AttendeesApi~getAttendeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Registrant}
     */
    getAttendee(authorization, organizerKey, webinarKey, sessionKey, registrantKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAttendee");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAttendee");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAttendee");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getAttendee");
      }
      // verify the required parameter 'registrantKey' is set
      if (registrantKey === undefined || registrantKey === null) {
        throw new Error("Missing the required parameter 'registrantKey' when calling getAttendee");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey,
        'registrantKey': registrantKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registrant;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees/{registrantKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttendeePollAnswers operation.
     * @callback module:api/AttendeesApi~getAttendeePollAnswersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PollAnswer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendee poll answers
     * Get poll answers from a particular attendee of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {Number} registrantKey The key of the registrant
     * @param {module:api/AttendeesApi~getAttendeePollAnswersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PollAnswer>}
     */
    getAttendeePollAnswers(authorization, organizerKey, webinarKey, sessionKey, registrantKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAttendeePollAnswers");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAttendeePollAnswers");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAttendeePollAnswers");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getAttendeePollAnswers");
      }
      // verify the required parameter 'registrantKey' is set
      if (registrantKey === undefined || registrantKey === null) {
        throw new Error("Missing the required parameter 'registrantKey' when calling getAttendeePollAnswers");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey,
        'registrantKey': registrantKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PollAnswer];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees/{registrantKey}/polls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttendeeQuestions operation.
     * @callback module:api/AttendeesApi~getAttendeeQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AttendeeQuestion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendee questions
     * Get questions asked by an attendee during a webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {Number} registrantKey The key of the registrant
     * @param {module:api/AttendeesApi~getAttendeeQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AttendeeQuestion>}
     */
    getAttendeeQuestions(authorization, organizerKey, webinarKey, sessionKey, registrantKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAttendeeQuestions");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAttendeeQuestions");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAttendeeQuestions");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getAttendeeQuestions");
      }
      // verify the required parameter 'registrantKey' is set
      if (registrantKey === undefined || registrantKey === null) {
        throw new Error("Missing the required parameter 'registrantKey' when calling getAttendeeQuestions");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey,
        'registrantKey': registrantKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AttendeeQuestion];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees/{registrantKey}/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttendeeSurveyAnswers operation.
     * @callback module:api/AttendeesApi~getAttendeeSurveyAnswersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PollAnswer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendee survey answers
     * Retrieve survey answers from a particular attendee during a webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {Number} registrantKey The key of the registrant
     * @param {module:api/AttendeesApi~getAttendeeSurveyAnswersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PollAnswer>}
     */
    getAttendeeSurveyAnswers(authorization, organizerKey, webinarKey, sessionKey, registrantKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAttendeeSurveyAnswers");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAttendeeSurveyAnswers");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAttendeeSurveyAnswers");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getAttendeeSurveyAnswers");
      }
      // verify the required parameter 'registrantKey' is set
      if (registrantKey === undefined || registrantKey === null) {
        throw new Error("Missing the required parameter 'registrantKey' when calling getAttendeeSurveyAnswers");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey,
        'registrantKey': registrantKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PollAnswer];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees/{registrantKey}/surveys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttendees operation.
     * @callback module:api/AttendeesApi~getAttendeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attendee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session attendees
     * Retrieve details for all attendees of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} sessionKey The key of the webinar session
     * @param {module:api/AttendeesApi~getAttendeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attendee>}
     */
    getAttendees(authorization, organizerKey, webinarKey, sessionKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAttendees");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAttendees");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAttendees");
      }
      // verify the required parameter 'sessionKey' is set
      if (sessionKey === undefined || sessionKey === null) {
        throw new Error("Missing the required parameter 'sessionKey' when calling getAttendees");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'sessionKey': sessionKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Attendee];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
