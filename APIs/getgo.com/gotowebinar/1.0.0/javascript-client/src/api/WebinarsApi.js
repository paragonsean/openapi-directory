/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountWebinarsResponse from '../model/AccountWebinarsResponse';
import Attendee from '../model/Attendee';
import Audio from '../model/Audio';
import AudioUpdate from '../model/AudioUpdate';
import CreatedWebinar from '../model/CreatedWebinar';
import DateTimeRange from '../model/DateTimeRange';
import HistoricalWebinar from '../model/HistoricalWebinar';
import SessionPerformance from '../model/SessionPerformance';
import UpcomingWebinar from '../model/UpcomingWebinar';
import Webinar from '../model/Webinar';
import WebinarByKey from '../model/WebinarByKey';
import WebinarReqCreate from '../model/WebinarReqCreate';
import WebinarReqUpdate from '../model/WebinarReqUpdate';

/**
* Webinars service.
* @module api/WebinarsApi
* @version 1.0.0
*/
export default class WebinarsApi {

    /**
    * Constructs a new WebinarsApi. 
    * @alias module:api/WebinarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelWebinar operation.
     * @callback module:api/WebinarsApi~cancelWebinarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel webinar
     * Cancels a specific webinar. If the webinar is a series or sequence, this call deletes all scheduled sessions. To send cancellation emails to registrants set sendCancellationEmails=true in the request. When the cancellation emails are sent, the default generated message is used in the cancellation email body.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Object} opts Optional parameters
     * @param {Boolean} [sendCancellationEmails] Indicates whether cancellation notice emails should be sent. The default value is false
     * @param {module:api/WebinarsApi~cancelWebinarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelWebinar(authorization, organizerKey, webinarKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelWebinar");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling cancelWebinar");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling cancelWebinar");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
        'sendCancellationEmails': opts['sendCancellationEmails']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWebinar operation.
     * @callback module:api/WebinarsApi~createWebinarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedWebinar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create webinar
     * Creates a single session webinar, a sequence of webinars or a series of webinars depending on the type field in the body: \"single_session\" creates a single webinar session, \"sequence\" creates a webinar with multiple meeting times where attendees are expected to be the same for all sessions, and \"series\" creates a webinar with multiple meetings times where attendees choose only one to attend. The default, if no type is declared, is single_session. A sequence webinar requires a \"recurrenceStart\" object consisting of a \"startTime\" and \"endTime\" key for the first webinar of the sequence, a \"recurrencePattern\" of \"daily\", \"weekly\", \"monthly\", and a \"recurrenceEnd\" which is the last date of the sequence (for example, 2016-12-01). A series webinar requires a \"times\" array with a discrete \"startTime\" and \"endTime\" for each webinar in the series. The call requires a webinar subject and description. The \"isPasswordProtected\" sets whether the webinar requires a password for attendees to join. If set to True, the organizer must go to Registration Settings at My Webinars (https://global.gotowebinar.com/webinars.tmpl) and add the password to the webinar, and send the password to the registrants. The response provides a numeric webinarKey in string format for the new webinar. Once a webinar has been created with this method, you can accept registrations.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {module:model/WebinarReqCreate} body The webinar details
     * @param {module:api/WebinarsApi~createWebinarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedWebinar}
     */
    createWebinar(authorization, organizerKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createWebinar");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling createWebinar");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWebinar");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatedWebinar;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAccountWebinars operation.
     * @callback module:api/WebinarsApi~getAllAccountWebinarsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountWebinarsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all webinars for an account
     * Retrieves the list of webinars for an account within a given date range. __*Page*__ and __*size*__ parameters are optional. Default __*page*__ is 0 and default __*size*__ is 20. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param {String} authorization Access token
     * @param {Number} accountKey The key of the account
     * @param {Date} fromTime A required start of datetime range in ISO8601 UTC format, e.g. 2015-07-13T10:00:00Z
     * @param {Date} toTime A required end of datetime range in ISO8601 UTC format, e.g. 2015-07-13T22:00:00Z
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number to be displayed. The first page is 0.
     * @param {Number} [size] The size of the page.
     * @param {module:api/WebinarsApi~getAllAccountWebinarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountWebinarsResponse}
     */
    getAllAccountWebinars(authorization, accountKey, fromTime, toTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllAccountWebinars");
      }
      // verify the required parameter 'accountKey' is set
      if (accountKey === undefined || accountKey === null) {
        throw new Error("Missing the required parameter 'accountKey' when calling getAllAccountWebinars");
      }
      // verify the required parameter 'fromTime' is set
      if (fromTime === undefined || fromTime === null) {
        throw new Error("Missing the required parameter 'fromTime' when calling getAllAccountWebinars");
      }
      // verify the required parameter 'toTime' is set
      if (toTime === undefined || toTime === null) {
        throw new Error("Missing the required parameter 'toTime' when calling getAllAccountWebinars");
      }

      let pathParams = {
        'accountKey': accountKey
      };
      let queryParams = {
        'fromTime': fromTime,
        'toTime': toTime,
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountWebinarsResponse;
      return this.apiClient.callApi(
        '/accounts/{accountKey}/webinars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWebinars operation.
     * @callback module:api/WebinarsApi~getAllWebinarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Webinar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all webinars
     * Returns webinars scheduled for the future for a specified organizer.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {module:api/WebinarsApi~getAllWebinarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Webinar>}
     */
    getAllWebinars(authorization, organizerKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllWebinars");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAllWebinars");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Webinar];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttendeesForAllWebinarSessions operation.
     * @callback module:api/WebinarsApi~getAttendeesForAllWebinarSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attendee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attendees for all webinar sessions
     * Returns all attendees for all sessions of the specified webinar.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/WebinarsApi~getAttendeesForAllWebinarSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attendee>}
     */
    getAttendeesForAllWebinarSessions(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAttendeesForAllWebinarSessions");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAttendeesForAllWebinarSessions");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAttendeesForAllWebinarSessions");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Attendee];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/attendees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAudioInformation operation.
     * @callback module:api/WebinarsApi~getAudioInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Audio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get audio information
     * Retrieves the audio/conferencing information for a specific webinar.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/WebinarsApi~getAudioInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Audio}
     */
    getAudioInformation(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAudioInformation");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getAudioInformation");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getAudioInformation");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Audio;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/audio', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistoricalWebinars operation.
     * @callback module:api/WebinarsApi~getHistoricalWebinarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricalWebinar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical webinars
     * Returns details for completed webinars for the specified organizer and completed webinars of other organizers where the specified organizer is a co-organizer.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Date} fromTime A required start of datetime range in ISO8601 UTC format, e.g. 2015-07-13T10:00:00Z
     * @param {Date} toTime A required end of datetime range in ISO8601 UTC format, e.g. 2015-07-13T22:00:00Z
     * @param {module:api/WebinarsApi~getHistoricalWebinarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistoricalWebinar>}
     */
    getHistoricalWebinars(authorization, organizerKey, fromTime, toTime, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHistoricalWebinars");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getHistoricalWebinars");
      }
      // verify the required parameter 'fromTime' is set
      if (fromTime === undefined || fromTime === null) {
        throw new Error("Missing the required parameter 'fromTime' when calling getHistoricalWebinars");
      }
      // verify the required parameter 'toTime' is set
      if (toTime === undefined || toTime === null) {
        throw new Error("Missing the required parameter 'toTime' when calling getHistoricalWebinars");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
        'fromTime': fromTime,
        'toTime': toTime
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoricalWebinar];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/historicalWebinars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPerformanceForAllWebinarSessions operation.
     * @callback module:api/WebinarsApi~getPerformanceForAllWebinarSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: SessionPerformance}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get performance for all webinar sessions
     * Gets performance details for all sessions of a specific webinar.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/WebinarsApi~getPerformanceForAllWebinarSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: SessionPerformance}>}
     */
    getPerformanceForAllWebinarSessions(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPerformanceForAllWebinarSessions");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getPerformanceForAllWebinarSessions");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getPerformanceForAllWebinarSessions");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': SessionPerformance};
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpcomingWebinars operation.
     * @callback module:api/WebinarsApi~getUpcomingWebinarsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpcomingWebinar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get upcoming webinars
     * Returns webinars scheduled for the future for the specified organizer and webinars of other organizers where the specified organizer is a co-organizer.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {module:api/WebinarsApi~getUpcomingWebinarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpcomingWebinar>}
     */
    getUpcomingWebinars(authorization, organizerKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getUpcomingWebinars");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getUpcomingWebinars");
      }

      let pathParams = {
        'organizerKey': organizerKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UpcomingWebinar];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/upcomingWebinars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebinar operation.
     * @callback module:api/WebinarsApi~getWebinarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebinarByKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webinar
     * Retrieve information on a specific webinar. If the type of the webinar is 'sequence', a sequence of future times will be provided. Webinars of type 'series' are treated the same as normal webinars - each session in the webinar series has a different webinarKey. If an organizer cancels a webinar, then a request to get that webinar would return a '404 Not Found' error.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/WebinarsApi~getWebinarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebinarByKey}
     */
    getWebinar(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWebinar");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getWebinar");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getWebinar");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebinarByKey;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebinarMeetingTimes operation.
     * @callback module:api/WebinarsApi~getWebinarMeetingTimesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DateTimeRange>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webinar meeting times
     * Retrieves the meeting times for a webinar.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/WebinarsApi~getWebinarMeetingTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DateTimeRange>}
     */
    getWebinarMeetingTimes(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWebinarMeetingTimes");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getWebinarMeetingTimes");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getWebinarMeetingTimes");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DateTimeRange];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/meetingtimes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAudioInformation operation.
     * @callback module:api/WebinarsApi~updateAudioInformationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update audio information
     * Updates the audio/conferencing settings for a specific webinar
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:model/AudioUpdate} body The audio/conferencing settings
     * @param {Object} opts Optional parameters
     * @param {Boolean} [notifyParticipants] Defines whether to send notifications to participants
     * @param {module:api/WebinarsApi~updateAudioInformationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAudioInformation(authorization, organizerKey, webinarKey, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateAudioInformation");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling updateAudioInformation");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling updateAudioInformation");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAudioInformation");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
        'notifyParticipants': opts['notifyParticipants']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/audio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebinar operation.
     * @callback module:api/WebinarsApi~updateWebinarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update webinar
     * Updates a webinar. The call requires at least one of the parameters in the request body. The request completely replaces the existing session, series, or sequence and so must include the full definition of each as for the Create call. Set notifyParticipants=true to send update emails to registrants.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:model/WebinarReqUpdate} body The webinar details
     * @param {Object} opts Optional parameters
     * @param {Boolean} [notifyParticipants] Defines whether to send notifications to participants
     * @param {module:api/WebinarsApi~updateWebinarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWebinar(authorization, organizerKey, webinarKey, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateWebinar");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling updateWebinar");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling updateWebinar");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWebinar");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
        'notifyParticipants': opts['notifyParticipants']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
