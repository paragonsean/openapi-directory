/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatedPanelist from '../model/CreatedPanelist';
import Panelist from '../model/Panelist';
import PanelistReqCreate from '../model/PanelistReqCreate';

/**
* Panelists service.
* @module api/PanelistsApi
* @version 1.0.0
*/
export default class PanelistsApi {

    /**
    * Constructs a new PanelistsApi. 
    * @alias module:api/PanelistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPanelists operation.
     * @callback module:api/PanelistsApi~createPanelistsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreatedPanelist>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Panelists
     * Create panelists for a specified webinar
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Array.<module:model/PanelistReqCreate>} body Array of panelists
     * @param {module:api/PanelistsApi~createPanelistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreatedPanelist>}
     */
    createPanelists(authorization, organizerKey, webinarKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createPanelists");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling createPanelists");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling createPanelists");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPanelists");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreatedPanelist];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/panelists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebinarPanelist operation.
     * @callback module:api/PanelistsApi~deleteWebinarPanelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete webinar panelist
     * Removes a webinar panelist.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} panelistKey The key of the webinar panelist
     * @param {module:api/PanelistsApi~deleteWebinarPanelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebinarPanelist(authorization, organizerKey, webinarKey, panelistKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteWebinarPanelist");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling deleteWebinarPanelist");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling deleteWebinarPanelist");
      }
      // verify the required parameter 'panelistKey' is set
      if (panelistKey === undefined || panelistKey === null) {
        throw new Error("Missing the required parameter 'panelistKey' when calling deleteWebinarPanelist");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'panelistKey': panelistKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/panelists/{panelistKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPanelists operation.
     * @callback module:api/PanelistsApi~getPanelistsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Panelist>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webinar panelists
     * Retrieves all the panelists for a specific webinar.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {module:api/PanelistsApi~getPanelistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Panelist>}
     */
    getPanelists(authorization, organizerKey, webinarKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPanelists");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling getPanelists");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling getPanelists");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Panelist];
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/panelists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendPanelistInvitation operation.
     * @callback module:api/PanelistsApi~resendPanelistInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend panelist invitation
     * Resend the panelist invitation email.
     * @param {String} authorization Access token
     * @param {Number} organizerKey The key of the organizer
     * @param {Number} webinarKey The key of the webinar
     * @param {Number} panelistKey The key of the webinar panelist
     * @param {module:api/PanelistsApi~resendPanelistInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resendPanelistInvitation(authorization, organizerKey, webinarKey, panelistKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling resendPanelistInvitation");
      }
      // verify the required parameter 'organizerKey' is set
      if (organizerKey === undefined || organizerKey === null) {
        throw new Error("Missing the required parameter 'organizerKey' when calling resendPanelistInvitation");
      }
      // verify the required parameter 'webinarKey' is set
      if (webinarKey === undefined || webinarKey === null) {
        throw new Error("Missing the required parameter 'webinarKey' when calling resendPanelistInvitation");
      }
      // verify the required parameter 'panelistKey' is set
      if (panelistKey === undefined || panelistKey === null) {
        throw new Error("Missing the required parameter 'panelistKey' when calling resendPanelistInvitation");
      }

      let pathParams = {
        'organizerKey': organizerKey,
        'webinarKey': webinarKey,
        'panelistKey': panelistKey
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizers/{organizerKey}/webinars/{webinarKey}/panelists/{panelistKey}/resendInvitation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
