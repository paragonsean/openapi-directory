/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Attendee;
import org.openapitools.client.model.AttendeeQuestion;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Poll;
import org.openapitools.client.model.Session;
import org.openapitools.client.model.SessionPerformance;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllSessions
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSessionsCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSessionsValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAllSessions(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getAllSessions(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getAllSessions(Async)");
        }

        return getAllSessionsCall(authorization, organizerKey, webinarKey, _callback);

    }

    /**
     * Get webinar sessions
     * Retrieves details for all past sessions of a specific webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return List&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Session> getAllSessions(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        ApiResponse<List<Session>> localVarResp = getAllSessionsWithHttpInfo(authorization, organizerKey, webinarKey);
        return localVarResp.getData();
    }

    /**
     * Get webinar sessions
     * Retrieves details for all past sessions of a specific webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return ApiResponse&lt;List&lt;Session&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Session>> getAllSessionsWithHttpInfo(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        okhttp3.Call localVarCall = getAllSessionsValidateBeforeCall(authorization, organizerKey, webinarKey, null);
        Type localVarReturnType = new TypeToken<List<Session>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webinar sessions (asynchronously)
     * Retrieves details for all past sessions of a specific webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSessionsAsync(String authorization, Long organizerKey, Long webinarKey, final ApiCallback<List<Session>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSessionsValidateBeforeCall(authorization, organizerKey, webinarKey, _callback);
        Type localVarReturnType = new TypeToken<List<Session>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizerSessions
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param fromTime A required start of datetime range in ISO8601 UTC format, e.g. 2015-07-13T10:00:00Z (required)
     * @param toTime A required end of datetime range in ISO8601 UTC format, e.g. 2015-07-13T22:00:00Z (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizerSessionsCall(String authorization, Long organizerKey, OffsetDateTime fromTime, OffsetDateTime toTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/sessions"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromTime", fromTime));
        }

        if (toTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toTime", toTime));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizerSessionsValidateBeforeCall(String authorization, Long organizerKey, OffsetDateTime fromTime, OffsetDateTime toTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getOrganizerSessions(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getOrganizerSessions(Async)");
        }

        // verify the required parameter 'fromTime' is set
        if (fromTime == null) {
            throw new ApiException("Missing the required parameter 'fromTime' when calling getOrganizerSessions(Async)");
        }

        // verify the required parameter 'toTime' is set
        if (toTime == null) {
            throw new ApiException("Missing the required parameter 'toTime' when calling getOrganizerSessions(Async)");
        }

        return getOrganizerSessionsCall(authorization, organizerKey, fromTime, toTime, _callback);

    }

    /**
     * Get organizer sessions
     * Retrieve all completed sessions of all the webinars of a given organizer.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param fromTime A required start of datetime range in ISO8601 UTC format, e.g. 2015-07-13T10:00:00Z (required)
     * @param toTime A required end of datetime range in ISO8601 UTC format, e.g. 2015-07-13T22:00:00Z (required)
     * @return List&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<Session> getOrganizerSessions(String authorization, Long organizerKey, OffsetDateTime fromTime, OffsetDateTime toTime) throws ApiException {
        ApiResponse<List<Session>> localVarResp = getOrganizerSessionsWithHttpInfo(authorization, organizerKey, fromTime, toTime);
        return localVarResp.getData();
    }

    /**
     * Get organizer sessions
     * Retrieve all completed sessions of all the webinars of a given organizer.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param fromTime A required start of datetime range in ISO8601 UTC format, e.g. 2015-07-13T10:00:00Z (required)
     * @param toTime A required end of datetime range in ISO8601 UTC format, e.g. 2015-07-13T22:00:00Z (required)
     * @return ApiResponse&lt;List&lt;Session&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Session>> getOrganizerSessionsWithHttpInfo(String authorization, Long organizerKey, OffsetDateTime fromTime, OffsetDateTime toTime) throws ApiException {
        okhttp3.Call localVarCall = getOrganizerSessionsValidateBeforeCall(authorization, organizerKey, fromTime, toTime, null);
        Type localVarReturnType = new TypeToken<List<Session>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organizer sessions (asynchronously)
     * Retrieve all completed sessions of all the webinars of a given organizer.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param fromTime A required start of datetime range in ISO8601 UTC format, e.g. 2015-07-13T10:00:00Z (required)
     * @param toTime A required end of datetime range in ISO8601 UTC format, e.g. 2015-07-13T22:00:00Z (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizerSessionsAsync(String authorization, Long organizerKey, OffsetDateTime fromTime, OffsetDateTime toTime, final ApiCallback<List<Session>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizerSessionsValidateBeforeCall(authorization, organizerKey, fromTime, toTime, _callback);
        Type localVarReturnType = new TypeToken<List<Session>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPerformance
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPerformanceCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/performance"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPerformanceValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPerformance(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getPerformance(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getPerformance(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getPerformance(Async)");
        }

        return getPerformanceCall(authorization, organizerKey, webinarKey, sessionKey, _callback);

    }

    /**
     * Get session performance
     * Get performance details for a session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return SessionPerformance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SessionPerformance getPerformance(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        ApiResponse<SessionPerformance> localVarResp = getPerformanceWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey);
        return localVarResp.getData();
    }

    /**
     * Get session performance
     * Get performance details for a session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return ApiResponse&lt;SessionPerformance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionPerformance> getPerformanceWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        okhttp3.Call localVarCall = getPerformanceValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, null);
        Type localVarReturnType = new TypeToken<SessionPerformance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get session performance (asynchronously)
     * Get performance details for a session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPerformanceAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback<SessionPerformance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPerformanceValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, _callback);
        Type localVarReturnType = new TypeToken<SessionPerformance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPolls
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPollsCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/polls"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPollsValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPolls(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getPolls(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getPolls(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getPolls(Async)");
        }

        return getPollsCall(authorization, organizerKey, webinarKey, sessionKey, _callback);

    }

    /**
     * Get session polls
     * Retrieve all collated attendee questions and answers for polls from a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return List&lt;Poll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Poll> getPolls(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        ApiResponse<List<Poll>> localVarResp = getPollsWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey);
        return localVarResp.getData();
    }

    /**
     * Get session polls
     * Retrieve all collated attendee questions and answers for polls from a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return ApiResponse&lt;List&lt;Poll&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Poll>> getPollsWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        okhttp3.Call localVarCall = getPollsValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, null);
        Type localVarReturnType = new TypeToken<List<Poll>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get session polls (asynchronously)
     * Retrieve all collated attendee questions and answers for polls from a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPollsAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback<List<Poll>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPollsValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, _callback);
        Type localVarReturnType = new TypeToken<List<Poll>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuestions
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuestionsCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/questions"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuestionsValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getQuestions(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getQuestions(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getQuestions(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getQuestions(Async)");
        }

        return getQuestionsCall(authorization, organizerKey, webinarKey, sessionKey, _callback);

    }

    /**
     * Get session questions
     * Retrieve questions and answers for a past webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return List&lt;AttendeeQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<AttendeeQuestion> getQuestions(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        ApiResponse<List<AttendeeQuestion>> localVarResp = getQuestionsWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey);
        return localVarResp.getData();
    }

    /**
     * Get session questions
     * Retrieve questions and answers for a past webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return ApiResponse&lt;List&lt;AttendeeQuestion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttendeeQuestion>> getQuestionsWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        okhttp3.Call localVarCall = getQuestionsValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, null);
        Type localVarReturnType = new TypeToken<List<AttendeeQuestion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get session questions (asynchronously)
     * Retrieve questions and answers for a past webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuestionsAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback<List<AttendeeQuestion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuestionsValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, _callback);
        Type localVarReturnType = new TypeToken<List<AttendeeQuestion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSurveys
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSurveysCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/surveys"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSurveysValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSurveys(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getSurveys(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getSurveys(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getSurveys(Async)");
        }

        return getSurveysCall(authorization, organizerKey, webinarKey, sessionKey, _callback);

    }

    /**
     * Get session surveys
     * Retrieve surveys for a past webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return List&lt;Poll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Poll> getSurveys(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        ApiResponse<List<Poll>> localVarResp = getSurveysWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey);
        return localVarResp.getData();
    }

    /**
     * Get session surveys
     * Retrieve surveys for a past webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return ApiResponse&lt;List&lt;Poll&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Poll>> getSurveysWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        okhttp3.Call localVarCall = getSurveysValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, null);
        Type localVarReturnType = new TypeToken<List<Poll>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get session surveys (asynchronously)
     * Retrieve surveys for a past webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSurveysAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback<List<Poll>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSurveysValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, _callback);
        Type localVarReturnType = new TypeToken<List<Poll>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebinarSession
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebinarSessionCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebinarSessionValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getWebinarSession(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getWebinarSession(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getWebinarSession(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getWebinarSession(Async)");
        }

        return getWebinarSessionCall(authorization, organizerKey, webinarKey, sessionKey, _callback);

    }

    /**
     * Get webinar session
     * Retrieves attendance details for a specific webinar session that has ended. If attendees attended the session (&#39;registrantsAttended&#39;), specific attendance details, such as attendenceTime for a registrant, will also be retrieved. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return List&lt;Attendee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Attendee> getWebinarSession(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        ApiResponse<List<Attendee>> localVarResp = getWebinarSessionWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey);
        return localVarResp.getData();
    }

    /**
     * Get webinar session
     * Retrieves attendance details for a specific webinar session that has ended. If attendees attended the session (&#39;registrantsAttended&#39;), specific attendance details, such as attendenceTime for a registrant, will also be retrieved. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return ApiResponse&lt;List&lt;Attendee&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Attendee>> getWebinarSessionWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        okhttp3.Call localVarCall = getWebinarSessionValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, null);
        Type localVarReturnType = new TypeToken<List<Attendee>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webinar session (asynchronously)
     * Retrieves attendance details for a specific webinar session that has ended. If attendees attended the session (&#39;registrantsAttended&#39;), specific attendance details, such as attendenceTime for a registrant, will also be retrieved. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebinarSessionAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback<List<Attendee>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebinarSessionValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, _callback);
        Type localVarReturnType = new TypeToken<List<Attendee>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
