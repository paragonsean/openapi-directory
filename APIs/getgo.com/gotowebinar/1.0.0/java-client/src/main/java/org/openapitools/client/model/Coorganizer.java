/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a webinar co-organizer. A co-organizer without a GoToWebinar account is marked as external and is returned without a surname
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:28.365088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Coorganizer {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private Boolean external;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_JOIN_LINK = "joinLink";
  @SerializedName(SERIALIZED_NAME_JOIN_LINK)
  private String joinLink;

  public static final String SERIALIZED_NAME_MEMBER_KEY = "memberKey";
  @SerializedName(SERIALIZED_NAME_MEMBER_KEY)
  private String memberKey;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public Coorganizer() {
  }

  public Coorganizer email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The co-organizer&#39;s email address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Coorganizer external(Boolean external) {
    this.external = external;
    return this;
  }

  /**
   * If the co-organizer has no GoToWebinar account, this value is set to &#39;true&#39;
   * @return external
   */
  @javax.annotation.Nonnull
  public Boolean getExternal() {
    return external;
  }

  public void setExternal(Boolean external) {
    this.external = external;
  }


  public Coorganizer givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * The co-organizer&#39;s given name
   * @return givenName
   */
  @javax.annotation.Nonnull
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public Coorganizer joinLink(String joinLink) {
    this.joinLink = joinLink;
    return this;
  }

  /**
   * The co-organizer&#39;s join link
   * @return joinLink
   */
  @javax.annotation.Nonnull
  public String getJoinLink() {
    return joinLink;
  }

  public void setJoinLink(String joinLink) {
    this.joinLink = joinLink;
  }


  public Coorganizer memberKey(String memberKey) {
    this.memberKey = memberKey;
    return this;
  }

  /**
   * The co-organizer&#39;s organizer key. A new member key is created for external co-organizers
   * @return memberKey
   */
  @javax.annotation.Nonnull
  public String getMemberKey() {
    return memberKey;
  }

  public void setMemberKey(String memberKey) {
    this.memberKey = memberKey;
  }


  public Coorganizer surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * The co-organizer&#39;s surname. For external co-organizers this parameter is not returned
   * @return surname
   */
  @javax.annotation.Nonnull
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Coorganizer coorganizer = (Coorganizer) o;
    return Objects.equals(this.email, coorganizer.email) &&
        Objects.equals(this.external, coorganizer.external) &&
        Objects.equals(this.givenName, coorganizer.givenName) &&
        Objects.equals(this.joinLink, coorganizer.joinLink) &&
        Objects.equals(this.memberKey, coorganizer.memberKey) &&
        Objects.equals(this.surname, coorganizer.surname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, external, givenName, joinLink, memberKey, surname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Coorganizer {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    joinLink: ").append(toIndentedString(joinLink)).append("\n");
    sb.append("    memberKey: ").append(toIndentedString(memberKey)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("external");
    openapiFields.add("givenName");
    openapiFields.add("joinLink");
    openapiFields.add("memberKey");
    openapiFields.add("surname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("external");
    openapiRequiredFields.add("givenName");
    openapiRequiredFields.add("joinLink");
    openapiRequiredFields.add("memberKey");
    openapiRequiredFields.add("surname");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Coorganizer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Coorganizer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Coorganizer is not found in the empty JSON string", Coorganizer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Coorganizer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Coorganizer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Coorganizer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if (!jsonObj.get("joinLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joinLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joinLink").toString()));
      }
      if (!jsonObj.get("memberKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberKey").toString()));
      }
      if (!jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Coorganizer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Coorganizer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Coorganizer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Coorganizer.class));

       return (TypeAdapter<T>) new TypeAdapter<Coorganizer>() {
           @Override
           public void write(JsonWriter out, Coorganizer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Coorganizer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Coorganizer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Coorganizer
   * @throws IOException if the JSON string is invalid with respect to Coorganizer
   */
  public static Coorganizer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Coorganizer.class);
  }

  /**
   * Convert an instance of Coorganizer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

