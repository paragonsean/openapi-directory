/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details on the polls and surveys for a webinar session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:28.365088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PollsAndSurveysStatistics {
  public static final String SERIALIZED_NAME_PERCENTAGE_POLLS_COMPLETED = "percentagePollsCompleted";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_POLLS_COMPLETED)
  private Float percentagePollsCompleted;

  public static final String SERIALIZED_NAME_PERCENTAGE_SURVEYS_COMPLETED = "percentageSurveysCompleted";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_SURVEYS_COMPLETED)
  private Float percentageSurveysCompleted;

  public static final String SERIALIZED_NAME_POLL_COUNT = "pollCount";
  @SerializedName(SERIALIZED_NAME_POLL_COUNT)
  private Integer pollCount;

  public static final String SERIALIZED_NAME_QUESTIONS_ASKED = "questionsAsked";
  @SerializedName(SERIALIZED_NAME_QUESTIONS_ASKED)
  private Integer questionsAsked;

  public static final String SERIALIZED_NAME_SURVEY_COUNT = "surveyCount";
  @SerializedName(SERIALIZED_NAME_SURVEY_COUNT)
  private Float surveyCount;

  public PollsAndSurveysStatistics() {
  }

  public PollsAndSurveysStatistics percentagePollsCompleted(Float percentagePollsCompleted) {
    this.percentagePollsCompleted = percentagePollsCompleted;
    return this;
  }

  /**
   * The percentage of polls completed by the attendees
   * @return percentagePollsCompleted
   */
  @javax.annotation.Nonnull
  public Float getPercentagePollsCompleted() {
    return percentagePollsCompleted;
  }

  public void setPercentagePollsCompleted(Float percentagePollsCompleted) {
    this.percentagePollsCompleted = percentagePollsCompleted;
  }


  public PollsAndSurveysStatistics percentageSurveysCompleted(Float percentageSurveysCompleted) {
    this.percentageSurveysCompleted = percentageSurveysCompleted;
    return this;
  }

  /**
   * The percentage of surveys completed by the attendees
   * @return percentageSurveysCompleted
   */
  @javax.annotation.Nonnull
  public Float getPercentageSurveysCompleted() {
    return percentageSurveysCompleted;
  }

  public void setPercentageSurveysCompleted(Float percentageSurveysCompleted) {
    this.percentageSurveysCompleted = percentageSurveysCompleted;
  }


  public PollsAndSurveysStatistics pollCount(Integer pollCount) {
    this.pollCount = pollCount;
    return this;
  }

  /**
   * The number of polls launched at a webinar session
   * @return pollCount
   */
  @javax.annotation.Nonnull
  public Integer getPollCount() {
    return pollCount;
  }

  public void setPollCount(Integer pollCount) {
    this.pollCount = pollCount;
  }


  public PollsAndSurveysStatistics questionsAsked(Integer questionsAsked) {
    this.questionsAsked = questionsAsked;
    return this;
  }

  /**
   * The number of questions asked at a webinar session
   * @return questionsAsked
   */
  @javax.annotation.Nonnull
  public Integer getQuestionsAsked() {
    return questionsAsked;
  }

  public void setQuestionsAsked(Integer questionsAsked) {
    this.questionsAsked = questionsAsked;
  }


  public PollsAndSurveysStatistics surveyCount(Float surveyCount) {
    this.surveyCount = surveyCount;
    return this;
  }

  /**
   * The percentage of surveys launched at a webinar session
   * @return surveyCount
   */
  @javax.annotation.Nonnull
  public Float getSurveyCount() {
    return surveyCount;
  }

  public void setSurveyCount(Float surveyCount) {
    this.surveyCount = surveyCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PollsAndSurveysStatistics pollsAndSurveysStatistics = (PollsAndSurveysStatistics) o;
    return Objects.equals(this.percentagePollsCompleted, pollsAndSurveysStatistics.percentagePollsCompleted) &&
        Objects.equals(this.percentageSurveysCompleted, pollsAndSurveysStatistics.percentageSurveysCompleted) &&
        Objects.equals(this.pollCount, pollsAndSurveysStatistics.pollCount) &&
        Objects.equals(this.questionsAsked, pollsAndSurveysStatistics.questionsAsked) &&
        Objects.equals(this.surveyCount, pollsAndSurveysStatistics.surveyCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentagePollsCompleted, percentageSurveysCompleted, pollCount, questionsAsked, surveyCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PollsAndSurveysStatistics {\n");
    sb.append("    percentagePollsCompleted: ").append(toIndentedString(percentagePollsCompleted)).append("\n");
    sb.append("    percentageSurveysCompleted: ").append(toIndentedString(percentageSurveysCompleted)).append("\n");
    sb.append("    pollCount: ").append(toIndentedString(pollCount)).append("\n");
    sb.append("    questionsAsked: ").append(toIndentedString(questionsAsked)).append("\n");
    sb.append("    surveyCount: ").append(toIndentedString(surveyCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("percentagePollsCompleted");
    openapiFields.add("percentageSurveysCompleted");
    openapiFields.add("pollCount");
    openapiFields.add("questionsAsked");
    openapiFields.add("surveyCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("percentagePollsCompleted");
    openapiRequiredFields.add("percentageSurveysCompleted");
    openapiRequiredFields.add("pollCount");
    openapiRequiredFields.add("questionsAsked");
    openapiRequiredFields.add("surveyCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PollsAndSurveysStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PollsAndSurveysStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PollsAndSurveysStatistics is not found in the empty JSON string", PollsAndSurveysStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PollsAndSurveysStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PollsAndSurveysStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PollsAndSurveysStatistics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PollsAndSurveysStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PollsAndSurveysStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PollsAndSurveysStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PollsAndSurveysStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<PollsAndSurveysStatistics>() {
           @Override
           public void write(JsonWriter out, PollsAndSurveysStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PollsAndSurveysStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PollsAndSurveysStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PollsAndSurveysStatistics
   * @throws IOException if the JSON string is invalid with respect to PollsAndSurveysStatistics
   */
  public static PollsAndSurveysStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PollsAndSurveysStatistics.class);
  }

  /**
   * Convert an instance of PollsAndSurveysStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

