/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RegistrantQAResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed description of a all fields to register a registrant for a webinar.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:28.365088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegistrantFields {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NUMBER_OF_EMPLOYEES = "numberOfEmployees";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EMPLOYEES)
  private String numberOfEmployees;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PURCHASING_ROLE = "purchasingRole";
  @SerializedName(SERIALIZED_NAME_PURCHASING_ROLE)
  private String purchasingRole;

  public static final String SERIALIZED_NAME_PURCHASING_TIME_FRAME = "purchasingTimeFrame";
  @SerializedName(SERIALIZED_NAME_PURCHASING_TIME_FRAME)
  private String purchasingTimeFrame;

  public static final String SERIALIZED_NAME_QUESTIONS_AND_COMMENTS = "questionsAndComments";
  @SerializedName(SERIALIZED_NAME_QUESTIONS_AND_COMMENTS)
  private String questionsAndComments;

  public static final String SERIALIZED_NAME_RESPONSES = "responses";
  @SerializedName(SERIALIZED_NAME_RESPONSES)
  private List<RegistrantQAResponse> responses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public RegistrantFields() {
  }

  public RegistrantFields address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The registrant&#39;s address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public RegistrantFields city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The registrant&#39;s city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public RegistrantFields country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The registrant&#39;s country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public RegistrantFields email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The registrant&#39;s email address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public RegistrantFields firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The registrant&#39;s first name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public RegistrantFields industry(String industry) {
    this.industry = industry;
    return this;
  }

  /**
   * The type of industry the registrant&#39;s organization belongs to
   * @return industry
   */
  @javax.annotation.Nullable
  public String getIndustry() {
    return industry;
  }

  public void setIndustry(String industry) {
    this.industry = industry;
  }


  public RegistrantFields jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * The registrant&#39;s job title
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public RegistrantFields lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The registrant&#39;s last name
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public RegistrantFields numberOfEmployees(String numberOfEmployees) {
    this.numberOfEmployees = numberOfEmployees;
    return this;
  }

  /**
   * The size in employees of the registrant&#39;s organization
   * @return numberOfEmployees
   */
  @javax.annotation.Nullable
  public String getNumberOfEmployees() {
    return numberOfEmployees;
  }

  public void setNumberOfEmployees(String numberOfEmployees) {
    this.numberOfEmployees = numberOfEmployees;
  }


  public RegistrantFields organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * The registrant&#39;s organization
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public RegistrantFields phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The registrant&#39;s phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public RegistrantFields purchasingRole(String purchasingRole) {
    this.purchasingRole = purchasingRole;
    return this;
  }

  /**
   * The registrant&#39;s role in purchasing the product
   * @return purchasingRole
   */
  @javax.annotation.Nullable
  public String getPurchasingRole() {
    return purchasingRole;
  }

  public void setPurchasingRole(String purchasingRole) {
    this.purchasingRole = purchasingRole;
  }


  public RegistrantFields purchasingTimeFrame(String purchasingTimeFrame) {
    this.purchasingTimeFrame = purchasingTimeFrame;
    return this;
  }

  /**
   * The time frame within which the product will be purchased
   * @return purchasingTimeFrame
   */
  @javax.annotation.Nullable
  public String getPurchasingTimeFrame() {
    return purchasingTimeFrame;
  }

  public void setPurchasingTimeFrame(String purchasingTimeFrame) {
    this.purchasingTimeFrame = purchasingTimeFrame;
  }


  public RegistrantFields questionsAndComments(String questionsAndComments) {
    this.questionsAndComments = questionsAndComments;
    return this;
  }

  /**
   * Any questions or comments the registrant made at the time of registration
   * @return questionsAndComments
   */
  @javax.annotation.Nullable
  public String getQuestionsAndComments() {
    return questionsAndComments;
  }

  public void setQuestionsAndComments(String questionsAndComments) {
    this.questionsAndComments = questionsAndComments;
  }


  public RegistrantFields responses(List<RegistrantQAResponse> responses) {
    this.responses = responses;
    return this;
  }

  public RegistrantFields addResponsesItem(RegistrantQAResponse responsesItem) {
    if (this.responses == null) {
      this.responses = new ArrayList<>();
    }
    this.responses.add(responsesItem);
    return this;
  }

  /**
   * Set the answers of all questions
   * @return responses
   */
  @javax.annotation.Nullable
  public List<RegistrantQAResponse> getResponses() {
    return responses;
  }

  public void setResponses(List<RegistrantQAResponse> responses) {
    this.responses = responses;
  }


  public RegistrantFields source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source that led to the registration. This can be any string like &#39;Newsletter 123&#39; or &#39;Marketing campaign ABC&#39;
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public RegistrantFields state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The registrant&#39;s state (US only)
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public RegistrantFields zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * The registrant&#39;s zip (post) code
   * @return zipCode
   */
  @javax.annotation.Nullable
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrantFields registrantFields = (RegistrantFields) o;
    return Objects.equals(this.address, registrantFields.address) &&
        Objects.equals(this.city, registrantFields.city) &&
        Objects.equals(this.country, registrantFields.country) &&
        Objects.equals(this.email, registrantFields.email) &&
        Objects.equals(this.firstName, registrantFields.firstName) &&
        Objects.equals(this.industry, registrantFields.industry) &&
        Objects.equals(this.jobTitle, registrantFields.jobTitle) &&
        Objects.equals(this.lastName, registrantFields.lastName) &&
        Objects.equals(this.numberOfEmployees, registrantFields.numberOfEmployees) &&
        Objects.equals(this.organization, registrantFields.organization) &&
        Objects.equals(this.phone, registrantFields.phone) &&
        Objects.equals(this.purchasingRole, registrantFields.purchasingRole) &&
        Objects.equals(this.purchasingTimeFrame, registrantFields.purchasingTimeFrame) &&
        Objects.equals(this.questionsAndComments, registrantFields.questionsAndComments) &&
        Objects.equals(this.responses, registrantFields.responses) &&
        Objects.equals(this.source, registrantFields.source) &&
        Objects.equals(this.state, registrantFields.state) &&
        Objects.equals(this.zipCode, registrantFields.zipCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, city, country, email, firstName, industry, jobTitle, lastName, numberOfEmployees, organization, phone, purchasingRole, purchasingTimeFrame, questionsAndComments, responses, source, state, zipCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrantFields {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    numberOfEmployees: ").append(toIndentedString(numberOfEmployees)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    purchasingRole: ").append(toIndentedString(purchasingRole)).append("\n");
    sb.append("    purchasingTimeFrame: ").append(toIndentedString(purchasingTimeFrame)).append("\n");
    sb.append("    questionsAndComments: ").append(toIndentedString(questionsAndComments)).append("\n");
    sb.append("    responses: ").append(toIndentedString(responses)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("industry");
    openapiFields.add("jobTitle");
    openapiFields.add("lastName");
    openapiFields.add("numberOfEmployees");
    openapiFields.add("organization");
    openapiFields.add("phone");
    openapiFields.add("purchasingRole");
    openapiFields.add("purchasingTimeFrame");
    openapiFields.add("questionsAndComments");
    openapiFields.add("responses");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("zipCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistrantFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistrantFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistrantFields is not found in the empty JSON string", RegistrantFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistrantFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistrantFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegistrantFields.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("numberOfEmployees") != null && !jsonObj.get("numberOfEmployees").isJsonNull()) && !jsonObj.get("numberOfEmployees").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberOfEmployees` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberOfEmployees").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("purchasingRole") != null && !jsonObj.get("purchasingRole").isJsonNull()) && !jsonObj.get("purchasingRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchasingRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchasingRole").toString()));
      }
      if ((jsonObj.get("purchasingTimeFrame") != null && !jsonObj.get("purchasingTimeFrame").isJsonNull()) && !jsonObj.get("purchasingTimeFrame").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchasingTimeFrame` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchasingTimeFrame").toString()));
      }
      if ((jsonObj.get("questionsAndComments") != null && !jsonObj.get("questionsAndComments").isJsonNull()) && !jsonObj.get("questionsAndComments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionsAndComments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questionsAndComments").toString()));
      }
      if (jsonObj.get("responses") != null && !jsonObj.get("responses").isJsonNull()) {
        JsonArray jsonArrayresponses = jsonObj.getAsJsonArray("responses");
        if (jsonArrayresponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("responses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responses` to be an array in the JSON string but got `%s`", jsonObj.get("responses").toString()));
          }

          // validate the optional field `responses` (array)
          for (int i = 0; i < jsonArrayresponses.size(); i++) {
            RegistrantQAResponse.validateJsonElement(jsonArrayresponses.get(i));
          };
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zipCode") != null && !jsonObj.get("zipCode").isJsonNull()) && !jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistrantFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistrantFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistrantFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistrantFields.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistrantFields>() {
           @Override
           public void write(JsonWriter out, RegistrantFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistrantFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistrantFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistrantFields
   * @throws IOException if the JSON string is invalid with respect to RegistrantFields
   */
  public static RegistrantFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistrantFields.class);
  }

  /**
   * Convert an instance of RegistrantFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

