/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateTimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a webinar for an account within a given date range.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:28.365088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountWebinar {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IMPROMPTU = "impromptu";
  @SerializedName(SERIALIZED_NAME_IMPROMPTU)
  private Boolean impromptu;

  public static final String SERIALIZED_NAME_IS_PASSWORD_PROTECTED = "isPasswordProtected";
  @SerializedName(SERIALIZED_NAME_IS_PASSWORD_PROTECTED)
  private Boolean isPasswordProtected = false;

  public static final String SERIALIZED_NAME_ORGANIZER_KEY = "organizerKey";
  @SerializedName(SERIALIZED_NAME_ORGANIZER_KEY)
  private String organizerKey;

  public static final String SERIALIZED_NAME_REGISTRATION_URL = "registrationUrl";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_URL)
  private String registrationUrl;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TIMES = "times";
  @SerializedName(SERIALIZED_NAME_TIMES)
  private List<DateTimeRange> times = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type = "single_session";

  public static final String SERIALIZED_NAME_WEBINAR_I_D = "webinarID";
  @SerializedName(SERIALIZED_NAME_WEBINAR_I_D)
  private String webinarID;

  public static final String SERIALIZED_NAME_WEBINAR_KEY = "webinarKey";
  @SerializedName(SERIALIZED_NAME_WEBINAR_KEY)
  private String webinarKey;

  public AccountWebinar() {
  }

  public AccountWebinar description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description of the webinar
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AccountWebinar impromptu(Boolean impromptu) {
    this.impromptu = impromptu;
    return this;
  }

  /**
   * A boolean flag indicating if the webinar type is impromptu
   * @return impromptu
   */
  @javax.annotation.Nonnull
  public Boolean getImpromptu() {
    return impromptu;
  }

  public void setImpromptu(Boolean impromptu) {
    this.impromptu = impromptu;
  }


  public AccountWebinar isPasswordProtected(Boolean isPasswordProtected) {
    this.isPasswordProtected = isPasswordProtected;
    return this;
  }

  /**
   * A boolean flag indicating if the webinar is password protected
   * @return isPasswordProtected
   */
  @javax.annotation.Nonnull
  public Boolean getIsPasswordProtected() {
    return isPasswordProtected;
  }

  public void setIsPasswordProtected(Boolean isPasswordProtected) {
    this.isPasswordProtected = isPasswordProtected;
  }


  public AccountWebinar organizerKey(String organizerKey) {
    this.organizerKey = organizerKey;
    return this;
  }

  /**
   * The key of the webinar organizer
   * @return organizerKey
   */
  @javax.annotation.Nonnull
  public String getOrganizerKey() {
    return organizerKey;
  }

  public void setOrganizerKey(String organizerKey) {
    this.organizerKey = organizerKey;
  }


  public AccountWebinar registrationUrl(String registrationUrl) {
    this.registrationUrl = registrationUrl;
    return this;
  }

  /**
   * The URL the webinar invitees can use to register
   * @return registrationUrl
   */
  @javax.annotation.Nonnull
  public String getRegistrationUrl() {
    return registrationUrl;
  }

  public void setRegistrationUrl(String registrationUrl) {
    this.registrationUrl = registrationUrl;
  }


  public AccountWebinar subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The webinar subject
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public AccountWebinar timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The timezone where the webinar is taking place
   * @return timeZone
   */
  @javax.annotation.Nonnull
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public AccountWebinar times(List<DateTimeRange> times) {
    this.times = times;
    return this;
  }

  public AccountWebinar addTimesItem(DateTimeRange timesItem) {
    if (this.times == null) {
      this.times = new ArrayList<>();
    }
    this.times.add(timesItem);
    return this;
  }

  /**
   * Array with startTime and endTime for the webinar sessions
   * @return times
   */
  @javax.annotation.Nonnull
  public List<DateTimeRange> getTimes() {
    return times;
  }

  public void setTimes(List<DateTimeRange> times) {
    this.times = times;
  }


  public AccountWebinar type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Specifies the webinar type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AccountWebinar webinarID(String webinarID) {
    this.webinarID = webinarID;
    return this;
  }

  /**
   * The 9-digit webinar ID
   * @return webinarID
   */
  @javax.annotation.Nonnull
  public String getWebinarID() {
    return webinarID;
  }

  public void setWebinarID(String webinarID) {
    this.webinarID = webinarID;
  }


  public AccountWebinar webinarKey(String webinarKey) {
    this.webinarKey = webinarKey;
    return this;
  }

  /**
   * The unique key of the webinar
   * @return webinarKey
   */
  @javax.annotation.Nonnull
  public String getWebinarKey() {
    return webinarKey;
  }

  public void setWebinarKey(String webinarKey) {
    this.webinarKey = webinarKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountWebinar accountWebinar = (AccountWebinar) o;
    return Objects.equals(this.description, accountWebinar.description) &&
        Objects.equals(this.impromptu, accountWebinar.impromptu) &&
        Objects.equals(this.isPasswordProtected, accountWebinar.isPasswordProtected) &&
        Objects.equals(this.organizerKey, accountWebinar.organizerKey) &&
        Objects.equals(this.registrationUrl, accountWebinar.registrationUrl) &&
        Objects.equals(this.subject, accountWebinar.subject) &&
        Objects.equals(this.timeZone, accountWebinar.timeZone) &&
        Objects.equals(this.times, accountWebinar.times) &&
        Objects.equals(this.type, accountWebinar.type) &&
        Objects.equals(this.webinarID, accountWebinar.webinarID) &&
        Objects.equals(this.webinarKey, accountWebinar.webinarKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, impromptu, isPasswordProtected, organizerKey, registrationUrl, subject, timeZone, times, type, webinarID, webinarKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountWebinar {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    impromptu: ").append(toIndentedString(impromptu)).append("\n");
    sb.append("    isPasswordProtected: ").append(toIndentedString(isPasswordProtected)).append("\n");
    sb.append("    organizerKey: ").append(toIndentedString(organizerKey)).append("\n");
    sb.append("    registrationUrl: ").append(toIndentedString(registrationUrl)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    webinarID: ").append(toIndentedString(webinarID)).append("\n");
    sb.append("    webinarKey: ").append(toIndentedString(webinarKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("impromptu");
    openapiFields.add("isPasswordProtected");
    openapiFields.add("organizerKey");
    openapiFields.add("registrationUrl");
    openapiFields.add("subject");
    openapiFields.add("timeZone");
    openapiFields.add("times");
    openapiFields.add("type");
    openapiFields.add("webinarID");
    openapiFields.add("webinarKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("impromptu");
    openapiRequiredFields.add("isPasswordProtected");
    openapiRequiredFields.add("organizerKey");
    openapiRequiredFields.add("registrationUrl");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("timeZone");
    openapiRequiredFields.add("times");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("webinarID");
    openapiRequiredFields.add("webinarKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountWebinar
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountWebinar.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountWebinar is not found in the empty JSON string", AccountWebinar.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountWebinar.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountWebinar` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountWebinar.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("organizerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizerKey").toString()));
      }
      if (!jsonObj.get("registrationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationUrl").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (!jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("times").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `times` to be an array in the JSON string but got `%s`", jsonObj.get("times").toString()));
      }

      JsonArray jsonArraytimes = jsonObj.getAsJsonArray("times");
      // validate the required field `times` (array)
      for (int i = 0; i < jsonArraytimes.size(); i++) {
        DateTimeRange.validateJsonElement(jsonArraytimes.get(i));
      };
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("webinarID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webinarID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webinarID").toString()));
      }
      if (!jsonObj.get("webinarKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webinarKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webinarKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountWebinar.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountWebinar' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountWebinar> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountWebinar.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountWebinar>() {
           @Override
           public void write(JsonWriter out, AccountWebinar value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountWebinar read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountWebinar given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountWebinar
   * @throws IOException if the JSON string is invalid with respect to AccountWebinar
   */
  public static AccountWebinar fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountWebinar.class);
  }

  /**
   * Convert an instance of AccountWebinar to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

