/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TollCountries;
import org.openapitools.client.model.TollFreeCountries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the audio/conferencing settings for the specified webinar. It required to pass &#39;tollFreeCountries&#39; or &#39;tollCountries&#39; or both.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:28.365088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PstnInfoUpdate {
  public static final String SERIALIZED_NAME_TOLL_COUNTRIES = "tollCountries";
  @SerializedName(SERIALIZED_NAME_TOLL_COUNTRIES)
  private List<TollCountries> tollCountries = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOLL_FREE_COUNTRIES = "tollFreeCountries";
  @SerializedName(SERIALIZED_NAME_TOLL_FREE_COUNTRIES)
  private List<TollFreeCountries> tollFreeCountries = new ArrayList<>();

  public PstnInfoUpdate() {
  }

  public PstnInfoUpdate tollCountries(List<TollCountries> tollCountries) {
    this.tollCountries = tollCountries;
    return this;
  }

  public PstnInfoUpdate addTollCountriesItem(TollCountries tollCountriesItem) {
    if (this.tollCountries == null) {
      this.tollCountries = new ArrayList<>();
    }
    this.tollCountries.add(tollCountriesItem);
    return this;
  }

  /**
   * Defines in which countries toll PSTN numbers are available. Possible values are AT, AU, BE, CA, CH, DE, DK, ES, FI, FR, GB, IE, IT, NL, NO, NZ, SE, US
   * @return tollCountries
   */
  @javax.annotation.Nullable
  public List<TollCountries> getTollCountries() {
    return tollCountries;
  }

  public void setTollCountries(List<TollCountries> tollCountries) {
    this.tollCountries = tollCountries;
  }


  public PstnInfoUpdate tollFreeCountries(List<TollFreeCountries> tollFreeCountries) {
    this.tollFreeCountries = tollFreeCountries;
    return this;
  }

  public PstnInfoUpdate addTollFreeCountriesItem(TollFreeCountries tollFreeCountriesItem) {
    if (this.tollFreeCountries == null) {
      this.tollFreeCountries = new ArrayList<>();
    }
    this.tollFreeCountries.add(tollFreeCountriesItem);
    return this;
  }

  /**
   * Defines in which countries toll free PSTN numbers are available. Possible values are AE, AR, AT, AU, BE, BG, BH, BR, BY, CA, CH, CL, CN, CO, CZ, DE, DK, ES, FI, FR, GB, GR, HK, HU, ID, IE, IL, IN, IS, IT, JP, KR, LU, MX, MY, NL, NO, NZ, PA, PE, PH, PL, PT, RO, RU, SA, SE, SG, TH, TR, TW, UA, US, UY, VN, ZA
   * @return tollFreeCountries
   */
  @javax.annotation.Nullable
  public List<TollFreeCountries> getTollFreeCountries() {
    return tollFreeCountries;
  }

  public void setTollFreeCountries(List<TollFreeCountries> tollFreeCountries) {
    this.tollFreeCountries = tollFreeCountries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PstnInfoUpdate pstnInfoUpdate = (PstnInfoUpdate) o;
    return Objects.equals(this.tollCountries, pstnInfoUpdate.tollCountries) &&
        Objects.equals(this.tollFreeCountries, pstnInfoUpdate.tollFreeCountries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tollCountries, tollFreeCountries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PstnInfoUpdate {\n");
    sb.append("    tollCountries: ").append(toIndentedString(tollCountries)).append("\n");
    sb.append("    tollFreeCountries: ").append(toIndentedString(tollFreeCountries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tollCountries");
    openapiFields.add("tollFreeCountries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PstnInfoUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PstnInfoUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PstnInfoUpdate is not found in the empty JSON string", PstnInfoUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PstnInfoUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PstnInfoUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("tollCountries") != null && !jsonObj.get("tollCountries").isJsonNull() && !jsonObj.get("tollCountries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tollCountries` to be an array in the JSON string but got `%s`", jsonObj.get("tollCountries").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tollFreeCountries") != null && !jsonObj.get("tollFreeCountries").isJsonNull() && !jsonObj.get("tollFreeCountries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tollFreeCountries` to be an array in the JSON string but got `%s`", jsonObj.get("tollFreeCountries").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PstnInfoUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PstnInfoUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PstnInfoUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PstnInfoUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<PstnInfoUpdate>() {
           @Override
           public void write(JsonWriter out, PstnInfoUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PstnInfoUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PstnInfoUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PstnInfoUpdate
   * @throws IOException if the JSON string is invalid with respect to PstnInfoUpdate
   */
  public static PstnInfoUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PstnInfoUpdate.class);
  }

  /**
   * Convert an instance of PstnInfoUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

