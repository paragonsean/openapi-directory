/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Coorganizer;
import org.openapitools.client.model.CoorganizerReqCreate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CoOrganizersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CoOrganizersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CoOrganizersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCoorganizers
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body The co-organizer details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCoorganizersCall(String authorization, Long organizerKey, Long webinarKey, List<CoorganizerReqCreate> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/coorganizers"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCoorganizersValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, List<CoorganizerReqCreate> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createCoorganizers(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling createCoorganizers(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling createCoorganizers(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCoorganizers(Async)");
        }

        return createCoorganizersCall(authorization, organizerKey, webinarKey, body, _callback);

    }

    /**
     * Create co-organizers
     * Creates co-organizers for the specified webinar. For co-organizers that have a GoToWebinar account you have to set the parameter &#39;external&#39; to &#39;false&#39;. In this case you have to pass the parameter &#39;organizerKey&#39; only. For co-organizers that have no GoToWebinar account you have to set the parameter &#39;external&#39; to &#39;true&#39;. In this case you have to pass the parameters &#39;givenName&#39; and &#39;email&#39;. Since there is no parameter for &#39;surname&#39; you should pass first and last name to the parameter &#39;givenName&#39;.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body The co-organizer details (required)
     * @return List&lt;Coorganizer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Coorganizer> createCoorganizers(String authorization, Long organizerKey, Long webinarKey, List<CoorganizerReqCreate> body) throws ApiException {
        ApiResponse<List<Coorganizer>> localVarResp = createCoorganizersWithHttpInfo(authorization, organizerKey, webinarKey, body);
        return localVarResp.getData();
    }

    /**
     * Create co-organizers
     * Creates co-organizers for the specified webinar. For co-organizers that have a GoToWebinar account you have to set the parameter &#39;external&#39; to &#39;false&#39;. In this case you have to pass the parameter &#39;organizerKey&#39; only. For co-organizers that have no GoToWebinar account you have to set the parameter &#39;external&#39; to &#39;true&#39;. In this case you have to pass the parameters &#39;givenName&#39; and &#39;email&#39;. Since there is no parameter for &#39;surname&#39; you should pass first and last name to the parameter &#39;givenName&#39;.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body The co-organizer details (required)
     * @return ApiResponse&lt;List&lt;Coorganizer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Coorganizer>> createCoorganizersWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, List<CoorganizerReqCreate> body) throws ApiException {
        okhttp3.Call localVarCall = createCoorganizersValidateBeforeCall(authorization, organizerKey, webinarKey, body, null);
        Type localVarReturnType = new TypeToken<List<Coorganizer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create co-organizers (asynchronously)
     * Creates co-organizers for the specified webinar. For co-organizers that have a GoToWebinar account you have to set the parameter &#39;external&#39; to &#39;false&#39;. In this case you have to pass the parameter &#39;organizerKey&#39; only. For co-organizers that have no GoToWebinar account you have to set the parameter &#39;external&#39; to &#39;true&#39;. In this case you have to pass the parameters &#39;givenName&#39; and &#39;email&#39;. Since there is no parameter for &#39;surname&#39; you should pass first and last name to the parameter &#39;givenName&#39;.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body The co-organizer details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCoorganizersAsync(String authorization, Long organizerKey, Long webinarKey, List<CoorganizerReqCreate> body, final ApiCallback<List<Coorganizer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCoorganizersValidateBeforeCall(authorization, organizerKey, webinarKey, body, _callback);
        Type localVarReturnType = new TypeToken<List<Coorganizer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCoorganizer
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param coorganizerKey The key of the internal or external co-organizer (memberKey) (required)
     * @param external By default only internal co-organizers (with a GoToWebinar account) can be deleted. If you want to use this call for external co-organizers you have to set this parameter to &#39;true&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content (Co-organizer was deleted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCoorganizerCall(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/coorganizers/{coorganizerKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "coorganizerKey" + "}", localVarApiClient.escapeString(coorganizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (external != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external", external));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCoorganizerValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteCoorganizer(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling deleteCoorganizer(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling deleteCoorganizer(Async)");
        }

        // verify the required parameter 'coorganizerKey' is set
        if (coorganizerKey == null) {
            throw new ApiException("Missing the required parameter 'coorganizerKey' when calling deleteCoorganizer(Async)");
        }

        return deleteCoorganizerCall(authorization, organizerKey, webinarKey, coorganizerKey, external, _callback);

    }

    /**
     * Delete co-organizer
     * Deletes an internal co-organizer specified by the coorganizerKey (memberKey).
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param coorganizerKey The key of the internal or external co-organizer (memberKey) (required)
     * @param external By default only internal co-organizers (with a GoToWebinar account) can be deleted. If you want to use this call for external co-organizers you have to set this parameter to &#39;true&#39;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content (Co-organizer was deleted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCoorganizer(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external) throws ApiException {
        deleteCoorganizerWithHttpInfo(authorization, organizerKey, webinarKey, coorganizerKey, external);
    }

    /**
     * Delete co-organizer
     * Deletes an internal co-organizer specified by the coorganizerKey (memberKey).
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param coorganizerKey The key of the internal or external co-organizer (memberKey) (required)
     * @param external By default only internal co-organizers (with a GoToWebinar account) can be deleted. If you want to use this call for external co-organizers you have to set this parameter to &#39;true&#39;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content (Co-organizer was deleted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCoorganizerWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external) throws ApiException {
        okhttp3.Call localVarCall = deleteCoorganizerValidateBeforeCall(authorization, organizerKey, webinarKey, coorganizerKey, external, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete co-organizer (asynchronously)
     * Deletes an internal co-organizer specified by the coorganizerKey (memberKey).
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param coorganizerKey The key of the internal or external co-organizer (memberKey) (required)
     * @param external By default only internal co-organizers (with a GoToWebinar account) can be deleted. If you want to use this call for external co-organizers you have to set this parameter to &#39;true&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content (Co-organizer was deleted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCoorganizerAsync(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCoorganizerValidateBeforeCall(authorization, organizerKey, webinarKey, coorganizerKey, external, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCoorganizers
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCoorganizersCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/coorganizers"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoorganizersValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCoorganizers(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getCoorganizers(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getCoorganizers(Async)");
        }

        return getCoorganizersCall(authorization, organizerKey, webinarKey, _callback);

    }

    /**
     * Get co-organizers
     * Returns the co-organizers for the specified webinar. The original organizer who created the webinar is filtered out of the list. If the webinar has no co-organizers, an empty array is returned. Co-organizers that do not have a GoToWebinar account are returned as external co-organizers. For those organizers no surname is returned.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return List&lt;Coorganizer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Coorganizer> getCoorganizers(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        ApiResponse<List<Coorganizer>> localVarResp = getCoorganizersWithHttpInfo(authorization, organizerKey, webinarKey);
        return localVarResp.getData();
    }

    /**
     * Get co-organizers
     * Returns the co-organizers for the specified webinar. The original organizer who created the webinar is filtered out of the list. If the webinar has no co-organizers, an empty array is returned. Co-organizers that do not have a GoToWebinar account are returned as external co-organizers. For those organizers no surname is returned.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return ApiResponse&lt;List&lt;Coorganizer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Coorganizer>> getCoorganizersWithHttpInfo(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        okhttp3.Call localVarCall = getCoorganizersValidateBeforeCall(authorization, organizerKey, webinarKey, null);
        Type localVarReturnType = new TypeToken<List<Coorganizer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get co-organizers (asynchronously)
     * Returns the co-organizers for the specified webinar. The original organizer who created the webinar is filtered out of the list. If the webinar has no co-organizers, an empty array is returned. Co-organizers that do not have a GoToWebinar account are returned as external co-organizers. For those organizers no surname is returned.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCoorganizersAsync(String authorization, Long organizerKey, Long webinarKey, final ApiCallback<List<Coorganizer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCoorganizersValidateBeforeCall(authorization, organizerKey, webinarKey, _callback);
        Type localVarReturnType = new TypeToken<List<Coorganizer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendCoorganizerInvitation
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param coorganizerKey The key of the internal or external co-organizer (memberKey) (required)
     * @param external By default only internal co-organizers (with a GoToWebinar account) will retrieve the resent invitation email. If you want to use this call for external co-organizers you have to set this parameter to &#39;true&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content (Invitation email was sent) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendCoorganizerInvitationCall(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/coorganizers/{coorganizerKey}/resendInvitation"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "coorganizerKey" + "}", localVarApiClient.escapeString(coorganizerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (external != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external", external));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendCoorganizerInvitationValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling resendCoorganizerInvitation(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling resendCoorganizerInvitation(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling resendCoorganizerInvitation(Async)");
        }

        // verify the required parameter 'coorganizerKey' is set
        if (coorganizerKey == null) {
            throw new ApiException("Missing the required parameter 'coorganizerKey' when calling resendCoorganizerInvitation(Async)");
        }

        return resendCoorganizerInvitationCall(authorization, organizerKey, webinarKey, coorganizerKey, external, _callback);

    }

    /**
     * Resend invitation
     * Resends an invitation email to the specified co-organizer
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param coorganizerKey The key of the internal or external co-organizer (memberKey) (required)
     * @param external By default only internal co-organizers (with a GoToWebinar account) will retrieve the resent invitation email. If you want to use this call for external co-organizers you have to set this parameter to &#39;true&#39;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content (Invitation email was sent) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void resendCoorganizerInvitation(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external) throws ApiException {
        resendCoorganizerInvitationWithHttpInfo(authorization, organizerKey, webinarKey, coorganizerKey, external);
    }

    /**
     * Resend invitation
     * Resends an invitation email to the specified co-organizer
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param coorganizerKey The key of the internal or external co-organizer (memberKey) (required)
     * @param external By default only internal co-organizers (with a GoToWebinar account) will retrieve the resent invitation email. If you want to use this call for external co-organizers you have to set this parameter to &#39;true&#39;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content (Invitation email was sent) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendCoorganizerInvitationWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external) throws ApiException {
        okhttp3.Call localVarCall = resendCoorganizerInvitationValidateBeforeCall(authorization, organizerKey, webinarKey, coorganizerKey, external, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend invitation (asynchronously)
     * Resends an invitation email to the specified co-organizer
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param coorganizerKey The key of the internal or external co-organizer (memberKey) (required)
     * @param external By default only internal co-organizers (with a GoToWebinar account) will retrieve the resent invitation email. If you want to use this call for external co-organizers you have to set this parameter to &#39;true&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content (Invitation email was sent) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendCoorganizerInvitationAsync(String authorization, Long organizerKey, Long webinarKey, Long coorganizerKey, Boolean external, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendCoorganizerInvitationValidateBeforeCall(authorization, organizerKey, webinarKey, coorganizerKey, external, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
