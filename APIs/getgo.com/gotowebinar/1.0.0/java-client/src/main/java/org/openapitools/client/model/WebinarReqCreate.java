/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateTimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the details used to create a new single session webinar.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:28.365088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebinarReqCreate {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_PASSWORD_PROTECTED = "isPasswordProtected";
  @SerializedName(SERIALIZED_NAME_IS_PASSWORD_PROTECTED)
  private Boolean isPasswordProtected = false;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TIMES = "times";
  @SerializedName(SERIALIZED_NAME_TIMES)
  private List<DateTimeRange> times = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type = "single_session";

  public WebinarReqCreate() {
  }

  public WebinarReqCreate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description of the webinar (2048 characters maximum)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WebinarReqCreate isPasswordProtected(Boolean isPasswordProtected) {
    this.isPasswordProtected = isPasswordProtected;
    return this;
  }

  /**
   * A boolean flag indicating if the webinar is password protected or not.
   * @return isPasswordProtected
   */
  @javax.annotation.Nullable
  public Boolean getIsPasswordProtected() {
    return isPasswordProtected;
  }

  public void setIsPasswordProtected(Boolean isPasswordProtected) {
    this.isPasswordProtected = isPasswordProtected;
  }


  public WebinarReqCreate subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The name/subject of the webinar (128 characters maximum)
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public WebinarReqCreate timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The time zone where the webinar is taking place (must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones). If this parameter is not passed, the timezone of the organizer&#39;s profile will be used
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public WebinarReqCreate times(List<DateTimeRange> times) {
    this.times = times;
    return this;
  }

  public WebinarReqCreate addTimesItem(DateTimeRange timesItem) {
    if (this.times == null) {
      this.times = new ArrayList<>();
    }
    this.times.add(timesItem);
    return this;
  }

  /**
   * Array with startTime and endTime for webinar. Since this call creates single session webinars, the array can only contain a single pair of startTime and endTime
   * @return times
   */
  @javax.annotation.Nonnull
  public List<DateTimeRange> getTimes() {
    return times;
  }

  public void setTimes(List<DateTimeRange> times) {
    this.times = times;
  }


  public WebinarReqCreate type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Specifies the webinar type. The default type value is \&quot;single_session\&quot;, which is used to create a single webinar session. The possible values are \&quot;single_session\&quot;, \&quot;series\&quot;, \&quot;sequence\&quot;. If type is set to \&quot;single_session\&quot;, a single webinar session is created. If type is set to \&quot;series\&quot;, a webinar series is created. In this case 2 or more timeframes must be specified for each webinar. Example: \&quot;times\&quot;: [{\&quot;startTime\&quot;: \&quot;...\&quot;, \&quot;endTime\&quot;: \&quot;...\&quot;},{\&quot;startTime\&quot;: \&quot;...\&quot;, \&quot;endTime\&quot;: \&quot;...\&quot;},{\&quot;startTime\&quot;: \&quot;...\&quot;, \&quot;endTime\&quot;: \&quot;...\&quot;}. If type is set to \&quot;sequence\&quot; a sequence of webinars is created. The times object in the body must be replaced by the \&quot;recurrenceStart\&quot; object. Example: \&quot;recurrenceStart\&quot;: {\&quot;startTime\&quot;:\&quot;2012-06-12T16:00:00Z\&quot;, \&quot;endTime\&quot;: \&quot;2012-06-12T17:00:00Z\&quot; }.  The \&quot;recurrenceEnd\&quot; and \&quot;recurrencePattern\&quot; body parameter must be specified. Example: , \&quot;recurrenceEnd\&quot;: \&quot;2012-07-10\&quot;, \&quot;recurrencePattern\&quot;: \&quot;daily\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebinarReqCreate webinarReqCreate = (WebinarReqCreate) o;
    return Objects.equals(this.description, webinarReqCreate.description) &&
        Objects.equals(this.isPasswordProtected, webinarReqCreate.isPasswordProtected) &&
        Objects.equals(this.subject, webinarReqCreate.subject) &&
        Objects.equals(this.timeZone, webinarReqCreate.timeZone) &&
        Objects.equals(this.times, webinarReqCreate.times) &&
        Objects.equals(this.type, webinarReqCreate.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, isPasswordProtected, subject, timeZone, times, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebinarReqCreate {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isPasswordProtected: ").append(toIndentedString(isPasswordProtected)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("isPasswordProtected");
    openapiFields.add("subject");
    openapiFields.add("timeZone");
    openapiFields.add("times");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("times");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebinarReqCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebinarReqCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebinarReqCreate is not found in the empty JSON string", WebinarReqCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebinarReqCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebinarReqCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebinarReqCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("times").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `times` to be an array in the JSON string but got `%s`", jsonObj.get("times").toString()));
      }

      JsonArray jsonArraytimes = jsonObj.getAsJsonArray("times");
      // validate the required field `times` (array)
      for (int i = 0; i < jsonArraytimes.size(); i++) {
        DateTimeRange.validateJsonElement(jsonArraytimes.get(i));
      };
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebinarReqCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebinarReqCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebinarReqCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebinarReqCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<WebinarReqCreate>() {
           @Override
           public void write(JsonWriter out, WebinarReqCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebinarReqCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebinarReqCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebinarReqCreate
   * @throws IOException if the JSON string is invalid with respect to WebinarReqCreate
   */
  public static WebinarReqCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebinarReqCreate.class);
  }

  /**
   * Convert an instance of WebinarReqCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

