/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Registrant;
import org.openapitools.client.model.RegistrantCreated;
import org.openapitools.client.model.RegistrantDetailed;
import org.openapitools.client.model.RegistrantFields;
import org.openapitools.client.model.RegistrationFields;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrantsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrantsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRegistrant
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body The registrant details. To get all possible values run the API call &#39;Get registration fields&#39; which is also part of this documentation. (required)
     * @param accept Set to &#39;application/vnd.citrix.g2wapi-v1.1+json&#39; to make a registration using fields (custom or default) additional to the basic ones. (optional)
     * @param resendConfirmation Indicates whether the confirmation email should be resent when a registrant is re-registered. The default value is false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The user is already registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegistrantCall(String authorization, Long organizerKey, Long webinarKey, RegistrantFields body, String accept, Boolean resendConfirmation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/registrants"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resendConfirmation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resendConfirmation", resendConfirmation));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegistrantValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, RegistrantFields body, String accept, Boolean resendConfirmation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createRegistrant(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling createRegistrant(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling createRegistrant(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRegistrant(Async)");
        }

        return createRegistrantCall(authorization, organizerKey, webinarKey, body, accept, resendConfirmation, _callback);

    }

    /**
     * Create registrant
     * Register an attendee for a scheduled webinar. The response contains the registrantKey and join URL for the registrant. An email will be sent to the registrant unless the organizer turns off the confirmation email setting from the GoToWebinar website. Please note that you must provide all required fields including custom fields defined during the webinar creation. Use the API call &#39;Get registration fields&#39; to get a list of all fields, if they are required, and their possible values. At this time there are two versions of the &#39;Create Registrant&#39; call. The first version only accepts firstName, lastName, and email and ignores all other fields. If you have custom fields or want to capture additional information this version won&#39;t work for you. The second version allows you to pass all required and optional fields, including custom fields defined when creating the webinar. To use the second version you must pass the header value &#39;Accept: application/vnd.citrix.g2wapi-v1.1+json&#39; instead of &#39;Accept: application/json&#39;. Leaving this header out results in the first version of the API call.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body The registrant details. To get all possible values run the API call &#39;Get registration fields&#39; which is also part of this documentation. (required)
     * @param accept Set to &#39;application/vnd.citrix.g2wapi-v1.1+json&#39; to make a registration using fields (custom or default) additional to the basic ones. (optional)
     * @param resendConfirmation Indicates whether the confirmation email should be resent when a registrant is re-registered. The default value is false. (optional)
     * @return RegistrantCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The user is already registered </td><td>  -  </td></tr>
     </table>
     */
    public RegistrantCreated createRegistrant(String authorization, Long organizerKey, Long webinarKey, RegistrantFields body, String accept, Boolean resendConfirmation) throws ApiException {
        ApiResponse<RegistrantCreated> localVarResp = createRegistrantWithHttpInfo(authorization, organizerKey, webinarKey, body, accept, resendConfirmation);
        return localVarResp.getData();
    }

    /**
     * Create registrant
     * Register an attendee for a scheduled webinar. The response contains the registrantKey and join URL for the registrant. An email will be sent to the registrant unless the organizer turns off the confirmation email setting from the GoToWebinar website. Please note that you must provide all required fields including custom fields defined during the webinar creation. Use the API call &#39;Get registration fields&#39; to get a list of all fields, if they are required, and their possible values. At this time there are two versions of the &#39;Create Registrant&#39; call. The first version only accepts firstName, lastName, and email and ignores all other fields. If you have custom fields or want to capture additional information this version won&#39;t work for you. The second version allows you to pass all required and optional fields, including custom fields defined when creating the webinar. To use the second version you must pass the header value &#39;Accept: application/vnd.citrix.g2wapi-v1.1+json&#39; instead of &#39;Accept: application/json&#39;. Leaving this header out results in the first version of the API call.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body The registrant details. To get all possible values run the API call &#39;Get registration fields&#39; which is also part of this documentation. (required)
     * @param accept Set to &#39;application/vnd.citrix.g2wapi-v1.1+json&#39; to make a registration using fields (custom or default) additional to the basic ones. (optional)
     * @param resendConfirmation Indicates whether the confirmation email should be resent when a registrant is re-registered. The default value is false. (optional)
     * @return ApiResponse&lt;RegistrantCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The user is already registered </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrantCreated> createRegistrantWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, RegistrantFields body, String accept, Boolean resendConfirmation) throws ApiException {
        okhttp3.Call localVarCall = createRegistrantValidateBeforeCall(authorization, organizerKey, webinarKey, body, accept, resendConfirmation, null);
        Type localVarReturnType = new TypeToken<RegistrantCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create registrant (asynchronously)
     * Register an attendee for a scheduled webinar. The response contains the registrantKey and join URL for the registrant. An email will be sent to the registrant unless the organizer turns off the confirmation email setting from the GoToWebinar website. Please note that you must provide all required fields including custom fields defined during the webinar creation. Use the API call &#39;Get registration fields&#39; to get a list of all fields, if they are required, and their possible values. At this time there are two versions of the &#39;Create Registrant&#39; call. The first version only accepts firstName, lastName, and email and ignores all other fields. If you have custom fields or want to capture additional information this version won&#39;t work for you. The second version allows you to pass all required and optional fields, including custom fields defined when creating the webinar. To use the second version you must pass the header value &#39;Accept: application/vnd.citrix.g2wapi-v1.1+json&#39; instead of &#39;Accept: application/json&#39;. Leaving this header out results in the first version of the API call.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body The registrant details. To get all possible values run the API call &#39;Get registration fields&#39; which is also part of this documentation. (required)
     * @param accept Set to &#39;application/vnd.citrix.g2wapi-v1.1+json&#39; to make a registration using fields (custom or default) additional to the basic ones. (optional)
     * @param resendConfirmation Indicates whether the confirmation email should be resent when a registrant is re-registered. The default value is false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The user is already registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegistrantAsync(String authorization, Long organizerKey, Long webinarKey, RegistrantFields body, String accept, Boolean resendConfirmation, final ApiCallback<RegistrantCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegistrantValidateBeforeCall(authorization, organizerKey, webinarKey, body, accept, resendConfirmation, _callback);
        Type localVarReturnType = new TypeToken<RegistrantCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRegistrant
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegistrantCall(String authorization, Long organizerKey, Long webinarKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/registrants/{registrantKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "registrantKey" + "}", localVarApiClient.escapeString(registrantKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegistrantValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRegistrant(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling deleteRegistrant(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling deleteRegistrant(Async)");
        }

        // verify the required parameter 'registrantKey' is set
        if (registrantKey == null) {
            throw new ApiException("Missing the required parameter 'registrantKey' when calling deleteRegistrant(Async)");
        }

        return deleteRegistrantCall(authorization, organizerKey, webinarKey, registrantKey, _callback);

    }

    /**
     * Delete registrant
     * Removes a webinar registrant from current registrations for the specified webinar. The webinar must be a scheduled, future webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param registrantKey The key of the registrant (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRegistrant(String authorization, Long organizerKey, Long webinarKey, Long registrantKey) throws ApiException {
        deleteRegistrantWithHttpInfo(authorization, organizerKey, webinarKey, registrantKey);
    }

    /**
     * Delete registrant
     * Removes a webinar registrant from current registrations for the specified webinar. The webinar must be a scheduled, future webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param registrantKey The key of the registrant (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRegistrantWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long registrantKey) throws ApiException {
        okhttp3.Call localVarCall = deleteRegistrantValidateBeforeCall(authorization, organizerKey, webinarKey, registrantKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete registrant (asynchronously)
     * Removes a webinar registrant from current registrations for the specified webinar. The webinar must be a scheduled, future webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegistrantAsync(String authorization, Long organizerKey, Long webinarKey, Long registrantKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegistrantValidateBeforeCall(authorization, organizerKey, webinarKey, registrantKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllRegistrantsForWebinar
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRegistrantsForWebinarCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/registrants"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRegistrantsForWebinarValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAllRegistrantsForWebinar(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getAllRegistrantsForWebinar(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getAllRegistrantsForWebinar(Async)");
        }

        return getAllRegistrantsForWebinarCall(authorization, organizerKey, webinarKey, _callback);

    }

    /**
     * Get registrants
     * Retrieve registration details for all registrants of a specific webinar. Registrant details will not include all fields captured when creating the registrant. To see all data, use the API call &#39;Get Registrant&#39;. Registrants can have one of the following states; &lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval), &lt;br&gt;APPROVED - registrant registered and is approved, and &lt;br&gt;DENIED - registrant registered and was denied.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return List&lt;Registrant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Registrant> getAllRegistrantsForWebinar(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        ApiResponse<List<Registrant>> localVarResp = getAllRegistrantsForWebinarWithHttpInfo(authorization, organizerKey, webinarKey);
        return localVarResp.getData();
    }

    /**
     * Get registrants
     * Retrieve registration details for all registrants of a specific webinar. Registrant details will not include all fields captured when creating the registrant. To see all data, use the API call &#39;Get Registrant&#39;. Registrants can have one of the following states; &lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval), &lt;br&gt;APPROVED - registrant registered and is approved, and &lt;br&gt;DENIED - registrant registered and was denied.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return ApiResponse&lt;List&lt;Registrant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registrant>> getAllRegistrantsForWebinarWithHttpInfo(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        okhttp3.Call localVarCall = getAllRegistrantsForWebinarValidateBeforeCall(authorization, organizerKey, webinarKey, null);
        Type localVarReturnType = new TypeToken<List<Registrant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get registrants (asynchronously)
     * Retrieve registration details for all registrants of a specific webinar. Registrant details will not include all fields captured when creating the registrant. To see all data, use the API call &#39;Get Registrant&#39;. Registrants can have one of the following states; &lt;br&gt;WAITING - registrant registered and is awaiting approval (where organizer has required approval), &lt;br&gt;APPROVED - registrant registered and is approved, and &lt;br&gt;DENIED - registrant registered and was denied.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRegistrantsForWebinarAsync(String authorization, Long organizerKey, Long webinarKey, final ApiCallback<List<Registrant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRegistrantsForWebinarValidateBeforeCall(authorization, organizerKey, webinarKey, _callback);
        Type localVarReturnType = new TypeToken<List<Registrant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrant
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrantCall(String authorization, Long organizerKey, Long webinarKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/registrants/{registrantKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "registrantKey" + "}", localVarApiClient.escapeString(registrantKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrantValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRegistrant(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getRegistrant(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getRegistrant(Async)");
        }

        // verify the required parameter 'registrantKey' is set
        if (registrantKey == null) {
            throw new ApiException("Missing the required parameter 'registrantKey' when calling getRegistrant(Async)");
        }

        return getRegistrantCall(authorization, organizerKey, webinarKey, registrantKey, _callback);

    }

    /**
     * Get registrant
     * Retrieve registration details for a specific registrant.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param registrantKey The key of the registrant (required)
     * @return RegistrantDetailed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RegistrantDetailed getRegistrant(String authorization, Long organizerKey, Long webinarKey, Long registrantKey) throws ApiException {
        ApiResponse<RegistrantDetailed> localVarResp = getRegistrantWithHttpInfo(authorization, organizerKey, webinarKey, registrantKey);
        return localVarResp.getData();
    }

    /**
     * Get registrant
     * Retrieve registration details for a specific registrant.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param registrantKey The key of the registrant (required)
     * @return ApiResponse&lt;RegistrantDetailed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrantDetailed> getRegistrantWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long registrantKey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrantValidateBeforeCall(authorization, organizerKey, webinarKey, registrantKey, null);
        Type localVarReturnType = new TypeToken<RegistrantDetailed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get registrant (asynchronously)
     * Retrieve registration details for a specific registrant.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrantAsync(String authorization, Long organizerKey, Long webinarKey, Long registrantKey, final ApiCallback<RegistrantDetailed> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrantValidateBeforeCall(authorization, organizerKey, webinarKey, registrantKey, _callback);
        Type localVarReturnType = new TypeToken<RegistrantDetailed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationFields
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationFieldsCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/registrants/fields"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationFieldsValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRegistrationFields(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getRegistrationFields(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getRegistrationFields(Async)");
        }

        return getRegistrationFieldsCall(authorization, organizerKey, webinarKey, _callback);

    }

    /**
     * Get registration fields
     * Retrieve required, optional registration, and custom questions for a specified webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return RegistrationFields
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationFields getRegistrationFields(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        ApiResponse<RegistrationFields> localVarResp = getRegistrationFieldsWithHttpInfo(authorization, organizerKey, webinarKey);
        return localVarResp.getData();
    }

    /**
     * Get registration fields
     * Retrieve required, optional registration, and custom questions for a specified webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return ApiResponse&lt;RegistrationFields&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationFields> getRegistrationFieldsWithHttpInfo(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationFieldsValidateBeforeCall(authorization, organizerKey, webinarKey, null);
        Type localVarReturnType = new TypeToken<RegistrationFields>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get registration fields (asynchronously)
     * Retrieve required, optional registration, and custom questions for a specified webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationFieldsAsync(String authorization, Long organizerKey, Long webinarKey, final ApiCallback<RegistrationFields> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationFieldsValidateBeforeCall(authorization, organizerKey, webinarKey, _callback);
        Type localVarReturnType = new TypeToken<RegistrationFields>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
