/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a completed webinar session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:28.365088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Session {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_REGISTRANTS_ATTENDED = "registrantsAttended";
  @SerializedName(SERIALIZED_NAME_REGISTRANTS_ATTENDED)
  private Integer registrantsAttended;

  public static final String SERIALIZED_NAME_SESSION_KEY = "sessionKey";
  @SerializedName(SERIALIZED_NAME_SESSION_KEY)
  private Long sessionKey;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_WEBINAR_I_D = "webinarID";
  @SerializedName(SERIALIZED_NAME_WEBINAR_I_D)
  private String webinarID;

  public static final String SERIALIZED_NAME_WEBINAR_KEY = "webinarKey";
  @SerializedName(SERIALIZED_NAME_WEBINAR_KEY)
  private Long webinarKey;

  public Session() {
  }

  public Session endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The ending time of the webinar session
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Session registrantsAttended(Integer registrantsAttended) {
    this.registrantsAttended = registrantsAttended;
    return this;
  }

  /**
   * The number of registrants who attended the webinar session
   * @return registrantsAttended
   */
  @javax.annotation.Nonnull
  public Integer getRegistrantsAttended() {
    return registrantsAttended;
  }

  public void setRegistrantsAttended(Integer registrantsAttended) {
    this.registrantsAttended = registrantsAttended;
  }


  public Session sessionKey(Long sessionKey) {
    this.sessionKey = sessionKey;
    return this;
  }

  /**
   * The unique key of the webinar session
   * @return sessionKey
   */
  @javax.annotation.Nonnull
  public Long getSessionKey() {
    return sessionKey;
  }

  public void setSessionKey(Long sessionKey) {
    this.sessionKey = sessionKey;
  }


  public Session startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The starting time of the webinar session
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Session webinarID(String webinarID) {
    this.webinarID = webinarID;
    return this;
  }

  /**
   * The 9-digit webinar ID
   * @return webinarID
   */
  @javax.annotation.Nonnull
  public String getWebinarID() {
    return webinarID;
  }

  public void setWebinarID(String webinarID) {
    this.webinarID = webinarID;
  }


  public Session webinarKey(Long webinarKey) {
    this.webinarKey = webinarKey;
    return this;
  }

  /**
   * The unique key of the webinar
   * @return webinarKey
   */
  @javax.annotation.Nonnull
  public Long getWebinarKey() {
    return webinarKey;
  }

  public void setWebinarKey(Long webinarKey) {
    this.webinarKey = webinarKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.endTime, session.endTime) &&
        Objects.equals(this.registrantsAttended, session.registrantsAttended) &&
        Objects.equals(this.sessionKey, session.sessionKey) &&
        Objects.equals(this.startTime, session.startTime) &&
        Objects.equals(this.webinarID, session.webinarID) &&
        Objects.equals(this.webinarKey, session.webinarKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, registrantsAttended, sessionKey, startTime, webinarID, webinarKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    registrantsAttended: ").append(toIndentedString(registrantsAttended)).append("\n");
    sb.append("    sessionKey: ").append(toIndentedString(sessionKey)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    webinarID: ").append(toIndentedString(webinarID)).append("\n");
    sb.append("    webinarKey: ").append(toIndentedString(webinarKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("registrantsAttended");
    openapiFields.add("sessionKey");
    openapiFields.add("startTime");
    openapiFields.add("webinarID");
    openapiFields.add("webinarKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("registrantsAttended");
    openapiRequiredFields.add("sessionKey");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("webinarID");
    openapiRequiredFields.add("webinarKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Session
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Session.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Session.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Session` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Session.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("webinarID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webinarID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webinarID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Session given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Session
   * @throws IOException if the JSON string is invalid with respect to Session
   */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

  /**
   * Convert an instance of Session to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

