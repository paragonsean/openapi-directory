/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Attendee;
import org.openapitools.client.model.AttendeeQuestion;
import org.openapitools.client.model.PollAnswer;
import org.openapitools.client.model.Registrant;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttendeesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttendeesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttendeesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAttendee
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees/{registrantKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()))
            .replace("{" + "registrantKey" + "}", localVarApiClient.escapeString(registrantKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttendeeValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAttendee(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getAttendee(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getAttendee(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getAttendee(Async)");
        }

        // verify the required parameter 'registrantKey' is set
        if (registrantKey == null) {
            throw new ApiException("Missing the required parameter 'registrantKey' when calling getAttendee(Async)");
        }

        return getAttendeeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, _callback);

    }

    /**
     * Get attendee
     * Retrieve registration details for a particular attendee of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @return Registrant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Registrant getAttendee(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey) throws ApiException {
        ApiResponse<Registrant> localVarResp = getAttendeeWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey, registrantKey);
        return localVarResp.getData();
    }

    /**
     * Get attendee
     * Retrieve registration details for a particular attendee of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @return ApiResponse&lt;Registrant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Registrant> getAttendeeWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey) throws ApiException {
        okhttp3.Call localVarCall = getAttendeeValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, null);
        Type localVarReturnType = new TypeToken<Registrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attendee (asynchronously)
     * Retrieve registration details for a particular attendee of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeeAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback<Registrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttendeeValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, _callback);
        Type localVarReturnType = new TypeToken<Registrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttendeePollAnswers
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeePollAnswersCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees/{registrantKey}/polls"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()))
            .replace("{" + "registrantKey" + "}", localVarApiClient.escapeString(registrantKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttendeePollAnswersValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAttendeePollAnswers(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getAttendeePollAnswers(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getAttendeePollAnswers(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getAttendeePollAnswers(Async)");
        }

        // verify the required parameter 'registrantKey' is set
        if (registrantKey == null) {
            throw new ApiException("Missing the required parameter 'registrantKey' when calling getAttendeePollAnswers(Async)");
        }

        return getAttendeePollAnswersCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, _callback);

    }

    /**
     * Get attendee poll answers
     * Get poll answers from a particular attendee of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @return List&lt;PollAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PollAnswer> getAttendeePollAnswers(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey) throws ApiException {
        ApiResponse<List<PollAnswer>> localVarResp = getAttendeePollAnswersWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey, registrantKey);
        return localVarResp.getData();
    }

    /**
     * Get attendee poll answers
     * Get poll answers from a particular attendee of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @return ApiResponse&lt;List&lt;PollAnswer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PollAnswer>> getAttendeePollAnswersWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey) throws ApiException {
        okhttp3.Call localVarCall = getAttendeePollAnswersValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, null);
        Type localVarReturnType = new TypeToken<List<PollAnswer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attendee poll answers (asynchronously)
     * Get poll answers from a particular attendee of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeePollAnswersAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback<List<PollAnswer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttendeePollAnswersValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, _callback);
        Type localVarReturnType = new TypeToken<List<PollAnswer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttendeeQuestions
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeeQuestionsCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees/{registrantKey}/questions"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()))
            .replace("{" + "registrantKey" + "}", localVarApiClient.escapeString(registrantKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttendeeQuestionsValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAttendeeQuestions(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getAttendeeQuestions(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getAttendeeQuestions(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getAttendeeQuestions(Async)");
        }

        // verify the required parameter 'registrantKey' is set
        if (registrantKey == null) {
            throw new ApiException("Missing the required parameter 'registrantKey' when calling getAttendeeQuestions(Async)");
        }

        return getAttendeeQuestionsCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, _callback);

    }

    /**
     * Get attendee questions
     * Get questions asked by an attendee during a webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @return List&lt;AttendeeQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<AttendeeQuestion> getAttendeeQuestions(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey) throws ApiException {
        ApiResponse<List<AttendeeQuestion>> localVarResp = getAttendeeQuestionsWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey, registrantKey);
        return localVarResp.getData();
    }

    /**
     * Get attendee questions
     * Get questions asked by an attendee during a webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @return ApiResponse&lt;List&lt;AttendeeQuestion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttendeeQuestion>> getAttendeeQuestionsWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey) throws ApiException {
        okhttp3.Call localVarCall = getAttendeeQuestionsValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, null);
        Type localVarReturnType = new TypeToken<List<AttendeeQuestion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attendee questions (asynchronously)
     * Get questions asked by an attendee during a webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeeQuestionsAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback<List<AttendeeQuestion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttendeeQuestionsValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, _callback);
        Type localVarReturnType = new TypeToken<List<AttendeeQuestion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttendeeSurveyAnswers
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeeSurveyAnswersCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees/{registrantKey}/surveys"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()))
            .replace("{" + "registrantKey" + "}", localVarApiClient.escapeString(registrantKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttendeeSurveyAnswersValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAttendeeSurveyAnswers(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getAttendeeSurveyAnswers(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getAttendeeSurveyAnswers(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getAttendeeSurveyAnswers(Async)");
        }

        // verify the required parameter 'registrantKey' is set
        if (registrantKey == null) {
            throw new ApiException("Missing the required parameter 'registrantKey' when calling getAttendeeSurveyAnswers(Async)");
        }

        return getAttendeeSurveyAnswersCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, _callback);

    }

    /**
     * Get attendee survey answers
     * Retrieve survey answers from a particular attendee during a webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @return List&lt;PollAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PollAnswer> getAttendeeSurveyAnswers(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey) throws ApiException {
        ApiResponse<List<PollAnswer>> localVarResp = getAttendeeSurveyAnswersWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey, registrantKey);
        return localVarResp.getData();
    }

    /**
     * Get attendee survey answers
     * Retrieve survey answers from a particular attendee during a webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @return ApiResponse&lt;List&lt;PollAnswer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PollAnswer>> getAttendeeSurveyAnswersWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey) throws ApiException {
        okhttp3.Call localVarCall = getAttendeeSurveyAnswersValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, null);
        Type localVarReturnType = new TypeToken<List<PollAnswer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attendee survey answers (asynchronously)
     * Retrieve survey answers from a particular attendee during a webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param registrantKey The key of the registrant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeeSurveyAnswersAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, Long registrantKey, final ApiCallback<List<PollAnswer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttendeeSurveyAnswersValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, registrantKey, _callback);
        Type localVarReturnType = new TypeToken<List<PollAnswer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttendees
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeesCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/sessions/{sessionKey}/attendees"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "sessionKey" + "}", localVarApiClient.escapeString(sessionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttendeesValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAttendees(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getAttendees(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getAttendees(Async)");
        }

        // verify the required parameter 'sessionKey' is set
        if (sessionKey == null) {
            throw new ApiException("Missing the required parameter 'sessionKey' when calling getAttendees(Async)");
        }

        return getAttendeesCall(authorization, organizerKey, webinarKey, sessionKey, _callback);

    }

    /**
     * Get session attendees
     * Retrieve details for all attendees of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return List&lt;Attendee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Attendee> getAttendees(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        ApiResponse<List<Attendee>> localVarResp = getAttendeesWithHttpInfo(authorization, organizerKey, webinarKey, sessionKey);
        return localVarResp.getData();
    }

    /**
     * Get session attendees
     * Retrieve details for all attendees of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @return ApiResponse&lt;List&lt;Attendee&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Attendee>> getAttendeesWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long sessionKey) throws ApiException {
        okhttp3.Call localVarCall = getAttendeesValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, null);
        Type localVarReturnType = new TypeToken<List<Attendee>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get session attendees (asynchronously)
     * Retrieve details for all attendees of a specific webinar session. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param sessionKey The key of the webinar session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttendeesAsync(String authorization, Long organizerKey, Long webinarKey, Long sessionKey, final ApiCallback<List<Attendee>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttendeesValidateBeforeCall(authorization, organizerKey, webinarKey, sessionKey, _callback);
        Type localVarReturnType = new TypeToken<List<Attendee>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
