/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RegistrationField;
import org.openapitools.client.model.RegistrationQuestion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The fields to be completed on the webinar registration form.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:28.365088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegistrationFields {
  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<RegistrationField> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUESTIONS = "questions";
  @SerializedName(SERIALIZED_NAME_QUESTIONS)
  private List<RegistrationQuestion> questions = new ArrayList<>();

  public RegistrationFields() {
  }

  public RegistrationFields fields(List<RegistrationField> fields) {
    this.fields = fields;
    return this;
  }

  public RegistrationFields addFieldsItem(RegistrationField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * The default fields the organizer has selected for the webinar registration form
   * @return fields
   */
  @javax.annotation.Nonnull
  public List<RegistrationField> getFields() {
    return fields;
  }

  public void setFields(List<RegistrationField> fields) {
    this.fields = fields;
  }


  public RegistrationFields questions(List<RegistrationQuestion> questions) {
    this.questions = questions;
    return this;
  }

  public RegistrationFields addQuestionsItem(RegistrationQuestion questionsItem) {
    if (this.questions == null) {
      this.questions = new ArrayList<>();
    }
    this.questions.add(questionsItem);
    return this;
  }

  /**
   * Custom fields created by the organizer for the webinar registration form
   * @return questions
   */
  @javax.annotation.Nonnull
  public List<RegistrationQuestion> getQuestions() {
    return questions;
  }

  public void setQuestions(List<RegistrationQuestion> questions) {
    this.questions = questions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrationFields registrationFields = (RegistrationFields) o;
    return Objects.equals(this.fields, registrationFields.fields) &&
        Objects.equals(this.questions, registrationFields.questions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, questions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrationFields {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    questions: ").append(toIndentedString(questions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fields");
    openapiFields.add("questions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("questions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistrationFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistrationFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistrationFields is not found in the empty JSON string", RegistrationFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistrationFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistrationFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegistrationFields.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }

      JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
      // validate the required field `fields` (array)
      for (int i = 0; i < jsonArrayfields.size(); i++) {
        RegistrationField.validateJsonElement(jsonArrayfields.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("questions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `questions` to be an array in the JSON string but got `%s`", jsonObj.get("questions").toString()));
      }

      JsonArray jsonArrayquestions = jsonObj.getAsJsonArray("questions");
      // validate the required field `questions` (array)
      for (int i = 0; i < jsonArrayquestions.size(); i++) {
        RegistrationQuestion.validateJsonElement(jsonArrayquestions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistrationFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistrationFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistrationFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistrationFields.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistrationFields>() {
           @Override
           public void write(JsonWriter out, RegistrationFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistrationFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistrationFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistrationFields
   * @throws IOException if the JSON string is invalid with respect to RegistrationFields
   */
  public static RegistrationFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistrationFields.class);
  }

  /**
   * Convert an instance of RegistrationFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

