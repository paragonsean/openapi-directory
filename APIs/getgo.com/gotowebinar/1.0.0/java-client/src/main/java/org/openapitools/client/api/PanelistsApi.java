/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreatedPanelist;
import org.openapitools.client.model.Panelist;
import org.openapitools.client.model.PanelistReqCreate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PanelistsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PanelistsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PanelistsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPanelists
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body Array of panelists (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPanelistsCall(String authorization, Long organizerKey, Long webinarKey, List<PanelistReqCreate> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/panelists"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPanelistsValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, List<PanelistReqCreate> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createPanelists(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling createPanelists(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling createPanelists(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPanelists(Async)");
        }

        return createPanelistsCall(authorization, organizerKey, webinarKey, body, _callback);

    }

    /**
     * Create Panelists
     * Create panelists for a specified webinar
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body Array of panelists (required)
     * @return List&lt;CreatedPanelist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<CreatedPanelist> createPanelists(String authorization, Long organizerKey, Long webinarKey, List<PanelistReqCreate> body) throws ApiException {
        ApiResponse<List<CreatedPanelist>> localVarResp = createPanelistsWithHttpInfo(authorization, organizerKey, webinarKey, body);
        return localVarResp.getData();
    }

    /**
     * Create Panelists
     * Create panelists for a specified webinar
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body Array of panelists (required)
     * @return ApiResponse&lt;List&lt;CreatedPanelist&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreatedPanelist>> createPanelistsWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, List<PanelistReqCreate> body) throws ApiException {
        okhttp3.Call localVarCall = createPanelistsValidateBeforeCall(authorization, organizerKey, webinarKey, body, null);
        Type localVarReturnType = new TypeToken<List<CreatedPanelist>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Panelists (asynchronously)
     * Create panelists for a specified webinar
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param body Array of panelists (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPanelistsAsync(String authorization, Long organizerKey, Long webinarKey, List<PanelistReqCreate> body, final ApiCallback<List<CreatedPanelist>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPanelistsValidateBeforeCall(authorization, organizerKey, webinarKey, body, _callback);
        Type localVarReturnType = new TypeToken<List<CreatedPanelist>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebinarPanelist
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param panelistKey The key of the webinar panelist (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebinarPanelistCall(String authorization, Long organizerKey, Long webinarKey, Long panelistKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/panelists/{panelistKey}"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "panelistKey" + "}", localVarApiClient.escapeString(panelistKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebinarPanelistValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long panelistKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteWebinarPanelist(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling deleteWebinarPanelist(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling deleteWebinarPanelist(Async)");
        }

        // verify the required parameter 'panelistKey' is set
        if (panelistKey == null) {
            throw new ApiException("Missing the required parameter 'panelistKey' when calling deleteWebinarPanelist(Async)");
        }

        return deleteWebinarPanelistCall(authorization, organizerKey, webinarKey, panelistKey, _callback);

    }

    /**
     * Delete webinar panelist
     * Removes a webinar panelist.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param panelistKey The key of the webinar panelist (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWebinarPanelist(String authorization, Long organizerKey, Long webinarKey, Long panelistKey) throws ApiException {
        deleteWebinarPanelistWithHttpInfo(authorization, organizerKey, webinarKey, panelistKey);
    }

    /**
     * Delete webinar panelist
     * Removes a webinar panelist.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param panelistKey The key of the webinar panelist (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWebinarPanelistWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long panelistKey) throws ApiException {
        okhttp3.Call localVarCall = deleteWebinarPanelistValidateBeforeCall(authorization, organizerKey, webinarKey, panelistKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete webinar panelist (asynchronously)
     * Removes a webinar panelist.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param panelistKey The key of the webinar panelist (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebinarPanelistAsync(String authorization, Long organizerKey, Long webinarKey, Long panelistKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebinarPanelistValidateBeforeCall(authorization, organizerKey, webinarKey, panelistKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPanelists
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPanelistsCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/panelists"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPanelistsValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPanelists(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling getPanelists(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling getPanelists(Async)");
        }

        return getPanelistsCall(authorization, organizerKey, webinarKey, _callback);

    }

    /**
     * Get webinar panelists
     * Retrieves all the panelists for a specific webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return List&lt;Panelist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Panelist> getPanelists(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        ApiResponse<List<Panelist>> localVarResp = getPanelistsWithHttpInfo(authorization, organizerKey, webinarKey);
        return localVarResp.getData();
    }

    /**
     * Get webinar panelists
     * Retrieves all the panelists for a specific webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @return ApiResponse&lt;List&lt;Panelist&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Panelist>> getPanelistsWithHttpInfo(String authorization, Long organizerKey, Long webinarKey) throws ApiException {
        okhttp3.Call localVarCall = getPanelistsValidateBeforeCall(authorization, organizerKey, webinarKey, null);
        Type localVarReturnType = new TypeToken<List<Panelist>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webinar panelists (asynchronously)
     * Retrieves all the panelists for a specific webinar.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPanelistsAsync(String authorization, Long organizerKey, Long webinarKey, final ApiCallback<List<Panelist>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPanelistsValidateBeforeCall(authorization, organizerKey, webinarKey, _callback);
        Type localVarReturnType = new TypeToken<List<Panelist>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendPanelistInvitation
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param panelistKey The key of the webinar panelist (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendPanelistInvitationCall(String authorization, Long organizerKey, Long webinarKey, Long panelistKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizers/{organizerKey}/webinars/{webinarKey}/panelists/{panelistKey}/resendInvitation"
            .replace("{" + "organizerKey" + "}", localVarApiClient.escapeString(organizerKey.toString()))
            .replace("{" + "webinarKey" + "}", localVarApiClient.escapeString(webinarKey.toString()))
            .replace("{" + "panelistKey" + "}", localVarApiClient.escapeString(panelistKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendPanelistInvitationValidateBeforeCall(String authorization, Long organizerKey, Long webinarKey, Long panelistKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling resendPanelistInvitation(Async)");
        }

        // verify the required parameter 'organizerKey' is set
        if (organizerKey == null) {
            throw new ApiException("Missing the required parameter 'organizerKey' when calling resendPanelistInvitation(Async)");
        }

        // verify the required parameter 'webinarKey' is set
        if (webinarKey == null) {
            throw new ApiException("Missing the required parameter 'webinarKey' when calling resendPanelistInvitation(Async)");
        }

        // verify the required parameter 'panelistKey' is set
        if (panelistKey == null) {
            throw new ApiException("Missing the required parameter 'panelistKey' when calling resendPanelistInvitation(Async)");
        }

        return resendPanelistInvitationCall(authorization, organizerKey, webinarKey, panelistKey, _callback);

    }

    /**
     * Resend panelist invitation
     * Resend the panelist invitation email.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param panelistKey The key of the webinar panelist (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void resendPanelistInvitation(String authorization, Long organizerKey, Long webinarKey, Long panelistKey) throws ApiException {
        resendPanelistInvitationWithHttpInfo(authorization, organizerKey, webinarKey, panelistKey);
    }

    /**
     * Resend panelist invitation
     * Resend the panelist invitation email.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param panelistKey The key of the webinar panelist (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendPanelistInvitationWithHttpInfo(String authorization, Long organizerKey, Long webinarKey, Long panelistKey) throws ApiException {
        okhttp3.Call localVarCall = resendPanelistInvitationValidateBeforeCall(authorization, organizerKey, webinarKey, panelistKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend panelist invitation (asynchronously)
     * Resend the panelist invitation email.
     * @param authorization Access token (required)
     * @param organizerKey The key of the organizer (required)
     * @param webinarKey The key of the webinar (required)
     * @param panelistKey The key of the webinar panelist (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendPanelistInvitationAsync(String authorization, Long organizerKey, Long webinarKey, Long panelistKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendPanelistInvitationValidateBeforeCall(authorization, organizerKey, webinarKey, panelistKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
