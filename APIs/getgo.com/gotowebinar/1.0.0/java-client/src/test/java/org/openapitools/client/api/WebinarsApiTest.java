/*
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountWebinarsResponse;
import org.openapitools.client.model.Attendee;
import org.openapitools.client.model.Audio;
import org.openapitools.client.model.AudioUpdate;
import org.openapitools.client.model.CreatedWebinar;
import org.openapitools.client.model.DateTimeRange;
import org.openapitools.client.model.HistoricalWebinar;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SessionPerformance;
import org.openapitools.client.model.UpcomingWebinar;
import org.openapitools.client.model.Webinar;
import org.openapitools.client.model.WebinarByKey;
import org.openapitools.client.model.WebinarReqCreate;
import org.openapitools.client.model.WebinarReqUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebinarsApi
 */
@Disabled
public class WebinarsApiTest {

    private final WebinarsApi api = new WebinarsApi();

    /**
     * Cancel webinar
     *
     * Cancels a specific webinar. If the webinar is a series or sequence, this call deletes all scheduled sessions. To send cancellation emails to registrants set sendCancellationEmails&#x3D;true in the request. When the cancellation emails are sent, the default generated message is used in the cancellation email body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelWebinarTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        Long webinarKey = null;
        Boolean sendCancellationEmails = null;
        api.cancelWebinar(authorization, organizerKey, webinarKey, sendCancellationEmails);
        // TODO: test validations
    }

    /**
     * Create webinar
     *
     * Creates a single session webinar, a sequence of webinars or a series of webinars depending on the type field in the body: \&quot;single_session\&quot; creates a single webinar session, \&quot;sequence\&quot; creates a webinar with multiple meeting times where attendees are expected to be the same for all sessions, and \&quot;series\&quot; creates a webinar with multiple meetings times where attendees choose only one to attend. The default, if no type is declared, is single_session. A sequence webinar requires a \&quot;recurrenceStart\&quot; object consisting of a \&quot;startTime\&quot; and \&quot;endTime\&quot; key for the first webinar of the sequence, a \&quot;recurrencePattern\&quot; of \&quot;daily\&quot;, \&quot;weekly\&quot;, \&quot;monthly\&quot;, and a \&quot;recurrenceEnd\&quot; which is the last date of the sequence (for example, 2016-12-01). A series webinar requires a \&quot;times\&quot; array with a discrete \&quot;startTime\&quot; and \&quot;endTime\&quot; for each webinar in the series. The call requires a webinar subject and description. The \&quot;isPasswordProtected\&quot; sets whether the webinar requires a password for attendees to join. If set to True, the organizer must go to Registration Settings at My Webinars (https://global.gotowebinar.com/webinars.tmpl) and add the password to the webinar, and send the password to the registrants. The response provides a numeric webinarKey in string format for the new webinar. Once a webinar has been created with this method, you can accept registrations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebinarTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        WebinarReqCreate body = null;
        CreatedWebinar response = api.createWebinar(authorization, organizerKey, body);
        // TODO: test validations
    }

    /**
     * Get all webinars for an account
     *
     * Retrieves the list of webinars for an account within a given date range. __*Page*__ and __*size*__ parameters are optional. Default __*page*__ is 0 and default __*size*__ is 20. For technical reasons, this call cannot be executed from this documentation. Please use the curl command to execute it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAccountWebinarsTest() throws ApiException {
        String authorization = null;
        Long accountKey = null;
        OffsetDateTime fromTime = null;
        OffsetDateTime toTime = null;
        Long page = null;
        Long size = null;
        AccountWebinarsResponse response = api.getAllAccountWebinars(authorization, accountKey, fromTime, toTime, page, size);
        // TODO: test validations
    }

    /**
     * Get all webinars
     *
     * Returns webinars scheduled for the future for a specified organizer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllWebinarsTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        List<Webinar> response = api.getAllWebinars(authorization, organizerKey);
        // TODO: test validations
    }

    /**
     * Get attendees for all webinar sessions
     *
     * Returns all attendees for all sessions of the specified webinar.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttendeesForAllWebinarSessionsTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        Long webinarKey = null;
        List<Attendee> response = api.getAttendeesForAllWebinarSessions(authorization, organizerKey, webinarKey);
        // TODO: test validations
    }

    /**
     * Get audio information
     *
     * Retrieves the audio/conferencing information for a specific webinar.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAudioInformationTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        Long webinarKey = null;
        Audio response = api.getAudioInformation(authorization, organizerKey, webinarKey);
        // TODO: test validations
    }

    /**
     * Get historical webinars
     *
     * Returns details for completed webinars for the specified organizer and completed webinars of other organizers where the specified organizer is a co-organizer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHistoricalWebinarsTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        OffsetDateTime fromTime = null;
        OffsetDateTime toTime = null;
        List<HistoricalWebinar> response = api.getHistoricalWebinars(authorization, organizerKey, fromTime, toTime);
        // TODO: test validations
    }

    /**
     * Get performance for all webinar sessions
     *
     * Gets performance details for all sessions of a specific webinar.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPerformanceForAllWebinarSessionsTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        Long webinarKey = null;
        Map<String, SessionPerformance> response = api.getPerformanceForAllWebinarSessions(authorization, organizerKey, webinarKey);
        // TODO: test validations
    }

    /**
     * Get upcoming webinars
     *
     * Returns webinars scheduled for the future for the specified organizer and webinars of other organizers where the specified organizer is a co-organizer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpcomingWebinarsTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        List<UpcomingWebinar> response = api.getUpcomingWebinars(authorization, organizerKey);
        // TODO: test validations
    }

    /**
     * Get webinar
     *
     * Retrieve information on a specific webinar. If the type of the webinar is &#39;sequence&#39;, a sequence of future times will be provided. Webinars of type &#39;series&#39; are treated the same as normal webinars - each session in the webinar series has a different webinarKey. If an organizer cancels a webinar, then a request to get that webinar would return a &#39;404 Not Found&#39; error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebinarTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        Long webinarKey = null;
        WebinarByKey response = api.getWebinar(authorization, organizerKey, webinarKey);
        // TODO: test validations
    }

    /**
     * Get webinar meeting times
     *
     * Retrieves the meeting times for a webinar.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebinarMeetingTimesTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        Long webinarKey = null;
        List<DateTimeRange> response = api.getWebinarMeetingTimes(authorization, organizerKey, webinarKey);
        // TODO: test validations
    }

    /**
     * Update audio information
     *
     * Updates the audio/conferencing settings for a specific webinar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAudioInformationTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        Long webinarKey = null;
        AudioUpdate body = null;
        Boolean notifyParticipants = null;
        api.updateAudioInformation(authorization, organizerKey, webinarKey, body, notifyParticipants);
        // TODO: test validations
    }

    /**
     * Update webinar
     *
     * Updates a webinar. The call requires at least one of the parameters in the request body. The request completely replaces the existing session, series, or sequence and so must include the full definition of each as for the Create call. Set notifyParticipants&#x3D;true to send update emails to registrants.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebinarTest() throws ApiException {
        String authorization = null;
        Long organizerKey = null;
        Long webinarKey = null;
        WebinarReqUpdate body = null;
        Boolean notifyParticipants = null;
        api.updateWebinar(authorization, organizerKey, webinarKey, body, notifyParticipants);
        // TODO: test validations
    }

}
