/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoorganizer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoorganizer::OAICoorganizer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoorganizer::OAICoorganizer() {
    this->initializeModel();
}

OAICoorganizer::~OAICoorganizer() {}

void OAICoorganizer::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_join_link_isSet = false;
    m_join_link_isValid = false;

    m_member_key_isSet = false;
    m_member_key_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;
}

void OAICoorganizer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoorganizer::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_join_link_isValid = ::OpenAPI::fromJsonValue(m_join_link, json[QString("joinLink")]);
    m_join_link_isSet = !json[QString("joinLink")].isNull() && m_join_link_isValid;

    m_member_key_isValid = ::OpenAPI::fromJsonValue(m_member_key, json[QString("memberKey")]);
    m_member_key_isSet = !json[QString("memberKey")].isNull() && m_member_key_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;
}

QString OAICoorganizer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoorganizer::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_join_link_isSet) {
        obj.insert(QString("joinLink"), ::OpenAPI::toJsonValue(m_join_link));
    }
    if (m_member_key_isSet) {
        obj.insert(QString("memberKey"), ::OpenAPI::toJsonValue(m_member_key));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    return obj;
}

QString OAICoorganizer::getEmail() const {
    return m_email;
}
void OAICoorganizer::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICoorganizer::is_email_Set() const{
    return m_email_isSet;
}

bool OAICoorganizer::is_email_Valid() const{
    return m_email_isValid;
}

bool OAICoorganizer::isExternal() const {
    return m_external;
}
void OAICoorganizer::setExternal(const bool &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAICoorganizer::is_external_Set() const{
    return m_external_isSet;
}

bool OAICoorganizer::is_external_Valid() const{
    return m_external_isValid;
}

QString OAICoorganizer::getGivenName() const {
    return m_given_name;
}
void OAICoorganizer::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAICoorganizer::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAICoorganizer::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAICoorganizer::getJoinLink() const {
    return m_join_link;
}
void OAICoorganizer::setJoinLink(const QString &join_link) {
    m_join_link = join_link;
    m_join_link_isSet = true;
}

bool OAICoorganizer::is_join_link_Set() const{
    return m_join_link_isSet;
}

bool OAICoorganizer::is_join_link_Valid() const{
    return m_join_link_isValid;
}

QString OAICoorganizer::getMemberKey() const {
    return m_member_key;
}
void OAICoorganizer::setMemberKey(const QString &member_key) {
    m_member_key = member_key;
    m_member_key_isSet = true;
}

bool OAICoorganizer::is_member_key_Set() const{
    return m_member_key_isSet;
}

bool OAICoorganizer::is_member_key_Valid() const{
    return m_member_key_isValid;
}

QString OAICoorganizer::getSurname() const {
    return m_surname;
}
void OAICoorganizer::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAICoorganizer::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAICoorganizer::is_surname_Valid() const{
    return m_surname_isValid;
}

bool OAICoorganizer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoorganizer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_external_isValid && m_given_name_isValid && m_join_link_isValid && m_member_key_isValid && m_surname_isValid && true;
}

} // namespace OpenAPI
