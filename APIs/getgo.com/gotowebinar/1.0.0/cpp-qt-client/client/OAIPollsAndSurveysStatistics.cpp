/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPollsAndSurveysStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPollsAndSurveysStatistics::OAIPollsAndSurveysStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPollsAndSurveysStatistics::OAIPollsAndSurveysStatistics() {
    this->initializeModel();
}

OAIPollsAndSurveysStatistics::~OAIPollsAndSurveysStatistics() {}

void OAIPollsAndSurveysStatistics::initializeModel() {

    m_percentage_polls_completed_isSet = false;
    m_percentage_polls_completed_isValid = false;

    m_percentage_surveys_completed_isSet = false;
    m_percentage_surveys_completed_isValid = false;

    m_poll_count_isSet = false;
    m_poll_count_isValid = false;

    m_questions_asked_isSet = false;
    m_questions_asked_isValid = false;

    m_survey_count_isSet = false;
    m_survey_count_isValid = false;
}

void OAIPollsAndSurveysStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPollsAndSurveysStatistics::fromJsonObject(QJsonObject json) {

    m_percentage_polls_completed_isValid = ::OpenAPI::fromJsonValue(m_percentage_polls_completed, json[QString("percentagePollsCompleted")]);
    m_percentage_polls_completed_isSet = !json[QString("percentagePollsCompleted")].isNull() && m_percentage_polls_completed_isValid;

    m_percentage_surveys_completed_isValid = ::OpenAPI::fromJsonValue(m_percentage_surveys_completed, json[QString("percentageSurveysCompleted")]);
    m_percentage_surveys_completed_isSet = !json[QString("percentageSurveysCompleted")].isNull() && m_percentage_surveys_completed_isValid;

    m_poll_count_isValid = ::OpenAPI::fromJsonValue(m_poll_count, json[QString("pollCount")]);
    m_poll_count_isSet = !json[QString("pollCount")].isNull() && m_poll_count_isValid;

    m_questions_asked_isValid = ::OpenAPI::fromJsonValue(m_questions_asked, json[QString("questionsAsked")]);
    m_questions_asked_isSet = !json[QString("questionsAsked")].isNull() && m_questions_asked_isValid;

    m_survey_count_isValid = ::OpenAPI::fromJsonValue(m_survey_count, json[QString("surveyCount")]);
    m_survey_count_isSet = !json[QString("surveyCount")].isNull() && m_survey_count_isValid;
}

QString OAIPollsAndSurveysStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPollsAndSurveysStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_percentage_polls_completed_isSet) {
        obj.insert(QString("percentagePollsCompleted"), ::OpenAPI::toJsonValue(m_percentage_polls_completed));
    }
    if (m_percentage_surveys_completed_isSet) {
        obj.insert(QString("percentageSurveysCompleted"), ::OpenAPI::toJsonValue(m_percentage_surveys_completed));
    }
    if (m_poll_count_isSet) {
        obj.insert(QString("pollCount"), ::OpenAPI::toJsonValue(m_poll_count));
    }
    if (m_questions_asked_isSet) {
        obj.insert(QString("questionsAsked"), ::OpenAPI::toJsonValue(m_questions_asked));
    }
    if (m_survey_count_isSet) {
        obj.insert(QString("surveyCount"), ::OpenAPI::toJsonValue(m_survey_count));
    }
    return obj;
}

float OAIPollsAndSurveysStatistics::getPercentagePollsCompleted() const {
    return m_percentage_polls_completed;
}
void OAIPollsAndSurveysStatistics::setPercentagePollsCompleted(const float &percentage_polls_completed) {
    m_percentage_polls_completed = percentage_polls_completed;
    m_percentage_polls_completed_isSet = true;
}

bool OAIPollsAndSurveysStatistics::is_percentage_polls_completed_Set() const{
    return m_percentage_polls_completed_isSet;
}

bool OAIPollsAndSurveysStatistics::is_percentage_polls_completed_Valid() const{
    return m_percentage_polls_completed_isValid;
}

float OAIPollsAndSurveysStatistics::getPercentageSurveysCompleted() const {
    return m_percentage_surveys_completed;
}
void OAIPollsAndSurveysStatistics::setPercentageSurveysCompleted(const float &percentage_surveys_completed) {
    m_percentage_surveys_completed = percentage_surveys_completed;
    m_percentage_surveys_completed_isSet = true;
}

bool OAIPollsAndSurveysStatistics::is_percentage_surveys_completed_Set() const{
    return m_percentage_surveys_completed_isSet;
}

bool OAIPollsAndSurveysStatistics::is_percentage_surveys_completed_Valid() const{
    return m_percentage_surveys_completed_isValid;
}

qint32 OAIPollsAndSurveysStatistics::getPollCount() const {
    return m_poll_count;
}
void OAIPollsAndSurveysStatistics::setPollCount(const qint32 &poll_count) {
    m_poll_count = poll_count;
    m_poll_count_isSet = true;
}

bool OAIPollsAndSurveysStatistics::is_poll_count_Set() const{
    return m_poll_count_isSet;
}

bool OAIPollsAndSurveysStatistics::is_poll_count_Valid() const{
    return m_poll_count_isValid;
}

qint32 OAIPollsAndSurveysStatistics::getQuestionsAsked() const {
    return m_questions_asked;
}
void OAIPollsAndSurveysStatistics::setQuestionsAsked(const qint32 &questions_asked) {
    m_questions_asked = questions_asked;
    m_questions_asked_isSet = true;
}

bool OAIPollsAndSurveysStatistics::is_questions_asked_Set() const{
    return m_questions_asked_isSet;
}

bool OAIPollsAndSurveysStatistics::is_questions_asked_Valid() const{
    return m_questions_asked_isValid;
}

float OAIPollsAndSurveysStatistics::getSurveyCount() const {
    return m_survey_count;
}
void OAIPollsAndSurveysStatistics::setSurveyCount(const float &survey_count) {
    m_survey_count = survey_count;
    m_survey_count_isSet = true;
}

bool OAIPollsAndSurveysStatistics::is_survey_count_Set() const{
    return m_survey_count_isSet;
}

bool OAIPollsAndSurveysStatistics::is_survey_count_Valid() const{
    return m_survey_count_isValid;
}

bool OAIPollsAndSurveysStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percentage_polls_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_surveys_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_questions_asked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_survey_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPollsAndSurveysStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_percentage_polls_completed_isValid && m_percentage_surveys_completed_isValid && m_poll_count_isValid && m_questions_asked_isValid && m_survey_count_isValid && true;
}

} // namespace OpenAPI
