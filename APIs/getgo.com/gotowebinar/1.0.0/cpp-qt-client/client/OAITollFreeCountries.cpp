/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITollFreeCountries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITollFreeCountries::OAITollFreeCountries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITollFreeCountries::OAITollFreeCountries() {
    this->initializeModel();
}

OAITollFreeCountries::~OAITollFreeCountries() {}

void OAITollFreeCountries::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITollFreeCountries::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITollFreeCountries::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::AE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::AR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::AT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AU", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::AU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::BE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BG", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::BG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::BH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::BR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::BY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::CH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::CL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CN", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::CN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CO", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::CO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::CZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DK", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::DK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FI", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::FI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::GR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HK", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::HK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HU", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::HU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::IE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::IL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IS", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::IS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JP", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::JP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::KR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LU", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::LU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MX", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::MX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::MY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("false", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::FALSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::NZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::PA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::PE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::PH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::PL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RO", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::RO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RU", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::RU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::SA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::SE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SG", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::SG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::TH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::TR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TW", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::TW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::UA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::UY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VN", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::VN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollFreeCountries::ZA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITollFreeCountries::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITollFreeCountries::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITollFreeCountries::AE:
            val = "AE";
            break;
        case eOAITollFreeCountries::AR:
            val = "AR";
            break;
        case eOAITollFreeCountries::AT:
            val = "AT";
            break;
        case eOAITollFreeCountries::AU:
            val = "AU";
            break;
        case eOAITollFreeCountries::BE:
            val = "BE";
            break;
        case eOAITollFreeCountries::BG:
            val = "BG";
            break;
        case eOAITollFreeCountries::BH:
            val = "BH";
            break;
        case eOAITollFreeCountries::BR:
            val = "BR";
            break;
        case eOAITollFreeCountries::BY:
            val = "BY";
            break;
        case eOAITollFreeCountries::CA:
            val = "CA";
            break;
        case eOAITollFreeCountries::CH:
            val = "CH";
            break;
        case eOAITollFreeCountries::CL:
            val = "CL";
            break;
        case eOAITollFreeCountries::CN:
            val = "CN";
            break;
        case eOAITollFreeCountries::CO:
            val = "CO";
            break;
        case eOAITollFreeCountries::CZ:
            val = "CZ";
            break;
        case eOAITollFreeCountries::DE:
            val = "DE";
            break;
        case eOAITollFreeCountries::DK:
            val = "DK";
            break;
        case eOAITollFreeCountries::ES:
            val = "ES";
            break;
        case eOAITollFreeCountries::FI:
            val = "FI";
            break;
        case eOAITollFreeCountries::FR:
            val = "FR";
            break;
        case eOAITollFreeCountries::GB:
            val = "GB";
            break;
        case eOAITollFreeCountries::GR:
            val = "GR";
            break;
        case eOAITollFreeCountries::HK:
            val = "HK";
            break;
        case eOAITollFreeCountries::HU:
            val = "HU";
            break;
        case eOAITollFreeCountries::ID:
            val = "ID";
            break;
        case eOAITollFreeCountries::IE:
            val = "IE";
            break;
        case eOAITollFreeCountries::IL:
            val = "IL";
            break;
        case eOAITollFreeCountries::IN:
            val = "IN";
            break;
        case eOAITollFreeCountries::IS:
            val = "IS";
            break;
        case eOAITollFreeCountries::IT:
            val = "IT";
            break;
        case eOAITollFreeCountries::JP:
            val = "JP";
            break;
        case eOAITollFreeCountries::KR:
            val = "KR";
            break;
        case eOAITollFreeCountries::LU:
            val = "LU";
            break;
        case eOAITollFreeCountries::MX:
            val = "MX";
            break;
        case eOAITollFreeCountries::MY:
            val = "MY";
            break;
        case eOAITollFreeCountries::NL:
            val = "NL";
            break;
        case eOAITollFreeCountries::FALSE:
            val = "false";
            break;
        case eOAITollFreeCountries::NZ:
            val = "NZ";
            break;
        case eOAITollFreeCountries::PA:
            val = "PA";
            break;
        case eOAITollFreeCountries::PE:
            val = "PE";
            break;
        case eOAITollFreeCountries::PH:
            val = "PH";
            break;
        case eOAITollFreeCountries::PL:
            val = "PL";
            break;
        case eOAITollFreeCountries::PT:
            val = "PT";
            break;
        case eOAITollFreeCountries::RO:
            val = "RO";
            break;
        case eOAITollFreeCountries::RU:
            val = "RU";
            break;
        case eOAITollFreeCountries::SA:
            val = "SA";
            break;
        case eOAITollFreeCountries::SE:
            val = "SE";
            break;
        case eOAITollFreeCountries::SG:
            val = "SG";
            break;
        case eOAITollFreeCountries::TH:
            val = "TH";
            break;
        case eOAITollFreeCountries::TR:
            val = "TR";
            break;
        case eOAITollFreeCountries::TW:
            val = "TW";
            break;
        case eOAITollFreeCountries::UA:
            val = "UA";
            break;
        case eOAITollFreeCountries::US:
            val = "US";
            break;
        case eOAITollFreeCountries::UY:
            val = "UY";
            break;
        case eOAITollFreeCountries::VN:
            val = "VN";
            break;
        case eOAITollFreeCountries::ZA:
            val = "ZA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITollFreeCountries::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITollFreeCountries::eOAITollFreeCountries OAITollFreeCountries::getValue() const {
    return m_value;
}

void OAITollFreeCountries::setValue(const OAITollFreeCountries::eOAITollFreeCountries& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITollFreeCountries::isSet() const {
    
    return m_value_isSet;
}

bool OAITollFreeCountries::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
