/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrantCreated.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrantCreated::OAIRegistrantCreated(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrantCreated::OAIRegistrantCreated() {
    this->initializeModel();
}

OAIRegistrantCreated::~OAIRegistrantCreated() {}

void OAIRegistrantCreated::initializeModel() {

    m_join_url_isSet = false;
    m_join_url_isValid = false;

    m_registrant_key_isSet = false;
    m_registrant_key_isValid = false;
}

void OAIRegistrantCreated::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrantCreated::fromJsonObject(QJsonObject json) {

    m_join_url_isValid = ::OpenAPI::fromJsonValue(m_join_url, json[QString("joinUrl")]);
    m_join_url_isSet = !json[QString("joinUrl")].isNull() && m_join_url_isValid;

    m_registrant_key_isValid = ::OpenAPI::fromJsonValue(m_registrant_key, json[QString("registrantKey")]);
    m_registrant_key_isSet = !json[QString("registrantKey")].isNull() && m_registrant_key_isValid;
}

QString OAIRegistrantCreated::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrantCreated::asJsonObject() const {
    QJsonObject obj;
    if (m_join_url_isSet) {
        obj.insert(QString("joinUrl"), ::OpenAPI::toJsonValue(m_join_url));
    }
    if (m_registrant_key_isSet) {
        obj.insert(QString("registrantKey"), ::OpenAPI::toJsonValue(m_registrant_key));
    }
    return obj;
}

QString OAIRegistrantCreated::getJoinUrl() const {
    return m_join_url;
}
void OAIRegistrantCreated::setJoinUrl(const QString &join_url) {
    m_join_url = join_url;
    m_join_url_isSet = true;
}

bool OAIRegistrantCreated::is_join_url_Set() const{
    return m_join_url_isSet;
}

bool OAIRegistrantCreated::is_join_url_Valid() const{
    return m_join_url_isValid;
}

qint64 OAIRegistrantCreated::getRegistrantKey() const {
    return m_registrant_key;
}
void OAIRegistrantCreated::setRegistrantKey(const qint64 &registrant_key) {
    m_registrant_key = registrant_key;
    m_registrant_key_isSet = true;
}

bool OAIRegistrantCreated::is_registrant_key_Set() const{
    return m_registrant_key_isSet;
}

bool OAIRegistrantCreated::is_registrant_key_Valid() const{
    return m_registrant_key_isValid;
}

bool OAIRegistrantCreated::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_join_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrantCreated::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_join_url_isValid && m_registrant_key_isValid && true;
}

} // namespace OpenAPI
