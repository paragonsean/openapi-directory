/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoorganizerReqCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoorganizerReqCreate::OAICoorganizerReqCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoorganizerReqCreate::OAICoorganizerReqCreate() {
    this->initializeModel();
}

OAICoorganizerReqCreate::~OAICoorganizerReqCreate() {}

void OAICoorganizerReqCreate::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;
}

void OAICoorganizerReqCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoorganizerReqCreate::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;
}

QString OAICoorganizerReqCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoorganizerReqCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    return obj;
}

QString OAICoorganizerReqCreate::getEmail() const {
    return m_email;
}
void OAICoorganizerReqCreate::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICoorganizerReqCreate::is_email_Set() const{
    return m_email_isSet;
}

bool OAICoorganizerReqCreate::is_email_Valid() const{
    return m_email_isValid;
}

bool OAICoorganizerReqCreate::isExternal() const {
    return m_external;
}
void OAICoorganizerReqCreate::setExternal(const bool &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAICoorganizerReqCreate::is_external_Set() const{
    return m_external_isSet;
}

bool OAICoorganizerReqCreate::is_external_Valid() const{
    return m_external_isValid;
}

QString OAICoorganizerReqCreate::getGivenName() const {
    return m_given_name;
}
void OAICoorganizerReqCreate::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAICoorganizerReqCreate::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAICoorganizerReqCreate::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAICoorganizerReqCreate::getOrganizerKey() const {
    return m_organizer_key;
}
void OAICoorganizerReqCreate::setOrganizerKey(const QString &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAICoorganizerReqCreate::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAICoorganizerReqCreate::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

bool OAICoorganizerReqCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoorganizerReqCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_external_isValid && true;
}

} // namespace OpenAPI
