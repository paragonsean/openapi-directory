/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationAnswer::OAIRegistrationAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationAnswer::OAIRegistrationAnswer() {
    this->initializeModel();
}

OAIRegistrationAnswer::~OAIRegistrationAnswer() {}

void OAIRegistrationAnswer::initializeModel() {

    m_answer_isSet = false;
    m_answer_isValid = false;

    m_answer_key_isSet = false;
    m_answer_key_isValid = false;
}

void OAIRegistrationAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationAnswer::fromJsonObject(QJsonObject json) {

    m_answer_isValid = ::OpenAPI::fromJsonValue(m_answer, json[QString("answer")]);
    m_answer_isSet = !json[QString("answer")].isNull() && m_answer_isValid;

    m_answer_key_isValid = ::OpenAPI::fromJsonValue(m_answer_key, json[QString("answerKey")]);
    m_answer_key_isSet = !json[QString("answerKey")].isNull() && m_answer_key_isValid;
}

QString OAIRegistrationAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_isSet) {
        obj.insert(QString("answer"), ::OpenAPI::toJsonValue(m_answer));
    }
    if (m_answer_key_isSet) {
        obj.insert(QString("answerKey"), ::OpenAPI::toJsonValue(m_answer_key));
    }
    return obj;
}

QString OAIRegistrationAnswer::getAnswer() const {
    return m_answer;
}
void OAIRegistrationAnswer::setAnswer(const QString &answer) {
    m_answer = answer;
    m_answer_isSet = true;
}

bool OAIRegistrationAnswer::is_answer_Set() const{
    return m_answer_isSet;
}

bool OAIRegistrationAnswer::is_answer_Valid() const{
    return m_answer_isValid;
}

qint64 OAIRegistrationAnswer::getAnswerKey() const {
    return m_answer_key;
}
void OAIRegistrationAnswer::setAnswerKey(const qint64 &answer_key) {
    m_answer_key = answer_key;
    m_answer_key_isSet = true;
}

bool OAIRegistrationAnswer::is_answer_key_Set() const{
    return m_answer_key_isSet;
}

bool OAIRegistrationAnswer::is_answer_key_Valid() const{
    return m_answer_key_isValid;
}

bool OAIRegistrationAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_answer_isValid && m_answer_key_isValid && true;
}

} // namespace OpenAPI
