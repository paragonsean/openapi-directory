/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationQuestion::OAIRegistrationQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationQuestion::OAIRegistrationQuestion() {
    this->initializeModel();
}

OAIRegistrationQuestion::~OAIRegistrationQuestion() {}

void OAIRegistrationQuestion::initializeModel() {

    m_answers_isSet = false;
    m_answers_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_question_key_isSet = false;
    m_question_key_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRegistrationQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationQuestion::fromJsonObject(QJsonObject json) {

    m_answers_isValid = ::OpenAPI::fromJsonValue(m_answers, json[QString("answers")]);
    m_answers_isSet = !json[QString("answers")].isNull() && m_answers_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("maxSize")]);
    m_max_size_isSet = !json[QString("maxSize")].isNull() && m_max_size_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("question")]);
    m_question_isSet = !json[QString("question")].isNull() && m_question_isValid;

    m_question_key_isValid = ::OpenAPI::fromJsonValue(m_question_key, json[QString("questionKey")]);
    m_question_key_isSet = !json[QString("questionKey")].isNull() && m_question_key_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRegistrationQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_answers.size() > 0) {
        obj.insert(QString("answers"), ::OpenAPI::toJsonValue(m_answers));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("maxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_question_isSet) {
        obj.insert(QString("question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_question_key_isSet) {
        obj.insert(QString("questionKey"), ::OpenAPI::toJsonValue(m_question_key));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIRegistrationAnswer> OAIRegistrationQuestion::getAnswers() const {
    return m_answers;
}
void OAIRegistrationQuestion::setAnswers(const QList<OAIRegistrationAnswer> &answers) {
    m_answers = answers;
    m_answers_isSet = true;
}

bool OAIRegistrationQuestion::is_answers_Set() const{
    return m_answers_isSet;
}

bool OAIRegistrationQuestion::is_answers_Valid() const{
    return m_answers_isValid;
}

qint32 OAIRegistrationQuestion::getMaxSize() const {
    return m_max_size;
}
void OAIRegistrationQuestion::setMaxSize(const qint32 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIRegistrationQuestion::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIRegistrationQuestion::is_max_size_Valid() const{
    return m_max_size_isValid;
}

QString OAIRegistrationQuestion::getQuestion() const {
    return m_question;
}
void OAIRegistrationQuestion::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAIRegistrationQuestion::is_question_Set() const{
    return m_question_isSet;
}

bool OAIRegistrationQuestion::is_question_Valid() const{
    return m_question_isValid;
}

qint64 OAIRegistrationQuestion::getQuestionKey() const {
    return m_question_key;
}
void OAIRegistrationQuestion::setQuestionKey(const qint64 &question_key) {
    m_question_key = question_key;
    m_question_key_isSet = true;
}

bool OAIRegistrationQuestion::is_question_key_Set() const{
    return m_question_key_isSet;
}

bool OAIRegistrationQuestion::is_question_key_Valid() const{
    return m_question_key_isValid;
}

bool OAIRegistrationQuestion::isRequired() const {
    return m_required;
}
void OAIRegistrationQuestion::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIRegistrationQuestion::is_required_Set() const{
    return m_required_isSet;
}

bool OAIRegistrationQuestion::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIRegistrationQuestion::getType() const {
    return m_type;
}
void OAIRegistrationQuestion::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRegistrationQuestion::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRegistrationQuestion::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRegistrationQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_size_isValid && m_question_isValid && m_question_key_isValid && m_required_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
