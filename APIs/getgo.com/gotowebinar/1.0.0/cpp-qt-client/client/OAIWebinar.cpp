/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebinar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebinar::OAIWebinar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebinar::OAIWebinar() {
    this->initializeModel();
}

OAIWebinar::~OAIWebinar() {}

void OAIWebinar::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_in_session_isSet = false;
    m_in_session_isValid = false;

    m_number_of_registrants_isSet = false;
    m_number_of_registrants_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;

    m_registration_url_isSet = false;
    m_registration_url_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_times_isSet = false;
    m_times_isValid = false;

    m_webinar_id_isSet = false;
    m_webinar_id_isValid = false;

    m_webinar_key_isSet = false;
    m_webinar_key_isValid = false;
}

void OAIWebinar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebinar::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_in_session_isValid = ::OpenAPI::fromJsonValue(m_in_session, json[QString("inSession")]);
    m_in_session_isSet = !json[QString("inSession")].isNull() && m_in_session_isValid;

    m_number_of_registrants_isValid = ::OpenAPI::fromJsonValue(m_number_of_registrants, json[QString("numberOfRegistrants")]);
    m_number_of_registrants_isSet = !json[QString("numberOfRegistrants")].isNull() && m_number_of_registrants_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;

    m_registration_url_isValid = ::OpenAPI::fromJsonValue(m_registration_url, json[QString("registrationUrl")]);
    m_registration_url_isSet = !json[QString("registrationUrl")].isNull() && m_registration_url_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_times_isValid = ::OpenAPI::fromJsonValue(m_times, json[QString("times")]);
    m_times_isSet = !json[QString("times")].isNull() && m_times_isValid;

    m_webinar_id_isValid = ::OpenAPI::fromJsonValue(m_webinar_id, json[QString("webinarID")]);
    m_webinar_id_isSet = !json[QString("webinarID")].isNull() && m_webinar_id_isValid;

    m_webinar_key_isValid = ::OpenAPI::fromJsonValue(m_webinar_key, json[QString("webinarKey")]);
    m_webinar_key_isSet = !json[QString("webinarKey")].isNull() && m_webinar_key_isValid;
}

QString OAIWebinar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebinar::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_in_session_isSet) {
        obj.insert(QString("inSession"), ::OpenAPI::toJsonValue(m_in_session));
    }
    if (m_number_of_registrants_isSet) {
        obj.insert(QString("numberOfRegistrants"), ::OpenAPI::toJsonValue(m_number_of_registrants));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    if (m_registration_url_isSet) {
        obj.insert(QString("registrationUrl"), ::OpenAPI::toJsonValue(m_registration_url));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_times.size() > 0) {
        obj.insert(QString("times"), ::OpenAPI::toJsonValue(m_times));
    }
    if (m_webinar_id_isSet) {
        obj.insert(QString("webinarID"), ::OpenAPI::toJsonValue(m_webinar_id));
    }
    if (m_webinar_key_isSet) {
        obj.insert(QString("webinarKey"), ::OpenAPI::toJsonValue(m_webinar_key));
    }
    return obj;
}

QString OAIWebinar::getDescription() const {
    return m_description;
}
void OAIWebinar::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWebinar::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWebinar::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIWebinar::isInSession() const {
    return m_in_session;
}
void OAIWebinar::setInSession(const bool &in_session) {
    m_in_session = in_session;
    m_in_session_isSet = true;
}

bool OAIWebinar::is_in_session_Set() const{
    return m_in_session_isSet;
}

bool OAIWebinar::is_in_session_Valid() const{
    return m_in_session_isValid;
}

qint32 OAIWebinar::getNumberOfRegistrants() const {
    return m_number_of_registrants;
}
void OAIWebinar::setNumberOfRegistrants(const qint32 &number_of_registrants) {
    m_number_of_registrants = number_of_registrants;
    m_number_of_registrants_isSet = true;
}

bool OAIWebinar::is_number_of_registrants_Set() const{
    return m_number_of_registrants_isSet;
}

bool OAIWebinar::is_number_of_registrants_Valid() const{
    return m_number_of_registrants_isValid;
}

qint64 OAIWebinar::getOrganizerKey() const {
    return m_organizer_key;
}
void OAIWebinar::setOrganizerKey(const qint64 &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAIWebinar::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAIWebinar::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

QString OAIWebinar::getRegistrationUrl() const {
    return m_registration_url;
}
void OAIWebinar::setRegistrationUrl(const QString &registration_url) {
    m_registration_url = registration_url;
    m_registration_url_isSet = true;
}

bool OAIWebinar::is_registration_url_Set() const{
    return m_registration_url_isSet;
}

bool OAIWebinar::is_registration_url_Valid() const{
    return m_registration_url_isValid;
}

QString OAIWebinar::getSubject() const {
    return m_subject;
}
void OAIWebinar::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIWebinar::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIWebinar::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIWebinar::getTimeZone() const {
    return m_time_zone;
}
void OAIWebinar::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIWebinar::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIWebinar::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QList<OAIDateTimeRange> OAIWebinar::getTimes() const {
    return m_times;
}
void OAIWebinar::setTimes(const QList<OAIDateTimeRange> &times) {
    m_times = times;
    m_times_isSet = true;
}

bool OAIWebinar::is_times_Set() const{
    return m_times_isSet;
}

bool OAIWebinar::is_times_Valid() const{
    return m_times_isValid;
}

QString OAIWebinar::getWebinarId() const {
    return m_webinar_id;
}
void OAIWebinar::setWebinarId(const QString &webinar_id) {
    m_webinar_id = webinar_id;
    m_webinar_id_isSet = true;
}

bool OAIWebinar::is_webinar_id_Set() const{
    return m_webinar_id_isSet;
}

bool OAIWebinar::is_webinar_id_Valid() const{
    return m_webinar_id_isValid;
}

qint64 OAIWebinar::getWebinarKey() const {
    return m_webinar_key;
}
void OAIWebinar::setWebinarKey(const qint64 &webinar_key) {
    m_webinar_key = webinar_key;
    m_webinar_key_isSet = true;
}

bool OAIWebinar::is_webinar_key_Set() const{
    return m_webinar_key_isSet;
}

bool OAIWebinar::is_webinar_key_Valid() const{
    return m_webinar_key_isValid;
}

bool OAIWebinar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_registrants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_webinar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webinar_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebinar::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_in_session_isValid && m_number_of_registrants_isValid && m_organizer_key_isValid && m_registration_url_isValid && m_subject_isValid && m_time_zone_isValid && m_times_isValid && m_webinar_id_isValid && m_webinar_key_isValid && true;
}

} // namespace OpenAPI
