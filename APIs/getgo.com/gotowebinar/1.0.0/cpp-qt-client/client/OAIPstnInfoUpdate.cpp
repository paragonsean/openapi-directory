/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPstnInfoUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPstnInfoUpdate::OAIPstnInfoUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPstnInfoUpdate::OAIPstnInfoUpdate() {
    this->initializeModel();
}

OAIPstnInfoUpdate::~OAIPstnInfoUpdate() {}

void OAIPstnInfoUpdate::initializeModel() {

    m_toll_countries_isSet = false;
    m_toll_countries_isValid = false;

    m_toll_free_countries_isSet = false;
    m_toll_free_countries_isValid = false;
}

void OAIPstnInfoUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPstnInfoUpdate::fromJsonObject(QJsonObject json) {

    m_toll_countries_isValid = ::OpenAPI::fromJsonValue(m_toll_countries, json[QString("tollCountries")]);
    m_toll_countries_isSet = !json[QString("tollCountries")].isNull() && m_toll_countries_isValid;

    m_toll_free_countries_isValid = ::OpenAPI::fromJsonValue(m_toll_free_countries, json[QString("tollFreeCountries")]);
    m_toll_free_countries_isSet = !json[QString("tollFreeCountries")].isNull() && m_toll_free_countries_isValid;
}

QString OAIPstnInfoUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPstnInfoUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_toll_countries.size() > 0) {
        obj.insert(QString("tollCountries"), ::OpenAPI::toJsonValue(m_toll_countries));
    }
    if (m_toll_free_countries.size() > 0) {
        obj.insert(QString("tollFreeCountries"), ::OpenAPI::toJsonValue(m_toll_free_countries));
    }
    return obj;
}

QList<OAITollCountries> OAIPstnInfoUpdate::getTollCountries() const {
    return m_toll_countries;
}
void OAIPstnInfoUpdate::setTollCountries(const QList<OAITollCountries> &toll_countries) {
    m_toll_countries = toll_countries;
    m_toll_countries_isSet = true;
}

bool OAIPstnInfoUpdate::is_toll_countries_Set() const{
    return m_toll_countries_isSet;
}

bool OAIPstnInfoUpdate::is_toll_countries_Valid() const{
    return m_toll_countries_isValid;
}

QList<OAITollFreeCountries> OAIPstnInfoUpdate::getTollFreeCountries() const {
    return m_toll_free_countries;
}
void OAIPstnInfoUpdate::setTollFreeCountries(const QList<OAITollFreeCountries> &toll_free_countries) {
    m_toll_free_countries = toll_free_countries;
    m_toll_free_countries_isSet = true;
}

bool OAIPstnInfoUpdate::is_toll_free_countries_Set() const{
    return m_toll_free_countries_isSet;
}

bool OAIPstnInfoUpdate::is_toll_free_countries_Valid() const{
    return m_toll_free_countries_isValid;
}

bool OAIPstnInfoUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_toll_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_toll_free_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPstnInfoUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
