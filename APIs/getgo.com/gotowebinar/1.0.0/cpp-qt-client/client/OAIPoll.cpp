/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoll.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoll::OAIPoll(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoll::OAIPoll() {
    this->initializeModel();
}

OAIPoll::~OAIPoll() {}

void OAIPoll::initializeModel() {

    m_number_of_responses_isSet = false;
    m_number_of_responses_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_responses_isSet = false;
    m_responses_isValid = false;
}

void OAIPoll::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoll::fromJsonObject(QJsonObject json) {

    m_number_of_responses_isValid = ::OpenAPI::fromJsonValue(m_number_of_responses, json[QString("numberOfResponses")]);
    m_number_of_responses_isSet = !json[QString("numberOfResponses")].isNull() && m_number_of_responses_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("question")]);
    m_question_isSet = !json[QString("question")].isNull() && m_question_isValid;

    m_responses_isValid = ::OpenAPI::fromJsonValue(m_responses, json[QString("responses")]);
    m_responses_isSet = !json[QString("responses")].isNull() && m_responses_isValid;
}

QString OAIPoll::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoll::asJsonObject() const {
    QJsonObject obj;
    if (m_number_of_responses_isSet) {
        obj.insert(QString("numberOfResponses"), ::OpenAPI::toJsonValue(m_number_of_responses));
    }
    if (m_question_isSet) {
        obj.insert(QString("question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_responses.size() > 0) {
        obj.insert(QString("responses"), ::OpenAPI::toJsonValue(m_responses));
    }
    return obj;
}

qint32 OAIPoll::getNumberOfResponses() const {
    return m_number_of_responses;
}
void OAIPoll::setNumberOfResponses(const qint32 &number_of_responses) {
    m_number_of_responses = number_of_responses;
    m_number_of_responses_isSet = true;
}

bool OAIPoll::is_number_of_responses_Set() const{
    return m_number_of_responses_isSet;
}

bool OAIPoll::is_number_of_responses_Valid() const{
    return m_number_of_responses_isValid;
}

QString OAIPoll::getQuestion() const {
    return m_question;
}
void OAIPoll::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAIPoll::is_question_Set() const{
    return m_question_isSet;
}

bool OAIPoll::is_question_Valid() const{
    return m_question_isValid;
}

QList<OAIPollResponse> OAIPoll::getResponses() const {
    return m_responses;
}
void OAIPoll::setResponses(const QList<OAIPollResponse> &responses) {
    m_responses = responses;
    m_responses_isSet = true;
}

bool OAIPoll::is_responses_Set() const{
    return m_responses_isSet;
}

bool OAIPoll::is_responses_Valid() const{
    return m_responses_isValid;
}

bool OAIPoll::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_of_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoll::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_of_responses_isValid && m_question_isValid && m_responses_isValid && true;
}

} // namespace OpenAPI
