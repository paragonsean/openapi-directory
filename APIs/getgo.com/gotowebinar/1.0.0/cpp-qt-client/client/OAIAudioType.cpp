/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioType::OAIAudioType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioType::OAIAudioType() {
    this->initializeModel();
}

OAIAudioType::~OAIAudioType() {}

void OAIAudioType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAudioType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAudioType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PSTN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioType::PSTN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VOIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioType::VOIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Hybrid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioType::HYBRID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Private", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioType::PRIVATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAudioType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAudioType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAudioType::PSTN:
            val = "PSTN";
            break;
        case eOAIAudioType::VOIP:
            val = "VOIP";
            break;
        case eOAIAudioType::HYBRID:
            val = "Hybrid";
            break;
        case eOAIAudioType::PRIVATE:
            val = "Private";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAudioType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAudioType::eOAIAudioType OAIAudioType::getValue() const {
    return m_value;
}

void OAIAudioType::setValue(const OAIAudioType::eOAIAudioType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAudioType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAudioType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
