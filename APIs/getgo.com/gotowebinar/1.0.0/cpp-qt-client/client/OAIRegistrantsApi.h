/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistrantsApi_H
#define OAI_OAIRegistrantsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRegistrant.h"
#include "OAIRegistrantCreated.h"
#include "OAIRegistrantDetailed.h"
#include "OAIRegistrantFields.h"
#include "OAIRegistrationFields.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistrantsApi : public QObject {
    Q_OBJECT

public:
    OAIRegistrantsApi(const int timeOut = 0);
    ~OAIRegistrantsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  body OAIRegistrantFields [required]
    * @param[in]  accept QString [optional]
    * @param[in]  resend_confirmation bool [optional]
    */
    virtual void createRegistrant(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const OAIRegistrantFields &body, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &resend_confirmation = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  registrant_key qint64 [required]
    */
    virtual void deleteRegistrant(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &registrant_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getAllRegistrantsForWebinar(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  registrant_key qint64 [required]
    */
    virtual void getRegistrant(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &registrant_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getRegistrationFields(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRegistrantCallback(OAIHttpRequestWorker *worker);
    void deleteRegistrantCallback(OAIHttpRequestWorker *worker);
    void getAllRegistrantsForWebinarCallback(OAIHttpRequestWorker *worker);
    void getRegistrantCallback(OAIHttpRequestWorker *worker);
    void getRegistrationFieldsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRegistrantSignal(OAIRegistrantCreated summary);
    void deleteRegistrantSignal();
    void getAllRegistrantsForWebinarSignal(QList<OAIRegistrant> summary);
    void getRegistrantSignal(OAIRegistrantDetailed summary);
    void getRegistrationFieldsSignal(OAIRegistrationFields summary);


    void createRegistrantSignalFull(OAIHttpRequestWorker *worker, OAIRegistrantCreated summary);
    void deleteRegistrantSignalFull(OAIHttpRequestWorker *worker);
    void getAllRegistrantsForWebinarSignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistrant> summary);
    void getRegistrantSignalFull(OAIHttpRequestWorker *worker, OAIRegistrantDetailed summary);
    void getRegistrationFieldsSignalFull(OAIHttpRequestWorker *worker, OAIRegistrationFields summary);

    Q_DECL_DEPRECATED_X("Use createRegistrantSignalError() instead")
    void createRegistrantSignalE(OAIRegistrantCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRegistrantSignalError(OAIRegistrantCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRegistrantSignalError() instead")
    void deleteRegistrantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRegistrantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllRegistrantsForWebinarSignalError() instead")
    void getAllRegistrantsForWebinarSignalE(QList<OAIRegistrant> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllRegistrantsForWebinarSignalError(QList<OAIRegistrant> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrantSignalError() instead")
    void getRegistrantSignalE(OAIRegistrantDetailed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrantSignalError(OAIRegistrantDetailed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationFieldsSignalError() instead")
    void getRegistrationFieldsSignalE(OAIRegistrationFields summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationFieldsSignalError(OAIRegistrationFields summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRegistrantSignalErrorFull() instead")
    void createRegistrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRegistrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRegistrantSignalErrorFull() instead")
    void deleteRegistrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRegistrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllRegistrantsForWebinarSignalErrorFull() instead")
    void getAllRegistrantsForWebinarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllRegistrantsForWebinarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrantSignalErrorFull() instead")
    void getRegistrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationFieldsSignalErrorFull() instead")
    void getRegistrationFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
