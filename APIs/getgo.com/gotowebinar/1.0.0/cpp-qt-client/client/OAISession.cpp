/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_registrants_attended_isSet = false;
    m_registrants_attended_isValid = false;

    m_session_key_isSet = false;
    m_session_key_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_webinar_id_isSet = false;
    m_webinar_id_isValid = false;

    m_webinar_key_isSet = false;
    m_webinar_key_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_registrants_attended_isValid = ::OpenAPI::fromJsonValue(m_registrants_attended, json[QString("registrantsAttended")]);
    m_registrants_attended_isSet = !json[QString("registrantsAttended")].isNull() && m_registrants_attended_isValid;

    m_session_key_isValid = ::OpenAPI::fromJsonValue(m_session_key, json[QString("sessionKey")]);
    m_session_key_isSet = !json[QString("sessionKey")].isNull() && m_session_key_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_webinar_id_isValid = ::OpenAPI::fromJsonValue(m_webinar_id, json[QString("webinarID")]);
    m_webinar_id_isSet = !json[QString("webinarID")].isNull() && m_webinar_id_isValid;

    m_webinar_key_isValid = ::OpenAPI::fromJsonValue(m_webinar_key, json[QString("webinarKey")]);
    m_webinar_key_isSet = !json[QString("webinarKey")].isNull() && m_webinar_key_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_registrants_attended_isSet) {
        obj.insert(QString("registrantsAttended"), ::OpenAPI::toJsonValue(m_registrants_attended));
    }
    if (m_session_key_isSet) {
        obj.insert(QString("sessionKey"), ::OpenAPI::toJsonValue(m_session_key));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_webinar_id_isSet) {
        obj.insert(QString("webinarID"), ::OpenAPI::toJsonValue(m_webinar_id));
    }
    if (m_webinar_key_isSet) {
        obj.insert(QString("webinarKey"), ::OpenAPI::toJsonValue(m_webinar_key));
    }
    return obj;
}

QDateTime OAISession::getEndTime() const {
    return m_end_time;
}
void OAISession::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAISession::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAISession::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAISession::getRegistrantsAttended() const {
    return m_registrants_attended;
}
void OAISession::setRegistrantsAttended(const qint32 &registrants_attended) {
    m_registrants_attended = registrants_attended;
    m_registrants_attended_isSet = true;
}

bool OAISession::is_registrants_attended_Set() const{
    return m_registrants_attended_isSet;
}

bool OAISession::is_registrants_attended_Valid() const{
    return m_registrants_attended_isValid;
}

qint64 OAISession::getSessionKey() const {
    return m_session_key;
}
void OAISession::setSessionKey(const qint64 &session_key) {
    m_session_key = session_key;
    m_session_key_isSet = true;
}

bool OAISession::is_session_key_Set() const{
    return m_session_key_isSet;
}

bool OAISession::is_session_key_Valid() const{
    return m_session_key_isValid;
}

QDateTime OAISession::getStartTime() const {
    return m_start_time;
}
void OAISession::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISession::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISession::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAISession::getWebinarId() const {
    return m_webinar_id;
}
void OAISession::setWebinarId(const QString &webinar_id) {
    m_webinar_id = webinar_id;
    m_webinar_id_isSet = true;
}

bool OAISession::is_webinar_id_Set() const{
    return m_webinar_id_isSet;
}

bool OAISession::is_webinar_id_Valid() const{
    return m_webinar_id_isValid;
}

qint64 OAISession::getWebinarKey() const {
    return m_webinar_key;
}
void OAISession::setWebinarKey(const qint64 &webinar_key) {
    m_webinar_key = webinar_key;
    m_webinar_key_isSet = true;
}

bool OAISession::is_webinar_key_Set() const{
    return m_webinar_key_isSet;
}

bool OAISession::is_webinar_key_Valid() const{
    return m_webinar_key_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrants_attended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webinar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webinar_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && m_registrants_attended_isValid && m_session_key_isValid && m_start_time_isValid && m_webinar_id_isValid && m_webinar_key_isValid && true;
}

} // namespace OpenAPI
