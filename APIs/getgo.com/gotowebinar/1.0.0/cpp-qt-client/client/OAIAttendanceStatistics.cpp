/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttendanceStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttendanceStatistics::OAIAttendanceStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttendanceStatistics::OAIAttendanceStatistics() {
    this->initializeModel();
}

OAIAttendanceStatistics::~OAIAttendanceStatistics() {}

void OAIAttendanceStatistics::initializeModel() {

    m_average_attendance_time_seconds_isSet = false;
    m_average_attendance_time_seconds_isValid = false;

    m_average_attentiveness_isSet = false;
    m_average_attentiveness_isValid = false;

    m_average_interest_rating_isSet = false;
    m_average_interest_rating_isValid = false;

    m_percentage_attendance_isSet = false;
    m_percentage_attendance_isValid = false;

    m_registrant_count_isSet = false;
    m_registrant_count_isValid = false;
}

void OAIAttendanceStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttendanceStatistics::fromJsonObject(QJsonObject json) {

    m_average_attendance_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_average_attendance_time_seconds, json[QString("averageAttendanceTimeSeconds")]);
    m_average_attendance_time_seconds_isSet = !json[QString("averageAttendanceTimeSeconds")].isNull() && m_average_attendance_time_seconds_isValid;

    m_average_attentiveness_isValid = ::OpenAPI::fromJsonValue(m_average_attentiveness, json[QString("averageAttentiveness")]);
    m_average_attentiveness_isSet = !json[QString("averageAttentiveness")].isNull() && m_average_attentiveness_isValid;

    m_average_interest_rating_isValid = ::OpenAPI::fromJsonValue(m_average_interest_rating, json[QString("averageInterestRating")]);
    m_average_interest_rating_isSet = !json[QString("averageInterestRating")].isNull() && m_average_interest_rating_isValid;

    m_percentage_attendance_isValid = ::OpenAPI::fromJsonValue(m_percentage_attendance, json[QString("percentageAttendance")]);
    m_percentage_attendance_isSet = !json[QString("percentageAttendance")].isNull() && m_percentage_attendance_isValid;

    m_registrant_count_isValid = ::OpenAPI::fromJsonValue(m_registrant_count, json[QString("registrantCount")]);
    m_registrant_count_isSet = !json[QString("registrantCount")].isNull() && m_registrant_count_isValid;
}

QString OAIAttendanceStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttendanceStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_average_attendance_time_seconds_isSet) {
        obj.insert(QString("averageAttendanceTimeSeconds"), ::OpenAPI::toJsonValue(m_average_attendance_time_seconds));
    }
    if (m_average_attentiveness_isSet) {
        obj.insert(QString("averageAttentiveness"), ::OpenAPI::toJsonValue(m_average_attentiveness));
    }
    if (m_average_interest_rating_isSet) {
        obj.insert(QString("averageInterestRating"), ::OpenAPI::toJsonValue(m_average_interest_rating));
    }
    if (m_percentage_attendance_isSet) {
        obj.insert(QString("percentageAttendance"), ::OpenAPI::toJsonValue(m_percentage_attendance));
    }
    if (m_registrant_count_isSet) {
        obj.insert(QString("registrantCount"), ::OpenAPI::toJsonValue(m_registrant_count));
    }
    return obj;
}

float OAIAttendanceStatistics::getAverageAttendanceTimeSeconds() const {
    return m_average_attendance_time_seconds;
}
void OAIAttendanceStatistics::setAverageAttendanceTimeSeconds(const float &average_attendance_time_seconds) {
    m_average_attendance_time_seconds = average_attendance_time_seconds;
    m_average_attendance_time_seconds_isSet = true;
}

bool OAIAttendanceStatistics::is_average_attendance_time_seconds_Set() const{
    return m_average_attendance_time_seconds_isSet;
}

bool OAIAttendanceStatistics::is_average_attendance_time_seconds_Valid() const{
    return m_average_attendance_time_seconds_isValid;
}

float OAIAttendanceStatistics::getAverageAttentiveness() const {
    return m_average_attentiveness;
}
void OAIAttendanceStatistics::setAverageAttentiveness(const float &average_attentiveness) {
    m_average_attentiveness = average_attentiveness;
    m_average_attentiveness_isSet = true;
}

bool OAIAttendanceStatistics::is_average_attentiveness_Set() const{
    return m_average_attentiveness_isSet;
}

bool OAIAttendanceStatistics::is_average_attentiveness_Valid() const{
    return m_average_attentiveness_isValid;
}

float OAIAttendanceStatistics::getAverageInterestRating() const {
    return m_average_interest_rating;
}
void OAIAttendanceStatistics::setAverageInterestRating(const float &average_interest_rating) {
    m_average_interest_rating = average_interest_rating;
    m_average_interest_rating_isSet = true;
}

bool OAIAttendanceStatistics::is_average_interest_rating_Set() const{
    return m_average_interest_rating_isSet;
}

bool OAIAttendanceStatistics::is_average_interest_rating_Valid() const{
    return m_average_interest_rating_isValid;
}

float OAIAttendanceStatistics::getPercentageAttendance() const {
    return m_percentage_attendance;
}
void OAIAttendanceStatistics::setPercentageAttendance(const float &percentage_attendance) {
    m_percentage_attendance = percentage_attendance;
    m_percentage_attendance_isSet = true;
}

bool OAIAttendanceStatistics::is_percentage_attendance_Set() const{
    return m_percentage_attendance_isSet;
}

bool OAIAttendanceStatistics::is_percentage_attendance_Valid() const{
    return m_percentage_attendance_isValid;
}

qint32 OAIAttendanceStatistics::getRegistrantCount() const {
    return m_registrant_count;
}
void OAIAttendanceStatistics::setRegistrantCount(const qint32 &registrant_count) {
    m_registrant_count = registrant_count;
    m_registrant_count_isSet = true;
}

bool OAIAttendanceStatistics::is_registrant_count_Set() const{
    return m_registrant_count_isSet;
}

bool OAIAttendanceStatistics::is_registrant_count_Valid() const{
    return m_registrant_count_isValid;
}

bool OAIAttendanceStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_attendance_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_attentiveness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_interest_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_attendance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttendanceStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_average_attendance_time_seconds_isValid && m_average_attentiveness_isValid && m_average_interest_rating_isValid && m_percentage_attendance_isValid && m_registrant_count_isValid && true;
}

} // namespace OpenAPI
