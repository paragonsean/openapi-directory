/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrant::OAIRegistrant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrant::OAIRegistrant() {
    this->initializeModel();
}

OAIRegistrant::~OAIRegistrant() {}

void OAIRegistrant::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_join_url_isSet = false;
    m_join_url_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_registrant_key_isSet = false;
    m_registrant_key_isValid = false;

    m_registration_date_isSet = false;
    m_registration_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIRegistrant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrant::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_join_url_isValid = ::OpenAPI::fromJsonValue(m_join_url, json[QString("joinUrl")]);
    m_join_url_isSet = !json[QString("joinUrl")].isNull() && m_join_url_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_registrant_key_isValid = ::OpenAPI::fromJsonValue(m_registrant_key, json[QString("registrantKey")]);
    m_registrant_key_isSet = !json[QString("registrantKey")].isNull() && m_registrant_key_isValid;

    m_registration_date_isValid = ::OpenAPI::fromJsonValue(m_registration_date, json[QString("registrationDate")]);
    m_registration_date_isSet = !json[QString("registrationDate")].isNull() && m_registration_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIRegistrant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrant::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_join_url_isSet) {
        obj.insert(QString("joinUrl"), ::OpenAPI::toJsonValue(m_join_url));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_registrant_key_isSet) {
        obj.insert(QString("registrantKey"), ::OpenAPI::toJsonValue(m_registrant_key));
    }
    if (m_registration_date_isSet) {
        obj.insert(QString("registrationDate"), ::OpenAPI::toJsonValue(m_registration_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIRegistrant::getEmail() const {
    return m_email;
}
void OAIRegistrant::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRegistrant::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRegistrant::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIRegistrant::getFirstName() const {
    return m_first_name;
}
void OAIRegistrant::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIRegistrant::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIRegistrant::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIRegistrant::getJoinUrl() const {
    return m_join_url;
}
void OAIRegistrant::setJoinUrl(const QString &join_url) {
    m_join_url = join_url;
    m_join_url_isSet = true;
}

bool OAIRegistrant::is_join_url_Set() const{
    return m_join_url_isSet;
}

bool OAIRegistrant::is_join_url_Valid() const{
    return m_join_url_isValid;
}

QString OAIRegistrant::getLastName() const {
    return m_last_name;
}
void OAIRegistrant::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIRegistrant::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIRegistrant::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint64 OAIRegistrant::getRegistrantKey() const {
    return m_registrant_key;
}
void OAIRegistrant::setRegistrantKey(const qint64 &registrant_key) {
    m_registrant_key = registrant_key;
    m_registrant_key_isSet = true;
}

bool OAIRegistrant::is_registrant_key_Set() const{
    return m_registrant_key_isSet;
}

bool OAIRegistrant::is_registrant_key_Valid() const{
    return m_registrant_key_isValid;
}

QDateTime OAIRegistrant::getRegistrationDate() const {
    return m_registration_date;
}
void OAIRegistrant::setRegistrationDate(const QDateTime &registration_date) {
    m_registration_date = registration_date;
    m_registration_date_isSet = true;
}

bool OAIRegistrant::is_registration_date_Set() const{
    return m_registration_date_isSet;
}

bool OAIRegistrant::is_registration_date_Valid() const{
    return m_registration_date_isValid;
}

QString OAIRegistrant::getStatus() const {
    return m_status;
}
void OAIRegistrant::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRegistrant::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRegistrant::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRegistrant::getTimeZone() const {
    return m_time_zone;
}
void OAIRegistrant::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIRegistrant::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIRegistrant::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIRegistrant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_first_name_isValid && m_join_url_isValid && m_last_name_isValid && m_registrant_key_isValid && m_registration_date_isValid && m_status_isValid && m_time_zone_isValid && true;
}

} // namespace OpenAPI
