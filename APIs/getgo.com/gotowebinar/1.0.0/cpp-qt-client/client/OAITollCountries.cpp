/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITollCountries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITollCountries::OAITollCountries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITollCountries::OAITollCountries() {
    this->initializeModel();
}

OAITollCountries::~OAITollCountries() {}

void OAITollCountries::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITollCountries::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITollCountries::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::AT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AU", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::AU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::BE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::CH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DK", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::DK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FI", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::FI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::IE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("false", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::FALSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::NZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::SE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US", Qt::CaseInsensitive) == 0) {
        m_value = eOAITollCountries::US;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITollCountries::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITollCountries::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITollCountries::AT:
            val = "AT";
            break;
        case eOAITollCountries::AU:
            val = "AU";
            break;
        case eOAITollCountries::BE:
            val = "BE";
            break;
        case eOAITollCountries::CA:
            val = "CA";
            break;
        case eOAITollCountries::CH:
            val = "CH";
            break;
        case eOAITollCountries::DE:
            val = "DE";
            break;
        case eOAITollCountries::DK:
            val = "DK";
            break;
        case eOAITollCountries::ES:
            val = "ES";
            break;
        case eOAITollCountries::FI:
            val = "FI";
            break;
        case eOAITollCountries::FR:
            val = "FR";
            break;
        case eOAITollCountries::GB:
            val = "GB";
            break;
        case eOAITollCountries::IE:
            val = "IE";
            break;
        case eOAITollCountries::IT:
            val = "IT";
            break;
        case eOAITollCountries::NL:
            val = "NL";
            break;
        case eOAITollCountries::FALSE:
            val = "false";
            break;
        case eOAITollCountries::NZ:
            val = "NZ";
            break;
        case eOAITollCountries::SE:
            val = "SE";
            break;
        case eOAITollCountries::US:
            val = "US";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITollCountries::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITollCountries::eOAITollCountries OAITollCountries::getValue() const {
    return m_value;
}

void OAITollCountries::setValue(const OAITollCountries::eOAITollCountries& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITollCountries::isSet() const {
    
    return m_value_isSet;
}

bool OAITollCountries::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
