/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationFields::OAIRegistrationFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationFields::OAIRegistrationFields() {
    this->initializeModel();
}

OAIRegistrationFields::~OAIRegistrationFields() {}

void OAIRegistrationFields::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_questions_isSet = false;
    m_questions_isValid = false;
}

void OAIRegistrationFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationFields::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_questions_isValid = ::OpenAPI::fromJsonValue(m_questions, json[QString("questions")]);
    m_questions_isSet = !json[QString("questions")].isNull() && m_questions_isValid;
}

QString OAIRegistrationFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationFields::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_questions.size() > 0) {
        obj.insert(QString("questions"), ::OpenAPI::toJsonValue(m_questions));
    }
    return obj;
}

QList<OAIRegistrationField> OAIRegistrationFields::getFields() const {
    return m_fields;
}
void OAIRegistrationFields::setFields(const QList<OAIRegistrationField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIRegistrationFields::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIRegistrationFields::is_fields_Valid() const{
    return m_fields_isValid;
}

QList<OAIRegistrationQuestion> OAIRegistrationFields::getQuestions() const {
    return m_questions;
}
void OAIRegistrationFields::setQuestions(const QList<OAIRegistrationQuestion> &questions) {
    m_questions = questions;
    m_questions_isSet = true;
}

bool OAIRegistrationFields::is_questions_Set() const{
    return m_questions_isSet;
}

bool OAIRegistrationFields::is_questions_Valid() const{
    return m_questions_isValid;
}

bool OAIRegistrationFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_questions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fields_isValid && m_questions_isValid && true;
}

} // namespace OpenAPI
