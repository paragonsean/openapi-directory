/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrantQAResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrantQAResponse::OAIRegistrantQAResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrantQAResponse::OAIRegistrantQAResponse() {
    this->initializeModel();
}

OAIRegistrantQAResponse::~OAIRegistrantQAResponse() {}

void OAIRegistrantQAResponse::initializeModel() {

    m_answer_key_isSet = false;
    m_answer_key_isValid = false;

    m_question_key_isSet = false;
    m_question_key_isValid = false;

    m_response_text_isSet = false;
    m_response_text_isValid = false;
}

void OAIRegistrantQAResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrantQAResponse::fromJsonObject(QJsonObject json) {

    m_answer_key_isValid = ::OpenAPI::fromJsonValue(m_answer_key, json[QString("answerKey")]);
    m_answer_key_isSet = !json[QString("answerKey")].isNull() && m_answer_key_isValid;

    m_question_key_isValid = ::OpenAPI::fromJsonValue(m_question_key, json[QString("questionKey")]);
    m_question_key_isSet = !json[QString("questionKey")].isNull() && m_question_key_isValid;

    m_response_text_isValid = ::OpenAPI::fromJsonValue(m_response_text, json[QString("responseText")]);
    m_response_text_isSet = !json[QString("responseText")].isNull() && m_response_text_isValid;
}

QString OAIRegistrantQAResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrantQAResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_key_isSet) {
        obj.insert(QString("answerKey"), ::OpenAPI::toJsonValue(m_answer_key));
    }
    if (m_question_key_isSet) {
        obj.insert(QString("questionKey"), ::OpenAPI::toJsonValue(m_question_key));
    }
    if (m_response_text_isSet) {
        obj.insert(QString("responseText"), ::OpenAPI::toJsonValue(m_response_text));
    }
    return obj;
}

qint64 OAIRegistrantQAResponse::getAnswerKey() const {
    return m_answer_key;
}
void OAIRegistrantQAResponse::setAnswerKey(const qint64 &answer_key) {
    m_answer_key = answer_key;
    m_answer_key_isSet = true;
}

bool OAIRegistrantQAResponse::is_answer_key_Set() const{
    return m_answer_key_isSet;
}

bool OAIRegistrantQAResponse::is_answer_key_Valid() const{
    return m_answer_key_isValid;
}

qint64 OAIRegistrantQAResponse::getQuestionKey() const {
    return m_question_key;
}
void OAIRegistrantQAResponse::setQuestionKey(const qint64 &question_key) {
    m_question_key = question_key;
    m_question_key_isSet = true;
}

bool OAIRegistrantQAResponse::is_question_key_Set() const{
    return m_question_key_isSet;
}

bool OAIRegistrantQAResponse::is_question_key_Valid() const{
    return m_question_key_isValid;
}

QString OAIRegistrantQAResponse::getResponseText() const {
    return m_response_text;
}
void OAIRegistrantQAResponse::setResponseText(const QString &response_text) {
    m_response_text = response_text;
    m_response_text_isSet = true;
}

bool OAIRegistrantQAResponse::is_response_text_Set() const{
    return m_response_text_isSet;
}

bool OAIRegistrantQAResponse::is_response_text_Valid() const{
    return m_response_text_isValid;
}

bool OAIRegistrantQAResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrantQAResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_question_key_isValid && true;
}

} // namespace OpenAPI
