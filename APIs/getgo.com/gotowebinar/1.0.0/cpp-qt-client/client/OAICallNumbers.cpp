/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallNumbers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallNumbers::OAICallNumbers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallNumbers::OAICallNumbers() {
    this->initializeModel();
}

OAICallNumbers::~OAICallNumbers() {}

void OAICallNumbers::initializeModel() {

    m_access_codes_isSet = false;
    m_access_codes_isValid = false;

    m_toll_isSet = false;
    m_toll_isValid = false;

    m_toll_free_isSet = false;
    m_toll_free_isValid = false;
}

void OAICallNumbers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallNumbers::fromJsonObject(QJsonObject json) {

    m_access_codes_isValid = ::OpenAPI::fromJsonValue(m_access_codes, json[QString("accessCodes")]);
    m_access_codes_isSet = !json[QString("accessCodes")].isNull() && m_access_codes_isValid;

    m_toll_isValid = ::OpenAPI::fromJsonValue(m_toll, json[QString("toll")]);
    m_toll_isSet = !json[QString("toll")].isNull() && m_toll_isValid;

    m_toll_free_isValid = ::OpenAPI::fromJsonValue(m_toll_free, json[QString("tollFree")]);
    m_toll_free_isSet = !json[QString("tollFree")].isNull() && m_toll_free_isValid;
}

QString OAICallNumbers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallNumbers::asJsonObject() const {
    QJsonObject obj;
    if (m_access_codes.isSet()) {
        obj.insert(QString("accessCodes"), ::OpenAPI::toJsonValue(m_access_codes));
    }
    if (m_toll_isSet) {
        obj.insert(QString("toll"), ::OpenAPI::toJsonValue(m_toll));
    }
    if (m_toll_free_isSet) {
        obj.insert(QString("tollFree"), ::OpenAPI::toJsonValue(m_toll_free));
    }
    return obj;
}

OAIAccessCodes OAICallNumbers::getAccessCodes() const {
    return m_access_codes;
}
void OAICallNumbers::setAccessCodes(const OAIAccessCodes &access_codes) {
    m_access_codes = access_codes;
    m_access_codes_isSet = true;
}

bool OAICallNumbers::is_access_codes_Set() const{
    return m_access_codes_isSet;
}

bool OAICallNumbers::is_access_codes_Valid() const{
    return m_access_codes_isValid;
}

QString OAICallNumbers::getToll() const {
    return m_toll;
}
void OAICallNumbers::setToll(const QString &toll) {
    m_toll = toll;
    m_toll_isSet = true;
}

bool OAICallNumbers::is_toll_Set() const{
    return m_toll_isSet;
}

bool OAICallNumbers::is_toll_Valid() const{
    return m_toll_isValid;
}

QString OAICallNumbers::getTollFree() const {
    return m_toll_free;
}
void OAICallNumbers::setTollFree(const QString &toll_free) {
    m_toll_free = toll_free;
    m_toll_free_isSet = true;
}

bool OAICallNumbers::is_toll_free_Set() const{
    return m_toll_free_isSet;
}

bool OAICallNumbers::is_toll_free_Valid() const{
    return m_toll_free_isValid;
}

bool OAICallNumbers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_toll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toll_free_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallNumbers::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_codes_isValid && m_toll_isValid && true;
}

} // namespace OpenAPI
