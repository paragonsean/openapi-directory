/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISessionsApi_H
#define OAI_OAISessionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttendee.h"
#include "OAIAttendeeQuestion.h"
#include "OAIPoll.h"
#include "OAISession.h"
#include "OAISessionPerformance.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISessionsApi : public QObject {
    Q_OBJECT

public:
    OAISessionsApi(const int timeOut = 0);
    ~OAISessionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getAllSessions(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  from_time QDateTime [required]
    * @param[in]  to_time QDateTime [required]
    */
    virtual void getOrganizerSessions(const QString &authorization, const qint64 &organizer_key, const QDateTime &from_time, const QDateTime &to_time);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  session_key qint64 [required]
    */
    virtual void getPerformance(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &session_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  session_key qint64 [required]
    */
    virtual void getPolls(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &session_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  session_key qint64 [required]
    */
    virtual void getQuestions(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &session_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  session_key qint64 [required]
    */
    virtual void getSurveys(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &session_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  session_key qint64 [required]
    */
    virtual void getWebinarSession(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &session_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllSessionsCallback(OAIHttpRequestWorker *worker);
    void getOrganizerSessionsCallback(OAIHttpRequestWorker *worker);
    void getPerformanceCallback(OAIHttpRequestWorker *worker);
    void getPollsCallback(OAIHttpRequestWorker *worker);
    void getQuestionsCallback(OAIHttpRequestWorker *worker);
    void getSurveysCallback(OAIHttpRequestWorker *worker);
    void getWebinarSessionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllSessionsSignal(QList<OAISession> summary);
    void getOrganizerSessionsSignal(QList<OAISession> summary);
    void getPerformanceSignal(OAISessionPerformance summary);
    void getPollsSignal(QList<OAIPoll> summary);
    void getQuestionsSignal(QList<OAIAttendeeQuestion> summary);
    void getSurveysSignal(QList<OAIPoll> summary);
    void getWebinarSessionSignal(QList<OAIAttendee> summary);


    void getAllSessionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISession> summary);
    void getOrganizerSessionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISession> summary);
    void getPerformanceSignalFull(OAIHttpRequestWorker *worker, OAISessionPerformance summary);
    void getPollsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPoll> summary);
    void getQuestionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttendeeQuestion> summary);
    void getSurveysSignalFull(OAIHttpRequestWorker *worker, QList<OAIPoll> summary);
    void getWebinarSessionSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttendee> summary);

    Q_DECL_DEPRECATED_X("Use getAllSessionsSignalError() instead")
    void getAllSessionsSignalE(QList<OAISession> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSessionsSignalError(QList<OAISession> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizerSessionsSignalError() instead")
    void getOrganizerSessionsSignalE(QList<OAISession> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizerSessionsSignalError(QList<OAISession> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPerformanceSignalError() instead")
    void getPerformanceSignalE(OAISessionPerformance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPerformanceSignalError(OAISessionPerformance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPollsSignalError() instead")
    void getPollsSignalE(QList<OAIPoll> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPollsSignalError(QList<OAIPoll> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuestionsSignalError() instead")
    void getQuestionsSignalE(QList<OAIAttendeeQuestion> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuestionsSignalError(QList<OAIAttendeeQuestion> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSurveysSignalError() instead")
    void getSurveysSignalE(QList<OAIPoll> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSurveysSignalError(QList<OAIPoll> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebinarSessionSignalError() instead")
    void getWebinarSessionSignalE(QList<OAIAttendee> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebinarSessionSignalError(QList<OAIAttendee> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllSessionsSignalErrorFull() instead")
    void getAllSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizerSessionsSignalErrorFull() instead")
    void getOrganizerSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizerSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPerformanceSignalErrorFull() instead")
    void getPerformanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPerformanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPollsSignalErrorFull() instead")
    void getPollsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPollsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuestionsSignalErrorFull() instead")
    void getQuestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSurveysSignalErrorFull() instead")
    void getSurveysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSurveysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebinarSessionSignalErrorFull() instead")
    void getWebinarSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebinarSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
