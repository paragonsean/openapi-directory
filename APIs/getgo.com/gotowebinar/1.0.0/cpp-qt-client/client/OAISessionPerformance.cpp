/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionPerformance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionPerformance::OAISessionPerformance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionPerformance::OAISessionPerformance() {
    this->initializeModel();
}

OAISessionPerformance::~OAISessionPerformance() {}

void OAISessionPerformance::initializeModel() {

    m_attendance_isSet = false;
    m_attendance_isValid = false;

    m_polls_and_surveys_isSet = false;
    m_polls_and_surveys_isValid = false;
}

void OAISessionPerformance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionPerformance::fromJsonObject(QJsonObject json) {

    m_attendance_isValid = ::OpenAPI::fromJsonValue(m_attendance, json[QString("attendance")]);
    m_attendance_isSet = !json[QString("attendance")].isNull() && m_attendance_isValid;

    m_polls_and_surveys_isValid = ::OpenAPI::fromJsonValue(m_polls_and_surveys, json[QString("pollsAndSurveys")]);
    m_polls_and_surveys_isSet = !json[QString("pollsAndSurveys")].isNull() && m_polls_and_surveys_isValid;
}

QString OAISessionPerformance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionPerformance::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance.isSet()) {
        obj.insert(QString("attendance"), ::OpenAPI::toJsonValue(m_attendance));
    }
    if (m_polls_and_surveys.isSet()) {
        obj.insert(QString("pollsAndSurveys"), ::OpenAPI::toJsonValue(m_polls_and_surveys));
    }
    return obj;
}

OAIAttendanceStatistics OAISessionPerformance::getAttendance() const {
    return m_attendance;
}
void OAISessionPerformance::setAttendance(const OAIAttendanceStatistics &attendance) {
    m_attendance = attendance;
    m_attendance_isSet = true;
}

bool OAISessionPerformance::is_attendance_Set() const{
    return m_attendance_isSet;
}

bool OAISessionPerformance::is_attendance_Valid() const{
    return m_attendance_isValid;
}

OAIPollsAndSurveysStatistics OAISessionPerformance::getPollsAndSurveys() const {
    return m_polls_and_surveys;
}
void OAISessionPerformance::setPollsAndSurveys(const OAIPollsAndSurveysStatistics &polls_and_surveys) {
    m_polls_and_surveys = polls_and_surveys;
    m_polls_and_surveys_isSet = true;
}

bool OAISessionPerformance::is_polls_and_surveys_Set() const{
    return m_polls_and_surveys_isSet;
}

bool OAISessionPerformance::is_polls_and_surveys_Valid() const{
    return m_polls_and_surveys_isValid;
}

bool OAISessionPerformance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_polls_and_surveys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionPerformance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attendance_isValid && m_polls_and_surveys_isValid && true;
}

} // namespace OpenAPI
