/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttendee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttendee::OAIAttendee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttendee::OAIAttendee() {
    this->initializeModel();
}

OAIAttendee::~OAIAttendee() {}

void OAIAttendee::initializeModel() {

    m_attendance_isSet = false;
    m_attendance_isValid = false;

    m_attendance_time_in_seconds_isSet = false;
    m_attendance_time_in_seconds_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_registrant_key_isSet = false;
    m_registrant_key_isValid = false;

    m_session_key_isSet = false;
    m_session_key_isValid = false;
}

void OAIAttendee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttendee::fromJsonObject(QJsonObject json) {

    m_attendance_isValid = ::OpenAPI::fromJsonValue(m_attendance, json[QString("attendance")]);
    m_attendance_isSet = !json[QString("attendance")].isNull() && m_attendance_isValid;

    m_attendance_time_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_attendance_time_in_seconds, json[QString("attendanceTimeInSeconds")]);
    m_attendance_time_in_seconds_isSet = !json[QString("attendanceTimeInSeconds")].isNull() && m_attendance_time_in_seconds_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_registrant_key_isValid = ::OpenAPI::fromJsonValue(m_registrant_key, json[QString("registrantKey")]);
    m_registrant_key_isSet = !json[QString("registrantKey")].isNull() && m_registrant_key_isValid;

    m_session_key_isValid = ::OpenAPI::fromJsonValue(m_session_key, json[QString("sessionKey")]);
    m_session_key_isSet = !json[QString("sessionKey")].isNull() && m_session_key_isValid;
}

QString OAIAttendee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttendee::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance.size() > 0) {
        obj.insert(QString("attendance"), ::OpenAPI::toJsonValue(m_attendance));
    }
    if (m_attendance_time_in_seconds_isSet) {
        obj.insert(QString("attendanceTimeInSeconds"), ::OpenAPI::toJsonValue(m_attendance_time_in_seconds));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_registrant_key_isSet) {
        obj.insert(QString("registrantKey"), ::OpenAPI::toJsonValue(m_registrant_key));
    }
    if (m_session_key_isSet) {
        obj.insert(QString("sessionKey"), ::OpenAPI::toJsonValue(m_session_key));
    }
    return obj;
}

QList<OAIAttendance> OAIAttendee::getAttendance() const {
    return m_attendance;
}
void OAIAttendee::setAttendance(const QList<OAIAttendance> &attendance) {
    m_attendance = attendance;
    m_attendance_isSet = true;
}

bool OAIAttendee::is_attendance_Set() const{
    return m_attendance_isSet;
}

bool OAIAttendee::is_attendance_Valid() const{
    return m_attendance_isValid;
}

qint64 OAIAttendee::getAttendanceTimeInSeconds() const {
    return m_attendance_time_in_seconds;
}
void OAIAttendee::setAttendanceTimeInSeconds(const qint64 &attendance_time_in_seconds) {
    m_attendance_time_in_seconds = attendance_time_in_seconds;
    m_attendance_time_in_seconds_isSet = true;
}

bool OAIAttendee::is_attendance_time_in_seconds_Set() const{
    return m_attendance_time_in_seconds_isSet;
}

bool OAIAttendee::is_attendance_time_in_seconds_Valid() const{
    return m_attendance_time_in_seconds_isValid;
}

QString OAIAttendee::getEmail() const {
    return m_email;
}
void OAIAttendee::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAttendee::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAttendee::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAttendee::getFirstName() const {
    return m_first_name;
}
void OAIAttendee::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIAttendee::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIAttendee::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIAttendee::getLastName() const {
    return m_last_name;
}
void OAIAttendee::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIAttendee::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIAttendee::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint64 OAIAttendee::getRegistrantKey() const {
    return m_registrant_key;
}
void OAIAttendee::setRegistrantKey(const qint64 &registrant_key) {
    m_registrant_key = registrant_key;
    m_registrant_key_isSet = true;
}

bool OAIAttendee::is_registrant_key_Set() const{
    return m_registrant_key_isSet;
}

bool OAIAttendee::is_registrant_key_Valid() const{
    return m_registrant_key_isValid;
}

qint64 OAIAttendee::getSessionKey() const {
    return m_session_key;
}
void OAIAttendee::setSessionKey(const qint64 &session_key) {
    m_session_key = session_key;
    m_session_key_isSet = true;
}

bool OAIAttendee::is_session_key_Set() const{
    return m_session_key_isSet;
}

bool OAIAttendee::is_session_key_Valid() const{
    return m_session_key_isValid;
}

bool OAIAttendee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attendance_time_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttendee::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attendance_isValid && m_attendance_time_in_seconds_isValid && m_email_isValid && m_first_name_isValid && m_last_name_isValid && m_registrant_key_isValid && m_session_key_isValid && true;
}

} // namespace OpenAPI
