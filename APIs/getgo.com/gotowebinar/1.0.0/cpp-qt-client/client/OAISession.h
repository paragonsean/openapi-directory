/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISession.h
 *
 * Describes a completed webinar session.
 */

#ifndef OAISession_H
#define OAISession_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISession : public OAIObject {
public:
    OAISession();
    OAISession(QString json);
    ~OAISession() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getRegistrantsAttended() const;
    void setRegistrantsAttended(const qint32 &registrants_attended);
    bool is_registrants_attended_Set() const;
    bool is_registrants_attended_Valid() const;

    qint64 getSessionKey() const;
    void setSessionKey(const qint64 &session_key);
    bool is_session_key_Set() const;
    bool is_session_key_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getWebinarId() const;
    void setWebinarId(const QString &webinar_id);
    bool is_webinar_id_Set() const;
    bool is_webinar_id_Valid() const;

    qint64 getWebinarKey() const;
    void setWebinarKey(const qint64 &webinar_key);
    bool is_webinar_key_Set() const;
    bool is_webinar_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_registrants_attended;
    bool m_registrants_attended_isSet;
    bool m_registrants_attended_isValid;

    qint64 m_session_key;
    bool m_session_key_isSet;
    bool m_session_key_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_webinar_id;
    bool m_webinar_id_isSet;
    bool m_webinar_id_isValid;

    qint64 m_webinar_key;
    bool m_webinar_key_isSet;
    bool m_webinar_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISession)

#endif // OAISession_H
