/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebinarsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIWebinarsApi::OAIWebinarsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIWebinarsApi::~OAIWebinarsApi() {
}

void OAIWebinarsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.getgo.com/G2W/rest"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("cancelWebinar", defaultConf);
    _serverIndices.insert("cancelWebinar", 0);
    _serverConfigs.insert("createWebinar", defaultConf);
    _serverIndices.insert("createWebinar", 0);
    _serverConfigs.insert("getAllAccountWebinars", defaultConf);
    _serverIndices.insert("getAllAccountWebinars", 0);
    _serverConfigs.insert("getAllWebinars", defaultConf);
    _serverIndices.insert("getAllWebinars", 0);
    _serverConfigs.insert("getAttendeesForAllWebinarSessions", defaultConf);
    _serverIndices.insert("getAttendeesForAllWebinarSessions", 0);
    _serverConfigs.insert("getAudioInformation", defaultConf);
    _serverIndices.insert("getAudioInformation", 0);
    _serverConfigs.insert("getHistoricalWebinars", defaultConf);
    _serverIndices.insert("getHistoricalWebinars", 0);
    _serverConfigs.insert("getPerformanceForAllWebinarSessions", defaultConf);
    _serverIndices.insert("getPerformanceForAllWebinarSessions", 0);
    _serverConfigs.insert("getUpcomingWebinars", defaultConf);
    _serverIndices.insert("getUpcomingWebinars", 0);
    _serverConfigs.insert("getWebinar", defaultConf);
    _serverIndices.insert("getWebinar", 0);
    _serverConfigs.insert("getWebinarMeetingTimes", defaultConf);
    _serverIndices.insert("getWebinarMeetingTimes", 0);
    _serverConfigs.insert("updateAudioInformation", defaultConf);
    _serverIndices.insert("updateAudioInformation", 0);
    _serverConfigs.insert("updateWebinar", defaultConf);
    _serverIndices.insert("updateWebinar", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIWebinarsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIWebinarsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIWebinarsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIWebinarsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIWebinarsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIWebinarsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIWebinarsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIWebinarsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIWebinarsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIWebinarsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIWebinarsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIWebinarsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIWebinarsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIWebinarsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIWebinarsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIWebinarsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIWebinarsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIWebinarsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIWebinarsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIWebinarsApi::cancelWebinar(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const ::OpenAPI::OptionalParam<bool> &send_cancellation_emails) {
    QString fullPath = QString(_serverConfigs["cancelWebinar"][_serverIndices.value("cancelWebinar")].URL()+"/organizers/{organizerKey}/webinars/{webinarKey}");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    
    {
        QString webinar_keyPathParam("{");
        webinar_keyPathParam.append("webinarKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "webinarKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"webinarKey"+pathSuffix : pathPrefix;
        fullPath.replace(webinar_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(webinar_key)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (send_cancellation_emails.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sendCancellationEmails", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sendCancellationEmails")).append(querySuffix).append(QUrl::toPercentEncoding(send_cancellation_emails.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::cancelWebinarCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::cancelWebinarCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cancelWebinarSignal();
        Q_EMIT cancelWebinarSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cancelWebinarSignalE(error_type, error_str);
        Q_EMIT cancelWebinarSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cancelWebinarSignalError(error_type, error_str);
        Q_EMIT cancelWebinarSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::createWebinar(const QString &authorization, const qint64 &organizer_key, const OAIWebinarReqCreate &body) {
    QString fullPath = QString(_serverConfigs["createWebinar"][_serverIndices.value("createWebinar")].URL()+"/organizers/{organizerKey}/webinars");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::createWebinarCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::createWebinarCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreatedWebinar output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createWebinarSignal(output);
        Q_EMIT createWebinarSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createWebinarSignalE(output, error_type, error_str);
        Q_EMIT createWebinarSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createWebinarSignalError(output, error_type, error_str);
        Q_EMIT createWebinarSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getAllAccountWebinars(const QString &authorization, const qint64 &account_key, const QDateTime &from_time, const QDateTime &to_time, const ::OpenAPI::OptionalParam<qint64> &page, const ::OpenAPI::OptionalParam<qint64> &size) {
    QString fullPath = QString(_serverConfigs["getAllAccountWebinars"][_serverIndices.value("getAllAccountWebinars")].URL()+"/accounts/{accountKey}/webinars");
    
    
    {
        QString account_keyPathParam("{");
        account_keyPathParam.append("accountKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountKey"+pathSuffix : pathPrefix;
        fullPath.replace(account_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_key)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fromTime", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fromTime")).append(querySuffix).append(QUrl::toPercentEncoding(from_time));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "toTime", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("toTime")).append(querySuffix).append(QUrl::toPercentEncoding(to_time));
    }
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (size.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "size", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("size")).append(querySuffix).append(QUrl::toPercentEncoding(size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getAllAccountWebinarsCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getAllAccountWebinarsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccountWebinarsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllAccountWebinarsSignal(output);
        Q_EMIT getAllAccountWebinarsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllAccountWebinarsSignalE(output, error_type, error_str);
        Q_EMIT getAllAccountWebinarsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllAccountWebinarsSignalError(output, error_type, error_str);
        Q_EMIT getAllAccountWebinarsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getAllWebinars(const QString &authorization, const qint64 &organizer_key) {
    QString fullPath = QString(_serverConfigs["getAllWebinars"][_serverIndices.value("getAllWebinars")].URL()+"/organizers/{organizerKey}/webinars");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getAllWebinarsCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getAllWebinarsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIWebinar> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIWebinar val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllWebinarsSignal(output);
        Q_EMIT getAllWebinarsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllWebinarsSignalE(output, error_type, error_str);
        Q_EMIT getAllWebinarsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllWebinarsSignalError(output, error_type, error_str);
        Q_EMIT getAllWebinarsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getAttendeesForAllWebinarSessions(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key) {
    QString fullPath = QString(_serverConfigs["getAttendeesForAllWebinarSessions"][_serverIndices.value("getAttendeesForAllWebinarSessions")].URL()+"/organizers/{organizerKey}/webinars/{webinarKey}/attendees");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    
    {
        QString webinar_keyPathParam("{");
        webinar_keyPathParam.append("webinarKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "webinarKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"webinarKey"+pathSuffix : pathPrefix;
        fullPath.replace(webinar_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(webinar_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getAttendeesForAllWebinarSessionsCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getAttendeesForAllWebinarSessionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAttendee> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAttendee val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAttendeesForAllWebinarSessionsSignal(output);
        Q_EMIT getAttendeesForAllWebinarSessionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAttendeesForAllWebinarSessionsSignalE(output, error_type, error_str);
        Q_EMIT getAttendeesForAllWebinarSessionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAttendeesForAllWebinarSessionsSignalError(output, error_type, error_str);
        Q_EMIT getAttendeesForAllWebinarSessionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getAudioInformation(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key) {
    QString fullPath = QString(_serverConfigs["getAudioInformation"][_serverIndices.value("getAudioInformation")].URL()+"/organizers/{organizerKey}/webinars/{webinarKey}/audio");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    
    {
        QString webinar_keyPathParam("{");
        webinar_keyPathParam.append("webinarKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "webinarKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"webinarKey"+pathSuffix : pathPrefix;
        fullPath.replace(webinar_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(webinar_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getAudioInformationCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getAudioInformationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAudio output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAudioInformationSignal(output);
        Q_EMIT getAudioInformationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAudioInformationSignalE(output, error_type, error_str);
        Q_EMIT getAudioInformationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAudioInformationSignalError(output, error_type, error_str);
        Q_EMIT getAudioInformationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getHistoricalWebinars(const QString &authorization, const qint64 &organizer_key, const QDateTime &from_time, const QDateTime &to_time) {
    QString fullPath = QString(_serverConfigs["getHistoricalWebinars"][_serverIndices.value("getHistoricalWebinars")].URL()+"/organizers/{organizerKey}/historicalWebinars");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fromTime", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fromTime")).append(querySuffix).append(QUrl::toPercentEncoding(from_time));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "toTime", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("toTime")).append(querySuffix).append(QUrl::toPercentEncoding(to_time));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getHistoricalWebinarsCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getHistoricalWebinarsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIHistoricalWebinar> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIHistoricalWebinar val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHistoricalWebinarsSignal(output);
        Q_EMIT getHistoricalWebinarsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHistoricalWebinarsSignalE(output, error_type, error_str);
        Q_EMIT getHistoricalWebinarsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHistoricalWebinarsSignalError(output, error_type, error_str);
        Q_EMIT getHistoricalWebinarsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getPerformanceForAllWebinarSessions(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key) {
    QString fullPath = QString(_serverConfigs["getPerformanceForAllWebinarSessions"][_serverIndices.value("getPerformanceForAllWebinarSessions")].URL()+"/organizers/{organizerKey}/webinars/{webinarKey}/performance");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    
    {
        QString webinar_keyPathParam("{");
        webinar_keyPathParam.append("webinarKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "webinarKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"webinarKey"+pathSuffix : pathPrefix;
        fullPath.replace(webinar_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(webinar_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getPerformanceForAllWebinarSessionsCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getPerformanceForAllWebinarSessionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QMap<QString, OAISessionPerformance> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();
    for (QString key : obj.keys()) {
        OAISessionPerformance val;
        ::OpenAPI::fromJsonValue(val, obj[key]);
        output.insert(key, val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPerformanceForAllWebinarSessionsSignal(output);
        Q_EMIT getPerformanceForAllWebinarSessionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPerformanceForAllWebinarSessionsSignalE(output, error_type, error_str);
        Q_EMIT getPerformanceForAllWebinarSessionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPerformanceForAllWebinarSessionsSignalError(output, error_type, error_str);
        Q_EMIT getPerformanceForAllWebinarSessionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getUpcomingWebinars(const QString &authorization, const qint64 &organizer_key) {
    QString fullPath = QString(_serverConfigs["getUpcomingWebinars"][_serverIndices.value("getUpcomingWebinars")].URL()+"/organizers/{organizerKey}/upcomingWebinars");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getUpcomingWebinarsCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getUpcomingWebinarsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIUpcomingWebinar> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIUpcomingWebinar val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUpcomingWebinarsSignal(output);
        Q_EMIT getUpcomingWebinarsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUpcomingWebinarsSignalE(output, error_type, error_str);
        Q_EMIT getUpcomingWebinarsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUpcomingWebinarsSignalError(output, error_type, error_str);
        Q_EMIT getUpcomingWebinarsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getWebinar(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key) {
    QString fullPath = QString(_serverConfigs["getWebinar"][_serverIndices.value("getWebinar")].URL()+"/organizers/{organizerKey}/webinars/{webinarKey}");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    
    {
        QString webinar_keyPathParam("{");
        webinar_keyPathParam.append("webinarKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "webinarKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"webinarKey"+pathSuffix : pathPrefix;
        fullPath.replace(webinar_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(webinar_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getWebinarCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getWebinarCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWebinarByKey output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWebinarSignal(output);
        Q_EMIT getWebinarSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWebinarSignalE(output, error_type, error_str);
        Q_EMIT getWebinarSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWebinarSignalError(output, error_type, error_str);
        Q_EMIT getWebinarSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::getWebinarMeetingTimes(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key) {
    QString fullPath = QString(_serverConfigs["getWebinarMeetingTimes"][_serverIndices.value("getWebinarMeetingTimes")].URL()+"/organizers/{organizerKey}/webinars/{webinarKey}/meetingtimes");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    
    {
        QString webinar_keyPathParam("{");
        webinar_keyPathParam.append("webinarKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "webinarKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"webinarKey"+pathSuffix : pathPrefix;
        fullPath.replace(webinar_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(webinar_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::getWebinarMeetingTimesCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::getWebinarMeetingTimesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDateTimeRange> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDateTimeRange val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWebinarMeetingTimesSignal(output);
        Q_EMIT getWebinarMeetingTimesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWebinarMeetingTimesSignalE(output, error_type, error_str);
        Q_EMIT getWebinarMeetingTimesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWebinarMeetingTimesSignalError(output, error_type, error_str);
        Q_EMIT getWebinarMeetingTimesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::updateAudioInformation(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const OAIAudioUpdate &body, const ::OpenAPI::OptionalParam<bool> &notify_participants) {
    QString fullPath = QString(_serverConfigs["updateAudioInformation"][_serverIndices.value("updateAudioInformation")].URL()+"/organizers/{organizerKey}/webinars/{webinarKey}/audio");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    
    {
        QString webinar_keyPathParam("{");
        webinar_keyPathParam.append("webinarKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "webinarKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"webinarKey"+pathSuffix : pathPrefix;
        fullPath.replace(webinar_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(webinar_key)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (notify_participants.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "notifyParticipants", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("notifyParticipants")).append(querySuffix).append(QUrl::toPercentEncoding(notify_participants.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::updateAudioInformationCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::updateAudioInformationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateAudioInformationSignal();
        Q_EMIT updateAudioInformationSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateAudioInformationSignalE(error_type, error_str);
        Q_EMIT updateAudioInformationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateAudioInformationSignalError(error_type, error_str);
        Q_EMIT updateAudioInformationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::updateWebinar(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const OAIWebinarReqUpdate &body, const ::OpenAPI::OptionalParam<bool> &notify_participants) {
    QString fullPath = QString(_serverConfigs["updateWebinar"][_serverIndices.value("updateWebinar")].URL()+"/organizers/{organizerKey}/webinars/{webinarKey}");
    
    
    {
        QString organizer_keyPathParam("{");
        organizer_keyPathParam.append("organizerKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organizerKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organizerKey"+pathSuffix : pathPrefix;
        fullPath.replace(organizer_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organizer_key)));
    }
    
    {
        QString webinar_keyPathParam("{");
        webinar_keyPathParam.append("webinarKey").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "webinarKey", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"webinarKey"+pathSuffix : pathPrefix;
        fullPath.replace(webinar_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(webinar_key)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (notify_participants.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "notifyParticipants", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("notifyParticipants")).append(querySuffix).append(QUrl::toPercentEncoding(notify_participants.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWebinarsApi::updateWebinarCallback);
    connect(this, &OAIWebinarsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWebinarsApi::updateWebinarCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateWebinarSignal();
        Q_EMIT updateWebinarSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateWebinarSignalE(error_type, error_str);
        Q_EMIT updateWebinarSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateWebinarSignalError(error_type, error_str);
        Q_EMIT updateWebinarSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWebinarsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
