/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICoOrganizersApi_H
#define OAI_OAICoOrganizersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICoorganizer.h"
#include "OAICoorganizerReqCreate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICoOrganizersApi : public QObject {
    Q_OBJECT

public:
    OAICoOrganizersApi(const int timeOut = 0);
    ~OAICoOrganizersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  body QList<OAICoorganizerReqCreate> [required]
    */
    virtual void createCoorganizers(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const QList<OAICoorganizerReqCreate> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  coorganizer_key qint64 [required]
    * @param[in]  external bool [optional]
    */
    virtual void deleteCoorganizer(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &coorganizer_key, const ::OpenAPI::OptionalParam<bool> &external = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getCoorganizers(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  coorganizer_key qint64 [required]
    * @param[in]  external bool [optional]
    */
    virtual void resendCoorganizerInvitation(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const qint64 &coorganizer_key, const ::OpenAPI::OptionalParam<bool> &external = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCoorganizersCallback(OAIHttpRequestWorker *worker);
    void deleteCoorganizerCallback(OAIHttpRequestWorker *worker);
    void getCoorganizersCallback(OAIHttpRequestWorker *worker);
    void resendCoorganizerInvitationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCoorganizersSignal(QList<OAICoorganizer> summary);
    void deleteCoorganizerSignal();
    void getCoorganizersSignal(QList<OAICoorganizer> summary);
    void resendCoorganizerInvitationSignal();


    void createCoorganizersSignalFull(OAIHttpRequestWorker *worker, QList<OAICoorganizer> summary);
    void deleteCoorganizerSignalFull(OAIHttpRequestWorker *worker);
    void getCoorganizersSignalFull(OAIHttpRequestWorker *worker, QList<OAICoorganizer> summary);
    void resendCoorganizerInvitationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createCoorganizersSignalError() instead")
    void createCoorganizersSignalE(QList<OAICoorganizer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCoorganizersSignalError(QList<OAICoorganizer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCoorganizerSignalError() instead")
    void deleteCoorganizerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCoorganizerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCoorganizersSignalError() instead")
    void getCoorganizersSignalE(QList<OAICoorganizer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCoorganizersSignalError(QList<OAICoorganizer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendCoorganizerInvitationSignalError() instead")
    void resendCoorganizerInvitationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resendCoorganizerInvitationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCoorganizersSignalErrorFull() instead")
    void createCoorganizersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCoorganizersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCoorganizerSignalErrorFull() instead")
    void deleteCoorganizerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCoorganizerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCoorganizersSignalErrorFull() instead")
    void getCoorganizersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCoorganizersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendCoorganizerInvitationSignalErrorFull() instead")
    void resendCoorganizerInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendCoorganizerInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
