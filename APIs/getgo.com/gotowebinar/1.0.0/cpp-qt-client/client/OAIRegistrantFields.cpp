/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrantFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrantFields::OAIRegistrantFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrantFields::OAIRegistrantFields() {
    this->initializeModel();
}

OAIRegistrantFields::~OAIRegistrantFields() {}

void OAIRegistrantFields::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_number_of_employees_isSet = false;
    m_number_of_employees_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_purchasing_role_isSet = false;
    m_purchasing_role_isValid = false;

    m_purchasing_time_frame_isSet = false;
    m_purchasing_time_frame_isValid = false;

    m_questions_and_comments_isSet = false;
    m_questions_and_comments_isValid = false;

    m_responses_isSet = false;
    m_responses_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIRegistrantFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrantFields::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_number_of_employees_isValid = ::OpenAPI::fromJsonValue(m_number_of_employees, json[QString("numberOfEmployees")]);
    m_number_of_employees_isSet = !json[QString("numberOfEmployees")].isNull() && m_number_of_employees_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_purchasing_role_isValid = ::OpenAPI::fromJsonValue(m_purchasing_role, json[QString("purchasingRole")]);
    m_purchasing_role_isSet = !json[QString("purchasingRole")].isNull() && m_purchasing_role_isValid;

    m_purchasing_time_frame_isValid = ::OpenAPI::fromJsonValue(m_purchasing_time_frame, json[QString("purchasingTimeFrame")]);
    m_purchasing_time_frame_isSet = !json[QString("purchasingTimeFrame")].isNull() && m_purchasing_time_frame_isValid;

    m_questions_and_comments_isValid = ::OpenAPI::fromJsonValue(m_questions_and_comments, json[QString("questionsAndComments")]);
    m_questions_and_comments_isSet = !json[QString("questionsAndComments")].isNull() && m_questions_and_comments_isValid;

    m_responses_isValid = ::OpenAPI::fromJsonValue(m_responses, json[QString("responses")]);
    m_responses_isSet = !json[QString("responses")].isNull() && m_responses_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAIRegistrantFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrantFields::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_industry_isSet) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_number_of_employees_isSet) {
        obj.insert(QString("numberOfEmployees"), ::OpenAPI::toJsonValue(m_number_of_employees));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_purchasing_role_isSet) {
        obj.insert(QString("purchasingRole"), ::OpenAPI::toJsonValue(m_purchasing_role));
    }
    if (m_purchasing_time_frame_isSet) {
        obj.insert(QString("purchasingTimeFrame"), ::OpenAPI::toJsonValue(m_purchasing_time_frame));
    }
    if (m_questions_and_comments_isSet) {
        obj.insert(QString("questionsAndComments"), ::OpenAPI::toJsonValue(m_questions_and_comments));
    }
    if (m_responses.size() > 0) {
        obj.insert(QString("responses"), ::OpenAPI::toJsonValue(m_responses));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIRegistrantFields::getAddress() const {
    return m_address;
}
void OAIRegistrantFields::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIRegistrantFields::is_address_Set() const{
    return m_address_isSet;
}

bool OAIRegistrantFields::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIRegistrantFields::getCity() const {
    return m_city;
}
void OAIRegistrantFields::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIRegistrantFields::is_city_Set() const{
    return m_city_isSet;
}

bool OAIRegistrantFields::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIRegistrantFields::getCountry() const {
    return m_country;
}
void OAIRegistrantFields::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIRegistrantFields::is_country_Set() const{
    return m_country_isSet;
}

bool OAIRegistrantFields::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIRegistrantFields::getEmail() const {
    return m_email;
}
void OAIRegistrantFields::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRegistrantFields::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRegistrantFields::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIRegistrantFields::getFirstName() const {
    return m_first_name;
}
void OAIRegistrantFields::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIRegistrantFields::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIRegistrantFields::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIRegistrantFields::getIndustry() const {
    return m_industry;
}
void OAIRegistrantFields::setIndustry(const QString &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIRegistrantFields::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIRegistrantFields::is_industry_Valid() const{
    return m_industry_isValid;
}

QString OAIRegistrantFields::getJobTitle() const {
    return m_job_title;
}
void OAIRegistrantFields::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIRegistrantFields::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIRegistrantFields::is_job_title_Valid() const{
    return m_job_title_isValid;
}

QString OAIRegistrantFields::getLastName() const {
    return m_last_name;
}
void OAIRegistrantFields::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIRegistrantFields::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIRegistrantFields::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIRegistrantFields::getNumberOfEmployees() const {
    return m_number_of_employees;
}
void OAIRegistrantFields::setNumberOfEmployees(const QString &number_of_employees) {
    m_number_of_employees = number_of_employees;
    m_number_of_employees_isSet = true;
}

bool OAIRegistrantFields::is_number_of_employees_Set() const{
    return m_number_of_employees_isSet;
}

bool OAIRegistrantFields::is_number_of_employees_Valid() const{
    return m_number_of_employees_isValid;
}

QString OAIRegistrantFields::getOrganization() const {
    return m_organization;
}
void OAIRegistrantFields::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIRegistrantFields::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIRegistrantFields::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIRegistrantFields::getPhone() const {
    return m_phone;
}
void OAIRegistrantFields::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIRegistrantFields::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIRegistrantFields::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIRegistrantFields::getPurchasingRole() const {
    return m_purchasing_role;
}
void OAIRegistrantFields::setPurchasingRole(const QString &purchasing_role) {
    m_purchasing_role = purchasing_role;
    m_purchasing_role_isSet = true;
}

bool OAIRegistrantFields::is_purchasing_role_Set() const{
    return m_purchasing_role_isSet;
}

bool OAIRegistrantFields::is_purchasing_role_Valid() const{
    return m_purchasing_role_isValid;
}

QString OAIRegistrantFields::getPurchasingTimeFrame() const {
    return m_purchasing_time_frame;
}
void OAIRegistrantFields::setPurchasingTimeFrame(const QString &purchasing_time_frame) {
    m_purchasing_time_frame = purchasing_time_frame;
    m_purchasing_time_frame_isSet = true;
}

bool OAIRegistrantFields::is_purchasing_time_frame_Set() const{
    return m_purchasing_time_frame_isSet;
}

bool OAIRegistrantFields::is_purchasing_time_frame_Valid() const{
    return m_purchasing_time_frame_isValid;
}

QString OAIRegistrantFields::getQuestionsAndComments() const {
    return m_questions_and_comments;
}
void OAIRegistrantFields::setQuestionsAndComments(const QString &questions_and_comments) {
    m_questions_and_comments = questions_and_comments;
    m_questions_and_comments_isSet = true;
}

bool OAIRegistrantFields::is_questions_and_comments_Set() const{
    return m_questions_and_comments_isSet;
}

bool OAIRegistrantFields::is_questions_and_comments_Valid() const{
    return m_questions_and_comments_isValid;
}

QList<OAIRegistrantQAResponse> OAIRegistrantFields::getResponses() const {
    return m_responses;
}
void OAIRegistrantFields::setResponses(const QList<OAIRegistrantQAResponse> &responses) {
    m_responses = responses;
    m_responses_isSet = true;
}

bool OAIRegistrantFields::is_responses_Set() const{
    return m_responses_isSet;
}

bool OAIRegistrantFields::is_responses_Valid() const{
    return m_responses_isValid;
}

QString OAIRegistrantFields::getSource() const {
    return m_source;
}
void OAIRegistrantFields::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRegistrantFields::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRegistrantFields::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIRegistrantFields::getState() const {
    return m_state;
}
void OAIRegistrantFields::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRegistrantFields::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRegistrantFields::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRegistrantFields::getZipCode() const {
    return m_zip_code;
}
void OAIRegistrantFields::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIRegistrantFields::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIRegistrantFields::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIRegistrantFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_employees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchasing_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchasing_time_frame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_questions_and_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrantFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_first_name_isValid && m_last_name_isValid && true;
}

} // namespace OpenAPI
