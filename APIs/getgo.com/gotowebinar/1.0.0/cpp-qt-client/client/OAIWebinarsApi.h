/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebinarsApi_H
#define OAI_OAIWebinarsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountWebinarsResponse.h"
#include "OAIAttendee.h"
#include "OAIAudio.h"
#include "OAIAudioUpdate.h"
#include "OAICreatedWebinar.h"
#include "OAIDateTimeRange.h"
#include "OAIHistoricalWebinar.h"
#include "OAISessionPerformance.h"
#include "OAIUpcomingWebinar.h"
#include "OAIWebinar.h"
#include "OAIWebinarByKey.h"
#include "OAIWebinarReqCreate.h"
#include "OAIWebinarReqUpdate.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebinarsApi : public QObject {
    Q_OBJECT

public:
    OAIWebinarsApi(const int timeOut = 0);
    ~OAIWebinarsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  send_cancellation_emails bool [optional]
    */
    virtual void cancelWebinar(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const ::OpenAPI::OptionalParam<bool> &send_cancellation_emails = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  body OAIWebinarReqCreate [required]
    */
    virtual void createWebinar(const QString &authorization, const qint64 &organizer_key, const OAIWebinarReqCreate &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  account_key qint64 [required]
    * @param[in]  from_time QDateTime [required]
    * @param[in]  to_time QDateTime [required]
    * @param[in]  page qint64 [optional]
    * @param[in]  size qint64 [optional]
    */
    virtual void getAllAccountWebinars(const QString &authorization, const qint64 &account_key, const QDateTime &from_time, const QDateTime &to_time, const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &size = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    */
    virtual void getAllWebinars(const QString &authorization, const qint64 &organizer_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getAttendeesForAllWebinarSessions(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getAudioInformation(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  from_time QDateTime [required]
    * @param[in]  to_time QDateTime [required]
    */
    virtual void getHistoricalWebinars(const QString &authorization, const qint64 &organizer_key, const QDateTime &from_time, const QDateTime &to_time);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getPerformanceForAllWebinarSessions(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    */
    virtual void getUpcomingWebinars(const QString &authorization, const qint64 &organizer_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getWebinar(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    */
    virtual void getWebinarMeetingTimes(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  body OAIAudioUpdate [required]
    * @param[in]  notify_participants bool [optional]
    */
    virtual void updateAudioInformation(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const OAIAudioUpdate &body, const ::OpenAPI::OptionalParam<bool> &notify_participants = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  webinar_key qint64 [required]
    * @param[in]  body OAIWebinarReqUpdate [required]
    * @param[in]  notify_participants bool [optional]
    */
    virtual void updateWebinar(const QString &authorization, const qint64 &organizer_key, const qint64 &webinar_key, const OAIWebinarReqUpdate &body, const ::OpenAPI::OptionalParam<bool> &notify_participants = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelWebinarCallback(OAIHttpRequestWorker *worker);
    void createWebinarCallback(OAIHttpRequestWorker *worker);
    void getAllAccountWebinarsCallback(OAIHttpRequestWorker *worker);
    void getAllWebinarsCallback(OAIHttpRequestWorker *worker);
    void getAttendeesForAllWebinarSessionsCallback(OAIHttpRequestWorker *worker);
    void getAudioInformationCallback(OAIHttpRequestWorker *worker);
    void getHistoricalWebinarsCallback(OAIHttpRequestWorker *worker);
    void getPerformanceForAllWebinarSessionsCallback(OAIHttpRequestWorker *worker);
    void getUpcomingWebinarsCallback(OAIHttpRequestWorker *worker);
    void getWebinarCallback(OAIHttpRequestWorker *worker);
    void getWebinarMeetingTimesCallback(OAIHttpRequestWorker *worker);
    void updateAudioInformationCallback(OAIHttpRequestWorker *worker);
    void updateWebinarCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelWebinarSignal();
    void createWebinarSignal(OAICreatedWebinar summary);
    void getAllAccountWebinarsSignal(OAIAccountWebinarsResponse summary);
    void getAllWebinarsSignal(QList<OAIWebinar> summary);
    void getAttendeesForAllWebinarSessionsSignal(QList<OAIAttendee> summary);
    void getAudioInformationSignal(OAIAudio summary);
    void getHistoricalWebinarsSignal(QList<OAIHistoricalWebinar> summary);
    void getPerformanceForAllWebinarSessionsSignal(QMap<QString, OAISessionPerformance> summary);
    void getUpcomingWebinarsSignal(QList<OAIUpcomingWebinar> summary);
    void getWebinarSignal(OAIWebinarByKey summary);
    void getWebinarMeetingTimesSignal(QList<OAIDateTimeRange> summary);
    void updateAudioInformationSignal();
    void updateWebinarSignal();


    void cancelWebinarSignalFull(OAIHttpRequestWorker *worker);
    void createWebinarSignalFull(OAIHttpRequestWorker *worker, OAICreatedWebinar summary);
    void getAllAccountWebinarsSignalFull(OAIHttpRequestWorker *worker, OAIAccountWebinarsResponse summary);
    void getAllWebinarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIWebinar> summary);
    void getAttendeesForAllWebinarSessionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttendee> summary);
    void getAudioInformationSignalFull(OAIHttpRequestWorker *worker, OAIAudio summary);
    void getHistoricalWebinarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIHistoricalWebinar> summary);
    void getPerformanceForAllWebinarSessionsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAISessionPerformance> summary);
    void getUpcomingWebinarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUpcomingWebinar> summary);
    void getWebinarSignalFull(OAIHttpRequestWorker *worker, OAIWebinarByKey summary);
    void getWebinarMeetingTimesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDateTimeRange> summary);
    void updateAudioInformationSignalFull(OAIHttpRequestWorker *worker);
    void updateWebinarSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cancelWebinarSignalError() instead")
    void cancelWebinarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelWebinarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebinarSignalError() instead")
    void createWebinarSignalE(OAICreatedWebinar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebinarSignalError(OAICreatedWebinar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllAccountWebinarsSignalError() instead")
    void getAllAccountWebinarsSignalE(OAIAccountWebinarsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAccountWebinarsSignalError(OAIAccountWebinarsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWebinarsSignalError() instead")
    void getAllWebinarsSignalE(QList<OAIWebinar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWebinarsSignalError(QList<OAIWebinar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttendeesForAllWebinarSessionsSignalError() instead")
    void getAttendeesForAllWebinarSessionsSignalE(QList<OAIAttendee> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttendeesForAllWebinarSessionsSignalError(QList<OAIAttendee> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAudioInformationSignalError() instead")
    void getAudioInformationSignalE(OAIAudio summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAudioInformationSignalError(OAIAudio summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHistoricalWebinarsSignalError() instead")
    void getHistoricalWebinarsSignalE(QList<OAIHistoricalWebinar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHistoricalWebinarsSignalError(QList<OAIHistoricalWebinar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPerformanceForAllWebinarSessionsSignalError() instead")
    void getPerformanceForAllWebinarSessionsSignalE(QMap<QString, OAISessionPerformance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPerformanceForAllWebinarSessionsSignalError(QMap<QString, OAISessionPerformance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpcomingWebinarsSignalError() instead")
    void getUpcomingWebinarsSignalE(QList<OAIUpcomingWebinar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpcomingWebinarsSignalError(QList<OAIUpcomingWebinar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebinarSignalError() instead")
    void getWebinarSignalE(OAIWebinarByKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebinarSignalError(OAIWebinarByKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebinarMeetingTimesSignalError() instead")
    void getWebinarMeetingTimesSignalE(QList<OAIDateTimeRange> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebinarMeetingTimesSignalError(QList<OAIDateTimeRange> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAudioInformationSignalError() instead")
    void updateAudioInformationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateAudioInformationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebinarSignalError() instead")
    void updateWebinarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebinarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelWebinarSignalErrorFull() instead")
    void cancelWebinarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelWebinarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebinarSignalErrorFull() instead")
    void createWebinarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebinarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllAccountWebinarsSignalErrorFull() instead")
    void getAllAccountWebinarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAccountWebinarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWebinarsSignalErrorFull() instead")
    void getAllWebinarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWebinarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttendeesForAllWebinarSessionsSignalErrorFull() instead")
    void getAttendeesForAllWebinarSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttendeesForAllWebinarSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAudioInformationSignalErrorFull() instead")
    void getAudioInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAudioInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHistoricalWebinarsSignalErrorFull() instead")
    void getHistoricalWebinarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHistoricalWebinarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPerformanceForAllWebinarSessionsSignalErrorFull() instead")
    void getPerformanceForAllWebinarSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPerformanceForAllWebinarSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpcomingWebinarsSignalErrorFull() instead")
    void getUpcomingWebinarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpcomingWebinarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebinarSignalErrorFull() instead")
    void getWebinarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebinarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebinarMeetingTimesSignalErrorFull() instead")
    void getWebinarMeetingTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebinarMeetingTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAudioInformationSignalErrorFull() instead")
    void updateAudioInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAudioInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebinarSignalErrorFull() instead")
    void updateWebinarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebinarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
