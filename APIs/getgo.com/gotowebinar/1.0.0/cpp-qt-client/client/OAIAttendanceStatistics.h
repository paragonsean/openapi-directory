/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttendanceStatistics.h
 *
 * Describes attendance metrics for a webinar session.
 */

#ifndef OAIAttendanceStatistics_H
#define OAIAttendanceStatistics_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAttendanceStatistics : public OAIObject {
public:
    OAIAttendanceStatistics();
    OAIAttendanceStatistics(QString json);
    ~OAIAttendanceStatistics() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAverageAttendanceTimeSeconds() const;
    void setAverageAttendanceTimeSeconds(const float &average_attendance_time_seconds);
    bool is_average_attendance_time_seconds_Set() const;
    bool is_average_attendance_time_seconds_Valid() const;

    float getAverageAttentiveness() const;
    void setAverageAttentiveness(const float &average_attentiveness);
    bool is_average_attentiveness_Set() const;
    bool is_average_attentiveness_Valid() const;

    float getAverageInterestRating() const;
    void setAverageInterestRating(const float &average_interest_rating);
    bool is_average_interest_rating_Set() const;
    bool is_average_interest_rating_Valid() const;

    float getPercentageAttendance() const;
    void setPercentageAttendance(const float &percentage_attendance);
    bool is_percentage_attendance_Set() const;
    bool is_percentage_attendance_Valid() const;

    qint32 getRegistrantCount() const;
    void setRegistrantCount(const qint32 &registrant_count);
    bool is_registrant_count_Set() const;
    bool is_registrant_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_average_attendance_time_seconds;
    bool m_average_attendance_time_seconds_isSet;
    bool m_average_attendance_time_seconds_isValid;

    float m_average_attentiveness;
    bool m_average_attentiveness_isSet;
    bool m_average_attentiveness_isValid;

    float m_average_interest_rating;
    bool m_average_interest_rating_isSet;
    bool m_average_interest_rating_isValid;

    float m_percentage_attendance;
    bool m_percentage_attendance_isSet;
    bool m_percentage_attendance_isValid;

    qint32 m_registrant_count;
    bool m_registrant_count_isSet;
    bool m_registrant_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttendanceStatistics)

#endif // OAIAttendanceStatistics_H
