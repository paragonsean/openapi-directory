/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudio::OAIAudio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudio::OAIAudio() {
    this->initializeModel();
}

OAIAudio::~OAIAudio() {}

void OAIAudio::initializeModel() {

    m_conf_call_numbers_isSet = false;
    m_conf_call_numbers_isValid = false;

    m_private_info_isSet = false;
    m_private_info_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAudio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudio::fromJsonObject(QJsonObject json) {

    m_conf_call_numbers_isValid = ::OpenAPI::fromJsonValue(m_conf_call_numbers, json[QString("confCallNumbers")]);
    m_conf_call_numbers_isSet = !json[QString("confCallNumbers")].isNull() && m_conf_call_numbers_isValid;

    m_private_info_isValid = ::OpenAPI::fromJsonValue(m_private_info, json[QString("privateInfo")]);
    m_private_info_isSet = !json[QString("privateInfo")].isNull() && m_private_info_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAudio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudio::asJsonObject() const {
    QJsonObject obj;
    if (m_conf_call_numbers.size() > 0) {
        obj.insert(QString("confCallNumbers"), ::OpenAPI::toJsonValue(m_conf_call_numbers));
    }
    if (m_private_info.isSet()) {
        obj.insert(QString("privateInfo"), ::OpenAPI::toJsonValue(m_private_info));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, OAICallNumbers> OAIAudio::getConfCallNumbers() const {
    return m_conf_call_numbers;
}
void OAIAudio::setConfCallNumbers(const QMap<QString, OAICallNumbers> &conf_call_numbers) {
    m_conf_call_numbers = conf_call_numbers;
    m_conf_call_numbers_isSet = true;
}

bool OAIAudio::is_conf_call_numbers_Set() const{
    return m_conf_call_numbers_isSet;
}

bool OAIAudio::is_conf_call_numbers_Valid() const{
    return m_conf_call_numbers_isValid;
}

OAIPrivateInfo OAIAudio::getPrivateInfo() const {
    return m_private_info;
}
void OAIAudio::setPrivateInfo(const OAIPrivateInfo &private_info) {
    m_private_info = private_info;
    m_private_info_isSet = true;
}

bool OAIAudio::is_private_info_Set() const{
    return m_private_info_isSet;
}

bool OAIAudio::is_private_info_Valid() const{
    return m_private_info_isValid;
}

OAIAudioType OAIAudio::getType() const {
    return m_type;
}
void OAIAudio::setType(const OAIAudioType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAudio::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAudio::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAudio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conf_call_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudio::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
