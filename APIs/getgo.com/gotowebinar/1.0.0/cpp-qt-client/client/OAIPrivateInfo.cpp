/**
 * GoToWebinar
 * The GoToWebinar API provides seamless integration of webinar registrant and attendee data into your existing infrastructure or third-party applications. The ability to register participants, as well as pull lists of registrants and attendees for a webinar, allows organizers to manage the flow of information between their primary applications without manual intervention.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateInfo::OAIPrivateInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateInfo::OAIPrivateInfo() {
    this->initializeModel();
}

OAIPrivateInfo::~OAIPrivateInfo() {}

void OAIPrivateInfo::initializeModel() {

    m_attendee_isSet = false;
    m_attendee_isValid = false;

    m_organizer_isSet = false;
    m_organizer_isValid = false;

    m_panelist_isSet = false;
    m_panelist_isValid = false;
}

void OAIPrivateInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateInfo::fromJsonObject(QJsonObject json) {

    m_attendee_isValid = ::OpenAPI::fromJsonValue(m_attendee, json[QString("attendee")]);
    m_attendee_isSet = !json[QString("attendee")].isNull() && m_attendee_isValid;

    m_organizer_isValid = ::OpenAPI::fromJsonValue(m_organizer, json[QString("organizer")]);
    m_organizer_isSet = !json[QString("organizer")].isNull() && m_organizer_isValid;

    m_panelist_isValid = ::OpenAPI::fromJsonValue(m_panelist, json[QString("panelist")]);
    m_panelist_isSet = !json[QString("panelist")].isNull() && m_panelist_isValid;
}

QString OAIPrivateInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_attendee_isSet) {
        obj.insert(QString("attendee"), ::OpenAPI::toJsonValue(m_attendee));
    }
    if (m_organizer_isSet) {
        obj.insert(QString("organizer"), ::OpenAPI::toJsonValue(m_organizer));
    }
    if (m_panelist_isSet) {
        obj.insert(QString("panelist"), ::OpenAPI::toJsonValue(m_panelist));
    }
    return obj;
}

QString OAIPrivateInfo::getAttendee() const {
    return m_attendee;
}
void OAIPrivateInfo::setAttendee(const QString &attendee) {
    m_attendee = attendee;
    m_attendee_isSet = true;
}

bool OAIPrivateInfo::is_attendee_Set() const{
    return m_attendee_isSet;
}

bool OAIPrivateInfo::is_attendee_Valid() const{
    return m_attendee_isValid;
}

QString OAIPrivateInfo::getOrganizer() const {
    return m_organizer;
}
void OAIPrivateInfo::setOrganizer(const QString &organizer) {
    m_organizer = organizer;
    m_organizer_isSet = true;
}

bool OAIPrivateInfo::is_organizer_Set() const{
    return m_organizer_isSet;
}

bool OAIPrivateInfo::is_organizer_Valid() const{
    return m_organizer_isValid;
}

QString OAIPrivateInfo::getPanelist() const {
    return m_panelist;
}
void OAIPrivateInfo::setPanelist(const QString &panelist) {
    m_panelist = panelist;
    m_panelist_isSet = true;
}

bool OAIPrivateInfo::is_panelist_Set() const{
    return m_panelist_isSet;
}

bool OAIPrivateInfo::is_panelist_Valid() const{
    return m_panelist_isValid;
}

bool OAIPrivateInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_panelist_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attendee_isValid && true;
}

} // namespace OpenAPI
