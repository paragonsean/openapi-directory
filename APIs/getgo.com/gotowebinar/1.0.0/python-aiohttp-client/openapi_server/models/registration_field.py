# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistrationField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answers: List[str]=None, _field: str=None, max_size: int=None, required: bool=None):
        """RegistrationField - a model defined in OpenAPI

        :param answers: The answers of this RegistrationField.
        :param _field: The _field of this RegistrationField.
        :param max_size: The max_size of this RegistrationField.
        :param required: The required of this RegistrationField.
        """
        self.openapi_types = {
            'answers': List[str],
            '_field': str,
            'max_size': int,
            'required': bool
        }

        self.attribute_map = {
            'answers': 'answers',
            '_field': 'field',
            'max_size': 'maxSize',
            'required': 'required'
        }

        self._answers = answers
        self.__field = _field
        self._max_size = max_size
        self._required = required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationField of this RegistrationField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answers(self):
        """Gets the answers of this RegistrationField.

        List of choices for a multiple choice registration field

        :return: The answers of this RegistrationField.
        :rtype: List[str]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this RegistrationField.

        List of choices for a multiple choice registration field

        :param answers: The answers of this RegistrationField.
        :type answers: List[str]
        """

        self._answers = answers

    @property
    def _field(self):
        """Gets the _field of this RegistrationField.

        The name of the registration field

        :return: The _field of this RegistrationField.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this RegistrationField.

        The name of the registration field

        :param _field: The _field of this RegistrationField.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def max_size(self):
        """Gets the max_size of this RegistrationField.

        The character size of the custom registration field (max 128)

        :return: The max_size of this RegistrationField.
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this RegistrationField.

        The character size of the custom registration field (max 128)

        :param max_size: The max_size of this RegistrationField.
        :type max_size: int
        """
        if max_size is None:
            raise ValueError("Invalid value for `max_size`, must not be `None`")

        self._max_size = max_size

    @property
    def required(self):
        """Gets the required of this RegistrationField.

        Indicates whether the custom registration field is compulsory

        :return: The required of this RegistrationField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this RegistrationField.

        Indicates whether the custom registration field is compulsory

        :param required: The required of this RegistrationField.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required
