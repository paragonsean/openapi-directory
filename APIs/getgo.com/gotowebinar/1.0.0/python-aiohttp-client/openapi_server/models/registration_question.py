# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registration_answer import RegistrationAnswer
from openapi_server import util


class RegistrationQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answers: List[RegistrationAnswer]=None, max_size: int=None, question: str=None, question_key: int=None, required: bool=None, type: str=None):
        """RegistrationQuestion - a model defined in OpenAPI

        :param answers: The answers of this RegistrationQuestion.
        :param max_size: The max_size of this RegistrationQuestion.
        :param question: The question of this RegistrationQuestion.
        :param question_key: The question_key of this RegistrationQuestion.
        :param required: The required of this RegistrationQuestion.
        :param type: The type of this RegistrationQuestion.
        """
        self.openapi_types = {
            'answers': List[RegistrationAnswer],
            'max_size': int,
            'question': str,
            'question_key': int,
            'required': bool,
            'type': str
        }

        self.attribute_map = {
            'answers': 'answers',
            'max_size': 'maxSize',
            'question': 'question',
            'question_key': 'questionKey',
            'required': 'required',
            'type': 'type'
        }

        self._answers = answers
        self._max_size = max_size
        self._question = question
        self._question_key = question_key
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationQuestion of this RegistrationQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answers(self):
        """Gets the answers of this RegistrationQuestion.

        The answers to a multiple choice custom registration field

        :return: The answers of this RegistrationQuestion.
        :rtype: List[RegistrationAnswer]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this RegistrationQuestion.

        The answers to a multiple choice custom registration field

        :param answers: The answers of this RegistrationQuestion.
        :type answers: List[RegistrationAnswer]
        """

        self._answers = answers

    @property
    def max_size(self):
        """Gets the max_size of this RegistrationQuestion.

        The character size of the custom registration field (max 1000)

        :return: The max_size of this RegistrationQuestion.
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this RegistrationQuestion.

        The character size of the custom registration field (max 1000)

        :param max_size: The max_size of this RegistrationQuestion.
        :type max_size: int
        """
        if max_size is None:
            raise ValueError("Invalid value for `max_size`, must not be `None`")

        self._max_size = max_size

    @property
    def question(self):
        """Gets the question of this RegistrationQuestion.

        The value (text) of the custom registration field

        :return: The question of this RegistrationQuestion.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this RegistrationQuestion.

        The value (text) of the custom registration field

        :param question: The question of this RegistrationQuestion.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")

        self._question = question

    @property
    def question_key(self):
        """Gets the question_key of this RegistrationQuestion.

        The unique key of the custom registration field

        :return: The question_key of this RegistrationQuestion.
        :rtype: int
        """
        return self._question_key

    @question_key.setter
    def question_key(self, question_key):
        """Sets the question_key of this RegistrationQuestion.

        The unique key of the custom registration field

        :param question_key: The question_key of this RegistrationQuestion.
        :type question_key: int
        """
        if question_key is None:
            raise ValueError("Invalid value for `question_key`, must not be `None`")

        self._question_key = question_key

    @property
    def required(self):
        """Gets the required of this RegistrationQuestion.

        Indicates whether the custom registration field is compulsory

        :return: The required of this RegistrationQuestion.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this RegistrationQuestion.

        Indicates whether the custom registration field is compulsory

        :param required: The required of this RegistrationQuestion.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def type(self):
        """Gets the type of this RegistrationQuestion.

        Indicates whether the custom registration field requires a single short answer or whether it is a multiple choice question

        :return: The type of this RegistrationQuestion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RegistrationQuestion.

        Indicates whether the custom registration field requires a single short answer or whether it is a multiple choice question

        :param type: The type of this RegistrationQuestion.
        :type type: str
        """
        allowed_values = ["multipleChoice", "shortAnswer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
