# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Coorganizer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, external: bool=None, given_name: str=None, join_link: str=None, member_key: str=None, surname: str=None):
        """Coorganizer - a model defined in OpenAPI

        :param email: The email of this Coorganizer.
        :param external: The external of this Coorganizer.
        :param given_name: The given_name of this Coorganizer.
        :param join_link: The join_link of this Coorganizer.
        :param member_key: The member_key of this Coorganizer.
        :param surname: The surname of this Coorganizer.
        """
        self.openapi_types = {
            'email': str,
            'external': bool,
            'given_name': str,
            'join_link': str,
            'member_key': str,
            'surname': str
        }

        self.attribute_map = {
            'email': 'email',
            'external': 'external',
            'given_name': 'givenName',
            'join_link': 'joinLink',
            'member_key': 'memberKey',
            'surname': 'surname'
        }

        self._email = email
        self._external = external
        self._given_name = given_name
        self._join_link = join_link
        self._member_key = member_key
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Coorganizer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Coorganizer of this Coorganizer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Coorganizer.

        The co-organizer's email address

        :return: The email of this Coorganizer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Coorganizer.

        The co-organizer's email address

        :param email: The email of this Coorganizer.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def external(self):
        """Gets the external of this Coorganizer.

        If the co-organizer has no GoToWebinar account, this value is set to 'true'

        :return: The external of this Coorganizer.
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this Coorganizer.

        If the co-organizer has no GoToWebinar account, this value is set to 'true'

        :param external: The external of this Coorganizer.
        :type external: bool
        """
        if external is None:
            raise ValueError("Invalid value for `external`, must not be `None`")

        self._external = external

    @property
    def given_name(self):
        """Gets the given_name of this Coorganizer.

        The co-organizer's given name

        :return: The given_name of this Coorganizer.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Coorganizer.

        The co-organizer's given name

        :param given_name: The given_name of this Coorganizer.
        :type given_name: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")

        self._given_name = given_name

    @property
    def join_link(self):
        """Gets the join_link of this Coorganizer.

        The co-organizer's join link

        :return: The join_link of this Coorganizer.
        :rtype: str
        """
        return self._join_link

    @join_link.setter
    def join_link(self, join_link):
        """Sets the join_link of this Coorganizer.

        The co-organizer's join link

        :param join_link: The join_link of this Coorganizer.
        :type join_link: str
        """
        if join_link is None:
            raise ValueError("Invalid value for `join_link`, must not be `None`")

        self._join_link = join_link

    @property
    def member_key(self):
        """Gets the member_key of this Coorganizer.

        The co-organizer's organizer key. A new member key is created for external co-organizers

        :return: The member_key of this Coorganizer.
        :rtype: str
        """
        return self._member_key

    @member_key.setter
    def member_key(self, member_key):
        """Sets the member_key of this Coorganizer.

        The co-organizer's organizer key. A new member key is created for external co-organizers

        :param member_key: The member_key of this Coorganizer.
        :type member_key: str
        """
        if member_key is None:
            raise ValueError("Invalid value for `member_key`, must not be `None`")

        self._member_key = member_key

    @property
    def surname(self):
        """Gets the surname of this Coorganizer.

        The co-organizer's surname. For external co-organizers this parameter is not returned

        :return: The surname of this Coorganizer.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Coorganizer.

        The co-organizer's surname. For external co-organizers this parameter is not returned

        :param surname: The surname of this Coorganizer.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")

        self._surname = surname
