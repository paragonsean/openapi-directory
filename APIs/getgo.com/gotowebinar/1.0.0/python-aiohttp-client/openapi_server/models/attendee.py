# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attendance import Attendance
from openapi_server import util


class Attendee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attendance: List[Attendance]=None, attendance_time_in_seconds: int=None, email: str=None, first_name: str=None, last_name: str=None, registrant_key: int=None, session_key: int=None):
        """Attendee - a model defined in OpenAPI

        :param attendance: The attendance of this Attendee.
        :param attendance_time_in_seconds: The attendance_time_in_seconds of this Attendee.
        :param email: The email of this Attendee.
        :param first_name: The first_name of this Attendee.
        :param last_name: The last_name of this Attendee.
        :param registrant_key: The registrant_key of this Attendee.
        :param session_key: The session_key of this Attendee.
        """
        self.openapi_types = {
            'attendance': List[Attendance],
            'attendance_time_in_seconds': int,
            'email': str,
            'first_name': str,
            'last_name': str,
            'registrant_key': int,
            'session_key': int
        }

        self.attribute_map = {
            'attendance': 'attendance',
            'attendance_time_in_seconds': 'attendanceTimeInSeconds',
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'registrant_key': 'registrantKey',
            'session_key': 'sessionKey'
        }

        self._attendance = attendance
        self._attendance_time_in_seconds = attendance_time_in_seconds
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._registrant_key = registrant_key
        self._session_key = session_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attendee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attendee of this Attendee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attendance(self):
        """Gets the attendance of this Attendee.

        The list of times the attendee joined and left the webinar session

        :return: The attendance of this Attendee.
        :rtype: List[Attendance]
        """
        return self._attendance

    @attendance.setter
    def attendance(self, attendance):
        """Sets the attendance of this Attendee.

        The list of times the attendee joined and left the webinar session

        :param attendance: The attendance of this Attendee.
        :type attendance: List[Attendance]
        """
        if attendance is None:
            raise ValueError("Invalid value for `attendance`, must not be `None`")

        self._attendance = attendance

    @property
    def attendance_time_in_seconds(self):
        """Gets the attendance_time_in_seconds of this Attendee.

        The total attendance time in seconds

        :return: The attendance_time_in_seconds of this Attendee.
        :rtype: int
        """
        return self._attendance_time_in_seconds

    @attendance_time_in_seconds.setter
    def attendance_time_in_seconds(self, attendance_time_in_seconds):
        """Sets the attendance_time_in_seconds of this Attendee.

        The total attendance time in seconds

        :param attendance_time_in_seconds: The attendance_time_in_seconds of this Attendee.
        :type attendance_time_in_seconds: int
        """
        if attendance_time_in_seconds is None:
            raise ValueError("Invalid value for `attendance_time_in_seconds`, must not be `None`")

        self._attendance_time_in_seconds = attendance_time_in_seconds

    @property
    def email(self):
        """Gets the email of this Attendee.

        The attendee's email address

        :return: The email of this Attendee.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Attendee.

        The attendee's email address

        :param email: The email of this Attendee.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Attendee.

        The attendee's first name

        :return: The first_name of this Attendee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Attendee.

        The attendee's first name

        :param first_name: The first_name of this Attendee.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Attendee.

        The attendee's last name

        :return: The last_name of this Attendee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Attendee.

        The attendee's last name

        :param last_name: The last_name of this Attendee.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def registrant_key(self):
        """Gets the registrant_key of this Attendee.

        The key of the webinar attendee

        :return: The registrant_key of this Attendee.
        :rtype: int
        """
        return self._registrant_key

    @registrant_key.setter
    def registrant_key(self, registrant_key):
        """Sets the registrant_key of this Attendee.

        The key of the webinar attendee

        :param registrant_key: The registrant_key of this Attendee.
        :type registrant_key: int
        """
        if registrant_key is None:
            raise ValueError("Invalid value for `registrant_key`, must not be `None`")

        self._registrant_key = registrant_key

    @property
    def session_key(self):
        """Gets the session_key of this Attendee.

        The unique key of the webinar session

        :return: The session_key of this Attendee.
        :rtype: int
        """
        return self._session_key

    @session_key.setter
    def session_key(self, session_key):
        """Sets the session_key of this Attendee.

        The unique key of the webinar session

        :param session_key: The session_key of this Attendee.
        :type session_key: int
        """
        if session_key is None:
            raise ValueError("Invalid value for `session_key`, must not be `None`")

        self._session_key = session_key
