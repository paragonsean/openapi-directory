# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_codes import AccessCodes
from openapi_server import util


class CallNumbers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_codes: AccessCodes=None, toll: str=None, toll_free: str=None):
        """CallNumbers - a model defined in OpenAPI

        :param access_codes: The access_codes of this CallNumbers.
        :param toll: The toll of this CallNumbers.
        :param toll_free: The toll_free of this CallNumbers.
        """
        self.openapi_types = {
            'access_codes': AccessCodes,
            'toll': str,
            'toll_free': str
        }

        self.attribute_map = {
            'access_codes': 'accessCodes',
            'toll': 'toll',
            'toll_free': 'tollFree'
        }

        self._access_codes = access_codes
        self._toll = toll
        self._toll_free = toll_free

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallNumbers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallNumbers of this CallNumbers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_codes(self):
        """Gets the access_codes of this CallNumbers.


        :return: The access_codes of this CallNumbers.
        :rtype: AccessCodes
        """
        return self._access_codes

    @access_codes.setter
    def access_codes(self, access_codes):
        """Sets the access_codes of this CallNumbers.


        :param access_codes: The access_codes of this CallNumbers.
        :type access_codes: AccessCodes
        """
        if access_codes is None:
            raise ValueError("Invalid value for `access_codes`, must not be `None`")

        self._access_codes = access_codes

    @property
    def toll(self):
        """Gets the toll of this CallNumbers.

        Conference number for toll calls.

        :return: The toll of this CallNumbers.
        :rtype: str
        """
        return self._toll

    @toll.setter
    def toll(self, toll):
        """Sets the toll of this CallNumbers.

        Conference number for toll calls.

        :param toll: The toll of this CallNumbers.
        :type toll: str
        """
        if toll is None:
            raise ValueError("Invalid value for `toll`, must not be `None`")

        self._toll = toll

    @property
    def toll_free(self):
        """Gets the toll_free of this CallNumbers.

        Conference number for toll-free calls.

        :return: The toll_free of this CallNumbers.
        :rtype: str
        """
        return self._toll_free

    @toll_free.setter
    def toll_free(self, toll_free):
        """Sets the toll_free of this CallNumbers.

        Conference number for toll-free calls.

        :param toll_free: The toll_free of this CallNumbers.
        :type toll_free: str
        """

        self._toll_free = toll_free
