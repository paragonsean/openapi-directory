# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answer_to_attendee_question import AnswerToAttendeeQuestion
from openapi_server import util


class AttendeeQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answers: List[AnswerToAttendeeQuestion]=None, asked_by: str=None, question: str=None):
        """AttendeeQuestion - a model defined in OpenAPI

        :param answers: The answers of this AttendeeQuestion.
        :param asked_by: The asked_by of this AttendeeQuestion.
        :param question: The question of this AttendeeQuestion.
        """
        self.openapi_types = {
            'answers': List[AnswerToAttendeeQuestion],
            'asked_by': str,
            'question': str
        }

        self.attribute_map = {
            'answers': 'answers',
            'asked_by': 'askedBy',
            'question': 'question'
        }

        self._answers = answers
        self._asked_by = asked_by
        self._question = question

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttendeeQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttendeeQuestion of this AttendeeQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answers(self):
        """Gets the answers of this AttendeeQuestion.

        Answer to a question of an attendee and key of the organizer that answered

        :return: The answers of this AttendeeQuestion.
        :rtype: List[AnswerToAttendeeQuestion]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this AttendeeQuestion.

        Answer to a question of an attendee and key of the organizer that answered

        :param answers: The answers of this AttendeeQuestion.
        :type answers: List[AnswerToAttendeeQuestion]
        """
        if answers is None:
            raise ValueError("Invalid value for `answers`, must not be `None`")

        self._answers = answers

    @property
    def asked_by(self):
        """Gets the asked_by of this AttendeeQuestion.

        The email address of the attendee that asked the question

        :return: The asked_by of this AttendeeQuestion.
        :rtype: str
        """
        return self._asked_by

    @asked_by.setter
    def asked_by(self, asked_by):
        """Sets the asked_by of this AttendeeQuestion.

        The email address of the attendee that asked the question

        :param asked_by: The asked_by of this AttendeeQuestion.
        :type asked_by: str
        """
        if asked_by is None:
            raise ValueError("Invalid value for `asked_by`, must not be `None`")

        self._asked_by = asked_by

    @property
    def question(self):
        """Gets the question of this AttendeeQuestion.

        The question asked by the attendee

        :return: The question of this AttendeeQuestion.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this AttendeeQuestion.

        The question asked by the attendee

        :param question: The question of this AttendeeQuestion.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")

        self._question = question
