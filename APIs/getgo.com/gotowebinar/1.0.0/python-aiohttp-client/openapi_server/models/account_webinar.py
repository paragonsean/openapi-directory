# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server import util


class AccountWebinar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, impromptu: bool=None, is_password_protected: bool=False, organizer_key: str=None, registration_url: str=None, subject: str=None, time_zone: str=None, times: List[DateTimeRange]=None, type: str='single_session', webinar_id: str=None, webinar_key: str=None):
        """AccountWebinar - a model defined in OpenAPI

        :param description: The description of this AccountWebinar.
        :param impromptu: The impromptu of this AccountWebinar.
        :param is_password_protected: The is_password_protected of this AccountWebinar.
        :param organizer_key: The organizer_key of this AccountWebinar.
        :param registration_url: The registration_url of this AccountWebinar.
        :param subject: The subject of this AccountWebinar.
        :param time_zone: The time_zone of this AccountWebinar.
        :param times: The times of this AccountWebinar.
        :param type: The type of this AccountWebinar.
        :param webinar_id: The webinar_id of this AccountWebinar.
        :param webinar_key: The webinar_key of this AccountWebinar.
        """
        self.openapi_types = {
            'description': str,
            'impromptu': bool,
            'is_password_protected': bool,
            'organizer_key': str,
            'registration_url': str,
            'subject': str,
            'time_zone': str,
            'times': List[DateTimeRange],
            'type': str,
            'webinar_id': str,
            'webinar_key': str
        }

        self.attribute_map = {
            'description': 'description',
            'impromptu': 'impromptu',
            'is_password_protected': 'isPasswordProtected',
            'organizer_key': 'organizerKey',
            'registration_url': 'registrationUrl',
            'subject': 'subject',
            'time_zone': 'timeZone',
            'times': 'times',
            'type': 'type',
            'webinar_id': 'webinarID',
            'webinar_key': 'webinarKey'
        }

        self._description = description
        self._impromptu = impromptu
        self._is_password_protected = is_password_protected
        self._organizer_key = organizer_key
        self._registration_url = registration_url
        self._subject = subject
        self._time_zone = time_zone
        self._times = times
        self._type = type
        self._webinar_id = webinar_id
        self._webinar_key = webinar_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountWebinar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountWebinar of this AccountWebinar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AccountWebinar.

        A short description of the webinar

        :return: The description of this AccountWebinar.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountWebinar.

        A short description of the webinar

        :param description: The description of this AccountWebinar.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def impromptu(self):
        """Gets the impromptu of this AccountWebinar.

        A boolean flag indicating if the webinar type is impromptu

        :return: The impromptu of this AccountWebinar.
        :rtype: bool
        """
        return self._impromptu

    @impromptu.setter
    def impromptu(self, impromptu):
        """Sets the impromptu of this AccountWebinar.

        A boolean flag indicating if the webinar type is impromptu

        :param impromptu: The impromptu of this AccountWebinar.
        :type impromptu: bool
        """
        if impromptu is None:
            raise ValueError("Invalid value for `impromptu`, must not be `None`")

        self._impromptu = impromptu

    @property
    def is_password_protected(self):
        """Gets the is_password_protected of this AccountWebinar.

        A boolean flag indicating if the webinar is password protected

        :return: The is_password_protected of this AccountWebinar.
        :rtype: bool
        """
        return self._is_password_protected

    @is_password_protected.setter
    def is_password_protected(self, is_password_protected):
        """Sets the is_password_protected of this AccountWebinar.

        A boolean flag indicating if the webinar is password protected

        :param is_password_protected: The is_password_protected of this AccountWebinar.
        :type is_password_protected: bool
        """
        if is_password_protected is None:
            raise ValueError("Invalid value for `is_password_protected`, must not be `None`")

        self._is_password_protected = is_password_protected

    @property
    def organizer_key(self):
        """Gets the organizer_key of this AccountWebinar.

        The key of the webinar organizer

        :return: The organizer_key of this AccountWebinar.
        :rtype: str
        """
        return self._organizer_key

    @organizer_key.setter
    def organizer_key(self, organizer_key):
        """Sets the organizer_key of this AccountWebinar.

        The key of the webinar organizer

        :param organizer_key: The organizer_key of this AccountWebinar.
        :type organizer_key: str
        """
        if organizer_key is None:
            raise ValueError("Invalid value for `organizer_key`, must not be `None`")

        self._organizer_key = organizer_key

    @property
    def registration_url(self):
        """Gets the registration_url of this AccountWebinar.

        The URL the webinar invitees can use to register

        :return: The registration_url of this AccountWebinar.
        :rtype: str
        """
        return self._registration_url

    @registration_url.setter
    def registration_url(self, registration_url):
        """Sets the registration_url of this AccountWebinar.

        The URL the webinar invitees can use to register

        :param registration_url: The registration_url of this AccountWebinar.
        :type registration_url: str
        """
        if registration_url is None:
            raise ValueError("Invalid value for `registration_url`, must not be `None`")

        self._registration_url = registration_url

    @property
    def subject(self):
        """Gets the subject of this AccountWebinar.

        The webinar subject

        :return: The subject of this AccountWebinar.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this AccountWebinar.

        The webinar subject

        :param subject: The subject of this AccountWebinar.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def time_zone(self):
        """Gets the time_zone of this AccountWebinar.

        The timezone where the webinar is taking place

        :return: The time_zone of this AccountWebinar.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this AccountWebinar.

        The timezone where the webinar is taking place

        :param time_zone: The time_zone of this AccountWebinar.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone

    @property
    def times(self):
        """Gets the times of this AccountWebinar.

        Array with startTime and endTime for the webinar sessions

        :return: The times of this AccountWebinar.
        :rtype: List[DateTimeRange]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this AccountWebinar.

        Array with startTime and endTime for the webinar sessions

        :param times: The times of this AccountWebinar.
        :type times: List[DateTimeRange]
        """
        if times is None:
            raise ValueError("Invalid value for `times`, must not be `None`")

        self._times = times

    @property
    def type(self):
        """Gets the type of this AccountWebinar.

        Specifies the webinar type

        :return: The type of this AccountWebinar.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountWebinar.

        Specifies the webinar type

        :param type: The type of this AccountWebinar.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def webinar_id(self):
        """Gets the webinar_id of this AccountWebinar.

        The 9-digit webinar ID

        :return: The webinar_id of this AccountWebinar.
        :rtype: str
        """
        return self._webinar_id

    @webinar_id.setter
    def webinar_id(self, webinar_id):
        """Sets the webinar_id of this AccountWebinar.

        The 9-digit webinar ID

        :param webinar_id: The webinar_id of this AccountWebinar.
        :type webinar_id: str
        """
        if webinar_id is None:
            raise ValueError("Invalid value for `webinar_id`, must not be `None`")

        self._webinar_id = webinar_id

    @property
    def webinar_key(self):
        """Gets the webinar_key of this AccountWebinar.

        The unique key of the webinar

        :return: The webinar_key of this AccountWebinar.
        :rtype: str
        """
        return self._webinar_key

    @webinar_key.setter
    def webinar_key(self, webinar_key):
        """Sets the webinar_key of this AccountWebinar.

        The unique key of the webinar

        :param webinar_key: The webinar_key of this AccountWebinar.
        :type webinar_key: str
        """
        if webinar_key is None:
            raise ValueError("Invalid value for `webinar_key`, must not be `None`")

        self._webinar_key = webinar_key
