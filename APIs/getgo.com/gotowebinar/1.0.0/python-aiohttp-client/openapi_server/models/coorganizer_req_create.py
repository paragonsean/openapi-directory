# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CoorganizerReqCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, external: bool=None, given_name: str=None, organizer_key: str=None):
        """CoorganizerReqCreate - a model defined in OpenAPI

        :param email: The email of this CoorganizerReqCreate.
        :param external: The external of this CoorganizerReqCreate.
        :param given_name: The given_name of this CoorganizerReqCreate.
        :param organizer_key: The organizer_key of this CoorganizerReqCreate.
        """
        self.openapi_types = {
            'email': str,
            'external': bool,
            'given_name': str,
            'organizer_key': str
        }

        self.attribute_map = {
            'email': 'email',
            'external': 'external',
            'given_name': 'givenName',
            'organizer_key': 'organizerKey'
        }

        self._email = email
        self._external = external
        self._given_name = given_name
        self._organizer_key = organizer_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoorganizerReqCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CoorganizerReqCreate of this CoorganizerReqCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this CoorganizerReqCreate.

        The co-organizer's email address. This parameter has to be passed only, if 'external' is set to 'true'

        :return: The email of this CoorganizerReqCreate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CoorganizerReqCreate.

        The co-organizer's email address. This parameter has to be passed only, if 'external' is set to 'true'

        :param email: The email of this CoorganizerReqCreate.
        :type email: str
        """

        self._email = email

    @property
    def external(self):
        """Gets the external of this CoorganizerReqCreate.

        If the co-organizer has no GoToWebinar account, this value has to be set to 'true'

        :return: The external of this CoorganizerReqCreate.
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this CoorganizerReqCreate.

        If the co-organizer has no GoToWebinar account, this value has to be set to 'true'

        :param external: The external of this CoorganizerReqCreate.
        :type external: bool
        """
        if external is None:
            raise ValueError("Invalid value for `external`, must not be `None`")

        self._external = external

    @property
    def given_name(self):
        """Gets the given_name of this CoorganizerReqCreate.

        The co-organizer's given name. This parameter has to be passed only, if 'external' is set to 'true'

        :return: The given_name of this CoorganizerReqCreate.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this CoorganizerReqCreate.

        The co-organizer's given name. This parameter has to be passed only, if 'external' is set to 'true'

        :param given_name: The given_name of this CoorganizerReqCreate.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def organizer_key(self):
        """Gets the organizer_key of this CoorganizerReqCreate.

        The co-organizer's organizer key. This parameter has to be passed only, if 'external' is set to 'false'

        :return: The organizer_key of this CoorganizerReqCreate.
        :rtype: str
        """
        return self._organizer_key

    @organizer_key.setter
    def organizer_key(self, organizer_key):
        """Sets the organizer_key of this CoorganizerReqCreate.

        The co-organizer's organizer key. This parameter has to be passed only, if 'external' is set to 'false'

        :param organizer_key: The organizer_key of this CoorganizerReqCreate.
        :type organizer_key: str
        """

        self._organizer_key = organizer_key
