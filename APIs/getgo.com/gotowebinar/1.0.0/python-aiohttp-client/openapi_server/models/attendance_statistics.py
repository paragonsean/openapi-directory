# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttendanceStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_attendance_time_seconds: float=None, average_attentiveness: float=None, average_interest_rating: float=None, percentage_attendance: float=None, registrant_count: int=None):
        """AttendanceStatistics - a model defined in OpenAPI

        :param average_attendance_time_seconds: The average_attendance_time_seconds of this AttendanceStatistics.
        :param average_attentiveness: The average_attentiveness of this AttendanceStatistics.
        :param average_interest_rating: The average_interest_rating of this AttendanceStatistics.
        :param percentage_attendance: The percentage_attendance of this AttendanceStatistics.
        :param registrant_count: The registrant_count of this AttendanceStatistics.
        """
        self.openapi_types = {
            'average_attendance_time_seconds': float,
            'average_attentiveness': float,
            'average_interest_rating': float,
            'percentage_attendance': float,
            'registrant_count': int
        }

        self.attribute_map = {
            'average_attendance_time_seconds': 'averageAttendanceTimeSeconds',
            'average_attentiveness': 'averageAttentiveness',
            'average_interest_rating': 'averageInterestRating',
            'percentage_attendance': 'percentageAttendance',
            'registrant_count': 'registrantCount'
        }

        self._average_attendance_time_seconds = average_attendance_time_seconds
        self._average_attentiveness = average_attentiveness
        self._average_interest_rating = average_interest_rating
        self._percentage_attendance = percentage_attendance
        self._registrant_count = registrant_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttendanceStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttendanceStatistics of this AttendanceStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_attendance_time_seconds(self):
        """Gets the average_attendance_time_seconds of this AttendanceStatistics.

        Average attendance time in seconds

        :return: The average_attendance_time_seconds of this AttendanceStatistics.
        :rtype: float
        """
        return self._average_attendance_time_seconds

    @average_attendance_time_seconds.setter
    def average_attendance_time_seconds(self, average_attendance_time_seconds):
        """Sets the average_attendance_time_seconds of this AttendanceStatistics.

        Average attendance time in seconds

        :param average_attendance_time_seconds: The average_attendance_time_seconds of this AttendanceStatistics.
        :type average_attendance_time_seconds: float
        """
        if average_attendance_time_seconds is None:
            raise ValueError("Invalid value for `average_attendance_time_seconds`, must not be `None`")

        self._average_attendance_time_seconds = average_attendance_time_seconds

    @property
    def average_attentiveness(self):
        """Gets the average_attentiveness of this AttendanceStatistics.

        Average based on the focus of the attendees Viewer during the webinar session

        :return: The average_attentiveness of this AttendanceStatistics.
        :rtype: float
        """
        return self._average_attentiveness

    @average_attentiveness.setter
    def average_attentiveness(self, average_attentiveness):
        """Sets the average_attentiveness of this AttendanceStatistics.

        Average based on the focus of the attendees Viewer during the webinar session

        :param average_attentiveness: The average_attentiveness of this AttendanceStatistics.
        :type average_attentiveness: float
        """
        if average_attentiveness is None:
            raise ValueError("Invalid value for `average_attentiveness`, must not be `None`")

        self._average_attentiveness = average_attentiveness

    @property
    def average_interest_rating(self):
        """Gets the average_interest_rating of this AttendanceStatistics.

        Numerical value 1-100 (100 being most interested) indicating the average interest rating of the webinar attendees

        :return: The average_interest_rating of this AttendanceStatistics.
        :rtype: float
        """
        return self._average_interest_rating

    @average_interest_rating.setter
    def average_interest_rating(self, average_interest_rating):
        """Sets the average_interest_rating of this AttendanceStatistics.

        Numerical value 1-100 (100 being most interested) indicating the average interest rating of the webinar attendees

        :param average_interest_rating: The average_interest_rating of this AttendanceStatistics.
        :type average_interest_rating: float
        """
        if average_interest_rating is None:
            raise ValueError("Invalid value for `average_interest_rating`, must not be `None`")

        self._average_interest_rating = average_interest_rating

    @property
    def percentage_attendance(self):
        """Gets the percentage_attendance of this AttendanceStatistics.

        The percentage of registrants that actually attended the webinar session

        :return: The percentage_attendance of this AttendanceStatistics.
        :rtype: float
        """
        return self._percentage_attendance

    @percentage_attendance.setter
    def percentage_attendance(self, percentage_attendance):
        """Sets the percentage_attendance of this AttendanceStatistics.

        The percentage of registrants that actually attended the webinar session

        :param percentage_attendance: The percentage_attendance of this AttendanceStatistics.
        :type percentage_attendance: float
        """
        if percentage_attendance is None:
            raise ValueError("Invalid value for `percentage_attendance`, must not be `None`")

        self._percentage_attendance = percentage_attendance

    @property
    def registrant_count(self):
        """Gets the registrant_count of this AttendanceStatistics.

        The number of registrations for the webinar

        :return: The registrant_count of this AttendanceStatistics.
        :rtype: int
        """
        return self._registrant_count

    @registrant_count.setter
    def registrant_count(self, registrant_count):
        """Sets the registrant_count of this AttendanceStatistics.

        The number of registrations for the webinar

        :param registrant_count: The registrant_count of this AttendanceStatistics.
        :type registrant_count: int
        """
        if registrant_count is None:
            raise ValueError("Invalid value for `registrant_count`, must not be `None`")

        self._registrant_count = registrant_count
