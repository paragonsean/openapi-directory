# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_webinars import AccountWebinars
from openapi_server.models.page import Page
from openapi_server import util


class AccountWebinarsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: AccountWebinars=None, page: Page=None):
        """AccountWebinarsResponse - a model defined in OpenAPI

        :param embedded: The embedded of this AccountWebinarsResponse.
        :param page: The page of this AccountWebinarsResponse.
        """
        self.openapi_types = {
            'embedded': AccountWebinars,
            'page': Page
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'page': 'page'
        }

        self._embedded = embedded
        self._page = page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountWebinarsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountWebinarsResponse of this AccountWebinarsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this AccountWebinarsResponse.


        :return: The embedded of this AccountWebinarsResponse.
        :rtype: AccountWebinars
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this AccountWebinarsResponse.


        :param embedded: The embedded of this AccountWebinarsResponse.
        :type embedded: AccountWebinars
        """
        if embedded is None:
            raise ValueError("Invalid value for `embedded`, must not be `None`")

        self._embedded = embedded

    @property
    def page(self):
        """Gets the page of this AccountWebinarsResponse.


        :return: The page of this AccountWebinarsResponse.
        :rtype: Page
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this AccountWebinarsResponse.


        :param page: The page of this AccountWebinarsResponse.
        :type page: Page
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page
