# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registration_field import RegistrationField
from openapi_server.models.registration_question import RegistrationQuestion
from openapi_server import util


class RegistrationFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[RegistrationField]=None, questions: List[RegistrationQuestion]=None):
        """RegistrationFields - a model defined in OpenAPI

        :param fields: The fields of this RegistrationFields.
        :param questions: The questions of this RegistrationFields.
        """
        self.openapi_types = {
            'fields': List[RegistrationField],
            'questions': List[RegistrationQuestion]
        }

        self.attribute_map = {
            'fields': 'fields',
            'questions': 'questions'
        }

        self._fields = fields
        self._questions = questions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationFields of this RegistrationFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this RegistrationFields.

        The default fields the organizer has selected for the webinar registration form

        :return: The fields of this RegistrationFields.
        :rtype: List[RegistrationField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this RegistrationFields.

        The default fields the organizer has selected for the webinar registration form

        :param fields: The fields of this RegistrationFields.
        :type fields: List[RegistrationField]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def questions(self):
        """Gets the questions of this RegistrationFields.

        Custom fields created by the organizer for the webinar registration form

        :return: The questions of this RegistrationFields.
        :rtype: List[RegistrationQuestion]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this RegistrationFields.

        Custom fields created by the organizer for the webinar registration form

        :param questions: The questions of this RegistrationFields.
        :type questions: List[RegistrationQuestion]
        """
        if questions is None:
            raise ValueError("Invalid value for `questions`, must not be `None`")

        self._questions = questions
