# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_webinar import AccountWebinar
from openapi_server import util


class AccountWebinars(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, webinars: List[AccountWebinar]=None):
        """AccountWebinars - a model defined in OpenAPI

        :param webinars: The webinars of this AccountWebinars.
        """
        self.openapi_types = {
            'webinars': List[AccountWebinar]
        }

        self.attribute_map = {
            'webinars': 'webinars'
        }

        self._webinars = webinars

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountWebinars':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountWebinars of this AccountWebinars.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def webinars(self):
        """Gets the webinars of this AccountWebinars.


        :return: The webinars of this AccountWebinars.
        :rtype: List[AccountWebinar]
        """
        return self._webinars

    @webinars.setter
    def webinars(self, webinars):
        """Sets the webinars of this AccountWebinars.


        :param webinars: The webinars of this AccountWebinars.
        :type webinars: List[AccountWebinar]
        """
        if webinars is None:
            raise ValueError("Invalid value for `webinars`, must not be `None`")

        self._webinars = webinars
