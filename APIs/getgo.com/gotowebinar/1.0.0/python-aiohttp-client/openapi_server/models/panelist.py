# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Panelist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, join_link: str=None, last_name: str=None, name: str=None, panelist_id: int=None):
        """Panelist - a model defined in OpenAPI

        :param email: The email of this Panelist.
        :param first_name: The first_name of this Panelist.
        :param join_link: The join_link of this Panelist.
        :param last_name: The last_name of this Panelist.
        :param name: The name of this Panelist.
        :param panelist_id: The panelist_id of this Panelist.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'join_link': str,
            'last_name': str,
            'name': str,
            'panelist_id': int
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'join_link': 'joinLink',
            'last_name': 'lastName',
            'name': 'name',
            'panelist_id': 'panelistId'
        }

        self._email = email
        self._first_name = first_name
        self._join_link = join_link
        self._last_name = last_name
        self._name = name
        self._panelist_id = panelist_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Panelist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Panelist of this Panelist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Panelist.

        The panelist's email address

        :return: The email of this Panelist.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Panelist.

        The panelist's email address

        :param email: The email of this Panelist.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Panelist.

        DEPRECATED. The fields 'firstName' and 'lastName' are replaced by the field 'name'

        :return: The first_name of this Panelist.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Panelist.

        DEPRECATED. The fields 'firstName' and 'lastName' are replaced by the field 'name'

        :param first_name: The first_name of this Panelist.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def join_link(self):
        """Gets the join_link of this Panelist.

        The co-organizer's join link

        :return: The join_link of this Panelist.
        :rtype: str
        """
        return self._join_link

    @join_link.setter
    def join_link(self, join_link):
        """Sets the join_link of this Panelist.

        The co-organizer's join link

        :param join_link: The join_link of this Panelist.
        :type join_link: str
        """
        if join_link is None:
            raise ValueError("Invalid value for `join_link`, must not be `None`")

        self._join_link = join_link

    @property
    def last_name(self):
        """Gets the last_name of this Panelist.

        DEPRECATED. The fields 'firstName' and 'lastName' are replaced by the field 'name'

        :return: The last_name of this Panelist.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Panelist.

        DEPRECATED. The fields 'firstName' and 'lastName' are replaced by the field 'name'

        :param last_name: The last_name of this Panelist.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this Panelist.

        The panelist's name

        :return: The name of this Panelist.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Panelist.

        The panelist's name

        :param name: The name of this Panelist.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def panelist_id(self):
        """Gets the panelist_id of this Panelist.

        The panelist's ID

        :return: The panelist_id of this Panelist.
        :rtype: int
        """
        return self._panelist_id

    @panelist_id.setter
    def panelist_id(self, panelist_id):
        """Sets the panelist_id of this Panelist.

        The panelist's ID

        :param panelist_id: The panelist_id of this Panelist.
        :type panelist_id: int
        """
        if panelist_id is None:
            raise ValueError("Invalid value for `panelist_id`, must not be `None`")

        self._panelist_id = panelist_id
