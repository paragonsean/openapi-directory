# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatedPanelist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, join_link: str=None, name: str=None, panelist_key: str=None):
        """CreatedPanelist - a model defined in OpenAPI

        :param email: The email of this CreatedPanelist.
        :param join_link: The join_link of this CreatedPanelist.
        :param name: The name of this CreatedPanelist.
        :param panelist_key: The panelist_key of this CreatedPanelist.
        """
        self.openapi_types = {
            'email': str,
            'join_link': str,
            'name': str,
            'panelist_key': str
        }

        self.attribute_map = {
            'email': 'email',
            'join_link': 'joinLink',
            'name': 'name',
            'panelist_key': 'panelistKey'
        }

        self._email = email
        self._join_link = join_link
        self._name = name
        self._panelist_key = panelist_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatedPanelist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatedPanelist of this CreatedPanelist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this CreatedPanelist.

        The panelist's email address

        :return: The email of this CreatedPanelist.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreatedPanelist.

        The panelist's email address

        :param email: The email of this CreatedPanelist.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def join_link(self):
        """Gets the join_link of this CreatedPanelist.

        The panelist's join link

        :return: The join_link of this CreatedPanelist.
        :rtype: str
        """
        return self._join_link

    @join_link.setter
    def join_link(self, join_link):
        """Sets the join_link of this CreatedPanelist.

        The panelist's join link

        :param join_link: The join_link of this CreatedPanelist.
        :type join_link: str
        """
        if join_link is None:
            raise ValueError("Invalid value for `join_link`, must not be `None`")

        self._join_link = join_link

    @property
    def name(self):
        """Gets the name of this CreatedPanelist.

        The panelist's name

        :return: The name of this CreatedPanelist.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatedPanelist.

        The panelist's name

        :param name: The name of this CreatedPanelist.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def panelist_key(self):
        """Gets the panelist_key of this CreatedPanelist.

        The panelist's key

        :return: The panelist_key of this CreatedPanelist.
        :rtype: str
        """
        return self._panelist_key

    @panelist_key.setter
    def panelist_key(self, panelist_key):
        """Sets the panelist_key of this CreatedPanelist.

        The panelist's key

        :param panelist_key: The panelist_key of this CreatedPanelist.
        :type panelist_key: str
        """
        if panelist_key is None:
            raise ValueError("Invalid value for `panelist_key`, must not be `None`")

        self._panelist_key = panelist_key
