# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attendance_statistics import AttendanceStatistics
from openapi_server.models.polls_and_surveys_statistics import PollsAndSurveysStatistics
from openapi_server import util


class SessionPerformance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attendance: AttendanceStatistics=None, polls_and_surveys: PollsAndSurveysStatistics=None):
        """SessionPerformance - a model defined in OpenAPI

        :param attendance: The attendance of this SessionPerformance.
        :param polls_and_surveys: The polls_and_surveys of this SessionPerformance.
        """
        self.openapi_types = {
            'attendance': AttendanceStatistics,
            'polls_and_surveys': PollsAndSurveysStatistics
        }

        self.attribute_map = {
            'attendance': 'attendance',
            'polls_and_surveys': 'pollsAndSurveys'
        }

        self._attendance = attendance
        self._polls_and_surveys = polls_and_surveys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionPerformance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionPerformance of this SessionPerformance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attendance(self):
        """Gets the attendance of this SessionPerformance.


        :return: The attendance of this SessionPerformance.
        :rtype: AttendanceStatistics
        """
        return self._attendance

    @attendance.setter
    def attendance(self, attendance):
        """Sets the attendance of this SessionPerformance.


        :param attendance: The attendance of this SessionPerformance.
        :type attendance: AttendanceStatistics
        """
        if attendance is None:
            raise ValueError("Invalid value for `attendance`, must not be `None`")

        self._attendance = attendance

    @property
    def polls_and_surveys(self):
        """Gets the polls_and_surveys of this SessionPerformance.


        :return: The polls_and_surveys of this SessionPerformance.
        :rtype: PollsAndSurveysStatistics
        """
        return self._polls_and_surveys

    @polls_and_surveys.setter
    def polls_and_surveys(self, polls_and_surveys):
        """Sets the polls_and_surveys of this SessionPerformance.


        :param polls_and_surveys: The polls_and_surveys of this SessionPerformance.
        :type polls_and_surveys: PollsAndSurveysStatistics
        """
        if polls_and_surveys is None:
            raise ValueError("Invalid value for `polls_and_surveys`, must not be `None`")

        self._polls_and_surveys = polls_and_surveys
