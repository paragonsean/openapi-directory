# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_type import AudioType
from openapi_server.models.call_numbers import CallNumbers
from openapi_server.models.private_info import PrivateInfo
from openapi_server import util


class Audio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conf_call_numbers: Dict[str, CallNumbers]=None, private_info: PrivateInfo=None, type: AudioType=None):
        """Audio - a model defined in OpenAPI

        :param conf_call_numbers: The conf_call_numbers of this Audio.
        :param private_info: The private_info of this Audio.
        :param type: The type of this Audio.
        """
        self.openapi_types = {
            'conf_call_numbers': Dict[str, CallNumbers],
            'private_info': PrivateInfo,
            'type': AudioType
        }

        self.attribute_map = {
            'conf_call_numbers': 'confCallNumbers',
            'private_info': 'privateInfo',
            'type': 'type'
        }

        self._conf_call_numbers = conf_call_numbers
        self._private_info = private_info
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Audio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Audio of this Audio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conf_call_numbers(self):
        """Gets the conf_call_numbers of this Audio.

        The conference call numbers and access codes per country. This will be returned only, if 'type' is not set to 'Private'. Example for this object: \"confCallNumbers\":{\"CA\":{\"accessCodes\":{\"attendee\":\"159-309-045\",\"organizer\":\"791-426-085\",\"panelist\":\"690-270-339\"},\"tollFree\":\"1 888 455 4198\"},\"FI\":{\"accessCodes\":{\"attendee\":\"159-309-045\",\"organizer\":\"791-426-085\",\"panelist\":\"690-270-339\"},\"toll\":\"+358 (0) 338 79 4198\"},\"US\":{\"accessCodes\":{\"attendee\":\"159-309-045\",\"organizer\":\"791-426-085\",\"panelist\":\"690-270-339\"},\"toll\":\"+1 (805) 879-4198\",\"tollFree\":\"1 888 455 4198\"}}

        :return: The conf_call_numbers of this Audio.
        :rtype: Dict[str, CallNumbers]
        """
        return self._conf_call_numbers

    @conf_call_numbers.setter
    def conf_call_numbers(self, conf_call_numbers):
        """Sets the conf_call_numbers of this Audio.

        The conference call numbers and access codes per country. This will be returned only, if 'type' is not set to 'Private'. Example for this object: \"confCallNumbers\":{\"CA\":{\"accessCodes\":{\"attendee\":\"159-309-045\",\"organizer\":\"791-426-085\",\"panelist\":\"690-270-339\"},\"tollFree\":\"1 888 455 4198\"},\"FI\":{\"accessCodes\":{\"attendee\":\"159-309-045\",\"organizer\":\"791-426-085\",\"panelist\":\"690-270-339\"},\"toll\":\"+358 (0) 338 79 4198\"},\"US\":{\"accessCodes\":{\"attendee\":\"159-309-045\",\"organizer\":\"791-426-085\",\"panelist\":\"690-270-339\"},\"toll\":\"+1 (805) 879-4198\",\"tollFree\":\"1 888 455 4198\"}}

        :param conf_call_numbers: The conf_call_numbers of this Audio.
        :type conf_call_numbers: Dict[str, CallNumbers]
        """

        self._conf_call_numbers = conf_call_numbers

    @property
    def private_info(self):
        """Gets the private_info of this Audio.


        :return: The private_info of this Audio.
        :rtype: PrivateInfo
        """
        return self._private_info

    @private_info.setter
    def private_info(self, private_info):
        """Sets the private_info of this Audio.


        :param private_info: The private_info of this Audio.
        :type private_info: PrivateInfo
        """

        self._private_info = private_info

    @property
    def type(self):
        """Gets the type of this Audio.


        :return: The type of this Audio.
        :rtype: AudioType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Audio.


        :param type: The type of this Audio.
        :type type: AudioType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
