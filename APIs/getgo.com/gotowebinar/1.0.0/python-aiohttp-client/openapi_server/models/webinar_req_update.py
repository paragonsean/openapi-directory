# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server import util


class WebinarReqUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, locale: str=None, subject: str=None, time_zone: str=None, times: List[DateTimeRange]=None):
        """WebinarReqUpdate - a model defined in OpenAPI

        :param description: The description of this WebinarReqUpdate.
        :param locale: The locale of this WebinarReqUpdate.
        :param subject: The subject of this WebinarReqUpdate.
        :param time_zone: The time_zone of this WebinarReqUpdate.
        :param times: The times of this WebinarReqUpdate.
        """
        self.openapi_types = {
            'description': str,
            'locale': str,
            'subject': str,
            'time_zone': str,
            'times': List[DateTimeRange]
        }

        self.attribute_map = {
            'description': 'description',
            'locale': 'locale',
            'subject': 'subject',
            'time_zone': 'timeZone',
            'times': 'times'
        }

        self._description = description
        self._locale = locale
        self._subject = subject
        self._time_zone = time_zone
        self._times = times

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebinarReqUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebinarReqUpdate of this WebinarReqUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this WebinarReqUpdate.

        A description of the webinar (2048 characters maximum)

        :return: The description of this WebinarReqUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebinarReqUpdate.

        A description of the webinar (2048 characters maximum)

        :param description: The description of this WebinarReqUpdate.
        :type description: str
        """

        self._description = description

    @property
    def locale(self):
        """Gets the locale of this WebinarReqUpdate.

        The webinar language

        :return: The locale of this WebinarReqUpdate.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this WebinarReqUpdate.

        The webinar language

        :param locale: The locale of this WebinarReqUpdate.
        :type locale: str
        """
        allowed_values = ["en_US", "de_DE", "es_ES", "fr_FR", "it_IT", "zh_CN"]  # noqa: E501
        if locale not in allowed_values:
            raise ValueError(
                "Invalid value for `locale` ({0}), must be one of {1}"
                .format(locale, allowed_values)
            )

        self._locale = locale

    @property
    def subject(self):
        """Gets the subject of this WebinarReqUpdate.

        The name/subject of the webinar (128 characters maximum)

        :return: The subject of this WebinarReqUpdate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this WebinarReqUpdate.

        The name/subject of the webinar (128 characters maximum)

        :param subject: The subject of this WebinarReqUpdate.
        :type subject: str
        """

        self._subject = subject

    @property
    def time_zone(self):
        """Gets the time_zone of this WebinarReqUpdate.

        The time zone where the webinar is taking place (must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones). If this parameter is not passed, the timezone of the organizer's profile will be used

        :return: The time_zone of this WebinarReqUpdate.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this WebinarReqUpdate.

        The time zone where the webinar is taking place (must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones). If this parameter is not passed, the timezone of the organizer's profile will be used

        :param time_zone: The time_zone of this WebinarReqUpdate.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def times(self):
        """Gets the times of this WebinarReqUpdate.

        Array with start and end time(s) for webinar

        :return: The times of this WebinarReqUpdate.
        :rtype: List[DateTimeRange]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this WebinarReqUpdate.

        Array with start and end time(s) for webinar

        :param times: The times of this WebinarReqUpdate.
        :type times: List[DateTimeRange]
        """

        self._times = times
