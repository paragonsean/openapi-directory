# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PollResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percentage: float=None, text: str=None):
        """PollResponse - a model defined in OpenAPI

        :param percentage: The percentage of this PollResponse.
        :param text: The text of this PollResponse.
        """
        self.openapi_types = {
            'percentage': float,
            'text': str
        }

        self.attribute_map = {
            'percentage': 'percentage',
            'text': 'text'
        }

        self._percentage = percentage
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollResponse of this PollResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage(self):
        """Gets the percentage of this PollResponse.

        The percentage of responses that favored this particular option

        :return: The percentage of this PollResponse.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this PollResponse.

        The percentage of responses that favored this particular option

        :param percentage: The percentage of this PollResponse.
        :type percentage: float
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")
        if percentage is not None and percentage > 1E+2:
            raise ValueError("Invalid value for `percentage`, must be a value less than or equal to `1E+2`")
        if percentage is not None and percentage < 0:
            raise ValueError("Invalid value for `percentage`, must be a value greater than or equal to `0`")

        self._percentage = percentage

    @property
    def text(self):
        """Gets the text of this PollResponse.

        The text of the response/option to a poll or survey

        :return: The text of this PollResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PollResponse.

        The text of the response/option to a poll or survey

        :param text: The text of this PollResponse.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
