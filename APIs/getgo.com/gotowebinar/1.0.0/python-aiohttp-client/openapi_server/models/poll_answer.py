# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PollAnswer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer: str=None, question: str=None):
        """PollAnswer - a model defined in OpenAPI

        :param answer: The answer of this PollAnswer.
        :param question: The question of this PollAnswer.
        """
        self.openapi_types = {
            'answer': str,
            'question': str
        }

        self.attribute_map = {
            'answer': 'answer',
            'question': 'question'
        }

        self._answer = answer
        self._question = question

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollAnswer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollAnswer of this PollAnswer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer(self):
        """Gets the answer of this PollAnswer.

        The answer given to the poll or survey question

        :return: The answer of this PollAnswer.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this PollAnswer.

        The answer given to the poll or survey question

        :param answer: The answer of this PollAnswer.
        :type answer: str
        """
        if answer is None:
            raise ValueError("Invalid value for `answer`, must not be `None`")

        self._answer = answer

    @property
    def question(self):
        """Gets the question of this PollAnswer.

        The poll or survey question

        :return: The question of this PollAnswer.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this PollAnswer.

        The poll or survey question

        :param question: The question of this PollAnswer.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")

        self._question = question
