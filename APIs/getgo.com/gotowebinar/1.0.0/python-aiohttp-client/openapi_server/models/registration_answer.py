# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistrationAnswer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer: str=None, answer_key: int=None):
        """RegistrationAnswer - a model defined in OpenAPI

        :param answer: The answer of this RegistrationAnswer.
        :param answer_key: The answer_key of this RegistrationAnswer.
        """
        self.openapi_types = {
            'answer': str,
            'answer_key': int
        }

        self.attribute_map = {
            'answer': 'answer',
            'answer_key': 'answerKey'
        }

        self._answer = answer
        self._answer_key = answer_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationAnswer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationAnswer of this RegistrationAnswer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer(self):
        """Gets the answer of this RegistrationAnswer.

        The answer value

        :return: The answer of this RegistrationAnswer.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this RegistrationAnswer.

        The answer value

        :param answer: The answer of this RegistrationAnswer.
        :type answer: str
        """
        if answer is None:
            raise ValueError("Invalid value for `answer`, must not be `None`")

        self._answer = answer

    @property
    def answer_key(self):
        """Gets the answer_key of this RegistrationAnswer.

        The answer key

        :return: The answer_key of this RegistrationAnswer.
        :rtype: int
        """
        return self._answer_key

    @answer_key.setter
    def answer_key(self, answer_key):
        """Sets the answer_key of this RegistrationAnswer.

        The answer key

        :param answer_key: The answer_key of this RegistrationAnswer.
        :type answer_key: int
        """
        if answer_key is None:
            raise ValueError("Invalid value for `answer_key`, must not be `None`")

        self._answer_key = answer_key
