# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.poll_response import PollResponse
from openapi_server import util


class Poll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number_of_responses: int=None, question: str=None, responses: List[PollResponse]=None):
        """Poll - a model defined in OpenAPI

        :param number_of_responses: The number_of_responses of this Poll.
        :param question: The question of this Poll.
        :param responses: The responses of this Poll.
        """
        self.openapi_types = {
            'number_of_responses': int,
            'question': str,
            'responses': List[PollResponse]
        }

        self.attribute_map = {
            'number_of_responses': 'numberOfResponses',
            'question': 'question',
            'responses': 'responses'
        }

        self._number_of_responses = number_of_responses
        self._question = question
        self._responses = responses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Poll':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Poll of this Poll.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number_of_responses(self):
        """Gets the number_of_responses of this Poll.

        The total number of responses received for this poll or survey

        :return: The number_of_responses of this Poll.
        :rtype: int
        """
        return self._number_of_responses

    @number_of_responses.setter
    def number_of_responses(self, number_of_responses):
        """Sets the number_of_responses of this Poll.

        The total number of responses received for this poll or survey

        :param number_of_responses: The number_of_responses of this Poll.
        :type number_of_responses: int
        """
        if number_of_responses is None:
            raise ValueError("Invalid value for `number_of_responses`, must not be `None`")

        self._number_of_responses = number_of_responses

    @property
    def question(self):
        """Gets the question of this Poll.

        The poll or survey question asked by the webinar organizer

        :return: The question of this Poll.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Poll.

        The poll or survey question asked by the webinar organizer

        :param question: The question of this Poll.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")

        self._question = question

    @property
    def responses(self):
        """Gets the responses of this Poll.

        The responses given by the attendees to the poll or survey

        :return: The responses of this Poll.
        :rtype: List[PollResponse]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this Poll.

        The responses given by the attendees to the poll or survey

        :param responses: The responses of this Poll.
        :type responses: List[PollResponse]
        """
        if responses is None:
            raise ValueError("Invalid value for `responses`, must not be `None`")

        self._responses = responses
