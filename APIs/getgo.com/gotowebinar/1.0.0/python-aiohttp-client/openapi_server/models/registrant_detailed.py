# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_answers import CustomAnswers
from openapi_server import util


class RegistrantDetailed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, country: str=None, email: str=None, employee_count: str=None, first_name: str=None, implementation_time_frame: str=None, industry: str=None, job_title: str=None, join_url: str=None, last_name: str=None, number_of_employees: str=None, organization: str=None, phone: str=None, purchasing_role: str=None, purchasing_time_frame: str=None, questions_and_comments: str=None, registrant_key: int=None, registration_date: datetime=None, responses: List[CustomAnswers]=None, source: str=None, state: str=None, status: str=None, time_zone: str=None, type: str=None, unsubscribed: bool=None, zip_code: str=None):
        """RegistrantDetailed - a model defined in OpenAPI

        :param address: The address of this RegistrantDetailed.
        :param city: The city of this RegistrantDetailed.
        :param country: The country of this RegistrantDetailed.
        :param email: The email of this RegistrantDetailed.
        :param employee_count: The employee_count of this RegistrantDetailed.
        :param first_name: The first_name of this RegistrantDetailed.
        :param implementation_time_frame: The implementation_time_frame of this RegistrantDetailed.
        :param industry: The industry of this RegistrantDetailed.
        :param job_title: The job_title of this RegistrantDetailed.
        :param join_url: The join_url of this RegistrantDetailed.
        :param last_name: The last_name of this RegistrantDetailed.
        :param number_of_employees: The number_of_employees of this RegistrantDetailed.
        :param organization: The organization of this RegistrantDetailed.
        :param phone: The phone of this RegistrantDetailed.
        :param purchasing_role: The purchasing_role of this RegistrantDetailed.
        :param purchasing_time_frame: The purchasing_time_frame of this RegistrantDetailed.
        :param questions_and_comments: The questions_and_comments of this RegistrantDetailed.
        :param registrant_key: The registrant_key of this RegistrantDetailed.
        :param registration_date: The registration_date of this RegistrantDetailed.
        :param responses: The responses of this RegistrantDetailed.
        :param source: The source of this RegistrantDetailed.
        :param state: The state of this RegistrantDetailed.
        :param status: The status of this RegistrantDetailed.
        :param time_zone: The time_zone of this RegistrantDetailed.
        :param type: The type of this RegistrantDetailed.
        :param unsubscribed: The unsubscribed of this RegistrantDetailed.
        :param zip_code: The zip_code of this RegistrantDetailed.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'country': str,
            'email': str,
            'employee_count': str,
            'first_name': str,
            'implementation_time_frame': str,
            'industry': str,
            'job_title': str,
            'join_url': str,
            'last_name': str,
            'number_of_employees': str,
            'organization': str,
            'phone': str,
            'purchasing_role': str,
            'purchasing_time_frame': str,
            'questions_and_comments': str,
            'registrant_key': int,
            'registration_date': datetime,
            'responses': List[CustomAnswers],
            'source': str,
            'state': str,
            'status': str,
            'time_zone': str,
            'type': str,
            'unsubscribed': bool,
            'zip_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country': 'country',
            'email': 'email',
            'employee_count': 'employeeCount',
            'first_name': 'firstName',
            'implementation_time_frame': 'implementationTimeFrame',
            'industry': 'industry',
            'job_title': 'jobTitle',
            'join_url': 'joinUrl',
            'last_name': 'lastName',
            'number_of_employees': 'numberOfEmployees',
            'organization': 'organization',
            'phone': 'phone',
            'purchasing_role': 'purchasingRole',
            'purchasing_time_frame': 'purchasingTimeFrame',
            'questions_and_comments': 'questionsAndComments',
            'registrant_key': 'registrantKey',
            'registration_date': 'registrationDate',
            'responses': 'responses',
            'source': 'source',
            'state': 'state',
            'status': 'status',
            'time_zone': 'timeZone',
            'type': 'type',
            'unsubscribed': 'unsubscribed',
            'zip_code': 'zipCode'
        }

        self._address = address
        self._city = city
        self._country = country
        self._email = email
        self._employee_count = employee_count
        self._first_name = first_name
        self._implementation_time_frame = implementation_time_frame
        self._industry = industry
        self._job_title = job_title
        self._join_url = join_url
        self._last_name = last_name
        self._number_of_employees = number_of_employees
        self._organization = organization
        self._phone = phone
        self._purchasing_role = purchasing_role
        self._purchasing_time_frame = purchasing_time_frame
        self._questions_and_comments = questions_and_comments
        self._registrant_key = registrant_key
        self._registration_date = registration_date
        self._responses = responses
        self._source = source
        self._state = state
        self._status = status
        self._time_zone = time_zone
        self._type = type
        self._unsubscribed = unsubscribed
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrantDetailed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrantDetailed of this RegistrantDetailed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this RegistrantDetailed.

        The registrant's address

        :return: The address of this RegistrantDetailed.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RegistrantDetailed.

        The registrant's address

        :param address: The address of this RegistrantDetailed.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this RegistrantDetailed.

        The registrant's city

        :return: The city of this RegistrantDetailed.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RegistrantDetailed.

        The registrant's city

        :param city: The city of this RegistrantDetailed.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this RegistrantDetailed.

        The registrant's country

        :return: The country of this RegistrantDetailed.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RegistrantDetailed.

        The registrant's country

        :param country: The country of this RegistrantDetailed.
        :type country: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this RegistrantDetailed.

        The registrant's email address

        :return: The email of this RegistrantDetailed.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegistrantDetailed.

        The registrant's email address

        :param email: The email of this RegistrantDetailed.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def employee_count(self):
        """Gets the employee_count of this RegistrantDetailed.

        The size in employees of the registrant's organization

        :return: The employee_count of this RegistrantDetailed.
        :rtype: str
        """
        return self._employee_count

    @employee_count.setter
    def employee_count(self, employee_count):
        """Sets the employee_count of this RegistrantDetailed.

        The size in employees of the registrant's organization

        :param employee_count: The employee_count of this RegistrantDetailed.
        :type employee_count: str
        """

        self._employee_count = employee_count

    @property
    def first_name(self):
        """Gets the first_name of this RegistrantDetailed.

        The registrant's first name

        :return: The first_name of this RegistrantDetailed.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RegistrantDetailed.

        The registrant's first name

        :param first_name: The first_name of this RegistrantDetailed.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def implementation_time_frame(self):
        """Gets the implementation_time_frame of this RegistrantDetailed.

        The time frame within which the product will be purchased

        :return: The implementation_time_frame of this RegistrantDetailed.
        :rtype: str
        """
        return self._implementation_time_frame

    @implementation_time_frame.setter
    def implementation_time_frame(self, implementation_time_frame):
        """Sets the implementation_time_frame of this RegistrantDetailed.

        The time frame within which the product will be purchased

        :param implementation_time_frame: The implementation_time_frame of this RegistrantDetailed.
        :type implementation_time_frame: str
        """

        self._implementation_time_frame = implementation_time_frame

    @property
    def industry(self):
        """Gets the industry of this RegistrantDetailed.

        The type of industry the registrant's organization belongs to

        :return: The industry of this RegistrantDetailed.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this RegistrantDetailed.

        The type of industry the registrant's organization belongs to

        :param industry: The industry of this RegistrantDetailed.
        :type industry: str
        """

        self._industry = industry

    @property
    def job_title(self):
        """Gets the job_title of this RegistrantDetailed.

        The registrant's job title

        :return: The job_title of this RegistrantDetailed.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this RegistrantDetailed.

        The registrant's job title

        :param job_title: The job_title of this RegistrantDetailed.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def join_url(self):
        """Gets the join_url of this RegistrantDetailed.

        The URL the registrant will use to join the webinar

        :return: The join_url of this RegistrantDetailed.
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this RegistrantDetailed.

        The URL the registrant will use to join the webinar

        :param join_url: The join_url of this RegistrantDetailed.
        :type join_url: str
        """
        if join_url is None:
            raise ValueError("Invalid value for `join_url`, must not be `None`")

        self._join_url = join_url

    @property
    def last_name(self):
        """Gets the last_name of this RegistrantDetailed.

        The registrant's last name

        :return: The last_name of this RegistrantDetailed.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RegistrantDetailed.

        The registrant's last name

        :param last_name: The last_name of this RegistrantDetailed.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this RegistrantDetailed.

        The size in employees of the registrant's organization

        :return: The number_of_employees of this RegistrantDetailed.
        :rtype: str
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this RegistrantDetailed.

        The size in employees of the registrant's organization

        :param number_of_employees: The number_of_employees of this RegistrantDetailed.
        :type number_of_employees: str
        """

        self._number_of_employees = number_of_employees

    @property
    def organization(self):
        """Gets the organization of this RegistrantDetailed.

        The registrant's organization

        :return: The organization of this RegistrantDetailed.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this RegistrantDetailed.

        The registrant's organization

        :param organization: The organization of this RegistrantDetailed.
        :type organization: str
        """

        self._organization = organization

    @property
    def phone(self):
        """Gets the phone of this RegistrantDetailed.

        The registrant's phone

        :return: The phone of this RegistrantDetailed.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this RegistrantDetailed.

        The registrant's phone

        :param phone: The phone of this RegistrantDetailed.
        :type phone: str
        """

        self._phone = phone

    @property
    def purchasing_role(self):
        """Gets the purchasing_role of this RegistrantDetailed.

        The registrant's role in purchasing the product

        :return: The purchasing_role of this RegistrantDetailed.
        :rtype: str
        """
        return self._purchasing_role

    @purchasing_role.setter
    def purchasing_role(self, purchasing_role):
        """Sets the purchasing_role of this RegistrantDetailed.

        The registrant's role in purchasing the product

        :param purchasing_role: The purchasing_role of this RegistrantDetailed.
        :type purchasing_role: str
        """

        self._purchasing_role = purchasing_role

    @property
    def purchasing_time_frame(self):
        """Gets the purchasing_time_frame of this RegistrantDetailed.

        The time frame within which the product will be purchased

        :return: The purchasing_time_frame of this RegistrantDetailed.
        :rtype: str
        """
        return self._purchasing_time_frame

    @purchasing_time_frame.setter
    def purchasing_time_frame(self, purchasing_time_frame):
        """Sets the purchasing_time_frame of this RegistrantDetailed.

        The time frame within which the product will be purchased

        :param purchasing_time_frame: The purchasing_time_frame of this RegistrantDetailed.
        :type purchasing_time_frame: str
        """

        self._purchasing_time_frame = purchasing_time_frame

    @property
    def questions_and_comments(self):
        """Gets the questions_and_comments of this RegistrantDetailed.

        Any questions or comments the registrant made at the time of registration

        :return: The questions_and_comments of this RegistrantDetailed.
        :rtype: str
        """
        return self._questions_and_comments

    @questions_and_comments.setter
    def questions_and_comments(self, questions_and_comments):
        """Sets the questions_and_comments of this RegistrantDetailed.

        Any questions or comments the registrant made at the time of registration

        :param questions_and_comments: The questions_and_comments of this RegistrantDetailed.
        :type questions_and_comments: str
        """

        self._questions_and_comments = questions_and_comments

    @property
    def registrant_key(self):
        """Gets the registrant_key of this RegistrantDetailed.

        The registrant's key

        :return: The registrant_key of this RegistrantDetailed.
        :rtype: int
        """
        return self._registrant_key

    @registrant_key.setter
    def registrant_key(self, registrant_key):
        """Sets the registrant_key of this RegistrantDetailed.

        The registrant's key

        :param registrant_key: The registrant_key of this RegistrantDetailed.
        :type registrant_key: int
        """
        if registrant_key is None:
            raise ValueError("Invalid value for `registrant_key`, must not be `None`")

        self._registrant_key = registrant_key

    @property
    def registration_date(self):
        """Gets the registration_date of this RegistrantDetailed.

        The registration date and time

        :return: The registration_date of this RegistrantDetailed.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this RegistrantDetailed.

        The registration date and time

        :param registration_date: The registration_date of this RegistrantDetailed.
        :type registration_date: datetime
        """
        if registration_date is None:
            raise ValueError("Invalid value for `registration_date`, must not be `None`")

        self._registration_date = registration_date

    @property
    def responses(self):
        """Gets the responses of this RegistrantDetailed.

        Responses to custom questions

        :return: The responses of this RegistrantDetailed.
        :rtype: List[CustomAnswers]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this RegistrantDetailed.

        Responses to custom questions

        :param responses: The responses of this RegistrantDetailed.
        :type responses: List[CustomAnswers]
        """

        self._responses = responses

    @property
    def source(self):
        """Gets the source of this RegistrantDetailed.

        The source that led to the registration. This can be any string like 'Newsletter 123' or 'Marketing campaign ABC'

        :return: The source of this RegistrantDetailed.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RegistrantDetailed.

        The source that led to the registration. This can be any string like 'Newsletter 123' or 'Marketing campaign ABC'

        :param source: The source of this RegistrantDetailed.
        :type source: str
        """

        self._source = source

    @property
    def state(self):
        """Gets the state of this RegistrantDetailed.

        The registrant's state (US only)

        :return: The state of this RegistrantDetailed.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RegistrantDetailed.

        The registrant's state (US only)

        :param state: The state of this RegistrantDetailed.
        :type state: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this RegistrantDetailed.

        The registration status

        :return: The status of this RegistrantDetailed.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RegistrantDetailed.

        The registration status

        :param status: The status of this RegistrantDetailed.
        :type status: str
        """
        allowed_values = ["APPROVED", "DENIED", "WAITING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this RegistrantDetailed.

        The time zone where the webinar will take place

        :return: The time_zone of this RegistrantDetailed.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this RegistrantDetailed.

        The time zone where the webinar will take place

        :param time_zone: The time_zone of this RegistrantDetailed.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone

    @property
    def type(self):
        """Gets the type of this RegistrantDetailed.

        The type is REGULAR for 'One session' and 'Sequence' webinars. For webinar series this parameter is not passed

        :return: The type of this RegistrantDetailed.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RegistrantDetailed.

        The type is REGULAR for 'One session' and 'Sequence' webinars. For webinar series this parameter is not passed

        :param type: The type of this RegistrantDetailed.
        :type type: str
        """
        allowed_values = ["REGULAR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unsubscribed(self):
        """Gets the unsubscribed of this RegistrantDetailed.

        Indicates whether the registrant opted-out from receiving other emails from this webinar's organizer

        :return: The unsubscribed of this RegistrantDetailed.
        :rtype: bool
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """Sets the unsubscribed of this RegistrantDetailed.

        Indicates whether the registrant opted-out from receiving other emails from this webinar's organizer

        :param unsubscribed: The unsubscribed of this RegistrantDetailed.
        :type unsubscribed: bool
        """

        self._unsubscribed = unsubscribed

    @property
    def zip_code(self):
        """Gets the zip_code of this RegistrantDetailed.

        The registrant's zip (post) code

        :return: The zip_code of this RegistrantDetailed.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this RegistrantDetailed.

        The registrant's zip (post) code

        :param zip_code: The zip_code of this RegistrantDetailed.
        :type zip_code: str
        """

        self._zip_code = zip_code
