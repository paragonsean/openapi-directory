# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attendance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, join_time: datetime=None, leave_time: datetime=None):
        """Attendance - a model defined in OpenAPI

        :param join_time: The join_time of this Attendance.
        :param leave_time: The leave_time of this Attendance.
        """
        self.openapi_types = {
            'join_time': datetime,
            'leave_time': datetime
        }

        self.attribute_map = {
            'join_time': 'joinTime',
            'leave_time': 'leaveTime'
        }

        self._join_time = join_time
        self._leave_time = leave_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attendance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attendance of this Attendance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def join_time(self):
        """Gets the join_time of this Attendance.

        The time the attendee joined a webinar session

        :return: The join_time of this Attendance.
        :rtype: datetime
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this Attendance.

        The time the attendee joined a webinar session

        :param join_time: The join_time of this Attendance.
        :type join_time: datetime
        """
        if join_time is None:
            raise ValueError("Invalid value for `join_time`, must not be `None`")

        self._join_time = join_time

    @property
    def leave_time(self):
        """Gets the leave_time of this Attendance.

        The time the attendee left a webinar session

        :return: The leave_time of this Attendance.
        :rtype: datetime
        """
        return self._leave_time

    @leave_time.setter
    def leave_time(self, leave_time):
        """Sets the leave_time of this Attendance.

        The time the attendee left a webinar session

        :param leave_time: The leave_time of this Attendance.
        :type leave_time: datetime
        """
        if leave_time is None:
            raise ValueError("Invalid value for `leave_time`, must not be `None`")

        self._leave_time = leave_time
