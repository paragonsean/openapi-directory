# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server import util


class WebinarReqCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, is_password_protected: bool=False, subject: str=None, time_zone: str=None, times: List[DateTimeRange]=None, type: str='single_session'):
        """WebinarReqCreate - a model defined in OpenAPI

        :param description: The description of this WebinarReqCreate.
        :param is_password_protected: The is_password_protected of this WebinarReqCreate.
        :param subject: The subject of this WebinarReqCreate.
        :param time_zone: The time_zone of this WebinarReqCreate.
        :param times: The times of this WebinarReqCreate.
        :param type: The type of this WebinarReqCreate.
        """
        self.openapi_types = {
            'description': str,
            'is_password_protected': bool,
            'subject': str,
            'time_zone': str,
            'times': List[DateTimeRange],
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'is_password_protected': 'isPasswordProtected',
            'subject': 'subject',
            'time_zone': 'timeZone',
            'times': 'times',
            'type': 'type'
        }

        self._description = description
        self._is_password_protected = is_password_protected
        self._subject = subject
        self._time_zone = time_zone
        self._times = times
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebinarReqCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebinarReqCreate of this WebinarReqCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this WebinarReqCreate.

        A short description of the webinar (2048 characters maximum)

        :return: The description of this WebinarReqCreate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebinarReqCreate.

        A short description of the webinar (2048 characters maximum)

        :param description: The description of this WebinarReqCreate.
        :type description: str
        """

        self._description = description

    @property
    def is_password_protected(self):
        """Gets the is_password_protected of this WebinarReqCreate.

        A boolean flag indicating if the webinar is password protected or not.

        :return: The is_password_protected of this WebinarReqCreate.
        :rtype: bool
        """
        return self._is_password_protected

    @is_password_protected.setter
    def is_password_protected(self, is_password_protected):
        """Sets the is_password_protected of this WebinarReqCreate.

        A boolean flag indicating if the webinar is password protected or not.

        :param is_password_protected: The is_password_protected of this WebinarReqCreate.
        :type is_password_protected: bool
        """

        self._is_password_protected = is_password_protected

    @property
    def subject(self):
        """Gets the subject of this WebinarReqCreate.

        The name/subject of the webinar (128 characters maximum)

        :return: The subject of this WebinarReqCreate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this WebinarReqCreate.

        The name/subject of the webinar (128 characters maximum)

        :param subject: The subject of this WebinarReqCreate.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def time_zone(self):
        """Gets the time_zone of this WebinarReqCreate.

        The time zone where the webinar is taking place (must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones). If this parameter is not passed, the timezone of the organizer's profile will be used

        :return: The time_zone of this WebinarReqCreate.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this WebinarReqCreate.

        The time zone where the webinar is taking place (must be a valid time zone ID, see https://goto-developer.logmein.com/time-zones). If this parameter is not passed, the timezone of the organizer's profile will be used

        :param time_zone: The time_zone of this WebinarReqCreate.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def times(self):
        """Gets the times of this WebinarReqCreate.

        Array with startTime and endTime for webinar. Since this call creates single session webinars, the array can only contain a single pair of startTime and endTime

        :return: The times of this WebinarReqCreate.
        :rtype: List[DateTimeRange]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this WebinarReqCreate.

        Array with startTime and endTime for webinar. Since this call creates single session webinars, the array can only contain a single pair of startTime and endTime

        :param times: The times of this WebinarReqCreate.
        :type times: List[DateTimeRange]
        """
        if times is None:
            raise ValueError("Invalid value for `times`, must not be `None`")

        self._times = times

    @property
    def type(self):
        """Gets the type of this WebinarReqCreate.

        Specifies the webinar type. The default type value is \"single_session\", which is used to create a single webinar session. The possible values are \"single_session\", \"series\", \"sequence\". If type is set to \"single_session\", a single webinar session is created. If type is set to \"series\", a webinar series is created. In this case 2 or more timeframes must be specified for each webinar. Example: \"times\": [{\"startTime\": \"...\", \"endTime\": \"...\"},{\"startTime\": \"...\", \"endTime\": \"...\"},{\"startTime\": \"...\", \"endTime\": \"...\"}. If type is set to \"sequence\" a sequence of webinars is created. The times object in the body must be replaced by the \"recurrenceStart\" object. Example: \"recurrenceStart\": {\"startTime\":\"2012-06-12T16:00:00Z\", \"endTime\": \"2012-06-12T17:00:00Z\" }.  The \"recurrenceEnd\" and \"recurrencePattern\" body parameter must be specified. Example: , \"recurrenceEnd\": \"2012-07-10\", \"recurrencePattern\": \"daily\".

        :return: The type of this WebinarReqCreate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebinarReqCreate.

        Specifies the webinar type. The default type value is \"single_session\", which is used to create a single webinar session. The possible values are \"single_session\", \"series\", \"sequence\". If type is set to \"single_session\", a single webinar session is created. If type is set to \"series\", a webinar series is created. In this case 2 or more timeframes must be specified for each webinar. Example: \"times\": [{\"startTime\": \"...\", \"endTime\": \"...\"},{\"startTime\": \"...\", \"endTime\": \"...\"},{\"startTime\": \"...\", \"endTime\": \"...\"}. If type is set to \"sequence\" a sequence of webinars is created. The times object in the body must be replaced by the \"recurrenceStart\" object. Example: \"recurrenceStart\": {\"startTime\":\"2012-06-12T16:00:00Z\", \"endTime\": \"2012-06-12T17:00:00Z\" }.  The \"recurrenceEnd\" and \"recurrencePattern\" body parameter must be specified. Example: , \"recurrenceEnd\": \"2012-07-10\", \"recurrencePattern\": \"daily\".

        :param type: The type of this WebinarReqCreate.
        :type type: str
        """

        self._type = type
