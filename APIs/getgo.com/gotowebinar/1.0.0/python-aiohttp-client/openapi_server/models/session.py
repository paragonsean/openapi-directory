# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, registrants_attended: int=None, session_key: int=None, start_time: datetime=None, webinar_id: str=None, webinar_key: int=None):
        """Session - a model defined in OpenAPI

        :param end_time: The end_time of this Session.
        :param registrants_attended: The registrants_attended of this Session.
        :param session_key: The session_key of this Session.
        :param start_time: The start_time of this Session.
        :param webinar_id: The webinar_id of this Session.
        :param webinar_key: The webinar_key of this Session.
        """
        self.openapi_types = {
            'end_time': datetime,
            'registrants_attended': int,
            'session_key': int,
            'start_time': datetime,
            'webinar_id': str,
            'webinar_key': int
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'registrants_attended': 'registrantsAttended',
            'session_key': 'sessionKey',
            'start_time': 'startTime',
            'webinar_id': 'webinarID',
            'webinar_key': 'webinarKey'
        }

        self._end_time = end_time
        self._registrants_attended = registrants_attended
        self._session_key = session_key
        self._start_time = start_time
        self._webinar_id = webinar_id
        self._webinar_key = webinar_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this Session.

        The ending time of the webinar session

        :return: The end_time of this Session.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Session.

        The ending time of the webinar session

        :param end_time: The end_time of this Session.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def registrants_attended(self):
        """Gets the registrants_attended of this Session.

        The number of registrants who attended the webinar session

        :return: The registrants_attended of this Session.
        :rtype: int
        """
        return self._registrants_attended

    @registrants_attended.setter
    def registrants_attended(self, registrants_attended):
        """Sets the registrants_attended of this Session.

        The number of registrants who attended the webinar session

        :param registrants_attended: The registrants_attended of this Session.
        :type registrants_attended: int
        """
        if registrants_attended is None:
            raise ValueError("Invalid value for `registrants_attended`, must not be `None`")

        self._registrants_attended = registrants_attended

    @property
    def session_key(self):
        """Gets the session_key of this Session.

        The unique key of the webinar session

        :return: The session_key of this Session.
        :rtype: int
        """
        return self._session_key

    @session_key.setter
    def session_key(self, session_key):
        """Sets the session_key of this Session.

        The unique key of the webinar session

        :param session_key: The session_key of this Session.
        :type session_key: int
        """
        if session_key is None:
            raise ValueError("Invalid value for `session_key`, must not be `None`")

        self._session_key = session_key

    @property
    def start_time(self):
        """Gets the start_time of this Session.

        The starting time of the webinar session

        :return: The start_time of this Session.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Session.

        The starting time of the webinar session

        :param start_time: The start_time of this Session.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def webinar_id(self):
        """Gets the webinar_id of this Session.

        The 9-digit webinar ID

        :return: The webinar_id of this Session.
        :rtype: str
        """
        return self._webinar_id

    @webinar_id.setter
    def webinar_id(self, webinar_id):
        """Sets the webinar_id of this Session.

        The 9-digit webinar ID

        :param webinar_id: The webinar_id of this Session.
        :type webinar_id: str
        """
        if webinar_id is None:
            raise ValueError("Invalid value for `webinar_id`, must not be `None`")

        self._webinar_id = webinar_id

    @property
    def webinar_key(self):
        """Gets the webinar_key of this Session.

        The unique key of the webinar

        :return: The webinar_key of this Session.
        :rtype: int
        """
        return self._webinar_key

    @webinar_key.setter
    def webinar_key(self, webinar_key):
        """Sets the webinar_key of this Session.

        The unique key of the webinar

        :param webinar_key: The webinar_key of this Session.
        :type webinar_key: int
        """
        if webinar_key is None:
            raise ValueError("Invalid value for `webinar_key`, must not be `None`")

        self._webinar_key = webinar_key
