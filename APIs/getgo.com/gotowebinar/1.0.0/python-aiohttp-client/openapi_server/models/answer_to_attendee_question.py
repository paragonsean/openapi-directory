# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnswerToAttendeeQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer: str=None, answered_by: str=None):
        """AnswerToAttendeeQuestion - a model defined in OpenAPI

        :param answer: The answer of this AnswerToAttendeeQuestion.
        :param answered_by: The answered_by of this AnswerToAttendeeQuestion.
        """
        self.openapi_types = {
            'answer': str,
            'answered_by': str
        }

        self.attribute_map = {
            'answer': 'answer',
            'answered_by': 'answeredBy'
        }

        self._answer = answer
        self._answered_by = answered_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnswerToAttendeeQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnswerToAttendeeQuestion of this AnswerToAttendeeQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer(self):
        """Gets the answer of this AnswerToAttendeeQuestion.

        An answer given to a question asked by an attendee during a webinar session

        :return: The answer of this AnswerToAttendeeQuestion.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this AnswerToAttendeeQuestion.

        An answer given to a question asked by an attendee during a webinar session

        :param answer: The answer of this AnswerToAttendeeQuestion.
        :type answer: str
        """
        if answer is None:
            raise ValueError("Invalid value for `answer`, must not be `None`")

        self._answer = answer

    @property
    def answered_by(self):
        """Gets the answered_by of this AnswerToAttendeeQuestion.

        The key of the organizer that answered the attendee's question

        :return: The answered_by of this AnswerToAttendeeQuestion.
        :rtype: str
        """
        return self._answered_by

    @answered_by.setter
    def answered_by(self, answered_by):
        """Sets the answered_by of this AnswerToAttendeeQuestion.

        The key of the organizer that answered the attendee's question

        :param answered_by: The answered_by of this AnswerToAttendeeQuestion.
        :type answered_by: str
        """
        if answered_by is None:
            raise ValueError("Invalid value for `answered_by`, must not be `None`")

        self._answered_by = answered_by
