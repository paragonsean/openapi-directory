# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessCodes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attendee: str=None, organizer: str=None, panelist: str=None):
        """AccessCodes - a model defined in OpenAPI

        :param attendee: The attendee of this AccessCodes.
        :param organizer: The organizer of this AccessCodes.
        :param panelist: The panelist of this AccessCodes.
        """
        self.openapi_types = {
            'attendee': str,
            'organizer': str,
            'panelist': str
        }

        self.attribute_map = {
            'attendee': 'attendee',
            'organizer': 'organizer',
            'panelist': 'panelist'
        }

        self._attendee = attendee
        self._organizer = organizer
        self._panelist = panelist

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessCodes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessCodes of this AccessCodes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attendee(self):
        """Gets the attendee of this AccessCodes.

        Access code for attendees

        :return: The attendee of this AccessCodes.
        :rtype: str
        """
        return self._attendee

    @attendee.setter
    def attendee(self, attendee):
        """Sets the attendee of this AccessCodes.

        Access code for attendees

        :param attendee: The attendee of this AccessCodes.
        :type attendee: str
        """
        if attendee is None:
            raise ValueError("Invalid value for `attendee`, must not be `None`")

        self._attendee = attendee

    @property
    def organizer(self):
        """Gets the organizer of this AccessCodes.

        Access code for the organizer

        :return: The organizer of this AccessCodes.
        :rtype: str
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """Sets the organizer of this AccessCodes.

        Access code for the organizer

        :param organizer: The organizer of this AccessCodes.
        :type organizer: str
        """
        if organizer is None:
            raise ValueError("Invalid value for `organizer`, must not be `None`")

        self._organizer = organizer

    @property
    def panelist(self):
        """Gets the panelist of this AccessCodes.

        Access code for panelists

        :return: The panelist of this AccessCodes.
        :rtype: str
        """
        return self._panelist

    @panelist.setter
    def panelist(self, panelist):
        """Sets the panelist of this AccessCodes.

        Access code for panelists

        :param panelist: The panelist of this AccessCodes.
        :type panelist: str
        """
        if panelist is None:
            raise ValueError("Invalid value for `panelist`, must not be `None`")

        self._panelist = panelist
