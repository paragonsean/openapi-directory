# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PollsAndSurveysStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percentage_polls_completed: float=None, percentage_surveys_completed: float=None, poll_count: int=None, questions_asked: int=None, survey_count: float=None):
        """PollsAndSurveysStatistics - a model defined in OpenAPI

        :param percentage_polls_completed: The percentage_polls_completed of this PollsAndSurveysStatistics.
        :param percentage_surveys_completed: The percentage_surveys_completed of this PollsAndSurveysStatistics.
        :param poll_count: The poll_count of this PollsAndSurveysStatistics.
        :param questions_asked: The questions_asked of this PollsAndSurveysStatistics.
        :param survey_count: The survey_count of this PollsAndSurveysStatistics.
        """
        self.openapi_types = {
            'percentage_polls_completed': float,
            'percentage_surveys_completed': float,
            'poll_count': int,
            'questions_asked': int,
            'survey_count': float
        }

        self.attribute_map = {
            'percentage_polls_completed': 'percentagePollsCompleted',
            'percentage_surveys_completed': 'percentageSurveysCompleted',
            'poll_count': 'pollCount',
            'questions_asked': 'questionsAsked',
            'survey_count': 'surveyCount'
        }

        self._percentage_polls_completed = percentage_polls_completed
        self._percentage_surveys_completed = percentage_surveys_completed
        self._poll_count = poll_count
        self._questions_asked = questions_asked
        self._survey_count = survey_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollsAndSurveysStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollsAndSurveysStatistics of this PollsAndSurveysStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage_polls_completed(self):
        """Gets the percentage_polls_completed of this PollsAndSurveysStatistics.

        The percentage of polls completed by the attendees

        :return: The percentage_polls_completed of this PollsAndSurveysStatistics.
        :rtype: float
        """
        return self._percentage_polls_completed

    @percentage_polls_completed.setter
    def percentage_polls_completed(self, percentage_polls_completed):
        """Sets the percentage_polls_completed of this PollsAndSurveysStatistics.

        The percentage of polls completed by the attendees

        :param percentage_polls_completed: The percentage_polls_completed of this PollsAndSurveysStatistics.
        :type percentage_polls_completed: float
        """
        if percentage_polls_completed is None:
            raise ValueError("Invalid value for `percentage_polls_completed`, must not be `None`")

        self._percentage_polls_completed = percentage_polls_completed

    @property
    def percentage_surveys_completed(self):
        """Gets the percentage_surveys_completed of this PollsAndSurveysStatistics.

        The percentage of surveys completed by the attendees

        :return: The percentage_surveys_completed of this PollsAndSurveysStatistics.
        :rtype: float
        """
        return self._percentage_surveys_completed

    @percentage_surveys_completed.setter
    def percentage_surveys_completed(self, percentage_surveys_completed):
        """Sets the percentage_surveys_completed of this PollsAndSurveysStatistics.

        The percentage of surveys completed by the attendees

        :param percentage_surveys_completed: The percentage_surveys_completed of this PollsAndSurveysStatistics.
        :type percentage_surveys_completed: float
        """
        if percentage_surveys_completed is None:
            raise ValueError("Invalid value for `percentage_surveys_completed`, must not be `None`")

        self._percentage_surveys_completed = percentage_surveys_completed

    @property
    def poll_count(self):
        """Gets the poll_count of this PollsAndSurveysStatistics.

        The number of polls launched at a webinar session

        :return: The poll_count of this PollsAndSurveysStatistics.
        :rtype: int
        """
        return self._poll_count

    @poll_count.setter
    def poll_count(self, poll_count):
        """Sets the poll_count of this PollsAndSurveysStatistics.

        The number of polls launched at a webinar session

        :param poll_count: The poll_count of this PollsAndSurveysStatistics.
        :type poll_count: int
        """
        if poll_count is None:
            raise ValueError("Invalid value for `poll_count`, must not be `None`")

        self._poll_count = poll_count

    @property
    def questions_asked(self):
        """Gets the questions_asked of this PollsAndSurveysStatistics.

        The number of questions asked at a webinar session

        :return: The questions_asked of this PollsAndSurveysStatistics.
        :rtype: int
        """
        return self._questions_asked

    @questions_asked.setter
    def questions_asked(self, questions_asked):
        """Sets the questions_asked of this PollsAndSurveysStatistics.

        The number of questions asked at a webinar session

        :param questions_asked: The questions_asked of this PollsAndSurveysStatistics.
        :type questions_asked: int
        """
        if questions_asked is None:
            raise ValueError("Invalid value for `questions_asked`, must not be `None`")

        self._questions_asked = questions_asked

    @property
    def survey_count(self):
        """Gets the survey_count of this PollsAndSurveysStatistics.

        The percentage of surveys launched at a webinar session

        :return: The survey_count of this PollsAndSurveysStatistics.
        :rtype: float
        """
        return self._survey_count

    @survey_count.setter
    def survey_count(self, survey_count):
        """Sets the survey_count of this PollsAndSurveysStatistics.

        The percentage of surveys launched at a webinar session

        :param survey_count: The survey_count of this PollsAndSurveysStatistics.
        :type survey_count: float
        """
        if survey_count is None:
            raise ValueError("Invalid value for `survey_count`, must not be `None`")

        self._survey_count = survey_count
