# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Registrant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, join_url: str=None, last_name: str=None, registrant_key: int=None, registration_date: datetime=None, status: str=None, time_zone: str=None):
        """Registrant - a model defined in OpenAPI

        :param email: The email of this Registrant.
        :param first_name: The first_name of this Registrant.
        :param join_url: The join_url of this Registrant.
        :param last_name: The last_name of this Registrant.
        :param registrant_key: The registrant_key of this Registrant.
        :param registration_date: The registration_date of this Registrant.
        :param status: The status of this Registrant.
        :param time_zone: The time_zone of this Registrant.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'join_url': str,
            'last_name': str,
            'registrant_key': int,
            'registration_date': datetime,
            'status': str,
            'time_zone': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'join_url': 'joinUrl',
            'last_name': 'lastName',
            'registrant_key': 'registrantKey',
            'registration_date': 'registrationDate',
            'status': 'status',
            'time_zone': 'timeZone'
        }

        self._email = email
        self._first_name = first_name
        self._join_url = join_url
        self._last_name = last_name
        self._registrant_key = registrant_key
        self._registration_date = registration_date
        self._status = status
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Registrant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Registrant of this Registrant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Registrant.

        The registrant's email address

        :return: The email of this Registrant.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Registrant.

        The registrant's email address

        :param email: The email of this Registrant.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Registrant.

        The registrant's first name

        :return: The first_name of this Registrant.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Registrant.

        The registrant's first name

        :param first_name: The first_name of this Registrant.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def join_url(self):
        """Gets the join_url of this Registrant.

        The URL the registrant will use to join the webinar

        :return: The join_url of this Registrant.
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this Registrant.

        The URL the registrant will use to join the webinar

        :param join_url: The join_url of this Registrant.
        :type join_url: str
        """
        if join_url is None:
            raise ValueError("Invalid value for `join_url`, must not be `None`")

        self._join_url = join_url

    @property
    def last_name(self):
        """Gets the last_name of this Registrant.

        The registrant's last name

        :return: The last_name of this Registrant.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Registrant.

        The registrant's last name

        :param last_name: The last_name of this Registrant.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def registrant_key(self):
        """Gets the registrant_key of this Registrant.

        The registrant's key

        :return: The registrant_key of this Registrant.
        :rtype: int
        """
        return self._registrant_key

    @registrant_key.setter
    def registrant_key(self, registrant_key):
        """Sets the registrant_key of this Registrant.

        The registrant's key

        :param registrant_key: The registrant_key of this Registrant.
        :type registrant_key: int
        """
        if registrant_key is None:
            raise ValueError("Invalid value for `registrant_key`, must not be `None`")

        self._registrant_key = registrant_key

    @property
    def registration_date(self):
        """Gets the registration_date of this Registrant.

        The registration date and time

        :return: The registration_date of this Registrant.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this Registrant.

        The registration date and time

        :param registration_date: The registration_date of this Registrant.
        :type registration_date: datetime
        """
        if registration_date is None:
            raise ValueError("Invalid value for `registration_date`, must not be `None`")

        self._registration_date = registration_date

    @property
    def status(self):
        """Gets the status of this Registrant.

        The registration status

        :return: The status of this Registrant.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Registrant.

        The registration status

        :param status: The status of this Registrant.
        :type status: str
        """
        allowed_values = ["APPROVED", "DENIED", "WAITING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this Registrant.

        The time zone where the webinar will take place

        :return: The time_zone of this Registrant.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Registrant.

        The time zone where the webinar will take place

        :param time_zone: The time_zone of this Registrant.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone
