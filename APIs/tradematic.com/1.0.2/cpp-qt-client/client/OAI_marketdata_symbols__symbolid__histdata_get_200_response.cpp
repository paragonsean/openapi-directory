/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_marketdata_symbols__symbolid__histdata_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_marketdata_symbols__symbolid__histdata_get_200_response::OAI_marketdata_symbols__symbolid__histdata_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_marketdata_symbols__symbolid__histdata_get_200_response::OAI_marketdata_symbols__symbolid__histdata_get_200_response() {
    this->initializeModel();
}

OAI_marketdata_symbols__symbolid__histdata_get_200_response::~OAI_marketdata_symbols__symbolid__histdata_get_200_response() {}

void OAI_marketdata_symbols__symbolid__histdata_get_200_response::initializeModel() {

    m_adjusted_isSet = false;
    m_adjusted_isValid = false;

    m_query_count_isSet = false;
    m_query_count_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_results_count_isSet = false;
    m_results_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;
}

void OAI_marketdata_symbols__symbolid__histdata_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_marketdata_symbols__symbolid__histdata_get_200_response::fromJsonObject(QJsonObject json) {

    m_adjusted_isValid = ::OpenAPI::fromJsonValue(m_adjusted, json[QString("adjusted")]);
    m_adjusted_isSet = !json[QString("adjusted")].isNull() && m_adjusted_isValid;

    m_query_count_isValid = ::OpenAPI::fromJsonValue(m_query_count, json[QString("queryCount")]);
    m_query_count_isSet = !json[QString("queryCount")].isNull() && m_query_count_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_results_count_isValid = ::OpenAPI::fromJsonValue(m_results_count, json[QString("resultsCount")]);
    m_results_count_isSet = !json[QString("resultsCount")].isNull() && m_results_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(m_ticker, json[QString("ticker")]);
    m_ticker_isSet = !json[QString("ticker")].isNull() && m_ticker_isValid;
}

QString OAI_marketdata_symbols__symbolid__histdata_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_marketdata_symbols__symbolid__histdata_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_adjusted_isSet) {
        obj.insert(QString("adjusted"), ::OpenAPI::toJsonValue(m_adjusted));
    }
    if (m_query_count_isSet) {
        obj.insert(QString("queryCount"), ::OpenAPI::toJsonValue(m_query_count));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_results_count_isSet) {
        obj.insert(QString("resultsCount"), ::OpenAPI::toJsonValue(m_results_count));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("ticker"), ::OpenAPI::toJsonValue(m_ticker));
    }
    return obj;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::isAdjusted() const {
    return m_adjusted;
}
void OAI_marketdata_symbols__symbolid__histdata_get_200_response::setAdjusted(const bool &adjusted) {
    m_adjusted = adjusted;
    m_adjusted_isSet = true;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_adjusted_Set() const{
    return m_adjusted_isSet;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_adjusted_Valid() const{
    return m_adjusted_isValid;
}

qint32 OAI_marketdata_symbols__symbolid__histdata_get_200_response::getQueryCount() const {
    return m_query_count;
}
void OAI_marketdata_symbols__symbolid__histdata_get_200_response::setQueryCount(const qint32 &query_count) {
    m_query_count = query_count;
    m_query_count_isSet = true;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_query_count_Set() const{
    return m_query_count_isSet;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_query_count_Valid() const{
    return m_query_count_isValid;
}

QList<OAIResult> OAI_marketdata_symbols__symbolid__histdata_get_200_response::getResults() const {
    return m_results;
}
void OAI_marketdata_symbols__symbolid__histdata_get_200_response::setResults(const QList<OAIResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_results_Valid() const{
    return m_results_isValid;
}

qint32 OAI_marketdata_symbols__symbolid__histdata_get_200_response::getResultsCount() const {
    return m_results_count;
}
void OAI_marketdata_symbols__symbolid__histdata_get_200_response::setResultsCount(const qint32 &results_count) {
    m_results_count = results_count;
    m_results_count_isSet = true;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_results_count_Set() const{
    return m_results_count_isSet;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_results_count_Valid() const{
    return m_results_count_isValid;
}

QString OAI_marketdata_symbols__symbolid__histdata_get_200_response::getStatus() const {
    return m_status;
}
void OAI_marketdata_symbols__symbolid__histdata_get_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QString OAI_marketdata_symbols__symbolid__histdata_get_200_response::getTicker() const {
    return m_ticker;
}
void OAI_marketdata_symbols__symbolid__histdata_get_200_response::setTicker(const QString &ticker) {
    m_ticker = ticker;
    m_ticker_isSet = true;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::is_ticker_Valid() const{
    return m_ticker_isValid;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjusted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_marketdata_symbols__symbolid__histdata_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
