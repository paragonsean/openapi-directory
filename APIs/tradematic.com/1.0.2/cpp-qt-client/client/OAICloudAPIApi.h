/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICloudAPIApi_H
#define OAI_OAICloudAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAICloudStrategy.h"
#include "OAICommand.h"
#include "OAIConnection.h"
#include "OAIConnector.h"
#include "OAIError.h"
#include "OAIOrder.h"
#include "OAISession.h"
#include "OAISnapshot.h"
#include "OAITrade.h"
#include "OAI_cloud_accounts__accountid__closeall_post_202_response.h"
#include "OAI_cloud_accounts__accountid__orders_post_request.h"
#include "OAI_cloud_connections_post_200_response.h"
#include "OAI_cloud_connections_post_request.h"
#include "OAI_cloud_strategies_start_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICloudAPIApi : public QObject {
    Q_OBJECT

public:
    OAICloudAPIApi(const int timeOut = 0);
    ~OAICloudAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accountid qint64 [required]
    */
    virtual void cloudAccountsAccountidCloseallPost(const qint64 &accountid);

    /**
    * @param[in]  accountid qint64 [required]
    */
    virtual void cloudAccountsAccountidGet(const qint64 &accountid);

    /**
    * @param[in]  accountid qint64 [required]
    */
    virtual void cloudAccountsAccountidOrdersGet(const qint64 &accountid);

    /**
    * @param[in]  accountid qint64 [required]
    * @param[in]  orderid qint64 [required]
    */
    virtual void cloudAccountsAccountidOrdersOrderidDelete(const qint64 &accountid, const qint64 &orderid);

    /**
    * @param[in]  accountid qint64 [required]
    * @param[in]  body OAI_cloud_accounts__accountid__orders_post_request [required]
    */
    virtual void cloudAccountsAccountidOrdersPost(const qint64 &accountid, const OAI_cloud_accounts__accountid__orders_post_request &body);

    /**
    * @param[in]  accountid qint64 [required]
    */
    virtual void cloudAccountsAccountidSnapshotsGet(const qint64 &accountid);

    /**
    * @param[in]  accountid qint64 [required]
    */
    virtual void cloudAccountsAccountidSyncPost(const qint64 &accountid);

    /**
    * @param[in]  accountid qint64 [required]
    */
    virtual void cloudAccountsAccountidTradesGet(const qint64 &accountid);


    virtual void cloudAccountsGet();

    /**
    * @param[in]  commandid qint64 [required]
    */
    virtual void cloudCommandsCommandidGet(const qint64 &commandid);


    virtual void cloudCommandsGet();

    /**
    * @param[in]  connectionid qint64 [required]
    */
    virtual void cloudConnectionsConnectionidDelete(const qint64 &connectionid);

    /**
    * @param[in]  connectionid qint64 [required]
    */
    virtual void cloudConnectionsConnectionidGet(const qint64 &connectionid);

    /**
    * @param[in]  connectionid qint64 [required]
    * @param[in]  body OAI_cloud_connections_post_request [required]
    */
    virtual void cloudConnectionsConnectionidPut(const qint64 &connectionid, const OAI_cloud_connections_post_request &body);


    virtual void cloudConnectionsGet();

    /**
    * @param[in]  body OAI_cloud_connections_post_request [required]
    */
    virtual void cloudConnectionsPost(const OAI_cloud_connections_post_request &body);

    /**
    * @param[in]  connectorid qint64 [required]
    */
    virtual void cloudConnectorsConnectoridGet(const qint64 &connectorid);


    virtual void cloudConnectorsGet();


    virtual void cloudSessionsGet();

    /**
    * @param[in]  sessionid qint64 [required]
    */
    virtual void cloudSessionsSessionidGet(const qint64 &sessionid);


    virtual void cloudStrategiesGet();

    /**
    * @param[in]  body OAI_cloud_strategies_start_post_request [required]
    */
    virtual void cloudStrategiesStartPost(const OAI_cloud_strategies_start_post_request &body);

    /**
    * @param[in]  strategyid qint64 [required]
    */
    virtual void cloudStrategiesStrategyidGet(const qint64 &strategyid);

    /**
    * @param[in]  strategyid qint64 [required]
    */
    virtual void cloudStrategiesStrategyidStopPost(const qint64 &strategyid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cloudAccountsAccountidCloseallPostCallback(OAIHttpRequestWorker *worker);
    void cloudAccountsAccountidGetCallback(OAIHttpRequestWorker *worker);
    void cloudAccountsAccountidOrdersGetCallback(OAIHttpRequestWorker *worker);
    void cloudAccountsAccountidOrdersOrderidDeleteCallback(OAIHttpRequestWorker *worker);
    void cloudAccountsAccountidOrdersPostCallback(OAIHttpRequestWorker *worker);
    void cloudAccountsAccountidSnapshotsGetCallback(OAIHttpRequestWorker *worker);
    void cloudAccountsAccountidSyncPostCallback(OAIHttpRequestWorker *worker);
    void cloudAccountsAccountidTradesGetCallback(OAIHttpRequestWorker *worker);
    void cloudAccountsGetCallback(OAIHttpRequestWorker *worker);
    void cloudCommandsCommandidGetCallback(OAIHttpRequestWorker *worker);
    void cloudCommandsGetCallback(OAIHttpRequestWorker *worker);
    void cloudConnectionsConnectionidDeleteCallback(OAIHttpRequestWorker *worker);
    void cloudConnectionsConnectionidGetCallback(OAIHttpRequestWorker *worker);
    void cloudConnectionsConnectionidPutCallback(OAIHttpRequestWorker *worker);
    void cloudConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void cloudConnectionsPostCallback(OAIHttpRequestWorker *worker);
    void cloudConnectorsConnectoridGetCallback(OAIHttpRequestWorker *worker);
    void cloudConnectorsGetCallback(OAIHttpRequestWorker *worker);
    void cloudSessionsGetCallback(OAIHttpRequestWorker *worker);
    void cloudSessionsSessionidGetCallback(OAIHttpRequestWorker *worker);
    void cloudStrategiesGetCallback(OAIHttpRequestWorker *worker);
    void cloudStrategiesStartPostCallback(OAIHttpRequestWorker *worker);
    void cloudStrategiesStrategyidGetCallback(OAIHttpRequestWorker *worker);
    void cloudStrategiesStrategyidStopPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cloudAccountsAccountidCloseallPostSignal(OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudAccountsAccountidGetSignal(OAIAccount summary);
    void cloudAccountsAccountidOrdersGetSignal(QList<OAIOrder> summary);
    void cloudAccountsAccountidOrdersOrderidDeleteSignal(OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudAccountsAccountidOrdersPostSignal(OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudAccountsAccountidSnapshotsGetSignal(QList<OAISnapshot> summary);
    void cloudAccountsAccountidSyncPostSignal(OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudAccountsAccountidTradesGetSignal(QList<OAITrade> summary);
    void cloudAccountsGetSignal(QList<OAIAccount> summary);
    void cloudCommandsCommandidGetSignal(OAICommand summary);
    void cloudCommandsGetSignal(QList<OAICommand> summary);
    void cloudConnectionsConnectionidDeleteSignal(OAI_cloud_connections_post_200_response summary);
    void cloudConnectionsConnectionidGetSignal(OAIConnection summary);
    void cloudConnectionsConnectionidPutSignal(OAI_cloud_connections_post_200_response summary);
    void cloudConnectionsGetSignal(QList<OAIConnection> summary);
    void cloudConnectionsPostSignal(OAI_cloud_connections_post_200_response summary);
    void cloudConnectorsConnectoridGetSignal(OAIConnector summary);
    void cloudConnectorsGetSignal(QList<OAIConnector> summary);
    void cloudSessionsGetSignal(QList<OAISession> summary);
    void cloudSessionsSessionidGetSignal(OAISession summary);
    void cloudStrategiesGetSignal(QList<OAICloudStrategy> summary);
    void cloudStrategiesStartPostSignal(OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudStrategiesStrategyidGetSignal(QList<OAICloudStrategy> summary);
    void cloudStrategiesStrategyidStopPostSignal(OAI_cloud_accounts__accountid__closeall_post_202_response summary);


    void cloudAccountsAccountidCloseallPostSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudAccountsAccountidGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void cloudAccountsAccountidOrdersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrder> summary);
    void cloudAccountsAccountidOrdersOrderidDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudAccountsAccountidOrdersPostSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudAccountsAccountidSnapshotsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISnapshot> summary);
    void cloudAccountsAccountidSyncPostSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudAccountsAccountidTradesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITrade> summary);
    void cloudAccountsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void cloudCommandsCommandidGetSignalFull(OAIHttpRequestWorker *worker, OAICommand summary);
    void cloudCommandsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICommand> summary);
    void cloudConnectionsConnectionidDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_connections_post_200_response summary);
    void cloudConnectionsConnectionidGetSignalFull(OAIHttpRequestWorker *worker, OAIConnection summary);
    void cloudConnectionsConnectionidPutSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_connections_post_200_response summary);
    void cloudConnectionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIConnection> summary);
    void cloudConnectionsPostSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_connections_post_200_response summary);
    void cloudConnectorsConnectoridGetSignalFull(OAIHttpRequestWorker *worker, OAIConnector summary);
    void cloudConnectorsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIConnector> summary);
    void cloudSessionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISession> summary);
    void cloudSessionsSessionidGetSignalFull(OAIHttpRequestWorker *worker, OAISession summary);
    void cloudStrategiesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICloudStrategy> summary);
    void cloudStrategiesStartPostSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_accounts__accountid__closeall_post_202_response summary);
    void cloudStrategiesStrategyidGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICloudStrategy> summary);
    void cloudStrategiesStrategyidStopPostSignalFull(OAIHttpRequestWorker *worker, OAI_cloud_accounts__accountid__closeall_post_202_response summary);

    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidCloseallPostSignalError() instead")
    void cloudAccountsAccountidCloseallPostSignalE(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidCloseallPostSignalError(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidGetSignalError() instead")
    void cloudAccountsAccountidGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidOrdersGetSignalError() instead")
    void cloudAccountsAccountidOrdersGetSignalE(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidOrdersGetSignalError(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidOrdersOrderidDeleteSignalError() instead")
    void cloudAccountsAccountidOrdersOrderidDeleteSignalE(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidOrdersOrderidDeleteSignalError(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidOrdersPostSignalError() instead")
    void cloudAccountsAccountidOrdersPostSignalE(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidOrdersPostSignalError(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidSnapshotsGetSignalError() instead")
    void cloudAccountsAccountidSnapshotsGetSignalE(QList<OAISnapshot> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidSnapshotsGetSignalError(QList<OAISnapshot> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidSyncPostSignalError() instead")
    void cloudAccountsAccountidSyncPostSignalE(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidSyncPostSignalError(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidTradesGetSignalError() instead")
    void cloudAccountsAccountidTradesGetSignalE(QList<OAITrade> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidTradesGetSignalError(QList<OAITrade> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsGetSignalError() instead")
    void cloudAccountsGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudCommandsCommandidGetSignalError() instead")
    void cloudCommandsCommandidGetSignalE(OAICommand summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudCommandsCommandidGetSignalError(OAICommand summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudCommandsGetSignalError() instead")
    void cloudCommandsGetSignalE(QList<OAICommand> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudCommandsGetSignalError(QList<OAICommand> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsConnectionidDeleteSignalError() instead")
    void cloudConnectionsConnectionidDeleteSignalE(OAI_cloud_connections_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsConnectionidDeleteSignalError(OAI_cloud_connections_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsConnectionidGetSignalError() instead")
    void cloudConnectionsConnectionidGetSignalE(OAIConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsConnectionidGetSignalError(OAIConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsConnectionidPutSignalError() instead")
    void cloudConnectionsConnectionidPutSignalE(OAI_cloud_connections_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsConnectionidPutSignalError(OAI_cloud_connections_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsGetSignalError() instead")
    void cloudConnectionsGetSignalE(QList<OAIConnection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsGetSignalError(QList<OAIConnection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsPostSignalError() instead")
    void cloudConnectionsPostSignalE(OAI_cloud_connections_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsPostSignalError(OAI_cloud_connections_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectorsConnectoridGetSignalError() instead")
    void cloudConnectorsConnectoridGetSignalE(OAIConnector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectorsConnectoridGetSignalError(OAIConnector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectorsGetSignalError() instead")
    void cloudConnectorsGetSignalE(QList<OAIConnector> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectorsGetSignalError(QList<OAIConnector> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudSessionsGetSignalError() instead")
    void cloudSessionsGetSignalE(QList<OAISession> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudSessionsGetSignalError(QList<OAISession> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudSessionsSessionidGetSignalError() instead")
    void cloudSessionsSessionidGetSignalE(OAISession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudSessionsSessionidGetSignalError(OAISession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudStrategiesGetSignalError() instead")
    void cloudStrategiesGetSignalE(QList<OAICloudStrategy> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudStrategiesGetSignalError(QList<OAICloudStrategy> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudStrategiesStartPostSignalError() instead")
    void cloudStrategiesStartPostSignalE(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudStrategiesStartPostSignalError(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudStrategiesStrategyidGetSignalError() instead")
    void cloudStrategiesStrategyidGetSignalE(QList<OAICloudStrategy> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudStrategiesStrategyidGetSignalError(QList<OAICloudStrategy> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudStrategiesStrategyidStopPostSignalError() instead")
    void cloudStrategiesStrategyidStopPostSignalE(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudStrategiesStrategyidStopPostSignalError(OAI_cloud_accounts__accountid__closeall_post_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidCloseallPostSignalErrorFull() instead")
    void cloudAccountsAccountidCloseallPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidCloseallPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidGetSignalErrorFull() instead")
    void cloudAccountsAccountidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidOrdersGetSignalErrorFull() instead")
    void cloudAccountsAccountidOrdersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidOrdersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidOrdersOrderidDeleteSignalErrorFull() instead")
    void cloudAccountsAccountidOrdersOrderidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidOrdersOrderidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidOrdersPostSignalErrorFull() instead")
    void cloudAccountsAccountidOrdersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidOrdersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidSnapshotsGetSignalErrorFull() instead")
    void cloudAccountsAccountidSnapshotsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidSnapshotsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidSyncPostSignalErrorFull() instead")
    void cloudAccountsAccountidSyncPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidSyncPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsAccountidTradesGetSignalErrorFull() instead")
    void cloudAccountsAccountidTradesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsAccountidTradesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudAccountsGetSignalErrorFull() instead")
    void cloudAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudCommandsCommandidGetSignalErrorFull() instead")
    void cloudCommandsCommandidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudCommandsCommandidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudCommandsGetSignalErrorFull() instead")
    void cloudCommandsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudCommandsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsConnectionidDeleteSignalErrorFull() instead")
    void cloudConnectionsConnectionidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsConnectionidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsConnectionidGetSignalErrorFull() instead")
    void cloudConnectionsConnectionidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsConnectionidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsConnectionidPutSignalErrorFull() instead")
    void cloudConnectionsConnectionidPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsConnectionidPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsGetSignalErrorFull() instead")
    void cloudConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectionsPostSignalErrorFull() instead")
    void cloudConnectionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectorsConnectoridGetSignalErrorFull() instead")
    void cloudConnectorsConnectoridGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectorsConnectoridGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudConnectorsGetSignalErrorFull() instead")
    void cloudConnectorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudConnectorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudSessionsGetSignalErrorFull() instead")
    void cloudSessionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudSessionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudSessionsSessionidGetSignalErrorFull() instead")
    void cloudSessionsSessionidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudSessionsSessionidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudStrategiesGetSignalErrorFull() instead")
    void cloudStrategiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudStrategiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudStrategiesStartPostSignalErrorFull() instead")
    void cloudStrategiesStartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudStrategiesStartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudStrategiesStrategyidGetSignalErrorFull() instead")
    void cloudStrategiesStrategyidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudStrategiesStrategyidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudStrategiesStrategyidStopPostSignalErrorFull() instead")
    void cloudStrategiesStrategyidStopPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudStrategiesStrategyidStopPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
