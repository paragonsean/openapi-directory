/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutofollowAPIApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAutofollowAPIApi::OAIAutofollowAPIApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAutofollowAPIApi::~OAIAutofollowAPIApi() {
}

void OAIAutofollowAPIApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.tradematic.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("autofollowStrategiesGet", defaultConf);
    _serverIndices.insert("autofollowStrategiesGet", 0);
    _serverConfigs.insert("autofollowStrategiesPost", defaultConf);
    _serverIndices.insert("autofollowStrategiesPost", 0);
    _serverConfigs.insert("autofollowStrategiesStrategyidContentPut", defaultConf);
    _serverIndices.insert("autofollowStrategiesStrategyidContentPut", 0);
    _serverConfigs.insert("autofollowStrategiesStrategyidGet", defaultConf);
    _serverIndices.insert("autofollowStrategiesStrategyidGet", 0);
    _serverConfigs.insert("autofollowStrategiesStrategyidPositionsGet", defaultConf);
    _serverIndices.insert("autofollowStrategiesStrategyidPositionsGet", 0);
    _serverConfigs.insert("autofollowStrategiesStrategyidPut", defaultConf);
    _serverIndices.insert("autofollowStrategiesStrategyidPut", 0);
    _serverConfigs.insert("autofollowStrategiesStrategyidSignalsGet", defaultConf);
    _serverIndices.insert("autofollowStrategiesStrategyidSignalsGet", 0);
    _serverConfigs.insert("autofollowStrategiesStrategyidSignalsPost", defaultConf);
    _serverIndices.insert("autofollowStrategiesStrategyidSignalsPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAutofollowAPIApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAutofollowAPIApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAutofollowAPIApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAutofollowAPIApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAutofollowAPIApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAutofollowAPIApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAutofollowAPIApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAutofollowAPIApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAutofollowAPIApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAutofollowAPIApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAutofollowAPIApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAutofollowAPIApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAutofollowAPIApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAutofollowAPIApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAutofollowAPIApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAutofollowAPIApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAutofollowAPIApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAutofollowAPIApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAutofollowAPIApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAutofollowAPIApi::autofollowStrategiesGet() {
    QString fullPath = QString(_serverConfigs["autofollowStrategiesGet"][_serverIndices.value("autofollowStrategiesGet")].URL()+"/autofollow/strategies");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutofollowAPIApi::autofollowStrategiesGetCallback);
    connect(this, &OAIAutofollowAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutofollowAPIApi::autofollowStrategiesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIStrategy> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIStrategy val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT autofollowStrategiesGetSignal(output);
        Q_EMIT autofollowStrategiesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT autofollowStrategiesGetSignalE(output, error_type, error_str);
        Q_EMIT autofollowStrategiesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT autofollowStrategiesGetSignalError(output, error_type, error_str);
        Q_EMIT autofollowStrategiesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutofollowAPIApi::autofollowStrategiesPost(const OAI_autofollow_strategies_post_request &body) {
    QString fullPath = QString(_serverConfigs["autofollowStrategiesPost"][_serverIndices.value("autofollowStrategiesPost")].URL()+"/autofollow/strategies");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutofollowAPIApi::autofollowStrategiesPostCallback);
    connect(this, &OAIAutofollowAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutofollowAPIApi::autofollowStrategiesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_autofollow_strategies_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT autofollowStrategiesPostSignal(output);
        Q_EMIT autofollowStrategiesPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT autofollowStrategiesPostSignalE(output, error_type, error_str);
        Q_EMIT autofollowStrategiesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT autofollowStrategiesPostSignalError(output, error_type, error_str);
        Q_EMIT autofollowStrategiesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidContentPut(const qint64 &strategyid, const OAI_autofollow_strategies__strategyid__content_put_request &body) {
    QString fullPath = QString(_serverConfigs["autofollowStrategiesStrategyidContentPut"][_serverIndices.value("autofollowStrategiesStrategyidContentPut")].URL()+"/autofollow/strategies/{strategyid}/content");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString strategyidPathParam("{");
        strategyidPathParam.append("strategyid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyid"+pathSuffix : pathPrefix;
        fullPath.replace(strategyidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategyid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutofollowAPIApi::autofollowStrategiesStrategyidContentPutCallback);
    connect(this, &OAIAutofollowAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidContentPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_autofollow_strategies__strategyid__content_put_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT autofollowStrategiesStrategyidContentPutSignal(output);
        Q_EMIT autofollowStrategiesStrategyidContentPutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT autofollowStrategiesStrategyidContentPutSignalE(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidContentPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT autofollowStrategiesStrategyidContentPutSignalError(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidContentPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidGet(const qint64 &strategyid) {
    QString fullPath = QString(_serverConfigs["autofollowStrategiesStrategyidGet"][_serverIndices.value("autofollowStrategiesStrategyidGet")].URL()+"/autofollow/strategies/{strategyid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString strategyidPathParam("{");
        strategyidPathParam.append("strategyid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyid"+pathSuffix : pathPrefix;
        fullPath.replace(strategyidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategyid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutofollowAPIApi::autofollowStrategiesStrategyidGetCallback);
    connect(this, &OAIAutofollowAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStrategy output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT autofollowStrategiesStrategyidGetSignal(output);
        Q_EMIT autofollowStrategiesStrategyidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT autofollowStrategiesStrategyidGetSignalE(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT autofollowStrategiesStrategyidGetSignalError(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidPositionsGet(const qint64 &strategyid) {
    QString fullPath = QString(_serverConfigs["autofollowStrategiesStrategyidPositionsGet"][_serverIndices.value("autofollowStrategiesStrategyidPositionsGet")].URL()+"/autofollow/strategies/{strategyid}/positions");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString strategyidPathParam("{");
        strategyidPathParam.append("strategyid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyid"+pathSuffix : pathPrefix;
        fullPath.replace(strategyidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategyid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutofollowAPIApi::autofollowStrategiesStrategyidPositionsGetCallback);
    connect(this, &OAIAutofollowAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidPositionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIStrategyPosition> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIStrategyPosition val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT autofollowStrategiesStrategyidPositionsGetSignal(output);
        Q_EMIT autofollowStrategiesStrategyidPositionsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT autofollowStrategiesStrategyidPositionsGetSignalE(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidPositionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT autofollowStrategiesStrategyidPositionsGetSignalError(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidPositionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidPut(const qint64 &strategyid, const OAI_autofollow_strategies__strategyid__put_request &body) {
    QString fullPath = QString(_serverConfigs["autofollowStrategiesStrategyidPut"][_serverIndices.value("autofollowStrategiesStrategyidPut")].URL()+"/autofollow/strategies/{strategyid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString strategyidPathParam("{");
        strategyidPathParam.append("strategyid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyid"+pathSuffix : pathPrefix;
        fullPath.replace(strategyidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategyid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutofollowAPIApi::autofollowStrategiesStrategyidPutCallback);
    connect(this, &OAIAutofollowAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_autofollow_strategies__strategyid__put_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT autofollowStrategiesStrategyidPutSignal(output);
        Q_EMIT autofollowStrategiesStrategyidPutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT autofollowStrategiesStrategyidPutSignalE(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT autofollowStrategiesStrategyidPutSignalError(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidSignalsGet(const qint64 &strategyid, const qint64 &count) {
    QString fullPath = QString(_serverConfigs["autofollowStrategiesStrategyidSignalsGet"][_serverIndices.value("autofollowStrategiesStrategyidSignalsGet")].URL()+"/autofollow/strategies/{strategyid}/signals");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString strategyidPathParam("{");
        strategyidPathParam.append("strategyid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyid"+pathSuffix : pathPrefix;
        fullPath.replace(strategyidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategyid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "count", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("count")).append(querySuffix).append(QUrl::toPercentEncoding(count));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutofollowAPIApi::autofollowStrategiesStrategyidSignalsGetCallback);
    connect(this, &OAIAutofollowAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidSignalsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISignal> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISignal val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT autofollowStrategiesStrategyidSignalsGetSignal(output);
        Q_EMIT autofollowStrategiesStrategyidSignalsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT autofollowStrategiesStrategyidSignalsGetSignalE(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidSignalsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT autofollowStrategiesStrategyidSignalsGetSignalError(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidSignalsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidSignalsPost(const qint64 &strategyid, const OAI_autofollow_strategies__strategyid__signals_post_request &body) {
    QString fullPath = QString(_serverConfigs["autofollowStrategiesStrategyidSignalsPost"][_serverIndices.value("autofollowStrategiesStrategyidSignalsPost")].URL()+"/autofollow/strategies/{strategyid}/signals");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString strategyidPathParam("{");
        strategyidPathParam.append("strategyid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyid"+pathSuffix : pathPrefix;
        fullPath.replace(strategyidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategyid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAutofollowAPIApi::autofollowStrategiesStrategyidSignalsPostCallback);
    connect(this, &OAIAutofollowAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAutofollowAPIApi::autofollowStrategiesStrategyidSignalsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_autofollow_strategies__strategyid__signals_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT autofollowStrategiesStrategyidSignalsPostSignal(output);
        Q_EMIT autofollowStrategiesStrategyidSignalsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT autofollowStrategiesStrategyidSignalsPostSignalE(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidSignalsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT autofollowStrategiesStrategyidSignalsPostSignalError(output, error_type, error_str);
        Q_EMIT autofollowStrategiesStrategyidSignalsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAutofollowAPIApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
