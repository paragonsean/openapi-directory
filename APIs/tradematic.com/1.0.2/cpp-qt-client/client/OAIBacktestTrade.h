/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBacktestTrade.h
 *
 * 
 */

#ifndef OAIBacktestTrade_H
#define OAIBacktestTrade_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBacktestTrade : public OAIObject {
public:
    OAIBacktestTrade();
    OAIBacktestTrade(QString json);
    ~OAIBacktestTrade() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBarsheld() const;
    void setBarsheld(const QString &barsheld);
    bool is_barsheld_Set() const;
    bool is_barsheld_Valid() const;

    QString getChangepct() const;
    void setChangepct(const QString &changepct);
    bool is_changepct_Set() const;
    bool is_changepct_Valid() const;

    QString getCommission() const;
    void setCommission(const QString &commission);
    bool is_commission_Set() const;
    bool is_commission_Valid() const;

    QString getEntrydatetime() const;
    void setEntrydatetime(const QString &entrydatetime);
    bool is_entrydatetime_Set() const;
    bool is_entrydatetime_Valid() const;

    QString getEntryprice() const;
    void setEntryprice(const QString &entryprice);
    bool is_entryprice_Set() const;
    bool is_entryprice_Valid() const;

    QString getEntrysignal() const;
    void setEntrysignal(const QString &entrysignal);
    bool is_entrysignal_Set() const;
    bool is_entrysignal_Valid() const;

    QString getExitdatetime() const;
    void setExitdatetime(const QString &exitdatetime);
    bool is_exitdatetime_Set() const;
    bool is_exitdatetime_Valid() const;

    QString getExitprice() const;
    void setExitprice(const QString &exitprice);
    bool is_exitprice_Set() const;
    bool is_exitprice_Valid() const;

    QString getExitsignal() const;
    void setExitsignal(const QString &exitsignal);
    bool is_exitsignal_Set() const;
    bool is_exitsignal_Valid() const;

    QString getMae() const;
    void setMae(const QString &mae);
    bool is_mae_Set() const;
    bool is_mae_Valid() const;

    QString getMfe() const;
    void setMfe(const QString &mfe);
    bool is_mfe_Set() const;
    bool is_mfe_Valid() const;

    QString getPandl() const;
    void setPandl(const QString &pandl);
    bool is_pandl_Set() const;
    bool is_pandl_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QString getShares() const;
    void setShares(const QString &shares);
    bool is_shares_Set() const;
    bool is_shares_Valid() const;

    QString getSize() const;
    void setSize(const QString &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_barsheld;
    bool m_barsheld_isSet;
    bool m_barsheld_isValid;

    QString m_changepct;
    bool m_changepct_isSet;
    bool m_changepct_isValid;

    QString m_commission;
    bool m_commission_isSet;
    bool m_commission_isValid;

    QString m_entrydatetime;
    bool m_entrydatetime_isSet;
    bool m_entrydatetime_isValid;

    QString m_entryprice;
    bool m_entryprice_isSet;
    bool m_entryprice_isValid;

    QString m_entrysignal;
    bool m_entrysignal_isSet;
    bool m_entrysignal_isValid;

    QString m_exitdatetime;
    bool m_exitdatetime_isSet;
    bool m_exitdatetime_isValid;

    QString m_exitprice;
    bool m_exitprice_isSet;
    bool m_exitprice_isValid;

    QString m_exitsignal;
    bool m_exitsignal_isSet;
    bool m_exitsignal_isValid;

    QString m_mae;
    bool m_mae_isSet;
    bool m_mae_isValid;

    QString m_mfe;
    bool m_mfe_isSet;
    bool m_mfe_isValid;

    QString m_pandl;
    bool m_pandl_isSet;
    bool m_pandl_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QString m_shares;
    bool m_shares_isSet;
    bool m_shares_isValid;

    QString m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBacktestTrade)

#endif // OAIBacktestTrade_H
