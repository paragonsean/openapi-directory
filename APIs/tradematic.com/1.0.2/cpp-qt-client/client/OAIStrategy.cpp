/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStrategy::OAIStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStrategy::OAIStrategy() {
    this->initializeModel();
}

OAIStrategy::~OAIStrategy() {}

void OAIStrategy::initializeModel() {

    m_apr_isSet = false;
    m_apr_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_brokername_isSet = false;
    m_brokername_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_datascale_isSet = false;
    m_datascale_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_drawdown_isSet = false;
    m_drawdown_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_limitorder_isSet = false;
    m_limitorder_isValid = false;

    m_marketname_isSet = false;
    m_marketname_isValid = false;

    m_multiposition_isSet = false;
    m_multiposition_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_positionsize_isSet = false;
    m_positionsize_isValid = false;

    m_risklevelcode_isSet = false;
    m_risklevelcode_isValid = false;

    m_risklevelid_isSet = false;
    m_risklevelid_isValid = false;

    m_risklevelname_isSet = false;
    m_risklevelname_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_strategyid_isSet = false;
    m_strategyid_isValid = false;

    m_strategytypeid_isSet = false;
    m_strategytypeid_isValid = false;

    m_symbols_isSet = false;
    m_symbols_isValid = false;

    m_taskfolder_isSet = false;
    m_taskfolder_isValid = false;

    m_taskid_isSet = false;
    m_taskid_isValid = false;

    m_taskresult_isSet = false;
    m_taskresult_isValid = false;

    m_timeframe_isSet = false;
    m_timeframe_isValid = false;

    m_updatedate_isSet = false;
    m_updatedate_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStrategy::fromJsonObject(QJsonObject json) {

    m_apr_isValid = ::OpenAPI::fromJsonValue(m_apr, json[QString("apr")]);
    m_apr_isSet = !json[QString("apr")].isNull() && m_apr_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_brokername_isValid = ::OpenAPI::fromJsonValue(m_brokername, json[QString("brokername")]);
    m_brokername_isSet = !json[QString("brokername")].isNull() && m_brokername_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_datascale_isValid = ::OpenAPI::fromJsonValue(m_datascale, json[QString("datascale")]);
    m_datascale_isSet = !json[QString("datascale")].isNull() && m_datascale_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_drawdown_isValid = ::OpenAPI::fromJsonValue(m_drawdown, json[QString("drawdown")]);
    m_drawdown_isSet = !json[QString("drawdown")].isNull() && m_drawdown_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_limitorder_isValid = ::OpenAPI::fromJsonValue(m_limitorder, json[QString("limitorder")]);
    m_limitorder_isSet = !json[QString("limitorder")].isNull() && m_limitorder_isValid;

    m_marketname_isValid = ::OpenAPI::fromJsonValue(m_marketname, json[QString("marketname")]);
    m_marketname_isSet = !json[QString("marketname")].isNull() && m_marketname_isValid;

    m_multiposition_isValid = ::OpenAPI::fromJsonValue(m_multiposition, json[QString("multiposition")]);
    m_multiposition_isSet = !json[QString("multiposition")].isNull() && m_multiposition_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_positionsize_isValid = ::OpenAPI::fromJsonValue(m_positionsize, json[QString("positionsize")]);
    m_positionsize_isSet = !json[QString("positionsize")].isNull() && m_positionsize_isValid;

    m_risklevelcode_isValid = ::OpenAPI::fromJsonValue(m_risklevelcode, json[QString("risklevelcode")]);
    m_risklevelcode_isSet = !json[QString("risklevelcode")].isNull() && m_risklevelcode_isValid;

    m_risklevelid_isValid = ::OpenAPI::fromJsonValue(m_risklevelid, json[QString("risklevelid")]);
    m_risklevelid_isSet = !json[QString("risklevelid")].isNull() && m_risklevelid_isValid;

    m_risklevelname_isValid = ::OpenAPI::fromJsonValue(m_risklevelname, json[QString("risklevelname")]);
    m_risklevelname_isSet = !json[QString("risklevelname")].isNull() && m_risklevelname_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_strategyid_isValid = ::OpenAPI::fromJsonValue(m_strategyid, json[QString("strategyid")]);
    m_strategyid_isSet = !json[QString("strategyid")].isNull() && m_strategyid_isValid;

    m_strategytypeid_isValid = ::OpenAPI::fromJsonValue(m_strategytypeid, json[QString("strategytypeid")]);
    m_strategytypeid_isSet = !json[QString("strategytypeid")].isNull() && m_strategytypeid_isValid;

    m_symbols_isValid = ::OpenAPI::fromJsonValue(m_symbols, json[QString("symbols")]);
    m_symbols_isSet = !json[QString("symbols")].isNull() && m_symbols_isValid;

    m_taskfolder_isValid = ::OpenAPI::fromJsonValue(m_taskfolder, json[QString("taskfolder")]);
    m_taskfolder_isSet = !json[QString("taskfolder")].isNull() && m_taskfolder_isValid;

    m_taskid_isValid = ::OpenAPI::fromJsonValue(m_taskid, json[QString("taskid")]);
    m_taskid_isSet = !json[QString("taskid")].isNull() && m_taskid_isValid;

    m_taskresult_isValid = ::OpenAPI::fromJsonValue(m_taskresult, json[QString("taskresult")]);
    m_taskresult_isSet = !json[QString("taskresult")].isNull() && m_taskresult_isValid;

    m_timeframe_isValid = ::OpenAPI::fromJsonValue(m_timeframe, json[QString("timeframe")]);
    m_timeframe_isSet = !json[QString("timeframe")].isNull() && m_timeframe_isValid;

    m_updatedate_isValid = ::OpenAPI::fromJsonValue(m_updatedate, json[QString("updatedate")]);
    m_updatedate_isSet = !json[QString("updatedate")].isNull() && m_updatedate_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_apr_isSet) {
        obj.insert(QString("apr"), ::OpenAPI::toJsonValue(m_apr));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_brokername_isSet) {
        obj.insert(QString("brokername"), ::OpenAPI::toJsonValue(m_brokername));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_datascale_isSet) {
        obj.insert(QString("datascale"), ::OpenAPI::toJsonValue(m_datascale));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_drawdown_isSet) {
        obj.insert(QString("drawdown"), ::OpenAPI::toJsonValue(m_drawdown));
    }
    if (m_folder_isSet) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_limitorder_isSet) {
        obj.insert(QString("limitorder"), ::OpenAPI::toJsonValue(m_limitorder));
    }
    if (m_marketname_isSet) {
        obj.insert(QString("marketname"), ::OpenAPI::toJsonValue(m_marketname));
    }
    if (m_multiposition_isSet) {
        obj.insert(QString("multiposition"), ::OpenAPI::toJsonValue(m_multiposition));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_positionsize_isSet) {
        obj.insert(QString("positionsize"), ::OpenAPI::toJsonValue(m_positionsize));
    }
    if (m_risklevelcode_isSet) {
        obj.insert(QString("risklevelcode"), ::OpenAPI::toJsonValue(m_risklevelcode));
    }
    if (m_risklevelid_isSet) {
        obj.insert(QString("risklevelid"), ::OpenAPI::toJsonValue(m_risklevelid));
    }
    if (m_risklevelname_isSet) {
        obj.insert(QString("risklevelname"), ::OpenAPI::toJsonValue(m_risklevelname));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_strategyid_isSet) {
        obj.insert(QString("strategyid"), ::OpenAPI::toJsonValue(m_strategyid));
    }
    if (m_strategytypeid_isSet) {
        obj.insert(QString("strategytypeid"), ::OpenAPI::toJsonValue(m_strategytypeid));
    }
    if (m_symbols.size() > 0) {
        obj.insert(QString("symbols"), ::OpenAPI::toJsonValue(m_symbols));
    }
    if (m_taskfolder_isSet) {
        obj.insert(QString("taskfolder"), ::OpenAPI::toJsonValue(m_taskfolder));
    }
    if (m_taskid_isSet) {
        obj.insert(QString("taskid"), ::OpenAPI::toJsonValue(m_taskid));
    }
    if (m_taskresult.isSet()) {
        obj.insert(QString("taskresult"), ::OpenAPI::toJsonValue(m_taskresult));
    }
    if (m_timeframe_isSet) {
        obj.insert(QString("timeframe"), ::OpenAPI::toJsonValue(m_timeframe));
    }
    if (m_updatedate_isSet) {
        obj.insert(QString("updatedate"), ::OpenAPI::toJsonValue(m_updatedate));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIStrategy::getApr() const {
    return m_apr;
}
void OAIStrategy::setApr(const QString &apr) {
    m_apr = apr;
    m_apr_isSet = true;
}

bool OAIStrategy::is_apr_Set() const{
    return m_apr_isSet;
}

bool OAIStrategy::is_apr_Valid() const{
    return m_apr_isValid;
}

QString OAIStrategy::getAuthor() const {
    return m_author;
}
void OAIStrategy::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIStrategy::is_author_Set() const{
    return m_author_isSet;
}

bool OAIStrategy::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIStrategy::getBrokername() const {
    return m_brokername;
}
void OAIStrategy::setBrokername(const QString &brokername) {
    m_brokername = brokername;
    m_brokername_isSet = true;
}

bool OAIStrategy::is_brokername_Set() const{
    return m_brokername_isSet;
}

bool OAIStrategy::is_brokername_Valid() const{
    return m_brokername_isValid;
}

QString OAIStrategy::getCode() const {
    return m_code;
}
void OAIStrategy::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIStrategy::is_code_Set() const{
    return m_code_isSet;
}

bool OAIStrategy::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIStrategy::getDatascale() const {
    return m_datascale;
}
void OAIStrategy::setDatascale(const QString &datascale) {
    m_datascale = datascale;
    m_datascale_isSet = true;
}

bool OAIStrategy::is_datascale_Set() const{
    return m_datascale_isSet;
}

bool OAIStrategy::is_datascale_Valid() const{
    return m_datascale_isValid;
}

QString OAIStrategy::getDescription() const {
    return m_description;
}
void OAIStrategy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStrategy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStrategy::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStrategy::getDrawdown() const {
    return m_drawdown;
}
void OAIStrategy::setDrawdown(const QString &drawdown) {
    m_drawdown = drawdown;
    m_drawdown_isSet = true;
}

bool OAIStrategy::is_drawdown_Set() const{
    return m_drawdown_isSet;
}

bool OAIStrategy::is_drawdown_Valid() const{
    return m_drawdown_isValid;
}

QString OAIStrategy::getFolder() const {
    return m_folder;
}
void OAIStrategy::setFolder(const QString &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIStrategy::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIStrategy::is_folder_Valid() const{
    return m_folder_isValid;
}

QString OAIStrategy::getGuid() const {
    return m_guid;
}
void OAIStrategy::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIStrategy::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIStrategy::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIStrategy::getImage() const {
    return m_image;
}
void OAIStrategy::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIStrategy::is_image_Set() const{
    return m_image_isSet;
}

bool OAIStrategy::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIStrategy::getLimitorder() const {
    return m_limitorder;
}
void OAIStrategy::setLimitorder(const QString &limitorder) {
    m_limitorder = limitorder;
    m_limitorder_isSet = true;
}

bool OAIStrategy::is_limitorder_Set() const{
    return m_limitorder_isSet;
}

bool OAIStrategy::is_limitorder_Valid() const{
    return m_limitorder_isValid;
}

QString OAIStrategy::getMarketname() const {
    return m_marketname;
}
void OAIStrategy::setMarketname(const QString &marketname) {
    m_marketname = marketname;
    m_marketname_isSet = true;
}

bool OAIStrategy::is_marketname_Set() const{
    return m_marketname_isSet;
}

bool OAIStrategy::is_marketname_Valid() const{
    return m_marketname_isValid;
}

QString OAIStrategy::getMultiposition() const {
    return m_multiposition;
}
void OAIStrategy::setMultiposition(const QString &multiposition) {
    m_multiposition = multiposition;
    m_multiposition_isSet = true;
}

bool OAIStrategy::is_multiposition_Set() const{
    return m_multiposition_isSet;
}

bool OAIStrategy::is_multiposition_Valid() const{
    return m_multiposition_isValid;
}

QString OAIStrategy::getName() const {
    return m_name;
}
void OAIStrategy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStrategy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStrategy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStrategy::getOwner() const {
    return m_owner;
}
void OAIStrategy::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIStrategy::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIStrategy::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIStrategy::getPermissions() const {
    return m_permissions;
}
void OAIStrategy::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIStrategy::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIStrategy::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIStrategy::getPositionsize() const {
    return m_positionsize;
}
void OAIStrategy::setPositionsize(const QString &positionsize) {
    m_positionsize = positionsize;
    m_positionsize_isSet = true;
}

bool OAIStrategy::is_positionsize_Set() const{
    return m_positionsize_isSet;
}

bool OAIStrategy::is_positionsize_Valid() const{
    return m_positionsize_isValid;
}

QString OAIStrategy::getRisklevelcode() const {
    return m_risklevelcode;
}
void OAIStrategy::setRisklevelcode(const QString &risklevelcode) {
    m_risklevelcode = risklevelcode;
    m_risklevelcode_isSet = true;
}

bool OAIStrategy::is_risklevelcode_Set() const{
    return m_risklevelcode_isSet;
}

bool OAIStrategy::is_risklevelcode_Valid() const{
    return m_risklevelcode_isValid;
}

QString OAIStrategy::getRisklevelid() const {
    return m_risklevelid;
}
void OAIStrategy::setRisklevelid(const QString &risklevelid) {
    m_risklevelid = risklevelid;
    m_risklevelid_isSet = true;
}

bool OAIStrategy::is_risklevelid_Set() const{
    return m_risklevelid_isSet;
}

bool OAIStrategy::is_risklevelid_Valid() const{
    return m_risklevelid_isValid;
}

QString OAIStrategy::getRisklevelname() const {
    return m_risklevelname;
}
void OAIStrategy::setRisklevelname(const QString &risklevelname) {
    m_risklevelname = risklevelname;
    m_risklevelname_isSet = true;
}

bool OAIStrategy::is_risklevelname_Set() const{
    return m_risklevelname_isSet;
}

bool OAIStrategy::is_risklevelname_Valid() const{
    return m_risklevelname_isValid;
}

OAIRules OAIStrategy::getRules() const {
    return m_rules;
}
void OAIStrategy::setRules(const OAIRules &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIStrategy::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIStrategy::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAIStrategy::getStrategyid() const {
    return m_strategyid;
}
void OAIStrategy::setStrategyid(const QString &strategyid) {
    m_strategyid = strategyid;
    m_strategyid_isSet = true;
}

bool OAIStrategy::is_strategyid_Set() const{
    return m_strategyid_isSet;
}

bool OAIStrategy::is_strategyid_Valid() const{
    return m_strategyid_isValid;
}

QString OAIStrategy::getStrategytypeid() const {
    return m_strategytypeid;
}
void OAIStrategy::setStrategytypeid(const QString &strategytypeid) {
    m_strategytypeid = strategytypeid;
    m_strategytypeid_isSet = true;
}

bool OAIStrategy::is_strategytypeid_Set() const{
    return m_strategytypeid_isSet;
}

bool OAIStrategy::is_strategytypeid_Valid() const{
    return m_strategytypeid_isValid;
}

QList<QString> OAIStrategy::getSymbols() const {
    return m_symbols;
}
void OAIStrategy::setSymbols(const QList<QString> &symbols) {
    m_symbols = symbols;
    m_symbols_isSet = true;
}

bool OAIStrategy::is_symbols_Set() const{
    return m_symbols_isSet;
}

bool OAIStrategy::is_symbols_Valid() const{
    return m_symbols_isValid;
}

QString OAIStrategy::getTaskfolder() const {
    return m_taskfolder;
}
void OAIStrategy::setTaskfolder(const QString &taskfolder) {
    m_taskfolder = taskfolder;
    m_taskfolder_isSet = true;
}

bool OAIStrategy::is_taskfolder_Set() const{
    return m_taskfolder_isSet;
}

bool OAIStrategy::is_taskfolder_Valid() const{
    return m_taskfolder_isValid;
}

QString OAIStrategy::getTaskid() const {
    return m_taskid;
}
void OAIStrategy::setTaskid(const QString &taskid) {
    m_taskid = taskid;
    m_taskid_isSet = true;
}

bool OAIStrategy::is_taskid_Set() const{
    return m_taskid_isSet;
}

bool OAIStrategy::is_taskid_Valid() const{
    return m_taskid_isValid;
}

OAITaskresult OAIStrategy::getTaskresult() const {
    return m_taskresult;
}
void OAIStrategy::setTaskresult(const OAITaskresult &taskresult) {
    m_taskresult = taskresult;
    m_taskresult_isSet = true;
}

bool OAIStrategy::is_taskresult_Set() const{
    return m_taskresult_isSet;
}

bool OAIStrategy::is_taskresult_Valid() const{
    return m_taskresult_isValid;
}

QString OAIStrategy::getTimeframe() const {
    return m_timeframe;
}
void OAIStrategy::setTimeframe(const QString &timeframe) {
    m_timeframe = timeframe;
    m_timeframe_isSet = true;
}

bool OAIStrategy::is_timeframe_Set() const{
    return m_timeframe_isSet;
}

bool OAIStrategy::is_timeframe_Valid() const{
    return m_timeframe_isValid;
}

QDateTime OAIStrategy::getUpdatedate() const {
    return m_updatedate;
}
void OAIStrategy::setUpdatedate(const QDateTime &updatedate) {
    m_updatedate = updatedate;
    m_updatedate_isSet = true;
}

bool OAIStrategy::is_updatedate_Set() const{
    return m_updatedate_isSet;
}

bool OAIStrategy::is_updatedate_Valid() const{
    return m_updatedate_isValid;
}

QString OAIStrategy::getUrl() const {
    return m_url;
}
void OAIStrategy::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIStrategy::is_url_Set() const{
    return m_url_isSet;
}

bool OAIStrategy::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brokername_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datascale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drawdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limitorder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positionsize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risklevelcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risklevelid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risklevelname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategytypeid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskfolder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskresult.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updatedate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
