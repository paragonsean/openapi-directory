/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudStrategy::OAICloudStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudStrategy::OAICloudStrategy() {
    this->initializeModel();
}

OAICloudStrategy::~OAICloudStrategy() {}

void OAICloudStrategy::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_computer_isSet = false;
    m_computer_isValid = false;

    m_hwid_isSet = false;
    m_hwid_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_strategy_isSet = false;
    m_strategy_isValid = false;

    m_strategyid_isSet = false;
    m_strategyid_isValid = false;

    m_strategystatusname_isSet = false;
    m_strategystatusname_isValid = false;
}

void OAICloudStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudStrategy::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_computer_isValid = ::OpenAPI::fromJsonValue(m_computer, json[QString("computer")]);
    m_computer_isSet = !json[QString("computer")].isNull() && m_computer_isValid;

    m_hwid_isValid = ::OpenAPI::fromJsonValue(m_hwid, json[QString("hwid")]);
    m_hwid_isSet = !json[QString("hwid")].isNull() && m_hwid_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_strategy_isValid = ::OpenAPI::fromJsonValue(m_strategy, json[QString("strategy")]);
    m_strategy_isSet = !json[QString("strategy")].isNull() && m_strategy_isValid;

    m_strategyid_isValid = ::OpenAPI::fromJsonValue(m_strategyid, json[QString("strategyid")]);
    m_strategyid_isSet = !json[QString("strategyid")].isNull() && m_strategyid_isValid;

    m_strategystatusname_isValid = ::OpenAPI::fromJsonValue(m_strategystatusname, json[QString("strategystatusname")]);
    m_strategystatusname_isSet = !json[QString("strategystatusname")].isNull() && m_strategystatusname_isValid;
}

QString OAICloudStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_computer_isSet) {
        obj.insert(QString("computer"), ::OpenAPI::toJsonValue(m_computer));
    }
    if (m_hwid_isSet) {
        obj.insert(QString("hwid"), ::OpenAPI::toJsonValue(m_hwid));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_strategy_isSet) {
        obj.insert(QString("strategy"), ::OpenAPI::toJsonValue(m_strategy));
    }
    if (m_strategyid_isSet) {
        obj.insert(QString("strategyid"), ::OpenAPI::toJsonValue(m_strategyid));
    }
    if (m_strategystatusname_isSet) {
        obj.insert(QString("strategystatusname"), ::OpenAPI::toJsonValue(m_strategystatusname));
    }
    return obj;
}

QString OAICloudStrategy::getAccount() const {
    return m_account;
}
void OAICloudStrategy::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAICloudStrategy::is_account_Set() const{
    return m_account_isSet;
}

bool OAICloudStrategy::is_account_Valid() const{
    return m_account_isValid;
}

QString OAICloudStrategy::getComputer() const {
    return m_computer;
}
void OAICloudStrategy::setComputer(const QString &computer) {
    m_computer = computer;
    m_computer_isSet = true;
}

bool OAICloudStrategy::is_computer_Set() const{
    return m_computer_isSet;
}

bool OAICloudStrategy::is_computer_Valid() const{
    return m_computer_isValid;
}

QString OAICloudStrategy::getHwid() const {
    return m_hwid;
}
void OAICloudStrategy::setHwid(const QString &hwid) {
    m_hwid = hwid;
    m_hwid_isSet = true;
}

bool OAICloudStrategy::is_hwid_Set() const{
    return m_hwid_isSet;
}

bool OAICloudStrategy::is_hwid_Valid() const{
    return m_hwid_isValid;
}

QString OAICloudStrategy::getMessage() const {
    return m_message;
}
void OAICloudStrategy::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICloudStrategy::is_message_Set() const{
    return m_message_isSet;
}

bool OAICloudStrategy::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICloudStrategy::getStatus() const {
    return m_status;
}
void OAICloudStrategy::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICloudStrategy::is_status_Set() const{
    return m_status_isSet;
}

bool OAICloudStrategy::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICloudStrategy::getStrategy() const {
    return m_strategy;
}
void OAICloudStrategy::setStrategy(const QString &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OAICloudStrategy::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OAICloudStrategy::is_strategy_Valid() const{
    return m_strategy_isValid;
}

QString OAICloudStrategy::getStrategyid() const {
    return m_strategyid;
}
void OAICloudStrategy::setStrategyid(const QString &strategyid) {
    m_strategyid = strategyid;
    m_strategyid_isSet = true;
}

bool OAICloudStrategy::is_strategyid_Set() const{
    return m_strategyid_isSet;
}

bool OAICloudStrategy::is_strategyid_Valid() const{
    return m_strategyid_isValid;
}

QString OAICloudStrategy::getStrategystatusname() const {
    return m_strategystatusname;
}
void OAICloudStrategy::setStrategystatusname(const QString &strategystatusname) {
    m_strategystatusname = strategystatusname;
    m_strategystatusname_isSet = true;
}

bool OAICloudStrategy::is_strategystatusname_Set() const{
    return m_strategystatusname_isSet;
}

bool OAICloudStrategy::is_strategystatusname_Valid() const{
    return m_strategystatusname_isValid;
}

bool OAICloudStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_computer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hwid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategystatusname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
