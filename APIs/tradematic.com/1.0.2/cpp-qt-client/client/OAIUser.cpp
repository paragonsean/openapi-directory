/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_createdby_isSet = false;
    m_createdby_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_regdate_isSet = false;
    m_regdate_isValid = false;

    m_userid_isSet = false;
    m_userid_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_createdby_isValid = ::OpenAPI::fromJsonValue(m_createdby, json[QString("createdby")]);
    m_createdby_isSet = !json[QString("createdby")].isNull() && m_createdby_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_regdate_isValid = ::OpenAPI::fromJsonValue(m_regdate, json[QString("regdate")]);
    m_regdate_isSet = !json[QString("regdate")].isNull() && m_regdate_isValid;

    m_userid_isValid = ::OpenAPI::fromJsonValue(m_userid, json[QString("userid")]);
    m_userid_isSet = !json[QString("userid")].isNull() && m_userid_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_createdby_isSet) {
        obj.insert(QString("createdby"), ::OpenAPI::toJsonValue(m_createdby));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_regdate_isSet) {
        obj.insert(QString("regdate"), ::OpenAPI::toJsonValue(m_regdate));
    }
    if (m_userid_isSet) {
        obj.insert(QString("userid"), ::OpenAPI::toJsonValue(m_userid));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIUser::getComments() const {
    return m_comments;
}
void OAIUser::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIUser::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIUser::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIUser::getCreatedby() const {
    return m_createdby;
}
void OAIUser::setCreatedby(const QString &createdby) {
    m_createdby = createdby;
    m_createdby_isSet = true;
}

bool OAIUser::is_createdby_Set() const{
    return m_createdby_isSet;
}

bool OAIUser::is_createdby_Valid() const{
    return m_createdby_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getRegdate() const {
    return m_regdate;
}
void OAIUser::setRegdate(const QString &regdate) {
    m_regdate = regdate;
    m_regdate_isSet = true;
}

bool OAIUser::is_regdate_Set() const{
    return m_regdate_isSet;
}

bool OAIUser::is_regdate_Valid() const{
    return m_regdate_isValid;
}

QString OAIUser::getUserid() const {
    return m_userid;
}
void OAIUser::setUserid(const QString &userid) {
    m_userid = userid;
    m_userid_isSet = true;
}

bool OAIUser::is_userid_Set() const{
    return m_userid_isSet;
}

bool OAIUser::is_userid_Valid() const{
    return m_userid_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_createdby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
