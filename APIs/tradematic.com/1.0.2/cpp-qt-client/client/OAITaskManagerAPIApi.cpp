/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskManagerAPIApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITaskManagerAPIApi::OAITaskManagerAPIApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITaskManagerAPIApi::~OAITaskManagerAPIApi() {
}

void OAITaskManagerAPIApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.tradematic.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("taskmanagerTasksGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksGet", 0);
    _serverConfigs.insert("taskmanagerTasksPost", defaultConf);
    _serverIndices.insert("taskmanagerTasksPost", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidBymonthsGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidBymonthsGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidByquartersGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidByquartersGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidByyearsGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidByyearsGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidContributionGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidContributionGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidDrawdownGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidDrawdownGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidEquityGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidEquityGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidEquitypctGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidEquitypctGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidEquitypctsmGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidEquitypctsmGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidFolderGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidFolderGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidPerformanceGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidPerformanceGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidResult2Get", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidResult2Get", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidResultGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidResultGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidStatusGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidStatusGet", 0);
    _serverConfigs.insert("taskmanagerTasksTaskidTradesGet", defaultConf);
    _serverIndices.insert("taskmanagerTasksTaskidTradesGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITaskManagerAPIApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITaskManagerAPIApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITaskManagerAPIApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITaskManagerAPIApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITaskManagerAPIApi::setUsername(const QString &username) {
    _username = username;
}

void OAITaskManagerAPIApi::setPassword(const QString &password) {
    _password = password;
}


void OAITaskManagerAPIApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITaskManagerAPIApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITaskManagerAPIApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITaskManagerAPIApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITaskManagerAPIApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITaskManagerAPIApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITaskManagerAPIApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITaskManagerAPIApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITaskManagerAPIApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITaskManagerAPIApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITaskManagerAPIApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITaskManagerAPIApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITaskManagerAPIApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksGet() {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksGet"][_serverIndices.value("taskmanagerTasksGet")].URL()+"/taskmanager/tasks");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITask> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITask val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksGetSignal(output);
        Q_EMIT taskmanagerTasksGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksPost(const OAI_taskmanager_tasks_post_request &body) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksPost"][_serverIndices.value("taskmanagerTasksPost")].URL()+"/taskmanager/tasks");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksPostCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_taskmanager_tasks_post_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksPostSignal(output);
        Q_EMIT taskmanagerTasksPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksPostSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksPostSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidBymonthsGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidBymonthsGet"][_serverIndices.value("taskmanagerTasksTaskidBymonthsGet")].URL()+"/taskmanager/tasks/{taskid}/bymonths");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidBymonthsGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidBymonthsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIByMonths> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIByMonths val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidBymonthsGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidBymonthsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidBymonthsGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidBymonthsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidBymonthsGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidBymonthsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidByquartersGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidByquartersGet"][_serverIndices.value("taskmanagerTasksTaskidByquartersGet")].URL()+"/taskmanager/tasks/{taskid}/byquarters");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidByquartersGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidByquartersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIByQuarters> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIByQuarters val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidByquartersGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidByquartersGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidByquartersGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidByquartersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidByquartersGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidByquartersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidByyearsGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidByyearsGet"][_serverIndices.value("taskmanagerTasksTaskidByyearsGet")].URL()+"/taskmanager/tasks/{taskid}/byyears");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidByyearsGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidByyearsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIByYears> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIByYears val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidByyearsGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidByyearsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidByyearsGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidByyearsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidByyearsGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidByyearsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidContributionGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidContributionGet"][_serverIndices.value("taskmanagerTasksTaskidContributionGet")].URL()+"/taskmanager/tasks/{taskid}/contribution");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidContributionGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidContributionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIContribution> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIContribution val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidContributionGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidContributionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidContributionGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidContributionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidContributionGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidContributionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidDrawdownGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidDrawdownGet"][_serverIndices.value("taskmanagerTasksTaskidDrawdownGet")].URL()+"/taskmanager/tasks/{taskid}/drawdown");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidDrawdownGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidDrawdownGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDrawdownItem> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDrawdownItem val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidDrawdownGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidDrawdownGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidDrawdownGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidDrawdownGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidDrawdownGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidDrawdownGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidEquityGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidEquityGet"][_serverIndices.value("taskmanagerTasksTaskidEquityGet")].URL()+"/taskmanager/tasks/{taskid}/equity");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidEquityGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidEquityGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEquityItem> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEquityItem val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidEquityGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidEquityGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidEquityGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidEquityGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidEquityGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidEquityGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidEquitypctGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidEquitypctGet"][_serverIndices.value("taskmanagerTasksTaskidEquitypctGet")].URL()+"/taskmanager/tasks/{taskid}/equitypct");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidEquitypctGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidEquitypctGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEquityPctItem> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEquityPctItem val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidEquitypctGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidEquitypctGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidEquitypctGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidEquitypctGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidEquitypctGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidEquitypctGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidEquitypctsmGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidEquitypctsmGet"][_serverIndices.value("taskmanagerTasksTaskidEquitypctsmGet")].URL()+"/taskmanager/tasks/{taskid}/equitypctsm");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidEquitypctsmGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidEquitypctsmGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEquityPctSmItem> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEquityPctSmItem val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidEquitypctsmGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidEquitypctsmGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidEquitypctsmGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidEquitypctsmGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidEquitypctsmGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidEquitypctsmGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidFolderGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidFolderGet"][_serverIndices.value("taskmanagerTasksTaskidFolderGet")].URL()+"/taskmanager/tasks/{taskid}/folder");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidFolderGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidFolderGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_taskmanager_tasks__taskid__folder_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidFolderGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidFolderGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidFolderGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidFolderGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidFolderGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidFolderGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidGet"][_serverIndices.value("taskmanagerTasksTaskidGet")].URL()+"/taskmanager/tasks/{taskid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITask output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidPerformanceGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidPerformanceGet"][_serverIndices.value("taskmanagerTasksTaskidPerformanceGet")].URL()+"/taskmanager/tasks/{taskid}/performance");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidPerformanceGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidPerformanceGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_taskmanager_tasks__taskid__performance_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidPerformanceGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidPerformanceGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidPerformanceGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidPerformanceGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidPerformanceGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidPerformanceGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidResult2Get(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidResult2Get"][_serverIndices.value("taskmanagerTasksTaskidResult2Get")].URL()+"/taskmanager/tasks/{taskid}/result2");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidResult2GetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidResult2GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_taskmanager_tasks__taskid__result2_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidResult2GetSignal(output);
        Q_EMIT taskmanagerTasksTaskidResult2GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidResult2GetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidResult2GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidResult2GetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidResult2GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidResultGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidResultGet"][_serverIndices.value("taskmanagerTasksTaskidResultGet")].URL()+"/taskmanager/tasks/{taskid}/result");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidResultGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidResultGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_taskmanager_tasks__taskid__result_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidResultGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidResultGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidResultGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidResultGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidResultGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidResultGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidStatusGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidStatusGet"][_serverIndices.value("taskmanagerTasksTaskidStatusGet")].URL()+"/taskmanager/tasks/{taskid}/status");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidStatusGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidStatusGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_taskmanager_tasks__taskid__status_get_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidStatusGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidStatusGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidStatusGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidStatusGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidStatusGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidStatusGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidTradesGet(const qint64 &taskid) {
    QString fullPath = QString(_serverConfigs["taskmanagerTasksTaskidTradesGet"][_serverIndices.value("taskmanagerTasksTaskidTradesGet")].URL()+"/taskmanager/tasks/{taskid}/trades");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString taskidPathParam("{");
        taskidPathParam.append("taskid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskid"+pathSuffix : pathPrefix;
        fullPath.replace(taskidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(taskid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskManagerAPIApi::taskmanagerTasksTaskidTradesGetCallback);
    connect(this, &OAITaskManagerAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskManagerAPIApi::taskmanagerTasksTaskidTradesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBacktestTrade> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBacktestTrade val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskmanagerTasksTaskidTradesGetSignal(output);
        Q_EMIT taskmanagerTasksTaskidTradesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskmanagerTasksTaskidTradesGetSignalE(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidTradesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskmanagerTasksTaskidTradesGetSignalError(output, error_type, error_str);
        Q_EMIT taskmanagerTasksTaskidTradesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskManagerAPIApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
