/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINews.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINews::OAINews(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINews::OAINews() {
    this->initializeModel();
}

OAINews::~OAINews() {}

void OAINews::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_newsid_isSet = false;
    m_newsid_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAINews::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINews::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_newsid_isValid = ::OpenAPI::fromJsonValue(m_newsid, json[QString("newsid")]);
    m_newsid_isSet = !json[QString("newsid")].isNull() && m_newsid_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAINews::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINews::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_newsid_isSet) {
        obj.insert(QString("newsid"), ::OpenAPI::toJsonValue(m_newsid));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAINews::getBody() const {
    return m_body;
}
void OAINews::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINews::is_body_Set() const{
    return m_body_isSet;
}

bool OAINews::is_body_Valid() const{
    return m_body_isValid;
}

QString OAINews::getNewsid() const {
    return m_newsid;
}
void OAINews::setNewsid(const QString &newsid) {
    m_newsid = newsid;
    m_newsid_isSet = true;
}

bool OAINews::is_newsid_Set() const{
    return m_newsid_isSet;
}

bool OAINews::is_newsid_Valid() const{
    return m_newsid_isValid;
}

QString OAINews::getSource() const {
    return m_source;
}
void OAINews::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAINews::is_source_Set() const{
    return m_source_isSet;
}

bool OAINews::is_source_Valid() const{
    return m_source_isValid;
}

QDateTime OAINews::getTimestamp() const {
    return m_timestamp;
}
void OAINews::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAINews::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAINews::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAINews::getTitle() const {
    return m_title;
}
void OAINews::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINews::is_title_Set() const{
    return m_title_isSet;
}

bool OAINews::is_title_Valid() const{
    return m_title_isValid;
}

bool OAINews::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newsid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINews::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
