/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommand::OAICommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommand::OAICommand() {
    this->initializeModel();
}

OAICommand::~OAICommand() {}

void OAICommand::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_accountid_isSet = false;
    m_accountid_isValid = false;

    m_commanddate_isSet = false;
    m_commanddate_isValid = false;

    m_commandid_isSet = false;
    m_commandid_isValid = false;

    m_commandstatusname_isSet = false;
    m_commandstatusname_isValid = false;

    m_commandtypename_isSet = false;
    m_commandtypename_isValid = false;

    m_computer_isSet = false;
    m_computer_isValid = false;

    m_hwid_isSet = false;
    m_hwid_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICommand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommand::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_accountid_isValid = ::OpenAPI::fromJsonValue(m_accountid, json[QString("accountid")]);
    m_accountid_isSet = !json[QString("accountid")].isNull() && m_accountid_isValid;

    m_commanddate_isValid = ::OpenAPI::fromJsonValue(m_commanddate, json[QString("commanddate")]);
    m_commanddate_isSet = !json[QString("commanddate")].isNull() && m_commanddate_isValid;

    m_commandid_isValid = ::OpenAPI::fromJsonValue(m_commandid, json[QString("commandid")]);
    m_commandid_isSet = !json[QString("commandid")].isNull() && m_commandid_isValid;

    m_commandstatusname_isValid = ::OpenAPI::fromJsonValue(m_commandstatusname, json[QString("commandstatusname")]);
    m_commandstatusname_isSet = !json[QString("commandstatusname")].isNull() && m_commandstatusname_isValid;

    m_commandtypename_isValid = ::OpenAPI::fromJsonValue(m_commandtypename, json[QString("commandtypename")]);
    m_commandtypename_isSet = !json[QString("commandtypename")].isNull() && m_commandtypename_isValid;

    m_computer_isValid = ::OpenAPI::fromJsonValue(m_computer, json[QString("computer")]);
    m_computer_isSet = !json[QString("computer")].isNull() && m_computer_isValid;

    m_hwid_isValid = ::OpenAPI::fromJsonValue(m_hwid, json[QString("hwid")]);
    m_hwid_isSet = !json[QString("hwid")].isNull() && m_hwid_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICommand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommand::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_accountid_isSet) {
        obj.insert(QString("accountid"), ::OpenAPI::toJsonValue(m_accountid));
    }
    if (m_commanddate_isSet) {
        obj.insert(QString("commanddate"), ::OpenAPI::toJsonValue(m_commanddate));
    }
    if (m_commandid_isSet) {
        obj.insert(QString("commandid"), ::OpenAPI::toJsonValue(m_commandid));
    }
    if (m_commandstatusname_isSet) {
        obj.insert(QString("commandstatusname"), ::OpenAPI::toJsonValue(m_commandstatusname));
    }
    if (m_commandtypename_isSet) {
        obj.insert(QString("commandtypename"), ::OpenAPI::toJsonValue(m_commandtypename));
    }
    if (m_computer_isSet) {
        obj.insert(QString("computer"), ::OpenAPI::toJsonValue(m_computer));
    }
    if (m_hwid_isSet) {
        obj.insert(QString("hwid"), ::OpenAPI::toJsonValue(m_hwid));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICommand::getAccount() const {
    return m_account;
}
void OAICommand::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAICommand::is_account_Set() const{
    return m_account_isSet;
}

bool OAICommand::is_account_Valid() const{
    return m_account_isValid;
}

QString OAICommand::getAccountid() const {
    return m_accountid;
}
void OAICommand::setAccountid(const QString &accountid) {
    m_accountid = accountid;
    m_accountid_isSet = true;
}

bool OAICommand::is_accountid_Set() const{
    return m_accountid_isSet;
}

bool OAICommand::is_accountid_Valid() const{
    return m_accountid_isValid;
}

QDateTime OAICommand::getCommanddate() const {
    return m_commanddate;
}
void OAICommand::setCommanddate(const QDateTime &commanddate) {
    m_commanddate = commanddate;
    m_commanddate_isSet = true;
}

bool OAICommand::is_commanddate_Set() const{
    return m_commanddate_isSet;
}

bool OAICommand::is_commanddate_Valid() const{
    return m_commanddate_isValid;
}

QString OAICommand::getCommandid() const {
    return m_commandid;
}
void OAICommand::setCommandid(const QString &commandid) {
    m_commandid = commandid;
    m_commandid_isSet = true;
}

bool OAICommand::is_commandid_Set() const{
    return m_commandid_isSet;
}

bool OAICommand::is_commandid_Valid() const{
    return m_commandid_isValid;
}

QString OAICommand::getCommandstatusname() const {
    return m_commandstatusname;
}
void OAICommand::setCommandstatusname(const QString &commandstatusname) {
    m_commandstatusname = commandstatusname;
    m_commandstatusname_isSet = true;
}

bool OAICommand::is_commandstatusname_Set() const{
    return m_commandstatusname_isSet;
}

bool OAICommand::is_commandstatusname_Valid() const{
    return m_commandstatusname_isValid;
}

QString OAICommand::getCommandtypename() const {
    return m_commandtypename;
}
void OAICommand::setCommandtypename(const QString &commandtypename) {
    m_commandtypename = commandtypename;
    m_commandtypename_isSet = true;
}

bool OAICommand::is_commandtypename_Set() const{
    return m_commandtypename_isSet;
}

bool OAICommand::is_commandtypename_Valid() const{
    return m_commandtypename_isValid;
}

QString OAICommand::getComputer() const {
    return m_computer;
}
void OAICommand::setComputer(const QString &computer) {
    m_computer = computer;
    m_computer_isSet = true;
}

bool OAICommand::is_computer_Set() const{
    return m_computer_isSet;
}

bool OAICommand::is_computer_Valid() const{
    return m_computer_isValid;
}

QString OAICommand::getHwid() const {
    return m_hwid;
}
void OAICommand::setHwid(const QString &hwid) {
    m_hwid = hwid;
    m_hwid_isSet = true;
}

bool OAICommand::is_hwid_Set() const{
    return m_hwid_isSet;
}

bool OAICommand::is_hwid_Valid() const{
    return m_hwid_isValid;
}

QString OAICommand::getMessage() const {
    return m_message;
}
void OAICommand::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICommand::is_message_Set() const{
    return m_message_isSet;
}

bool OAICommand::is_message_Valid() const{
    return m_message_isValid;
}

QMap<QString, QString> OAICommand::getParameters() const {
    return m_parameters;
}
void OAICommand::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICommand::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICommand::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAICommand::getStatus() const {
    return m_status;
}
void OAICommand::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICommand::is_status_Set() const{
    return m_status_isSet;
}

bool OAICommand::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAICommand::getTimestamp() const {
    return m_timestamp;
}
void OAICommand::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICommand::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICommand::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAICommand::getType() const {
    return m_type;
}
void OAICommand::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICommand::is_type_Set() const{
    return m_type_isSet;
}

bool OAICommand::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICommand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accountid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commanddate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commandid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commandstatusname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commandtypename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_computer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hwid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
