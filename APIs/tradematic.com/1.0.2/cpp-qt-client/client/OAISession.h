/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISession.h
 *
 * 
 */

#ifndef OAISession_H
#define OAISession_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISession : public OAIObject {
public:
    OAISession();
    OAISession(QString json);
    ~OAISession() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComputer() const;
    void setComputer(const QString &computer);
    bool is_computer_Set() const;
    bool is_computer_Valid() const;

    QString getHwid() const;
    void setHwid(const QString &hwid);
    bool is_hwid_Set() const;
    bool is_hwid_Valid() const;

    QString getLogin() const;
    void setLogin(const QString &login);
    bool is_login_Set() const;
    bool is_login_Valid() const;

    QString getMode() const;
    void setMode(const QString &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QString getSessionid() const;
    void setSessionid(const QString &sessionid);
    bool is_sessionid_Set() const;
    bool is_sessionid_Valid() const;

    QString getSessionmodename() const;
    void setSessionmodename(const QString &sessionmodename);
    bool is_sessionmodename_Set() const;
    bool is_sessionmodename_Valid() const;

    QString getSessionstatusname() const;
    void setSessionstatusname(const QString &sessionstatusname);
    bool is_sessionstatusname_Set() const;
    bool is_sessionstatusname_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUserid() const;
    void setUserid(const QString &userid);
    bool is_userid_Set() const;
    bool is_userid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_computer;
    bool m_computer_isSet;
    bool m_computer_isValid;

    QString m_hwid;
    bool m_hwid_isSet;
    bool m_hwid_isValid;

    QString m_login;
    bool m_login_isSet;
    bool m_login_isValid;

    QString m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QString m_sessionid;
    bool m_sessionid_isSet;
    bool m_sessionid_isValid;

    QString m_sessionmodename;
    bool m_sessionmodename_isSet;
    bool m_sessionmodename_isValid;

    QString m_sessionstatusname;
    bool m_sessionstatusname_isSet;
    bool m_sessionstatusname_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_userid;
    bool m_userid_isSet;
    bool m_userid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISession)

#endif // OAISession_H
