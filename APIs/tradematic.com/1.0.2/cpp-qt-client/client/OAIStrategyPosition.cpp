/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStrategyPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStrategyPosition::OAIStrategyPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStrategyPosition::OAIStrategyPosition() {
    this->initializeModel();
}

OAIStrategyPosition::~OAIStrategyPosition() {}

void OAIStrategyPosition::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIStrategyPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStrategyPosition::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIStrategyPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStrategyPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QDateTime OAIStrategyPosition::getDate() const {
    return m_date;
}
void OAIStrategyPosition::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIStrategyPosition::is_date_Set() const{
    return m_date_isSet;
}

bool OAIStrategyPosition::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIStrategyPosition::getPrice() const {
    return m_price;
}
void OAIStrategyPosition::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIStrategyPosition::is_price_Set() const{
    return m_price_isSet;
}

bool OAIStrategyPosition::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIStrategyPosition::getSize() const {
    return m_size;
}
void OAIStrategyPosition::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIStrategyPosition::is_size_Set() const{
    return m_size_isSet;
}

bool OAIStrategyPosition::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIStrategyPosition::getSymbol() const {
    return m_symbol;
}
void OAIStrategyPosition::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIStrategyPosition::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIStrategyPosition::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIStrategyPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStrategyPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
