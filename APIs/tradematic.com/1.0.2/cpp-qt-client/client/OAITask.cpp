/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_isbenchmark_isSet = false;
    m_isbenchmark_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_statusupdatedate_isSet = false;
    m_statusupdatedate_isValid = false;

    m_strategyid_isSet = false;
    m_strategyid_isValid = false;

    m_taskid_isSet = false;
    m_taskid_isValid = false;

    m_usestaticdata_isSet = false;
    m_usestaticdata_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_isbenchmark_isValid = ::OpenAPI::fromJsonValue(m_isbenchmark, json[QString("isbenchmark")]);
    m_isbenchmark_isSet = !json[QString("isbenchmark")].isNull() && m_isbenchmark_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_statusupdatedate_isValid = ::OpenAPI::fromJsonValue(m_statusupdatedate, json[QString("statusupdatedate")]);
    m_statusupdatedate_isSet = !json[QString("statusupdatedate")].isNull() && m_statusupdatedate_isValid;

    m_strategyid_isValid = ::OpenAPI::fromJsonValue(m_strategyid, json[QString("strategyid")]);
    m_strategyid_isSet = !json[QString("strategyid")].isNull() && m_strategyid_isValid;

    m_taskid_isValid = ::OpenAPI::fromJsonValue(m_taskid, json[QString("taskid")]);
    m_taskid_isSet = !json[QString("taskid")].isNull() && m_taskid_isValid;

    m_usestaticdata_isValid = ::OpenAPI::fromJsonValue(m_usestaticdata, json[QString("usestaticdata")]);
    m_usestaticdata_isSet = !json[QString("usestaticdata")].isNull() && m_usestaticdata_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_isbenchmark_isSet) {
        obj.insert(QString("isbenchmark"), ::OpenAPI::toJsonValue(m_isbenchmark));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_statusupdatedate_isSet) {
        obj.insert(QString("statusupdatedate"), ::OpenAPI::toJsonValue(m_statusupdatedate));
    }
    if (m_strategyid_isSet) {
        obj.insert(QString("strategyid"), ::OpenAPI::toJsonValue(m_strategyid));
    }
    if (m_taskid_isSet) {
        obj.insert(QString("taskid"), ::OpenAPI::toJsonValue(m_taskid));
    }
    if (m_usestaticdata_isSet) {
        obj.insert(QString("usestaticdata"), ::OpenAPI::toJsonValue(m_usestaticdata));
    }
    return obj;
}

QString OAITask::getIsbenchmark() const {
    return m_isbenchmark;
}
void OAITask::setIsbenchmark(const QString &isbenchmark) {
    m_isbenchmark = isbenchmark;
    m_isbenchmark_isSet = true;
}

bool OAITask::is_isbenchmark_Set() const{
    return m_isbenchmark_isSet;
}

bool OAITask::is_isbenchmark_Valid() const{
    return m_isbenchmark_isValid;
}

QString OAITask::getName() const {
    return m_name;
}
void OAITask::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITask::is_name_Set() const{
    return m_name_isSet;
}

bool OAITask::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITask::getStatus() const {
    return m_status;
}
void OAITask::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITask::is_status_Set() const{
    return m_status_isSet;
}

bool OAITask::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAITask::getStatusupdatedate() const {
    return m_statusupdatedate;
}
void OAITask::setStatusupdatedate(const QDateTime &statusupdatedate) {
    m_statusupdatedate = statusupdatedate;
    m_statusupdatedate_isSet = true;
}

bool OAITask::is_statusupdatedate_Set() const{
    return m_statusupdatedate_isSet;
}

bool OAITask::is_statusupdatedate_Valid() const{
    return m_statusupdatedate_isValid;
}

QString OAITask::getStrategyid() const {
    return m_strategyid;
}
void OAITask::setStrategyid(const QString &strategyid) {
    m_strategyid = strategyid;
    m_strategyid_isSet = true;
}

bool OAITask::is_strategyid_Set() const{
    return m_strategyid_isSet;
}

bool OAITask::is_strategyid_Valid() const{
    return m_strategyid_isValid;
}

QString OAITask::getTaskid() const {
    return m_taskid;
}
void OAITask::setTaskid(const QString &taskid) {
    m_taskid = taskid;
    m_taskid_isSet = true;
}

bool OAITask::is_taskid_Set() const{
    return m_taskid_isSet;
}

bool OAITask::is_taskid_Valid() const{
    return m_taskid_isValid;
}

QString OAITask::getUsestaticdata() const {
    return m_usestaticdata;
}
void OAITask::setUsestaticdata(const QString &usestaticdata) {
    m_usestaticdata = usestaticdata;
    m_usestaticdata_isSet = true;
}

bool OAITask::is_usestaticdata_Set() const{
    return m_usestaticdata_isSet;
}

bool OAITask::is_usestaticdata_Valid() const{
    return m_usestaticdata_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_isbenchmark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statusupdatedate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usestaticdata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
