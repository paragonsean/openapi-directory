/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_computer_isSet = false;
    m_computer_isValid = false;

    m_hwid_isSet = false;
    m_hwid_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_sessionid_isSet = false;
    m_sessionid_isValid = false;

    m_sessionmodename_isSet = false;
    m_sessionmodename_isValid = false;

    m_sessionstatusname_isSet = false;
    m_sessionstatusname_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_userid_isSet = false;
    m_userid_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_computer_isValid = ::OpenAPI::fromJsonValue(m_computer, json[QString("computer")]);
    m_computer_isSet = !json[QString("computer")].isNull() && m_computer_isValid;

    m_hwid_isValid = ::OpenAPI::fromJsonValue(m_hwid, json[QString("hwid")]);
    m_hwid_isSet = !json[QString("hwid")].isNull() && m_hwid_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_sessionid_isValid = ::OpenAPI::fromJsonValue(m_sessionid, json[QString("sessionid")]);
    m_sessionid_isSet = !json[QString("sessionid")].isNull() && m_sessionid_isValid;

    m_sessionmodename_isValid = ::OpenAPI::fromJsonValue(m_sessionmodename, json[QString("sessionmodename")]);
    m_sessionmodename_isSet = !json[QString("sessionmodename")].isNull() && m_sessionmodename_isValid;

    m_sessionstatusname_isValid = ::OpenAPI::fromJsonValue(m_sessionstatusname, json[QString("sessionstatusname")]);
    m_sessionstatusname_isSet = !json[QString("sessionstatusname")].isNull() && m_sessionstatusname_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_userid_isValid = ::OpenAPI::fromJsonValue(m_userid, json[QString("userid")]);
    m_userid_isSet = !json[QString("userid")].isNull() && m_userid_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_computer_isSet) {
        obj.insert(QString("computer"), ::OpenAPI::toJsonValue(m_computer));
    }
    if (m_hwid_isSet) {
        obj.insert(QString("hwid"), ::OpenAPI::toJsonValue(m_hwid));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_sessionid_isSet) {
        obj.insert(QString("sessionid"), ::OpenAPI::toJsonValue(m_sessionid));
    }
    if (m_sessionmodename_isSet) {
        obj.insert(QString("sessionmodename"), ::OpenAPI::toJsonValue(m_sessionmodename));
    }
    if (m_sessionstatusname_isSet) {
        obj.insert(QString("sessionstatusname"), ::OpenAPI::toJsonValue(m_sessionstatusname));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_userid_isSet) {
        obj.insert(QString("userid"), ::OpenAPI::toJsonValue(m_userid));
    }
    return obj;
}

QString OAISession::getComputer() const {
    return m_computer;
}
void OAISession::setComputer(const QString &computer) {
    m_computer = computer;
    m_computer_isSet = true;
}

bool OAISession::is_computer_Set() const{
    return m_computer_isSet;
}

bool OAISession::is_computer_Valid() const{
    return m_computer_isValid;
}

QString OAISession::getHwid() const {
    return m_hwid;
}
void OAISession::setHwid(const QString &hwid) {
    m_hwid = hwid;
    m_hwid_isSet = true;
}

bool OAISession::is_hwid_Set() const{
    return m_hwid_isSet;
}

bool OAISession::is_hwid_Valid() const{
    return m_hwid_isValid;
}

QString OAISession::getLogin() const {
    return m_login;
}
void OAISession::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAISession::is_login_Set() const{
    return m_login_isSet;
}

bool OAISession::is_login_Valid() const{
    return m_login_isValid;
}

QString OAISession::getMode() const {
    return m_mode;
}
void OAISession::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAISession::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAISession::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAISession::getSessionid() const {
    return m_sessionid;
}
void OAISession::setSessionid(const QString &sessionid) {
    m_sessionid = sessionid;
    m_sessionid_isSet = true;
}

bool OAISession::is_sessionid_Set() const{
    return m_sessionid_isSet;
}

bool OAISession::is_sessionid_Valid() const{
    return m_sessionid_isValid;
}

QString OAISession::getSessionmodename() const {
    return m_sessionmodename;
}
void OAISession::setSessionmodename(const QString &sessionmodename) {
    m_sessionmodename = sessionmodename;
    m_sessionmodename_isSet = true;
}

bool OAISession::is_sessionmodename_Set() const{
    return m_sessionmodename_isSet;
}

bool OAISession::is_sessionmodename_Valid() const{
    return m_sessionmodename_isValid;
}

QString OAISession::getSessionstatusname() const {
    return m_sessionstatusname;
}
void OAISession::setSessionstatusname(const QString &sessionstatusname) {
    m_sessionstatusname = sessionstatusname;
    m_sessionstatusname_isSet = true;
}

bool OAISession::is_sessionstatusname_Set() const{
    return m_sessionstatusname_isSet;
}

bool OAISession::is_sessionstatusname_Valid() const{
    return m_sessionstatusname_isValid;
}

QString OAISession::getStatus() const {
    return m_status;
}
void OAISession::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISession::is_status_Set() const{
    return m_status_isSet;
}

bool OAISession::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAISession::getTimestamp() const {
    return m_timestamp;
}
void OAISession::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISession::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISession::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAISession::getType() const {
    return m_type;
}
void OAISession::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISession::is_type_Set() const{
    return m_type_isSet;
}

bool OAISession::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISession::getUserid() const {
    return m_userid;
}
void OAISession::setUserid(const QString &userid) {
    m_userid = userid;
    m_userid_isSet = true;
}

bool OAISession::is_userid_Set() const{
    return m_userid_isSet;
}

bool OAISession::is_userid_Valid() const{
    return m_userid_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hwid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessionid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessionmodename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessionstatusname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
