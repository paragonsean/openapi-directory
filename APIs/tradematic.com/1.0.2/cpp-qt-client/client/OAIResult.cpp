/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResult::OAIResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResult::OAIResult() {
    this->initializeModel();
}

OAIResult::~OAIResult() {}

void OAIResult::initializeModel() {

    m_c_isSet = false;
    m_c_isValid = false;

    m_h_isSet = false;
    m_h_isValid = false;

    m_l_isSet = false;
    m_l_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_o_isSet = false;
    m_o_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;

    m_v_isSet = false;
    m_v_isValid = false;
}

void OAIResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResult::fromJsonObject(QJsonObject json) {

    m_c_isValid = ::OpenAPI::fromJsonValue(m_c, json[QString("c")]);
    m_c_isSet = !json[QString("c")].isNull() && m_c_isValid;

    m_h_isValid = ::OpenAPI::fromJsonValue(m_h, json[QString("h")]);
    m_h_isSet = !json[QString("h")].isNull() && m_h_isValid;

    m_l_isValid = ::OpenAPI::fromJsonValue(m_l, json[QString("l")]);
    m_l_isSet = !json[QString("l")].isNull() && m_l_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("n")]);
    m_n_isSet = !json[QString("n")].isNull() && m_n_isValid;

    m_o_isValid = ::OpenAPI::fromJsonValue(m_o, json[QString("o")]);
    m_o_isSet = !json[QString("o")].isNull() && m_o_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;

    m_v_isValid = ::OpenAPI::fromJsonValue(m_v, json[QString("v")]);
    m_v_isSet = !json[QString("v")].isNull() && m_v_isValid;
}

QString OAIResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResult::asJsonObject() const {
    QJsonObject obj;
    if (m_c_isSet) {
        obj.insert(QString("c"), ::OpenAPI::toJsonValue(m_c));
    }
    if (m_h_isSet) {
        obj.insert(QString("h"), ::OpenAPI::toJsonValue(m_h));
    }
    if (m_l_isSet) {
        obj.insert(QString("l"), ::OpenAPI::toJsonValue(m_l));
    }
    if (m_n_isSet) {
        obj.insert(QString("n"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_o_isSet) {
        obj.insert(QString("o"), ::OpenAPI::toJsonValue(m_o));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::OpenAPI::toJsonValue(m_t));
    }
    if (m_v_isSet) {
        obj.insert(QString("v"), ::OpenAPI::toJsonValue(m_v));
    }
    return obj;
}

double OAIResult::getC() const {
    return m_c;
}
void OAIResult::setC(const double &c) {
    m_c = c;
    m_c_isSet = true;
}

bool OAIResult::is_c_Set() const{
    return m_c_isSet;
}

bool OAIResult::is_c_Valid() const{
    return m_c_isValid;
}

double OAIResult::getH() const {
    return m_h;
}
void OAIResult::setH(const double &h) {
    m_h = h;
    m_h_isSet = true;
}

bool OAIResult::is_h_Set() const{
    return m_h_isSet;
}

bool OAIResult::is_h_Valid() const{
    return m_h_isValid;
}

double OAIResult::getL() const {
    return m_l;
}
void OAIResult::setL(const double &l) {
    m_l = l;
    m_l_isSet = true;
}

bool OAIResult::is_l_Set() const{
    return m_l_isSet;
}

bool OAIResult::is_l_Valid() const{
    return m_l_isValid;
}

qint32 OAIResult::getN() const {
    return m_n;
}
void OAIResult::setN(const qint32 &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAIResult::is_n_Set() const{
    return m_n_isSet;
}

bool OAIResult::is_n_Valid() const{
    return m_n_isValid;
}

double OAIResult::getO() const {
    return m_o;
}
void OAIResult::setO(const double &o) {
    m_o = o;
    m_o_isSet = true;
}

bool OAIResult::is_o_Set() const{
    return m_o_isSet;
}

bool OAIResult::is_o_Valid() const{
    return m_o_isValid;
}

qint32 OAIResult::getT() const {
    return m_t;
}
void OAIResult::setT(const qint32 &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAIResult::is_t_Set() const{
    return m_t_isSet;
}

bool OAIResult::is_t_Valid() const{
    return m_t_isValid;
}

qint32 OAIResult::getV() const {
    return m_v;
}
void OAIResult::setV(const qint32 &v) {
    m_v = v;
    m_v_isSet = true;
}

bool OAIResult::is_v_Set() const{
    return m_v_isSet;
}

bool OAIResult::is_v_Valid() const{
    return m_v_isValid;
}

bool OAIResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
