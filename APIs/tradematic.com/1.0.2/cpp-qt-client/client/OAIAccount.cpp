/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_accountid_isSet = false;
    m_accountid_isValid = false;

    m_accounttypename_isSet = false;
    m_accounttypename_isValid = false;

    m_cash_isSet = false;
    m_cash_isValid = false;

    m_change_isSet = false;
    m_change_isValid = false;

    m_changepercent_isSet = false;
    m_changepercent_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_computer_isSet = false;
    m_computer_isValid = false;

    m_currencyid_isSet = false;
    m_currencyid_isValid = false;

    m_currencytext_isSet = false;
    m_currencytext_isValid = false;

    m_hwid_isSet = false;
    m_hwid_isValid = false;

    m_positions_isSet = false;
    m_positions_isValid = false;

    m_positionspercent_isSet = false;
    m_positionspercent_isValid = false;

    m_sessionid_isSet = false;
    m_sessionid_isValid = false;

    m_r_typeid_isSet = false;
    m_r_typeid_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_accountid_isValid = ::OpenAPI::fromJsonValue(m_accountid, json[QString("accountid")]);
    m_accountid_isSet = !json[QString("accountid")].isNull() && m_accountid_isValid;

    m_accounttypename_isValid = ::OpenAPI::fromJsonValue(m_accounttypename, json[QString("accounttypename")]);
    m_accounttypename_isSet = !json[QString("accounttypename")].isNull() && m_accounttypename_isValid;

    m_cash_isValid = ::OpenAPI::fromJsonValue(m_cash, json[QString("cash")]);
    m_cash_isSet = !json[QString("cash")].isNull() && m_cash_isValid;

    m_change_isValid = ::OpenAPI::fromJsonValue(m_change, json[QString("change")]);
    m_change_isSet = !json[QString("change")].isNull() && m_change_isValid;

    m_changepercent_isValid = ::OpenAPI::fromJsonValue(m_changepercent, json[QString("changepercent")]);
    m_changepercent_isSet = !json[QString("changepercent")].isNull() && m_changepercent_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_computer_isValid = ::OpenAPI::fromJsonValue(m_computer, json[QString("computer")]);
    m_computer_isSet = !json[QString("computer")].isNull() && m_computer_isValid;

    m_currencyid_isValid = ::OpenAPI::fromJsonValue(m_currencyid, json[QString("currencyid")]);
    m_currencyid_isSet = !json[QString("currencyid")].isNull() && m_currencyid_isValid;

    m_currencytext_isValid = ::OpenAPI::fromJsonValue(m_currencytext, json[QString("currencytext")]);
    m_currencytext_isSet = !json[QString("currencytext")].isNull() && m_currencytext_isValid;

    m_hwid_isValid = ::OpenAPI::fromJsonValue(m_hwid, json[QString("hwid")]);
    m_hwid_isSet = !json[QString("hwid")].isNull() && m_hwid_isValid;

    m_positions_isValid = ::OpenAPI::fromJsonValue(m_positions, json[QString("positions")]);
    m_positions_isSet = !json[QString("positions")].isNull() && m_positions_isValid;

    m_positionspercent_isValid = ::OpenAPI::fromJsonValue(m_positionspercent, json[QString("positionspercent")]);
    m_positionspercent_isSet = !json[QString("positionspercent")].isNull() && m_positionspercent_isValid;

    m_sessionid_isValid = ::OpenAPI::fromJsonValue(m_sessionid, json[QString("sessionid")]);
    m_sessionid_isSet = !json[QString("sessionid")].isNull() && m_sessionid_isValid;

    m_r_typeid_isValid = ::OpenAPI::fromJsonValue(m_r_typeid, json[QString("typeid")]);
    m_r_typeid_isSet = !json[QString("typeid")].isNull() && m_r_typeid_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_accountid_isSet) {
        obj.insert(QString("accountid"), ::OpenAPI::toJsonValue(m_accountid));
    }
    if (m_accounttypename_isSet) {
        obj.insert(QString("accounttypename"), ::OpenAPI::toJsonValue(m_accounttypename));
    }
    if (m_cash_isSet) {
        obj.insert(QString("cash"), ::OpenAPI::toJsonValue(m_cash));
    }
    if (m_change_isSet) {
        obj.insert(QString("change"), ::OpenAPI::toJsonValue(m_change));
    }
    if (m_changepercent_isSet) {
        obj.insert(QString("changepercent"), ::OpenAPI::toJsonValue(m_changepercent));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_computer_isSet) {
        obj.insert(QString("computer"), ::OpenAPI::toJsonValue(m_computer));
    }
    if (m_currencyid_isSet) {
        obj.insert(QString("currencyid"), ::OpenAPI::toJsonValue(m_currencyid));
    }
    if (m_currencytext_isSet) {
        obj.insert(QString("currencytext"), ::OpenAPI::toJsonValue(m_currencytext));
    }
    if (m_hwid_isSet) {
        obj.insert(QString("hwid"), ::OpenAPI::toJsonValue(m_hwid));
    }
    if (m_positions.size() > 0) {
        obj.insert(QString("positions"), ::OpenAPI::toJsonValue(m_positions));
    }
    if (m_positionspercent.size() > 0) {
        obj.insert(QString("positionspercent"), ::OpenAPI::toJsonValue(m_positionspercent));
    }
    if (m_sessionid_isSet) {
        obj.insert(QString("sessionid"), ::OpenAPI::toJsonValue(m_sessionid));
    }
    if (m_r_typeid_isSet) {
        obj.insert(QString("typeid"), ::OpenAPI::toJsonValue(m_r_typeid));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAccount::getAccount() const {
    return m_account;
}
void OAIAccount::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIAccount::is_account_Set() const{
    return m_account_isSet;
}

bool OAIAccount::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIAccount::getAccountid() const {
    return m_accountid;
}
void OAIAccount::setAccountid(const QString &accountid) {
    m_accountid = accountid;
    m_accountid_isSet = true;
}

bool OAIAccount::is_accountid_Set() const{
    return m_accountid_isSet;
}

bool OAIAccount::is_accountid_Valid() const{
    return m_accountid_isValid;
}

QString OAIAccount::getAccounttypename() const {
    return m_accounttypename;
}
void OAIAccount::setAccounttypename(const QString &accounttypename) {
    m_accounttypename = accounttypename;
    m_accounttypename_isSet = true;
}

bool OAIAccount::is_accounttypename_Set() const{
    return m_accounttypename_isSet;
}

bool OAIAccount::is_accounttypename_Valid() const{
    return m_accounttypename_isValid;
}

QString OAIAccount::getCash() const {
    return m_cash;
}
void OAIAccount::setCash(const QString &cash) {
    m_cash = cash;
    m_cash_isSet = true;
}

bool OAIAccount::is_cash_Set() const{
    return m_cash_isSet;
}

bool OAIAccount::is_cash_Valid() const{
    return m_cash_isValid;
}

QString OAIAccount::getChange() const {
    return m_change;
}
void OAIAccount::setChange(const QString &change) {
    m_change = change;
    m_change_isSet = true;
}

bool OAIAccount::is_change_Set() const{
    return m_change_isSet;
}

bool OAIAccount::is_change_Valid() const{
    return m_change_isValid;
}

QString OAIAccount::getChangepercent() const {
    return m_changepercent;
}
void OAIAccount::setChangepercent(const QString &changepercent) {
    m_changepercent = changepercent;
    m_changepercent_isSet = true;
}

bool OAIAccount::is_changepercent_Set() const{
    return m_changepercent_isSet;
}

bool OAIAccount::is_changepercent_Valid() const{
    return m_changepercent_isValid;
}

QString OAIAccount::getComments() const {
    return m_comments;
}
void OAIAccount::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIAccount::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIAccount::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIAccount::getComputer() const {
    return m_computer;
}
void OAIAccount::setComputer(const QString &computer) {
    m_computer = computer;
    m_computer_isSet = true;
}

bool OAIAccount::is_computer_Set() const{
    return m_computer_isSet;
}

bool OAIAccount::is_computer_Valid() const{
    return m_computer_isValid;
}

QString OAIAccount::getCurrencyid() const {
    return m_currencyid;
}
void OAIAccount::setCurrencyid(const QString &currencyid) {
    m_currencyid = currencyid;
    m_currencyid_isSet = true;
}

bool OAIAccount::is_currencyid_Set() const{
    return m_currencyid_isSet;
}

bool OAIAccount::is_currencyid_Valid() const{
    return m_currencyid_isValid;
}

QString OAIAccount::getCurrencytext() const {
    return m_currencytext;
}
void OAIAccount::setCurrencytext(const QString &currencytext) {
    m_currencytext = currencytext;
    m_currencytext_isSet = true;
}

bool OAIAccount::is_currencytext_Set() const{
    return m_currencytext_isSet;
}

bool OAIAccount::is_currencytext_Valid() const{
    return m_currencytext_isValid;
}

QString OAIAccount::getHwid() const {
    return m_hwid;
}
void OAIAccount::setHwid(const QString &hwid) {
    m_hwid = hwid;
    m_hwid_isSet = true;
}

bool OAIAccount::is_hwid_Set() const{
    return m_hwid_isSet;
}

bool OAIAccount::is_hwid_Valid() const{
    return m_hwid_isValid;
}

QMap<QString, QString> OAIAccount::getPositions() const {
    return m_positions;
}
void OAIAccount::setPositions(const QMap<QString, QString> &positions) {
    m_positions = positions;
    m_positions_isSet = true;
}

bool OAIAccount::is_positions_Set() const{
    return m_positions_isSet;
}

bool OAIAccount::is_positions_Valid() const{
    return m_positions_isValid;
}

QMap<QString, QString> OAIAccount::getPositionspercent() const {
    return m_positionspercent;
}
void OAIAccount::setPositionspercent(const QMap<QString, QString> &positionspercent) {
    m_positionspercent = positionspercent;
    m_positionspercent_isSet = true;
}

bool OAIAccount::is_positionspercent_Set() const{
    return m_positionspercent_isSet;
}

bool OAIAccount::is_positionspercent_Valid() const{
    return m_positionspercent_isValid;
}

QString OAIAccount::getSessionid() const {
    return m_sessionid;
}
void OAIAccount::setSessionid(const QString &sessionid) {
    m_sessionid = sessionid;
    m_sessionid_isSet = true;
}

bool OAIAccount::is_sessionid_Set() const{
    return m_sessionid_isSet;
}

bool OAIAccount::is_sessionid_Valid() const{
    return m_sessionid_isValid;
}

QString OAIAccount::getRTypeid() const {
    return m_r_typeid;
}
void OAIAccount::setRTypeid(const QString &r_typeid) {
    m_r_typeid = r_typeid;
    m_r_typeid_isSet = true;
}

bool OAIAccount::is_r_typeid_Set() const{
    return m_r_typeid_isSet;
}

bool OAIAccount::is_r_typeid_Valid() const{
    return m_r_typeid_isValid;
}

QString OAIAccount::getValue() const {
    return m_value;
}
void OAIAccount::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAccount::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAccount::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accountid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounttypename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changepercent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_computer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencytext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hwid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_positionspercent.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessionid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_typeid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
