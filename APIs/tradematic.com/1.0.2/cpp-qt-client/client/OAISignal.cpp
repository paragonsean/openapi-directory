/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignal::OAISignal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignal::OAISignal() {
    this->initializeModel();
}

OAISignal::~OAISignal() {}

void OAISignal::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_shares_isSet = false;
    m_shares_isValid = false;

    m_signalid_isSet = false;
    m_signalid_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISignal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignal::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_shares_isValid = ::OpenAPI::fromJsonValue(m_shares, json[QString("shares")]);
    m_shares_isSet = !json[QString("shares")].isNull() && m_shares_isValid;

    m_signalid_isValid = ::OpenAPI::fromJsonValue(m_signalid, json[QString("signalid")]);
    m_signalid_isSet = !json[QString("signalid")].isNull() && m_signalid_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISignal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignal::asJsonObject() const {
    QJsonObject obj;
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_shares_isSet) {
        obj.insert(QString("shares"), ::OpenAPI::toJsonValue(m_shares));
    }
    if (m_signalid_isSet) {
        obj.insert(QString("signalid"), ::OpenAPI::toJsonValue(m_signalid));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISignal::getPosition() const {
    return m_position;
}
void OAISignal::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAISignal::is_position_Set() const{
    return m_position_isSet;
}

bool OAISignal::is_position_Valid() const{
    return m_position_isValid;
}

QString OAISignal::getPrice() const {
    return m_price;
}
void OAISignal::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAISignal::is_price_Set() const{
    return m_price_isSet;
}

bool OAISignal::is_price_Valid() const{
    return m_price_isValid;
}

QString OAISignal::getShares() const {
    return m_shares;
}
void OAISignal::setShares(const QString &shares) {
    m_shares = shares;
    m_shares_isSet = true;
}

bool OAISignal::is_shares_Set() const{
    return m_shares_isSet;
}

bool OAISignal::is_shares_Valid() const{
    return m_shares_isValid;
}

QString OAISignal::getSignalid() const {
    return m_signalid;
}
void OAISignal::setSignalid(const QString &signalid) {
    m_signalid = signalid;
    m_signalid_isSet = true;
}

bool OAISignal::is_signalid_Set() const{
    return m_signalid_isSet;
}

bool OAISignal::is_signalid_Valid() const{
    return m_signalid_isValid;
}

QString OAISignal::getSize() const {
    return m_size;
}
void OAISignal::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISignal::is_size_Set() const{
    return m_size_isSet;
}

bool OAISignal::is_size_Valid() const{
    return m_size_isValid;
}

QString OAISignal::getSymbol() const {
    return m_symbol;
}
void OAISignal::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAISignal::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAISignal::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QDateTime OAISignal::getTimestamp() const {
    return m_timestamp;
}
void OAISignal::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISignal::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISignal::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAISignal::getType() const {
    return m_type;
}
void OAISignal::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISignal::is_type_Set() const{
    return m_type_isSet;
}

bool OAISignal::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISignal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
