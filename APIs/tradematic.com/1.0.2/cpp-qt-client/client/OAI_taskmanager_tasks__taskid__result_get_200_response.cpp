/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_taskmanager_tasks__taskid__result_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_taskmanager_tasks__taskid__result_get_200_response::OAI_taskmanager_tasks__taskid__result_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_taskmanager_tasks__taskid__result_get_200_response::OAI_taskmanager_tasks__taskid__result_get_200_response() {
    this->initializeModel();
}

OAI_taskmanager_tasks__taskid__result_get_200_response::~OAI_taskmanager_tasks__taskid__result_get_200_response() {}

void OAI_taskmanager_tasks__taskid__result_get_200_response::initializeModel() {

    m_bymonths_csv_isSet = false;
    m_bymonths_csv_isValid = false;

    m_bymonths_png_isSet = false;
    m_bymonths_png_isValid = false;

    m_byquarters_csv_isSet = false;
    m_byquarters_csv_isValid = false;

    m_byquarters_png_isSet = false;
    m_byquarters_png_isValid = false;

    m_byyears_csv_isSet = false;
    m_byyears_csv_isValid = false;

    m_byyears_png_isSet = false;
    m_byyears_png_isValid = false;

    m_contribution_csv_isSet = false;
    m_contribution_csv_isValid = false;

    m_contribution_png_isSet = false;
    m_contribution_png_isValid = false;

    m_drawdown_csv_isSet = false;
    m_drawdown_csv_isValid = false;

    m_drawdown_png_isSet = false;
    m_drawdown_png_isValid = false;

    m_equity_csv_isSet = false;
    m_equity_csv_isValid = false;

    m_equity_png_isSet = false;
    m_equity_png_isValid = false;

    m_equitypct_csv_isSet = false;
    m_equitypct_csv_isValid = false;

    m_equitypct_png_isSet = false;
    m_equitypct_png_isValid = false;

    m_equitypctnofill_csv_isSet = false;
    m_equitypctnofill_csv_isValid = false;

    m_equitypctnofill_png_isSet = false;
    m_equitypctnofill_png_isValid = false;

    m_equitypctsm_isSet = false;
    m_equitypctsm_isValid = false;

    m_equitypctsm_csv_isSet = false;
    m_equitypctsm_csv_isValid = false;

    m_equitypctsm_png_isSet = false;
    m_equitypctsm_png_isValid = false;

    m_performance_csv_isSet = false;
    m_performance_csv_isValid = false;

    m_performance_png_isSet = false;
    m_performance_png_isValid = false;

    m_trades_csv_isSet = false;
    m_trades_csv_isValid = false;

    m_trades_png_isSet = false;
    m_trades_png_isValid = false;
}

void OAI_taskmanager_tasks__taskid__result_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_taskmanager_tasks__taskid__result_get_200_response::fromJsonObject(QJsonObject json) {

    m_bymonths_csv_isValid = ::OpenAPI::fromJsonValue(m_bymonths_csv, json[QString("bymonths_csv")]);
    m_bymonths_csv_isSet = !json[QString("bymonths_csv")].isNull() && m_bymonths_csv_isValid;

    m_bymonths_png_isValid = ::OpenAPI::fromJsonValue(m_bymonths_png, json[QString("bymonths_png")]);
    m_bymonths_png_isSet = !json[QString("bymonths_png")].isNull() && m_bymonths_png_isValid;

    m_byquarters_csv_isValid = ::OpenAPI::fromJsonValue(m_byquarters_csv, json[QString("byquarters_csv")]);
    m_byquarters_csv_isSet = !json[QString("byquarters_csv")].isNull() && m_byquarters_csv_isValid;

    m_byquarters_png_isValid = ::OpenAPI::fromJsonValue(m_byquarters_png, json[QString("byquarters_png")]);
    m_byquarters_png_isSet = !json[QString("byquarters_png")].isNull() && m_byquarters_png_isValid;

    m_byyears_csv_isValid = ::OpenAPI::fromJsonValue(m_byyears_csv, json[QString("byyears_csv")]);
    m_byyears_csv_isSet = !json[QString("byyears_csv")].isNull() && m_byyears_csv_isValid;

    m_byyears_png_isValid = ::OpenAPI::fromJsonValue(m_byyears_png, json[QString("byyears_png")]);
    m_byyears_png_isSet = !json[QString("byyears_png")].isNull() && m_byyears_png_isValid;

    m_contribution_csv_isValid = ::OpenAPI::fromJsonValue(m_contribution_csv, json[QString("contribution_csv")]);
    m_contribution_csv_isSet = !json[QString("contribution_csv")].isNull() && m_contribution_csv_isValid;

    m_contribution_png_isValid = ::OpenAPI::fromJsonValue(m_contribution_png, json[QString("contribution_png")]);
    m_contribution_png_isSet = !json[QString("contribution_png")].isNull() && m_contribution_png_isValid;

    m_drawdown_csv_isValid = ::OpenAPI::fromJsonValue(m_drawdown_csv, json[QString("drawdown_csv")]);
    m_drawdown_csv_isSet = !json[QString("drawdown_csv")].isNull() && m_drawdown_csv_isValid;

    m_drawdown_png_isValid = ::OpenAPI::fromJsonValue(m_drawdown_png, json[QString("drawdown_png")]);
    m_drawdown_png_isSet = !json[QString("drawdown_png")].isNull() && m_drawdown_png_isValid;

    m_equity_csv_isValid = ::OpenAPI::fromJsonValue(m_equity_csv, json[QString("equity_csv")]);
    m_equity_csv_isSet = !json[QString("equity_csv")].isNull() && m_equity_csv_isValid;

    m_equity_png_isValid = ::OpenAPI::fromJsonValue(m_equity_png, json[QString("equity_png")]);
    m_equity_png_isSet = !json[QString("equity_png")].isNull() && m_equity_png_isValid;

    m_equitypct_csv_isValid = ::OpenAPI::fromJsonValue(m_equitypct_csv, json[QString("equitypct_csv")]);
    m_equitypct_csv_isSet = !json[QString("equitypct_csv")].isNull() && m_equitypct_csv_isValid;

    m_equitypct_png_isValid = ::OpenAPI::fromJsonValue(m_equitypct_png, json[QString("equitypct_png")]);
    m_equitypct_png_isSet = !json[QString("equitypct_png")].isNull() && m_equitypct_png_isValid;

    m_equitypctnofill_csv_isValid = ::OpenAPI::fromJsonValue(m_equitypctnofill_csv, json[QString("equitypctnofill_csv")]);
    m_equitypctnofill_csv_isSet = !json[QString("equitypctnofill_csv")].isNull() && m_equitypctnofill_csv_isValid;

    m_equitypctnofill_png_isValid = ::OpenAPI::fromJsonValue(m_equitypctnofill_png, json[QString("equitypctnofill_png")]);
    m_equitypctnofill_png_isSet = !json[QString("equitypctnofill_png")].isNull() && m_equitypctnofill_png_isValid;

    m_equitypctsm_isValid = ::OpenAPI::fromJsonValue(m_equitypctsm, json[QString("equitypctsm")]);
    m_equitypctsm_isSet = !json[QString("equitypctsm")].isNull() && m_equitypctsm_isValid;

    m_equitypctsm_csv_isValid = ::OpenAPI::fromJsonValue(m_equitypctsm_csv, json[QString("equitypctsm_csv")]);
    m_equitypctsm_csv_isSet = !json[QString("equitypctsm_csv")].isNull() && m_equitypctsm_csv_isValid;

    m_equitypctsm_png_isValid = ::OpenAPI::fromJsonValue(m_equitypctsm_png, json[QString("equitypctsm_png")]);
    m_equitypctsm_png_isSet = !json[QString("equitypctsm_png")].isNull() && m_equitypctsm_png_isValid;

    m_performance_csv_isValid = ::OpenAPI::fromJsonValue(m_performance_csv, json[QString("performance_csv")]);
    m_performance_csv_isSet = !json[QString("performance_csv")].isNull() && m_performance_csv_isValid;

    m_performance_png_isValid = ::OpenAPI::fromJsonValue(m_performance_png, json[QString("performance_png")]);
    m_performance_png_isSet = !json[QString("performance_png")].isNull() && m_performance_png_isValid;

    m_trades_csv_isValid = ::OpenAPI::fromJsonValue(m_trades_csv, json[QString("trades_csv")]);
    m_trades_csv_isSet = !json[QString("trades_csv")].isNull() && m_trades_csv_isValid;

    m_trades_png_isValid = ::OpenAPI::fromJsonValue(m_trades_png, json[QString("trades_png")]);
    m_trades_png_isSet = !json[QString("trades_png")].isNull() && m_trades_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_taskmanager_tasks__taskid__result_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_bymonths_csv_isSet) {
        obj.insert(QString("bymonths_csv"), ::OpenAPI::toJsonValue(m_bymonths_csv));
    }
    if (m_bymonths_png_isSet) {
        obj.insert(QString("bymonths_png"), ::OpenAPI::toJsonValue(m_bymonths_png));
    }
    if (m_byquarters_csv_isSet) {
        obj.insert(QString("byquarters_csv"), ::OpenAPI::toJsonValue(m_byquarters_csv));
    }
    if (m_byquarters_png_isSet) {
        obj.insert(QString("byquarters_png"), ::OpenAPI::toJsonValue(m_byquarters_png));
    }
    if (m_byyears_csv_isSet) {
        obj.insert(QString("byyears_csv"), ::OpenAPI::toJsonValue(m_byyears_csv));
    }
    if (m_byyears_png_isSet) {
        obj.insert(QString("byyears_png"), ::OpenAPI::toJsonValue(m_byyears_png));
    }
    if (m_contribution_csv_isSet) {
        obj.insert(QString("contribution_csv"), ::OpenAPI::toJsonValue(m_contribution_csv));
    }
    if (m_contribution_png_isSet) {
        obj.insert(QString("contribution_png"), ::OpenAPI::toJsonValue(m_contribution_png));
    }
    if (m_drawdown_csv_isSet) {
        obj.insert(QString("drawdown_csv"), ::OpenAPI::toJsonValue(m_drawdown_csv));
    }
    if (m_drawdown_png_isSet) {
        obj.insert(QString("drawdown_png"), ::OpenAPI::toJsonValue(m_drawdown_png));
    }
    if (m_equity_csv_isSet) {
        obj.insert(QString("equity_csv"), ::OpenAPI::toJsonValue(m_equity_csv));
    }
    if (m_equity_png_isSet) {
        obj.insert(QString("equity_png"), ::OpenAPI::toJsonValue(m_equity_png));
    }
    if (m_equitypct_csv_isSet) {
        obj.insert(QString("equitypct_csv"), ::OpenAPI::toJsonValue(m_equitypct_csv));
    }
    if (m_equitypct_png_isSet) {
        obj.insert(QString("equitypct_png"), ::OpenAPI::toJsonValue(m_equitypct_png));
    }
    if (m_equitypctnofill_csv_isSet) {
        obj.insert(QString("equitypctnofill_csv"), ::OpenAPI::toJsonValue(m_equitypctnofill_csv));
    }
    if (m_equitypctnofill_png_isSet) {
        obj.insert(QString("equitypctnofill_png"), ::OpenAPI::toJsonValue(m_equitypctnofill_png));
    }
    if (m_equitypctsm_isSet) {
        obj.insert(QString("equitypctsm"), ::OpenAPI::toJsonValue(m_equitypctsm));
    }
    if (m_equitypctsm_csv_isSet) {
        obj.insert(QString("equitypctsm_csv"), ::OpenAPI::toJsonValue(m_equitypctsm_csv));
    }
    if (m_equitypctsm_png_isSet) {
        obj.insert(QString("equitypctsm_png"), ::OpenAPI::toJsonValue(m_equitypctsm_png));
    }
    if (m_performance_csv_isSet) {
        obj.insert(QString("performance_csv"), ::OpenAPI::toJsonValue(m_performance_csv));
    }
    if (m_performance_png_isSet) {
        obj.insert(QString("performance_png"), ::OpenAPI::toJsonValue(m_performance_png));
    }
    if (m_trades_csv_isSet) {
        obj.insert(QString("trades_csv"), ::OpenAPI::toJsonValue(m_trades_csv));
    }
    if (m_trades_png_isSet) {
        obj.insert(QString("trades_png"), ::OpenAPI::toJsonValue(m_trades_png));
    }
    return obj;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getBymonthsCsv() const {
    return m_bymonths_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setBymonthsCsv(const QString &bymonths_csv) {
    m_bymonths_csv = bymonths_csv;
    m_bymonths_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_bymonths_csv_Set() const{
    return m_bymonths_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_bymonths_csv_Valid() const{
    return m_bymonths_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getBymonthsPng() const {
    return m_bymonths_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setBymonthsPng(const QString &bymonths_png) {
    m_bymonths_png = bymonths_png;
    m_bymonths_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_bymonths_png_Set() const{
    return m_bymonths_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_bymonths_png_Valid() const{
    return m_bymonths_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getByquartersCsv() const {
    return m_byquarters_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setByquartersCsv(const QString &byquarters_csv) {
    m_byquarters_csv = byquarters_csv;
    m_byquarters_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_byquarters_csv_Set() const{
    return m_byquarters_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_byquarters_csv_Valid() const{
    return m_byquarters_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getByquartersPng() const {
    return m_byquarters_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setByquartersPng(const QString &byquarters_png) {
    m_byquarters_png = byquarters_png;
    m_byquarters_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_byquarters_png_Set() const{
    return m_byquarters_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_byquarters_png_Valid() const{
    return m_byquarters_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getByyearsCsv() const {
    return m_byyears_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setByyearsCsv(const QString &byyears_csv) {
    m_byyears_csv = byyears_csv;
    m_byyears_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_byyears_csv_Set() const{
    return m_byyears_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_byyears_csv_Valid() const{
    return m_byyears_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getByyearsPng() const {
    return m_byyears_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setByyearsPng(const QString &byyears_png) {
    m_byyears_png = byyears_png;
    m_byyears_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_byyears_png_Set() const{
    return m_byyears_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_byyears_png_Valid() const{
    return m_byyears_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getContributionCsv() const {
    return m_contribution_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setContributionCsv(const QString &contribution_csv) {
    m_contribution_csv = contribution_csv;
    m_contribution_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_contribution_csv_Set() const{
    return m_contribution_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_contribution_csv_Valid() const{
    return m_contribution_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getContributionPng() const {
    return m_contribution_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setContributionPng(const QString &contribution_png) {
    m_contribution_png = contribution_png;
    m_contribution_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_contribution_png_Set() const{
    return m_contribution_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_contribution_png_Valid() const{
    return m_contribution_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getDrawdownCsv() const {
    return m_drawdown_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setDrawdownCsv(const QString &drawdown_csv) {
    m_drawdown_csv = drawdown_csv;
    m_drawdown_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_drawdown_csv_Set() const{
    return m_drawdown_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_drawdown_csv_Valid() const{
    return m_drawdown_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getDrawdownPng() const {
    return m_drawdown_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setDrawdownPng(const QString &drawdown_png) {
    m_drawdown_png = drawdown_png;
    m_drawdown_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_drawdown_png_Set() const{
    return m_drawdown_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_drawdown_png_Valid() const{
    return m_drawdown_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquityCsv() const {
    return m_equity_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquityCsv(const QString &equity_csv) {
    m_equity_csv = equity_csv;
    m_equity_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equity_csv_Set() const{
    return m_equity_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equity_csv_Valid() const{
    return m_equity_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquityPng() const {
    return m_equity_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquityPng(const QString &equity_png) {
    m_equity_png = equity_png;
    m_equity_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equity_png_Set() const{
    return m_equity_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equity_png_Valid() const{
    return m_equity_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquitypctCsv() const {
    return m_equitypct_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquitypctCsv(const QString &equitypct_csv) {
    m_equitypct_csv = equitypct_csv;
    m_equitypct_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypct_csv_Set() const{
    return m_equitypct_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypct_csv_Valid() const{
    return m_equitypct_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquitypctPng() const {
    return m_equitypct_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquitypctPng(const QString &equitypct_png) {
    m_equitypct_png = equitypct_png;
    m_equitypct_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypct_png_Set() const{
    return m_equitypct_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypct_png_Valid() const{
    return m_equitypct_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquitypctnofillCsv() const {
    return m_equitypctnofill_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquitypctnofillCsv(const QString &equitypctnofill_csv) {
    m_equitypctnofill_csv = equitypctnofill_csv;
    m_equitypctnofill_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctnofill_csv_Set() const{
    return m_equitypctnofill_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctnofill_csv_Valid() const{
    return m_equitypctnofill_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquitypctnofillPng() const {
    return m_equitypctnofill_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquitypctnofillPng(const QString &equitypctnofill_png) {
    m_equitypctnofill_png = equitypctnofill_png;
    m_equitypctnofill_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctnofill_png_Set() const{
    return m_equitypctnofill_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctnofill_png_Valid() const{
    return m_equitypctnofill_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquitypctsm() const {
    return m_equitypctsm;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquitypctsm(const QString &equitypctsm) {
    m_equitypctsm = equitypctsm;
    m_equitypctsm_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctsm_Set() const{
    return m_equitypctsm_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctsm_Valid() const{
    return m_equitypctsm_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquitypctsmCsv() const {
    return m_equitypctsm_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquitypctsmCsv(const QString &equitypctsm_csv) {
    m_equitypctsm_csv = equitypctsm_csv;
    m_equitypctsm_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctsm_csv_Set() const{
    return m_equitypctsm_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctsm_csv_Valid() const{
    return m_equitypctsm_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getEquitypctsmPng() const {
    return m_equitypctsm_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setEquitypctsmPng(const QString &equitypctsm_png) {
    m_equitypctsm_png = equitypctsm_png;
    m_equitypctsm_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctsm_png_Set() const{
    return m_equitypctsm_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_equitypctsm_png_Valid() const{
    return m_equitypctsm_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getPerformanceCsv() const {
    return m_performance_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setPerformanceCsv(const QString &performance_csv) {
    m_performance_csv = performance_csv;
    m_performance_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_performance_csv_Set() const{
    return m_performance_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_performance_csv_Valid() const{
    return m_performance_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getPerformancePng() const {
    return m_performance_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setPerformancePng(const QString &performance_png) {
    m_performance_png = performance_png;
    m_performance_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_performance_png_Set() const{
    return m_performance_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_performance_png_Valid() const{
    return m_performance_png_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getTradesCsv() const {
    return m_trades_csv;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setTradesCsv(const QString &trades_csv) {
    m_trades_csv = trades_csv;
    m_trades_csv_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_trades_csv_Set() const{
    return m_trades_csv_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_trades_csv_Valid() const{
    return m_trades_csv_isValid;
}

QString OAI_taskmanager_tasks__taskid__result_get_200_response::getTradesPng() const {
    return m_trades_png;
}
void OAI_taskmanager_tasks__taskid__result_get_200_response::setTradesPng(const QString &trades_png) {
    m_trades_png = trades_png;
    m_trades_png_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_trades_png_Set() const{
    return m_trades_png_isSet;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::is_trades_png_Valid() const{
    return m_trades_png_isValid;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bymonths_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bymonths_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_byquarters_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_byquarters_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_byyears_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_byyears_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drawdown_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drawdown_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equity_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equity_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equitypct_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equitypct_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equitypctnofill_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equitypctnofill_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equitypctsm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equitypctsm_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equitypctsm_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trades_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trades_png_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_taskmanager_tasks__taskid__result_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
