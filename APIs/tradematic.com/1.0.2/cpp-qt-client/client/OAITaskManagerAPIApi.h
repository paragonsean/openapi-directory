/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskManagerAPIApi_H
#define OAI_OAITaskManagerAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBacktestTrade.h"
#include "OAIByMonths.h"
#include "OAIByQuarters.h"
#include "OAIByYears.h"
#include "OAIContribution.h"
#include "OAIDrawdownItem.h"
#include "OAIEquityItem.h"
#include "OAIEquityPctItem.h"
#include "OAIEquityPctSmItem.h"
#include "OAIError.h"
#include "OAITask.h"
#include "OAI_taskmanager_tasks__taskid__folder_get_200_response.h"
#include "OAI_taskmanager_tasks__taskid__performance_get_200_response.h"
#include "OAI_taskmanager_tasks__taskid__result2_get_200_response.h"
#include "OAI_taskmanager_tasks__taskid__result_get_200_response.h"
#include "OAI_taskmanager_tasks__taskid__status_get_200_response.h"
#include "OAI_taskmanager_tasks_post_202_response.h"
#include "OAI_taskmanager_tasks_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskManagerAPIApi : public QObject {
    Q_OBJECT

public:
    OAITaskManagerAPIApi(const int timeOut = 0);
    ~OAITaskManagerAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void taskmanagerTasksGet();

    /**
    * @param[in]  body OAI_taskmanager_tasks_post_request [required]
    */
    virtual void taskmanagerTasksPost(const OAI_taskmanager_tasks_post_request &body);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidBymonthsGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidByquartersGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidByyearsGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidContributionGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidDrawdownGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidEquityGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidEquitypctGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidEquitypctsmGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidFolderGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidPerformanceGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidResult2Get(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidResultGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidStatusGet(const qint64 &taskid);

    /**
    * @param[in]  taskid qint64 [required]
    */
    virtual void taskmanagerTasksTaskidTradesGet(const qint64 &taskid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void taskmanagerTasksGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksPostCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidBymonthsGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidByquartersGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidByyearsGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidContributionGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidDrawdownGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidEquityGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidEquitypctGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidEquitypctsmGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidFolderGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidPerformanceGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidResult2GetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidResultGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidStatusGetCallback(OAIHttpRequestWorker *worker);
    void taskmanagerTasksTaskidTradesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void taskmanagerTasksGetSignal(QList<OAITask> summary);
    void taskmanagerTasksPostSignal(OAI_taskmanager_tasks_post_202_response summary);
    void taskmanagerTasksTaskidBymonthsGetSignal(QList<OAIByMonths> summary);
    void taskmanagerTasksTaskidByquartersGetSignal(QList<OAIByQuarters> summary);
    void taskmanagerTasksTaskidByyearsGetSignal(QList<OAIByYears> summary);
    void taskmanagerTasksTaskidContributionGetSignal(QList<OAIContribution> summary);
    void taskmanagerTasksTaskidDrawdownGetSignal(QList<OAIDrawdownItem> summary);
    void taskmanagerTasksTaskidEquityGetSignal(QList<OAIEquityItem> summary);
    void taskmanagerTasksTaskidEquitypctGetSignal(QList<OAIEquityPctItem> summary);
    void taskmanagerTasksTaskidEquitypctsmGetSignal(QList<OAIEquityPctSmItem> summary);
    void taskmanagerTasksTaskidFolderGetSignal(OAI_taskmanager_tasks__taskid__folder_get_200_response summary);
    void taskmanagerTasksTaskidGetSignal(OAITask summary);
    void taskmanagerTasksTaskidPerformanceGetSignal(OAI_taskmanager_tasks__taskid__performance_get_200_response summary);
    void taskmanagerTasksTaskidResult2GetSignal(OAI_taskmanager_tasks__taskid__result2_get_200_response summary);
    void taskmanagerTasksTaskidResultGetSignal(OAI_taskmanager_tasks__taskid__result_get_200_response summary);
    void taskmanagerTasksTaskidStatusGetSignal(OAI_taskmanager_tasks__taskid__status_get_200_response summary);
    void taskmanagerTasksTaskidTradesGetSignal(QList<OAIBacktestTrade> summary);


    void taskmanagerTasksGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITask> summary);
    void taskmanagerTasksPostSignalFull(OAIHttpRequestWorker *worker, OAI_taskmanager_tasks_post_202_response summary);
    void taskmanagerTasksTaskidBymonthsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIByMonths> summary);
    void taskmanagerTasksTaskidByquartersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIByQuarters> summary);
    void taskmanagerTasksTaskidByyearsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIByYears> summary);
    void taskmanagerTasksTaskidContributionGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIContribution> summary);
    void taskmanagerTasksTaskidDrawdownGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDrawdownItem> summary);
    void taskmanagerTasksTaskidEquityGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEquityItem> summary);
    void taskmanagerTasksTaskidEquitypctGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEquityPctItem> summary);
    void taskmanagerTasksTaskidEquitypctsmGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEquityPctSmItem> summary);
    void taskmanagerTasksTaskidFolderGetSignalFull(OAIHttpRequestWorker *worker, OAI_taskmanager_tasks__taskid__folder_get_200_response summary);
    void taskmanagerTasksTaskidGetSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void taskmanagerTasksTaskidPerformanceGetSignalFull(OAIHttpRequestWorker *worker, OAI_taskmanager_tasks__taskid__performance_get_200_response summary);
    void taskmanagerTasksTaskidResult2GetSignalFull(OAIHttpRequestWorker *worker, OAI_taskmanager_tasks__taskid__result2_get_200_response summary);
    void taskmanagerTasksTaskidResultGetSignalFull(OAIHttpRequestWorker *worker, OAI_taskmanager_tasks__taskid__result_get_200_response summary);
    void taskmanagerTasksTaskidStatusGetSignalFull(OAIHttpRequestWorker *worker, OAI_taskmanager_tasks__taskid__status_get_200_response summary);
    void taskmanagerTasksTaskidTradesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBacktestTrade> summary);

    Q_DECL_DEPRECATED_X("Use taskmanagerTasksGetSignalError() instead")
    void taskmanagerTasksGetSignalE(QList<OAITask> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksGetSignalError(QList<OAITask> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksPostSignalError() instead")
    void taskmanagerTasksPostSignalE(OAI_taskmanager_tasks_post_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksPostSignalError(OAI_taskmanager_tasks_post_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidBymonthsGetSignalError() instead")
    void taskmanagerTasksTaskidBymonthsGetSignalE(QList<OAIByMonths> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidBymonthsGetSignalError(QList<OAIByMonths> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidByquartersGetSignalError() instead")
    void taskmanagerTasksTaskidByquartersGetSignalE(QList<OAIByQuarters> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidByquartersGetSignalError(QList<OAIByQuarters> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidByyearsGetSignalError() instead")
    void taskmanagerTasksTaskidByyearsGetSignalE(QList<OAIByYears> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidByyearsGetSignalError(QList<OAIByYears> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidContributionGetSignalError() instead")
    void taskmanagerTasksTaskidContributionGetSignalE(QList<OAIContribution> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidContributionGetSignalError(QList<OAIContribution> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidDrawdownGetSignalError() instead")
    void taskmanagerTasksTaskidDrawdownGetSignalE(QList<OAIDrawdownItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidDrawdownGetSignalError(QList<OAIDrawdownItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidEquityGetSignalError() instead")
    void taskmanagerTasksTaskidEquityGetSignalE(QList<OAIEquityItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidEquityGetSignalError(QList<OAIEquityItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidEquitypctGetSignalError() instead")
    void taskmanagerTasksTaskidEquitypctGetSignalE(QList<OAIEquityPctItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidEquitypctGetSignalError(QList<OAIEquityPctItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidEquitypctsmGetSignalError() instead")
    void taskmanagerTasksTaskidEquitypctsmGetSignalE(QList<OAIEquityPctSmItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidEquitypctsmGetSignalError(QList<OAIEquityPctSmItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidFolderGetSignalError() instead")
    void taskmanagerTasksTaskidFolderGetSignalE(OAI_taskmanager_tasks__taskid__folder_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidFolderGetSignalError(OAI_taskmanager_tasks__taskid__folder_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidGetSignalError() instead")
    void taskmanagerTasksTaskidGetSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidGetSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidPerformanceGetSignalError() instead")
    void taskmanagerTasksTaskidPerformanceGetSignalE(OAI_taskmanager_tasks__taskid__performance_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidPerformanceGetSignalError(OAI_taskmanager_tasks__taskid__performance_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidResult2GetSignalError() instead")
    void taskmanagerTasksTaskidResult2GetSignalE(OAI_taskmanager_tasks__taskid__result2_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidResult2GetSignalError(OAI_taskmanager_tasks__taskid__result2_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidResultGetSignalError() instead")
    void taskmanagerTasksTaskidResultGetSignalE(OAI_taskmanager_tasks__taskid__result_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidResultGetSignalError(OAI_taskmanager_tasks__taskid__result_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidStatusGetSignalError() instead")
    void taskmanagerTasksTaskidStatusGetSignalE(OAI_taskmanager_tasks__taskid__status_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidStatusGetSignalError(OAI_taskmanager_tasks__taskid__status_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidTradesGetSignalError() instead")
    void taskmanagerTasksTaskidTradesGetSignalE(QList<OAIBacktestTrade> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidTradesGetSignalError(QList<OAIBacktestTrade> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use taskmanagerTasksGetSignalErrorFull() instead")
    void taskmanagerTasksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksPostSignalErrorFull() instead")
    void taskmanagerTasksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidBymonthsGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidBymonthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidBymonthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidByquartersGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidByquartersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidByquartersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidByyearsGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidByyearsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidByyearsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidContributionGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidContributionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidContributionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidDrawdownGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidDrawdownGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidDrawdownGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidEquityGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidEquityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidEquityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidEquitypctGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidEquitypctGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidEquitypctGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidEquitypctsmGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidEquitypctsmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidEquitypctsmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidFolderGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidFolderGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidFolderGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidPerformanceGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidPerformanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidPerformanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidResult2GetSignalErrorFull() instead")
    void taskmanagerTasksTaskidResult2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidResult2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidResultGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidResultGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidResultGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidStatusGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskmanagerTasksTaskidTradesGetSignalErrorFull() instead")
    void taskmanagerTasksTaskidTradesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskmanagerTasksTaskidTradesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
