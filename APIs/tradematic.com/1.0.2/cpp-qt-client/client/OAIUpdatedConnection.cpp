/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatedConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatedConnection::OAIUpdatedConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatedConnection::OAIUpdatedConnection() {
    this->initializeModel();
}

OAIUpdatedConnection::~OAIUpdatedConnection() {}

void OAIUpdatedConnection::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_connectorid_isSet = false;
    m_connectorid_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAIUpdatedConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatedConnection::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_connectorid_isValid = ::OpenAPI::fromJsonValue(m_connectorid, json[QString("connectorid")]);
    m_connectorid_isSet = !json[QString("connectorid")].isNull() && m_connectorid_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;
}

QString OAIUpdatedConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatedConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_connectorid_isSet) {
        obj.insert(QString("connectorid"), ::OpenAPI::toJsonValue(m_connectorid));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QString OAIUpdatedConnection::getActive() const {
    return m_active;
}
void OAIUpdatedConnection::setActive(const QString &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUpdatedConnection::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUpdatedConnection::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIUpdatedConnection::getConnectorid() const {
    return m_connectorid;
}
void OAIUpdatedConnection::setConnectorid(const QString &connectorid) {
    m_connectorid = connectorid;
    m_connectorid_isSet = true;
}

bool OAIUpdatedConnection::is_connectorid_Set() const{
    return m_connectorid_isSet;
}

bool OAIUpdatedConnection::is_connectorid_Valid() const{
    return m_connectorid_isValid;
}

QString OAIUpdatedConnection::getHost() const {
    return m_host;
}
void OAIUpdatedConnection::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIUpdatedConnection::is_host_Set() const{
    return m_host_isSet;
}

bool OAIUpdatedConnection::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIUpdatedConnection::getLogin() const {
    return m_login;
}
void OAIUpdatedConnection::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIUpdatedConnection::is_login_Set() const{
    return m_login_isSet;
}

bool OAIUpdatedConnection::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIUpdatedConnection::getPassword() const {
    return m_password;
}
void OAIUpdatedConnection::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUpdatedConnection::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUpdatedConnection::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUpdatedConnection::getPort() const {
    return m_port;
}
void OAIUpdatedConnection::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIUpdatedConnection::is_port_Set() const{
    return m_port_isSet;
}

bool OAIUpdatedConnection::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIUpdatedConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectorid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatedConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
