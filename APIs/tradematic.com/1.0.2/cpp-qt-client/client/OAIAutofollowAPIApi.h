/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAutofollowAPIApi_H
#define OAI_OAIAutofollowAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISignal.h"
#include "OAIStrategy.h"
#include "OAIStrategyPosition.h"
#include "OAI_autofollow_strategies__strategyid__content_put_200_response.h"
#include "OAI_autofollow_strategies__strategyid__content_put_request.h"
#include "OAI_autofollow_strategies__strategyid__put_200_response.h"
#include "OAI_autofollow_strategies__strategyid__put_request.h"
#include "OAI_autofollow_strategies__strategyid__signals_post_200_response.h"
#include "OAI_autofollow_strategies__strategyid__signals_post_request.h"
#include "OAI_autofollow_strategies_post_200_response.h"
#include "OAI_autofollow_strategies_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAutofollowAPIApi : public QObject {
    Q_OBJECT

public:
    OAIAutofollowAPIApi(const int timeOut = 0);
    ~OAIAutofollowAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void autofollowStrategiesGet();

    /**
    * @param[in]  body OAI_autofollow_strategies_post_request [required]
    */
    virtual void autofollowStrategiesPost(const OAI_autofollow_strategies_post_request &body);

    /**
    * @param[in]  strategyid qint64 [required]
    * @param[in]  body OAI_autofollow_strategies__strategyid__content_put_request [required]
    */
    virtual void autofollowStrategiesStrategyidContentPut(const qint64 &strategyid, const OAI_autofollow_strategies__strategyid__content_put_request &body);

    /**
    * @param[in]  strategyid qint64 [required]
    */
    virtual void autofollowStrategiesStrategyidGet(const qint64 &strategyid);

    /**
    * @param[in]  strategyid qint64 [required]
    */
    virtual void autofollowStrategiesStrategyidPositionsGet(const qint64 &strategyid);

    /**
    * @param[in]  strategyid qint64 [required]
    * @param[in]  body OAI_autofollow_strategies__strategyid__put_request [required]
    */
    virtual void autofollowStrategiesStrategyidPut(const qint64 &strategyid, const OAI_autofollow_strategies__strategyid__put_request &body);

    /**
    * @param[in]  strategyid qint64 [required]
    * @param[in]  count qint64 [required]
    */
    virtual void autofollowStrategiesStrategyidSignalsGet(const qint64 &strategyid, const qint64 &count);

    /**
    * @param[in]  strategyid qint64 [required]
    * @param[in]  body OAI_autofollow_strategies__strategyid__signals_post_request [required]
    */
    virtual void autofollowStrategiesStrategyidSignalsPost(const qint64 &strategyid, const OAI_autofollow_strategies__strategyid__signals_post_request &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void autofollowStrategiesGetCallback(OAIHttpRequestWorker *worker);
    void autofollowStrategiesPostCallback(OAIHttpRequestWorker *worker);
    void autofollowStrategiesStrategyidContentPutCallback(OAIHttpRequestWorker *worker);
    void autofollowStrategiesStrategyidGetCallback(OAIHttpRequestWorker *worker);
    void autofollowStrategiesStrategyidPositionsGetCallback(OAIHttpRequestWorker *worker);
    void autofollowStrategiesStrategyidPutCallback(OAIHttpRequestWorker *worker);
    void autofollowStrategiesStrategyidSignalsGetCallback(OAIHttpRequestWorker *worker);
    void autofollowStrategiesStrategyidSignalsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void autofollowStrategiesGetSignal(QList<OAIStrategy> summary);
    void autofollowStrategiesPostSignal(OAI_autofollow_strategies_post_200_response summary);
    void autofollowStrategiesStrategyidContentPutSignal(OAI_autofollow_strategies__strategyid__content_put_200_response summary);
    void autofollowStrategiesStrategyidGetSignal(OAIStrategy summary);
    void autofollowStrategiesStrategyidPositionsGetSignal(QList<OAIStrategyPosition> summary);
    void autofollowStrategiesStrategyidPutSignal(OAI_autofollow_strategies__strategyid__put_200_response summary);
    void autofollowStrategiesStrategyidSignalsGetSignal(QList<OAISignal> summary);
    void autofollowStrategiesStrategyidSignalsPostSignal(OAI_autofollow_strategies__strategyid__signals_post_200_response summary);


    void autofollowStrategiesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStrategy> summary);
    void autofollowStrategiesPostSignalFull(OAIHttpRequestWorker *worker, OAI_autofollow_strategies_post_200_response summary);
    void autofollowStrategiesStrategyidContentPutSignalFull(OAIHttpRequestWorker *worker, OAI_autofollow_strategies__strategyid__content_put_200_response summary);
    void autofollowStrategiesStrategyidGetSignalFull(OAIHttpRequestWorker *worker, OAIStrategy summary);
    void autofollowStrategiesStrategyidPositionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStrategyPosition> summary);
    void autofollowStrategiesStrategyidPutSignalFull(OAIHttpRequestWorker *worker, OAI_autofollow_strategies__strategyid__put_200_response summary);
    void autofollowStrategiesStrategyidSignalsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISignal> summary);
    void autofollowStrategiesStrategyidSignalsPostSignalFull(OAIHttpRequestWorker *worker, OAI_autofollow_strategies__strategyid__signals_post_200_response summary);

    Q_DECL_DEPRECATED_X("Use autofollowStrategiesGetSignalError() instead")
    void autofollowStrategiesGetSignalE(QList<OAIStrategy> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesGetSignalError(QList<OAIStrategy> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesPostSignalError() instead")
    void autofollowStrategiesPostSignalE(OAI_autofollow_strategies_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesPostSignalError(OAI_autofollow_strategies_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidContentPutSignalError() instead")
    void autofollowStrategiesStrategyidContentPutSignalE(OAI_autofollow_strategies__strategyid__content_put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidContentPutSignalError(OAI_autofollow_strategies__strategyid__content_put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidGetSignalError() instead")
    void autofollowStrategiesStrategyidGetSignalE(OAIStrategy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidGetSignalError(OAIStrategy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidPositionsGetSignalError() instead")
    void autofollowStrategiesStrategyidPositionsGetSignalE(QList<OAIStrategyPosition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidPositionsGetSignalError(QList<OAIStrategyPosition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidPutSignalError() instead")
    void autofollowStrategiesStrategyidPutSignalE(OAI_autofollow_strategies__strategyid__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidPutSignalError(OAI_autofollow_strategies__strategyid__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidSignalsGetSignalError() instead")
    void autofollowStrategiesStrategyidSignalsGetSignalE(QList<OAISignal> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidSignalsGetSignalError(QList<OAISignal> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidSignalsPostSignalError() instead")
    void autofollowStrategiesStrategyidSignalsPostSignalE(OAI_autofollow_strategies__strategyid__signals_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidSignalsPostSignalError(OAI_autofollow_strategies__strategyid__signals_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use autofollowStrategiesGetSignalErrorFull() instead")
    void autofollowStrategiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesPostSignalErrorFull() instead")
    void autofollowStrategiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidContentPutSignalErrorFull() instead")
    void autofollowStrategiesStrategyidContentPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidContentPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidGetSignalErrorFull() instead")
    void autofollowStrategiesStrategyidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidPositionsGetSignalErrorFull() instead")
    void autofollowStrategiesStrategyidPositionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidPositionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidPutSignalErrorFull() instead")
    void autofollowStrategiesStrategyidPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidSignalsGetSignalErrorFull() instead")
    void autofollowStrategiesStrategyidSignalsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidSignalsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autofollowStrategiesStrategyidSignalsPostSignalErrorFull() instead")
    void autofollowStrategiesStrategyidSignalsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autofollowStrategiesStrategyidSignalsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
