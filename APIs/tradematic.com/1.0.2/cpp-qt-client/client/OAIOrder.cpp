/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_orderid_isSet = false;
    m_orderid_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_shares_isSet = false;
    m_shares_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_statusname_isSet = false;
    m_statusname_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_orderid_isValid = ::OpenAPI::fromJsonValue(m_orderid, json[QString("orderid")]);
    m_orderid_isSet = !json[QString("orderid")].isNull() && m_orderid_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_shares_isValid = ::OpenAPI::fromJsonValue(m_shares, json[QString("shares")]);
    m_shares_isSet = !json[QString("shares")].isNull() && m_shares_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_statusname_isValid = ::OpenAPI::fromJsonValue(m_statusname, json[QString("statusname")]);
    m_statusname_isSet = !json[QString("statusname")].isNull() && m_statusname_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_buy_isSet) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_orderid_isSet) {
        obj.insert(QString("orderid"), ::OpenAPI::toJsonValue(m_orderid));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_shares_isSet) {
        obj.insert(QString("shares"), ::OpenAPI::toJsonValue(m_shares));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_statusname_isSet) {
        obj.insert(QString("statusname"), ::OpenAPI::toJsonValue(m_statusname));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIOrder::getAccount() const {
    return m_account;
}
void OAIOrder::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIOrder::is_account_Set() const{
    return m_account_isSet;
}

bool OAIOrder::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIOrder::getBuy() const {
    return m_buy;
}
void OAIOrder::setBuy(const QString &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAIOrder::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAIOrder::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAIOrder::getMessage() const {
    return m_message;
}
void OAIOrder::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIOrder::is_message_Set() const{
    return m_message_isSet;
}

bool OAIOrder::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIOrder::getNumber() const {
    return m_number;
}
void OAIOrder::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIOrder::is_number_Set() const{
    return m_number_isSet;
}

bool OAIOrder::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIOrder::getOrderid() const {
    return m_orderid;
}
void OAIOrder::setOrderid(const QString &orderid) {
    m_orderid = orderid;
    m_orderid_isSet = true;
}

bool OAIOrder::is_orderid_Set() const{
    return m_orderid_isSet;
}

bool OAIOrder::is_orderid_Valid() const{
    return m_orderid_isValid;
}

QString OAIOrder::getPrice() const {
    return m_price;
}
void OAIOrder::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOrder::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOrder::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIOrder::getShares() const {
    return m_shares;
}
void OAIOrder::setShares(const QString &shares) {
    m_shares = shares;
    m_shares_isSet = true;
}

bool OAIOrder::is_shares_Set() const{
    return m_shares_isSet;
}

bool OAIOrder::is_shares_Valid() const{
    return m_shares_isValid;
}

QString OAIOrder::getStatus() const {
    return m_status;
}
void OAIOrder::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrder::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOrder::getStatusname() const {
    return m_statusname;
}
void OAIOrder::setStatusname(const QString &statusname) {
    m_statusname = statusname;
    m_statusname_isSet = true;
}

bool OAIOrder::is_statusname_Set() const{
    return m_statusname_isSet;
}

bool OAIOrder::is_statusname_Valid() const{
    return m_statusname_isValid;
}

QString OAIOrder::getSymbol() const {
    return m_symbol;
}
void OAIOrder::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIOrder::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIOrder::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QDateTime OAIOrder::getTimestamp() const {
    return m_timestamp;
}
void OAIOrder::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIOrder::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIOrder::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statusname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
