/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnection::OAIConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnection::OAIConnection() {
    this->initializeModel();
}

OAIConnection::~OAIConnection() {}

void OAIConnection::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_connectionid_isSet = false;
    m_connectionid_isValid = false;

    m_connectionstring_isSet = false;
    m_connectionstring_isValid = false;

    m_connectorcode_isSet = false;
    m_connectorcode_isValid = false;

    m_connectorid_isSet = false;
    m_connectorid_isValid = false;

    m_connectorname_isSet = false;
    m_connectorname_isValid = false;

    m_connectortypename_isSet = false;
    m_connectortypename_isValid = false;

    m_creationdate_isSet = false;
    m_creationdate_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_sessionid_isSet = false;
    m_sessionid_isValid = false;

    m_updatedate_isSet = false;
    m_updatedate_isValid = false;
}

void OAIConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnection::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_connectionid_isValid = ::OpenAPI::fromJsonValue(m_connectionid, json[QString("connectionid")]);
    m_connectionid_isSet = !json[QString("connectionid")].isNull() && m_connectionid_isValid;

    m_connectionstring_isValid = ::OpenAPI::fromJsonValue(m_connectionstring, json[QString("connectionstring")]);
    m_connectionstring_isSet = !json[QString("connectionstring")].isNull() && m_connectionstring_isValid;

    m_connectorcode_isValid = ::OpenAPI::fromJsonValue(m_connectorcode, json[QString("connectorcode")]);
    m_connectorcode_isSet = !json[QString("connectorcode")].isNull() && m_connectorcode_isValid;

    m_connectorid_isValid = ::OpenAPI::fromJsonValue(m_connectorid, json[QString("connectorid")]);
    m_connectorid_isSet = !json[QString("connectorid")].isNull() && m_connectorid_isValid;

    m_connectorname_isValid = ::OpenAPI::fromJsonValue(m_connectorname, json[QString("connectorname")]);
    m_connectorname_isSet = !json[QString("connectorname")].isNull() && m_connectorname_isValid;

    m_connectortypename_isValid = ::OpenAPI::fromJsonValue(m_connectortypename, json[QString("connectortypename")]);
    m_connectortypename_isSet = !json[QString("connectortypename")].isNull() && m_connectortypename_isValid;

    m_creationdate_isValid = ::OpenAPI::fromJsonValue(m_creationdate, json[QString("creationdate")]);
    m_creationdate_isSet = !json[QString("creationdate")].isNull() && m_creationdate_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_sessionid_isValid = ::OpenAPI::fromJsonValue(m_sessionid, json[QString("sessionid")]);
    m_sessionid_isSet = !json[QString("sessionid")].isNull() && m_sessionid_isValid;

    m_updatedate_isValid = ::OpenAPI::fromJsonValue(m_updatedate, json[QString("updatedate")]);
    m_updatedate_isSet = !json[QString("updatedate")].isNull() && m_updatedate_isValid;
}

QString OAIConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_connectionid_isSet) {
        obj.insert(QString("connectionid"), ::OpenAPI::toJsonValue(m_connectionid));
    }
    if (m_connectionstring_isSet) {
        obj.insert(QString("connectionstring"), ::OpenAPI::toJsonValue(m_connectionstring));
    }
    if (m_connectorcode_isSet) {
        obj.insert(QString("connectorcode"), ::OpenAPI::toJsonValue(m_connectorcode));
    }
    if (m_connectorid_isSet) {
        obj.insert(QString("connectorid"), ::OpenAPI::toJsonValue(m_connectorid));
    }
    if (m_connectorname_isSet) {
        obj.insert(QString("connectorname"), ::OpenAPI::toJsonValue(m_connectorname));
    }
    if (m_connectortypename_isSet) {
        obj.insert(QString("connectortypename"), ::OpenAPI::toJsonValue(m_connectortypename));
    }
    if (m_creationdate_isSet) {
        obj.insert(QString("creationdate"), ::OpenAPI::toJsonValue(m_creationdate));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_sessionid_isSet) {
        obj.insert(QString("sessionid"), ::OpenAPI::toJsonValue(m_sessionid));
    }
    if (m_updatedate_isSet) {
        obj.insert(QString("updatedate"), ::OpenAPI::toJsonValue(m_updatedate));
    }
    return obj;
}

QString OAIConnection::getActive() const {
    return m_active;
}
void OAIConnection::setActive(const QString &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIConnection::is_active_Set() const{
    return m_active_isSet;
}

bool OAIConnection::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIConnection::getConnectionid() const {
    return m_connectionid;
}
void OAIConnection::setConnectionid(const QString &connectionid) {
    m_connectionid = connectionid;
    m_connectionid_isSet = true;
}

bool OAIConnection::is_connectionid_Set() const{
    return m_connectionid_isSet;
}

bool OAIConnection::is_connectionid_Valid() const{
    return m_connectionid_isValid;
}

QString OAIConnection::getConnectionstring() const {
    return m_connectionstring;
}
void OAIConnection::setConnectionstring(const QString &connectionstring) {
    m_connectionstring = connectionstring;
    m_connectionstring_isSet = true;
}

bool OAIConnection::is_connectionstring_Set() const{
    return m_connectionstring_isSet;
}

bool OAIConnection::is_connectionstring_Valid() const{
    return m_connectionstring_isValid;
}

QString OAIConnection::getConnectorcode() const {
    return m_connectorcode;
}
void OAIConnection::setConnectorcode(const QString &connectorcode) {
    m_connectorcode = connectorcode;
    m_connectorcode_isSet = true;
}

bool OAIConnection::is_connectorcode_Set() const{
    return m_connectorcode_isSet;
}

bool OAIConnection::is_connectorcode_Valid() const{
    return m_connectorcode_isValid;
}

QString OAIConnection::getConnectorid() const {
    return m_connectorid;
}
void OAIConnection::setConnectorid(const QString &connectorid) {
    m_connectorid = connectorid;
    m_connectorid_isSet = true;
}

bool OAIConnection::is_connectorid_Set() const{
    return m_connectorid_isSet;
}

bool OAIConnection::is_connectorid_Valid() const{
    return m_connectorid_isValid;
}

QString OAIConnection::getConnectorname() const {
    return m_connectorname;
}
void OAIConnection::setConnectorname(const QString &connectorname) {
    m_connectorname = connectorname;
    m_connectorname_isSet = true;
}

bool OAIConnection::is_connectorname_Set() const{
    return m_connectorname_isSet;
}

bool OAIConnection::is_connectorname_Valid() const{
    return m_connectorname_isValid;
}

QString OAIConnection::getConnectortypename() const {
    return m_connectortypename;
}
void OAIConnection::setConnectortypename(const QString &connectortypename) {
    m_connectortypename = connectortypename;
    m_connectortypename_isSet = true;
}

bool OAIConnection::is_connectortypename_Set() const{
    return m_connectortypename_isSet;
}

bool OAIConnection::is_connectortypename_Valid() const{
    return m_connectortypename_isValid;
}

QDateTime OAIConnection::getCreationdate() const {
    return m_creationdate;
}
void OAIConnection::setCreationdate(const QDateTime &creationdate) {
    m_creationdate = creationdate;
    m_creationdate_isSet = true;
}

bool OAIConnection::is_creationdate_Set() const{
    return m_creationdate_isSet;
}

bool OAIConnection::is_creationdate_Valid() const{
    return m_creationdate_isValid;
}

QString OAIConnection::getHost() const {
    return m_host;
}
void OAIConnection::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIConnection::is_host_Set() const{
    return m_host_isSet;
}

bool OAIConnection::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIConnection::getLogin() const {
    return m_login;
}
void OAIConnection::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIConnection::is_login_Set() const{
    return m_login_isSet;
}

bool OAIConnection::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIConnection::getPassword() const {
    return m_password;
}
void OAIConnection::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIConnection::is_password_Set() const{
    return m_password_isSet;
}

bool OAIConnection::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIConnection::getPort() const {
    return m_port;
}
void OAIConnection::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConnection::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConnection::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIConnection::getSessionid() const {
    return m_sessionid;
}
void OAIConnection::setSessionid(const QString &sessionid) {
    m_sessionid = sessionid;
    m_sessionid_isSet = true;
}

bool OAIConnection::is_sessionid_Set() const{
    return m_sessionid_isSet;
}

bool OAIConnection::is_sessionid_Valid() const{
    return m_sessionid_isValid;
}

QDateTime OAIConnection::getUpdatedate() const {
    return m_updatedate;
}
void OAIConnection::setUpdatedate(const QDateTime &updatedate) {
    m_updatedate = updatedate;
    m_updatedate_isSet = true;
}

bool OAIConnection::is_updatedate_Set() const{
    return m_updatedate_isSet;
}

bool OAIConnection::is_updatedate_Valid() const{
    return m_updatedate_isValid;
}

bool OAIConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectionid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectionstring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectorcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectorid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectorname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectortypename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creationdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessionid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updatedate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
