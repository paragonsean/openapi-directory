/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongentry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongentry::OAILongentry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongentry::OAILongentry() {
    this->initializeModel();
}

OAILongentry::~OAILongentry() {}

void OAILongentry::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_validnot_isSet = false;
    m_validnot_isValid = false;

    m_validor_isSet = false;
    m_validor_isValid = false;
}

void OAILongentry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongentry::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_validnot_isValid = ::OpenAPI::fromJsonValue(m_validnot, json[QString("validnot")]);
    m_validnot_isSet = !json[QString("validnot")].isNull() && m_validnot_isValid;

    m_validor_isValid = ::OpenAPI::fromJsonValue(m_validor, json[QString("validor")]);
    m_validor_isSet = !json[QString("validor")].isNull() && m_validor_isValid;
}

QString OAILongentry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongentry::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_validnot_isSet) {
        obj.insert(QString("validnot"), ::OpenAPI::toJsonValue(m_validnot));
    }
    if (m_validor_isSet) {
        obj.insert(QString("validor"), ::OpenAPI::toJsonValue(m_validor));
    }
    return obj;
}

QString OAILongentry::getId() const {
    return m_id;
}
void OAILongentry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILongentry::is_id_Set() const{
    return m_id_isSet;
}

bool OAILongentry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILongentry::getName() const {
    return m_name;
}
void OAILongentry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILongentry::is_name_Set() const{
    return m_name_isSet;
}

bool OAILongentry::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIParameter> OAILongentry::getParameters() const {
    return m_parameters;
}
void OAILongentry::setParameters(const QList<OAIParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAILongentry::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAILongentry::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAILongentry::getValidnot() const {
    return m_validnot;
}
void OAILongentry::setValidnot(const QString &validnot) {
    m_validnot = validnot;
    m_validnot_isSet = true;
}

bool OAILongentry::is_validnot_Set() const{
    return m_validnot_isSet;
}

bool OAILongentry::is_validnot_Valid() const{
    return m_validnot_isValid;
}

QString OAILongentry::getValidor() const {
    return m_validor;
}
void OAILongentry::setValidor(const QString &validor) {
    m_validor = validor;
    m_validor_isSet = true;
}

bool OAILongentry::is_validor_Set() const{
    return m_validor_isSet;
}

bool OAILongentry::is_validor_Valid() const{
    return m_validor_isValid;
}

bool OAILongentry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validnot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongentry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
