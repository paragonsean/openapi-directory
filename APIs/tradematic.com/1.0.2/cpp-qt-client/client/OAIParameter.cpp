/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameter::OAIParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameter::OAIParameter() {
    this->initializeModel();
}

OAIParameter::~OAIParameter() {}

void OAIParameter::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_stop_isSet = false;
    m_stop_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameter::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_stop_isValid = ::OpenAPI::fromJsonValue(m_stop, json[QString("stop")]);
    m_stop_isSet = !json[QString("stop")].isNull() && m_stop_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_step_isSet) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_stop_isSet) {
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(m_stop));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIParameter::getRDefault() const {
    return m_r_default;
}
void OAIParameter::setRDefault(const QString &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIParameter::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIParameter::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIParameter::getName() const {
    return m_name;
}
void OAIParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParameter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIParameter::getStart() const {
    return m_start;
}
void OAIParameter::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIParameter::is_start_Set() const{
    return m_start_isSet;
}

bool OAIParameter::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIParameter::getStep() const {
    return m_step;
}
void OAIParameter::setStep(const QString &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIParameter::is_step_Set() const{
    return m_step_isSet;
}

bool OAIParameter::is_step_Valid() const{
    return m_step_isValid;
}

QString OAIParameter::getStop() const {
    return m_stop;
}
void OAIParameter::setStop(const QString &stop) {
    m_stop = stop;
    m_stop_isSet = true;
}

bool OAIParameter::is_stop_Set() const{
    return m_stop_isSet;
}

bool OAIParameter::is_stop_Valid() const{
    return m_stop_isValid;
}

QString OAIParameter::getType() const {
    return m_type;
}
void OAIParameter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIParameter::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
