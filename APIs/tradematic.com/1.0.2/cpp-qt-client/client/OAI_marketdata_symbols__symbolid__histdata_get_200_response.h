/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_marketdata_symbols__symbolid__histdata_get_200_response.h
 *
 * 
 */

#ifndef OAI_marketdata_symbols__symbolid__histdata_get_200_response_H
#define OAI_marketdata_symbols__symbolid__histdata_get_200_response_H

#include <QJsonObject>

#include "OAIResult.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResult;

class OAI_marketdata_symbols__symbolid__histdata_get_200_response : public OAIObject {
public:
    OAI_marketdata_symbols__symbolid__histdata_get_200_response();
    OAI_marketdata_symbols__symbolid__histdata_get_200_response(QString json);
    ~OAI_marketdata_symbols__symbolid__histdata_get_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAdjusted() const;
    void setAdjusted(const bool &adjusted);
    bool is_adjusted_Set() const;
    bool is_adjusted_Valid() const;

    qint32 getQueryCount() const;
    void setQueryCount(const qint32 &query_count);
    bool is_query_count_Set() const;
    bool is_query_count_Valid() const;

    QList<OAIResult> getResults() const;
    void setResults(const QList<OAIResult> &results);
    bool is_results_Set() const;
    bool is_results_Valid() const;

    qint32 getResultsCount() const;
    void setResultsCount(const qint32 &results_count);
    bool is_results_count_Set() const;
    bool is_results_count_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTicker() const;
    void setTicker(const QString &ticker);
    bool is_ticker_Set() const;
    bool is_ticker_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_adjusted;
    bool m_adjusted_isSet;
    bool m_adjusted_isValid;

    qint32 m_query_count;
    bool m_query_count_isSet;
    bool m_query_count_isValid;

    QList<OAIResult> m_results;
    bool m_results_isSet;
    bool m_results_isValid;

    qint32 m_results_count;
    bool m_results_count_isSet;
    bool m_results_count_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_ticker;
    bool m_ticker_isSet;
    bool m_ticker_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_marketdata_symbols__symbolid__histdata_get_200_response)

#endif // OAI_marketdata_symbols__symbolid__histdata_get_200_response_H
