/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnector::OAIConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnector::OAIConnector() {
    this->initializeModel();
}

OAIConnector::~OAIConnector() {}

void OAIConnector::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_connectorid_isSet = false;
    m_connectorid_isValid = false;

    m_connectortypename_isSet = false;
    m_connectortypename_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_typeid_isSet = false;
    m_r_typeid_isValid = false;
}

void OAIConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnector::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_connectorid_isValid = ::OpenAPI::fromJsonValue(m_connectorid, json[QString("connectorid")]);
    m_connectorid_isSet = !json[QString("connectorid")].isNull() && m_connectorid_isValid;

    m_connectortypename_isValid = ::OpenAPI::fromJsonValue(m_connectortypename, json[QString("connectortypename")]);
    m_connectortypename_isSet = !json[QString("connectortypename")].isNull() && m_connectortypename_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_typeid_isValid = ::OpenAPI::fromJsonValue(m_r_typeid, json[QString("typeid")]);
    m_r_typeid_isSet = !json[QString("typeid")].isNull() && m_r_typeid_isValid;
}

QString OAIConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_connectorid_isSet) {
        obj.insert(QString("connectorid"), ::OpenAPI::toJsonValue(m_connectorid));
    }
    if (m_connectortypename_isSet) {
        obj.insert(QString("connectortypename"), ::OpenAPI::toJsonValue(m_connectortypename));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_typeid_isSet) {
        obj.insert(QString("typeid"), ::OpenAPI::toJsonValue(m_r_typeid));
    }
    return obj;
}

QString OAIConnector::getCode() const {
    return m_code;
}
void OAIConnector::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIConnector::is_code_Set() const{
    return m_code_isSet;
}

bool OAIConnector::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIConnector::getConnectorid() const {
    return m_connectorid;
}
void OAIConnector::setConnectorid(const QString &connectorid) {
    m_connectorid = connectorid;
    m_connectorid_isSet = true;
}

bool OAIConnector::is_connectorid_Set() const{
    return m_connectorid_isSet;
}

bool OAIConnector::is_connectorid_Valid() const{
    return m_connectorid_isValid;
}

QString OAIConnector::getConnectortypename() const {
    return m_connectortypename;
}
void OAIConnector::setConnectortypename(const QString &connectortypename) {
    m_connectortypename = connectortypename;
    m_connectortypename_isSet = true;
}

bool OAIConnector::is_connectortypename_Set() const{
    return m_connectortypename_isSet;
}

bool OAIConnector::is_connectortypename_Valid() const{
    return m_connectortypename_isValid;
}

QString OAIConnector::getName() const {
    return m_name;
}
void OAIConnector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnector::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnector::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnector::getRTypeid() const {
    return m_r_typeid;
}
void OAIConnector::setRTypeid(const QString &r_typeid) {
    m_r_typeid = r_typeid;
    m_r_typeid_isSet = true;
}

bool OAIConnector::is_r_typeid_Set() const{
    return m_r_typeid_isSet;
}

bool OAIConnector::is_r_typeid_Valid() const{
    return m_r_typeid_isValid;
}

bool OAIConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectorid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectortypename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_typeid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
