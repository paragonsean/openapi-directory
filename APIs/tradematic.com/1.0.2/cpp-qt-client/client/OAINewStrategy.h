/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINewStrategy.h
 *
 * 
 */

#ifndef OAINewStrategy_H
#define OAINewStrategy_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINewStrategy : public OAIObject {
public:
    OAINewStrategy();
    OAINewStrategy(QString json);
    ~OAINewStrategy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApr() const;
    void setApr(const QString &apr);
    bool is_apr_Set() const;
    bool is_apr_Valid() const;

    QString getAuthor() const;
    void setAuthor(const QString &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDrawdown() const;
    void setDrawdown(const QString &drawdown);
    bool is_drawdown_Set() const;
    bool is_drawdown_Valid() const;

    QString getGuid() const;
    void setGuid(const QString &guid);
    bool is_guid_Set() const;
    bool is_guid_Valid() const;

    QString getLimitorder() const;
    void setLimitorder(const QString &limitorder);
    bool is_limitorder_Set() const;
    bool is_limitorder_Valid() const;

    QString getMarketname() const;
    void setMarketname(const QString &marketname);
    bool is_marketname_Set() const;
    bool is_marketname_Valid() const;

    QString getMultiposition() const;
    void setMultiposition(const QString &multiposition);
    bool is_multiposition_Set() const;
    bool is_multiposition_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPositionsize() const;
    void setPositionsize(const QString &positionsize);
    bool is_positionsize_Set() const;
    bool is_positionsize_Valid() const;

    QString getStrategytypeid() const;
    void setStrategytypeid(const QString &strategytypeid);
    bool is_strategytypeid_Set() const;
    bool is_strategytypeid_Valid() const;

    QString getSymbols() const;
    void setSymbols(const QString &symbols);
    bool is_symbols_Set() const;
    bool is_symbols_Valid() const;

    QString getTimeframe() const;
    void setTimeframe(const QString &timeframe);
    bool is_timeframe_Set() const;
    bool is_timeframe_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_apr;
    bool m_apr_isSet;
    bool m_apr_isValid;

    QString m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    QString m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_drawdown;
    bool m_drawdown_isSet;
    bool m_drawdown_isValid;

    QString m_guid;
    bool m_guid_isSet;
    bool m_guid_isValid;

    QString m_limitorder;
    bool m_limitorder_isSet;
    bool m_limitorder_isValid;

    QString m_marketname;
    bool m_marketname_isSet;
    bool m_marketname_isValid;

    QString m_multiposition;
    bool m_multiposition_isSet;
    bool m_multiposition_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_positionsize;
    bool m_positionsize_isSet;
    bool m_positionsize_isValid;

    QString m_strategytypeid;
    bool m_strategytypeid_isSet;
    bool m_strategytypeid_isValid;

    QString m_symbols;
    bool m_symbols_isSet;
    bool m_symbols_isValid;

    QString m_timeframe;
    bool m_timeframe_isSet;
    bool m_timeframe_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINewStrategy)

#endif // OAINewStrategy_H
