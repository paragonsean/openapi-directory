/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStrategy.h
 *
 * 
 */

#ifndef OAIStrategy_H
#define OAIStrategy_H

#include <QJsonObject>

#include "OAIRules.h"
#include "OAITaskresult.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRules;
class OAITaskresult;

class OAIStrategy : public OAIObject {
public:
    OAIStrategy();
    OAIStrategy(QString json);
    ~OAIStrategy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApr() const;
    void setApr(const QString &apr);
    bool is_apr_Set() const;
    bool is_apr_Valid() const;

    QString getAuthor() const;
    void setAuthor(const QString &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    QString getBrokername() const;
    void setBrokername(const QString &brokername);
    bool is_brokername_Set() const;
    bool is_brokername_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getDatascale() const;
    void setDatascale(const QString &datascale);
    bool is_datascale_Set() const;
    bool is_datascale_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDrawdown() const;
    void setDrawdown(const QString &drawdown);
    bool is_drawdown_Set() const;
    bool is_drawdown_Valid() const;

    QString getFolder() const;
    void setFolder(const QString &folder);
    bool is_folder_Set() const;
    bool is_folder_Valid() const;

    QString getGuid() const;
    void setGuid(const QString &guid);
    bool is_guid_Set() const;
    bool is_guid_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getLimitorder() const;
    void setLimitorder(const QString &limitorder);
    bool is_limitorder_Set() const;
    bool is_limitorder_Valid() const;

    QString getMarketname() const;
    void setMarketname(const QString &marketname);
    bool is_marketname_Set() const;
    bool is_marketname_Valid() const;

    QString getMultiposition() const;
    void setMultiposition(const QString &multiposition);
    bool is_multiposition_Set() const;
    bool is_multiposition_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getPermissions() const;
    void setPermissions(const QString &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QString getPositionsize() const;
    void setPositionsize(const QString &positionsize);
    bool is_positionsize_Set() const;
    bool is_positionsize_Valid() const;

    QString getRisklevelcode() const;
    void setRisklevelcode(const QString &risklevelcode);
    bool is_risklevelcode_Set() const;
    bool is_risklevelcode_Valid() const;

    QString getRisklevelid() const;
    void setRisklevelid(const QString &risklevelid);
    bool is_risklevelid_Set() const;
    bool is_risklevelid_Valid() const;

    QString getRisklevelname() const;
    void setRisklevelname(const QString &risklevelname);
    bool is_risklevelname_Set() const;
    bool is_risklevelname_Valid() const;

    OAIRules getRules() const;
    void setRules(const OAIRules &rules);
    bool is_rules_Set() const;
    bool is_rules_Valid() const;

    QString getStrategyid() const;
    void setStrategyid(const QString &strategyid);
    bool is_strategyid_Set() const;
    bool is_strategyid_Valid() const;

    QString getStrategytypeid() const;
    void setStrategytypeid(const QString &strategytypeid);
    bool is_strategytypeid_Set() const;
    bool is_strategytypeid_Valid() const;

    QList<QString> getSymbols() const;
    void setSymbols(const QList<QString> &symbols);
    bool is_symbols_Set() const;
    bool is_symbols_Valid() const;

    QString getTaskfolder() const;
    void setTaskfolder(const QString &taskfolder);
    bool is_taskfolder_Set() const;
    bool is_taskfolder_Valid() const;

    QString getTaskid() const;
    void setTaskid(const QString &taskid);
    bool is_taskid_Set() const;
    bool is_taskid_Valid() const;

    OAITaskresult getTaskresult() const;
    void setTaskresult(const OAITaskresult &taskresult);
    bool is_taskresult_Set() const;
    bool is_taskresult_Valid() const;

    QString getTimeframe() const;
    void setTimeframe(const QString &timeframe);
    bool is_timeframe_Set() const;
    bool is_timeframe_Valid() const;

    QDateTime getUpdatedate() const;
    void setUpdatedate(const QDateTime &updatedate);
    bool is_updatedate_Set() const;
    bool is_updatedate_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_apr;
    bool m_apr_isSet;
    bool m_apr_isValid;

    QString m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    QString m_brokername;
    bool m_brokername_isSet;
    bool m_brokername_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_datascale;
    bool m_datascale_isSet;
    bool m_datascale_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_drawdown;
    bool m_drawdown_isSet;
    bool m_drawdown_isValid;

    QString m_folder;
    bool m_folder_isSet;
    bool m_folder_isValid;

    QString m_guid;
    bool m_guid_isSet;
    bool m_guid_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_limitorder;
    bool m_limitorder_isSet;
    bool m_limitorder_isValid;

    QString m_marketname;
    bool m_marketname_isSet;
    bool m_marketname_isValid;

    QString m_multiposition;
    bool m_multiposition_isSet;
    bool m_multiposition_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QString m_positionsize;
    bool m_positionsize_isSet;
    bool m_positionsize_isValid;

    QString m_risklevelcode;
    bool m_risklevelcode_isSet;
    bool m_risklevelcode_isValid;

    QString m_risklevelid;
    bool m_risklevelid_isSet;
    bool m_risklevelid_isValid;

    QString m_risklevelname;
    bool m_risklevelname_isSet;
    bool m_risklevelname_isValid;

    OAIRules m_rules;
    bool m_rules_isSet;
    bool m_rules_isValid;

    QString m_strategyid;
    bool m_strategyid_isSet;
    bool m_strategyid_isValid;

    QString m_strategytypeid;
    bool m_strategytypeid_isSet;
    bool m_strategytypeid_isValid;

    QList<QString> m_symbols;
    bool m_symbols_isSet;
    bool m_symbols_isValid;

    QString m_taskfolder;
    bool m_taskfolder_isSet;
    bool m_taskfolder_isValid;

    QString m_taskid;
    bool m_taskid_isSet;
    bool m_taskid_isValid;

    OAITaskresult m_taskresult;
    bool m_taskresult_isSet;
    bool m_taskresult_isValid;

    QString m_timeframe;
    bool m_timeframe_isSet;
    bool m_timeframe_isValid;

    QDateTime m_updatedate;
    bool m_updatedate_isSet;
    bool m_updatedate_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStrategy)

#endif // OAIStrategy_H
