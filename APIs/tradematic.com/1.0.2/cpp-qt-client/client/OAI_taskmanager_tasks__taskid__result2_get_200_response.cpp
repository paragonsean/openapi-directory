/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_taskmanager_tasks__taskid__result2_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_taskmanager_tasks__taskid__result2_get_200_response::OAI_taskmanager_tasks__taskid__result2_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_taskmanager_tasks__taskid__result2_get_200_response::OAI_taskmanager_tasks__taskid__result2_get_200_response() {
    this->initializeModel();
}

OAI_taskmanager_tasks__taskid__result2_get_200_response::~OAI_taskmanager_tasks__taskid__result2_get_200_response() {}

void OAI_taskmanager_tasks__taskid__result2_get_200_response::initializeModel() {

    m_apr_isSet = false;
    m_apr_isValid = false;

    m_cur_month_profit_isSet = false;
    m_cur_month_profit_isValid = false;

    m_cur_year_profit_isSet = false;
    m_cur_year_profit_isValid = false;

    m_drawdown_isSet = false;
    m_drawdown_isValid = false;

    m_half_year_profit_isSet = false;
    m_half_year_profit_isValid = false;

    m_month_profit_isSet = false;
    m_month_profit_isValid = false;

    m_prev_month_profit_isSet = false;
    m_prev_month_profit_isValid = false;

    m_total_profit_isSet = false;
    m_total_profit_isValid = false;

    m_week_profit_isSet = false;
    m_week_profit_isValid = false;

    m_year_profit_isSet = false;
    m_year_profit_isValid = false;
}

void OAI_taskmanager_tasks__taskid__result2_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_taskmanager_tasks__taskid__result2_get_200_response::fromJsonObject(QJsonObject json) {

    m_apr_isValid = ::OpenAPI::fromJsonValue(m_apr, json[QString("apr")]);
    m_apr_isSet = !json[QString("apr")].isNull() && m_apr_isValid;

    m_cur_month_profit_isValid = ::OpenAPI::fromJsonValue(m_cur_month_profit, json[QString("curMonthProfit")]);
    m_cur_month_profit_isSet = !json[QString("curMonthProfit")].isNull() && m_cur_month_profit_isValid;

    m_cur_year_profit_isValid = ::OpenAPI::fromJsonValue(m_cur_year_profit, json[QString("curYearProfit")]);
    m_cur_year_profit_isSet = !json[QString("curYearProfit")].isNull() && m_cur_year_profit_isValid;

    m_drawdown_isValid = ::OpenAPI::fromJsonValue(m_drawdown, json[QString("drawdown")]);
    m_drawdown_isSet = !json[QString("drawdown")].isNull() && m_drawdown_isValid;

    m_half_year_profit_isValid = ::OpenAPI::fromJsonValue(m_half_year_profit, json[QString("halfYearProfit")]);
    m_half_year_profit_isSet = !json[QString("halfYearProfit")].isNull() && m_half_year_profit_isValid;

    m_month_profit_isValid = ::OpenAPI::fromJsonValue(m_month_profit, json[QString("monthProfit")]);
    m_month_profit_isSet = !json[QString("monthProfit")].isNull() && m_month_profit_isValid;

    m_prev_month_profit_isValid = ::OpenAPI::fromJsonValue(m_prev_month_profit, json[QString("prevMonthProfit")]);
    m_prev_month_profit_isSet = !json[QString("prevMonthProfit")].isNull() && m_prev_month_profit_isValid;

    m_total_profit_isValid = ::OpenAPI::fromJsonValue(m_total_profit, json[QString("totalProfit")]);
    m_total_profit_isSet = !json[QString("totalProfit")].isNull() && m_total_profit_isValid;

    m_week_profit_isValid = ::OpenAPI::fromJsonValue(m_week_profit, json[QString("weekProfit")]);
    m_week_profit_isSet = !json[QString("weekProfit")].isNull() && m_week_profit_isValid;

    m_year_profit_isValid = ::OpenAPI::fromJsonValue(m_year_profit, json[QString("yearProfit")]);
    m_year_profit_isSet = !json[QString("yearProfit")].isNull() && m_year_profit_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_taskmanager_tasks__taskid__result2_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_apr_isSet) {
        obj.insert(QString("apr"), ::OpenAPI::toJsonValue(m_apr));
    }
    if (m_cur_month_profit_isSet) {
        obj.insert(QString("curMonthProfit"), ::OpenAPI::toJsonValue(m_cur_month_profit));
    }
    if (m_cur_year_profit_isSet) {
        obj.insert(QString("curYearProfit"), ::OpenAPI::toJsonValue(m_cur_year_profit));
    }
    if (m_drawdown_isSet) {
        obj.insert(QString("drawdown"), ::OpenAPI::toJsonValue(m_drawdown));
    }
    if (m_half_year_profit_isSet) {
        obj.insert(QString("halfYearProfit"), ::OpenAPI::toJsonValue(m_half_year_profit));
    }
    if (m_month_profit_isSet) {
        obj.insert(QString("monthProfit"), ::OpenAPI::toJsonValue(m_month_profit));
    }
    if (m_prev_month_profit_isSet) {
        obj.insert(QString("prevMonthProfit"), ::OpenAPI::toJsonValue(m_prev_month_profit));
    }
    if (m_total_profit_isSet) {
        obj.insert(QString("totalProfit"), ::OpenAPI::toJsonValue(m_total_profit));
    }
    if (m_week_profit_isSet) {
        obj.insert(QString("weekProfit"), ::OpenAPI::toJsonValue(m_week_profit));
    }
    if (m_year_profit_isSet) {
        obj.insert(QString("yearProfit"), ::OpenAPI::toJsonValue(m_year_profit));
    }
    return obj;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getApr() const {
    return m_apr;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setApr(const QString &apr) {
    m_apr = apr;
    m_apr_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_apr_Set() const{
    return m_apr_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_apr_Valid() const{
    return m_apr_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getCurMonthProfit() const {
    return m_cur_month_profit;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setCurMonthProfit(const QString &cur_month_profit) {
    m_cur_month_profit = cur_month_profit;
    m_cur_month_profit_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_cur_month_profit_Set() const{
    return m_cur_month_profit_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_cur_month_profit_Valid() const{
    return m_cur_month_profit_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getCurYearProfit() const {
    return m_cur_year_profit;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setCurYearProfit(const QString &cur_year_profit) {
    m_cur_year_profit = cur_year_profit;
    m_cur_year_profit_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_cur_year_profit_Set() const{
    return m_cur_year_profit_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_cur_year_profit_Valid() const{
    return m_cur_year_profit_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getDrawdown() const {
    return m_drawdown;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setDrawdown(const QString &drawdown) {
    m_drawdown = drawdown;
    m_drawdown_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_drawdown_Set() const{
    return m_drawdown_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_drawdown_Valid() const{
    return m_drawdown_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getHalfYearProfit() const {
    return m_half_year_profit;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setHalfYearProfit(const QString &half_year_profit) {
    m_half_year_profit = half_year_profit;
    m_half_year_profit_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_half_year_profit_Set() const{
    return m_half_year_profit_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_half_year_profit_Valid() const{
    return m_half_year_profit_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getMonthProfit() const {
    return m_month_profit;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setMonthProfit(const QString &month_profit) {
    m_month_profit = month_profit;
    m_month_profit_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_month_profit_Set() const{
    return m_month_profit_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_month_profit_Valid() const{
    return m_month_profit_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getPrevMonthProfit() const {
    return m_prev_month_profit;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setPrevMonthProfit(const QString &prev_month_profit) {
    m_prev_month_profit = prev_month_profit;
    m_prev_month_profit_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_prev_month_profit_Set() const{
    return m_prev_month_profit_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_prev_month_profit_Valid() const{
    return m_prev_month_profit_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getTotalProfit() const {
    return m_total_profit;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setTotalProfit(const QString &total_profit) {
    m_total_profit = total_profit;
    m_total_profit_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_total_profit_Set() const{
    return m_total_profit_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_total_profit_Valid() const{
    return m_total_profit_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getWeekProfit() const {
    return m_week_profit;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setWeekProfit(const QString &week_profit) {
    m_week_profit = week_profit;
    m_week_profit_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_week_profit_Set() const{
    return m_week_profit_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_week_profit_Valid() const{
    return m_week_profit_isValid;
}

QString OAI_taskmanager_tasks__taskid__result2_get_200_response::getYearProfit() const {
    return m_year_profit;
}
void OAI_taskmanager_tasks__taskid__result2_get_200_response::setYearProfit(const QString &year_profit) {
    m_year_profit = year_profit;
    m_year_profit_isSet = true;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_year_profit_Set() const{
    return m_year_profit_isSet;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::is_year_profit_Valid() const{
    return m_year_profit_isValid;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cur_month_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cur_year_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drawdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_half_year_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_month_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_profit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_taskmanager_tasks__taskid__result2_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
