/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAPIApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICloudAPIApi::OAICloudAPIApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAICloudAPIApi::~OAICloudAPIApi() {
}

void OAICloudAPIApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.tradematic.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("cloudAccountsAccountidCloseallPost", defaultConf);
    _serverIndices.insert("cloudAccountsAccountidCloseallPost", 0);
    _serverConfigs.insert("cloudAccountsAccountidGet", defaultConf);
    _serverIndices.insert("cloudAccountsAccountidGet", 0);
    _serverConfigs.insert("cloudAccountsAccountidOrdersGet", defaultConf);
    _serverIndices.insert("cloudAccountsAccountidOrdersGet", 0);
    _serverConfigs.insert("cloudAccountsAccountidOrdersOrderidDelete", defaultConf);
    _serverIndices.insert("cloudAccountsAccountidOrdersOrderidDelete", 0);
    _serverConfigs.insert("cloudAccountsAccountidOrdersPost", defaultConf);
    _serverIndices.insert("cloudAccountsAccountidOrdersPost", 0);
    _serverConfigs.insert("cloudAccountsAccountidSnapshotsGet", defaultConf);
    _serverIndices.insert("cloudAccountsAccountidSnapshotsGet", 0);
    _serverConfigs.insert("cloudAccountsAccountidSyncPost", defaultConf);
    _serverIndices.insert("cloudAccountsAccountidSyncPost", 0);
    _serverConfigs.insert("cloudAccountsAccountidTradesGet", defaultConf);
    _serverIndices.insert("cloudAccountsAccountidTradesGet", 0);
    _serverConfigs.insert("cloudAccountsGet", defaultConf);
    _serverIndices.insert("cloudAccountsGet", 0);
    _serverConfigs.insert("cloudCommandsCommandidGet", defaultConf);
    _serverIndices.insert("cloudCommandsCommandidGet", 0);
    _serverConfigs.insert("cloudCommandsGet", defaultConf);
    _serverIndices.insert("cloudCommandsGet", 0);
    _serverConfigs.insert("cloudConnectionsConnectionidDelete", defaultConf);
    _serverIndices.insert("cloudConnectionsConnectionidDelete", 0);
    _serverConfigs.insert("cloudConnectionsConnectionidGet", defaultConf);
    _serverIndices.insert("cloudConnectionsConnectionidGet", 0);
    _serverConfigs.insert("cloudConnectionsConnectionidPut", defaultConf);
    _serverIndices.insert("cloudConnectionsConnectionidPut", 0);
    _serverConfigs.insert("cloudConnectionsGet", defaultConf);
    _serverIndices.insert("cloudConnectionsGet", 0);
    _serverConfigs.insert("cloudConnectionsPost", defaultConf);
    _serverIndices.insert("cloudConnectionsPost", 0);
    _serverConfigs.insert("cloudConnectorsConnectoridGet", defaultConf);
    _serverIndices.insert("cloudConnectorsConnectoridGet", 0);
    _serverConfigs.insert("cloudConnectorsGet", defaultConf);
    _serverIndices.insert("cloudConnectorsGet", 0);
    _serverConfigs.insert("cloudSessionsGet", defaultConf);
    _serverIndices.insert("cloudSessionsGet", 0);
    _serverConfigs.insert("cloudSessionsSessionidGet", defaultConf);
    _serverIndices.insert("cloudSessionsSessionidGet", 0);
    _serverConfigs.insert("cloudStrategiesGet", defaultConf);
    _serverIndices.insert("cloudStrategiesGet", 0);
    _serverConfigs.insert("cloudStrategiesStartPost", defaultConf);
    _serverIndices.insert("cloudStrategiesStartPost", 0);
    _serverConfigs.insert("cloudStrategiesStrategyidGet", defaultConf);
    _serverIndices.insert("cloudStrategiesStrategyidGet", 0);
    _serverConfigs.insert("cloudStrategiesStrategyidStopPost", defaultConf);
    _serverIndices.insert("cloudStrategiesStrategyidStopPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAICloudAPIApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAICloudAPIApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAICloudAPIApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAICloudAPIApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAICloudAPIApi::setUsername(const QString &username) {
    _username = username;
}

void OAICloudAPIApi::setPassword(const QString &password) {
    _password = password;
}


void OAICloudAPIApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAICloudAPIApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAICloudAPIApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAICloudAPIApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICloudAPIApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICloudAPIApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAICloudAPIApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAICloudAPIApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAICloudAPIApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAICloudAPIApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAICloudAPIApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAICloudAPIApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAICloudAPIApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAICloudAPIApi::cloudAccountsAccountidCloseallPost(const qint64 &accountid) {
    QString fullPath = QString(_serverConfigs["cloudAccountsAccountidCloseallPost"][_serverIndices.value("cloudAccountsAccountidCloseallPost")].URL()+"/cloud/accounts/{accountid}/closeall");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString accountidPathParam("{");
        accountidPathParam.append("accountid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountid"+pathSuffix : pathPrefix;
        fullPath.replace(accountidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accountid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsAccountidCloseallPostCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsAccountidCloseallPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_accounts__accountid__closeall_post_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsAccountidCloseallPostSignal(output);
        Q_EMIT cloudAccountsAccountidCloseallPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsAccountidCloseallPostSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidCloseallPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsAccountidCloseallPostSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidCloseallPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudAccountsAccountidGet(const qint64 &accountid) {
    QString fullPath = QString(_serverConfigs["cloudAccountsAccountidGet"][_serverIndices.value("cloudAccountsAccountidGet")].URL()+"/cloud/accounts/{accountid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString accountidPathParam("{");
        accountidPathParam.append("accountid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountid"+pathSuffix : pathPrefix;
        fullPath.replace(accountidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accountid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsAccountidGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsAccountidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsAccountidGetSignal(output);
        Q_EMIT cloudAccountsAccountidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsAccountidGetSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsAccountidGetSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudAccountsAccountidOrdersGet(const qint64 &accountid) {
    QString fullPath = QString(_serverConfigs["cloudAccountsAccountidOrdersGet"][_serverIndices.value("cloudAccountsAccountidOrdersGet")].URL()+"/cloud/accounts/{accountid}/orders");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString accountidPathParam("{");
        accountidPathParam.append("accountid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountid"+pathSuffix : pathPrefix;
        fullPath.replace(accountidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accountid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsAccountidOrdersGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsAccountidOrdersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIOrder> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIOrder val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsAccountidOrdersGetSignal(output);
        Q_EMIT cloudAccountsAccountidOrdersGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsAccountidOrdersGetSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidOrdersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsAccountidOrdersGetSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidOrdersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudAccountsAccountidOrdersOrderidDelete(const qint64 &accountid, const qint64 &orderid) {
    QString fullPath = QString(_serverConfigs["cloudAccountsAccountidOrdersOrderidDelete"][_serverIndices.value("cloudAccountsAccountidOrdersOrderidDelete")].URL()+"/cloud/accounts/{accountid}/orders/{orderid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString accountidPathParam("{");
        accountidPathParam.append("accountid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountid"+pathSuffix : pathPrefix;
        fullPath.replace(accountidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accountid)));
    }
    
    {
        QString orderidPathParam("{");
        orderidPathParam.append("orderid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "orderid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"orderid"+pathSuffix : pathPrefix;
        fullPath.replace(orderidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(orderid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsAccountidOrdersOrderidDeleteCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsAccountidOrdersOrderidDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_accounts__accountid__closeall_post_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsAccountidOrdersOrderidDeleteSignal(output);
        Q_EMIT cloudAccountsAccountidOrdersOrderidDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsAccountidOrdersOrderidDeleteSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidOrdersOrderidDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsAccountidOrdersOrderidDeleteSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidOrdersOrderidDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudAccountsAccountidOrdersPost(const qint64 &accountid, const OAI_cloud_accounts__accountid__orders_post_request &body) {
    QString fullPath = QString(_serverConfigs["cloudAccountsAccountidOrdersPost"][_serverIndices.value("cloudAccountsAccountidOrdersPost")].URL()+"/cloud/accounts/{accountid}/orders");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString accountidPathParam("{");
        accountidPathParam.append("accountid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountid"+pathSuffix : pathPrefix;
        fullPath.replace(accountidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accountid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsAccountidOrdersPostCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsAccountidOrdersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_accounts__accountid__closeall_post_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsAccountidOrdersPostSignal(output);
        Q_EMIT cloudAccountsAccountidOrdersPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsAccountidOrdersPostSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidOrdersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsAccountidOrdersPostSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidOrdersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudAccountsAccountidSnapshotsGet(const qint64 &accountid) {
    QString fullPath = QString(_serverConfigs["cloudAccountsAccountidSnapshotsGet"][_serverIndices.value("cloudAccountsAccountidSnapshotsGet")].URL()+"/cloud/accounts/{accountid}/snapshots");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString accountidPathParam("{");
        accountidPathParam.append("accountid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountid"+pathSuffix : pathPrefix;
        fullPath.replace(accountidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accountid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsAccountidSnapshotsGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsAccountidSnapshotsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISnapshot> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISnapshot val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsAccountidSnapshotsGetSignal(output);
        Q_EMIT cloudAccountsAccountidSnapshotsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsAccountidSnapshotsGetSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidSnapshotsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsAccountidSnapshotsGetSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidSnapshotsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudAccountsAccountidSyncPost(const qint64 &accountid) {
    QString fullPath = QString(_serverConfigs["cloudAccountsAccountidSyncPost"][_serverIndices.value("cloudAccountsAccountidSyncPost")].URL()+"/cloud/accounts/{accountid}/sync");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString accountidPathParam("{");
        accountidPathParam.append("accountid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountid"+pathSuffix : pathPrefix;
        fullPath.replace(accountidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accountid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsAccountidSyncPostCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsAccountidSyncPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_accounts__accountid__closeall_post_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsAccountidSyncPostSignal(output);
        Q_EMIT cloudAccountsAccountidSyncPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsAccountidSyncPostSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidSyncPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsAccountidSyncPostSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidSyncPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudAccountsAccountidTradesGet(const qint64 &accountid) {
    QString fullPath = QString(_serverConfigs["cloudAccountsAccountidTradesGet"][_serverIndices.value("cloudAccountsAccountidTradesGet")].URL()+"/cloud/accounts/{accountid}/trades");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString accountidPathParam("{");
        accountidPathParam.append("accountid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accountid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accountid"+pathSuffix : pathPrefix;
        fullPath.replace(accountidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accountid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsAccountidTradesGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsAccountidTradesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITrade> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITrade val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsAccountidTradesGetSignal(output);
        Q_EMIT cloudAccountsAccountidTradesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsAccountidTradesGetSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidTradesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsAccountidTradesGetSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsAccountidTradesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudAccountsGet() {
    QString fullPath = QString(_serverConfigs["cloudAccountsGet"][_serverIndices.value("cloudAccountsGet")].URL()+"/cloud/accounts");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudAccountsGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudAccountsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAccount> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAccount val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudAccountsGetSignal(output);
        Q_EMIT cloudAccountsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudAccountsGetSignalE(output, error_type, error_str);
        Q_EMIT cloudAccountsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudAccountsGetSignalError(output, error_type, error_str);
        Q_EMIT cloudAccountsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudCommandsCommandidGet(const qint64 &commandid) {
    QString fullPath = QString(_serverConfigs["cloudCommandsCommandidGet"][_serverIndices.value("cloudCommandsCommandidGet")].URL()+"/cloud/commands/{commandid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString commandidPathParam("{");
        commandidPathParam.append("commandid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commandid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commandid"+pathSuffix : pathPrefix;
        fullPath.replace(commandidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commandid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudCommandsCommandidGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudCommandsCommandidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICommand output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudCommandsCommandidGetSignal(output);
        Q_EMIT cloudCommandsCommandidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudCommandsCommandidGetSignalE(output, error_type, error_str);
        Q_EMIT cloudCommandsCommandidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudCommandsCommandidGetSignalError(output, error_type, error_str);
        Q_EMIT cloudCommandsCommandidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudCommandsGet() {
    QString fullPath = QString(_serverConfigs["cloudCommandsGet"][_serverIndices.value("cloudCommandsGet")].URL()+"/cloud/commands");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudCommandsGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudCommandsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICommand> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICommand val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudCommandsGetSignal(output);
        Q_EMIT cloudCommandsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudCommandsGetSignalE(output, error_type, error_str);
        Q_EMIT cloudCommandsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudCommandsGetSignalError(output, error_type, error_str);
        Q_EMIT cloudCommandsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudConnectionsConnectionidDelete(const qint64 &connectionid) {
    QString fullPath = QString(_serverConfigs["cloudConnectionsConnectionidDelete"][_serverIndices.value("cloudConnectionsConnectionidDelete")].URL()+"/cloud/connections/{connectionid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString connectionidPathParam("{");
        connectionidPathParam.append("connectionid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "connectionid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"connectionid"+pathSuffix : pathPrefix;
        fullPath.replace(connectionidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(connectionid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudConnectionsConnectionidDeleteCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudConnectionsConnectionidDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_connections_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudConnectionsConnectionidDeleteSignal(output);
        Q_EMIT cloudConnectionsConnectionidDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudConnectionsConnectionidDeleteSignalE(output, error_type, error_str);
        Q_EMIT cloudConnectionsConnectionidDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudConnectionsConnectionidDeleteSignalError(output, error_type, error_str);
        Q_EMIT cloudConnectionsConnectionidDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudConnectionsConnectionidGet(const qint64 &connectionid) {
    QString fullPath = QString(_serverConfigs["cloudConnectionsConnectionidGet"][_serverIndices.value("cloudConnectionsConnectionidGet")].URL()+"/cloud/connections/{connectionid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString connectionidPathParam("{");
        connectionidPathParam.append("connectionid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "connectionid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"connectionid"+pathSuffix : pathPrefix;
        fullPath.replace(connectionidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(connectionid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudConnectionsConnectionidGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudConnectionsConnectionidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConnection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudConnectionsConnectionidGetSignal(output);
        Q_EMIT cloudConnectionsConnectionidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudConnectionsConnectionidGetSignalE(output, error_type, error_str);
        Q_EMIT cloudConnectionsConnectionidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudConnectionsConnectionidGetSignalError(output, error_type, error_str);
        Q_EMIT cloudConnectionsConnectionidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudConnectionsConnectionidPut(const qint64 &connectionid, const OAI_cloud_connections_post_request &body) {
    QString fullPath = QString(_serverConfigs["cloudConnectionsConnectionidPut"][_serverIndices.value("cloudConnectionsConnectionidPut")].URL()+"/cloud/connections/{connectionid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString connectionidPathParam("{");
        connectionidPathParam.append("connectionid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "connectionid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"connectionid"+pathSuffix : pathPrefix;
        fullPath.replace(connectionidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(connectionid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudConnectionsConnectionidPutCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudConnectionsConnectionidPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_connections_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudConnectionsConnectionidPutSignal(output);
        Q_EMIT cloudConnectionsConnectionidPutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudConnectionsConnectionidPutSignalE(output, error_type, error_str);
        Q_EMIT cloudConnectionsConnectionidPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudConnectionsConnectionidPutSignalError(output, error_type, error_str);
        Q_EMIT cloudConnectionsConnectionidPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudConnectionsGet() {
    QString fullPath = QString(_serverConfigs["cloudConnectionsGet"][_serverIndices.value("cloudConnectionsGet")].URL()+"/cloud/connections");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudConnectionsGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudConnectionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIConnection> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIConnection val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudConnectionsGetSignal(output);
        Q_EMIT cloudConnectionsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudConnectionsGetSignalE(output, error_type, error_str);
        Q_EMIT cloudConnectionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudConnectionsGetSignalError(output, error_type, error_str);
        Q_EMIT cloudConnectionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudConnectionsPost(const OAI_cloud_connections_post_request &body) {
    QString fullPath = QString(_serverConfigs["cloudConnectionsPost"][_serverIndices.value("cloudConnectionsPost")].URL()+"/cloud/connections");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudConnectionsPostCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudConnectionsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_connections_post_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudConnectionsPostSignal(output);
        Q_EMIT cloudConnectionsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudConnectionsPostSignalE(output, error_type, error_str);
        Q_EMIT cloudConnectionsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudConnectionsPostSignalError(output, error_type, error_str);
        Q_EMIT cloudConnectionsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudConnectorsConnectoridGet(const qint64 &connectorid) {
    QString fullPath = QString(_serverConfigs["cloudConnectorsConnectoridGet"][_serverIndices.value("cloudConnectorsConnectoridGet")].URL()+"/cloud/connectors/{connectorid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString connectoridPathParam("{");
        connectoridPathParam.append("connectorid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "connectorid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"connectorid"+pathSuffix : pathPrefix;
        fullPath.replace(connectoridPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(connectorid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudConnectorsConnectoridGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudConnectorsConnectoridGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConnector output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudConnectorsConnectoridGetSignal(output);
        Q_EMIT cloudConnectorsConnectoridGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudConnectorsConnectoridGetSignalE(output, error_type, error_str);
        Q_EMIT cloudConnectorsConnectoridGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudConnectorsConnectoridGetSignalError(output, error_type, error_str);
        Q_EMIT cloudConnectorsConnectoridGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudConnectorsGet() {
    QString fullPath = QString(_serverConfigs["cloudConnectorsGet"][_serverIndices.value("cloudConnectorsGet")].URL()+"/cloud/connectors");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudConnectorsGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudConnectorsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIConnector> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIConnector val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudConnectorsGetSignal(output);
        Q_EMIT cloudConnectorsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudConnectorsGetSignalE(output, error_type, error_str);
        Q_EMIT cloudConnectorsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudConnectorsGetSignalError(output, error_type, error_str);
        Q_EMIT cloudConnectorsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudSessionsGet() {
    QString fullPath = QString(_serverConfigs["cloudSessionsGet"][_serverIndices.value("cloudSessionsGet")].URL()+"/cloud/sessions");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudSessionsGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudSessionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISession> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISession val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudSessionsGetSignal(output);
        Q_EMIT cloudSessionsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudSessionsGetSignalE(output, error_type, error_str);
        Q_EMIT cloudSessionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudSessionsGetSignalError(output, error_type, error_str);
        Q_EMIT cloudSessionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudSessionsSessionidGet(const qint64 &sessionid) {
    QString fullPath = QString(_serverConfigs["cloudSessionsSessionidGet"][_serverIndices.value("cloudSessionsSessionidGet")].URL()+"/cloud/sessions/{sessionid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString sessionidPathParam("{");
        sessionidPathParam.append("sessionid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionid"+pathSuffix : pathPrefix;
        fullPath.replace(sessionidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sessionid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudSessionsSessionidGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudSessionsSessionidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISession output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudSessionsSessionidGetSignal(output);
        Q_EMIT cloudSessionsSessionidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudSessionsSessionidGetSignalE(output, error_type, error_str);
        Q_EMIT cloudSessionsSessionidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudSessionsSessionidGetSignalError(output, error_type, error_str);
        Q_EMIT cloudSessionsSessionidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudStrategiesGet() {
    QString fullPath = QString(_serverConfigs["cloudStrategiesGet"][_serverIndices.value("cloudStrategiesGet")].URL()+"/cloud/strategies");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudStrategiesGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudStrategiesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICloudStrategy> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICloudStrategy val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudStrategiesGetSignal(output);
        Q_EMIT cloudStrategiesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudStrategiesGetSignalE(output, error_type, error_str);
        Q_EMIT cloudStrategiesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudStrategiesGetSignalError(output, error_type, error_str);
        Q_EMIT cloudStrategiesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudStrategiesStartPost(const OAI_cloud_strategies_start_post_request &body) {
    QString fullPath = QString(_serverConfigs["cloudStrategiesStartPost"][_serverIndices.value("cloudStrategiesStartPost")].URL()+"/cloud/strategies/start");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudStrategiesStartPostCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudStrategiesStartPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_accounts__accountid__closeall_post_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudStrategiesStartPostSignal(output);
        Q_EMIT cloudStrategiesStartPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudStrategiesStartPostSignalE(output, error_type, error_str);
        Q_EMIT cloudStrategiesStartPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudStrategiesStartPostSignalError(output, error_type, error_str);
        Q_EMIT cloudStrategiesStartPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudStrategiesStrategyidGet(const qint64 &strategyid) {
    QString fullPath = QString(_serverConfigs["cloudStrategiesStrategyidGet"][_serverIndices.value("cloudStrategiesStrategyidGet")].URL()+"/cloud/strategies/{strategyid}");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString strategyidPathParam("{");
        strategyidPathParam.append("strategyid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyid"+pathSuffix : pathPrefix;
        fullPath.replace(strategyidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategyid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudStrategiesStrategyidGetCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudStrategiesStrategyidGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICloudStrategy> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICloudStrategy val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudStrategiesStrategyidGetSignal(output);
        Q_EMIT cloudStrategiesStrategyidGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudStrategiesStrategyidGetSignalE(output, error_type, error_str);
        Q_EMIT cloudStrategiesStrategyidGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudStrategiesStrategyidGetSignalError(output, error_type, error_str);
        Q_EMIT cloudStrategiesStrategyidGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::cloudStrategiesStrategyidStopPost(const qint64 &strategyid) {
    QString fullPath = QString(_serverConfigs["cloudStrategiesStrategyidStopPost"][_serverIndices.value("cloudStrategiesStrategyidStopPost")].URL()+"/cloud/strategies/{strategyid}/stop");
    
    if (_apiKeys.contains("Secured")) {
        addHeaders("Secured",_apiKeys.find("Secured").value());
    }
    
    
    {
        QString strategyidPathParam("{");
        strategyidPathParam.append("strategyid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "strategyid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"strategyid"+pathSuffix : pathPrefix;
        fullPath.replace(strategyidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(strategyid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICloudAPIApi::cloudStrategiesStrategyidStopPostCallback);
    connect(this, &OAICloudAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICloudAPIApi::cloudStrategiesStrategyidStopPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_cloud_accounts__accountid__closeall_post_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cloudStrategiesStrategyidStopPostSignal(output);
        Q_EMIT cloudStrategiesStrategyidStopPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cloudStrategiesStrategyidStopPostSignalE(output, error_type, error_str);
        Q_EMIT cloudStrategiesStrategyidStopPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cloudStrategiesStrategyidStopPostSignalError(output, error_type, error_str);
        Q_EMIT cloudStrategiesStrategyidStopPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICloudAPIApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
