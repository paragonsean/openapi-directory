/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarket::OAIMarket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarket::OAIMarket() {
    this->initializeModel();
}

OAIMarket::~OAIMarket() {}

void OAIMarket::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_countryid_isSet = false;
    m_countryid_isValid = false;

    m_marketid_isSet = false;
    m_marketid_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIMarket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarket::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_countryid_isValid = ::OpenAPI::fromJsonValue(m_countryid, json[QString("countryid")]);
    m_countryid_isSet = !json[QString("countryid")].isNull() && m_countryid_isValid;

    m_marketid_isValid = ::OpenAPI::fromJsonValue(m_marketid, json[QString("marketid")]);
    m_marketid_isSet = !json[QString("marketid")].isNull() && m_marketid_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIMarket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarket::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_countryid_isSet) {
        obj.insert(QString("countryid"), ::OpenAPI::toJsonValue(m_countryid));
    }
    if (m_marketid_isSet) {
        obj.insert(QString("marketid"), ::OpenAPI::toJsonValue(m_marketid));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIMarket::getCode() const {
    return m_code;
}
void OAIMarket::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIMarket::is_code_Set() const{
    return m_code_isSet;
}

bool OAIMarket::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIMarket::getCountryid() const {
    return m_countryid;
}
void OAIMarket::setCountryid(const QString &countryid) {
    m_countryid = countryid;
    m_countryid_isSet = true;
}

bool OAIMarket::is_countryid_Set() const{
    return m_countryid_isSet;
}

bool OAIMarket::is_countryid_Valid() const{
    return m_countryid_isValid;
}

QString OAIMarket::getMarketid() const {
    return m_marketid;
}
void OAIMarket::setMarketid(const QString &marketid) {
    m_marketid = marketid;
    m_marketid_isSet = true;
}

bool OAIMarket::is_marketid_Set() const{
    return m_marketid_isSet;
}

bool OAIMarket::is_marketid_Valid() const{
    return m_marketid_isValid;
}

QString OAIMarket::getName() const {
    return m_name;
}
void OAIMarket::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMarket::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMarket::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIMarket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countryid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
