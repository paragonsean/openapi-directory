/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongshort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongshort::OAILongshort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongshort::OAILongshort() {
    this->initializeModel();
}

OAILongshort::~OAILongshort() {}

void OAILongshort::initializeModel() {

    m_apr_isSet = false;
    m_apr_isValid = false;

    m_avgbarsheld_isSet = false;
    m_avgbarsheld_isValid = false;

    m_avgloss_isSet = false;
    m_avgloss_isValid = false;

    m_avglossbarsheld_isSet = false;
    m_avglossbarsheld_isValid = false;

    m_avglosspct_isSet = false;
    m_avglosspct_isValid = false;

    m_avgprofit_isSet = false;
    m_avgprofit_isValid = false;

    m_avgprofitavgloss_isSet = false;
    m_avgprofitavgloss_isValid = false;

    m_avgprofitbarsheld_isSet = false;
    m_avgprofitbarsheld_isValid = false;

    m_avgprofitpct_isSet = false;
    m_avgprofitpct_isValid = false;

    m_endcapital_isSet = false;
    m_endcapital_isValid = false;

    m_exposure_isSet = false;
    m_exposure_isValid = false;

    m_grossloss_isSet = false;
    m_grossloss_isValid = false;

    m_grossprofit_isSet = false;
    m_grossprofit_isValid = false;

    m_losingtrades_isSet = false;
    m_losingtrades_isValid = false;

    m_losingtradespct_isSet = false;
    m_losingtradespct_isValid = false;

    m_mar_isSet = false;
    m_mar_isValid = false;

    m_margininterest_isSet = false;
    m_margininterest_isValid = false;

    m_maxconsecloss_isSet = false;
    m_maxconsecloss_isValid = false;

    m_maxconsecwin_isSet = false;
    m_maxconsecwin_isValid = false;

    m_maxdrawdown_isSet = false;
    m_maxdrawdown_isValid = false;

    m_maxdrawdowndate_isSet = false;
    m_maxdrawdowndate_isValid = false;

    m_maxdrawdownlength_isSet = false;
    m_maxdrawdownlength_isValid = false;

    m_maxdrawdownpct_isSet = false;
    m_maxdrawdownpct_isValid = false;

    m_maxdrawdownpctdate_isSet = false;
    m_maxdrawdownpctdate_isValid = false;

    m_mpr_isSet = false;
    m_mpr_isValid = false;

    m_netprofit_isSet = false;
    m_netprofit_isValid = false;

    m_netprofitpct_isSet = false;
    m_netprofitpct_isValid = false;

    m_profitabletrades_isSet = false;
    m_profitabletrades_isValid = false;

    m_profitabletradespct_isSet = false;
    m_profitabletradespct_isValid = false;

    m_profitfactor_isSet = false;
    m_profitfactor_isValid = false;

    m_profitriskratio_isSet = false;
    m_profitriskratio_isValid = false;

    m_rar_isSet = false;
    m_rar_isValid = false;

    m_recoveryfactor_isSet = false;
    m_recoveryfactor_isValid = false;

    m_sharperatio_isSet = false;
    m_sharperatio_isValid = false;

    m_sortinoratio_isSet = false;
    m_sortinoratio_isValid = false;

    m_startcapital_isSet = false;
    m_startcapital_isValid = false;

    m_totalcommission_isSet = false;
    m_totalcommission_isValid = false;

    m_totaltrades_isSet = false;
    m_totaltrades_isValid = false;

    m_totalvolume_isSet = false;
    m_totalvolume_isValid = false;

    m_turnover_isSet = false;
    m_turnover_isValid = false;
}

void OAILongshort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongshort::fromJsonObject(QJsonObject json) {

    m_apr_isValid = ::OpenAPI::fromJsonValue(m_apr, json[QString("apr")]);
    m_apr_isSet = !json[QString("apr")].isNull() && m_apr_isValid;

    m_avgbarsheld_isValid = ::OpenAPI::fromJsonValue(m_avgbarsheld, json[QString("avgbarsheld")]);
    m_avgbarsheld_isSet = !json[QString("avgbarsheld")].isNull() && m_avgbarsheld_isValid;

    m_avgloss_isValid = ::OpenAPI::fromJsonValue(m_avgloss, json[QString("avgloss")]);
    m_avgloss_isSet = !json[QString("avgloss")].isNull() && m_avgloss_isValid;

    m_avglossbarsheld_isValid = ::OpenAPI::fromJsonValue(m_avglossbarsheld, json[QString("avglossbarsheld")]);
    m_avglossbarsheld_isSet = !json[QString("avglossbarsheld")].isNull() && m_avglossbarsheld_isValid;

    m_avglosspct_isValid = ::OpenAPI::fromJsonValue(m_avglosspct, json[QString("avglosspct")]);
    m_avglosspct_isSet = !json[QString("avglosspct")].isNull() && m_avglosspct_isValid;

    m_avgprofit_isValid = ::OpenAPI::fromJsonValue(m_avgprofit, json[QString("avgprofit")]);
    m_avgprofit_isSet = !json[QString("avgprofit")].isNull() && m_avgprofit_isValid;

    m_avgprofitavgloss_isValid = ::OpenAPI::fromJsonValue(m_avgprofitavgloss, json[QString("avgprofitavgloss")]);
    m_avgprofitavgloss_isSet = !json[QString("avgprofitavgloss")].isNull() && m_avgprofitavgloss_isValid;

    m_avgprofitbarsheld_isValid = ::OpenAPI::fromJsonValue(m_avgprofitbarsheld, json[QString("avgprofitbarsheld")]);
    m_avgprofitbarsheld_isSet = !json[QString("avgprofitbarsheld")].isNull() && m_avgprofitbarsheld_isValid;

    m_avgprofitpct_isValid = ::OpenAPI::fromJsonValue(m_avgprofitpct, json[QString("avgprofitpct")]);
    m_avgprofitpct_isSet = !json[QString("avgprofitpct")].isNull() && m_avgprofitpct_isValid;

    m_endcapital_isValid = ::OpenAPI::fromJsonValue(m_endcapital, json[QString("endcapital")]);
    m_endcapital_isSet = !json[QString("endcapital")].isNull() && m_endcapital_isValid;

    m_exposure_isValid = ::OpenAPI::fromJsonValue(m_exposure, json[QString("exposure")]);
    m_exposure_isSet = !json[QString("exposure")].isNull() && m_exposure_isValid;

    m_grossloss_isValid = ::OpenAPI::fromJsonValue(m_grossloss, json[QString("grossloss")]);
    m_grossloss_isSet = !json[QString("grossloss")].isNull() && m_grossloss_isValid;

    m_grossprofit_isValid = ::OpenAPI::fromJsonValue(m_grossprofit, json[QString("grossprofit")]);
    m_grossprofit_isSet = !json[QString("grossprofit")].isNull() && m_grossprofit_isValid;

    m_losingtrades_isValid = ::OpenAPI::fromJsonValue(m_losingtrades, json[QString("losingtrades")]);
    m_losingtrades_isSet = !json[QString("losingtrades")].isNull() && m_losingtrades_isValid;

    m_losingtradespct_isValid = ::OpenAPI::fromJsonValue(m_losingtradespct, json[QString("losingtradespct")]);
    m_losingtradespct_isSet = !json[QString("losingtradespct")].isNull() && m_losingtradespct_isValid;

    m_mar_isValid = ::OpenAPI::fromJsonValue(m_mar, json[QString("mar")]);
    m_mar_isSet = !json[QString("mar")].isNull() && m_mar_isValid;

    m_margininterest_isValid = ::OpenAPI::fromJsonValue(m_margininterest, json[QString("margininterest")]);
    m_margininterest_isSet = !json[QString("margininterest")].isNull() && m_margininterest_isValid;

    m_maxconsecloss_isValid = ::OpenAPI::fromJsonValue(m_maxconsecloss, json[QString("maxconsecloss")]);
    m_maxconsecloss_isSet = !json[QString("maxconsecloss")].isNull() && m_maxconsecloss_isValid;

    m_maxconsecwin_isValid = ::OpenAPI::fromJsonValue(m_maxconsecwin, json[QString("maxconsecwin")]);
    m_maxconsecwin_isSet = !json[QString("maxconsecwin")].isNull() && m_maxconsecwin_isValid;

    m_maxdrawdown_isValid = ::OpenAPI::fromJsonValue(m_maxdrawdown, json[QString("maxdrawdown")]);
    m_maxdrawdown_isSet = !json[QString("maxdrawdown")].isNull() && m_maxdrawdown_isValid;

    m_maxdrawdowndate_isValid = ::OpenAPI::fromJsonValue(m_maxdrawdowndate, json[QString("maxdrawdowndate")]);
    m_maxdrawdowndate_isSet = !json[QString("maxdrawdowndate")].isNull() && m_maxdrawdowndate_isValid;

    m_maxdrawdownlength_isValid = ::OpenAPI::fromJsonValue(m_maxdrawdownlength, json[QString("maxdrawdownlength")]);
    m_maxdrawdownlength_isSet = !json[QString("maxdrawdownlength")].isNull() && m_maxdrawdownlength_isValid;

    m_maxdrawdownpct_isValid = ::OpenAPI::fromJsonValue(m_maxdrawdownpct, json[QString("maxdrawdownpct")]);
    m_maxdrawdownpct_isSet = !json[QString("maxdrawdownpct")].isNull() && m_maxdrawdownpct_isValid;

    m_maxdrawdownpctdate_isValid = ::OpenAPI::fromJsonValue(m_maxdrawdownpctdate, json[QString("maxdrawdownpctdate")]);
    m_maxdrawdownpctdate_isSet = !json[QString("maxdrawdownpctdate")].isNull() && m_maxdrawdownpctdate_isValid;

    m_mpr_isValid = ::OpenAPI::fromJsonValue(m_mpr, json[QString("mpr")]);
    m_mpr_isSet = !json[QString("mpr")].isNull() && m_mpr_isValid;

    m_netprofit_isValid = ::OpenAPI::fromJsonValue(m_netprofit, json[QString("netprofit")]);
    m_netprofit_isSet = !json[QString("netprofit")].isNull() && m_netprofit_isValid;

    m_netprofitpct_isValid = ::OpenAPI::fromJsonValue(m_netprofitpct, json[QString("netprofitpct")]);
    m_netprofitpct_isSet = !json[QString("netprofitpct")].isNull() && m_netprofitpct_isValid;

    m_profitabletrades_isValid = ::OpenAPI::fromJsonValue(m_profitabletrades, json[QString("profitabletrades")]);
    m_profitabletrades_isSet = !json[QString("profitabletrades")].isNull() && m_profitabletrades_isValid;

    m_profitabletradespct_isValid = ::OpenAPI::fromJsonValue(m_profitabletradespct, json[QString("profitabletradespct")]);
    m_profitabletradespct_isSet = !json[QString("profitabletradespct")].isNull() && m_profitabletradespct_isValid;

    m_profitfactor_isValid = ::OpenAPI::fromJsonValue(m_profitfactor, json[QString("profitfactor")]);
    m_profitfactor_isSet = !json[QString("profitfactor")].isNull() && m_profitfactor_isValid;

    m_profitriskratio_isValid = ::OpenAPI::fromJsonValue(m_profitriskratio, json[QString("profitriskratio")]);
    m_profitriskratio_isSet = !json[QString("profitriskratio")].isNull() && m_profitriskratio_isValid;

    m_rar_isValid = ::OpenAPI::fromJsonValue(m_rar, json[QString("rar")]);
    m_rar_isSet = !json[QString("rar")].isNull() && m_rar_isValid;

    m_recoveryfactor_isValid = ::OpenAPI::fromJsonValue(m_recoveryfactor, json[QString("recoveryfactor")]);
    m_recoveryfactor_isSet = !json[QString("recoveryfactor")].isNull() && m_recoveryfactor_isValid;

    m_sharperatio_isValid = ::OpenAPI::fromJsonValue(m_sharperatio, json[QString("sharperatio")]);
    m_sharperatio_isSet = !json[QString("sharperatio")].isNull() && m_sharperatio_isValid;

    m_sortinoratio_isValid = ::OpenAPI::fromJsonValue(m_sortinoratio, json[QString("sortinoratio")]);
    m_sortinoratio_isSet = !json[QString("sortinoratio")].isNull() && m_sortinoratio_isValid;

    m_startcapital_isValid = ::OpenAPI::fromJsonValue(m_startcapital, json[QString("startcapital")]);
    m_startcapital_isSet = !json[QString("startcapital")].isNull() && m_startcapital_isValid;

    m_totalcommission_isValid = ::OpenAPI::fromJsonValue(m_totalcommission, json[QString("totalcommission")]);
    m_totalcommission_isSet = !json[QString("totalcommission")].isNull() && m_totalcommission_isValid;

    m_totaltrades_isValid = ::OpenAPI::fromJsonValue(m_totaltrades, json[QString("totaltrades")]);
    m_totaltrades_isSet = !json[QString("totaltrades")].isNull() && m_totaltrades_isValid;

    m_totalvolume_isValid = ::OpenAPI::fromJsonValue(m_totalvolume, json[QString("totalvolume")]);
    m_totalvolume_isSet = !json[QString("totalvolume")].isNull() && m_totalvolume_isValid;

    m_turnover_isValid = ::OpenAPI::fromJsonValue(m_turnover, json[QString("turnover")]);
    m_turnover_isSet = !json[QString("turnover")].isNull() && m_turnover_isValid;
}

QString OAILongshort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongshort::asJsonObject() const {
    QJsonObject obj;
    if (m_apr_isSet) {
        obj.insert(QString("apr"), ::OpenAPI::toJsonValue(m_apr));
    }
    if (m_avgbarsheld_isSet) {
        obj.insert(QString("avgbarsheld"), ::OpenAPI::toJsonValue(m_avgbarsheld));
    }
    if (m_avgloss_isSet) {
        obj.insert(QString("avgloss"), ::OpenAPI::toJsonValue(m_avgloss));
    }
    if (m_avglossbarsheld_isSet) {
        obj.insert(QString("avglossbarsheld"), ::OpenAPI::toJsonValue(m_avglossbarsheld));
    }
    if (m_avglosspct_isSet) {
        obj.insert(QString("avglosspct"), ::OpenAPI::toJsonValue(m_avglosspct));
    }
    if (m_avgprofit_isSet) {
        obj.insert(QString("avgprofit"), ::OpenAPI::toJsonValue(m_avgprofit));
    }
    if (m_avgprofitavgloss_isSet) {
        obj.insert(QString("avgprofitavgloss"), ::OpenAPI::toJsonValue(m_avgprofitavgloss));
    }
    if (m_avgprofitbarsheld_isSet) {
        obj.insert(QString("avgprofitbarsheld"), ::OpenAPI::toJsonValue(m_avgprofitbarsheld));
    }
    if (m_avgprofitpct_isSet) {
        obj.insert(QString("avgprofitpct"), ::OpenAPI::toJsonValue(m_avgprofitpct));
    }
    if (m_endcapital_isSet) {
        obj.insert(QString("endcapital"), ::OpenAPI::toJsonValue(m_endcapital));
    }
    if (m_exposure_isSet) {
        obj.insert(QString("exposure"), ::OpenAPI::toJsonValue(m_exposure));
    }
    if (m_grossloss_isSet) {
        obj.insert(QString("grossloss"), ::OpenAPI::toJsonValue(m_grossloss));
    }
    if (m_grossprofit_isSet) {
        obj.insert(QString("grossprofit"), ::OpenAPI::toJsonValue(m_grossprofit));
    }
    if (m_losingtrades_isSet) {
        obj.insert(QString("losingtrades"), ::OpenAPI::toJsonValue(m_losingtrades));
    }
    if (m_losingtradespct_isSet) {
        obj.insert(QString("losingtradespct"), ::OpenAPI::toJsonValue(m_losingtradespct));
    }
    if (m_mar_isSet) {
        obj.insert(QString("mar"), ::OpenAPI::toJsonValue(m_mar));
    }
    if (m_margininterest_isSet) {
        obj.insert(QString("margininterest"), ::OpenAPI::toJsonValue(m_margininterest));
    }
    if (m_maxconsecloss_isSet) {
        obj.insert(QString("maxconsecloss"), ::OpenAPI::toJsonValue(m_maxconsecloss));
    }
    if (m_maxconsecwin_isSet) {
        obj.insert(QString("maxconsecwin"), ::OpenAPI::toJsonValue(m_maxconsecwin));
    }
    if (m_maxdrawdown_isSet) {
        obj.insert(QString("maxdrawdown"), ::OpenAPI::toJsonValue(m_maxdrawdown));
    }
    if (m_maxdrawdowndate_isSet) {
        obj.insert(QString("maxdrawdowndate"), ::OpenAPI::toJsonValue(m_maxdrawdowndate));
    }
    if (m_maxdrawdownlength_isSet) {
        obj.insert(QString("maxdrawdownlength"), ::OpenAPI::toJsonValue(m_maxdrawdownlength));
    }
    if (m_maxdrawdownpct_isSet) {
        obj.insert(QString("maxdrawdownpct"), ::OpenAPI::toJsonValue(m_maxdrawdownpct));
    }
    if (m_maxdrawdownpctdate_isSet) {
        obj.insert(QString("maxdrawdownpctdate"), ::OpenAPI::toJsonValue(m_maxdrawdownpctdate));
    }
    if (m_mpr_isSet) {
        obj.insert(QString("mpr"), ::OpenAPI::toJsonValue(m_mpr));
    }
    if (m_netprofit_isSet) {
        obj.insert(QString("netprofit"), ::OpenAPI::toJsonValue(m_netprofit));
    }
    if (m_netprofitpct_isSet) {
        obj.insert(QString("netprofitpct"), ::OpenAPI::toJsonValue(m_netprofitpct));
    }
    if (m_profitabletrades_isSet) {
        obj.insert(QString("profitabletrades"), ::OpenAPI::toJsonValue(m_profitabletrades));
    }
    if (m_profitabletradespct_isSet) {
        obj.insert(QString("profitabletradespct"), ::OpenAPI::toJsonValue(m_profitabletradespct));
    }
    if (m_profitfactor_isSet) {
        obj.insert(QString("profitfactor"), ::OpenAPI::toJsonValue(m_profitfactor));
    }
    if (m_profitriskratio_isSet) {
        obj.insert(QString("profitriskratio"), ::OpenAPI::toJsonValue(m_profitriskratio));
    }
    if (m_rar_isSet) {
        obj.insert(QString("rar"), ::OpenAPI::toJsonValue(m_rar));
    }
    if (m_recoveryfactor_isSet) {
        obj.insert(QString("recoveryfactor"), ::OpenAPI::toJsonValue(m_recoveryfactor));
    }
    if (m_sharperatio_isSet) {
        obj.insert(QString("sharperatio"), ::OpenAPI::toJsonValue(m_sharperatio));
    }
    if (m_sortinoratio_isSet) {
        obj.insert(QString("sortinoratio"), ::OpenAPI::toJsonValue(m_sortinoratio));
    }
    if (m_startcapital_isSet) {
        obj.insert(QString("startcapital"), ::OpenAPI::toJsonValue(m_startcapital));
    }
    if (m_totalcommission_isSet) {
        obj.insert(QString("totalcommission"), ::OpenAPI::toJsonValue(m_totalcommission));
    }
    if (m_totaltrades_isSet) {
        obj.insert(QString("totaltrades"), ::OpenAPI::toJsonValue(m_totaltrades));
    }
    if (m_totalvolume_isSet) {
        obj.insert(QString("totalvolume"), ::OpenAPI::toJsonValue(m_totalvolume));
    }
    if (m_turnover_isSet) {
        obj.insert(QString("turnover"), ::OpenAPI::toJsonValue(m_turnover));
    }
    return obj;
}

QString OAILongshort::getApr() const {
    return m_apr;
}
void OAILongshort::setApr(const QString &apr) {
    m_apr = apr;
    m_apr_isSet = true;
}

bool OAILongshort::is_apr_Set() const{
    return m_apr_isSet;
}

bool OAILongshort::is_apr_Valid() const{
    return m_apr_isValid;
}

QString OAILongshort::getAvgbarsheld() const {
    return m_avgbarsheld;
}
void OAILongshort::setAvgbarsheld(const QString &avgbarsheld) {
    m_avgbarsheld = avgbarsheld;
    m_avgbarsheld_isSet = true;
}

bool OAILongshort::is_avgbarsheld_Set() const{
    return m_avgbarsheld_isSet;
}

bool OAILongshort::is_avgbarsheld_Valid() const{
    return m_avgbarsheld_isValid;
}

QString OAILongshort::getAvgloss() const {
    return m_avgloss;
}
void OAILongshort::setAvgloss(const QString &avgloss) {
    m_avgloss = avgloss;
    m_avgloss_isSet = true;
}

bool OAILongshort::is_avgloss_Set() const{
    return m_avgloss_isSet;
}

bool OAILongshort::is_avgloss_Valid() const{
    return m_avgloss_isValid;
}

QString OAILongshort::getAvglossbarsheld() const {
    return m_avglossbarsheld;
}
void OAILongshort::setAvglossbarsheld(const QString &avglossbarsheld) {
    m_avglossbarsheld = avglossbarsheld;
    m_avglossbarsheld_isSet = true;
}

bool OAILongshort::is_avglossbarsheld_Set() const{
    return m_avglossbarsheld_isSet;
}

bool OAILongshort::is_avglossbarsheld_Valid() const{
    return m_avglossbarsheld_isValid;
}

QString OAILongshort::getAvglosspct() const {
    return m_avglosspct;
}
void OAILongshort::setAvglosspct(const QString &avglosspct) {
    m_avglosspct = avglosspct;
    m_avglosspct_isSet = true;
}

bool OAILongshort::is_avglosspct_Set() const{
    return m_avglosspct_isSet;
}

bool OAILongshort::is_avglosspct_Valid() const{
    return m_avglosspct_isValid;
}

QString OAILongshort::getAvgprofit() const {
    return m_avgprofit;
}
void OAILongshort::setAvgprofit(const QString &avgprofit) {
    m_avgprofit = avgprofit;
    m_avgprofit_isSet = true;
}

bool OAILongshort::is_avgprofit_Set() const{
    return m_avgprofit_isSet;
}

bool OAILongshort::is_avgprofit_Valid() const{
    return m_avgprofit_isValid;
}

QString OAILongshort::getAvgprofitavgloss() const {
    return m_avgprofitavgloss;
}
void OAILongshort::setAvgprofitavgloss(const QString &avgprofitavgloss) {
    m_avgprofitavgloss = avgprofitavgloss;
    m_avgprofitavgloss_isSet = true;
}

bool OAILongshort::is_avgprofitavgloss_Set() const{
    return m_avgprofitavgloss_isSet;
}

bool OAILongshort::is_avgprofitavgloss_Valid() const{
    return m_avgprofitavgloss_isValid;
}

QString OAILongshort::getAvgprofitbarsheld() const {
    return m_avgprofitbarsheld;
}
void OAILongshort::setAvgprofitbarsheld(const QString &avgprofitbarsheld) {
    m_avgprofitbarsheld = avgprofitbarsheld;
    m_avgprofitbarsheld_isSet = true;
}

bool OAILongshort::is_avgprofitbarsheld_Set() const{
    return m_avgprofitbarsheld_isSet;
}

bool OAILongshort::is_avgprofitbarsheld_Valid() const{
    return m_avgprofitbarsheld_isValid;
}

QString OAILongshort::getAvgprofitpct() const {
    return m_avgprofitpct;
}
void OAILongshort::setAvgprofitpct(const QString &avgprofitpct) {
    m_avgprofitpct = avgprofitpct;
    m_avgprofitpct_isSet = true;
}

bool OAILongshort::is_avgprofitpct_Set() const{
    return m_avgprofitpct_isSet;
}

bool OAILongshort::is_avgprofitpct_Valid() const{
    return m_avgprofitpct_isValid;
}

QString OAILongshort::getEndcapital() const {
    return m_endcapital;
}
void OAILongshort::setEndcapital(const QString &endcapital) {
    m_endcapital = endcapital;
    m_endcapital_isSet = true;
}

bool OAILongshort::is_endcapital_Set() const{
    return m_endcapital_isSet;
}

bool OAILongshort::is_endcapital_Valid() const{
    return m_endcapital_isValid;
}

QString OAILongshort::getExposure() const {
    return m_exposure;
}
void OAILongshort::setExposure(const QString &exposure) {
    m_exposure = exposure;
    m_exposure_isSet = true;
}

bool OAILongshort::is_exposure_Set() const{
    return m_exposure_isSet;
}

bool OAILongshort::is_exposure_Valid() const{
    return m_exposure_isValid;
}

QString OAILongshort::getGrossloss() const {
    return m_grossloss;
}
void OAILongshort::setGrossloss(const QString &grossloss) {
    m_grossloss = grossloss;
    m_grossloss_isSet = true;
}

bool OAILongshort::is_grossloss_Set() const{
    return m_grossloss_isSet;
}

bool OAILongshort::is_grossloss_Valid() const{
    return m_grossloss_isValid;
}

QString OAILongshort::getGrossprofit() const {
    return m_grossprofit;
}
void OAILongshort::setGrossprofit(const QString &grossprofit) {
    m_grossprofit = grossprofit;
    m_grossprofit_isSet = true;
}

bool OAILongshort::is_grossprofit_Set() const{
    return m_grossprofit_isSet;
}

bool OAILongshort::is_grossprofit_Valid() const{
    return m_grossprofit_isValid;
}

QString OAILongshort::getLosingtrades() const {
    return m_losingtrades;
}
void OAILongshort::setLosingtrades(const QString &losingtrades) {
    m_losingtrades = losingtrades;
    m_losingtrades_isSet = true;
}

bool OAILongshort::is_losingtrades_Set() const{
    return m_losingtrades_isSet;
}

bool OAILongshort::is_losingtrades_Valid() const{
    return m_losingtrades_isValid;
}

QString OAILongshort::getLosingtradespct() const {
    return m_losingtradespct;
}
void OAILongshort::setLosingtradespct(const QString &losingtradespct) {
    m_losingtradespct = losingtradespct;
    m_losingtradespct_isSet = true;
}

bool OAILongshort::is_losingtradespct_Set() const{
    return m_losingtradespct_isSet;
}

bool OAILongshort::is_losingtradespct_Valid() const{
    return m_losingtradespct_isValid;
}

QString OAILongshort::getMar() const {
    return m_mar;
}
void OAILongshort::setMar(const QString &mar) {
    m_mar = mar;
    m_mar_isSet = true;
}

bool OAILongshort::is_mar_Set() const{
    return m_mar_isSet;
}

bool OAILongshort::is_mar_Valid() const{
    return m_mar_isValid;
}

QString OAILongshort::getMargininterest() const {
    return m_margininterest;
}
void OAILongshort::setMargininterest(const QString &margininterest) {
    m_margininterest = margininterest;
    m_margininterest_isSet = true;
}

bool OAILongshort::is_margininterest_Set() const{
    return m_margininterest_isSet;
}

bool OAILongshort::is_margininterest_Valid() const{
    return m_margininterest_isValid;
}

QString OAILongshort::getMaxconsecloss() const {
    return m_maxconsecloss;
}
void OAILongshort::setMaxconsecloss(const QString &maxconsecloss) {
    m_maxconsecloss = maxconsecloss;
    m_maxconsecloss_isSet = true;
}

bool OAILongshort::is_maxconsecloss_Set() const{
    return m_maxconsecloss_isSet;
}

bool OAILongshort::is_maxconsecloss_Valid() const{
    return m_maxconsecloss_isValid;
}

QString OAILongshort::getMaxconsecwin() const {
    return m_maxconsecwin;
}
void OAILongshort::setMaxconsecwin(const QString &maxconsecwin) {
    m_maxconsecwin = maxconsecwin;
    m_maxconsecwin_isSet = true;
}

bool OAILongshort::is_maxconsecwin_Set() const{
    return m_maxconsecwin_isSet;
}

bool OAILongshort::is_maxconsecwin_Valid() const{
    return m_maxconsecwin_isValid;
}

QString OAILongshort::getMaxdrawdown() const {
    return m_maxdrawdown;
}
void OAILongshort::setMaxdrawdown(const QString &maxdrawdown) {
    m_maxdrawdown = maxdrawdown;
    m_maxdrawdown_isSet = true;
}

bool OAILongshort::is_maxdrawdown_Set() const{
    return m_maxdrawdown_isSet;
}

bool OAILongshort::is_maxdrawdown_Valid() const{
    return m_maxdrawdown_isValid;
}

QString OAILongshort::getMaxdrawdowndate() const {
    return m_maxdrawdowndate;
}
void OAILongshort::setMaxdrawdowndate(const QString &maxdrawdowndate) {
    m_maxdrawdowndate = maxdrawdowndate;
    m_maxdrawdowndate_isSet = true;
}

bool OAILongshort::is_maxdrawdowndate_Set() const{
    return m_maxdrawdowndate_isSet;
}

bool OAILongshort::is_maxdrawdowndate_Valid() const{
    return m_maxdrawdowndate_isValid;
}

QString OAILongshort::getMaxdrawdownlength() const {
    return m_maxdrawdownlength;
}
void OAILongshort::setMaxdrawdownlength(const QString &maxdrawdownlength) {
    m_maxdrawdownlength = maxdrawdownlength;
    m_maxdrawdownlength_isSet = true;
}

bool OAILongshort::is_maxdrawdownlength_Set() const{
    return m_maxdrawdownlength_isSet;
}

bool OAILongshort::is_maxdrawdownlength_Valid() const{
    return m_maxdrawdownlength_isValid;
}

QString OAILongshort::getMaxdrawdownpct() const {
    return m_maxdrawdownpct;
}
void OAILongshort::setMaxdrawdownpct(const QString &maxdrawdownpct) {
    m_maxdrawdownpct = maxdrawdownpct;
    m_maxdrawdownpct_isSet = true;
}

bool OAILongshort::is_maxdrawdownpct_Set() const{
    return m_maxdrawdownpct_isSet;
}

bool OAILongshort::is_maxdrawdownpct_Valid() const{
    return m_maxdrawdownpct_isValid;
}

QString OAILongshort::getMaxdrawdownpctdate() const {
    return m_maxdrawdownpctdate;
}
void OAILongshort::setMaxdrawdownpctdate(const QString &maxdrawdownpctdate) {
    m_maxdrawdownpctdate = maxdrawdownpctdate;
    m_maxdrawdownpctdate_isSet = true;
}

bool OAILongshort::is_maxdrawdownpctdate_Set() const{
    return m_maxdrawdownpctdate_isSet;
}

bool OAILongshort::is_maxdrawdownpctdate_Valid() const{
    return m_maxdrawdownpctdate_isValid;
}

QString OAILongshort::getMpr() const {
    return m_mpr;
}
void OAILongshort::setMpr(const QString &mpr) {
    m_mpr = mpr;
    m_mpr_isSet = true;
}

bool OAILongshort::is_mpr_Set() const{
    return m_mpr_isSet;
}

bool OAILongshort::is_mpr_Valid() const{
    return m_mpr_isValid;
}

QString OAILongshort::getNetprofit() const {
    return m_netprofit;
}
void OAILongshort::setNetprofit(const QString &netprofit) {
    m_netprofit = netprofit;
    m_netprofit_isSet = true;
}

bool OAILongshort::is_netprofit_Set() const{
    return m_netprofit_isSet;
}

bool OAILongshort::is_netprofit_Valid() const{
    return m_netprofit_isValid;
}

QString OAILongshort::getNetprofitpct() const {
    return m_netprofitpct;
}
void OAILongshort::setNetprofitpct(const QString &netprofitpct) {
    m_netprofitpct = netprofitpct;
    m_netprofitpct_isSet = true;
}

bool OAILongshort::is_netprofitpct_Set() const{
    return m_netprofitpct_isSet;
}

bool OAILongshort::is_netprofitpct_Valid() const{
    return m_netprofitpct_isValid;
}

QString OAILongshort::getProfitabletrades() const {
    return m_profitabletrades;
}
void OAILongshort::setProfitabletrades(const QString &profitabletrades) {
    m_profitabletrades = profitabletrades;
    m_profitabletrades_isSet = true;
}

bool OAILongshort::is_profitabletrades_Set() const{
    return m_profitabletrades_isSet;
}

bool OAILongshort::is_profitabletrades_Valid() const{
    return m_profitabletrades_isValid;
}

QString OAILongshort::getProfitabletradespct() const {
    return m_profitabletradespct;
}
void OAILongshort::setProfitabletradespct(const QString &profitabletradespct) {
    m_profitabletradespct = profitabletradespct;
    m_profitabletradespct_isSet = true;
}

bool OAILongshort::is_profitabletradespct_Set() const{
    return m_profitabletradespct_isSet;
}

bool OAILongshort::is_profitabletradespct_Valid() const{
    return m_profitabletradespct_isValid;
}

QString OAILongshort::getProfitfactor() const {
    return m_profitfactor;
}
void OAILongshort::setProfitfactor(const QString &profitfactor) {
    m_profitfactor = profitfactor;
    m_profitfactor_isSet = true;
}

bool OAILongshort::is_profitfactor_Set() const{
    return m_profitfactor_isSet;
}

bool OAILongshort::is_profitfactor_Valid() const{
    return m_profitfactor_isValid;
}

QString OAILongshort::getProfitriskratio() const {
    return m_profitriskratio;
}
void OAILongshort::setProfitriskratio(const QString &profitriskratio) {
    m_profitriskratio = profitriskratio;
    m_profitriskratio_isSet = true;
}

bool OAILongshort::is_profitriskratio_Set() const{
    return m_profitriskratio_isSet;
}

bool OAILongshort::is_profitriskratio_Valid() const{
    return m_profitriskratio_isValid;
}

QString OAILongshort::getRar() const {
    return m_rar;
}
void OAILongshort::setRar(const QString &rar) {
    m_rar = rar;
    m_rar_isSet = true;
}

bool OAILongshort::is_rar_Set() const{
    return m_rar_isSet;
}

bool OAILongshort::is_rar_Valid() const{
    return m_rar_isValid;
}

QString OAILongshort::getRecoveryfactor() const {
    return m_recoveryfactor;
}
void OAILongshort::setRecoveryfactor(const QString &recoveryfactor) {
    m_recoveryfactor = recoveryfactor;
    m_recoveryfactor_isSet = true;
}

bool OAILongshort::is_recoveryfactor_Set() const{
    return m_recoveryfactor_isSet;
}

bool OAILongshort::is_recoveryfactor_Valid() const{
    return m_recoveryfactor_isValid;
}

QString OAILongshort::getSharperatio() const {
    return m_sharperatio;
}
void OAILongshort::setSharperatio(const QString &sharperatio) {
    m_sharperatio = sharperatio;
    m_sharperatio_isSet = true;
}

bool OAILongshort::is_sharperatio_Set() const{
    return m_sharperatio_isSet;
}

bool OAILongshort::is_sharperatio_Valid() const{
    return m_sharperatio_isValid;
}

QString OAILongshort::getSortinoratio() const {
    return m_sortinoratio;
}
void OAILongshort::setSortinoratio(const QString &sortinoratio) {
    m_sortinoratio = sortinoratio;
    m_sortinoratio_isSet = true;
}

bool OAILongshort::is_sortinoratio_Set() const{
    return m_sortinoratio_isSet;
}

bool OAILongshort::is_sortinoratio_Valid() const{
    return m_sortinoratio_isValid;
}

QString OAILongshort::getStartcapital() const {
    return m_startcapital;
}
void OAILongshort::setStartcapital(const QString &startcapital) {
    m_startcapital = startcapital;
    m_startcapital_isSet = true;
}

bool OAILongshort::is_startcapital_Set() const{
    return m_startcapital_isSet;
}

bool OAILongshort::is_startcapital_Valid() const{
    return m_startcapital_isValid;
}

QString OAILongshort::getTotalcommission() const {
    return m_totalcommission;
}
void OAILongshort::setTotalcommission(const QString &totalcommission) {
    m_totalcommission = totalcommission;
    m_totalcommission_isSet = true;
}

bool OAILongshort::is_totalcommission_Set() const{
    return m_totalcommission_isSet;
}

bool OAILongshort::is_totalcommission_Valid() const{
    return m_totalcommission_isValid;
}

QString OAILongshort::getTotaltrades() const {
    return m_totaltrades;
}
void OAILongshort::setTotaltrades(const QString &totaltrades) {
    m_totaltrades = totaltrades;
    m_totaltrades_isSet = true;
}

bool OAILongshort::is_totaltrades_Set() const{
    return m_totaltrades_isSet;
}

bool OAILongshort::is_totaltrades_Valid() const{
    return m_totaltrades_isValid;
}

QString OAILongshort::getTotalvolume() const {
    return m_totalvolume;
}
void OAILongshort::setTotalvolume(const QString &totalvolume) {
    m_totalvolume = totalvolume;
    m_totalvolume_isSet = true;
}

bool OAILongshort::is_totalvolume_Set() const{
    return m_totalvolume_isSet;
}

bool OAILongshort::is_totalvolume_Valid() const{
    return m_totalvolume_isValid;
}

QString OAILongshort::getTurnover() const {
    return m_turnover;
}
void OAILongshort::setTurnover(const QString &turnover) {
    m_turnover = turnover;
    m_turnover_isSet = true;
}

bool OAILongshort::is_turnover_Set() const{
    return m_turnover_isSet;
}

bool OAILongshort::is_turnover_Valid() const{
    return m_turnover_isValid;
}

bool OAILongshort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avgbarsheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avgloss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avglossbarsheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avglosspct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avgprofit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avgprofitavgloss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avgprofitbarsheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avgprofitpct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endcapital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grossloss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grossprofit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losingtrades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losingtradespct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margininterest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxconsecloss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxconsecwin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxdrawdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxdrawdowndate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxdrawdownlength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxdrawdownpct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxdrawdownpctdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_netprofit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_netprofitpct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profitabletrades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profitabletradespct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profitfactor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profitriskratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recoveryfactor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharperatio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sortinoratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startcapital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totalcommission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totaltrades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totalvolume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turnover_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongshort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
