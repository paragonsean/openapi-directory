/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBacktestTrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBacktestTrade::OAIBacktestTrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBacktestTrade::OAIBacktestTrade() {
    this->initializeModel();
}

OAIBacktestTrade::~OAIBacktestTrade() {}

void OAIBacktestTrade::initializeModel() {

    m_barsheld_isSet = false;
    m_barsheld_isValid = false;

    m_changepct_isSet = false;
    m_changepct_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_entrydatetime_isSet = false;
    m_entrydatetime_isValid = false;

    m_entryprice_isSet = false;
    m_entryprice_isValid = false;

    m_entrysignal_isSet = false;
    m_entrysignal_isValid = false;

    m_exitdatetime_isSet = false;
    m_exitdatetime_isValid = false;

    m_exitprice_isSet = false;
    m_exitprice_isValid = false;

    m_exitsignal_isSet = false;
    m_exitsignal_isValid = false;

    m_mae_isSet = false;
    m_mae_isValid = false;

    m_mfe_isSet = false;
    m_mfe_isValid = false;

    m_pandl_isSet = false;
    m_pandl_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_shares_isSet = false;
    m_shares_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIBacktestTrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBacktestTrade::fromJsonObject(QJsonObject json) {

    m_barsheld_isValid = ::OpenAPI::fromJsonValue(m_barsheld, json[QString("barsheld")]);
    m_barsheld_isSet = !json[QString("barsheld")].isNull() && m_barsheld_isValid;

    m_changepct_isValid = ::OpenAPI::fromJsonValue(m_changepct, json[QString("changepct")]);
    m_changepct_isSet = !json[QString("changepct")].isNull() && m_changepct_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_entrydatetime_isValid = ::OpenAPI::fromJsonValue(m_entrydatetime, json[QString("entrydatetime")]);
    m_entrydatetime_isSet = !json[QString("entrydatetime")].isNull() && m_entrydatetime_isValid;

    m_entryprice_isValid = ::OpenAPI::fromJsonValue(m_entryprice, json[QString("entryprice")]);
    m_entryprice_isSet = !json[QString("entryprice")].isNull() && m_entryprice_isValid;

    m_entrysignal_isValid = ::OpenAPI::fromJsonValue(m_entrysignal, json[QString("entrysignal")]);
    m_entrysignal_isSet = !json[QString("entrysignal")].isNull() && m_entrysignal_isValid;

    m_exitdatetime_isValid = ::OpenAPI::fromJsonValue(m_exitdatetime, json[QString("exitdatetime")]);
    m_exitdatetime_isSet = !json[QString("exitdatetime")].isNull() && m_exitdatetime_isValid;

    m_exitprice_isValid = ::OpenAPI::fromJsonValue(m_exitprice, json[QString("exitprice")]);
    m_exitprice_isSet = !json[QString("exitprice")].isNull() && m_exitprice_isValid;

    m_exitsignal_isValid = ::OpenAPI::fromJsonValue(m_exitsignal, json[QString("exitsignal")]);
    m_exitsignal_isSet = !json[QString("exitsignal")].isNull() && m_exitsignal_isValid;

    m_mae_isValid = ::OpenAPI::fromJsonValue(m_mae, json[QString("mae")]);
    m_mae_isSet = !json[QString("mae")].isNull() && m_mae_isValid;

    m_mfe_isValid = ::OpenAPI::fromJsonValue(m_mfe, json[QString("mfe")]);
    m_mfe_isSet = !json[QString("mfe")].isNull() && m_mfe_isValid;

    m_pandl_isValid = ::OpenAPI::fromJsonValue(m_pandl, json[QString("pandl")]);
    m_pandl_isSet = !json[QString("pandl")].isNull() && m_pandl_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_shares_isValid = ::OpenAPI::fromJsonValue(m_shares, json[QString("shares")]);
    m_shares_isSet = !json[QString("shares")].isNull() && m_shares_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIBacktestTrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBacktestTrade::asJsonObject() const {
    QJsonObject obj;
    if (m_barsheld_isSet) {
        obj.insert(QString("barsheld"), ::OpenAPI::toJsonValue(m_barsheld));
    }
    if (m_changepct_isSet) {
        obj.insert(QString("changepct"), ::OpenAPI::toJsonValue(m_changepct));
    }
    if (m_commission_isSet) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_entrydatetime_isSet) {
        obj.insert(QString("entrydatetime"), ::OpenAPI::toJsonValue(m_entrydatetime));
    }
    if (m_entryprice_isSet) {
        obj.insert(QString("entryprice"), ::OpenAPI::toJsonValue(m_entryprice));
    }
    if (m_entrysignal_isSet) {
        obj.insert(QString("entrysignal"), ::OpenAPI::toJsonValue(m_entrysignal));
    }
    if (m_exitdatetime_isSet) {
        obj.insert(QString("exitdatetime"), ::OpenAPI::toJsonValue(m_exitdatetime));
    }
    if (m_exitprice_isSet) {
        obj.insert(QString("exitprice"), ::OpenAPI::toJsonValue(m_exitprice));
    }
    if (m_exitsignal_isSet) {
        obj.insert(QString("exitsignal"), ::OpenAPI::toJsonValue(m_exitsignal));
    }
    if (m_mae_isSet) {
        obj.insert(QString("mae"), ::OpenAPI::toJsonValue(m_mae));
    }
    if (m_mfe_isSet) {
        obj.insert(QString("mfe"), ::OpenAPI::toJsonValue(m_mfe));
    }
    if (m_pandl_isSet) {
        obj.insert(QString("pandl"), ::OpenAPI::toJsonValue(m_pandl));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_shares_isSet) {
        obj.insert(QString("shares"), ::OpenAPI::toJsonValue(m_shares));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAIBacktestTrade::getBarsheld() const {
    return m_barsheld;
}
void OAIBacktestTrade::setBarsheld(const QString &barsheld) {
    m_barsheld = barsheld;
    m_barsheld_isSet = true;
}

bool OAIBacktestTrade::is_barsheld_Set() const{
    return m_barsheld_isSet;
}

bool OAIBacktestTrade::is_barsheld_Valid() const{
    return m_barsheld_isValid;
}

QString OAIBacktestTrade::getChangepct() const {
    return m_changepct;
}
void OAIBacktestTrade::setChangepct(const QString &changepct) {
    m_changepct = changepct;
    m_changepct_isSet = true;
}

bool OAIBacktestTrade::is_changepct_Set() const{
    return m_changepct_isSet;
}

bool OAIBacktestTrade::is_changepct_Valid() const{
    return m_changepct_isValid;
}

QString OAIBacktestTrade::getCommission() const {
    return m_commission;
}
void OAIBacktestTrade::setCommission(const QString &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAIBacktestTrade::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAIBacktestTrade::is_commission_Valid() const{
    return m_commission_isValid;
}

QString OAIBacktestTrade::getEntrydatetime() const {
    return m_entrydatetime;
}
void OAIBacktestTrade::setEntrydatetime(const QString &entrydatetime) {
    m_entrydatetime = entrydatetime;
    m_entrydatetime_isSet = true;
}

bool OAIBacktestTrade::is_entrydatetime_Set() const{
    return m_entrydatetime_isSet;
}

bool OAIBacktestTrade::is_entrydatetime_Valid() const{
    return m_entrydatetime_isValid;
}

QString OAIBacktestTrade::getEntryprice() const {
    return m_entryprice;
}
void OAIBacktestTrade::setEntryprice(const QString &entryprice) {
    m_entryprice = entryprice;
    m_entryprice_isSet = true;
}

bool OAIBacktestTrade::is_entryprice_Set() const{
    return m_entryprice_isSet;
}

bool OAIBacktestTrade::is_entryprice_Valid() const{
    return m_entryprice_isValid;
}

QString OAIBacktestTrade::getEntrysignal() const {
    return m_entrysignal;
}
void OAIBacktestTrade::setEntrysignal(const QString &entrysignal) {
    m_entrysignal = entrysignal;
    m_entrysignal_isSet = true;
}

bool OAIBacktestTrade::is_entrysignal_Set() const{
    return m_entrysignal_isSet;
}

bool OAIBacktestTrade::is_entrysignal_Valid() const{
    return m_entrysignal_isValid;
}

QString OAIBacktestTrade::getExitdatetime() const {
    return m_exitdatetime;
}
void OAIBacktestTrade::setExitdatetime(const QString &exitdatetime) {
    m_exitdatetime = exitdatetime;
    m_exitdatetime_isSet = true;
}

bool OAIBacktestTrade::is_exitdatetime_Set() const{
    return m_exitdatetime_isSet;
}

bool OAIBacktestTrade::is_exitdatetime_Valid() const{
    return m_exitdatetime_isValid;
}

QString OAIBacktestTrade::getExitprice() const {
    return m_exitprice;
}
void OAIBacktestTrade::setExitprice(const QString &exitprice) {
    m_exitprice = exitprice;
    m_exitprice_isSet = true;
}

bool OAIBacktestTrade::is_exitprice_Set() const{
    return m_exitprice_isSet;
}

bool OAIBacktestTrade::is_exitprice_Valid() const{
    return m_exitprice_isValid;
}

QString OAIBacktestTrade::getExitsignal() const {
    return m_exitsignal;
}
void OAIBacktestTrade::setExitsignal(const QString &exitsignal) {
    m_exitsignal = exitsignal;
    m_exitsignal_isSet = true;
}

bool OAIBacktestTrade::is_exitsignal_Set() const{
    return m_exitsignal_isSet;
}

bool OAIBacktestTrade::is_exitsignal_Valid() const{
    return m_exitsignal_isValid;
}

QString OAIBacktestTrade::getMae() const {
    return m_mae;
}
void OAIBacktestTrade::setMae(const QString &mae) {
    m_mae = mae;
    m_mae_isSet = true;
}

bool OAIBacktestTrade::is_mae_Set() const{
    return m_mae_isSet;
}

bool OAIBacktestTrade::is_mae_Valid() const{
    return m_mae_isValid;
}

QString OAIBacktestTrade::getMfe() const {
    return m_mfe;
}
void OAIBacktestTrade::setMfe(const QString &mfe) {
    m_mfe = mfe;
    m_mfe_isSet = true;
}

bool OAIBacktestTrade::is_mfe_Set() const{
    return m_mfe_isSet;
}

bool OAIBacktestTrade::is_mfe_Valid() const{
    return m_mfe_isValid;
}

QString OAIBacktestTrade::getPandl() const {
    return m_pandl;
}
void OAIBacktestTrade::setPandl(const QString &pandl) {
    m_pandl = pandl;
    m_pandl_isSet = true;
}

bool OAIBacktestTrade::is_pandl_Set() const{
    return m_pandl_isSet;
}

bool OAIBacktestTrade::is_pandl_Valid() const{
    return m_pandl_isValid;
}

QString OAIBacktestTrade::getPosition() const {
    return m_position;
}
void OAIBacktestTrade::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIBacktestTrade::is_position_Set() const{
    return m_position_isSet;
}

bool OAIBacktestTrade::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIBacktestTrade::getShares() const {
    return m_shares;
}
void OAIBacktestTrade::setShares(const QString &shares) {
    m_shares = shares;
    m_shares_isSet = true;
}

bool OAIBacktestTrade::is_shares_Set() const{
    return m_shares_isSet;
}

bool OAIBacktestTrade::is_shares_Valid() const{
    return m_shares_isValid;
}

QString OAIBacktestTrade::getSize() const {
    return m_size;
}
void OAIBacktestTrade::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIBacktestTrade::is_size_Set() const{
    return m_size_isSet;
}

bool OAIBacktestTrade::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIBacktestTrade::getSymbol() const {
    return m_symbol;
}
void OAIBacktestTrade::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIBacktestTrade::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIBacktestTrade::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIBacktestTrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_barsheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changepct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entrydatetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entryprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entrysignal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exitdatetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exitprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exitsignal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mae_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pandl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBacktestTrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
