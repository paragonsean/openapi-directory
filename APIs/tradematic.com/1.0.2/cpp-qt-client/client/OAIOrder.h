/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrder.h
 *
 * 
 */

#ifndef OAIOrder_H
#define OAIOrder_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOrder : public OAIObject {
public:
    OAIOrder();
    OAIOrder(QString json);
    ~OAIOrder() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    QString getBuy() const;
    void setBuy(const QString &buy);
    bool is_buy_Set() const;
    bool is_buy_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getOrderid() const;
    void setOrderid(const QString &orderid);
    bool is_orderid_Set() const;
    bool is_orderid_Valid() const;

    QString getPrice() const;
    void setPrice(const QString &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    QString getShares() const;
    void setShares(const QString &shares);
    bool is_shares_Set() const;
    bool is_shares_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusname() const;
    void setStatusname(const QString &statusname);
    bool is_statusname_Set() const;
    bool is_statusname_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    QString m_buy;
    bool m_buy_isSet;
    bool m_buy_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_orderid;
    bool m_orderid_isSet;
    bool m_orderid_isValid;

    QString m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    QString m_shares;
    bool m_shares_isSet;
    bool m_shares_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_statusname;
    bool m_statusname_isSet;
    bool m_statusname_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrder)

#endif // OAIOrder_H
