/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMarketDataAPIApi_H
#define OAI_OAIMarketDataAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIMarket.h"
#include "OAI_marketdata_symbols__symbolid__histdata_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMarketDataAPIApi : public QObject {
    Q_OBJECT

public:
    OAIMarketDataAPIApi(const int timeOut = 0);
    ~OAIMarketDataAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void marketdataMarketsGet();

    /**
    * @param[in]  marketid qint64 [required]
    */
    virtual void marketdataMarketsMarketidGet(const qint64 &marketid);

    /**
    * @param[in]  marketid qint64 [required]
    * @param[in]  filter qint64 [required]
    */
    virtual void marketdataSymbolsGet(const qint64 &marketid, const qint64 &filter);

    /**
    * @param[in]  symbolid qint64 [required]
    */
    virtual void marketdataSymbolsSymbolidGet(const qint64 &symbolid);

    /**
    * @param[in]  symbolid qint64 [required]
    * @param[in]  tf qint64 [required]
    * @param[in]  from qint64 [required]
    * @param[in]  to qint64 [required]
    */
    virtual void marketdataSymbolsSymbolidHistdataGet(const qint64 &symbolid, const qint64 &tf, const qint64 &from, const qint64 &to);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void marketdataMarketsGetCallback(OAIHttpRequestWorker *worker);
    void marketdataMarketsMarketidGetCallback(OAIHttpRequestWorker *worker);
    void marketdataSymbolsGetCallback(OAIHttpRequestWorker *worker);
    void marketdataSymbolsSymbolidGetCallback(OAIHttpRequestWorker *worker);
    void marketdataSymbolsSymbolidHistdataGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void marketdataMarketsGetSignal(QList<OAIMarket> summary);
    void marketdataMarketsMarketidGetSignal(OAIMarket summary);
    void marketdataSymbolsGetSignal(QList<QString> summary);
    void marketdataSymbolsSymbolidGetSignal(QString summary);
    void marketdataSymbolsSymbolidHistdataGetSignal(OAI_marketdata_symbols__symbolid__histdata_get_200_response summary);


    void marketdataMarketsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMarket> summary);
    void marketdataMarketsMarketidGetSignalFull(OAIHttpRequestWorker *worker, OAIMarket summary);
    void marketdataSymbolsGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void marketdataSymbolsSymbolidGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void marketdataSymbolsSymbolidHistdataGetSignalFull(OAIHttpRequestWorker *worker, OAI_marketdata_symbols__symbolid__histdata_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use marketdataMarketsGetSignalError() instead")
    void marketdataMarketsGetSignalE(QList<OAIMarket> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataMarketsGetSignalError(QList<OAIMarket> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketdataMarketsMarketidGetSignalError() instead")
    void marketdataMarketsMarketidGetSignalE(OAIMarket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataMarketsMarketidGetSignalError(OAIMarket summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketdataSymbolsGetSignalError() instead")
    void marketdataSymbolsGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataSymbolsGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketdataSymbolsSymbolidGetSignalError() instead")
    void marketdataSymbolsSymbolidGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataSymbolsSymbolidGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketdataSymbolsSymbolidHistdataGetSignalError() instead")
    void marketdataSymbolsSymbolidHistdataGetSignalE(OAI_marketdata_symbols__symbolid__histdata_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataSymbolsSymbolidHistdataGetSignalError(OAI_marketdata_symbols__symbolid__histdata_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use marketdataMarketsGetSignalErrorFull() instead")
    void marketdataMarketsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataMarketsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketdataMarketsMarketidGetSignalErrorFull() instead")
    void marketdataMarketsMarketidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataMarketsMarketidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketdataSymbolsGetSignalErrorFull() instead")
    void marketdataSymbolsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataSymbolsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketdataSymbolsSymbolidGetSignalErrorFull() instead")
    void marketdataSymbolsSymbolidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataSymbolsSymbolidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketdataSymbolsSymbolidHistdataGetSignalErrorFull() instead")
    void marketdataSymbolsSymbolidHistdataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketdataSymbolsSymbolidHistdataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
