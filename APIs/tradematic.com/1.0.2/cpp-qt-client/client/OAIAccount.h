/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccount.h
 *
 * 
 */

#ifndef OAIAccount_H
#define OAIAccount_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAccount : public OAIObject {
public:
    OAIAccount();
    OAIAccount(QString json);
    ~OAIAccount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    QString getAccountid() const;
    void setAccountid(const QString &accountid);
    bool is_accountid_Set() const;
    bool is_accountid_Valid() const;

    QString getAccounttypename() const;
    void setAccounttypename(const QString &accounttypename);
    bool is_accounttypename_Set() const;
    bool is_accounttypename_Valid() const;

    QString getCash() const;
    void setCash(const QString &cash);
    bool is_cash_Set() const;
    bool is_cash_Valid() const;

    QString getChange() const;
    void setChange(const QString &change);
    bool is_change_Set() const;
    bool is_change_Valid() const;

    QString getChangepercent() const;
    void setChangepercent(const QString &changepercent);
    bool is_changepercent_Set() const;
    bool is_changepercent_Valid() const;

    QString getComments() const;
    void setComments(const QString &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QString getComputer() const;
    void setComputer(const QString &computer);
    bool is_computer_Set() const;
    bool is_computer_Valid() const;

    QString getCurrencyid() const;
    void setCurrencyid(const QString &currencyid);
    bool is_currencyid_Set() const;
    bool is_currencyid_Valid() const;

    QString getCurrencytext() const;
    void setCurrencytext(const QString &currencytext);
    bool is_currencytext_Set() const;
    bool is_currencytext_Valid() const;

    QString getHwid() const;
    void setHwid(const QString &hwid);
    bool is_hwid_Set() const;
    bool is_hwid_Valid() const;

    QMap<QString, QString> getPositions() const;
    void setPositions(const QMap<QString, QString> &positions);
    bool is_positions_Set() const;
    bool is_positions_Valid() const;

    QMap<QString, QString> getPositionspercent() const;
    void setPositionspercent(const QMap<QString, QString> &positionspercent);
    bool is_positionspercent_Set() const;
    bool is_positionspercent_Valid() const;

    QString getSessionid() const;
    void setSessionid(const QString &sessionid);
    bool is_sessionid_Set() const;
    bool is_sessionid_Valid() const;

    QString getRTypeid() const;
    void setRTypeid(const QString &r_typeid);
    bool is_r_typeid_Set() const;
    bool is_r_typeid_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    QString m_accountid;
    bool m_accountid_isSet;
    bool m_accountid_isValid;

    QString m_accounttypename;
    bool m_accounttypename_isSet;
    bool m_accounttypename_isValid;

    QString m_cash;
    bool m_cash_isSet;
    bool m_cash_isValid;

    QString m_change;
    bool m_change_isSet;
    bool m_change_isValid;

    QString m_changepercent;
    bool m_changepercent_isSet;
    bool m_changepercent_isValid;

    QString m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QString m_computer;
    bool m_computer_isSet;
    bool m_computer_isValid;

    QString m_currencyid;
    bool m_currencyid_isSet;
    bool m_currencyid_isValid;

    QString m_currencytext;
    bool m_currencytext_isSet;
    bool m_currencytext_isValid;

    QString m_hwid;
    bool m_hwid_isSet;
    bool m_hwid_isValid;

    QMap<QString, QString> m_positions;
    bool m_positions_isSet;
    bool m_positions_isValid;

    QMap<QString, QString> m_positionspercent;
    bool m_positionspercent_isSet;
    bool m_positionspercent_isValid;

    QString m_sessionid;
    bool m_sessionid_isSet;
    bool m_sessionid_isValid;

    QString m_r_typeid;
    bool m_r_typeid_isSet;
    bool m_r_typeid_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccount)

#endif // OAIAccount_H
