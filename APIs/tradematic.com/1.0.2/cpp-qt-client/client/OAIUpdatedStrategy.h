/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdatedStrategy.h
 *
 * 
 */

#ifndef OAIUpdatedStrategy_H
#define OAIUpdatedStrategy_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdatedStrategy : public OAIObject {
public:
    OAIUpdatedStrategy();
    OAIUpdatedStrategy(QString json);
    ~OAIUpdatedStrategy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthor() const;
    void setAuthor(const QString &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getLimitorder() const;
    void setLimitorder(const QString &limitorder);
    bool is_limitorder_Set() const;
    bool is_limitorder_Valid() const;

    QString getMarketname() const;
    void setMarketname(const QString &marketname);
    bool is_marketname_Set() const;
    bool is_marketname_Valid() const;

    QString getMultiposition() const;
    void setMultiposition(const QString &multiposition);
    bool is_multiposition_Set() const;
    bool is_multiposition_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSymbols() const;
    void setSymbols(const QString &symbols);
    bool is_symbols_Set() const;
    bool is_symbols_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_limitorder;
    bool m_limitorder_isSet;
    bool m_limitorder_isValid;

    QString m_marketname;
    bool m_marketname_isSet;
    bool m_marketname_isValid;

    QString m_multiposition;
    bool m_multiposition_isSet;
    bool m_multiposition_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_symbols;
    bool m_symbols_isSet;
    bool m_symbols_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdatedStrategy)

#endif // OAIUpdatedStrategy_H
