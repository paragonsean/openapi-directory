/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_autofollow_strategies__strategyid__signals_post_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_autofollow_strategies__strategyid__signals_post_200_response::OAI_autofollow_strategies__strategyid__signals_post_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_autofollow_strategies__strategyid__signals_post_200_response::OAI_autofollow_strategies__strategyid__signals_post_200_response() {
    this->initializeModel();
}

OAI_autofollow_strategies__strategyid__signals_post_200_response::~OAI_autofollow_strategies__strategyid__signals_post_200_response() {}

void OAI_autofollow_strategies__strategyid__signals_post_200_response::initializeModel() {

    m_signalid_isSet = false;
    m_signalid_isValid = false;
}

void OAI_autofollow_strategies__strategyid__signals_post_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_autofollow_strategies__strategyid__signals_post_200_response::fromJsonObject(QJsonObject json) {

    m_signalid_isValid = ::OpenAPI::fromJsonValue(m_signalid, json[QString("signalid")]);
    m_signalid_isSet = !json[QString("signalid")].isNull() && m_signalid_isValid;
}

QString OAI_autofollow_strategies__strategyid__signals_post_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_autofollow_strategies__strategyid__signals_post_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_signalid_isSet) {
        obj.insert(QString("signalid"), ::OpenAPI::toJsonValue(m_signalid));
    }
    return obj;
}

QString OAI_autofollow_strategies__strategyid__signals_post_200_response::getSignalid() const {
    return m_signalid;
}
void OAI_autofollow_strategies__strategyid__signals_post_200_response::setSignalid(const QString &signalid) {
    m_signalid = signalid;
    m_signalid_isSet = true;
}

bool OAI_autofollow_strategies__strategyid__signals_post_200_response::is_signalid_Set() const{
    return m_signalid_isSet;
}

bool OAI_autofollow_strategies__strategyid__signals_post_200_response::is_signalid_Valid() const{
    return m_signalid_isValid;
}

bool OAI_autofollow_strategies__strategyid__signals_post_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_signalid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_autofollow_strategies__strategyid__signals_post_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
