/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshot::OAISnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshot::OAISnapshot() {
    this->initializeModel();
}

OAISnapshot::~OAISnapshot() {}

void OAISnapshot::initializeModel() {

    m_cash_isSet = false;
    m_cash_isValid = false;

    m_daynum_isSet = false;
    m_daynum_isValid = false;

    m_snapshotid_isSet = false;
    m_snapshotid_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshot::fromJsonObject(QJsonObject json) {

    m_cash_isValid = ::OpenAPI::fromJsonValue(m_cash, json[QString("cash")]);
    m_cash_isSet = !json[QString("cash")].isNull() && m_cash_isValid;

    m_daynum_isValid = ::OpenAPI::fromJsonValue(m_daynum, json[QString("daynum")]);
    m_daynum_isSet = !json[QString("daynum")].isNull() && m_daynum_isValid;

    m_snapshotid_isValid = ::OpenAPI::fromJsonValue(m_snapshotid, json[QString("snapshotid")]);
    m_snapshotid_isSet = !json[QString("snapshotid")].isNull() && m_snapshotid_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_isSet) {
        obj.insert(QString("cash"), ::OpenAPI::toJsonValue(m_cash));
    }
    if (m_daynum_isSet) {
        obj.insert(QString("daynum"), ::OpenAPI::toJsonValue(m_daynum));
    }
    if (m_snapshotid_isSet) {
        obj.insert(QString("snapshotid"), ::OpenAPI::toJsonValue(m_snapshotid));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAISnapshot::getCash() const {
    return m_cash;
}
void OAISnapshot::setCash(const QString &cash) {
    m_cash = cash;
    m_cash_isSet = true;
}

bool OAISnapshot::is_cash_Set() const{
    return m_cash_isSet;
}

bool OAISnapshot::is_cash_Valid() const{
    return m_cash_isValid;
}

QString OAISnapshot::getDaynum() const {
    return m_daynum;
}
void OAISnapshot::setDaynum(const QString &daynum) {
    m_daynum = daynum;
    m_daynum_isSet = true;
}

bool OAISnapshot::is_daynum_Set() const{
    return m_daynum_isSet;
}

bool OAISnapshot::is_daynum_Valid() const{
    return m_daynum_isValid;
}

QString OAISnapshot::getSnapshotid() const {
    return m_snapshotid;
}
void OAISnapshot::setSnapshotid(const QString &snapshotid) {
    m_snapshotid = snapshotid;
    m_snapshotid_isSet = true;
}

bool OAISnapshot::is_snapshotid_Set() const{
    return m_snapshotid_isSet;
}

bool OAISnapshot::is_snapshotid_Valid() const{
    return m_snapshotid_isValid;
}

QDateTime OAISnapshot::getTimestamp() const {
    return m_timestamp;
}
void OAISnapshot::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISnapshot::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISnapshot::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAISnapshot::getValue() const {
    return m_value;
}
void OAISnapshot::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISnapshot::is_value_Set() const{
    return m_value_isSet;
}

bool OAISnapshot::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daynum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshotid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
