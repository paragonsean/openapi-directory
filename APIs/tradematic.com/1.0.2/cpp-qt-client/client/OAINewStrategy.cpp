/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewStrategy::OAINewStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewStrategy::OAINewStrategy() {
    this->initializeModel();
}

OAINewStrategy::~OAINewStrategy() {}

void OAINewStrategy::initializeModel() {

    m_apr_isSet = false;
    m_apr_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_drawdown_isSet = false;
    m_drawdown_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_limitorder_isSet = false;
    m_limitorder_isValid = false;

    m_marketname_isSet = false;
    m_marketname_isValid = false;

    m_multiposition_isSet = false;
    m_multiposition_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_positionsize_isSet = false;
    m_positionsize_isValid = false;

    m_strategytypeid_isSet = false;
    m_strategytypeid_isValid = false;

    m_symbols_isSet = false;
    m_symbols_isValid = false;

    m_timeframe_isSet = false;
    m_timeframe_isValid = false;
}

void OAINewStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewStrategy::fromJsonObject(QJsonObject json) {

    m_apr_isValid = ::OpenAPI::fromJsonValue(m_apr, json[QString("apr")]);
    m_apr_isSet = !json[QString("apr")].isNull() && m_apr_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_drawdown_isValid = ::OpenAPI::fromJsonValue(m_drawdown, json[QString("drawdown")]);
    m_drawdown_isSet = !json[QString("drawdown")].isNull() && m_drawdown_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_limitorder_isValid = ::OpenAPI::fromJsonValue(m_limitorder, json[QString("limitorder")]);
    m_limitorder_isSet = !json[QString("limitorder")].isNull() && m_limitorder_isValid;

    m_marketname_isValid = ::OpenAPI::fromJsonValue(m_marketname, json[QString("marketname")]);
    m_marketname_isSet = !json[QString("marketname")].isNull() && m_marketname_isValid;

    m_multiposition_isValid = ::OpenAPI::fromJsonValue(m_multiposition, json[QString("multiposition")]);
    m_multiposition_isSet = !json[QString("multiposition")].isNull() && m_multiposition_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_positionsize_isValid = ::OpenAPI::fromJsonValue(m_positionsize, json[QString("positionsize")]);
    m_positionsize_isSet = !json[QString("positionsize")].isNull() && m_positionsize_isValid;

    m_strategytypeid_isValid = ::OpenAPI::fromJsonValue(m_strategytypeid, json[QString("strategytypeid")]);
    m_strategytypeid_isSet = !json[QString("strategytypeid")].isNull() && m_strategytypeid_isValid;

    m_symbols_isValid = ::OpenAPI::fromJsonValue(m_symbols, json[QString("symbols")]);
    m_symbols_isSet = !json[QString("symbols")].isNull() && m_symbols_isValid;

    m_timeframe_isValid = ::OpenAPI::fromJsonValue(m_timeframe, json[QString("timeframe")]);
    m_timeframe_isSet = !json[QString("timeframe")].isNull() && m_timeframe_isValid;
}

QString OAINewStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_apr_isSet) {
        obj.insert(QString("apr"), ::OpenAPI::toJsonValue(m_apr));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_drawdown_isSet) {
        obj.insert(QString("drawdown"), ::OpenAPI::toJsonValue(m_drawdown));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_limitorder_isSet) {
        obj.insert(QString("limitorder"), ::OpenAPI::toJsonValue(m_limitorder));
    }
    if (m_marketname_isSet) {
        obj.insert(QString("marketname"), ::OpenAPI::toJsonValue(m_marketname));
    }
    if (m_multiposition_isSet) {
        obj.insert(QString("multiposition"), ::OpenAPI::toJsonValue(m_multiposition));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_positionsize_isSet) {
        obj.insert(QString("positionsize"), ::OpenAPI::toJsonValue(m_positionsize));
    }
    if (m_strategytypeid_isSet) {
        obj.insert(QString("strategytypeid"), ::OpenAPI::toJsonValue(m_strategytypeid));
    }
    if (m_symbols_isSet) {
        obj.insert(QString("symbols"), ::OpenAPI::toJsonValue(m_symbols));
    }
    if (m_timeframe_isSet) {
        obj.insert(QString("timeframe"), ::OpenAPI::toJsonValue(m_timeframe));
    }
    return obj;
}

QString OAINewStrategy::getApr() const {
    return m_apr;
}
void OAINewStrategy::setApr(const QString &apr) {
    m_apr = apr;
    m_apr_isSet = true;
}

bool OAINewStrategy::is_apr_Set() const{
    return m_apr_isSet;
}

bool OAINewStrategy::is_apr_Valid() const{
    return m_apr_isValid;
}

QString OAINewStrategy::getAuthor() const {
    return m_author;
}
void OAINewStrategy::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAINewStrategy::is_author_Set() const{
    return m_author_isSet;
}

bool OAINewStrategy::is_author_Valid() const{
    return m_author_isValid;
}

QString OAINewStrategy::getContent() const {
    return m_content;
}
void OAINewStrategy::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAINewStrategy::is_content_Set() const{
    return m_content_isSet;
}

bool OAINewStrategy::is_content_Valid() const{
    return m_content_isValid;
}

QString OAINewStrategy::getDescription() const {
    return m_description;
}
void OAINewStrategy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewStrategy::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewStrategy::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINewStrategy::getDrawdown() const {
    return m_drawdown;
}
void OAINewStrategy::setDrawdown(const QString &drawdown) {
    m_drawdown = drawdown;
    m_drawdown_isSet = true;
}

bool OAINewStrategy::is_drawdown_Set() const{
    return m_drawdown_isSet;
}

bool OAINewStrategy::is_drawdown_Valid() const{
    return m_drawdown_isValid;
}

QString OAINewStrategy::getGuid() const {
    return m_guid;
}
void OAINewStrategy::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAINewStrategy::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAINewStrategy::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAINewStrategy::getLimitorder() const {
    return m_limitorder;
}
void OAINewStrategy::setLimitorder(const QString &limitorder) {
    m_limitorder = limitorder;
    m_limitorder_isSet = true;
}

bool OAINewStrategy::is_limitorder_Set() const{
    return m_limitorder_isSet;
}

bool OAINewStrategy::is_limitorder_Valid() const{
    return m_limitorder_isValid;
}

QString OAINewStrategy::getMarketname() const {
    return m_marketname;
}
void OAINewStrategy::setMarketname(const QString &marketname) {
    m_marketname = marketname;
    m_marketname_isSet = true;
}

bool OAINewStrategy::is_marketname_Set() const{
    return m_marketname_isSet;
}

bool OAINewStrategy::is_marketname_Valid() const{
    return m_marketname_isValid;
}

QString OAINewStrategy::getMultiposition() const {
    return m_multiposition;
}
void OAINewStrategy::setMultiposition(const QString &multiposition) {
    m_multiposition = multiposition;
    m_multiposition_isSet = true;
}

bool OAINewStrategy::is_multiposition_Set() const{
    return m_multiposition_isSet;
}

bool OAINewStrategy::is_multiposition_Valid() const{
    return m_multiposition_isValid;
}

QString OAINewStrategy::getName() const {
    return m_name;
}
void OAINewStrategy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINewStrategy::is_name_Set() const{
    return m_name_isSet;
}

bool OAINewStrategy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINewStrategy::getPositionsize() const {
    return m_positionsize;
}
void OAINewStrategy::setPositionsize(const QString &positionsize) {
    m_positionsize = positionsize;
    m_positionsize_isSet = true;
}

bool OAINewStrategy::is_positionsize_Set() const{
    return m_positionsize_isSet;
}

bool OAINewStrategy::is_positionsize_Valid() const{
    return m_positionsize_isValid;
}

QString OAINewStrategy::getStrategytypeid() const {
    return m_strategytypeid;
}
void OAINewStrategy::setStrategytypeid(const QString &strategytypeid) {
    m_strategytypeid = strategytypeid;
    m_strategytypeid_isSet = true;
}

bool OAINewStrategy::is_strategytypeid_Set() const{
    return m_strategytypeid_isSet;
}

bool OAINewStrategy::is_strategytypeid_Valid() const{
    return m_strategytypeid_isValid;
}

QString OAINewStrategy::getSymbols() const {
    return m_symbols;
}
void OAINewStrategy::setSymbols(const QString &symbols) {
    m_symbols = symbols;
    m_symbols_isSet = true;
}

bool OAINewStrategy::is_symbols_Set() const{
    return m_symbols_isSet;
}

bool OAINewStrategy::is_symbols_Valid() const{
    return m_symbols_isValid;
}

QString OAINewStrategy::getTimeframe() const {
    return m_timeframe;
}
void OAINewStrategy::setTimeframe(const QString &timeframe) {
    m_timeframe = timeframe;
    m_timeframe_isSet = true;
}

bool OAINewStrategy::is_timeframe_Set() const{
    return m_timeframe_isSet;
}

bool OAINewStrategy::is_timeframe_Valid() const{
    return m_timeframe_isValid;
}

bool OAINewStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drawdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limitorder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positionsize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategytypeid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbols_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
