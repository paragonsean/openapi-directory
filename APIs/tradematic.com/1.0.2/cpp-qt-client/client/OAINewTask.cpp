/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewTask::OAINewTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewTask::OAINewTask() {
    this->initializeModel();
}

OAINewTask::~OAINewTask() {}

void OAINewTask::initializeModel() {

    m_isbenchmark_isSet = false;
    m_isbenchmark_isValid = false;

    m_strategyid_isSet = false;
    m_strategyid_isValid = false;

    m_tasktypeid_isSet = false;
    m_tasktypeid_isValid = false;

    m_userid2_isSet = false;
    m_userid2_isValid = false;
}

void OAINewTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewTask::fromJsonObject(QJsonObject json) {

    m_isbenchmark_isValid = ::OpenAPI::fromJsonValue(m_isbenchmark, json[QString("isbenchmark")]);
    m_isbenchmark_isSet = !json[QString("isbenchmark")].isNull() && m_isbenchmark_isValid;

    m_strategyid_isValid = ::OpenAPI::fromJsonValue(m_strategyid, json[QString("strategyid")]);
    m_strategyid_isSet = !json[QString("strategyid")].isNull() && m_strategyid_isValid;

    m_tasktypeid_isValid = ::OpenAPI::fromJsonValue(m_tasktypeid, json[QString("tasktypeid")]);
    m_tasktypeid_isSet = !json[QString("tasktypeid")].isNull() && m_tasktypeid_isValid;

    m_userid2_isValid = ::OpenAPI::fromJsonValue(m_userid2, json[QString("userid2")]);
    m_userid2_isSet = !json[QString("userid2")].isNull() && m_userid2_isValid;
}

QString OAINewTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewTask::asJsonObject() const {
    QJsonObject obj;
    if (m_isbenchmark_isSet) {
        obj.insert(QString("isbenchmark"), ::OpenAPI::toJsonValue(m_isbenchmark));
    }
    if (m_strategyid_isSet) {
        obj.insert(QString("strategyid"), ::OpenAPI::toJsonValue(m_strategyid));
    }
    if (m_tasktypeid_isSet) {
        obj.insert(QString("tasktypeid"), ::OpenAPI::toJsonValue(m_tasktypeid));
    }
    if (m_userid2_isSet) {
        obj.insert(QString("userid2"), ::OpenAPI::toJsonValue(m_userid2));
    }
    return obj;
}

QString OAINewTask::getIsbenchmark() const {
    return m_isbenchmark;
}
void OAINewTask::setIsbenchmark(const QString &isbenchmark) {
    m_isbenchmark = isbenchmark;
    m_isbenchmark_isSet = true;
}

bool OAINewTask::is_isbenchmark_Set() const{
    return m_isbenchmark_isSet;
}

bool OAINewTask::is_isbenchmark_Valid() const{
    return m_isbenchmark_isValid;
}

QString OAINewTask::getStrategyid() const {
    return m_strategyid;
}
void OAINewTask::setStrategyid(const QString &strategyid) {
    m_strategyid = strategyid;
    m_strategyid_isSet = true;
}

bool OAINewTask::is_strategyid_Set() const{
    return m_strategyid_isSet;
}

bool OAINewTask::is_strategyid_Valid() const{
    return m_strategyid_isValid;
}

QString OAINewTask::getTasktypeid() const {
    return m_tasktypeid;
}
void OAINewTask::setTasktypeid(const QString &tasktypeid) {
    m_tasktypeid = tasktypeid;
    m_tasktypeid_isSet = true;
}

bool OAINewTask::is_tasktypeid_Set() const{
    return m_tasktypeid_isSet;
}

bool OAINewTask::is_tasktypeid_Valid() const{
    return m_tasktypeid_isValid;
}

QString OAINewTask::getUserid2() const {
    return m_userid2;
}
void OAINewTask::setUserid2(const QString &userid2) {
    m_userid2 = userid2;
    m_userid2_isSet = true;
}

bool OAINewTask::is_userid2_Set() const{
    return m_userid2_isSet;
}

bool OAINewTask::is_userid2_Valid() const{
    return m_userid2_isValid;
}

bool OAINewTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_isbenchmark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasktypeid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userid2_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
