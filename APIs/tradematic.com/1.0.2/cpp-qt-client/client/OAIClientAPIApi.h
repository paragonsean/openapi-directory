/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientAPIApi_H
#define OAI_OAIClientAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIKey.h"
#include "OAIError.h"
#include "OAIUser.h"
#include "OAI_client_apikeys__keyid__delete_200_response.h"
#include "OAI_client_apikeys_post_200_response.h"
#include "OAI_client_users_login_post_200_response.h"
#include "OAI_client_users_register_post_200_response.h"
#include "OAI_client_users_register_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientAPIApi : public QObject {
    Q_OBJECT

public:
    OAIClientAPIApi(const int timeOut = 0);
    ~OAIClientAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void clientApikeysGet();

    /**
    * @param[in]  keyid qint64 [required]
    */
    virtual void clientApikeysKeyidDelete(const qint64 &keyid);


    virtual void clientApikeysPost();


    virtual void clientUsersGet();


    virtual void clientUsersLoginPost();

    /**
    * @param[in]  body OAI_client_users_register_post_request [required]
    */
    virtual void clientUsersRegisterPost(const OAI_client_users_register_post_request &body);

    /**
    * @param[in]  userid qint64 [required]
    */
    virtual void clientUsersUseridGet(const qint64 &userid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clientApikeysGetCallback(OAIHttpRequestWorker *worker);
    void clientApikeysKeyidDeleteCallback(OAIHttpRequestWorker *worker);
    void clientApikeysPostCallback(OAIHttpRequestWorker *worker);
    void clientUsersGetCallback(OAIHttpRequestWorker *worker);
    void clientUsersLoginPostCallback(OAIHttpRequestWorker *worker);
    void clientUsersRegisterPostCallback(OAIHttpRequestWorker *worker);
    void clientUsersUseridGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clientApikeysGetSignal(QList<OAIAPIKey> summary);
    void clientApikeysKeyidDeleteSignal(OAI_client_apikeys__keyid__delete_200_response summary);
    void clientApikeysPostSignal(OAI_client_apikeys_post_200_response summary);
    void clientUsersGetSignal(QList<OAIUser> summary);
    void clientUsersLoginPostSignal(OAI_client_users_login_post_200_response summary);
    void clientUsersRegisterPostSignal(OAI_client_users_register_post_200_response summary);
    void clientUsersUseridGetSignal(OAIUser summary);


    void clientApikeysGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAPIKey> summary);
    void clientApikeysKeyidDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_client_apikeys__keyid__delete_200_response summary);
    void clientApikeysPostSignalFull(OAIHttpRequestWorker *worker, OAI_client_apikeys_post_200_response summary);
    void clientUsersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void clientUsersLoginPostSignalFull(OAIHttpRequestWorker *worker, OAI_client_users_login_post_200_response summary);
    void clientUsersRegisterPostSignalFull(OAIHttpRequestWorker *worker, OAI_client_users_register_post_200_response summary);
    void clientUsersUseridGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);

    Q_DECL_DEPRECATED_X("Use clientApikeysGetSignalError() instead")
    void clientApikeysGetSignalE(QList<OAIAPIKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientApikeysGetSignalError(QList<OAIAPIKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientApikeysKeyidDeleteSignalError() instead")
    void clientApikeysKeyidDeleteSignalE(OAI_client_apikeys__keyid__delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientApikeysKeyidDeleteSignalError(OAI_client_apikeys__keyid__delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientApikeysPostSignalError() instead")
    void clientApikeysPostSignalE(OAI_client_apikeys_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientApikeysPostSignalError(OAI_client_apikeys_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientUsersGetSignalError() instead")
    void clientUsersGetSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientUsersGetSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientUsersLoginPostSignalError() instead")
    void clientUsersLoginPostSignalE(OAI_client_users_login_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientUsersLoginPostSignalError(OAI_client_users_login_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientUsersRegisterPostSignalError() instead")
    void clientUsersRegisterPostSignalE(OAI_client_users_register_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientUsersRegisterPostSignalError(OAI_client_users_register_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientUsersUseridGetSignalError() instead")
    void clientUsersUseridGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientUsersUseridGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clientApikeysGetSignalErrorFull() instead")
    void clientApikeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientApikeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientApikeysKeyidDeleteSignalErrorFull() instead")
    void clientApikeysKeyidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientApikeysKeyidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientApikeysPostSignalErrorFull() instead")
    void clientApikeysPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientApikeysPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientUsersGetSignalErrorFull() instead")
    void clientUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientUsersLoginPostSignalErrorFull() instead")
    void clientUsersLoginPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientUsersLoginPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientUsersRegisterPostSignalErrorFull() instead")
    void clientUsersRegisterPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientUsersRegisterPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientUsersUseridGetSignalErrorFull() instead")
    void clientUsersUseridGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientUsersUseridGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
