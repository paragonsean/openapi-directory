# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, buy: str=None, message: str=None, number: str=None, orderid: str=None, price: str=None, shares: str=None, status: str=None, statusname: str=None, symbol: str=None, timestamp: datetime=None):
        """Order - a model defined in OpenAPI

        :param account: The account of this Order.
        :param buy: The buy of this Order.
        :param message: The message of this Order.
        :param number: The number of this Order.
        :param orderid: The orderid of this Order.
        :param price: The price of this Order.
        :param shares: The shares of this Order.
        :param status: The status of this Order.
        :param statusname: The statusname of this Order.
        :param symbol: The symbol of this Order.
        :param timestamp: The timestamp of this Order.
        """
        self.openapi_types = {
            'account': str,
            'buy': str,
            'message': str,
            'number': str,
            'orderid': str,
            'price': str,
            'shares': str,
            'status': str,
            'statusname': str,
            'symbol': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'account': 'account',
            'buy': 'buy',
            'message': 'message',
            'number': 'number',
            'orderid': 'orderid',
            'price': 'price',
            'shares': 'shares',
            'status': 'status',
            'statusname': 'statusname',
            'symbol': 'symbol',
            'timestamp': 'timestamp'
        }

        self._account = account
        self._buy = buy
        self._message = message
        self._number = number
        self._orderid = orderid
        self._price = price
        self._shares = shares
        self._status = status
        self._statusname = statusname
        self._symbol = symbol
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Order.


        :return: The account of this Order.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Order.


        :param account: The account of this Order.
        :type account: str
        """

        self._account = account

    @property
    def buy(self):
        """Gets the buy of this Order.


        :return: The buy of this Order.
        :rtype: str
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this Order.


        :param buy: The buy of this Order.
        :type buy: str
        """

        self._buy = buy

    @property
    def message(self):
        """Gets the message of this Order.


        :return: The message of this Order.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Order.


        :param message: The message of this Order.
        :type message: str
        """

        self._message = message

    @property
    def number(self):
        """Gets the number of this Order.


        :return: The number of this Order.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Order.


        :param number: The number of this Order.
        :type number: str
        """

        self._number = number

    @property
    def orderid(self):
        """Gets the orderid of this Order.


        :return: The orderid of this Order.
        :rtype: str
        """
        return self._orderid

    @orderid.setter
    def orderid(self, orderid):
        """Sets the orderid of this Order.


        :param orderid: The orderid of this Order.
        :type orderid: str
        """

        self._orderid = orderid

    @property
    def price(self):
        """Gets the price of this Order.


        :return: The price of this Order.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Order.


        :param price: The price of this Order.
        :type price: str
        """

        self._price = price

    @property
    def shares(self):
        """Gets the shares of this Order.


        :return: The shares of this Order.
        :rtype: str
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this Order.


        :param shares: The shares of this Order.
        :type shares: str
        """

        self._shares = shares

    @property
    def status(self):
        """Gets the status of this Order.


        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.


        :param status: The status of this Order.
        :type status: str
        """

        self._status = status

    @property
    def statusname(self):
        """Gets the statusname of this Order.


        :return: The statusname of this Order.
        :rtype: str
        """
        return self._statusname

    @statusname.setter
    def statusname(self, statusname):
        """Sets the statusname of this Order.


        :param statusname: The statusname of this Order.
        :type statusname: str
        """

        self._statusname = statusname

    @property
    def symbol(self):
        """Gets the symbol of this Order.


        :return: The symbol of this Order.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Order.


        :param symbol: The symbol of this Order.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def timestamp(self):
        """Gets the timestamp of this Order.


        :return: The timestamp of this Order.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Order.


        :param timestamp: The timestamp of this Order.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
