# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server import util


class Longexit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, parameters: List[Parameter]=None, validnot: str=None, validor: str=None):
        """Longexit - a model defined in OpenAPI

        :param id: The id of this Longexit.
        :param name: The name of this Longexit.
        :param parameters: The parameters of this Longexit.
        :param validnot: The validnot of this Longexit.
        :param validor: The validor of this Longexit.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'parameters': List[Parameter],
            'validnot': str,
            'validor': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'parameters': 'parameters',
            'validnot': 'validnot',
            'validor': 'validor'
        }

        self._id = id
        self._name = name
        self._parameters = parameters
        self._validnot = validnot
        self._validor = validor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Longexit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Longexit of this Longexit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Longexit.


        :return: The id of this Longexit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Longexit.


        :param id: The id of this Longexit.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Longexit.


        :return: The name of this Longexit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Longexit.


        :param name: The name of this Longexit.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this Longexit.


        :return: The parameters of this Longexit.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Longexit.


        :param parameters: The parameters of this Longexit.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters

    @property
    def validnot(self):
        """Gets the validnot of this Longexit.


        :return: The validnot of this Longexit.
        :rtype: str
        """
        return self._validnot

    @validnot.setter
    def validnot(self, validnot):
        """Sets the validnot of this Longexit.


        :param validnot: The validnot of this Longexit.
        :type validnot: str
        """

        self._validnot = validnot

    @property
    def validor(self):
        """Gets the validor of this Longexit.


        :return: The validor of this Longexit.
        :rtype: str
        """
        return self._validor

    @validor.setter
    def validor(self, validor):
        """Sets the validor of this Longexit.


        :param validor: The validor of this Longexit.
        :type validor: str
        """

        self._validor = validor
