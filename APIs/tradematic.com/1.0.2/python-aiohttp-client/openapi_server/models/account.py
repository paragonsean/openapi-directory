# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, accountid: str=None, accounttypename: str=None, cash: str=None, change: str=None, changepercent: str=None, comments: str=None, computer: str=None, currencyid: str=None, currencytext: str=None, hwid: str=None, positions: Dict[str, str]=None, positionspercent: Dict[str, str]=None, sessionid: str=None, typeid: str=None, value: str=None):
        """Account - a model defined in OpenAPI

        :param account: The account of this Account.
        :param accountid: The accountid of this Account.
        :param accounttypename: The accounttypename of this Account.
        :param cash: The cash of this Account.
        :param change: The change of this Account.
        :param changepercent: The changepercent of this Account.
        :param comments: The comments of this Account.
        :param computer: The computer of this Account.
        :param currencyid: The currencyid of this Account.
        :param currencytext: The currencytext of this Account.
        :param hwid: The hwid of this Account.
        :param positions: The positions of this Account.
        :param positionspercent: The positionspercent of this Account.
        :param sessionid: The sessionid of this Account.
        :param typeid: The typeid of this Account.
        :param value: The value of this Account.
        """
        self.openapi_types = {
            'account': str,
            'accountid': str,
            'accounttypename': str,
            'cash': str,
            'change': str,
            'changepercent': str,
            'comments': str,
            'computer': str,
            'currencyid': str,
            'currencytext': str,
            'hwid': str,
            'positions': Dict[str, str],
            'positionspercent': Dict[str, str],
            'sessionid': str,
            'typeid': str,
            'value': str
        }

        self.attribute_map = {
            'account': 'account',
            'accountid': 'accountid',
            'accounttypename': 'accounttypename',
            'cash': 'cash',
            'change': 'change',
            'changepercent': 'changepercent',
            'comments': 'comments',
            'computer': 'computer',
            'currencyid': 'currencyid',
            'currencytext': 'currencytext',
            'hwid': 'hwid',
            'positions': 'positions',
            'positionspercent': 'positionspercent',
            'sessionid': 'sessionid',
            'typeid': 'typeid',
            'value': 'value'
        }

        self._account = account
        self._accountid = accountid
        self._accounttypename = accounttypename
        self._cash = cash
        self._change = change
        self._changepercent = changepercent
        self._comments = comments
        self._computer = computer
        self._currencyid = currencyid
        self._currencytext = currencytext
        self._hwid = hwid
        self._positions = positions
        self._positionspercent = positionspercent
        self._sessionid = sessionid
        self._typeid = typeid
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Account.


        :return: The account of this Account.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Account.


        :param account: The account of this Account.
        :type account: str
        """

        self._account = account

    @property
    def accountid(self):
        """Gets the accountid of this Account.


        :return: The accountid of this Account.
        :rtype: str
        """
        return self._accountid

    @accountid.setter
    def accountid(self, accountid):
        """Sets the accountid of this Account.


        :param accountid: The accountid of this Account.
        :type accountid: str
        """

        self._accountid = accountid

    @property
    def accounttypename(self):
        """Gets the accounttypename of this Account.


        :return: The accounttypename of this Account.
        :rtype: str
        """
        return self._accounttypename

    @accounttypename.setter
    def accounttypename(self, accounttypename):
        """Sets the accounttypename of this Account.


        :param accounttypename: The accounttypename of this Account.
        :type accounttypename: str
        """

        self._accounttypename = accounttypename

    @property
    def cash(self):
        """Gets the cash of this Account.


        :return: The cash of this Account.
        :rtype: str
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this Account.


        :param cash: The cash of this Account.
        :type cash: str
        """

        self._cash = cash

    @property
    def change(self):
        """Gets the change of this Account.


        :return: The change of this Account.
        :rtype: str
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this Account.


        :param change: The change of this Account.
        :type change: str
        """

        self._change = change

    @property
    def changepercent(self):
        """Gets the changepercent of this Account.


        :return: The changepercent of this Account.
        :rtype: str
        """
        return self._changepercent

    @changepercent.setter
    def changepercent(self, changepercent):
        """Sets the changepercent of this Account.


        :param changepercent: The changepercent of this Account.
        :type changepercent: str
        """

        self._changepercent = changepercent

    @property
    def comments(self):
        """Gets the comments of this Account.


        :return: The comments of this Account.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Account.


        :param comments: The comments of this Account.
        :type comments: str
        """

        self._comments = comments

    @property
    def computer(self):
        """Gets the computer of this Account.


        :return: The computer of this Account.
        :rtype: str
        """
        return self._computer

    @computer.setter
    def computer(self, computer):
        """Sets the computer of this Account.


        :param computer: The computer of this Account.
        :type computer: str
        """

        self._computer = computer

    @property
    def currencyid(self):
        """Gets the currencyid of this Account.


        :return: The currencyid of this Account.
        :rtype: str
        """
        return self._currencyid

    @currencyid.setter
    def currencyid(self, currencyid):
        """Sets the currencyid of this Account.


        :param currencyid: The currencyid of this Account.
        :type currencyid: str
        """

        self._currencyid = currencyid

    @property
    def currencytext(self):
        """Gets the currencytext of this Account.


        :return: The currencytext of this Account.
        :rtype: str
        """
        return self._currencytext

    @currencytext.setter
    def currencytext(self, currencytext):
        """Sets the currencytext of this Account.


        :param currencytext: The currencytext of this Account.
        :type currencytext: str
        """

        self._currencytext = currencytext

    @property
    def hwid(self):
        """Gets the hwid of this Account.


        :return: The hwid of this Account.
        :rtype: str
        """
        return self._hwid

    @hwid.setter
    def hwid(self, hwid):
        """Sets the hwid of this Account.


        :param hwid: The hwid of this Account.
        :type hwid: str
        """

        self._hwid = hwid

    @property
    def positions(self):
        """Gets the positions of this Account.


        :return: The positions of this Account.
        :rtype: Dict[str, str]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this Account.


        :param positions: The positions of this Account.
        :type positions: Dict[str, str]
        """

        self._positions = positions

    @property
    def positionspercent(self):
        """Gets the positionspercent of this Account.


        :return: The positionspercent of this Account.
        :rtype: Dict[str, str]
        """
        return self._positionspercent

    @positionspercent.setter
    def positionspercent(self, positionspercent):
        """Sets the positionspercent of this Account.


        :param positionspercent: The positionspercent of this Account.
        :type positionspercent: Dict[str, str]
        """

        self._positionspercent = positionspercent

    @property
    def sessionid(self):
        """Gets the sessionid of this Account.


        :return: The sessionid of this Account.
        :rtype: str
        """
        return self._sessionid

    @sessionid.setter
    def sessionid(self, sessionid):
        """Sets the sessionid of this Account.


        :param sessionid: The sessionid of this Account.
        :type sessionid: str
        """

        self._sessionid = sessionid

    @property
    def typeid(self):
        """Gets the typeid of this Account.


        :return: The typeid of this Account.
        :rtype: str
        """
        return self._typeid

    @typeid.setter
    def typeid(self, typeid):
        """Sets the typeid of this Account.


        :param typeid: The typeid of this Account.
        :type typeid: str
        """

        self._typeid = typeid

    @property
    def value(self):
        """Gets the value of this Account.


        :return: The value of this Account.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Account.


        :param value: The value of this Account.
        :type value: str
        """

        self._value = value
