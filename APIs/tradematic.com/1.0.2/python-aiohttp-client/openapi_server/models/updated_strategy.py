# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatedStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, description: str=None, limitorder: str=None, marketname: str=None, multiposition: str=None, name: str=None, symbols: str=None):
        """UpdatedStrategy - a model defined in OpenAPI

        :param author: The author of this UpdatedStrategy.
        :param description: The description of this UpdatedStrategy.
        :param limitorder: The limitorder of this UpdatedStrategy.
        :param marketname: The marketname of this UpdatedStrategy.
        :param multiposition: The multiposition of this UpdatedStrategy.
        :param name: The name of this UpdatedStrategy.
        :param symbols: The symbols of this UpdatedStrategy.
        """
        self.openapi_types = {
            'author': str,
            'description': str,
            'limitorder': str,
            'marketname': str,
            'multiposition': str,
            'name': str,
            'symbols': str
        }

        self.attribute_map = {
            'author': 'author',
            'description': 'description',
            'limitorder': 'limitorder',
            'marketname': 'marketname',
            'multiposition': 'multiposition',
            'name': 'name',
            'symbols': 'symbols'
        }

        self._author = author
        self._description = description
        self._limitorder = limitorder
        self._marketname = marketname
        self._multiposition = multiposition
        self._name = name
        self._symbols = symbols

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatedStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatedStrategy of this UpdatedStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this UpdatedStrategy.


        :return: The author of this UpdatedStrategy.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this UpdatedStrategy.


        :param author: The author of this UpdatedStrategy.
        :type author: str
        """

        self._author = author

    @property
    def description(self):
        """Gets the description of this UpdatedStrategy.


        :return: The description of this UpdatedStrategy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatedStrategy.


        :param description: The description of this UpdatedStrategy.
        :type description: str
        """

        self._description = description

    @property
    def limitorder(self):
        """Gets the limitorder of this UpdatedStrategy.


        :return: The limitorder of this UpdatedStrategy.
        :rtype: str
        """
        return self._limitorder

    @limitorder.setter
    def limitorder(self, limitorder):
        """Sets the limitorder of this UpdatedStrategy.


        :param limitorder: The limitorder of this UpdatedStrategy.
        :type limitorder: str
        """

        self._limitorder = limitorder

    @property
    def marketname(self):
        """Gets the marketname of this UpdatedStrategy.


        :return: The marketname of this UpdatedStrategy.
        :rtype: str
        """
        return self._marketname

    @marketname.setter
    def marketname(self, marketname):
        """Sets the marketname of this UpdatedStrategy.


        :param marketname: The marketname of this UpdatedStrategy.
        :type marketname: str
        """

        self._marketname = marketname

    @property
    def multiposition(self):
        """Gets the multiposition of this UpdatedStrategy.


        :return: The multiposition of this UpdatedStrategy.
        :rtype: str
        """
        return self._multiposition

    @multiposition.setter
    def multiposition(self, multiposition):
        """Sets the multiposition of this UpdatedStrategy.


        :param multiposition: The multiposition of this UpdatedStrategy.
        :type multiposition: str
        """

        self._multiposition = multiposition

    @property
    def name(self):
        """Gets the name of this UpdatedStrategy.


        :return: The name of this UpdatedStrategy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdatedStrategy.


        :param name: The name of this UpdatedStrategy.
        :type name: str
        """

        self._name = name

    @property
    def symbols(self):
        """Gets the symbols of this UpdatedStrategy.


        :return: The symbols of this UpdatedStrategy.
        :rtype: str
        """
        return self._symbols

    @symbols.setter
    def symbols(self, symbols):
        """Sets the symbols of this UpdatedStrategy.


        :param symbols: The symbols of this UpdatedStrategy.
        :type symbols: str
        """

        self._symbols = symbols
