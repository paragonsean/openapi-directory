# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatedConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: str=None, connectorid: str=None, host: str=None, login: str=None, password: str=None, port: str=None):
        """UpdatedConnection - a model defined in OpenAPI

        :param active: The active of this UpdatedConnection.
        :param connectorid: The connectorid of this UpdatedConnection.
        :param host: The host of this UpdatedConnection.
        :param login: The login of this UpdatedConnection.
        :param password: The password of this UpdatedConnection.
        :param port: The port of this UpdatedConnection.
        """
        self.openapi_types = {
            'active': str,
            'connectorid': str,
            'host': str,
            'login': str,
            'password': str,
            'port': str
        }

        self.attribute_map = {
            'active': 'active',
            'connectorid': 'connectorid',
            'host': 'host',
            'login': 'login',
            'password': 'password',
            'port': 'port'
        }

        self._active = active
        self._connectorid = connectorid
        self._host = host
        self._login = login
        self._password = password
        self._port = port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatedConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatedConnection of this UpdatedConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this UpdatedConnection.


        :return: The active of this UpdatedConnection.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UpdatedConnection.


        :param active: The active of this UpdatedConnection.
        :type active: str
        """

        self._active = active

    @property
    def connectorid(self):
        """Gets the connectorid of this UpdatedConnection.


        :return: The connectorid of this UpdatedConnection.
        :rtype: str
        """
        return self._connectorid

    @connectorid.setter
    def connectorid(self, connectorid):
        """Sets the connectorid of this UpdatedConnection.


        :param connectorid: The connectorid of this UpdatedConnection.
        :type connectorid: str
        """

        self._connectorid = connectorid

    @property
    def host(self):
        """Gets the host of this UpdatedConnection.


        :return: The host of this UpdatedConnection.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this UpdatedConnection.


        :param host: The host of this UpdatedConnection.
        :type host: str
        """

        self._host = host

    @property
    def login(self):
        """Gets the login of this UpdatedConnection.


        :return: The login of this UpdatedConnection.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UpdatedConnection.


        :param login: The login of this UpdatedConnection.
        :type login: str
        """

        self._login = login

    @property
    def password(self):
        """Gets the password of this UpdatedConnection.


        :return: The password of this UpdatedConnection.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdatedConnection.


        :param password: The password of this UpdatedConnection.
        :type password: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this UpdatedConnection.


        :return: The port of this UpdatedConnection.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this UpdatedConnection.


        :param port: The port of this UpdatedConnection.
        :type port: str
        """

        self._port = port
