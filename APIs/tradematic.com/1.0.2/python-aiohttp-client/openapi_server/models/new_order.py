# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buy: str=None, price: str=None, shares: str=None, symbol: str=None, type: str=None):
        """NewOrder - a model defined in OpenAPI

        :param buy: The buy of this NewOrder.
        :param price: The price of this NewOrder.
        :param shares: The shares of this NewOrder.
        :param symbol: The symbol of this NewOrder.
        :param type: The type of this NewOrder.
        """
        self.openapi_types = {
            'buy': str,
            'price': str,
            'shares': str,
            'symbol': str,
            'type': str
        }

        self.attribute_map = {
            'buy': 'buy',
            'price': 'price',
            'shares': 'shares',
            'symbol': 'symbol',
            'type': 'type'
        }

        self._buy = buy
        self._price = price
        self._shares = shares
        self._symbol = symbol
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewOrder of this NewOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buy(self):
        """Gets the buy of this NewOrder.


        :return: The buy of this NewOrder.
        :rtype: str
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NewOrder.


        :param buy: The buy of this NewOrder.
        :type buy: str
        """

        self._buy = buy

    @property
    def price(self):
        """Gets the price of this NewOrder.


        :return: The price of this NewOrder.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this NewOrder.


        :param price: The price of this NewOrder.
        :type price: str
        """

        self._price = price

    @property
    def shares(self):
        """Gets the shares of this NewOrder.


        :return: The shares of this NewOrder.
        :rtype: str
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this NewOrder.


        :param shares: The shares of this NewOrder.
        :type shares: str
        """

        self._shares = shares

    @property
    def symbol(self):
        """Gets the symbol of this NewOrder.


        :return: The symbol of this NewOrder.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this NewOrder.


        :param symbol: The symbol of this NewOrder.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def type(self):
        """Gets the type of this NewOrder.


        :return: The type of this NewOrder.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewOrder.


        :param type: The type of this NewOrder.
        :type type: str
        """

        self._type = type
