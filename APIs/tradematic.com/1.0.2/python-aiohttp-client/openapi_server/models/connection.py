# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Connection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: str=None, connectionid: str=None, connectionstring: str=None, connectorcode: str=None, connectorid: str=None, connectorname: str=None, connectortypename: str=None, creationdate: datetime=None, host: str=None, login: str=None, password: str=None, port: str=None, sessionid: str=None, updatedate: datetime=None):
        """Connection - a model defined in OpenAPI

        :param active: The active of this Connection.
        :param connectionid: The connectionid of this Connection.
        :param connectionstring: The connectionstring of this Connection.
        :param connectorcode: The connectorcode of this Connection.
        :param connectorid: The connectorid of this Connection.
        :param connectorname: The connectorname of this Connection.
        :param connectortypename: The connectortypename of this Connection.
        :param creationdate: The creationdate of this Connection.
        :param host: The host of this Connection.
        :param login: The login of this Connection.
        :param password: The password of this Connection.
        :param port: The port of this Connection.
        :param sessionid: The sessionid of this Connection.
        :param updatedate: The updatedate of this Connection.
        """
        self.openapi_types = {
            'active': str,
            'connectionid': str,
            'connectionstring': str,
            'connectorcode': str,
            'connectorid': str,
            'connectorname': str,
            'connectortypename': str,
            'creationdate': datetime,
            'host': str,
            'login': str,
            'password': str,
            'port': str,
            'sessionid': str,
            'updatedate': datetime
        }

        self.attribute_map = {
            'active': 'active',
            'connectionid': 'connectionid',
            'connectionstring': 'connectionstring',
            'connectorcode': 'connectorcode',
            'connectorid': 'connectorid',
            'connectorname': 'connectorname',
            'connectortypename': 'connectortypename',
            'creationdate': 'creationdate',
            'host': 'host',
            'login': 'login',
            'password': 'password',
            'port': 'port',
            'sessionid': 'sessionid',
            'updatedate': 'updatedate'
        }

        self._active = active
        self._connectionid = connectionid
        self._connectionstring = connectionstring
        self._connectorcode = connectorcode
        self._connectorid = connectorid
        self._connectorname = connectorname
        self._connectortypename = connectortypename
        self._creationdate = creationdate
        self._host = host
        self._login = login
        self._password = password
        self._port = port
        self._sessionid = sessionid
        self._updatedate = updatedate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connection of this Connection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Connection.


        :return: The active of this Connection.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Connection.


        :param active: The active of this Connection.
        :type active: str
        """

        self._active = active

    @property
    def connectionid(self):
        """Gets the connectionid of this Connection.


        :return: The connectionid of this Connection.
        :rtype: str
        """
        return self._connectionid

    @connectionid.setter
    def connectionid(self, connectionid):
        """Sets the connectionid of this Connection.


        :param connectionid: The connectionid of this Connection.
        :type connectionid: str
        """

        self._connectionid = connectionid

    @property
    def connectionstring(self):
        """Gets the connectionstring of this Connection.


        :return: The connectionstring of this Connection.
        :rtype: str
        """
        return self._connectionstring

    @connectionstring.setter
    def connectionstring(self, connectionstring):
        """Sets the connectionstring of this Connection.


        :param connectionstring: The connectionstring of this Connection.
        :type connectionstring: str
        """

        self._connectionstring = connectionstring

    @property
    def connectorcode(self):
        """Gets the connectorcode of this Connection.


        :return: The connectorcode of this Connection.
        :rtype: str
        """
        return self._connectorcode

    @connectorcode.setter
    def connectorcode(self, connectorcode):
        """Sets the connectorcode of this Connection.


        :param connectorcode: The connectorcode of this Connection.
        :type connectorcode: str
        """

        self._connectorcode = connectorcode

    @property
    def connectorid(self):
        """Gets the connectorid of this Connection.


        :return: The connectorid of this Connection.
        :rtype: str
        """
        return self._connectorid

    @connectorid.setter
    def connectorid(self, connectorid):
        """Sets the connectorid of this Connection.


        :param connectorid: The connectorid of this Connection.
        :type connectorid: str
        """

        self._connectorid = connectorid

    @property
    def connectorname(self):
        """Gets the connectorname of this Connection.


        :return: The connectorname of this Connection.
        :rtype: str
        """
        return self._connectorname

    @connectorname.setter
    def connectorname(self, connectorname):
        """Sets the connectorname of this Connection.


        :param connectorname: The connectorname of this Connection.
        :type connectorname: str
        """

        self._connectorname = connectorname

    @property
    def connectortypename(self):
        """Gets the connectortypename of this Connection.


        :return: The connectortypename of this Connection.
        :rtype: str
        """
        return self._connectortypename

    @connectortypename.setter
    def connectortypename(self, connectortypename):
        """Sets the connectortypename of this Connection.


        :param connectortypename: The connectortypename of this Connection.
        :type connectortypename: str
        """

        self._connectortypename = connectortypename

    @property
    def creationdate(self):
        """Gets the creationdate of this Connection.


        :return: The creationdate of this Connection.
        :rtype: datetime
        """
        return self._creationdate

    @creationdate.setter
    def creationdate(self, creationdate):
        """Sets the creationdate of this Connection.


        :param creationdate: The creationdate of this Connection.
        :type creationdate: datetime
        """

        self._creationdate = creationdate

    @property
    def host(self):
        """Gets the host of this Connection.


        :return: The host of this Connection.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Connection.


        :param host: The host of this Connection.
        :type host: str
        """

        self._host = host

    @property
    def login(self):
        """Gets the login of this Connection.


        :return: The login of this Connection.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Connection.


        :param login: The login of this Connection.
        :type login: str
        """

        self._login = login

    @property
    def password(self):
        """Gets the password of this Connection.


        :return: The password of this Connection.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Connection.


        :param password: The password of this Connection.
        :type password: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this Connection.


        :return: The port of this Connection.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Connection.


        :param port: The port of this Connection.
        :type port: str
        """

        self._port = port

    @property
    def sessionid(self):
        """Gets the sessionid of this Connection.


        :return: The sessionid of this Connection.
        :rtype: str
        """
        return self._sessionid

    @sessionid.setter
    def sessionid(self, sessionid):
        """Sets the sessionid of this Connection.


        :param sessionid: The sessionid of this Connection.
        :type sessionid: str
        """

        self._sessionid = sessionid

    @property
    def updatedate(self):
        """Gets the updatedate of this Connection.


        :return: The updatedate of this Connection.
        :rtype: datetime
        """
        return self._updatedate

    @updatedate.setter
    def updatedate(self, updatedate):
        """Sets the updatedate of this Connection.


        :param updatedate: The updatedate of this Connection.
        :type updatedate: datetime
        """

        self._updatedate = updatedate
