# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apr: str=None, author: str=None, content: str=None, description: str=None, drawdown: str=None, guid: str=None, limitorder: str=None, marketname: str=None, multiposition: str=None, name: str=None, positionsize: str=None, strategytypeid: str=None, symbols: str=None, timeframe: str=None):
        """NewStrategy - a model defined in OpenAPI

        :param apr: The apr of this NewStrategy.
        :param author: The author of this NewStrategy.
        :param content: The content of this NewStrategy.
        :param description: The description of this NewStrategy.
        :param drawdown: The drawdown of this NewStrategy.
        :param guid: The guid of this NewStrategy.
        :param limitorder: The limitorder of this NewStrategy.
        :param marketname: The marketname of this NewStrategy.
        :param multiposition: The multiposition of this NewStrategy.
        :param name: The name of this NewStrategy.
        :param positionsize: The positionsize of this NewStrategy.
        :param strategytypeid: The strategytypeid of this NewStrategy.
        :param symbols: The symbols of this NewStrategy.
        :param timeframe: The timeframe of this NewStrategy.
        """
        self.openapi_types = {
            'apr': str,
            'author': str,
            'content': str,
            'description': str,
            'drawdown': str,
            'guid': str,
            'limitorder': str,
            'marketname': str,
            'multiposition': str,
            'name': str,
            'positionsize': str,
            'strategytypeid': str,
            'symbols': str,
            'timeframe': str
        }

        self.attribute_map = {
            'apr': 'apr',
            'author': 'author',
            'content': 'content',
            'description': 'description',
            'drawdown': 'drawdown',
            'guid': 'guid',
            'limitorder': 'limitorder',
            'marketname': 'marketname',
            'multiposition': 'multiposition',
            'name': 'name',
            'positionsize': 'positionsize',
            'strategytypeid': 'strategytypeid',
            'symbols': 'symbols',
            'timeframe': 'timeframe'
        }

        self._apr = apr
        self._author = author
        self._content = content
        self._description = description
        self._drawdown = drawdown
        self._guid = guid
        self._limitorder = limitorder
        self._marketname = marketname
        self._multiposition = multiposition
        self._name = name
        self._positionsize = positionsize
        self._strategytypeid = strategytypeid
        self._symbols = symbols
        self._timeframe = timeframe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewStrategy of this NewStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apr(self):
        """Gets the apr of this NewStrategy.


        :return: The apr of this NewStrategy.
        :rtype: str
        """
        return self._apr

    @apr.setter
    def apr(self, apr):
        """Sets the apr of this NewStrategy.


        :param apr: The apr of this NewStrategy.
        :type apr: str
        """

        self._apr = apr

    @property
    def author(self):
        """Gets the author of this NewStrategy.


        :return: The author of this NewStrategy.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this NewStrategy.


        :param author: The author of this NewStrategy.
        :type author: str
        """

        self._author = author

    @property
    def content(self):
        """Gets the content of this NewStrategy.


        :return: The content of this NewStrategy.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this NewStrategy.


        :param content: The content of this NewStrategy.
        :type content: str
        """

        self._content = content

    @property
    def description(self):
        """Gets the description of this NewStrategy.


        :return: The description of this NewStrategy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewStrategy.


        :param description: The description of this NewStrategy.
        :type description: str
        """

        self._description = description

    @property
    def drawdown(self):
        """Gets the drawdown of this NewStrategy.


        :return: The drawdown of this NewStrategy.
        :rtype: str
        """
        return self._drawdown

    @drawdown.setter
    def drawdown(self, drawdown):
        """Sets the drawdown of this NewStrategy.


        :param drawdown: The drawdown of this NewStrategy.
        :type drawdown: str
        """

        self._drawdown = drawdown

    @property
    def guid(self):
        """Gets the guid of this NewStrategy.


        :return: The guid of this NewStrategy.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this NewStrategy.


        :param guid: The guid of this NewStrategy.
        :type guid: str
        """

        self._guid = guid

    @property
    def limitorder(self):
        """Gets the limitorder of this NewStrategy.


        :return: The limitorder of this NewStrategy.
        :rtype: str
        """
        return self._limitorder

    @limitorder.setter
    def limitorder(self, limitorder):
        """Sets the limitorder of this NewStrategy.


        :param limitorder: The limitorder of this NewStrategy.
        :type limitorder: str
        """

        self._limitorder = limitorder

    @property
    def marketname(self):
        """Gets the marketname of this NewStrategy.


        :return: The marketname of this NewStrategy.
        :rtype: str
        """
        return self._marketname

    @marketname.setter
    def marketname(self, marketname):
        """Sets the marketname of this NewStrategy.


        :param marketname: The marketname of this NewStrategy.
        :type marketname: str
        """

        self._marketname = marketname

    @property
    def multiposition(self):
        """Gets the multiposition of this NewStrategy.


        :return: The multiposition of this NewStrategy.
        :rtype: str
        """
        return self._multiposition

    @multiposition.setter
    def multiposition(self, multiposition):
        """Sets the multiposition of this NewStrategy.


        :param multiposition: The multiposition of this NewStrategy.
        :type multiposition: str
        """

        self._multiposition = multiposition

    @property
    def name(self):
        """Gets the name of this NewStrategy.


        :return: The name of this NewStrategy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewStrategy.


        :param name: The name of this NewStrategy.
        :type name: str
        """

        self._name = name

    @property
    def positionsize(self):
        """Gets the positionsize of this NewStrategy.


        :return: The positionsize of this NewStrategy.
        :rtype: str
        """
        return self._positionsize

    @positionsize.setter
    def positionsize(self, positionsize):
        """Sets the positionsize of this NewStrategy.


        :param positionsize: The positionsize of this NewStrategy.
        :type positionsize: str
        """

        self._positionsize = positionsize

    @property
    def strategytypeid(self):
        """Gets the strategytypeid of this NewStrategy.


        :return: The strategytypeid of this NewStrategy.
        :rtype: str
        """
        return self._strategytypeid

    @strategytypeid.setter
    def strategytypeid(self, strategytypeid):
        """Sets the strategytypeid of this NewStrategy.


        :param strategytypeid: The strategytypeid of this NewStrategy.
        :type strategytypeid: str
        """

        self._strategytypeid = strategytypeid

    @property
    def symbols(self):
        """Gets the symbols of this NewStrategy.


        :return: The symbols of this NewStrategy.
        :rtype: str
        """
        return self._symbols

    @symbols.setter
    def symbols(self, symbols):
        """Sets the symbols of this NewStrategy.


        :param symbols: The symbols of this NewStrategy.
        :type symbols: str
        """

        self._symbols = symbols

    @property
    def timeframe(self):
        """Gets the timeframe of this NewStrategy.


        :return: The timeframe of this NewStrategy.
        :rtype: str
        """
        return self._timeframe

    @timeframe.setter
    def timeframe(self, timeframe):
        """Sets the timeframe of this NewStrategy.


        :param timeframe: The timeframe of this NewStrategy.
        :type timeframe: str
        """

        self._timeframe = timeframe
