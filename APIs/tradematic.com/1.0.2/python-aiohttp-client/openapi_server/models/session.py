# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computer: str=None, hwid: str=None, login: str=None, mode: str=None, sessionid: str=None, sessionmodename: str=None, sessionstatusname: str=None, status: str=None, timestamp: datetime=None, type: str=None, userid: str=None):
        """Session - a model defined in OpenAPI

        :param computer: The computer of this Session.
        :param hwid: The hwid of this Session.
        :param login: The login of this Session.
        :param mode: The mode of this Session.
        :param sessionid: The sessionid of this Session.
        :param sessionmodename: The sessionmodename of this Session.
        :param sessionstatusname: The sessionstatusname of this Session.
        :param status: The status of this Session.
        :param timestamp: The timestamp of this Session.
        :param type: The type of this Session.
        :param userid: The userid of this Session.
        """
        self.openapi_types = {
            'computer': str,
            'hwid': str,
            'login': str,
            'mode': str,
            'sessionid': str,
            'sessionmodename': str,
            'sessionstatusname': str,
            'status': str,
            'timestamp': datetime,
            'type': str,
            'userid': str
        }

        self.attribute_map = {
            'computer': 'computer',
            'hwid': 'hwid',
            'login': 'login',
            'mode': 'mode',
            'sessionid': 'sessionid',
            'sessionmodename': 'sessionmodename',
            'sessionstatusname': 'sessionstatusname',
            'status': 'status',
            'timestamp': 'timestamp',
            'type': 'type',
            'userid': 'userid'
        }

        self._computer = computer
        self._hwid = hwid
        self._login = login
        self._mode = mode
        self._sessionid = sessionid
        self._sessionmodename = sessionmodename
        self._sessionstatusname = sessionstatusname
        self._status = status
        self._timestamp = timestamp
        self._type = type
        self._userid = userid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computer(self):
        """Gets the computer of this Session.


        :return: The computer of this Session.
        :rtype: str
        """
        return self._computer

    @computer.setter
    def computer(self, computer):
        """Sets the computer of this Session.


        :param computer: The computer of this Session.
        :type computer: str
        """

        self._computer = computer

    @property
    def hwid(self):
        """Gets the hwid of this Session.


        :return: The hwid of this Session.
        :rtype: str
        """
        return self._hwid

    @hwid.setter
    def hwid(self, hwid):
        """Sets the hwid of this Session.


        :param hwid: The hwid of this Session.
        :type hwid: str
        """

        self._hwid = hwid

    @property
    def login(self):
        """Gets the login of this Session.


        :return: The login of this Session.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Session.


        :param login: The login of this Session.
        :type login: str
        """

        self._login = login

    @property
    def mode(self):
        """Gets the mode of this Session.


        :return: The mode of this Session.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Session.


        :param mode: The mode of this Session.
        :type mode: str
        """

        self._mode = mode

    @property
    def sessionid(self):
        """Gets the sessionid of this Session.


        :return: The sessionid of this Session.
        :rtype: str
        """
        return self._sessionid

    @sessionid.setter
    def sessionid(self, sessionid):
        """Sets the sessionid of this Session.


        :param sessionid: The sessionid of this Session.
        :type sessionid: str
        """

        self._sessionid = sessionid

    @property
    def sessionmodename(self):
        """Gets the sessionmodename of this Session.


        :return: The sessionmodename of this Session.
        :rtype: str
        """
        return self._sessionmodename

    @sessionmodename.setter
    def sessionmodename(self, sessionmodename):
        """Sets the sessionmodename of this Session.


        :param sessionmodename: The sessionmodename of this Session.
        :type sessionmodename: str
        """

        self._sessionmodename = sessionmodename

    @property
    def sessionstatusname(self):
        """Gets the sessionstatusname of this Session.


        :return: The sessionstatusname of this Session.
        :rtype: str
        """
        return self._sessionstatusname

    @sessionstatusname.setter
    def sessionstatusname(self, sessionstatusname):
        """Sets the sessionstatusname of this Session.


        :param sessionstatusname: The sessionstatusname of this Session.
        :type sessionstatusname: str
        """

        self._sessionstatusname = sessionstatusname

    @property
    def status(self):
        """Gets the status of this Session.


        :return: The status of this Session.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Session.


        :param status: The status of this Session.
        :type status: str
        """

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this Session.


        :return: The timestamp of this Session.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Session.


        :param timestamp: The timestamp of this Session.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this Session.


        :return: The type of this Session.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Session.


        :param type: The type of this Session.
        :type type: str
        """

        self._type = type

    @property
    def userid(self):
        """Gets the userid of this Session.


        :return: The userid of this Session.
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Session.


        :param userid: The userid of this Session.
        :type userid: str
        """

        self._userid = userid
