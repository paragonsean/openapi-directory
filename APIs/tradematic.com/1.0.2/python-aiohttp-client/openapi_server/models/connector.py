# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Connector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, connectorid: str=None, connectortypename: str=None, name: str=None, typeid: str=None):
        """Connector - a model defined in OpenAPI

        :param code: The code of this Connector.
        :param connectorid: The connectorid of this Connector.
        :param connectortypename: The connectortypename of this Connector.
        :param name: The name of this Connector.
        :param typeid: The typeid of this Connector.
        """
        self.openapi_types = {
            'code': str,
            'connectorid': str,
            'connectortypename': str,
            'name': str,
            'typeid': str
        }

        self.attribute_map = {
            'code': 'code',
            'connectorid': 'connectorid',
            'connectortypename': 'connectortypename',
            'name': 'name',
            'typeid': 'typeid'
        }

        self._code = code
        self._connectorid = connectorid
        self._connectortypename = connectortypename
        self._name = name
        self._typeid = typeid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connector of this Connector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Connector.


        :return: The code of this Connector.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Connector.


        :param code: The code of this Connector.
        :type code: str
        """

        self._code = code

    @property
    def connectorid(self):
        """Gets the connectorid of this Connector.


        :return: The connectorid of this Connector.
        :rtype: str
        """
        return self._connectorid

    @connectorid.setter
    def connectorid(self, connectorid):
        """Sets the connectorid of this Connector.


        :param connectorid: The connectorid of this Connector.
        :type connectorid: str
        """

        self._connectorid = connectorid

    @property
    def connectortypename(self):
        """Gets the connectortypename of this Connector.


        :return: The connectortypename of this Connector.
        :rtype: str
        """
        return self._connectortypename

    @connectortypename.setter
    def connectortypename(self, connectortypename):
        """Sets the connectortypename of this Connector.


        :param connectortypename: The connectortypename of this Connector.
        :type connectortypename: str
        """

        self._connectortypename = connectortypename

    @property
    def name(self):
        """Gets the name of this Connector.


        :return: The name of this Connector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connector.


        :param name: The name of this Connector.
        :type name: str
        """

        self._name = name

    @property
    def typeid(self):
        """Gets the typeid of this Connector.


        :return: The typeid of this Connector.
        :rtype: str
        """
        return self._typeid

    @typeid.setter
    def typeid(self, typeid):
        """Sets the typeid of this Connector.


        :param typeid: The typeid of this Connector.
        :type typeid: str
        """

        self._typeid = typeid
