# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StrategyPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, price: str=None, size: str=None, symbol: str=None):
        """StrategyPosition - a model defined in OpenAPI

        :param _date: The _date of this StrategyPosition.
        :param price: The price of this StrategyPosition.
        :param size: The size of this StrategyPosition.
        :param symbol: The symbol of this StrategyPosition.
        """
        self.openapi_types = {
            '_date': datetime,
            'price': str,
            'size': str,
            'symbol': str
        }

        self.attribute_map = {
            '_date': 'date',
            'price': 'price',
            'size': 'size',
            'symbol': 'symbol'
        }

        self.__date = _date
        self._price = price
        self._size = size
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StrategyPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StrategyPosition of this StrategyPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this StrategyPosition.


        :return: The _date of this StrategyPosition.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this StrategyPosition.


        :param _date: The _date of this StrategyPosition.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def price(self):
        """Gets the price of this StrategyPosition.


        :return: The price of this StrategyPosition.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this StrategyPosition.


        :param price: The price of this StrategyPosition.
        :type price: str
        """

        self._price = price

    @property
    def size(self):
        """Gets the size of this StrategyPosition.


        :return: The size of this StrategyPosition.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StrategyPosition.


        :param size: The size of this StrategyPosition.
        :type size: str
        """

        self._size = size

    @property
    def symbol(self):
        """Gets the symbol of this StrategyPosition.


        :return: The symbol of this StrategyPosition.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this StrategyPosition.


        :param symbol: The symbol of this StrategyPosition.
        :type symbol: str
        """

        self._symbol = symbol
