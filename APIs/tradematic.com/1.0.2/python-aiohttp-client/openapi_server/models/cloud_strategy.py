# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, computer: str=None, hwid: str=None, message: str=None, status: str=None, strategy: str=None, strategyid: str=None, strategystatusname: str=None):
        """CloudStrategy - a model defined in OpenAPI

        :param account: The account of this CloudStrategy.
        :param computer: The computer of this CloudStrategy.
        :param hwid: The hwid of this CloudStrategy.
        :param message: The message of this CloudStrategy.
        :param status: The status of this CloudStrategy.
        :param strategy: The strategy of this CloudStrategy.
        :param strategyid: The strategyid of this CloudStrategy.
        :param strategystatusname: The strategystatusname of this CloudStrategy.
        """
        self.openapi_types = {
            'account': str,
            'computer': str,
            'hwid': str,
            'message': str,
            'status': str,
            'strategy': str,
            'strategyid': str,
            'strategystatusname': str
        }

        self.attribute_map = {
            'account': 'account',
            'computer': 'computer',
            'hwid': 'hwid',
            'message': 'message',
            'status': 'status',
            'strategy': 'strategy',
            'strategyid': 'strategyid',
            'strategystatusname': 'strategystatusname'
        }

        self._account = account
        self._computer = computer
        self._hwid = hwid
        self._message = message
        self._status = status
        self._strategy = strategy
        self._strategyid = strategyid
        self._strategystatusname = strategystatusname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudStrategy of this CloudStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this CloudStrategy.


        :return: The account of this CloudStrategy.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CloudStrategy.


        :param account: The account of this CloudStrategy.
        :type account: str
        """

        self._account = account

    @property
    def computer(self):
        """Gets the computer of this CloudStrategy.


        :return: The computer of this CloudStrategy.
        :rtype: str
        """
        return self._computer

    @computer.setter
    def computer(self, computer):
        """Sets the computer of this CloudStrategy.


        :param computer: The computer of this CloudStrategy.
        :type computer: str
        """

        self._computer = computer

    @property
    def hwid(self):
        """Gets the hwid of this CloudStrategy.


        :return: The hwid of this CloudStrategy.
        :rtype: str
        """
        return self._hwid

    @hwid.setter
    def hwid(self, hwid):
        """Sets the hwid of this CloudStrategy.


        :param hwid: The hwid of this CloudStrategy.
        :type hwid: str
        """

        self._hwid = hwid

    @property
    def message(self):
        """Gets the message of this CloudStrategy.


        :return: The message of this CloudStrategy.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CloudStrategy.


        :param message: The message of this CloudStrategy.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this CloudStrategy.


        :return: The status of this CloudStrategy.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CloudStrategy.


        :param status: The status of this CloudStrategy.
        :type status: str
        """

        self._status = status

    @property
    def strategy(self):
        """Gets the strategy of this CloudStrategy.


        :return: The strategy of this CloudStrategy.
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this CloudStrategy.


        :param strategy: The strategy of this CloudStrategy.
        :type strategy: str
        """

        self._strategy = strategy

    @property
    def strategyid(self):
        """Gets the strategyid of this CloudStrategy.


        :return: The strategyid of this CloudStrategy.
        :rtype: str
        """
        return self._strategyid

    @strategyid.setter
    def strategyid(self, strategyid):
        """Sets the strategyid of this CloudStrategy.


        :param strategyid: The strategyid of this CloudStrategy.
        :type strategyid: str
        """

        self._strategyid = strategyid

    @property
    def strategystatusname(self):
        """Gets the strategystatusname of this CloudStrategy.


        :return: The strategystatusname of this CloudStrategy.
        :rtype: str
        """
        return self._strategystatusname

    @strategystatusname.setter
    def strategystatusname(self, strategystatusname):
        """Sets the strategystatusname of this CloudStrategy.


        :param strategystatusname: The strategystatusname of this CloudStrategy.
        :type strategystatusname: str
        """

        self._strategystatusname = strategystatusname
