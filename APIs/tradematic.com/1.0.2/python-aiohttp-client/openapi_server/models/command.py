# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Command(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, accountid: str=None, commanddate: datetime=None, commandid: str=None, commandstatusname: str=None, commandtypename: str=None, computer: str=None, hwid: str=None, message: str=None, parameters: Dict[str, str]=None, status: str=None, timestamp: datetime=None, type: str=None):
        """Command - a model defined in OpenAPI

        :param account: The account of this Command.
        :param accountid: The accountid of this Command.
        :param commanddate: The commanddate of this Command.
        :param commandid: The commandid of this Command.
        :param commandstatusname: The commandstatusname of this Command.
        :param commandtypename: The commandtypename of this Command.
        :param computer: The computer of this Command.
        :param hwid: The hwid of this Command.
        :param message: The message of this Command.
        :param parameters: The parameters of this Command.
        :param status: The status of this Command.
        :param timestamp: The timestamp of this Command.
        :param type: The type of this Command.
        """
        self.openapi_types = {
            'account': str,
            'accountid': str,
            'commanddate': datetime,
            'commandid': str,
            'commandstatusname': str,
            'commandtypename': str,
            'computer': str,
            'hwid': str,
            'message': str,
            'parameters': Dict[str, str],
            'status': str,
            'timestamp': datetime,
            'type': str
        }

        self.attribute_map = {
            'account': 'account',
            'accountid': 'accountid',
            'commanddate': 'commanddate',
            'commandid': 'commandid',
            'commandstatusname': 'commandstatusname',
            'commandtypename': 'commandtypename',
            'computer': 'computer',
            'hwid': 'hwid',
            'message': 'message',
            'parameters': 'parameters',
            'status': 'status',
            'timestamp': 'timestamp',
            'type': 'type'
        }

        self._account = account
        self._accountid = accountid
        self._commanddate = commanddate
        self._commandid = commandid
        self._commandstatusname = commandstatusname
        self._commandtypename = commandtypename
        self._computer = computer
        self._hwid = hwid
        self._message = message
        self._parameters = parameters
        self._status = status
        self._timestamp = timestamp
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Command':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Command of this Command.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Command.


        :return: The account of this Command.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Command.


        :param account: The account of this Command.
        :type account: str
        """

        self._account = account

    @property
    def accountid(self):
        """Gets the accountid of this Command.


        :return: The accountid of this Command.
        :rtype: str
        """
        return self._accountid

    @accountid.setter
    def accountid(self, accountid):
        """Sets the accountid of this Command.


        :param accountid: The accountid of this Command.
        :type accountid: str
        """

        self._accountid = accountid

    @property
    def commanddate(self):
        """Gets the commanddate of this Command.


        :return: The commanddate of this Command.
        :rtype: datetime
        """
        return self._commanddate

    @commanddate.setter
    def commanddate(self, commanddate):
        """Sets the commanddate of this Command.


        :param commanddate: The commanddate of this Command.
        :type commanddate: datetime
        """

        self._commanddate = commanddate

    @property
    def commandid(self):
        """Gets the commandid of this Command.


        :return: The commandid of this Command.
        :rtype: str
        """
        return self._commandid

    @commandid.setter
    def commandid(self, commandid):
        """Sets the commandid of this Command.


        :param commandid: The commandid of this Command.
        :type commandid: str
        """

        self._commandid = commandid

    @property
    def commandstatusname(self):
        """Gets the commandstatusname of this Command.


        :return: The commandstatusname of this Command.
        :rtype: str
        """
        return self._commandstatusname

    @commandstatusname.setter
    def commandstatusname(self, commandstatusname):
        """Sets the commandstatusname of this Command.


        :param commandstatusname: The commandstatusname of this Command.
        :type commandstatusname: str
        """

        self._commandstatusname = commandstatusname

    @property
    def commandtypename(self):
        """Gets the commandtypename of this Command.


        :return: The commandtypename of this Command.
        :rtype: str
        """
        return self._commandtypename

    @commandtypename.setter
    def commandtypename(self, commandtypename):
        """Sets the commandtypename of this Command.


        :param commandtypename: The commandtypename of this Command.
        :type commandtypename: str
        """

        self._commandtypename = commandtypename

    @property
    def computer(self):
        """Gets the computer of this Command.


        :return: The computer of this Command.
        :rtype: str
        """
        return self._computer

    @computer.setter
    def computer(self, computer):
        """Sets the computer of this Command.


        :param computer: The computer of this Command.
        :type computer: str
        """

        self._computer = computer

    @property
    def hwid(self):
        """Gets the hwid of this Command.


        :return: The hwid of this Command.
        :rtype: str
        """
        return self._hwid

    @hwid.setter
    def hwid(self, hwid):
        """Sets the hwid of this Command.


        :param hwid: The hwid of this Command.
        :type hwid: str
        """

        self._hwid = hwid

    @property
    def message(self):
        """Gets the message of this Command.


        :return: The message of this Command.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Command.


        :param message: The message of this Command.
        :type message: str
        """

        self._message = message

    @property
    def parameters(self):
        """Gets the parameters of this Command.


        :return: The parameters of this Command.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Command.


        :param parameters: The parameters of this Command.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def status(self):
        """Gets the status of this Command.


        :return: The status of this Command.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Command.


        :param status: The status of this Command.
        :type status: str
        """

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this Command.


        :return: The timestamp of this Command.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Command.


        :param timestamp: The timestamp of this Command.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this Command.


        :return: The type of this Command.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Command.


        :param type: The type of this Command.
        :type type: str
        """

        self._type = type
