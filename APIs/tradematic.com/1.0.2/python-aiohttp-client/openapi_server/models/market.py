# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Market(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, countryid: str=None, marketid: str=None, name: str=None):
        """Market - a model defined in OpenAPI

        :param code: The code of this Market.
        :param countryid: The countryid of this Market.
        :param marketid: The marketid of this Market.
        :param name: The name of this Market.
        """
        self.openapi_types = {
            'code': str,
            'countryid': str,
            'marketid': str,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'countryid': 'countryid',
            'marketid': 'marketid',
            'name': 'name'
        }

        self._code = code
        self._countryid = countryid
        self._marketid = marketid
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Market':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Market of this Market.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Market.


        :return: The code of this Market.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Market.


        :param code: The code of this Market.
        :type code: str
        """

        self._code = code

    @property
    def countryid(self):
        """Gets the countryid of this Market.


        :return: The countryid of this Market.
        :rtype: str
        """
        return self._countryid

    @countryid.setter
    def countryid(self, countryid):
        """Sets the countryid of this Market.


        :param countryid: The countryid of this Market.
        :type countryid: str
        """

        self._countryid = countryid

    @property
    def marketid(self):
        """Gets the marketid of this Market.


        :return: The marketid of this Market.
        :rtype: str
        """
        return self._marketid

    @marketid.setter
    def marketid(self, marketid):
        """Sets the marketid of this Market.


        :param marketid: The marketid of this Market.
        :type marketid: str
        """

        self._marketid = marketid

    @property
    def name(self):
        """Gets the name of this Market.


        :return: The name of this Market.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Market.


        :param name: The name of this Market.
        :type name: str
        """

        self._name = name
