# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rules import Rules
from openapi_server.models.taskresult import Taskresult
from openapi_server import util


class Strategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apr: str=None, author: str=None, brokername: str=None, code: str=None, datascale: str=None, description: str=None, drawdown: str=None, folder: str=None, guid: str=None, image: str=None, limitorder: str=None, marketname: str=None, multiposition: str=None, name: str=None, owner: str=None, permissions: str=None, positionsize: str=None, risklevelcode: str=None, risklevelid: str=None, risklevelname: str=None, rules: Rules=None, strategyid: str=None, strategytypeid: str=None, symbols: List[str]=None, taskfolder: str=None, taskid: str=None, taskresult: Taskresult=None, timeframe: str=None, updatedate: datetime=None, url: str=None):
        """Strategy - a model defined in OpenAPI

        :param apr: The apr of this Strategy.
        :param author: The author of this Strategy.
        :param brokername: The brokername of this Strategy.
        :param code: The code of this Strategy.
        :param datascale: The datascale of this Strategy.
        :param description: The description of this Strategy.
        :param drawdown: The drawdown of this Strategy.
        :param folder: The folder of this Strategy.
        :param guid: The guid of this Strategy.
        :param image: The image of this Strategy.
        :param limitorder: The limitorder of this Strategy.
        :param marketname: The marketname of this Strategy.
        :param multiposition: The multiposition of this Strategy.
        :param name: The name of this Strategy.
        :param owner: The owner of this Strategy.
        :param permissions: The permissions of this Strategy.
        :param positionsize: The positionsize of this Strategy.
        :param risklevelcode: The risklevelcode of this Strategy.
        :param risklevelid: The risklevelid of this Strategy.
        :param risklevelname: The risklevelname of this Strategy.
        :param rules: The rules of this Strategy.
        :param strategyid: The strategyid of this Strategy.
        :param strategytypeid: The strategytypeid of this Strategy.
        :param symbols: The symbols of this Strategy.
        :param taskfolder: The taskfolder of this Strategy.
        :param taskid: The taskid of this Strategy.
        :param taskresult: The taskresult of this Strategy.
        :param timeframe: The timeframe of this Strategy.
        :param updatedate: The updatedate of this Strategy.
        :param url: The url of this Strategy.
        """
        self.openapi_types = {
            'apr': str,
            'author': str,
            'brokername': str,
            'code': str,
            'datascale': str,
            'description': str,
            'drawdown': str,
            'folder': str,
            'guid': str,
            'image': str,
            'limitorder': str,
            'marketname': str,
            'multiposition': str,
            'name': str,
            'owner': str,
            'permissions': str,
            'positionsize': str,
            'risklevelcode': str,
            'risklevelid': str,
            'risklevelname': str,
            'rules': Rules,
            'strategyid': str,
            'strategytypeid': str,
            'symbols': List[str],
            'taskfolder': str,
            'taskid': str,
            'taskresult': Taskresult,
            'timeframe': str,
            'updatedate': datetime,
            'url': str
        }

        self.attribute_map = {
            'apr': 'apr',
            'author': 'author',
            'brokername': 'brokername',
            'code': 'code',
            'datascale': 'datascale',
            'description': 'description',
            'drawdown': 'drawdown',
            'folder': 'folder',
            'guid': 'guid',
            'image': 'image',
            'limitorder': 'limitorder',
            'marketname': 'marketname',
            'multiposition': 'multiposition',
            'name': 'name',
            'owner': 'owner',
            'permissions': 'permissions',
            'positionsize': 'positionsize',
            'risklevelcode': 'risklevelcode',
            'risklevelid': 'risklevelid',
            'risklevelname': 'risklevelname',
            'rules': 'rules',
            'strategyid': 'strategyid',
            'strategytypeid': 'strategytypeid',
            'symbols': 'symbols',
            'taskfolder': 'taskfolder',
            'taskid': 'taskid',
            'taskresult': 'taskresult',
            'timeframe': 'timeframe',
            'updatedate': 'updatedate',
            'url': 'url'
        }

        self._apr = apr
        self._author = author
        self._brokername = brokername
        self._code = code
        self._datascale = datascale
        self._description = description
        self._drawdown = drawdown
        self._folder = folder
        self._guid = guid
        self._image = image
        self._limitorder = limitorder
        self._marketname = marketname
        self._multiposition = multiposition
        self._name = name
        self._owner = owner
        self._permissions = permissions
        self._positionsize = positionsize
        self._risklevelcode = risklevelcode
        self._risklevelid = risklevelid
        self._risklevelname = risklevelname
        self._rules = rules
        self._strategyid = strategyid
        self._strategytypeid = strategytypeid
        self._symbols = symbols
        self._taskfolder = taskfolder
        self._taskid = taskid
        self._taskresult = taskresult
        self._timeframe = timeframe
        self._updatedate = updatedate
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Strategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Strategy of this Strategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apr(self):
        """Gets the apr of this Strategy.


        :return: The apr of this Strategy.
        :rtype: str
        """
        return self._apr

    @apr.setter
    def apr(self, apr):
        """Sets the apr of this Strategy.


        :param apr: The apr of this Strategy.
        :type apr: str
        """

        self._apr = apr

    @property
    def author(self):
        """Gets the author of this Strategy.


        :return: The author of this Strategy.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Strategy.


        :param author: The author of this Strategy.
        :type author: str
        """

        self._author = author

    @property
    def brokername(self):
        """Gets the brokername of this Strategy.


        :return: The brokername of this Strategy.
        :rtype: str
        """
        return self._brokername

    @brokername.setter
    def brokername(self, brokername):
        """Sets the brokername of this Strategy.


        :param brokername: The brokername of this Strategy.
        :type brokername: str
        """

        self._brokername = brokername

    @property
    def code(self):
        """Gets the code of this Strategy.


        :return: The code of this Strategy.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Strategy.


        :param code: The code of this Strategy.
        :type code: str
        """

        self._code = code

    @property
    def datascale(self):
        """Gets the datascale of this Strategy.


        :return: The datascale of this Strategy.
        :rtype: str
        """
        return self._datascale

    @datascale.setter
    def datascale(self, datascale):
        """Sets the datascale of this Strategy.


        :param datascale: The datascale of this Strategy.
        :type datascale: str
        """

        self._datascale = datascale

    @property
    def description(self):
        """Gets the description of this Strategy.


        :return: The description of this Strategy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Strategy.


        :param description: The description of this Strategy.
        :type description: str
        """

        self._description = description

    @property
    def drawdown(self):
        """Gets the drawdown of this Strategy.


        :return: The drawdown of this Strategy.
        :rtype: str
        """
        return self._drawdown

    @drawdown.setter
    def drawdown(self, drawdown):
        """Sets the drawdown of this Strategy.


        :param drawdown: The drawdown of this Strategy.
        :type drawdown: str
        """

        self._drawdown = drawdown

    @property
    def folder(self):
        """Gets the folder of this Strategy.


        :return: The folder of this Strategy.
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this Strategy.


        :param folder: The folder of this Strategy.
        :type folder: str
        """

        self._folder = folder

    @property
    def guid(self):
        """Gets the guid of this Strategy.


        :return: The guid of this Strategy.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Strategy.


        :param guid: The guid of this Strategy.
        :type guid: str
        """

        self._guid = guid

    @property
    def image(self):
        """Gets the image of this Strategy.


        :return: The image of this Strategy.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Strategy.


        :param image: The image of this Strategy.
        :type image: str
        """

        self._image = image

    @property
    def limitorder(self):
        """Gets the limitorder of this Strategy.


        :return: The limitorder of this Strategy.
        :rtype: str
        """
        return self._limitorder

    @limitorder.setter
    def limitorder(self, limitorder):
        """Sets the limitorder of this Strategy.


        :param limitorder: The limitorder of this Strategy.
        :type limitorder: str
        """

        self._limitorder = limitorder

    @property
    def marketname(self):
        """Gets the marketname of this Strategy.


        :return: The marketname of this Strategy.
        :rtype: str
        """
        return self._marketname

    @marketname.setter
    def marketname(self, marketname):
        """Sets the marketname of this Strategy.


        :param marketname: The marketname of this Strategy.
        :type marketname: str
        """

        self._marketname = marketname

    @property
    def multiposition(self):
        """Gets the multiposition of this Strategy.


        :return: The multiposition of this Strategy.
        :rtype: str
        """
        return self._multiposition

    @multiposition.setter
    def multiposition(self, multiposition):
        """Sets the multiposition of this Strategy.


        :param multiposition: The multiposition of this Strategy.
        :type multiposition: str
        """

        self._multiposition = multiposition

    @property
    def name(self):
        """Gets the name of this Strategy.


        :return: The name of this Strategy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Strategy.


        :param name: The name of this Strategy.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Strategy.


        :return: The owner of this Strategy.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Strategy.


        :param owner: The owner of this Strategy.
        :type owner: str
        """

        self._owner = owner

    @property
    def permissions(self):
        """Gets the permissions of this Strategy.


        :return: The permissions of this Strategy.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Strategy.


        :param permissions: The permissions of this Strategy.
        :type permissions: str
        """

        self._permissions = permissions

    @property
    def positionsize(self):
        """Gets the positionsize of this Strategy.


        :return: The positionsize of this Strategy.
        :rtype: str
        """
        return self._positionsize

    @positionsize.setter
    def positionsize(self, positionsize):
        """Sets the positionsize of this Strategy.


        :param positionsize: The positionsize of this Strategy.
        :type positionsize: str
        """

        self._positionsize = positionsize

    @property
    def risklevelcode(self):
        """Gets the risklevelcode of this Strategy.


        :return: The risklevelcode of this Strategy.
        :rtype: str
        """
        return self._risklevelcode

    @risklevelcode.setter
    def risklevelcode(self, risklevelcode):
        """Sets the risklevelcode of this Strategy.


        :param risklevelcode: The risklevelcode of this Strategy.
        :type risklevelcode: str
        """

        self._risklevelcode = risklevelcode

    @property
    def risklevelid(self):
        """Gets the risklevelid of this Strategy.


        :return: The risklevelid of this Strategy.
        :rtype: str
        """
        return self._risklevelid

    @risklevelid.setter
    def risklevelid(self, risklevelid):
        """Sets the risklevelid of this Strategy.


        :param risklevelid: The risklevelid of this Strategy.
        :type risklevelid: str
        """

        self._risklevelid = risklevelid

    @property
    def risklevelname(self):
        """Gets the risklevelname of this Strategy.


        :return: The risklevelname of this Strategy.
        :rtype: str
        """
        return self._risklevelname

    @risklevelname.setter
    def risklevelname(self, risklevelname):
        """Sets the risklevelname of this Strategy.


        :param risklevelname: The risklevelname of this Strategy.
        :type risklevelname: str
        """

        self._risklevelname = risklevelname

    @property
    def rules(self):
        """Gets the rules of this Strategy.


        :return: The rules of this Strategy.
        :rtype: Rules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Strategy.


        :param rules: The rules of this Strategy.
        :type rules: Rules
        """

        self._rules = rules

    @property
    def strategyid(self):
        """Gets the strategyid of this Strategy.


        :return: The strategyid of this Strategy.
        :rtype: str
        """
        return self._strategyid

    @strategyid.setter
    def strategyid(self, strategyid):
        """Sets the strategyid of this Strategy.


        :param strategyid: The strategyid of this Strategy.
        :type strategyid: str
        """

        self._strategyid = strategyid

    @property
    def strategytypeid(self):
        """Gets the strategytypeid of this Strategy.


        :return: The strategytypeid of this Strategy.
        :rtype: str
        """
        return self._strategytypeid

    @strategytypeid.setter
    def strategytypeid(self, strategytypeid):
        """Sets the strategytypeid of this Strategy.


        :param strategytypeid: The strategytypeid of this Strategy.
        :type strategytypeid: str
        """

        self._strategytypeid = strategytypeid

    @property
    def symbols(self):
        """Gets the symbols of this Strategy.


        :return: The symbols of this Strategy.
        :rtype: List[str]
        """
        return self._symbols

    @symbols.setter
    def symbols(self, symbols):
        """Sets the symbols of this Strategy.


        :param symbols: The symbols of this Strategy.
        :type symbols: List[str]
        """

        self._symbols = symbols

    @property
    def taskfolder(self):
        """Gets the taskfolder of this Strategy.


        :return: The taskfolder of this Strategy.
        :rtype: str
        """
        return self._taskfolder

    @taskfolder.setter
    def taskfolder(self, taskfolder):
        """Sets the taskfolder of this Strategy.


        :param taskfolder: The taskfolder of this Strategy.
        :type taskfolder: str
        """

        self._taskfolder = taskfolder

    @property
    def taskid(self):
        """Gets the taskid of this Strategy.


        :return: The taskid of this Strategy.
        :rtype: str
        """
        return self._taskid

    @taskid.setter
    def taskid(self, taskid):
        """Sets the taskid of this Strategy.


        :param taskid: The taskid of this Strategy.
        :type taskid: str
        """

        self._taskid = taskid

    @property
    def taskresult(self):
        """Gets the taskresult of this Strategy.


        :return: The taskresult of this Strategy.
        :rtype: Taskresult
        """
        return self._taskresult

    @taskresult.setter
    def taskresult(self, taskresult):
        """Sets the taskresult of this Strategy.


        :param taskresult: The taskresult of this Strategy.
        :type taskresult: Taskresult
        """

        self._taskresult = taskresult

    @property
    def timeframe(self):
        """Gets the timeframe of this Strategy.


        :return: The timeframe of this Strategy.
        :rtype: str
        """
        return self._timeframe

    @timeframe.setter
    def timeframe(self, timeframe):
        """Sets the timeframe of this Strategy.


        :param timeframe: The timeframe of this Strategy.
        :type timeframe: str
        """

        self._timeframe = timeframe

    @property
    def updatedate(self):
        """Gets the updatedate of this Strategy.


        :return: The updatedate of this Strategy.
        :rtype: datetime
        """
        return self._updatedate

    @updatedate.setter
    def updatedate(self, updatedate):
        """Sets the updatedate of this Strategy.


        :param updatedate: The updatedate of this Strategy.
        :type updatedate: datetime
        """

        self._updatedate = updatedate

    @property
    def url(self):
        """Gets the url of this Strategy.


        :return: The url of this Strategy.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Strategy.


        :param url: The url of this Strategy.
        :type url: str
        """

        self._url = url
