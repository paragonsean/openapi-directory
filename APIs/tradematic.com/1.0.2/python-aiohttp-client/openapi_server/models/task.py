# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, isbenchmark: str=None, name: str=None, status: str=None, statusupdatedate: datetime=None, strategyid: str=None, taskid: str=None, usestaticdata: str=None):
        """Task - a model defined in OpenAPI

        :param isbenchmark: The isbenchmark of this Task.
        :param name: The name of this Task.
        :param status: The status of this Task.
        :param statusupdatedate: The statusupdatedate of this Task.
        :param strategyid: The strategyid of this Task.
        :param taskid: The taskid of this Task.
        :param usestaticdata: The usestaticdata of this Task.
        """
        self.openapi_types = {
            'isbenchmark': str,
            'name': str,
            'status': str,
            'statusupdatedate': datetime,
            'strategyid': str,
            'taskid': str,
            'usestaticdata': str
        }

        self.attribute_map = {
            'isbenchmark': 'isbenchmark',
            'name': 'name',
            'status': 'status',
            'statusupdatedate': 'statusupdatedate',
            'strategyid': 'strategyid',
            'taskid': 'taskid',
            'usestaticdata': 'usestaticdata'
        }

        self._isbenchmark = isbenchmark
        self._name = name
        self._status = status
        self._statusupdatedate = statusupdatedate
        self._strategyid = strategyid
        self._taskid = taskid
        self._usestaticdata = usestaticdata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def isbenchmark(self):
        """Gets the isbenchmark of this Task.


        :return: The isbenchmark of this Task.
        :rtype: str
        """
        return self._isbenchmark

    @isbenchmark.setter
    def isbenchmark(self, isbenchmark):
        """Sets the isbenchmark of this Task.


        :param isbenchmark: The isbenchmark of this Task.
        :type isbenchmark: str
        """

        self._isbenchmark = isbenchmark

    @property
    def name(self):
        """Gets the name of this Task.


        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Task.


        :return: The status of this Task.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.
        :type status: str
        """

        self._status = status

    @property
    def statusupdatedate(self):
        """Gets the statusupdatedate of this Task.


        :return: The statusupdatedate of this Task.
        :rtype: datetime
        """
        return self._statusupdatedate

    @statusupdatedate.setter
    def statusupdatedate(self, statusupdatedate):
        """Sets the statusupdatedate of this Task.


        :param statusupdatedate: The statusupdatedate of this Task.
        :type statusupdatedate: datetime
        """

        self._statusupdatedate = statusupdatedate

    @property
    def strategyid(self):
        """Gets the strategyid of this Task.


        :return: The strategyid of this Task.
        :rtype: str
        """
        return self._strategyid

    @strategyid.setter
    def strategyid(self, strategyid):
        """Sets the strategyid of this Task.


        :param strategyid: The strategyid of this Task.
        :type strategyid: str
        """

        self._strategyid = strategyid

    @property
    def taskid(self):
        """Gets the taskid of this Task.


        :return: The taskid of this Task.
        :rtype: str
        """
        return self._taskid

    @taskid.setter
    def taskid(self, taskid):
        """Sets the taskid of this Task.


        :param taskid: The taskid of this Task.
        :type taskid: str
        """

        self._taskid = taskid

    @property
    def usestaticdata(self):
        """Gets the usestaticdata of this Task.


        :return: The usestaticdata of this Task.
        :rtype: str
        """
        return self._usestaticdata

    @usestaticdata.setter
    def usestaticdata(self, usestaticdata):
        """Sets the usestaticdata of this Task.


        :param usestaticdata: The usestaticdata of this Task.
        :type usestaticdata: str
        """

        self._usestaticdata = usestaticdata
