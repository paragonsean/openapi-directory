# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewSignal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, position: str=None, price: str=None, shares: str=None, size: str=None, symbol: str=None, timestamp: datetime=None, type: str=None):
        """NewSignal - a model defined in OpenAPI

        :param position: The position of this NewSignal.
        :param price: The price of this NewSignal.
        :param shares: The shares of this NewSignal.
        :param size: The size of this NewSignal.
        :param symbol: The symbol of this NewSignal.
        :param timestamp: The timestamp of this NewSignal.
        :param type: The type of this NewSignal.
        """
        self.openapi_types = {
            'position': str,
            'price': str,
            'shares': str,
            'size': str,
            'symbol': str,
            'timestamp': datetime,
            'type': str
        }

        self.attribute_map = {
            'position': 'position',
            'price': 'price',
            'shares': 'shares',
            'size': 'size',
            'symbol': 'symbol',
            'timestamp': 'timestamp',
            'type': 'type'
        }

        self._position = position
        self._price = price
        self._shares = shares
        self._size = size
        self._symbol = symbol
        self._timestamp = timestamp
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewSignal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewSignal of this NewSignal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def position(self):
        """Gets the position of this NewSignal.


        :return: The position of this NewSignal.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NewSignal.


        :param position: The position of this NewSignal.
        :type position: str
        """

        self._position = position

    @property
    def price(self):
        """Gets the price of this NewSignal.


        :return: The price of this NewSignal.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this NewSignal.


        :param price: The price of this NewSignal.
        :type price: str
        """

        self._price = price

    @property
    def shares(self):
        """Gets the shares of this NewSignal.


        :return: The shares of this NewSignal.
        :rtype: str
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this NewSignal.


        :param shares: The shares of this NewSignal.
        :type shares: str
        """

        self._shares = shares

    @property
    def size(self):
        """Gets the size of this NewSignal.


        :return: The size of this NewSignal.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NewSignal.


        :param size: The size of this NewSignal.
        :type size: str
        """

        self._size = size

    @property
    def symbol(self):
        """Gets the symbol of this NewSignal.


        :return: The symbol of this NewSignal.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this NewSignal.


        :param symbol: The symbol of this NewSignal.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def timestamp(self):
        """Gets the timestamp of this NewSignal.


        :return: The timestamp of this NewSignal.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this NewSignal.


        :param timestamp: The timestamp of this NewSignal.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this NewSignal.


        :return: The type of this NewSignal.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewSignal.


        :param type: The type of this NewSignal.
        :type type: str
        """

        self._type = type
