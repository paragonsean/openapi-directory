# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.longentry import Longentry
from openapi_server.models.longexit import Longexit
from openapi_server import util


class Rules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, longentry: List[Longentry]=None, longexit: List[Longexit]=None):
        """Rules - a model defined in OpenAPI

        :param longentry: The longentry of this Rules.
        :param longexit: The longexit of this Rules.
        """
        self.openapi_types = {
            'longentry': List[Longentry],
            'longexit': List[Longexit]
        }

        self.attribute_map = {
            'longentry': 'longentry',
            'longexit': 'longexit'
        }

        self._longentry = longentry
        self._longexit = longexit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rules of this Rules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def longentry(self):
        """Gets the longentry of this Rules.


        :return: The longentry of this Rules.
        :rtype: List[Longentry]
        """
        return self._longentry

    @longentry.setter
    def longentry(self, longentry):
        """Sets the longentry of this Rules.


        :param longentry: The longentry of this Rules.
        :type longentry: List[Longentry]
        """

        self._longentry = longentry

    @property
    def longexit(self):
        """Gets the longexit of this Rules.


        :return: The longexit of this Rules.
        :rtype: List[Longexit]
        """
        return self._longexit

    @longexit.setter
    def longexit(self, longexit):
        """Sets the longexit of this Rules.


        :param longexit: The longexit of this Rules.
        :type longexit: List[Longexit]
        """

        self._longexit = longexit
