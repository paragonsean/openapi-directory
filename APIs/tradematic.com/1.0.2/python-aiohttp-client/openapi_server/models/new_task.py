# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, isbenchmark: str=None, strategyid: str=None, tasktypeid: str=None, userid2: str=None):
        """NewTask - a model defined in OpenAPI

        :param isbenchmark: The isbenchmark of this NewTask.
        :param strategyid: The strategyid of this NewTask.
        :param tasktypeid: The tasktypeid of this NewTask.
        :param userid2: The userid2 of this NewTask.
        """
        self.openapi_types = {
            'isbenchmark': str,
            'strategyid': str,
            'tasktypeid': str,
            'userid2': str
        }

        self.attribute_map = {
            'isbenchmark': 'isbenchmark',
            'strategyid': 'strategyid',
            'tasktypeid': 'tasktypeid',
            'userid2': 'userid2'
        }

        self._isbenchmark = isbenchmark
        self._strategyid = strategyid
        self._tasktypeid = tasktypeid
        self._userid2 = userid2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewTask of this NewTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def isbenchmark(self):
        """Gets the isbenchmark of this NewTask.


        :return: The isbenchmark of this NewTask.
        :rtype: str
        """
        return self._isbenchmark

    @isbenchmark.setter
    def isbenchmark(self, isbenchmark):
        """Sets the isbenchmark of this NewTask.


        :param isbenchmark: The isbenchmark of this NewTask.
        :type isbenchmark: str
        """

        self._isbenchmark = isbenchmark

    @property
    def strategyid(self):
        """Gets the strategyid of this NewTask.


        :return: The strategyid of this NewTask.
        :rtype: str
        """
        return self._strategyid

    @strategyid.setter
    def strategyid(self, strategyid):
        """Sets the strategyid of this NewTask.


        :param strategyid: The strategyid of this NewTask.
        :type strategyid: str
        """

        self._strategyid = strategyid

    @property
    def tasktypeid(self):
        """Gets the tasktypeid of this NewTask.


        :return: The tasktypeid of this NewTask.
        :rtype: str
        """
        return self._tasktypeid

    @tasktypeid.setter
    def tasktypeid(self, tasktypeid):
        """Sets the tasktypeid of this NewTask.


        :param tasktypeid: The tasktypeid of this NewTask.
        :type tasktypeid: str
        """

        self._tasktypeid = tasktypeid

    @property
    def userid2(self):
        """Gets the userid2 of this NewTask.


        :return: The userid2 of this NewTask.
        :rtype: str
        """
        return self._userid2

    @userid2.setter
    def userid2(self, userid2):
        """Sets the userid2 of this NewTask.


        :param userid2: The userid2 of this NewTask.
        :type userid2: str
        """

        self._userid2 = userid2
