# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BacktestTrade(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barsheld: str=None, changepct: str=None, commission: str=None, entrydatetime: str=None, entryprice: str=None, entrysignal: str=None, exitdatetime: str=None, exitprice: str=None, exitsignal: str=None, mae: str=None, mfe: str=None, pandl: str=None, position: str=None, shares: str=None, size: str=None, symbol: str=None):
        """BacktestTrade - a model defined in OpenAPI

        :param barsheld: The barsheld of this BacktestTrade.
        :param changepct: The changepct of this BacktestTrade.
        :param commission: The commission of this BacktestTrade.
        :param entrydatetime: The entrydatetime of this BacktestTrade.
        :param entryprice: The entryprice of this BacktestTrade.
        :param entrysignal: The entrysignal of this BacktestTrade.
        :param exitdatetime: The exitdatetime of this BacktestTrade.
        :param exitprice: The exitprice of this BacktestTrade.
        :param exitsignal: The exitsignal of this BacktestTrade.
        :param mae: The mae of this BacktestTrade.
        :param mfe: The mfe of this BacktestTrade.
        :param pandl: The pandl of this BacktestTrade.
        :param position: The position of this BacktestTrade.
        :param shares: The shares of this BacktestTrade.
        :param size: The size of this BacktestTrade.
        :param symbol: The symbol of this BacktestTrade.
        """
        self.openapi_types = {
            'barsheld': str,
            'changepct': str,
            'commission': str,
            'entrydatetime': str,
            'entryprice': str,
            'entrysignal': str,
            'exitdatetime': str,
            'exitprice': str,
            'exitsignal': str,
            'mae': str,
            'mfe': str,
            'pandl': str,
            'position': str,
            'shares': str,
            'size': str,
            'symbol': str
        }

        self.attribute_map = {
            'barsheld': 'barsheld',
            'changepct': 'changepct',
            'commission': 'commission',
            'entrydatetime': 'entrydatetime',
            'entryprice': 'entryprice',
            'entrysignal': 'entrysignal',
            'exitdatetime': 'exitdatetime',
            'exitprice': 'exitprice',
            'exitsignal': 'exitsignal',
            'mae': 'mae',
            'mfe': 'mfe',
            'pandl': 'pandl',
            'position': 'position',
            'shares': 'shares',
            'size': 'size',
            'symbol': 'symbol'
        }

        self._barsheld = barsheld
        self._changepct = changepct
        self._commission = commission
        self._entrydatetime = entrydatetime
        self._entryprice = entryprice
        self._entrysignal = entrysignal
        self._exitdatetime = exitdatetime
        self._exitprice = exitprice
        self._exitsignal = exitsignal
        self._mae = mae
        self._mfe = mfe
        self._pandl = pandl
        self._position = position
        self._shares = shares
        self._size = size
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BacktestTrade':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BacktestTrade of this BacktestTrade.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barsheld(self):
        """Gets the barsheld of this BacktestTrade.


        :return: The barsheld of this BacktestTrade.
        :rtype: str
        """
        return self._barsheld

    @barsheld.setter
    def barsheld(self, barsheld):
        """Sets the barsheld of this BacktestTrade.


        :param barsheld: The barsheld of this BacktestTrade.
        :type barsheld: str
        """

        self._barsheld = barsheld

    @property
    def changepct(self):
        """Gets the changepct of this BacktestTrade.


        :return: The changepct of this BacktestTrade.
        :rtype: str
        """
        return self._changepct

    @changepct.setter
    def changepct(self, changepct):
        """Sets the changepct of this BacktestTrade.


        :param changepct: The changepct of this BacktestTrade.
        :type changepct: str
        """

        self._changepct = changepct

    @property
    def commission(self):
        """Gets the commission of this BacktestTrade.


        :return: The commission of this BacktestTrade.
        :rtype: str
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this BacktestTrade.


        :param commission: The commission of this BacktestTrade.
        :type commission: str
        """

        self._commission = commission

    @property
    def entrydatetime(self):
        """Gets the entrydatetime of this BacktestTrade.


        :return: The entrydatetime of this BacktestTrade.
        :rtype: str
        """
        return self._entrydatetime

    @entrydatetime.setter
    def entrydatetime(self, entrydatetime):
        """Sets the entrydatetime of this BacktestTrade.


        :param entrydatetime: The entrydatetime of this BacktestTrade.
        :type entrydatetime: str
        """

        self._entrydatetime = entrydatetime

    @property
    def entryprice(self):
        """Gets the entryprice of this BacktestTrade.


        :return: The entryprice of this BacktestTrade.
        :rtype: str
        """
        return self._entryprice

    @entryprice.setter
    def entryprice(self, entryprice):
        """Sets the entryprice of this BacktestTrade.


        :param entryprice: The entryprice of this BacktestTrade.
        :type entryprice: str
        """

        self._entryprice = entryprice

    @property
    def entrysignal(self):
        """Gets the entrysignal of this BacktestTrade.


        :return: The entrysignal of this BacktestTrade.
        :rtype: str
        """
        return self._entrysignal

    @entrysignal.setter
    def entrysignal(self, entrysignal):
        """Sets the entrysignal of this BacktestTrade.


        :param entrysignal: The entrysignal of this BacktestTrade.
        :type entrysignal: str
        """

        self._entrysignal = entrysignal

    @property
    def exitdatetime(self):
        """Gets the exitdatetime of this BacktestTrade.


        :return: The exitdatetime of this BacktestTrade.
        :rtype: str
        """
        return self._exitdatetime

    @exitdatetime.setter
    def exitdatetime(self, exitdatetime):
        """Sets the exitdatetime of this BacktestTrade.


        :param exitdatetime: The exitdatetime of this BacktestTrade.
        :type exitdatetime: str
        """

        self._exitdatetime = exitdatetime

    @property
    def exitprice(self):
        """Gets the exitprice of this BacktestTrade.


        :return: The exitprice of this BacktestTrade.
        :rtype: str
        """
        return self._exitprice

    @exitprice.setter
    def exitprice(self, exitprice):
        """Sets the exitprice of this BacktestTrade.


        :param exitprice: The exitprice of this BacktestTrade.
        :type exitprice: str
        """

        self._exitprice = exitprice

    @property
    def exitsignal(self):
        """Gets the exitsignal of this BacktestTrade.


        :return: The exitsignal of this BacktestTrade.
        :rtype: str
        """
        return self._exitsignal

    @exitsignal.setter
    def exitsignal(self, exitsignal):
        """Sets the exitsignal of this BacktestTrade.


        :param exitsignal: The exitsignal of this BacktestTrade.
        :type exitsignal: str
        """

        self._exitsignal = exitsignal

    @property
    def mae(self):
        """Gets the mae of this BacktestTrade.


        :return: The mae of this BacktestTrade.
        :rtype: str
        """
        return self._mae

    @mae.setter
    def mae(self, mae):
        """Sets the mae of this BacktestTrade.


        :param mae: The mae of this BacktestTrade.
        :type mae: str
        """

        self._mae = mae

    @property
    def mfe(self):
        """Gets the mfe of this BacktestTrade.


        :return: The mfe of this BacktestTrade.
        :rtype: str
        """
        return self._mfe

    @mfe.setter
    def mfe(self, mfe):
        """Sets the mfe of this BacktestTrade.


        :param mfe: The mfe of this BacktestTrade.
        :type mfe: str
        """

        self._mfe = mfe

    @property
    def pandl(self):
        """Gets the pandl of this BacktestTrade.


        :return: The pandl of this BacktestTrade.
        :rtype: str
        """
        return self._pandl

    @pandl.setter
    def pandl(self, pandl):
        """Sets the pandl of this BacktestTrade.


        :param pandl: The pandl of this BacktestTrade.
        :type pandl: str
        """

        self._pandl = pandl

    @property
    def position(self):
        """Gets the position of this BacktestTrade.


        :return: The position of this BacktestTrade.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BacktestTrade.


        :param position: The position of this BacktestTrade.
        :type position: str
        """

        self._position = position

    @property
    def shares(self):
        """Gets the shares of this BacktestTrade.


        :return: The shares of this BacktestTrade.
        :rtype: str
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this BacktestTrade.


        :param shares: The shares of this BacktestTrade.
        :type shares: str
        """

        self._shares = shares

    @property
    def size(self):
        """Gets the size of this BacktestTrade.


        :return: The size of this BacktestTrade.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BacktestTrade.


        :param size: The size of this BacktestTrade.
        :type size: str
        """

        self._size = size

    @property
    def symbol(self):
        """Gets the symbol of this BacktestTrade.


        :return: The symbol of this BacktestTrade.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this BacktestTrade.


        :param symbol: The symbol of this BacktestTrade.
        :type symbol: str
        """

        self._symbol = symbol
