# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.result import Result
from openapi_server import util


class MarketdataSymbolsSymbolidHistdataGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjusted: bool=None, query_count: int=None, results: List[Result]=None, results_count: int=None, status: str=None, ticker: str=None):
        """MarketdataSymbolsSymbolidHistdataGet200Response - a model defined in OpenAPI

        :param adjusted: The adjusted of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :param query_count: The query_count of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :param results: The results of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :param results_count: The results_count of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :param status: The status of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :param ticker: The ticker of this MarketdataSymbolsSymbolidHistdataGet200Response.
        """
        self.openapi_types = {
            'adjusted': bool,
            'query_count': int,
            'results': List[Result],
            'results_count': int,
            'status': str,
            'ticker': str
        }

        self.attribute_map = {
            'adjusted': 'adjusted',
            'query_count': 'queryCount',
            'results': 'results',
            'results_count': 'resultsCount',
            'status': 'status',
            'ticker': 'ticker'
        }

        self._adjusted = adjusted
        self._query_count = query_count
        self._results = results
        self._results_count = results_count
        self._status = status
        self._ticker = ticker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketdataSymbolsSymbolidHistdataGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _marketdata_symbols__symbolid__histdata_get_200_response of this MarketdataSymbolsSymbolidHistdataGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjusted(self):
        """Gets the adjusted of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :return: The adjusted of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :rtype: bool
        """
        return self._adjusted

    @adjusted.setter
    def adjusted(self, adjusted):
        """Sets the adjusted of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :param adjusted: The adjusted of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :type adjusted: bool
        """

        self._adjusted = adjusted

    @property
    def query_count(self):
        """Gets the query_count of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :return: The query_count of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :rtype: int
        """
        return self._query_count

    @query_count.setter
    def query_count(self, query_count):
        """Sets the query_count of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :param query_count: The query_count of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :type query_count: int
        """

        self._query_count = query_count

    @property
    def results(self):
        """Gets the results of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :return: The results of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :rtype: List[Result]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :param results: The results of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :type results: List[Result]
        """

        self._results = results

    @property
    def results_count(self):
        """Gets the results_count of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :return: The results_count of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :rtype: int
        """
        return self._results_count

    @results_count.setter
    def results_count(self, results_count):
        """Sets the results_count of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :param results_count: The results_count of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :type results_count: int
        """

        self._results_count = results_count

    @property
    def status(self):
        """Gets the status of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :return: The status of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :param status: The status of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :type status: str
        """

        self._status = status

    @property
    def ticker(self):
        """Gets the ticker of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :return: The ticker of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this MarketdataSymbolsSymbolidHistdataGet200Response.


        :param ticker: The ticker of this MarketdataSymbolsSymbolidHistdataGet200Response.
        :type ticker: str
        """

        self._ticker = ticker
