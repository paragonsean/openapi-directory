# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pandl: str=None, share: str=None, symbol: str=None):
        """Contribution - a model defined in OpenAPI

        :param pandl: The pandl of this Contribution.
        :param share: The share of this Contribution.
        :param symbol: The symbol of this Contribution.
        """
        self.openapi_types = {
            'pandl': str,
            'share': str,
            'symbol': str
        }

        self.attribute_map = {
            'pandl': 'pandl',
            'share': 'share',
            'symbol': 'symbol'
        }

        self._pandl = pandl
        self._share = share
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contribution of this Contribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pandl(self):
        """Gets the pandl of this Contribution.


        :return: The pandl of this Contribution.
        :rtype: str
        """
        return self._pandl

    @pandl.setter
    def pandl(self, pandl):
        """Sets the pandl of this Contribution.


        :param pandl: The pandl of this Contribution.
        :type pandl: str
        """

        self._pandl = pandl

    @property
    def share(self):
        """Gets the share of this Contribution.


        :return: The share of this Contribution.
        :rtype: str
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this Contribution.


        :param share: The share of this Contribution.
        :type share: str
        """

        self._share = share

    @property
    def symbol(self):
        """Gets the symbol of this Contribution.


        :return: The symbol of this Contribution.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Contribution.


        :param symbol: The symbol of this Contribution.
        :type symbol: str
        """

        self._symbol = symbol
