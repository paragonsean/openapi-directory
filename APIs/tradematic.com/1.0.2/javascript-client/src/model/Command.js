/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Command model module.
 * @module model/Command
 * @version 1.0.2
 */
class Command {
    /**
     * Constructs a new <code>Command</code>.
     * @alias module:model/Command
     */
    constructor() { 
        
        Command.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Command</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Command} obj Optional instance to populate.
     * @return {module:model/Command} The populated <code>Command</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Command();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('accountid')) {
                obj['accountid'] = ApiClient.convertToType(data['accountid'], 'String');
            }
            if (data.hasOwnProperty('commanddate')) {
                obj['commanddate'] = ApiClient.convertToType(data['commanddate'], 'Date');
            }
            if (data.hasOwnProperty('commandid')) {
                obj['commandid'] = ApiClient.convertToType(data['commandid'], 'String');
            }
            if (data.hasOwnProperty('commandstatusname')) {
                obj['commandstatusname'] = ApiClient.convertToType(data['commandstatusname'], 'String');
            }
            if (data.hasOwnProperty('commandtypename')) {
                obj['commandtypename'] = ApiClient.convertToType(data['commandtypename'], 'String');
            }
            if (data.hasOwnProperty('computer')) {
                obj['computer'] = ApiClient.convertToType(data['computer'], 'String');
            }
            if (data.hasOwnProperty('hwid')) {
                obj['hwid'] = ApiClient.convertToType(data['hwid'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Command</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Command</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['accountid'] && !(typeof data['accountid'] === 'string' || data['accountid'] instanceof String)) {
            throw new Error("Expected the field `accountid` to be a primitive type in the JSON string but got " + data['accountid']);
        }
        // ensure the json data is a string
        if (data['commandid'] && !(typeof data['commandid'] === 'string' || data['commandid'] instanceof String)) {
            throw new Error("Expected the field `commandid` to be a primitive type in the JSON string but got " + data['commandid']);
        }
        // ensure the json data is a string
        if (data['commandstatusname'] && !(typeof data['commandstatusname'] === 'string' || data['commandstatusname'] instanceof String)) {
            throw new Error("Expected the field `commandstatusname` to be a primitive type in the JSON string but got " + data['commandstatusname']);
        }
        // ensure the json data is a string
        if (data['commandtypename'] && !(typeof data['commandtypename'] === 'string' || data['commandtypename'] instanceof String)) {
            throw new Error("Expected the field `commandtypename` to be a primitive type in the JSON string but got " + data['commandtypename']);
        }
        // ensure the json data is a string
        if (data['computer'] && !(typeof data['computer'] === 'string' || data['computer'] instanceof String)) {
            throw new Error("Expected the field `computer` to be a primitive type in the JSON string but got " + data['computer']);
        }
        // ensure the json data is a string
        if (data['hwid'] && !(typeof data['hwid'] === 'string' || data['hwid'] instanceof String)) {
            throw new Error("Expected the field `hwid` to be a primitive type in the JSON string but got " + data['hwid']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} account
 */
Command.prototype['account'] = undefined;

/**
 * @member {String} accountid
 */
Command.prototype['accountid'] = undefined;

/**
 * @member {Date} commanddate
 */
Command.prototype['commanddate'] = undefined;

/**
 * @member {String} commandid
 */
Command.prototype['commandid'] = undefined;

/**
 * @member {String} commandstatusname
 */
Command.prototype['commandstatusname'] = undefined;

/**
 * @member {String} commandtypename
 */
Command.prototype['commandtypename'] = undefined;

/**
 * @member {String} computer
 */
Command.prototype['computer'] = undefined;

/**
 * @member {String} hwid
 */
Command.prototype['hwid'] = undefined;

/**
 * @member {String} message
 */
Command.prototype['message'] = undefined;

/**
 * @member {Object.<String, String>} parameters
 */
Command.prototype['parameters'] = undefined;

/**
 * @member {String} status
 */
Command.prototype['status'] = undefined;

/**
 * @member {Date} timestamp
 */
Command.prototype['timestamp'] = undefined;

/**
 * @member {String} type
 */
Command.prototype['type'] = undefined;






export default Command;

