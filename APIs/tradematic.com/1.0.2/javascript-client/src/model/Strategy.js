/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Rules from './Rules';
import Taskresult from './Taskresult';

/**
 * The Strategy model module.
 * @module model/Strategy
 * @version 1.0.2
 */
class Strategy {
    /**
     * Constructs a new <code>Strategy</code>.
     * @alias module:model/Strategy
     */
    constructor() { 
        
        Strategy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Strategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Strategy} obj Optional instance to populate.
     * @return {module:model/Strategy} The populated <code>Strategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Strategy();

            if (data.hasOwnProperty('apr')) {
                obj['apr'] = ApiClient.convertToType(data['apr'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('brokername')) {
                obj['brokername'] = ApiClient.convertToType(data['brokername'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('datascale')) {
                obj['datascale'] = ApiClient.convertToType(data['datascale'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('drawdown')) {
                obj['drawdown'] = ApiClient.convertToType(data['drawdown'], 'String');
            }
            if (data.hasOwnProperty('folder')) {
                obj['folder'] = ApiClient.convertToType(data['folder'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('limitorder')) {
                obj['limitorder'] = ApiClient.convertToType(data['limitorder'], 'String');
            }
            if (data.hasOwnProperty('marketname')) {
                obj['marketname'] = ApiClient.convertToType(data['marketname'], 'String');
            }
            if (data.hasOwnProperty('multiposition')) {
                obj['multiposition'] = ApiClient.convertToType(data['multiposition'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], 'String');
            }
            if (data.hasOwnProperty('positionsize')) {
                obj['positionsize'] = ApiClient.convertToType(data['positionsize'], 'String');
            }
            if (data.hasOwnProperty('risklevelcode')) {
                obj['risklevelcode'] = ApiClient.convertToType(data['risklevelcode'], 'String');
            }
            if (data.hasOwnProperty('risklevelid')) {
                obj['risklevelid'] = ApiClient.convertToType(data['risklevelid'], 'String');
            }
            if (data.hasOwnProperty('risklevelname')) {
                obj['risklevelname'] = ApiClient.convertToType(data['risklevelname'], 'String');
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = Rules.constructFromObject(data['rules']);
            }
            if (data.hasOwnProperty('strategyid')) {
                obj['strategyid'] = ApiClient.convertToType(data['strategyid'], 'String');
            }
            if (data.hasOwnProperty('strategytypeid')) {
                obj['strategytypeid'] = ApiClient.convertToType(data['strategytypeid'], 'String');
            }
            if (data.hasOwnProperty('symbols')) {
                obj['symbols'] = ApiClient.convertToType(data['symbols'], ['String']);
            }
            if (data.hasOwnProperty('taskfolder')) {
                obj['taskfolder'] = ApiClient.convertToType(data['taskfolder'], 'String');
            }
            if (data.hasOwnProperty('taskid')) {
                obj['taskid'] = ApiClient.convertToType(data['taskid'], 'String');
            }
            if (data.hasOwnProperty('taskresult')) {
                obj['taskresult'] = Taskresult.constructFromObject(data['taskresult']);
            }
            if (data.hasOwnProperty('timeframe')) {
                obj['timeframe'] = ApiClient.convertToType(data['timeframe'], 'String');
            }
            if (data.hasOwnProperty('updatedate')) {
                obj['updatedate'] = ApiClient.convertToType(data['updatedate'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Strategy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Strategy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apr'] && !(typeof data['apr'] === 'string' || data['apr'] instanceof String)) {
            throw new Error("Expected the field `apr` to be a primitive type in the JSON string but got " + data['apr']);
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['brokername'] && !(typeof data['brokername'] === 'string' || data['brokername'] instanceof String)) {
            throw new Error("Expected the field `brokername` to be a primitive type in the JSON string but got " + data['brokername']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['datascale'] && !(typeof data['datascale'] === 'string' || data['datascale'] instanceof String)) {
            throw new Error("Expected the field `datascale` to be a primitive type in the JSON string but got " + data['datascale']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['drawdown'] && !(typeof data['drawdown'] === 'string' || data['drawdown'] instanceof String)) {
            throw new Error("Expected the field `drawdown` to be a primitive type in the JSON string but got " + data['drawdown']);
        }
        // ensure the json data is a string
        if (data['folder'] && !(typeof data['folder'] === 'string' || data['folder'] instanceof String)) {
            throw new Error("Expected the field `folder` to be a primitive type in the JSON string but got " + data['folder']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['limitorder'] && !(typeof data['limitorder'] === 'string' || data['limitorder'] instanceof String)) {
            throw new Error("Expected the field `limitorder` to be a primitive type in the JSON string but got " + data['limitorder']);
        }
        // ensure the json data is a string
        if (data['marketname'] && !(typeof data['marketname'] === 'string' || data['marketname'] instanceof String)) {
            throw new Error("Expected the field `marketname` to be a primitive type in the JSON string but got " + data['marketname']);
        }
        // ensure the json data is a string
        if (data['multiposition'] && !(typeof data['multiposition'] === 'string' || data['multiposition'] instanceof String)) {
            throw new Error("Expected the field `multiposition` to be a primitive type in the JSON string but got " + data['multiposition']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['permissions'] && !(typeof data['permissions'] === 'string' || data['permissions'] instanceof String)) {
            throw new Error("Expected the field `permissions` to be a primitive type in the JSON string but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['positionsize'] && !(typeof data['positionsize'] === 'string' || data['positionsize'] instanceof String)) {
            throw new Error("Expected the field `positionsize` to be a primitive type in the JSON string but got " + data['positionsize']);
        }
        // ensure the json data is a string
        if (data['risklevelcode'] && !(typeof data['risklevelcode'] === 'string' || data['risklevelcode'] instanceof String)) {
            throw new Error("Expected the field `risklevelcode` to be a primitive type in the JSON string but got " + data['risklevelcode']);
        }
        // ensure the json data is a string
        if (data['risklevelid'] && !(typeof data['risklevelid'] === 'string' || data['risklevelid'] instanceof String)) {
            throw new Error("Expected the field `risklevelid` to be a primitive type in the JSON string but got " + data['risklevelid']);
        }
        // ensure the json data is a string
        if (data['risklevelname'] && !(typeof data['risklevelname'] === 'string' || data['risklevelname'] instanceof String)) {
            throw new Error("Expected the field `risklevelname` to be a primitive type in the JSON string but got " + data['risklevelname']);
        }
        // validate the optional field `rules`
        if (data['rules']) { // data not null
          Rules.validateJSON(data['rules']);
        }
        // ensure the json data is a string
        if (data['strategyid'] && !(typeof data['strategyid'] === 'string' || data['strategyid'] instanceof String)) {
            throw new Error("Expected the field `strategyid` to be a primitive type in the JSON string but got " + data['strategyid']);
        }
        // ensure the json data is a string
        if (data['strategytypeid'] && !(typeof data['strategytypeid'] === 'string' || data['strategytypeid'] instanceof String)) {
            throw new Error("Expected the field `strategytypeid` to be a primitive type in the JSON string but got " + data['strategytypeid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['symbols'])) {
            throw new Error("Expected the field `symbols` to be an array in the JSON data but got " + data['symbols']);
        }
        // ensure the json data is a string
        if (data['taskfolder'] && !(typeof data['taskfolder'] === 'string' || data['taskfolder'] instanceof String)) {
            throw new Error("Expected the field `taskfolder` to be a primitive type in the JSON string but got " + data['taskfolder']);
        }
        // ensure the json data is a string
        if (data['taskid'] && !(typeof data['taskid'] === 'string' || data['taskid'] instanceof String)) {
            throw new Error("Expected the field `taskid` to be a primitive type in the JSON string but got " + data['taskid']);
        }
        // validate the optional field `taskresult`
        if (data['taskresult']) { // data not null
          Taskresult.validateJSON(data['taskresult']);
        }
        // ensure the json data is a string
        if (data['timeframe'] && !(typeof data['timeframe'] === 'string' || data['timeframe'] instanceof String)) {
            throw new Error("Expected the field `timeframe` to be a primitive type in the JSON string but got " + data['timeframe']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} apr
 */
Strategy.prototype['apr'] = undefined;

/**
 * @member {String} author
 */
Strategy.prototype['author'] = undefined;

/**
 * @member {String} brokername
 */
Strategy.prototype['brokername'] = undefined;

/**
 * @member {String} code
 */
Strategy.prototype['code'] = undefined;

/**
 * @member {String} datascale
 */
Strategy.prototype['datascale'] = undefined;

/**
 * @member {String} description
 */
Strategy.prototype['description'] = undefined;

/**
 * @member {String} drawdown
 */
Strategy.prototype['drawdown'] = undefined;

/**
 * @member {String} folder
 */
Strategy.prototype['folder'] = undefined;

/**
 * @member {String} guid
 */
Strategy.prototype['guid'] = undefined;

/**
 * @member {String} image
 */
Strategy.prototype['image'] = undefined;

/**
 * @member {String} limitorder
 */
Strategy.prototype['limitorder'] = undefined;

/**
 * @member {String} marketname
 */
Strategy.prototype['marketname'] = undefined;

/**
 * @member {String} multiposition
 */
Strategy.prototype['multiposition'] = undefined;

/**
 * @member {String} name
 */
Strategy.prototype['name'] = undefined;

/**
 * @member {String} owner
 */
Strategy.prototype['owner'] = undefined;

/**
 * @member {String} permissions
 */
Strategy.prototype['permissions'] = undefined;

/**
 * @member {String} positionsize
 */
Strategy.prototype['positionsize'] = undefined;

/**
 * @member {String} risklevelcode
 */
Strategy.prototype['risklevelcode'] = undefined;

/**
 * @member {String} risklevelid
 */
Strategy.prototype['risklevelid'] = undefined;

/**
 * @member {String} risklevelname
 */
Strategy.prototype['risklevelname'] = undefined;

/**
 * @member {module:model/Rules} rules
 */
Strategy.prototype['rules'] = undefined;

/**
 * @member {String} strategyid
 */
Strategy.prototype['strategyid'] = undefined;

/**
 * @member {String} strategytypeid
 */
Strategy.prototype['strategytypeid'] = undefined;

/**
 * @member {Array.<String>} symbols
 */
Strategy.prototype['symbols'] = undefined;

/**
 * @member {String} taskfolder
 */
Strategy.prototype['taskfolder'] = undefined;

/**
 * @member {String} taskid
 */
Strategy.prototype['taskid'] = undefined;

/**
 * @member {module:model/Taskresult} taskresult
 */
Strategy.prototype['taskresult'] = undefined;

/**
 * @member {String} timeframe
 */
Strategy.prototype['timeframe'] = undefined;

/**
 * @member {Date} updatedate
 */
Strategy.prototype['updatedate'] = undefined;

/**
 * @member {String} url
 */
Strategy.prototype['url'] = undefined;






export default Strategy;

