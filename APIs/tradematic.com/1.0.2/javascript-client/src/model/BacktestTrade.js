/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BacktestTrade model module.
 * @module model/BacktestTrade
 * @version 1.0.2
 */
class BacktestTrade {
    /**
     * Constructs a new <code>BacktestTrade</code>.
     * @alias module:model/BacktestTrade
     */
    constructor() { 
        
        BacktestTrade.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BacktestTrade</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BacktestTrade} obj Optional instance to populate.
     * @return {module:model/BacktestTrade} The populated <code>BacktestTrade</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BacktestTrade();

            if (data.hasOwnProperty('barsheld')) {
                obj['barsheld'] = ApiClient.convertToType(data['barsheld'], 'String');
            }
            if (data.hasOwnProperty('changepct')) {
                obj['changepct'] = ApiClient.convertToType(data['changepct'], 'String');
            }
            if (data.hasOwnProperty('commission')) {
                obj['commission'] = ApiClient.convertToType(data['commission'], 'String');
            }
            if (data.hasOwnProperty('entrydatetime')) {
                obj['entrydatetime'] = ApiClient.convertToType(data['entrydatetime'], 'String');
            }
            if (data.hasOwnProperty('entryprice')) {
                obj['entryprice'] = ApiClient.convertToType(data['entryprice'], 'String');
            }
            if (data.hasOwnProperty('entrysignal')) {
                obj['entrysignal'] = ApiClient.convertToType(data['entrysignal'], 'String');
            }
            if (data.hasOwnProperty('exitdatetime')) {
                obj['exitdatetime'] = ApiClient.convertToType(data['exitdatetime'], 'String');
            }
            if (data.hasOwnProperty('exitprice')) {
                obj['exitprice'] = ApiClient.convertToType(data['exitprice'], 'String');
            }
            if (data.hasOwnProperty('exitsignal')) {
                obj['exitsignal'] = ApiClient.convertToType(data['exitsignal'], 'String');
            }
            if (data.hasOwnProperty('mae')) {
                obj['mae'] = ApiClient.convertToType(data['mae'], 'String');
            }
            if (data.hasOwnProperty('mfe')) {
                obj['mfe'] = ApiClient.convertToType(data['mfe'], 'String');
            }
            if (data.hasOwnProperty('pandl')) {
                obj['pandl'] = ApiClient.convertToType(data['pandl'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('shares')) {
                obj['shares'] = ApiClient.convertToType(data['shares'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BacktestTrade</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BacktestTrade</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['barsheld'] && !(typeof data['barsheld'] === 'string' || data['barsheld'] instanceof String)) {
            throw new Error("Expected the field `barsheld` to be a primitive type in the JSON string but got " + data['barsheld']);
        }
        // ensure the json data is a string
        if (data['changepct'] && !(typeof data['changepct'] === 'string' || data['changepct'] instanceof String)) {
            throw new Error("Expected the field `changepct` to be a primitive type in the JSON string but got " + data['changepct']);
        }
        // ensure the json data is a string
        if (data['commission'] && !(typeof data['commission'] === 'string' || data['commission'] instanceof String)) {
            throw new Error("Expected the field `commission` to be a primitive type in the JSON string but got " + data['commission']);
        }
        // ensure the json data is a string
        if (data['entrydatetime'] && !(typeof data['entrydatetime'] === 'string' || data['entrydatetime'] instanceof String)) {
            throw new Error("Expected the field `entrydatetime` to be a primitive type in the JSON string but got " + data['entrydatetime']);
        }
        // ensure the json data is a string
        if (data['entryprice'] && !(typeof data['entryprice'] === 'string' || data['entryprice'] instanceof String)) {
            throw new Error("Expected the field `entryprice` to be a primitive type in the JSON string but got " + data['entryprice']);
        }
        // ensure the json data is a string
        if (data['entrysignal'] && !(typeof data['entrysignal'] === 'string' || data['entrysignal'] instanceof String)) {
            throw new Error("Expected the field `entrysignal` to be a primitive type in the JSON string but got " + data['entrysignal']);
        }
        // ensure the json data is a string
        if (data['exitdatetime'] && !(typeof data['exitdatetime'] === 'string' || data['exitdatetime'] instanceof String)) {
            throw new Error("Expected the field `exitdatetime` to be a primitive type in the JSON string but got " + data['exitdatetime']);
        }
        // ensure the json data is a string
        if (data['exitprice'] && !(typeof data['exitprice'] === 'string' || data['exitprice'] instanceof String)) {
            throw new Error("Expected the field `exitprice` to be a primitive type in the JSON string but got " + data['exitprice']);
        }
        // ensure the json data is a string
        if (data['exitsignal'] && !(typeof data['exitsignal'] === 'string' || data['exitsignal'] instanceof String)) {
            throw new Error("Expected the field `exitsignal` to be a primitive type in the JSON string but got " + data['exitsignal']);
        }
        // ensure the json data is a string
        if (data['mae'] && !(typeof data['mae'] === 'string' || data['mae'] instanceof String)) {
            throw new Error("Expected the field `mae` to be a primitive type in the JSON string but got " + data['mae']);
        }
        // ensure the json data is a string
        if (data['mfe'] && !(typeof data['mfe'] === 'string' || data['mfe'] instanceof String)) {
            throw new Error("Expected the field `mfe` to be a primitive type in the JSON string but got " + data['mfe']);
        }
        // ensure the json data is a string
        if (data['pandl'] && !(typeof data['pandl'] === 'string' || data['pandl'] instanceof String)) {
            throw new Error("Expected the field `pandl` to be a primitive type in the JSON string but got " + data['pandl']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // ensure the json data is a string
        if (data['shares'] && !(typeof data['shares'] === 'string' || data['shares'] instanceof String)) {
            throw new Error("Expected the field `shares` to be a primitive type in the JSON string but got " + data['shares']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }

        return true;
    }


}



/**
 * @member {String} barsheld
 */
BacktestTrade.prototype['barsheld'] = undefined;

/**
 * @member {String} changepct
 */
BacktestTrade.prototype['changepct'] = undefined;

/**
 * @member {String} commission
 */
BacktestTrade.prototype['commission'] = undefined;

/**
 * @member {String} entrydatetime
 */
BacktestTrade.prototype['entrydatetime'] = undefined;

/**
 * @member {String} entryprice
 */
BacktestTrade.prototype['entryprice'] = undefined;

/**
 * @member {String} entrysignal
 */
BacktestTrade.prototype['entrysignal'] = undefined;

/**
 * @member {String} exitdatetime
 */
BacktestTrade.prototype['exitdatetime'] = undefined;

/**
 * @member {String} exitprice
 */
BacktestTrade.prototype['exitprice'] = undefined;

/**
 * @member {String} exitsignal
 */
BacktestTrade.prototype['exitsignal'] = undefined;

/**
 * @member {String} mae
 */
BacktestTrade.prototype['mae'] = undefined;

/**
 * @member {String} mfe
 */
BacktestTrade.prototype['mfe'] = undefined;

/**
 * @member {String} pandl
 */
BacktestTrade.prototype['pandl'] = undefined;

/**
 * @member {String} position
 */
BacktestTrade.prototype['position'] = undefined;

/**
 * @member {String} shares
 */
BacktestTrade.prototype['shares'] = undefined;

/**
 * @member {String} size
 */
BacktestTrade.prototype['size'] = undefined;

/**
 * @member {String} symbol
 */
BacktestTrade.prototype['symbol'] = undefined;






export default BacktestTrade;

