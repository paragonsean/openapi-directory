/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewTask model module.
 * @module model/NewTask
 * @version 1.0.2
 */
class NewTask {
    /**
     * Constructs a new <code>NewTask</code>.
     * @alias module:model/NewTask
     */
    constructor() { 
        
        NewTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewTask} obj Optional instance to populate.
     * @return {module:model/NewTask} The populated <code>NewTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewTask();

            if (data.hasOwnProperty('isbenchmark')) {
                obj['isbenchmark'] = ApiClient.convertToType(data['isbenchmark'], 'String');
            }
            if (data.hasOwnProperty('strategyid')) {
                obj['strategyid'] = ApiClient.convertToType(data['strategyid'], 'String');
            }
            if (data.hasOwnProperty('tasktypeid')) {
                obj['tasktypeid'] = ApiClient.convertToType(data['tasktypeid'], 'String');
            }
            if (data.hasOwnProperty('userid2')) {
                obj['userid2'] = ApiClient.convertToType(data['userid2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['isbenchmark'] && !(typeof data['isbenchmark'] === 'string' || data['isbenchmark'] instanceof String)) {
            throw new Error("Expected the field `isbenchmark` to be a primitive type in the JSON string but got " + data['isbenchmark']);
        }
        // ensure the json data is a string
        if (data['strategyid'] && !(typeof data['strategyid'] === 'string' || data['strategyid'] instanceof String)) {
            throw new Error("Expected the field `strategyid` to be a primitive type in the JSON string but got " + data['strategyid']);
        }
        // ensure the json data is a string
        if (data['tasktypeid'] && !(typeof data['tasktypeid'] === 'string' || data['tasktypeid'] instanceof String)) {
            throw new Error("Expected the field `tasktypeid` to be a primitive type in the JSON string but got " + data['tasktypeid']);
        }
        // ensure the json data is a string
        if (data['userid2'] && !(typeof data['userid2'] === 'string' || data['userid2'] instanceof String)) {
            throw new Error("Expected the field `userid2` to be a primitive type in the JSON string but got " + data['userid2']);
        }

        return true;
    }


}



/**
 * @member {String} isbenchmark
 */
NewTask.prototype['isbenchmark'] = undefined;

/**
 * @member {String} strategyid
 */
NewTask.prototype['strategyid'] = undefined;

/**
 * @member {String} tasktypeid
 */
NewTask.prototype['tasktypeid'] = undefined;

/**
 * @member {String} userid2
 */
NewTask.prototype['userid2'] = undefined;






export default NewTask;

