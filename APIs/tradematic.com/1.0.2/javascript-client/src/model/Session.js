/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Session model module.
 * @module model/Session
 * @version 1.0.2
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * @alias module:model/Session
     */
    constructor() { 
        
        Session.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('computer')) {
                obj['computer'] = ApiClient.convertToType(data['computer'], 'String');
            }
            if (data.hasOwnProperty('hwid')) {
                obj['hwid'] = ApiClient.convertToType(data['hwid'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('sessionid')) {
                obj['sessionid'] = ApiClient.convertToType(data['sessionid'], 'String');
            }
            if (data.hasOwnProperty('sessionmodename')) {
                obj['sessionmodename'] = ApiClient.convertToType(data['sessionmodename'], 'String');
            }
            if (data.hasOwnProperty('sessionstatusname')) {
                obj['sessionstatusname'] = ApiClient.convertToType(data['sessionstatusname'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userid')) {
                obj['userid'] = ApiClient.convertToType(data['userid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['computer'] && !(typeof data['computer'] === 'string' || data['computer'] instanceof String)) {
            throw new Error("Expected the field `computer` to be a primitive type in the JSON string but got " + data['computer']);
        }
        // ensure the json data is a string
        if (data['hwid'] && !(typeof data['hwid'] === 'string' || data['hwid'] instanceof String)) {
            throw new Error("Expected the field `hwid` to be a primitive type in the JSON string but got " + data['hwid']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['sessionid'] && !(typeof data['sessionid'] === 'string' || data['sessionid'] instanceof String)) {
            throw new Error("Expected the field `sessionid` to be a primitive type in the JSON string but got " + data['sessionid']);
        }
        // ensure the json data is a string
        if (data['sessionmodename'] && !(typeof data['sessionmodename'] === 'string' || data['sessionmodename'] instanceof String)) {
            throw new Error("Expected the field `sessionmodename` to be a primitive type in the JSON string but got " + data['sessionmodename']);
        }
        // ensure the json data is a string
        if (data['sessionstatusname'] && !(typeof data['sessionstatusname'] === 'string' || data['sessionstatusname'] instanceof String)) {
            throw new Error("Expected the field `sessionstatusname` to be a primitive type in the JSON string but got " + data['sessionstatusname']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userid'] && !(typeof data['userid'] === 'string' || data['userid'] instanceof String)) {
            throw new Error("Expected the field `userid` to be a primitive type in the JSON string but got " + data['userid']);
        }

        return true;
    }


}



/**
 * @member {String} computer
 */
Session.prototype['computer'] = undefined;

/**
 * @member {String} hwid
 */
Session.prototype['hwid'] = undefined;

/**
 * @member {String} login
 */
Session.prototype['login'] = undefined;

/**
 * @member {String} mode
 */
Session.prototype['mode'] = undefined;

/**
 * @member {String} sessionid
 */
Session.prototype['sessionid'] = undefined;

/**
 * @member {String} sessionmodename
 */
Session.prototype['sessionmodename'] = undefined;

/**
 * @member {String} sessionstatusname
 */
Session.prototype['sessionstatusname'] = undefined;

/**
 * @member {String} status
 */
Session.prototype['status'] = undefined;

/**
 * @member {Date} timestamp
 */
Session.prototype['timestamp'] = undefined;

/**
 * @member {String} type
 */
Session.prototype['type'] = undefined;

/**
 * @member {String} userid
 */
Session.prototype['userid'] = undefined;






export default Session;

