/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdatedStrategy model module.
 * @module model/UpdatedStrategy
 * @version 1.0.2
 */
class UpdatedStrategy {
    /**
     * Constructs a new <code>UpdatedStrategy</code>.
     * @alias module:model/UpdatedStrategy
     */
    constructor() { 
        
        UpdatedStrategy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdatedStrategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatedStrategy} obj Optional instance to populate.
     * @return {module:model/UpdatedStrategy} The populated <code>UpdatedStrategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatedStrategy();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('limitorder')) {
                obj['limitorder'] = ApiClient.convertToType(data['limitorder'], 'String');
            }
            if (data.hasOwnProperty('marketname')) {
                obj['marketname'] = ApiClient.convertToType(data['marketname'], 'String');
            }
            if (data.hasOwnProperty('multiposition')) {
                obj['multiposition'] = ApiClient.convertToType(data['multiposition'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('symbols')) {
                obj['symbols'] = ApiClient.convertToType(data['symbols'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatedStrategy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatedStrategy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['limitorder'] && !(typeof data['limitorder'] === 'string' || data['limitorder'] instanceof String)) {
            throw new Error("Expected the field `limitorder` to be a primitive type in the JSON string but got " + data['limitorder']);
        }
        // ensure the json data is a string
        if (data['marketname'] && !(typeof data['marketname'] === 'string' || data['marketname'] instanceof String)) {
            throw new Error("Expected the field `marketname` to be a primitive type in the JSON string but got " + data['marketname']);
        }
        // ensure the json data is a string
        if (data['multiposition'] && !(typeof data['multiposition'] === 'string' || data['multiposition'] instanceof String)) {
            throw new Error("Expected the field `multiposition` to be a primitive type in the JSON string but got " + data['multiposition']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['symbols'] && !(typeof data['symbols'] === 'string' || data['symbols'] instanceof String)) {
            throw new Error("Expected the field `symbols` to be a primitive type in the JSON string but got " + data['symbols']);
        }

        return true;
    }


}



/**
 * @member {String} author
 */
UpdatedStrategy.prototype['author'] = undefined;

/**
 * @member {String} description
 */
UpdatedStrategy.prototype['description'] = undefined;

/**
 * @member {String} limitorder
 */
UpdatedStrategy.prototype['limitorder'] = undefined;

/**
 * @member {String} marketname
 */
UpdatedStrategy.prototype['marketname'] = undefined;

/**
 * @member {String} multiposition
 */
UpdatedStrategy.prototype['multiposition'] = undefined;

/**
 * @member {String} name
 */
UpdatedStrategy.prototype['name'] = undefined;

/**
 * @member {String} symbols
 */
UpdatedStrategy.prototype['symbols'] = undefined;






export default UpdatedStrategy;

