/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Connection model module.
 * @module model/Connection
 * @version 1.0.2
 */
class Connection {
    /**
     * Constructs a new <code>Connection</code>.
     * @alias module:model/Connection
     */
    constructor() { 
        
        Connection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Connection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connection} obj Optional instance to populate.
     * @return {module:model/Connection} The populated <code>Connection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connection();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'String');
            }
            if (data.hasOwnProperty('connectionid')) {
                obj['connectionid'] = ApiClient.convertToType(data['connectionid'], 'String');
            }
            if (data.hasOwnProperty('connectionstring')) {
                obj['connectionstring'] = ApiClient.convertToType(data['connectionstring'], 'String');
            }
            if (data.hasOwnProperty('connectorcode')) {
                obj['connectorcode'] = ApiClient.convertToType(data['connectorcode'], 'String');
            }
            if (data.hasOwnProperty('connectorid')) {
                obj['connectorid'] = ApiClient.convertToType(data['connectorid'], 'String');
            }
            if (data.hasOwnProperty('connectorname')) {
                obj['connectorname'] = ApiClient.convertToType(data['connectorname'], 'String');
            }
            if (data.hasOwnProperty('connectortypename')) {
                obj['connectortypename'] = ApiClient.convertToType(data['connectortypename'], 'String');
            }
            if (data.hasOwnProperty('creationdate')) {
                obj['creationdate'] = ApiClient.convertToType(data['creationdate'], 'Date');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'String');
            }
            if (data.hasOwnProperty('sessionid')) {
                obj['sessionid'] = ApiClient.convertToType(data['sessionid'], 'String');
            }
            if (data.hasOwnProperty('updatedate')) {
                obj['updatedate'] = ApiClient.convertToType(data['updatedate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['active'] && !(typeof data['active'] === 'string' || data['active'] instanceof String)) {
            throw new Error("Expected the field `active` to be a primitive type in the JSON string but got " + data['active']);
        }
        // ensure the json data is a string
        if (data['connectionid'] && !(typeof data['connectionid'] === 'string' || data['connectionid'] instanceof String)) {
            throw new Error("Expected the field `connectionid` to be a primitive type in the JSON string but got " + data['connectionid']);
        }
        // ensure the json data is a string
        if (data['connectionstring'] && !(typeof data['connectionstring'] === 'string' || data['connectionstring'] instanceof String)) {
            throw new Error("Expected the field `connectionstring` to be a primitive type in the JSON string but got " + data['connectionstring']);
        }
        // ensure the json data is a string
        if (data['connectorcode'] && !(typeof data['connectorcode'] === 'string' || data['connectorcode'] instanceof String)) {
            throw new Error("Expected the field `connectorcode` to be a primitive type in the JSON string but got " + data['connectorcode']);
        }
        // ensure the json data is a string
        if (data['connectorid'] && !(typeof data['connectorid'] === 'string' || data['connectorid'] instanceof String)) {
            throw new Error("Expected the field `connectorid` to be a primitive type in the JSON string but got " + data['connectorid']);
        }
        // ensure the json data is a string
        if (data['connectorname'] && !(typeof data['connectorname'] === 'string' || data['connectorname'] instanceof String)) {
            throw new Error("Expected the field `connectorname` to be a primitive type in the JSON string but got " + data['connectorname']);
        }
        // ensure the json data is a string
        if (data['connectortypename'] && !(typeof data['connectortypename'] === 'string' || data['connectortypename'] instanceof String)) {
            throw new Error("Expected the field `connectortypename` to be a primitive type in the JSON string but got " + data['connectortypename']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['port'] && !(typeof data['port'] === 'string' || data['port'] instanceof String)) {
            throw new Error("Expected the field `port` to be a primitive type in the JSON string but got " + data['port']);
        }
        // ensure the json data is a string
        if (data['sessionid'] && !(typeof data['sessionid'] === 'string' || data['sessionid'] instanceof String)) {
            throw new Error("Expected the field `sessionid` to be a primitive type in the JSON string but got " + data['sessionid']);
        }

        return true;
    }


}



/**
 * @member {String} active
 */
Connection.prototype['active'] = undefined;

/**
 * @member {String} connectionid
 */
Connection.prototype['connectionid'] = undefined;

/**
 * @member {String} connectionstring
 */
Connection.prototype['connectionstring'] = undefined;

/**
 * @member {String} connectorcode
 */
Connection.prototype['connectorcode'] = undefined;

/**
 * @member {String} connectorid
 */
Connection.prototype['connectorid'] = undefined;

/**
 * @member {String} connectorname
 */
Connection.prototype['connectorname'] = undefined;

/**
 * @member {String} connectortypename
 */
Connection.prototype['connectortypename'] = undefined;

/**
 * @member {Date} creationdate
 */
Connection.prototype['creationdate'] = undefined;

/**
 * @member {String} host
 */
Connection.prototype['host'] = undefined;

/**
 * @member {String} login
 */
Connection.prototype['login'] = undefined;

/**
 * @member {String} password
 */
Connection.prototype['password'] = undefined;

/**
 * @member {String} port
 */
Connection.prototype['port'] = undefined;

/**
 * @member {String} sessionid
 */
Connection.prototype['sessionid'] = undefined;

/**
 * @member {Date} updatedate
 */
Connection.prototype['updatedate'] = undefined;






export default Connection;

