/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Snapshot model module.
 * @module model/Snapshot
 * @version 1.0.2
 */
class Snapshot {
    /**
     * Constructs a new <code>Snapshot</code>.
     * @alias module:model/Snapshot
     */
    constructor() { 
        
        Snapshot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Snapshot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Snapshot} obj Optional instance to populate.
     * @return {module:model/Snapshot} The populated <code>Snapshot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Snapshot();

            if (data.hasOwnProperty('cash')) {
                obj['cash'] = ApiClient.convertToType(data['cash'], 'String');
            }
            if (data.hasOwnProperty('daynum')) {
                obj['daynum'] = ApiClient.convertToType(data['daynum'], 'String');
            }
            if (data.hasOwnProperty('snapshotid')) {
                obj['snapshotid'] = ApiClient.convertToType(data['snapshotid'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Snapshot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Snapshot</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cash'] && !(typeof data['cash'] === 'string' || data['cash'] instanceof String)) {
            throw new Error("Expected the field `cash` to be a primitive type in the JSON string but got " + data['cash']);
        }
        // ensure the json data is a string
        if (data['daynum'] && !(typeof data['daynum'] === 'string' || data['daynum'] instanceof String)) {
            throw new Error("Expected the field `daynum` to be a primitive type in the JSON string but got " + data['daynum']);
        }
        // ensure the json data is a string
        if (data['snapshotid'] && !(typeof data['snapshotid'] === 'string' || data['snapshotid'] instanceof String)) {
            throw new Error("Expected the field `snapshotid` to be a primitive type in the JSON string but got " + data['snapshotid']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {String} cash
 */
Snapshot.prototype['cash'] = undefined;

/**
 * @member {String} daynum
 */
Snapshot.prototype['daynum'] = undefined;

/**
 * @member {String} snapshotid
 */
Snapshot.prototype['snapshotid'] = undefined;

/**
 * @member {Date} timestamp
 */
Snapshot.prototype['timestamp'] = undefined;

/**
 * @member {String} value
 */
Snapshot.prototype['value'] = undefined;






export default Snapshot;

