/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Account model module.
 * @module model/Account
 * @version 1.0.2
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('accountid')) {
                obj['accountid'] = ApiClient.convertToType(data['accountid'], 'String');
            }
            if (data.hasOwnProperty('accounttypename')) {
                obj['accounttypename'] = ApiClient.convertToType(data['accounttypename'], 'String');
            }
            if (data.hasOwnProperty('cash')) {
                obj['cash'] = ApiClient.convertToType(data['cash'], 'String');
            }
            if (data.hasOwnProperty('change')) {
                obj['change'] = ApiClient.convertToType(data['change'], 'String');
            }
            if (data.hasOwnProperty('changepercent')) {
                obj['changepercent'] = ApiClient.convertToType(data['changepercent'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('computer')) {
                obj['computer'] = ApiClient.convertToType(data['computer'], 'String');
            }
            if (data.hasOwnProperty('currencyid')) {
                obj['currencyid'] = ApiClient.convertToType(data['currencyid'], 'String');
            }
            if (data.hasOwnProperty('currencytext')) {
                obj['currencytext'] = ApiClient.convertToType(data['currencytext'], 'String');
            }
            if (data.hasOwnProperty('hwid')) {
                obj['hwid'] = ApiClient.convertToType(data['hwid'], 'String');
            }
            if (data.hasOwnProperty('positions')) {
                obj['positions'] = ApiClient.convertToType(data['positions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('positionspercent')) {
                obj['positionspercent'] = ApiClient.convertToType(data['positionspercent'], {'String': 'String'});
            }
            if (data.hasOwnProperty('sessionid')) {
                obj['sessionid'] = ApiClient.convertToType(data['sessionid'], 'String');
            }
            if (data.hasOwnProperty('typeid')) {
                obj['typeid'] = ApiClient.convertToType(data['typeid'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['accountid'] && !(typeof data['accountid'] === 'string' || data['accountid'] instanceof String)) {
            throw new Error("Expected the field `accountid` to be a primitive type in the JSON string but got " + data['accountid']);
        }
        // ensure the json data is a string
        if (data['accounttypename'] && !(typeof data['accounttypename'] === 'string' || data['accounttypename'] instanceof String)) {
            throw new Error("Expected the field `accounttypename` to be a primitive type in the JSON string but got " + data['accounttypename']);
        }
        // ensure the json data is a string
        if (data['cash'] && !(typeof data['cash'] === 'string' || data['cash'] instanceof String)) {
            throw new Error("Expected the field `cash` to be a primitive type in the JSON string but got " + data['cash']);
        }
        // ensure the json data is a string
        if (data['change'] && !(typeof data['change'] === 'string' || data['change'] instanceof String)) {
            throw new Error("Expected the field `change` to be a primitive type in the JSON string but got " + data['change']);
        }
        // ensure the json data is a string
        if (data['changepercent'] && !(typeof data['changepercent'] === 'string' || data['changepercent'] instanceof String)) {
            throw new Error("Expected the field `changepercent` to be a primitive type in the JSON string but got " + data['changepercent']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['computer'] && !(typeof data['computer'] === 'string' || data['computer'] instanceof String)) {
            throw new Error("Expected the field `computer` to be a primitive type in the JSON string but got " + data['computer']);
        }
        // ensure the json data is a string
        if (data['currencyid'] && !(typeof data['currencyid'] === 'string' || data['currencyid'] instanceof String)) {
            throw new Error("Expected the field `currencyid` to be a primitive type in the JSON string but got " + data['currencyid']);
        }
        // ensure the json data is a string
        if (data['currencytext'] && !(typeof data['currencytext'] === 'string' || data['currencytext'] instanceof String)) {
            throw new Error("Expected the field `currencytext` to be a primitive type in the JSON string but got " + data['currencytext']);
        }
        // ensure the json data is a string
        if (data['hwid'] && !(typeof data['hwid'] === 'string' || data['hwid'] instanceof String)) {
            throw new Error("Expected the field `hwid` to be a primitive type in the JSON string but got " + data['hwid']);
        }
        // ensure the json data is a string
        if (data['sessionid'] && !(typeof data['sessionid'] === 'string' || data['sessionid'] instanceof String)) {
            throw new Error("Expected the field `sessionid` to be a primitive type in the JSON string but got " + data['sessionid']);
        }
        // ensure the json data is a string
        if (data['typeid'] && !(typeof data['typeid'] === 'string' || data['typeid'] instanceof String)) {
            throw new Error("Expected the field `typeid` to be a primitive type in the JSON string but got " + data['typeid']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {String} account
 */
Account.prototype['account'] = undefined;

/**
 * @member {String} accountid
 */
Account.prototype['accountid'] = undefined;

/**
 * @member {String} accounttypename
 */
Account.prototype['accounttypename'] = undefined;

/**
 * @member {String} cash
 */
Account.prototype['cash'] = undefined;

/**
 * @member {String} change
 */
Account.prototype['change'] = undefined;

/**
 * @member {String} changepercent
 */
Account.prototype['changepercent'] = undefined;

/**
 * @member {String} comments
 */
Account.prototype['comments'] = undefined;

/**
 * @member {String} computer
 */
Account.prototype['computer'] = undefined;

/**
 * @member {String} currencyid
 */
Account.prototype['currencyid'] = undefined;

/**
 * @member {String} currencytext
 */
Account.prototype['currencytext'] = undefined;

/**
 * @member {String} hwid
 */
Account.prototype['hwid'] = undefined;

/**
 * @member {Object.<String, String>} positions
 */
Account.prototype['positions'] = undefined;

/**
 * @member {Object.<String, String>} positionspercent
 */
Account.prototype['positionspercent'] = undefined;

/**
 * @member {String} sessionid
 */
Account.prototype['sessionid'] = undefined;

/**
 * @member {String} typeid
 */
Account.prototype['typeid'] = undefined;

/**
 * @member {String} value
 */
Account.prototype['value'] = undefined;






export default Account;

