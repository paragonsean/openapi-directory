/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameter from './Parameter';

/**
 * The Longentry model module.
 * @module model/Longentry
 * @version 1.0.2
 */
class Longentry {
    /**
     * Constructs a new <code>Longentry</code>.
     * @alias module:model/Longentry
     */
    constructor() { 
        
        Longentry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Longentry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Longentry} obj Optional instance to populate.
     * @return {module:model/Longentry} The populated <code>Longentry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Longentry();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [Parameter]);
            }
            if (data.hasOwnProperty('validnot')) {
                obj['validnot'] = ApiClient.convertToType(data['validnot'], 'String');
            }
            if (data.hasOwnProperty('validor')) {
                obj['validor'] = ApiClient.convertToType(data['validor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Longentry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Longentry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                Parameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['validnot'] && !(typeof data['validnot'] === 'string' || data['validnot'] instanceof String)) {
            throw new Error("Expected the field `validnot` to be a primitive type in the JSON string but got " + data['validnot']);
        }
        // ensure the json data is a string
        if (data['validor'] && !(typeof data['validor'] === 'string' || data['validor'] instanceof String)) {
            throw new Error("Expected the field `validor` to be a primitive type in the JSON string but got " + data['validor']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Longentry.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Longentry.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Parameter>} parameters
 */
Longentry.prototype['parameters'] = undefined;

/**
 * @member {String} validnot
 */
Longentry.prototype['validnot'] = undefined;

/**
 * @member {String} validor
 */
Longentry.prototype['validor'] = undefined;






export default Longentry;

