/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Trade model module.
 * @module model/Trade
 * @version 1.0.2
 */
class Trade {
    /**
     * Constructs a new <code>Trade</code>.
     * @alias module:model/Trade
     */
    constructor() { 
        
        Trade.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Trade</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trade} obj Optional instance to populate.
     * @return {module:model/Trade} The populated <code>Trade</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trade();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('buy')) {
                obj['buy'] = ApiClient.convertToType(data['buy'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('shares')) {
                obj['shares'] = ApiClient.convertToType(data['shares'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('tradeid')) {
                obj['tradeid'] = ApiClient.convertToType(data['tradeid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trade</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trade</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['buy'] && !(typeof data['buy'] === 'string' || data['buy'] instanceof String)) {
            throw new Error("Expected the field `buy` to be a primitive type in the JSON string but got " + data['buy']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }
        // ensure the json data is a string
        if (data['shares'] && !(typeof data['shares'] === 'string' || data['shares'] instanceof String)) {
            throw new Error("Expected the field `shares` to be a primitive type in the JSON string but got " + data['shares']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['tradeid'] && !(typeof data['tradeid'] === 'string' || data['tradeid'] instanceof String)) {
            throw new Error("Expected the field `tradeid` to be a primitive type in the JSON string but got " + data['tradeid']);
        }

        return true;
    }


}



/**
 * @member {String} account
 */
Trade.prototype['account'] = undefined;

/**
 * @member {String} buy
 */
Trade.prototype['buy'] = undefined;

/**
 * @member {String} number
 */
Trade.prototype['number'] = undefined;

/**
 * @member {String} price
 */
Trade.prototype['price'] = undefined;

/**
 * @member {String} shares
 */
Trade.prototype['shares'] = undefined;

/**
 * @member {String} symbol
 */
Trade.prototype['symbol'] = undefined;

/**
 * @member {Date} timestamp
 */
Trade.prototype['timestamp'] = undefined;

/**
 * @member {String} tradeid
 */
Trade.prototype['tradeid'] = undefined;






export default Trade;

