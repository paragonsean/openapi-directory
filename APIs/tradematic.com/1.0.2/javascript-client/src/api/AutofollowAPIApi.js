/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutofollowStrategiesPost200Response from '../model/AutofollowStrategiesPost200Response';
import AutofollowStrategiesPostRequest from '../model/AutofollowStrategiesPostRequest';
import AutofollowStrategiesStrategyidContentPut200Response from '../model/AutofollowStrategiesStrategyidContentPut200Response';
import AutofollowStrategiesStrategyidContentPutRequest from '../model/AutofollowStrategiesStrategyidContentPutRequest';
import AutofollowStrategiesStrategyidPut200Response from '../model/AutofollowStrategiesStrategyidPut200Response';
import AutofollowStrategiesStrategyidPutRequest from '../model/AutofollowStrategiesStrategyidPutRequest';
import AutofollowStrategiesStrategyidSignalsPost200Response from '../model/AutofollowStrategiesStrategyidSignalsPost200Response';
import AutofollowStrategiesStrategyidSignalsPostRequest from '../model/AutofollowStrategiesStrategyidSignalsPostRequest';
import Error from '../model/Error';
import Signal from '../model/Signal';
import Strategy from '../model/Strategy';
import StrategyPosition from '../model/StrategyPosition';

/**
* AutofollowAPI service.
* @module api/AutofollowAPIApi
* @version 1.0.2
*/
export default class AutofollowAPIApi {

    /**
    * Constructs a new AutofollowAPIApi. 
    * @alias module:api/AutofollowAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autofollowStrategiesGet operation.
     * @callback module:api/AutofollowAPIApi~autofollowStrategiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Strategy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get autofollow strategies list
     * Get autofollow strategies list
     * @param {module:api/AutofollowAPIApi~autofollowStrategiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Strategy>}
     */
    autofollowStrategiesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Strategy];
      return this.apiClient.callApi(
        '/autofollow/strategies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autofollowStrategiesPost operation.
     * @callback module:api/AutofollowAPIApi~autofollowStrategiesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutofollowStrategiesPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new autofollow strategy
     * Create new autofollow strategy
     * @param {module:model/AutofollowStrategiesPostRequest} body 
     * @param {module:api/AutofollowAPIApi~autofollowStrategiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutofollowStrategiesPost200Response}
     */
    autofollowStrategiesPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling autofollowStrategiesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutofollowStrategiesPost200Response;
      return this.apiClient.callApi(
        '/autofollow/strategies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autofollowStrategiesStrategyidContentPut operation.
     * @callback module:api/AutofollowAPIApi~autofollowStrategiesStrategyidContentPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutofollowStrategiesStrategyidContentPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update rules for strategy that was created with strategy builder
     * Update rules for strategy that was created with strategy builder
     * @param {Number} strategyid 
     * @param {module:model/AutofollowStrategiesStrategyidContentPutRequest} body 
     * @param {module:api/AutofollowAPIApi~autofollowStrategiesStrategyidContentPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutofollowStrategiesStrategyidContentPut200Response}
     */
    autofollowStrategiesStrategyidContentPut(strategyid, body, callback) {
      let postBody = body;
      // verify the required parameter 'strategyid' is set
      if (strategyid === undefined || strategyid === null) {
        throw new Error("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidContentPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling autofollowStrategiesStrategyidContentPut");
      }

      let pathParams = {
        'strategyid': strategyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutofollowStrategiesStrategyidContentPut200Response;
      return this.apiClient.callApi(
        '/autofollow/strategies/{strategyid}/content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autofollowStrategiesStrategyidGet operation.
     * @callback module:api/AutofollowAPIApi~autofollowStrategiesStrategyidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Strategy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get autofollow strategy by ID
     * Get autofollow strategy by ID
     * @param {Number} strategyid 
     * @param {module:api/AutofollowAPIApi~autofollowStrategiesStrategyidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Strategy}
     */
    autofollowStrategiesStrategyidGet(strategyid, callback) {
      let postBody = null;
      // verify the required parameter 'strategyid' is set
      if (strategyid === undefined || strategyid === null) {
        throw new Error("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidGet");
      }

      let pathParams = {
        'strategyid': strategyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Strategy;
      return this.apiClient.callApi(
        '/autofollow/strategies/{strategyid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autofollowStrategiesStrategyidPositionsGet operation.
     * @callback module:api/AutofollowAPIApi~autofollowStrategiesStrategyidPositionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StrategyPosition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get positions for strategy
     * Get positions for strategy
     * @param {Number} strategyid 
     * @param {module:api/AutofollowAPIApi~autofollowStrategiesStrategyidPositionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StrategyPosition>}
     */
    autofollowStrategiesStrategyidPositionsGet(strategyid, callback) {
      let postBody = null;
      // verify the required parameter 'strategyid' is set
      if (strategyid === undefined || strategyid === null) {
        throw new Error("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidPositionsGet");
      }

      let pathParams = {
        'strategyid': strategyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StrategyPosition];
      return this.apiClient.callApi(
        '/autofollow/strategies/{strategyid}/positions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autofollowStrategiesStrategyidPut operation.
     * @callback module:api/AutofollowAPIApi~autofollowStrategiesStrategyidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutofollowStrategiesStrategyidPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update autofollow strategy
     * Update autofollow strategy
     * @param {Number} strategyid 
     * @param {module:model/AutofollowStrategiesStrategyidPutRequest} body 
     * @param {module:api/AutofollowAPIApi~autofollowStrategiesStrategyidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutofollowStrategiesStrategyidPut200Response}
     */
    autofollowStrategiesStrategyidPut(strategyid, body, callback) {
      let postBody = body;
      // verify the required parameter 'strategyid' is set
      if (strategyid === undefined || strategyid === null) {
        throw new Error("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling autofollowStrategiesStrategyidPut");
      }

      let pathParams = {
        'strategyid': strategyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutofollowStrategiesStrategyidPut200Response;
      return this.apiClient.callApi(
        '/autofollow/strategies/{strategyid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autofollowStrategiesStrategyidSignalsGet operation.
     * @callback module:api/AutofollowAPIApi~autofollowStrategiesStrategyidSignalsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Signal>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get trading signals for strategy
     * Get trading signals for strategy
     * @param {Number} strategyid 
     * @param {Number} count 
     * @param {module:api/AutofollowAPIApi~autofollowStrategiesStrategyidSignalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Signal>}
     */
    autofollowStrategiesStrategyidSignalsGet(strategyid, count, callback) {
      let postBody = null;
      // verify the required parameter 'strategyid' is set
      if (strategyid === undefined || strategyid === null) {
        throw new Error("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidSignalsGet");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling autofollowStrategiesStrategyidSignalsGet");
      }

      let pathParams = {
        'strategyid': strategyid
      };
      let queryParams = {
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Signal];
      return this.apiClient.callApi(
        '/autofollow/strategies/{strategyid}/signals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autofollowStrategiesStrategyidSignalsPost operation.
     * @callback module:api/AutofollowAPIApi~autofollowStrategiesStrategyidSignalsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutofollowStrategiesStrategyidSignalsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a new signal for autofollow strategy
     * Send a new signal for autofollow strategy
     * @param {Number} strategyid 
     * @param {module:model/AutofollowStrategiesStrategyidSignalsPostRequest} body 
     * @param {module:api/AutofollowAPIApi~autofollowStrategiesStrategyidSignalsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutofollowStrategiesStrategyidSignalsPost200Response}
     */
    autofollowStrategiesStrategyidSignalsPost(strategyid, body, callback) {
      let postBody = body;
      // verify the required parameter 'strategyid' is set
      if (strategyid === undefined || strategyid === null) {
        throw new Error("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidSignalsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling autofollowStrategiesStrategyidSignalsPost");
      }

      let pathParams = {
        'strategyid': strategyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutofollowStrategiesStrategyidSignalsPost200Response;
      return this.apiClient.callApi(
        '/autofollow/strategies/{strategyid}/signals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
