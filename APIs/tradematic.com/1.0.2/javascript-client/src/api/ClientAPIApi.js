/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIKey from '../model/APIKey';
import ClientApikeysKeyidDelete200Response from '../model/ClientApikeysKeyidDelete200Response';
import ClientApikeysPost200Response from '../model/ClientApikeysPost200Response';
import ClientUsersLoginPost200Response from '../model/ClientUsersLoginPost200Response';
import ClientUsersRegisterPost200Response from '../model/ClientUsersRegisterPost200Response';
import ClientUsersRegisterPostRequest from '../model/ClientUsersRegisterPostRequest';
import Error from '../model/Error';
import User from '../model/User';

/**
* ClientAPI service.
* @module api/ClientAPIApi
* @version 1.0.2
*/
export default class ClientAPIApi {

    /**
    * Constructs a new ClientAPIApi. 
    * @alias module:api/ClientAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clientApikeysGet operation.
     * @callback module:api/ClientAPIApi~clientApikeysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get API keys
     * Get API keys
     * @param {module:api/ClientAPIApi~clientApikeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIKey>}
     */
    clientApikeysGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [APIKey];
      return this.apiClient.callApi(
        '/client/apikeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientApikeysKeyidDelete operation.
     * @callback module:api/ClientAPIApi~clientApikeysKeyidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientApikeysKeyidDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete API key
     * Delete API key
     * @param {Number} keyid 
     * @param {module:api/ClientAPIApi~clientApikeysKeyidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientApikeysKeyidDelete200Response}
     */
    clientApikeysKeyidDelete(keyid, callback) {
      let postBody = null;
      // verify the required parameter 'keyid' is set
      if (keyid === undefined || keyid === null) {
        throw new Error("Missing the required parameter 'keyid' when calling clientApikeysKeyidDelete");
      }

      let pathParams = {
        'keyid': keyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientApikeysKeyidDelete200Response;
      return this.apiClient.callApi(
        '/client/apikeys/{keyid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientApikeysPost operation.
     * @callback module:api/ClientAPIApi~clientApikeysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientApikeysPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new API key
     * Create new API key
     * @param {module:api/ClientAPIApi~clientApikeysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientApikeysPost200Response}
     */
    clientApikeysPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientApikeysPost200Response;
      return this.apiClient.callApi(
        '/client/apikeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientUsersGet operation.
     * @callback module:api/ClientAPIApi~clientUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users list
     * Get users list
     * @param {module:api/ClientAPIApi~clientUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    clientUsersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/client/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientUsersLoginPost operation.
     * @callback module:api/ClientAPIApi~clientUsersLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientUsersLoginPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs user into the system
     * Logs user into the system
     * @param {module:api/ClientAPIApi~clientUsersLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientUsersLoginPost200Response}
     */
    clientUsersLoginPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientUsersLoginPost200Response;
      return this.apiClient.callApi(
        '/client/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientUsersRegisterPost operation.
     * @callback module:api/ClientAPIApi~clientUsersRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientUsersRegisterPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new user
     * Register a new user
     * @param {module:model/ClientUsersRegisterPostRequest} body 
     * @param {module:api/ClientAPIApi~clientUsersRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientUsersRegisterPost200Response}
     */
    clientUsersRegisterPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling clientUsersRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientUsersRegisterPost200Response;
      return this.apiClient.callApi(
        '/client/users/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientUsersUseridGet operation.
     * @callback module:api/ClientAPIApi~clientUsersUseridGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user by ID
     * Get user by ID
     * @param {Number} userid 
     * @param {module:api/ClientAPIApi~clientUsersUseridGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    clientUsersUseridGet(userid, callback) {
      let postBody = null;
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling clientUsersUseridGet");
      }

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/client/users/{userid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
