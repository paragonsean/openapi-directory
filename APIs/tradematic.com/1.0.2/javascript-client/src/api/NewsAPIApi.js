/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import News from '../model/News';

/**
* NewsAPI service.
* @module api/NewsAPIApi
* @version 1.0.2
*/
export default class NewsAPIApi {

    /**
    * Constructs a new NewsAPIApi. 
    * @alias module:api/NewsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the newsNewsGet operation.
     * @callback module:api/NewsAPIApi~newsNewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get news list
     * Get news list
     * @param {module:api/NewsAPIApi~newsNewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsNewsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/news/news', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsNewsNewsidGet operation.
     * @callback module:api/NewsAPIApi~newsNewsNewsidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/News} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get news by ID
     * Get news by ID
     * @param {Number} newsid 
     * @param {module:api/NewsAPIApi~newsNewsNewsidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/News}
     */
    newsNewsNewsidGet(newsid, callback) {
      let postBody = null;
      // verify the required parameter 'newsid' is set
      if (newsid === undefined || newsid === null) {
        throw new Error("Missing the required parameter 'newsid' when calling newsNewsNewsidGet");
      }

      let pathParams = {
        'newsid': newsid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = News;
      return this.apiClient.callApi(
        '/news/news/{newsid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
