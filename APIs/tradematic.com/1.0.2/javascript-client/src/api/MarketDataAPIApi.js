/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Market from '../model/Market';
import MarketdataSymbolsSymbolidHistdataGet200Response from '../model/MarketdataSymbolsSymbolidHistdataGet200Response';

/**
* MarketDataAPI service.
* @module api/MarketDataAPIApi
* @version 1.0.2
*/
export default class MarketDataAPIApi {

    /**
    * Constructs a new MarketDataAPIApi. 
    * @alias module:api/MarketDataAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the marketdataMarketsGet operation.
     * @callback module:api/MarketDataAPIApi~marketdataMarketsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Market>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get markets list
     * Get markets list
     * @param {module:api/MarketDataAPIApi~marketdataMarketsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Market>}
     */
    marketdataMarketsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Market];
      return this.apiClient.callApi(
        '/marketdata/markets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketdataMarketsMarketidGet operation.
     * @callback module:api/MarketDataAPIApi~marketdataMarketsMarketidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Market} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get market by ID
     * Get market by ID
     * @param {Number} marketid 
     * @param {module:api/MarketDataAPIApi~marketdataMarketsMarketidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Market}
     */
    marketdataMarketsMarketidGet(marketid, callback) {
      let postBody = null;
      // verify the required parameter 'marketid' is set
      if (marketid === undefined || marketid === null) {
        throw new Error("Missing the required parameter 'marketid' when calling marketdataMarketsMarketidGet");
      }

      let pathParams = {
        'marketid': marketid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Market;
      return this.apiClient.callApi(
        '/marketdata/markets/{marketid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketdataSymbolsGet operation.
     * @callback module:api/MarketDataAPIApi~marketdataSymbolsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get symbols list
     * Get symbols list
     * @param {Number} marketid 
     * @param {Number} filter 
     * @param {module:api/MarketDataAPIApi~marketdataSymbolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    marketdataSymbolsGet(marketid, filter, callback) {
      let postBody = null;
      // verify the required parameter 'marketid' is set
      if (marketid === undefined || marketid === null) {
        throw new Error("Missing the required parameter 'marketid' when calling marketdataSymbolsGet");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling marketdataSymbolsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'marketid': marketid,
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/marketdata/symbols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketdataSymbolsSymbolidGet operation.
     * @callback module:api/MarketDataAPIApi~marketdataSymbolsSymbolidGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get symbol by ID
     * Get symbol by ID
     * @param {Number} symbolid 
     * @param {module:api/MarketDataAPIApi~marketdataSymbolsSymbolidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    marketdataSymbolsSymbolidGet(symbolid, callback) {
      let postBody = null;
      // verify the required parameter 'symbolid' is set
      if (symbolid === undefined || symbolid === null) {
        throw new Error("Missing the required parameter 'symbolid' when calling marketdataSymbolsSymbolidGet");
      }

      let pathParams = {
        'symbolid': symbolid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/marketdata/symbols/{symbolid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketdataSymbolsSymbolidHistdataGet operation.
     * @callback module:api/MarketDataAPIApi~marketdataSymbolsSymbolidHistdataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketdataSymbolsSymbolidHistdataGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical data for instrument
     * Get historical data for instrument
     * @param {Number} symbolid 
     * @param {Number} tf 
     * @param {Number} from 
     * @param {Number} to 
     * @param {module:api/MarketDataAPIApi~marketdataSymbolsSymbolidHistdataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketdataSymbolsSymbolidHistdataGet200Response}
     */
    marketdataSymbolsSymbolidHistdataGet(symbolid, tf, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'symbolid' is set
      if (symbolid === undefined || symbolid === null) {
        throw new Error("Missing the required parameter 'symbolid' when calling marketdataSymbolsSymbolidHistdataGet");
      }
      // verify the required parameter 'tf' is set
      if (tf === undefined || tf === null) {
        throw new Error("Missing the required parameter 'tf' when calling marketdataSymbolsSymbolidHistdataGet");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling marketdataSymbolsSymbolidHistdataGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling marketdataSymbolsSymbolidHistdataGet");
      }

      let pathParams = {
        'symbolid': symbolid
      };
      let queryParams = {
        'tf': tf,
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketdataSymbolsSymbolidHistdataGet200Response;
      return this.apiClient.callApi(
        '/marketdata/symbols/{symbolid}/histdata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
