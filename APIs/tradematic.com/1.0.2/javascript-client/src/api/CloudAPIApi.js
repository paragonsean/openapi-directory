/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import CloudAccountsAccountidCloseallPost202Response from '../model/CloudAccountsAccountidCloseallPost202Response';
import CloudAccountsAccountidOrdersPostRequest from '../model/CloudAccountsAccountidOrdersPostRequest';
import CloudConnectionsPost200Response from '../model/CloudConnectionsPost200Response';
import CloudConnectionsPostRequest from '../model/CloudConnectionsPostRequest';
import CloudStrategiesStartPostRequest from '../model/CloudStrategiesStartPostRequest';
import CloudStrategy from '../model/CloudStrategy';
import Command from '../model/Command';
import Connection from '../model/Connection';
import Connector from '../model/Connector';
import Error from '../model/Error';
import Order from '../model/Order';
import Session from '../model/Session';
import Snapshot from '../model/Snapshot';
import Trade from '../model/Trade';

/**
* CloudAPI service.
* @module api/CloudAPIApi
* @version 1.0.2
*/
export default class CloudAPIApi {

    /**
    * Constructs a new CloudAPIApi. 
    * @alias module:api/CloudAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cloudAccountsAccountidCloseallPost operation.
     * @callback module:api/CloudAPIApi~cloudAccountsAccountidCloseallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudAccountsAccountidCloseallPost202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close all positions by account
     * Close all positions by account
     * @param {Number} accountid 
     * @param {module:api/CloudAPIApi~cloudAccountsAccountidCloseallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudAccountsAccountidCloseallPost202Response}
     */
    cloudAccountsAccountidCloseallPost(accountid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling cloudAccountsAccountidCloseallPost");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudAccountsAccountidCloseallPost202Response;
      return this.apiClient.callApi(
        '/cloud/accounts/{accountid}/closeall', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudAccountsAccountidGet operation.
     * @callback module:api/CloudAPIApi~cloudAccountsAccountidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get trading account by ID
     * Get trading account by ID
     * @param {Number} accountid 
     * @param {module:api/CloudAPIApi~cloudAccountsAccountidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    cloudAccountsAccountidGet(accountid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling cloudAccountsAccountidGet");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/cloud/accounts/{accountid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudAccountsAccountidOrdersGet operation.
     * @callback module:api/CloudAPIApi~cloudAccountsAccountidOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get orders list by account
     * Get orders list by account
     * @param {Number} accountid 
     * @param {module:api/CloudAPIApi~cloudAccountsAccountidOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    cloudAccountsAccountidOrdersGet(accountid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling cloudAccountsAccountidOrdersGet");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Order];
      return this.apiClient.callApi(
        '/cloud/accounts/{accountid}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudAccountsAccountidOrdersOrderidDelete operation.
     * @callback module:api/CloudAPIApi~cloudAccountsAccountidOrdersOrderidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudAccountsAccountidCloseallPost202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an order by ID
     * Cancel an order by ID
     * @param {Number} accountid 
     * @param {Number} orderid 
     * @param {module:api/CloudAPIApi~cloudAccountsAccountidOrdersOrderidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudAccountsAccountidCloseallPost202Response}
     */
    cloudAccountsAccountidOrdersOrderidDelete(accountid, orderid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling cloudAccountsAccountidOrdersOrderidDelete");
      }
      // verify the required parameter 'orderid' is set
      if (orderid === undefined || orderid === null) {
        throw new Error("Missing the required parameter 'orderid' when calling cloudAccountsAccountidOrdersOrderidDelete");
      }

      let pathParams = {
        'accountid': accountid,
        'orderid': orderid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudAccountsAccountidCloseallPost202Response;
      return this.apiClient.callApi(
        '/cloud/accounts/{accountid}/orders/{orderid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudAccountsAccountidOrdersPost operation.
     * @callback module:api/CloudAPIApi~cloudAccountsAccountidOrdersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudAccountsAccountidCloseallPost202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place a new order
     * Place a new order
     * @param {Number} accountid 
     * @param {module:model/CloudAccountsAccountidOrdersPostRequest} body 
     * @param {module:api/CloudAPIApi~cloudAccountsAccountidOrdersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudAccountsAccountidCloseallPost202Response}
     */
    cloudAccountsAccountidOrdersPost(accountid, body, callback) {
      let postBody = body;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling cloudAccountsAccountidOrdersPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling cloudAccountsAccountidOrdersPost");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudAccountsAccountidCloseallPost202Response;
      return this.apiClient.callApi(
        '/cloud/accounts/{accountid}/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudAccountsAccountidSnapshotsGet operation.
     * @callback module:api/CloudAPIApi~cloudAccountsAccountidSnapshotsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Snapshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account equity and cash snapshots
     * Get account equity and cash snapshots
     * @param {Number} accountid 
     * @param {module:api/CloudAPIApi~cloudAccountsAccountidSnapshotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Snapshot>}
     */
    cloudAccountsAccountidSnapshotsGet(accountid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling cloudAccountsAccountidSnapshotsGet");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Snapshot];
      return this.apiClient.callApi(
        '/cloud/accounts/{accountid}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudAccountsAccountidSyncPost operation.
     * @callback module:api/CloudAPIApi~cloudAccountsAccountidSyncPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudAccountsAccountidCloseallPost202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Syhchronize an account with account active strategies
     * Syhchronize an account with account active strategies
     * @param {Number} accountid 
     * @param {module:api/CloudAPIApi~cloudAccountsAccountidSyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudAccountsAccountidCloseallPost202Response}
     */
    cloudAccountsAccountidSyncPost(accountid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling cloudAccountsAccountidSyncPost");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudAccountsAccountidCloseallPost202Response;
      return this.apiClient.callApi(
        '/cloud/accounts/{accountid}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudAccountsAccountidTradesGet operation.
     * @callback module:api/CloudAPIApi~cloudAccountsAccountidTradesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Trade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get trades list by account
     * Get trades list by account
     * @param {Number} accountid 
     * @param {module:api/CloudAPIApi~cloudAccountsAccountidTradesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Trade>}
     */
    cloudAccountsAccountidTradesGet(accountid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling cloudAccountsAccountidTradesGet");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Trade];
      return this.apiClient.callApi(
        '/cloud/accounts/{accountid}/trades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudAccountsGet operation.
     * @callback module:api/CloudAPIApi~cloudAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get trading accounts list
     * Get trading accounts list
     * @param {module:api/CloudAPIApi~cloudAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    cloudAccountsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/cloud/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudCommandsCommandidGet operation.
     * @callback module:api/CloudAPIApi~cloudCommandsCommandidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get command by ID
     * Get command by ID
     * @param {Number} commandid 
     * @param {module:api/CloudAPIApi~cloudCommandsCommandidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    cloudCommandsCommandidGet(commandid, callback) {
      let postBody = null;
      // verify the required parameter 'commandid' is set
      if (commandid === undefined || commandid === null) {
        throw new Error("Missing the required parameter 'commandid' when calling cloudCommandsCommandidGet");
      }

      let pathParams = {
        'commandid': commandid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Command;
      return this.apiClient.callApi(
        '/cloud/commands/{commandid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudCommandsGet operation.
     * @callback module:api/CloudAPIApi~cloudCommandsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Command>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get commands list
     * Get commands list
     * @param {module:api/CloudAPIApi~cloudCommandsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Command>}
     */
    cloudCommandsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Command];
      return this.apiClient.callApi(
        '/cloud/commands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudConnectionsConnectionidDelete operation.
     * @callback module:api/CloudAPIApi~cloudConnectionsConnectionidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudConnectionsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete connection by ID
     * Delete connection by ID
     * @param {Number} connectionid 
     * @param {module:api/CloudAPIApi~cloudConnectionsConnectionidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudConnectionsPost200Response}
     */
    cloudConnectionsConnectionidDelete(connectionid, callback) {
      let postBody = null;
      // verify the required parameter 'connectionid' is set
      if (connectionid === undefined || connectionid === null) {
        throw new Error("Missing the required parameter 'connectionid' when calling cloudConnectionsConnectionidDelete");
      }

      let pathParams = {
        'connectionid': connectionid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudConnectionsPost200Response;
      return this.apiClient.callApi(
        '/cloud/connections/{connectionid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudConnectionsConnectionidGet operation.
     * @callback module:api/CloudAPIApi~cloudConnectionsConnectionidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get connection by ID
     * Get connection by ID
     * @param {Number} connectionid 
     * @param {module:api/CloudAPIApi~cloudConnectionsConnectionidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    cloudConnectionsConnectionidGet(connectionid, callback) {
      let postBody = null;
      // verify the required parameter 'connectionid' is set
      if (connectionid === undefined || connectionid === null) {
        throw new Error("Missing the required parameter 'connectionid' when calling cloudConnectionsConnectionidGet");
      }

      let pathParams = {
        'connectionid': connectionid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/cloud/connections/{connectionid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudConnectionsConnectionidPut operation.
     * @callback module:api/CloudAPIApi~cloudConnectionsConnectionidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudConnectionsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing connection
     * Update existing connection
     * @param {Number} connectionid 
     * @param {module:model/CloudConnectionsPostRequest} body 
     * @param {module:api/CloudAPIApi~cloudConnectionsConnectionidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudConnectionsPost200Response}
     */
    cloudConnectionsConnectionidPut(connectionid, body, callback) {
      let postBody = body;
      // verify the required parameter 'connectionid' is set
      if (connectionid === undefined || connectionid === null) {
        throw new Error("Missing the required parameter 'connectionid' when calling cloudConnectionsConnectionidPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling cloudConnectionsConnectionidPut");
      }

      let pathParams = {
        'connectionid': connectionid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudConnectionsPost200Response;
      return this.apiClient.callApi(
        '/cloud/connections/{connectionid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudConnectionsGet operation.
     * @callback module:api/CloudAPIApi~cloudConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Connection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get connections list
     * Get connections list
     * @param {module:api/CloudAPIApi~cloudConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Connection>}
     */
    cloudConnectionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Connection];
      return this.apiClient.callApi(
        '/cloud/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudConnectionsPost operation.
     * @callback module:api/CloudAPIApi~cloudConnectionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudConnectionsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new connection
     * Create a new connection
     * @param {module:model/CloudConnectionsPostRequest} body 
     * @param {module:api/CloudAPIApi~cloudConnectionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudConnectionsPost200Response}
     */
    cloudConnectionsPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling cloudConnectionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudConnectionsPost200Response;
      return this.apiClient.callApi(
        '/cloud/connections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudConnectorsConnectoridGet operation.
     * @callback module:api/CloudAPIApi~cloudConnectorsConnectoridGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connector} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get connector by ID
     * Get connector by ID
     * @param {Number} connectorid 
     * @param {module:api/CloudAPIApi~cloudConnectorsConnectoridGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connector}
     */
    cloudConnectorsConnectoridGet(connectorid, callback) {
      let postBody = null;
      // verify the required parameter 'connectorid' is set
      if (connectorid === undefined || connectorid === null) {
        throw new Error("Missing the required parameter 'connectorid' when calling cloudConnectorsConnectoridGet");
      }

      let pathParams = {
        'connectorid': connectorid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Connector;
      return this.apiClient.callApi(
        '/cloud/connectors/{connectorid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudConnectorsGet operation.
     * @callback module:api/CloudAPIApi~cloudConnectorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Connector>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available connectors list
     * Get available connectors list
     * @param {module:api/CloudAPIApi~cloudConnectorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Connector>}
     */
    cloudConnectorsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Connector];
      return this.apiClient.callApi(
        '/cloud/connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudSessionsGet operation.
     * @callback module:api/CloudAPIApi~cloudSessionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sessions list
     * Get sessions list
     * @param {module:api/CloudAPIApi~cloudSessionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    cloudSessionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Session];
      return this.apiClient.callApi(
        '/cloud/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudSessionsSessionidGet operation.
     * @callback module:api/CloudAPIApi~cloudSessionsSessionidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session by ID
     * Get session by ID
     * @param {Number} sessionid 
     * @param {module:api/CloudAPIApi~cloudSessionsSessionidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    cloudSessionsSessionidGet(sessionid, callback) {
      let postBody = null;
      // verify the required parameter 'sessionid' is set
      if (sessionid === undefined || sessionid === null) {
        throw new Error("Missing the required parameter 'sessionid' when calling cloudSessionsSessionidGet");
      }

      let pathParams = {
        'sessionid': sessionid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/cloud/sessions/{sessionid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudStrategiesGet operation.
     * @callback module:api/CloudAPIApi~cloudStrategiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CloudStrategy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of active (executing) strategies
     * Get list of active (executing) strategies
     * @param {module:api/CloudAPIApi~cloudStrategiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CloudStrategy>}
     */
    cloudStrategiesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CloudStrategy];
      return this.apiClient.callApi(
        '/cloud/strategies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudStrategiesStartPost operation.
     * @callback module:api/CloudAPIApi~cloudStrategiesStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudAccountsAccountidCloseallPost202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a strategy execution for account
     * Start a strategy execution for account
     * @param {module:model/CloudStrategiesStartPostRequest} body 
     * @param {module:api/CloudAPIApi~cloudStrategiesStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudAccountsAccountidCloseallPost202Response}
     */
    cloudStrategiesStartPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling cloudStrategiesStartPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudAccountsAccountidCloseallPost202Response;
      return this.apiClient.callApi(
        '/cloud/strategies/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudStrategiesStrategyidGet operation.
     * @callback module:api/CloudAPIApi~cloudStrategiesStrategyidGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CloudStrategy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get active (executing) strategy by ID
     * Get active (executing) strategy by ID
     * @param {Number} strategyid 
     * @param {module:api/CloudAPIApi~cloudStrategiesStrategyidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CloudStrategy>}
     */
    cloudStrategiesStrategyidGet(strategyid, callback) {
      let postBody = null;
      // verify the required parameter 'strategyid' is set
      if (strategyid === undefined || strategyid === null) {
        throw new Error("Missing the required parameter 'strategyid' when calling cloudStrategiesStrategyidGet");
      }

      let pathParams = {
        'strategyid': strategyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CloudStrategy];
      return this.apiClient.callApi(
        '/cloud/strategies/{strategyid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudStrategiesStrategyidStopPost operation.
     * @callback module:api/CloudAPIApi~cloudStrategiesStrategyidStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudAccountsAccountidCloseallPost202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a strategy execution by ID
     * Stop a strategy execution by ID
     * @param {Number} strategyid 
     * @param {module:api/CloudAPIApi~cloudStrategiesStrategyidStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudAccountsAccountidCloseallPost202Response}
     */
    cloudStrategiesStrategyidStopPost(strategyid, callback) {
      let postBody = null;
      // verify the required parameter 'strategyid' is set
      if (strategyid === undefined || strategyid === null) {
        throw new Error("Missing the required parameter 'strategyid' when calling cloudStrategiesStrategyidStopPost");
      }

      let pathParams = {
        'strategyid': strategyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Secured'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudAccountsAccountidCloseallPost202Response;
      return this.apiClient.callApi(
        '/cloud/strategies/{strategyid}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
