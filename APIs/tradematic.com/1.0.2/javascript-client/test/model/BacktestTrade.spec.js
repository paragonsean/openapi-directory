/**
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TradematicCloudApi);
  }
}(this, function(expect, TradematicCloudApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TradematicCloudApi.BacktestTrade();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BacktestTrade', function() {
    it('should create an instance of BacktestTrade', function() {
      // uncomment below and update the code to test BacktestTrade
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be.a(TradematicCloudApi.BacktestTrade);
    });

    it('should have the property barsheld (base name: "barsheld")', function() {
      // uncomment below and update the code to test the property barsheld
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property changepct (base name: "changepct")', function() {
      // uncomment below and update the code to test the property changepct
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property commission (base name: "commission")', function() {
      // uncomment below and update the code to test the property commission
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property entrydatetime (base name: "entrydatetime")', function() {
      // uncomment below and update the code to test the property entrydatetime
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property entryprice (base name: "entryprice")', function() {
      // uncomment below and update the code to test the property entryprice
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property entrysignal (base name: "entrysignal")', function() {
      // uncomment below and update the code to test the property entrysignal
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property exitdatetime (base name: "exitdatetime")', function() {
      // uncomment below and update the code to test the property exitdatetime
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property exitprice (base name: "exitprice")', function() {
      // uncomment below and update the code to test the property exitprice
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property exitsignal (base name: "exitsignal")', function() {
      // uncomment below and update the code to test the property exitsignal
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property mae (base name: "mae")', function() {
      // uncomment below and update the code to test the property mae
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property mfe (base name: "mfe")', function() {
      // uncomment below and update the code to test the property mfe
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property pandl (base name: "pandl")', function() {
      // uncomment below and update the code to test the property pandl
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property position (base name: "position")', function() {
      // uncomment below and update the code to test the property position
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property shares (base name: "shares")', function() {
      // uncomment below and update the code to test the property shares
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

    it('should have the property symbol (base name: "symbol")', function() {
      // uncomment below and update the code to test the property symbol
      //var instance = new TradematicCloudApi.BacktestTrade();
      //expect(instance).to.be();
    });

  });

}));
