/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.CloudAccountsAccountidCloseallPost202Response;
import org.openapitools.client.model.CloudAccountsAccountidOrdersPostRequest;
import org.openapitools.client.model.CloudConnectionsPost200Response;
import org.openapitools.client.model.CloudConnectionsPostRequest;
import org.openapitools.client.model.CloudStrategiesStartPostRequest;
import org.openapitools.client.model.CloudStrategy;
import org.openapitools.client.model.Command;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.Connector;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.Session;
import org.openapitools.client.model.Snapshot;
import org.openapitools.client.model.Trade;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudApiApi
 */
@Disabled
public class CloudApiApiTest {

    private final CloudApiApi api = new CloudApiApi();

    /**
     * Close all positions by account
     *
     * Close all positions by account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsAccountidCloseallPostTest() throws ApiException {
        Long accountid = null;
        CloudAccountsAccountidCloseallPost202Response response = api.cloudAccountsAccountidCloseallPost(accountid);
        // TODO: test validations
    }

    /**
     * Get trading account by ID
     *
     * Get trading account by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsAccountidGetTest() throws ApiException {
        Long accountid = null;
        Account response = api.cloudAccountsAccountidGet(accountid);
        // TODO: test validations
    }

    /**
     * Get orders list by account
     *
     * Get orders list by account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsAccountidOrdersGetTest() throws ApiException {
        Long accountid = null;
        List<Order> response = api.cloudAccountsAccountidOrdersGet(accountid);
        // TODO: test validations
    }

    /**
     * Cancel an order by ID
     *
     * Cancel an order by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsAccountidOrdersOrderidDeleteTest() throws ApiException {
        Long accountid = null;
        Long orderid = null;
        CloudAccountsAccountidCloseallPost202Response response = api.cloudAccountsAccountidOrdersOrderidDelete(accountid, orderid);
        // TODO: test validations
    }

    /**
     * Place a new order
     *
     * Place a new order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsAccountidOrdersPostTest() throws ApiException {
        Long accountid = null;
        CloudAccountsAccountidOrdersPostRequest body = null;
        CloudAccountsAccountidCloseallPost202Response response = api.cloudAccountsAccountidOrdersPost(accountid, body);
        // TODO: test validations
    }

    /**
     * Get account equity and cash snapshots
     *
     * Get account equity and cash snapshots
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsAccountidSnapshotsGetTest() throws ApiException {
        Long accountid = null;
        List<Snapshot> response = api.cloudAccountsAccountidSnapshotsGet(accountid);
        // TODO: test validations
    }

    /**
     * Syhchronize an account with account active strategies
     *
     * Syhchronize an account with account active strategies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsAccountidSyncPostTest() throws ApiException {
        Long accountid = null;
        CloudAccountsAccountidCloseallPost202Response response = api.cloudAccountsAccountidSyncPost(accountid);
        // TODO: test validations
    }

    /**
     * Get trades list by account
     *
     * Get trades list by account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsAccountidTradesGetTest() throws ApiException {
        Long accountid = null;
        List<Trade> response = api.cloudAccountsAccountidTradesGet(accountid);
        // TODO: test validations
    }

    /**
     * Get trading accounts list
     *
     * Get trading accounts list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudAccountsGetTest() throws ApiException {
        List<Account> response = api.cloudAccountsGet();
        // TODO: test validations
    }

    /**
     * Get command by ID
     *
     * Get command by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudCommandsCommandidGetTest() throws ApiException {
        Long commandid = null;
        Command response = api.cloudCommandsCommandidGet(commandid);
        // TODO: test validations
    }

    /**
     * Get commands list
     *
     * Get commands list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudCommandsGetTest() throws ApiException {
        List<Command> response = api.cloudCommandsGet();
        // TODO: test validations
    }

    /**
     * Delete connection by ID
     *
     * Delete connection by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudConnectionsConnectionidDeleteTest() throws ApiException {
        Long connectionid = null;
        CloudConnectionsPost200Response response = api.cloudConnectionsConnectionidDelete(connectionid);
        // TODO: test validations
    }

    /**
     * Get connection by ID
     *
     * Get connection by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudConnectionsConnectionidGetTest() throws ApiException {
        Long connectionid = null;
        Connection response = api.cloudConnectionsConnectionidGet(connectionid);
        // TODO: test validations
    }

    /**
     * Update existing connection
     *
     * Update existing connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudConnectionsConnectionidPutTest() throws ApiException {
        Long connectionid = null;
        CloudConnectionsPostRequest body = null;
        CloudConnectionsPost200Response response = api.cloudConnectionsConnectionidPut(connectionid, body);
        // TODO: test validations
    }

    /**
     * Get connections list
     *
     * Get connections list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudConnectionsGetTest() throws ApiException {
        List<Connection> response = api.cloudConnectionsGet();
        // TODO: test validations
    }

    /**
     * Create a new connection
     *
     * Create a new connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudConnectionsPostTest() throws ApiException {
        CloudConnectionsPostRequest body = null;
        CloudConnectionsPost200Response response = api.cloudConnectionsPost(body);
        // TODO: test validations
    }

    /**
     * Get connector by ID
     *
     * Get connector by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudConnectorsConnectoridGetTest() throws ApiException {
        Long connectorid = null;
        Connector response = api.cloudConnectorsConnectoridGet(connectorid);
        // TODO: test validations
    }

    /**
     * Get available connectors list
     *
     * Get available connectors list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudConnectorsGetTest() throws ApiException {
        List<Connector> response = api.cloudConnectorsGet();
        // TODO: test validations
    }

    /**
     * Get sessions list
     *
     * Get sessions list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudSessionsGetTest() throws ApiException {
        List<Session> response = api.cloudSessionsGet();
        // TODO: test validations
    }

    /**
     * Get session by ID
     *
     * Get session by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudSessionsSessionidGetTest() throws ApiException {
        Long sessionid = null;
        Session response = api.cloudSessionsSessionidGet(sessionid);
        // TODO: test validations
    }

    /**
     * Get list of active (executing) strategies
     *
     * Get list of active (executing) strategies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudStrategiesGetTest() throws ApiException {
        List<CloudStrategy> response = api.cloudStrategiesGet();
        // TODO: test validations
    }

    /**
     * Start a strategy execution for account
     *
     * Start a strategy execution for account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudStrategiesStartPostTest() throws ApiException {
        CloudStrategiesStartPostRequest body = null;
        CloudAccountsAccountidCloseallPost202Response response = api.cloudStrategiesStartPost(body);
        // TODO: test validations
    }

    /**
     * Get active (executing) strategy by ID
     *
     * Get active (executing) strategy by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudStrategiesStrategyidGetTest() throws ApiException {
        Long strategyid = null;
        List<CloudStrategy> response = api.cloudStrategiesStrategyidGet(strategyid);
        // TODO: test validations
    }

    /**
     * Stop a strategy execution by ID
     *
     * Stop a strategy execution by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudStrategiesStrategyidStopPostTest() throws ApiException {
        Long strategyid = null;
        CloudAccountsAccountidCloseallPost202Response response = api.cloudStrategiesStrategyidStopPost(strategyid);
        // TODO: test validations
    }

}
