/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutofollowStrategiesPost200Response;
import org.openapitools.client.model.AutofollowStrategiesPostRequest;
import org.openapitools.client.model.AutofollowStrategiesStrategyidContentPut200Response;
import org.openapitools.client.model.AutofollowStrategiesStrategyidContentPutRequest;
import org.openapitools.client.model.AutofollowStrategiesStrategyidPut200Response;
import org.openapitools.client.model.AutofollowStrategiesStrategyidPutRequest;
import org.openapitools.client.model.AutofollowStrategiesStrategyidSignalsPost200Response;
import org.openapitools.client.model.AutofollowStrategiesStrategyidSignalsPostRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Signal;
import org.openapitools.client.model.Strategy;
import org.openapitools.client.model.StrategyPosition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AutofollowApiApi
 */
@Disabled
public class AutofollowApiApiTest {

    private final AutofollowApiApi api = new AutofollowApiApi();

    /**
     * Get autofollow strategies list
     *
     * Get autofollow strategies list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autofollowStrategiesGetTest() throws ApiException {
        List<Strategy> response = api.autofollowStrategiesGet();
        // TODO: test validations
    }

    /**
     * Create new autofollow strategy
     *
     * Create new autofollow strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autofollowStrategiesPostTest() throws ApiException {
        AutofollowStrategiesPostRequest body = null;
        AutofollowStrategiesPost200Response response = api.autofollowStrategiesPost(body);
        // TODO: test validations
    }

    /**
     * Update rules for strategy that was created with strategy builder
     *
     * Update rules for strategy that was created with strategy builder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autofollowStrategiesStrategyidContentPutTest() throws ApiException {
        Long strategyid = null;
        AutofollowStrategiesStrategyidContentPutRequest body = null;
        AutofollowStrategiesStrategyidContentPut200Response response = api.autofollowStrategiesStrategyidContentPut(strategyid, body);
        // TODO: test validations
    }

    /**
     * Get autofollow strategy by ID
     *
     * Get autofollow strategy by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autofollowStrategiesStrategyidGetTest() throws ApiException {
        Long strategyid = null;
        Strategy response = api.autofollowStrategiesStrategyidGet(strategyid);
        // TODO: test validations
    }

    /**
     * Get positions for strategy
     *
     * Get positions for strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autofollowStrategiesStrategyidPositionsGetTest() throws ApiException {
        Long strategyid = null;
        List<StrategyPosition> response = api.autofollowStrategiesStrategyidPositionsGet(strategyid);
        // TODO: test validations
    }

    /**
     * Update autofollow strategy
     *
     * Update autofollow strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autofollowStrategiesStrategyidPutTest() throws ApiException {
        Long strategyid = null;
        AutofollowStrategiesStrategyidPutRequest body = null;
        AutofollowStrategiesStrategyidPut200Response response = api.autofollowStrategiesStrategyidPut(strategyid, body);
        // TODO: test validations
    }

    /**
     * Get trading signals for strategy
     *
     * Get trading signals for strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autofollowStrategiesStrategyidSignalsGetTest() throws ApiException {
        Long strategyid = null;
        Long count = null;
        List<Signal> response = api.autofollowStrategiesStrategyidSignalsGet(strategyid, count);
        // TODO: test validations
    }

    /**
     * Send a new signal for autofollow strategy
     *
     * Send a new signal for autofollow strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autofollowStrategiesStrategyidSignalsPostTest() throws ApiException {
        Long strategyid = null;
        AutofollowStrategiesStrategyidSignalsPostRequest body = null;
        AutofollowStrategiesStrategyidSignalsPost200Response response = api.autofollowStrategiesStrategyidSignalsPost(strategyid, body);
        // TODO: test validations
    }

}
