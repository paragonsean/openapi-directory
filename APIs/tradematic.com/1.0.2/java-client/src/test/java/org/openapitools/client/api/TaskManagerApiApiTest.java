/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BacktestTrade;
import org.openapitools.client.model.ByMonths;
import org.openapitools.client.model.ByQuarters;
import org.openapitools.client.model.ByYears;
import org.openapitools.client.model.Contribution;
import org.openapitools.client.model.DrawdownItem;
import org.openapitools.client.model.EquityItem;
import org.openapitools.client.model.EquityPctItem;
import org.openapitools.client.model.EquityPctSmItem;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskmanagerTasksPost202Response;
import org.openapitools.client.model.TaskmanagerTasksPostRequest;
import org.openapitools.client.model.TaskmanagerTasksTaskidFolderGet200Response;
import org.openapitools.client.model.TaskmanagerTasksTaskidPerformanceGet200Response;
import org.openapitools.client.model.TaskmanagerTasksTaskidResult2Get200Response;
import org.openapitools.client.model.TaskmanagerTasksTaskidResultGet200Response;
import org.openapitools.client.model.TaskmanagerTasksTaskidStatusGet200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskManagerApiApi
 */
@Disabled
public class TaskManagerApiApiTest {

    private final TaskManagerApiApi api = new TaskManagerApiApi();

    /**
     * Get tasks list
     *
     * Get tasks list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksGetTest() throws ApiException {
        List<Task> response = api.taskmanagerTasksGet();
        // TODO: test validations
    }

    /**
     * Create a new task
     *
     * Create a new task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksPostTest() throws ApiException {
        TaskmanagerTasksPostRequest body = null;
        TaskmanagerTasksPost202Response response = api.taskmanagerTasksPost(body);
        // TODO: test validations
    }

    /**
     * Get backtest data for equity chart, grouped by months
     *
     * Get backtest data for equity chart, grouped by months
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidBymonthsGetTest() throws ApiException {
        Long taskid = null;
        List<ByMonths> response = api.taskmanagerTasksTaskidBymonthsGet(taskid);
        // TODO: test validations
    }

    /**
     * Get backtest data for equity chart, grouped by quarters
     *
     * Get backtest data for equity chart, grouped by quarters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidByquartersGetTest() throws ApiException {
        Long taskid = null;
        List<ByQuarters> response = api.taskmanagerTasksTaskidByquartersGet(taskid);
        // TODO: test validations
    }

    /**
     * Get backtest data for equity chart, grouped by years
     *
     * Get backtest data for equity chart, grouped by years
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidByyearsGetTest() throws ApiException {
        Long taskid = null;
        List<ByYears> response = api.taskmanagerTasksTaskidByyearsGet(taskid);
        // TODO: test validations
    }

    /**
     * Get backtest symbol contribution data
     *
     * Get backtest symbol contribution data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidContributionGetTest() throws ApiException {
        Long taskid = null;
        List<Contribution> response = api.taskmanagerTasksTaskidContributionGet(taskid);
        // TODO: test validations
    }

    /**
     * Get data for drawdown chart
     *
     * Get data for drawdown chart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidDrawdownGetTest() throws ApiException {
        Long taskid = null;
        List<DrawdownItem> response = api.taskmanagerTasksTaskidDrawdownGet(taskid);
        // TODO: test validations
    }

    /**
     * Get data for equity chart
     *
     * Get data for equity chart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidEquityGetTest() throws ApiException {
        Long taskid = null;
        List<EquityItem> response = api.taskmanagerTasksTaskidEquityGet(taskid);
        // TODO: test validations
    }

    /**
     * Get data for equity chart (%)
     *
     * Get data for equity chart (%)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidEquitypctGetTest() throws ApiException {
        Long taskid = null;
        List<EquityPctItem> response = api.taskmanagerTasksTaskidEquitypctGet(taskid);
        // TODO: test validations
    }

    /**
     * Get spared data for equity chart (%)
     *
     * Get spared data for equity chart (%)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidEquitypctsmGetTest() throws ApiException {
        Long taskid = null;
        List<EquityPctSmItem> response = api.taskmanagerTasksTaskidEquitypctsmGet(taskid);
        // TODO: test validations
    }

    /**
     * Get task result folder name
     *
     * Get task result folder name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidFolderGetTest() throws ApiException {
        Long taskid = null;
        TaskmanagerTasksTaskidFolderGet200Response response = api.taskmanagerTasksTaskidFolderGet(taskid);
        // TODO: test validations
    }

    /**
     * Get task by ID
     *
     * Get task by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidGetTest() throws ApiException {
        Long taskid = null;
        Task response = api.taskmanagerTasksTaskidGet(taskid);
        // TODO: test validations
    }

    /**
     * Get backtest statistics
     *
     * Get backtest statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidPerformanceGetTest() throws ApiException {
        Long taskid = null;
        TaskmanagerTasksTaskidPerformanceGet200Response response = api.taskmanagerTasksTaskidPerformanceGet(taskid);
        // TODO: test validations
    }

    /**
     * Get task result (version 2)
     *
     * Get task result (version 2)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidResult2GetTest() throws ApiException {
        Long taskid = null;
        TaskmanagerTasksTaskidResult2Get200Response response = api.taskmanagerTasksTaskidResult2Get(taskid);
        // TODO: test validations
    }

    /**
     * Get task result
     *
     * Get task result
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidResultGetTest() throws ApiException {
        Long taskid = null;
        TaskmanagerTasksTaskidResultGet200Response response = api.taskmanagerTasksTaskidResultGet(taskid);
        // TODO: test validations
    }

    /**
     * Get task status
     *
     * Get task status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidStatusGetTest() throws ApiException {
        Long taskid = null;
        TaskmanagerTasksTaskidStatusGet200Response response = api.taskmanagerTasksTaskidStatusGet(taskid);
        // TODO: test validations
    }

    /**
     * Get backtest trades list
     *
     * Get backtest trades list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskmanagerTasksTaskidTradesGetTest() throws ApiException {
        Long taskid = null;
        List<BacktestTrade> response = api.taskmanagerTasksTaskidTradesGet(taskid);
        // TODO: test validations
    }

}
