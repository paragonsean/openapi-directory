/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.Market;
import org.openapitools.client.model.MarketdataSymbolsSymbolidHistdataGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketDataApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarketDataApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketDataApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for marketdataMarketsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataMarketsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketdata/markets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketdataMarketsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return marketdataMarketsGetCall(_callback);

    }

    /**
     * Get markets list
     * Get markets list
     * @return List&lt;Market&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Market> marketdataMarketsGet() throws ApiException {
        ApiResponse<List<Market>> localVarResp = marketdataMarketsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get markets list
     * Get markets list
     * @return ApiResponse&lt;List&lt;Market&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Market>> marketdataMarketsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = marketdataMarketsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Market>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get markets list (asynchronously)
     * Get markets list
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataMarketsGetAsync(final ApiCallback<List<Market>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketdataMarketsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Market>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketdataMarketsMarketidGet
     * @param marketid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataMarketsMarketidGetCall(Long marketid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketdata/markets/{marketid}"
            .replace("{" + "marketid" + "}", localVarApiClient.escapeString(marketid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketdataMarketsMarketidGetValidateBeforeCall(Long marketid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketid' is set
        if (marketid == null) {
            throw new ApiException("Missing the required parameter 'marketid' when calling marketdataMarketsMarketidGet(Async)");
        }

        return marketdataMarketsMarketidGetCall(marketid, _callback);

    }

    /**
     * Get market by ID
     * Get market by ID
     * @param marketid  (required)
     * @return Market
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Market marketdataMarketsMarketidGet(Long marketid) throws ApiException {
        ApiResponse<Market> localVarResp = marketdataMarketsMarketidGetWithHttpInfo(marketid);
        return localVarResp.getData();
    }

    /**
     * Get market by ID
     * Get market by ID
     * @param marketid  (required)
     * @return ApiResponse&lt;Market&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Market> marketdataMarketsMarketidGetWithHttpInfo(Long marketid) throws ApiException {
        okhttp3.Call localVarCall = marketdataMarketsMarketidGetValidateBeforeCall(marketid, null);
        Type localVarReturnType = new TypeToken<Market>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get market by ID (asynchronously)
     * Get market by ID
     * @param marketid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataMarketsMarketidGetAsync(Long marketid, final ApiCallback<Market> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketdataMarketsMarketidGetValidateBeforeCall(marketid, _callback);
        Type localVarReturnType = new TypeToken<Market>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketdataSymbolsGet
     * @param marketid  (required)
     * @param filter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataSymbolsGetCall(Long marketid, Long filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketdata/symbols";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketid", marketid));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketdataSymbolsGetValidateBeforeCall(Long marketid, Long filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketid' is set
        if (marketid == null) {
            throw new ApiException("Missing the required parameter 'marketid' when calling marketdataSymbolsGet(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling marketdataSymbolsGet(Async)");
        }

        return marketdataSymbolsGetCall(marketid, filter, _callback);

    }

    /**
     * Get symbols list
     * Get symbols list
     * @param marketid  (required)
     * @param filter  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> marketdataSymbolsGet(Long marketid, Long filter) throws ApiException {
        ApiResponse<List<String>> localVarResp = marketdataSymbolsGetWithHttpInfo(marketid, filter);
        return localVarResp.getData();
    }

    /**
     * Get symbols list
     * Get symbols list
     * @param marketid  (required)
     * @param filter  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> marketdataSymbolsGetWithHttpInfo(Long marketid, Long filter) throws ApiException {
        okhttp3.Call localVarCall = marketdataSymbolsGetValidateBeforeCall(marketid, filter, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get symbols list (asynchronously)
     * Get symbols list
     * @param marketid  (required)
     * @param filter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataSymbolsGetAsync(Long marketid, Long filter, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketdataSymbolsGetValidateBeforeCall(marketid, filter, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketdataSymbolsSymbolidGet
     * @param symbolid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataSymbolsSymbolidGetCall(Long symbolid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketdata/symbols/{symbolid}"
            .replace("{" + "symbolid" + "}", localVarApiClient.escapeString(symbolid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketdataSymbolsSymbolidGetValidateBeforeCall(Long symbolid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolid' is set
        if (symbolid == null) {
            throw new ApiException("Missing the required parameter 'symbolid' when calling marketdataSymbolsSymbolidGet(Async)");
        }

        return marketdataSymbolsSymbolidGetCall(symbolid, _callback);

    }

    /**
     * Get symbol by ID
     * Get symbol by ID
     * @param symbolid  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String marketdataSymbolsSymbolidGet(Long symbolid) throws ApiException {
        ApiResponse<String> localVarResp = marketdataSymbolsSymbolidGetWithHttpInfo(symbolid);
        return localVarResp.getData();
    }

    /**
     * Get symbol by ID
     * Get symbol by ID
     * @param symbolid  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> marketdataSymbolsSymbolidGetWithHttpInfo(Long symbolid) throws ApiException {
        okhttp3.Call localVarCall = marketdataSymbolsSymbolidGetValidateBeforeCall(symbolid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get symbol by ID (asynchronously)
     * Get symbol by ID
     * @param symbolid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataSymbolsSymbolidGetAsync(Long symbolid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketdataSymbolsSymbolidGetValidateBeforeCall(symbolid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketdataSymbolsSymbolidHistdataGet
     * @param symbolid  (required)
     * @param tf  (required)
     * @param from  (required)
     * @param to  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataSymbolsSymbolidHistdataGetCall(Long symbolid, Long tf, Long from, Long to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketdata/symbols/{symbolid}/histdata"
            .replace("{" + "symbolid" + "}", localVarApiClient.escapeString(symbolid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tf", tf));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketdataSymbolsSymbolidHistdataGetValidateBeforeCall(Long symbolid, Long tf, Long from, Long to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolid' is set
        if (symbolid == null) {
            throw new ApiException("Missing the required parameter 'symbolid' when calling marketdataSymbolsSymbolidHistdataGet(Async)");
        }

        // verify the required parameter 'tf' is set
        if (tf == null) {
            throw new ApiException("Missing the required parameter 'tf' when calling marketdataSymbolsSymbolidHistdataGet(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling marketdataSymbolsSymbolidHistdataGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling marketdataSymbolsSymbolidHistdataGet(Async)");
        }

        return marketdataSymbolsSymbolidHistdataGetCall(symbolid, tf, from, to, _callback);

    }

    /**
     * Get historical data for instrument
     * Get historical data for instrument
     * @param symbolid  (required)
     * @param tf  (required)
     * @param from  (required)
     * @param to  (required)
     * @return MarketdataSymbolsSymbolidHistdataGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public MarketdataSymbolsSymbolidHistdataGet200Response marketdataSymbolsSymbolidHistdataGet(Long symbolid, Long tf, Long from, Long to) throws ApiException {
        ApiResponse<MarketdataSymbolsSymbolidHistdataGet200Response> localVarResp = marketdataSymbolsSymbolidHistdataGetWithHttpInfo(symbolid, tf, from, to);
        return localVarResp.getData();
    }

    /**
     * Get historical data for instrument
     * Get historical data for instrument
     * @param symbolid  (required)
     * @param tf  (required)
     * @param from  (required)
     * @param to  (required)
     * @return ApiResponse&lt;MarketdataSymbolsSymbolidHistdataGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketdataSymbolsSymbolidHistdataGet200Response> marketdataSymbolsSymbolidHistdataGetWithHttpInfo(Long symbolid, Long tf, Long from, Long to) throws ApiException {
        okhttp3.Call localVarCall = marketdataSymbolsSymbolidHistdataGetValidateBeforeCall(symbolid, tf, from, to, null);
        Type localVarReturnType = new TypeToken<MarketdataSymbolsSymbolidHistdataGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get historical data for instrument (asynchronously)
     * Get historical data for instrument
     * @param symbolid  (required)
     * @param tf  (required)
     * @param from  (required)
     * @param to  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataSymbolsSymbolidHistdataGetAsync(Long symbolid, Long tf, Long from, Long to, final ApiCallback<MarketdataSymbolsSymbolidHistdataGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketdataSymbolsSymbolidHistdataGetValidateBeforeCall(symbolid, tf, from, to, _callback);
        Type localVarReturnType = new TypeToken<MarketdataSymbolsSymbolidHistdataGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
