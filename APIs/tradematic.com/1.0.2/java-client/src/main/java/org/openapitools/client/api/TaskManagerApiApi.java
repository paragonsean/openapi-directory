/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BacktestTrade;
import org.openapitools.client.model.ByMonths;
import org.openapitools.client.model.ByQuarters;
import org.openapitools.client.model.ByYears;
import org.openapitools.client.model.Contribution;
import org.openapitools.client.model.DrawdownItem;
import org.openapitools.client.model.EquityItem;
import org.openapitools.client.model.EquityPctItem;
import org.openapitools.client.model.EquityPctSmItem;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskmanagerTasksPost202Response;
import org.openapitools.client.model.TaskmanagerTasksPostRequest;
import org.openapitools.client.model.TaskmanagerTasksTaskidFolderGet200Response;
import org.openapitools.client.model.TaskmanagerTasksTaskidPerformanceGet200Response;
import org.openapitools.client.model.TaskmanagerTasksTaskidResult2Get200Response;
import org.openapitools.client.model.TaskmanagerTasksTaskidResultGet200Response;
import org.openapitools.client.model.TaskmanagerTasksTaskidStatusGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskManagerApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskManagerApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskManagerApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for taskmanagerTasksGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return taskmanagerTasksGetCall(_callback);

    }

    /**
     * Get tasks list
     * Get tasks list
     * @return List&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Task> taskmanagerTasksGet() throws ApiException {
        ApiResponse<List<Task>> localVarResp = taskmanagerTasksGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get tasks list
     * Get tasks list
     * @return ApiResponse&lt;List&lt;Task&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Task>> taskmanagerTasksGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks list (asynchronously)
     * Get tasks list
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksGetAsync(final ApiCallback<List<Task>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksPostCall(TaskmanagerTasksPostRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksPostValidateBeforeCall(TaskmanagerTasksPostRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling taskmanagerTasksPost(Async)");
        }

        return taskmanagerTasksPostCall(body, _callback);

    }

    /**
     * Create a new task
     * Create a new task
     * @param body  (required)
     * @return TaskmanagerTasksPost202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TaskmanagerTasksPost202Response taskmanagerTasksPost(TaskmanagerTasksPostRequest body) throws ApiException {
        ApiResponse<TaskmanagerTasksPost202Response> localVarResp = taskmanagerTasksPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new task
     * Create a new task
     * @param body  (required)
     * @return ApiResponse&lt;TaskmanagerTasksPost202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskmanagerTasksPost202Response> taskmanagerTasksPostWithHttpInfo(TaskmanagerTasksPostRequest body) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksPost202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new task (asynchronously)
     * Create a new task
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksPostAsync(TaskmanagerTasksPostRequest body, final ApiCallback<TaskmanagerTasksPost202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksPost202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidBymonthsGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidBymonthsGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/bymonths"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidBymonthsGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidBymonthsGet(Async)");
        }

        return taskmanagerTasksTaskidBymonthsGetCall(taskid, _callback);

    }

    /**
     * Get backtest data for equity chart, grouped by months
     * Get backtest data for equity chart, grouped by months
     * @param taskid  (required)
     * @return List&lt;ByMonths&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ByMonths> taskmanagerTasksTaskidBymonthsGet(Long taskid) throws ApiException {
        ApiResponse<List<ByMonths>> localVarResp = taskmanagerTasksTaskidBymonthsGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get backtest data for equity chart, grouped by months
     * Get backtest data for equity chart, grouped by months
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;ByMonths&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ByMonths>> taskmanagerTasksTaskidBymonthsGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidBymonthsGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<ByMonths>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get backtest data for equity chart, grouped by months (asynchronously)
     * Get backtest data for equity chart, grouped by months
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidBymonthsGetAsync(Long taskid, final ApiCallback<List<ByMonths>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidBymonthsGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<ByMonths>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidByquartersGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidByquartersGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/byquarters"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidByquartersGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidByquartersGet(Async)");
        }

        return taskmanagerTasksTaskidByquartersGetCall(taskid, _callback);

    }

    /**
     * Get backtest data for equity chart, grouped by quarters
     * Get backtest data for equity chart, grouped by quarters
     * @param taskid  (required)
     * @return List&lt;ByQuarters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ByQuarters> taskmanagerTasksTaskidByquartersGet(Long taskid) throws ApiException {
        ApiResponse<List<ByQuarters>> localVarResp = taskmanagerTasksTaskidByquartersGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get backtest data for equity chart, grouped by quarters
     * Get backtest data for equity chart, grouped by quarters
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;ByQuarters&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ByQuarters>> taskmanagerTasksTaskidByquartersGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidByquartersGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<ByQuarters>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get backtest data for equity chart, grouped by quarters (asynchronously)
     * Get backtest data for equity chart, grouped by quarters
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidByquartersGetAsync(Long taskid, final ApiCallback<List<ByQuarters>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidByquartersGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<ByQuarters>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidByyearsGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidByyearsGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/byyears"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidByyearsGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidByyearsGet(Async)");
        }

        return taskmanagerTasksTaskidByyearsGetCall(taskid, _callback);

    }

    /**
     * Get backtest data for equity chart, grouped by years
     * Get backtest data for equity chart, grouped by years
     * @param taskid  (required)
     * @return List&lt;ByYears&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ByYears> taskmanagerTasksTaskidByyearsGet(Long taskid) throws ApiException {
        ApiResponse<List<ByYears>> localVarResp = taskmanagerTasksTaskidByyearsGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get backtest data for equity chart, grouped by years
     * Get backtest data for equity chart, grouped by years
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;ByYears&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ByYears>> taskmanagerTasksTaskidByyearsGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidByyearsGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<ByYears>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get backtest data for equity chart, grouped by years (asynchronously)
     * Get backtest data for equity chart, grouped by years
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidByyearsGetAsync(Long taskid, final ApiCallback<List<ByYears>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidByyearsGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<ByYears>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidContributionGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidContributionGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/contribution"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidContributionGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidContributionGet(Async)");
        }

        return taskmanagerTasksTaskidContributionGetCall(taskid, _callback);

    }

    /**
     * Get backtest symbol contribution data
     * Get backtest symbol contribution data
     * @param taskid  (required)
     * @return List&lt;Contribution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Contribution> taskmanagerTasksTaskidContributionGet(Long taskid) throws ApiException {
        ApiResponse<List<Contribution>> localVarResp = taskmanagerTasksTaskidContributionGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get backtest symbol contribution data
     * Get backtest symbol contribution data
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;Contribution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Contribution>> taskmanagerTasksTaskidContributionGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidContributionGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<Contribution>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get backtest symbol contribution data (asynchronously)
     * Get backtest symbol contribution data
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidContributionGetAsync(Long taskid, final ApiCallback<List<Contribution>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidContributionGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<Contribution>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidDrawdownGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidDrawdownGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/drawdown"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidDrawdownGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidDrawdownGet(Async)");
        }

        return taskmanagerTasksTaskidDrawdownGetCall(taskid, _callback);

    }

    /**
     * Get data for drawdown chart
     * Get data for drawdown chart
     * @param taskid  (required)
     * @return List&lt;DrawdownItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DrawdownItem> taskmanagerTasksTaskidDrawdownGet(Long taskid) throws ApiException {
        ApiResponse<List<DrawdownItem>> localVarResp = taskmanagerTasksTaskidDrawdownGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get data for drawdown chart
     * Get data for drawdown chart
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;DrawdownItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DrawdownItem>> taskmanagerTasksTaskidDrawdownGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidDrawdownGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<DrawdownItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data for drawdown chart (asynchronously)
     * Get data for drawdown chart
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidDrawdownGetAsync(Long taskid, final ApiCallback<List<DrawdownItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidDrawdownGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<DrawdownItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidEquityGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidEquityGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/equity"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidEquityGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidEquityGet(Async)");
        }

        return taskmanagerTasksTaskidEquityGetCall(taskid, _callback);

    }

    /**
     * Get data for equity chart
     * Get data for equity chart
     * @param taskid  (required)
     * @return List&lt;EquityItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<EquityItem> taskmanagerTasksTaskidEquityGet(Long taskid) throws ApiException {
        ApiResponse<List<EquityItem>> localVarResp = taskmanagerTasksTaskidEquityGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get data for equity chart
     * Get data for equity chart
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;EquityItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EquityItem>> taskmanagerTasksTaskidEquityGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidEquityGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<EquityItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data for equity chart (asynchronously)
     * Get data for equity chart
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidEquityGetAsync(Long taskid, final ApiCallback<List<EquityItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidEquityGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<EquityItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidEquitypctGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidEquitypctGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/equitypct"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidEquitypctGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidEquitypctGet(Async)");
        }

        return taskmanagerTasksTaskidEquitypctGetCall(taskid, _callback);

    }

    /**
     * Get data for equity chart (%)
     * Get data for equity chart (%)
     * @param taskid  (required)
     * @return List&lt;EquityPctItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<EquityPctItem> taskmanagerTasksTaskidEquitypctGet(Long taskid) throws ApiException {
        ApiResponse<List<EquityPctItem>> localVarResp = taskmanagerTasksTaskidEquitypctGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get data for equity chart (%)
     * Get data for equity chart (%)
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;EquityPctItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EquityPctItem>> taskmanagerTasksTaskidEquitypctGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidEquitypctGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<EquityPctItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data for equity chart (%) (asynchronously)
     * Get data for equity chart (%)
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidEquitypctGetAsync(Long taskid, final ApiCallback<List<EquityPctItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidEquitypctGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<EquityPctItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidEquitypctsmGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidEquitypctsmGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/equitypctsm"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidEquitypctsmGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidEquitypctsmGet(Async)");
        }

        return taskmanagerTasksTaskidEquitypctsmGetCall(taskid, _callback);

    }

    /**
     * Get spared data for equity chart (%)
     * Get spared data for equity chart (%)
     * @param taskid  (required)
     * @return List&lt;EquityPctSmItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<EquityPctSmItem> taskmanagerTasksTaskidEquitypctsmGet(Long taskid) throws ApiException {
        ApiResponse<List<EquityPctSmItem>> localVarResp = taskmanagerTasksTaskidEquitypctsmGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get spared data for equity chart (%)
     * Get spared data for equity chart (%)
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;EquityPctSmItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EquityPctSmItem>> taskmanagerTasksTaskidEquitypctsmGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidEquitypctsmGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<EquityPctSmItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get spared data for equity chart (%) (asynchronously)
     * Get spared data for equity chart (%)
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidEquitypctsmGetAsync(Long taskid, final ApiCallback<List<EquityPctSmItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidEquitypctsmGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<EquityPctSmItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidFolderGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidFolderGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/folder"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidFolderGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidFolderGet(Async)");
        }

        return taskmanagerTasksTaskidFolderGetCall(taskid, _callback);

    }

    /**
     * Get task result folder name
     * Get task result folder name
     * @param taskid  (required)
     * @return TaskmanagerTasksTaskidFolderGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TaskmanagerTasksTaskidFolderGet200Response taskmanagerTasksTaskidFolderGet(Long taskid) throws ApiException {
        ApiResponse<TaskmanagerTasksTaskidFolderGet200Response> localVarResp = taskmanagerTasksTaskidFolderGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get task result folder name
     * Get task result folder name
     * @param taskid  (required)
     * @return ApiResponse&lt;TaskmanagerTasksTaskidFolderGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskmanagerTasksTaskidFolderGet200Response> taskmanagerTasksTaskidFolderGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidFolderGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidFolderGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task result folder name (asynchronously)
     * Get task result folder name
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidFolderGetAsync(Long taskid, final ApiCallback<TaskmanagerTasksTaskidFolderGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidFolderGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidFolderGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidGet(Async)");
        }

        return taskmanagerTasksTaskidGetCall(taskid, _callback);

    }

    /**
     * Get task by ID
     * Get task by ID
     * @param taskid  (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Task taskmanagerTasksTaskidGet(Long taskid) throws ApiException {
        ApiResponse<Task> localVarResp = taskmanagerTasksTaskidGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get task by ID
     * Get task by ID
     * @param taskid  (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> taskmanagerTasksTaskidGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task by ID (asynchronously)
     * Get task by ID
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidGetAsync(Long taskid, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidPerformanceGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidPerformanceGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/performance"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidPerformanceGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidPerformanceGet(Async)");
        }

        return taskmanagerTasksTaskidPerformanceGetCall(taskid, _callback);

    }

    /**
     * Get backtest statistics
     * Get backtest statistics
     * @param taskid  (required)
     * @return TaskmanagerTasksTaskidPerformanceGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TaskmanagerTasksTaskidPerformanceGet200Response taskmanagerTasksTaskidPerformanceGet(Long taskid) throws ApiException {
        ApiResponse<TaskmanagerTasksTaskidPerformanceGet200Response> localVarResp = taskmanagerTasksTaskidPerformanceGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get backtest statistics
     * Get backtest statistics
     * @param taskid  (required)
     * @return ApiResponse&lt;TaskmanagerTasksTaskidPerformanceGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskmanagerTasksTaskidPerformanceGet200Response> taskmanagerTasksTaskidPerformanceGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidPerformanceGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidPerformanceGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get backtest statistics (asynchronously)
     * Get backtest statistics
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidPerformanceGetAsync(Long taskid, final ApiCallback<TaskmanagerTasksTaskidPerformanceGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidPerformanceGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidPerformanceGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidResult2Get
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidResult2GetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/result2"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidResult2GetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidResult2Get(Async)");
        }

        return taskmanagerTasksTaskidResult2GetCall(taskid, _callback);

    }

    /**
     * Get task result (version 2)
     * Get task result (version 2)
     * @param taskid  (required)
     * @return TaskmanagerTasksTaskidResult2Get200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TaskmanagerTasksTaskidResult2Get200Response taskmanagerTasksTaskidResult2Get(Long taskid) throws ApiException {
        ApiResponse<TaskmanagerTasksTaskidResult2Get200Response> localVarResp = taskmanagerTasksTaskidResult2GetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get task result (version 2)
     * Get task result (version 2)
     * @param taskid  (required)
     * @return ApiResponse&lt;TaskmanagerTasksTaskidResult2Get200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskmanagerTasksTaskidResult2Get200Response> taskmanagerTasksTaskidResult2GetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidResult2GetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidResult2Get200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task result (version 2) (asynchronously)
     * Get task result (version 2)
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidResult2GetAsync(Long taskid, final ApiCallback<TaskmanagerTasksTaskidResult2Get200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidResult2GetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidResult2Get200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidResultGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidResultGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/result"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidResultGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidResultGet(Async)");
        }

        return taskmanagerTasksTaskidResultGetCall(taskid, _callback);

    }

    /**
     * Get task result
     * Get task result
     * @param taskid  (required)
     * @return TaskmanagerTasksTaskidResultGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TaskmanagerTasksTaskidResultGet200Response taskmanagerTasksTaskidResultGet(Long taskid) throws ApiException {
        ApiResponse<TaskmanagerTasksTaskidResultGet200Response> localVarResp = taskmanagerTasksTaskidResultGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get task result
     * Get task result
     * @param taskid  (required)
     * @return ApiResponse&lt;TaskmanagerTasksTaskidResultGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskmanagerTasksTaskidResultGet200Response> taskmanagerTasksTaskidResultGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidResultGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidResultGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task result (asynchronously)
     * Get task result
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidResultGetAsync(Long taskid, final ApiCallback<TaskmanagerTasksTaskidResultGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidResultGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidResultGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidStatusGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidStatusGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/status"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidStatusGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidStatusGet(Async)");
        }

        return taskmanagerTasksTaskidStatusGetCall(taskid, _callback);

    }

    /**
     * Get task status
     * Get task status
     * @param taskid  (required)
     * @return TaskmanagerTasksTaskidStatusGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TaskmanagerTasksTaskidStatusGet200Response taskmanagerTasksTaskidStatusGet(Long taskid) throws ApiException {
        ApiResponse<TaskmanagerTasksTaskidStatusGet200Response> localVarResp = taskmanagerTasksTaskidStatusGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get task status
     * Get task status
     * @param taskid  (required)
     * @return ApiResponse&lt;TaskmanagerTasksTaskidStatusGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskmanagerTasksTaskidStatusGet200Response> taskmanagerTasksTaskidStatusGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidStatusGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidStatusGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task status (asynchronously)
     * Get task status
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidStatusGetAsync(Long taskid, final ApiCallback<TaskmanagerTasksTaskidStatusGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidStatusGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<TaskmanagerTasksTaskidStatusGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskmanagerTasksTaskidTradesGet
     * @param taskid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidTradesGetCall(Long taskid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanager/tasks/{taskid}/trades"
            .replace("{" + "taskid" + "}", localVarApiClient.escapeString(taskid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskmanagerTasksTaskidTradesGetValidateBeforeCall(Long taskid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskmanagerTasksTaskidTradesGet(Async)");
        }

        return taskmanagerTasksTaskidTradesGetCall(taskid, _callback);

    }

    /**
     * Get backtest trades list
     * Get backtest trades list
     * @param taskid  (required)
     * @return List&lt;BacktestTrade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<BacktestTrade> taskmanagerTasksTaskidTradesGet(Long taskid) throws ApiException {
        ApiResponse<List<BacktestTrade>> localVarResp = taskmanagerTasksTaskidTradesGetWithHttpInfo(taskid);
        return localVarResp.getData();
    }

    /**
     * Get backtest trades list
     * Get backtest trades list
     * @param taskid  (required)
     * @return ApiResponse&lt;List&lt;BacktestTrade&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BacktestTrade>> taskmanagerTasksTaskidTradesGetWithHttpInfo(Long taskid) throws ApiException {
        okhttp3.Call localVarCall = taskmanagerTasksTaskidTradesGetValidateBeforeCall(taskid, null);
        Type localVarReturnType = new TypeToken<List<BacktestTrade>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get backtest trades list (asynchronously)
     * Get backtest trades list
     * @param taskid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskmanagerTasksTaskidTradesGetAsync(Long taskid, final ApiCallback<List<BacktestTrade>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskmanagerTasksTaskidTradesGetValidateBeforeCall(taskid, _callback);
        Type localVarReturnType = new TypeToken<List<BacktestTrade>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
