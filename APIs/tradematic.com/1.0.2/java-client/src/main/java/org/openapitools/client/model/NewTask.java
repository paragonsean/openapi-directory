/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewTask {
  public static final String SERIALIZED_NAME_ISBENCHMARK = "isbenchmark";
  @SerializedName(SERIALIZED_NAME_ISBENCHMARK)
  private String isbenchmark;

  public static final String SERIALIZED_NAME_STRATEGYID = "strategyid";
  @SerializedName(SERIALIZED_NAME_STRATEGYID)
  private String strategyid;

  public static final String SERIALIZED_NAME_TASKTYPEID = "tasktypeid";
  @SerializedName(SERIALIZED_NAME_TASKTYPEID)
  private String tasktypeid;

  public static final String SERIALIZED_NAME_USERID2 = "userid2";
  @SerializedName(SERIALIZED_NAME_USERID2)
  private String userid2;

  public NewTask() {
  }

  public NewTask isbenchmark(String isbenchmark) {
    this.isbenchmark = isbenchmark;
    return this;
  }

  /**
   * Get isbenchmark
   * @return isbenchmark
   */
  @javax.annotation.Nullable
  public String getIsbenchmark() {
    return isbenchmark;
  }

  public void setIsbenchmark(String isbenchmark) {
    this.isbenchmark = isbenchmark;
  }


  public NewTask strategyid(String strategyid) {
    this.strategyid = strategyid;
    return this;
  }

  /**
   * Get strategyid
   * @return strategyid
   */
  @javax.annotation.Nullable
  public String getStrategyid() {
    return strategyid;
  }

  public void setStrategyid(String strategyid) {
    this.strategyid = strategyid;
  }


  public NewTask tasktypeid(String tasktypeid) {
    this.tasktypeid = tasktypeid;
    return this;
  }

  /**
   * Get tasktypeid
   * @return tasktypeid
   */
  @javax.annotation.Nullable
  public String getTasktypeid() {
    return tasktypeid;
  }

  public void setTasktypeid(String tasktypeid) {
    this.tasktypeid = tasktypeid;
  }


  public NewTask userid2(String userid2) {
    this.userid2 = userid2;
    return this;
  }

  /**
   * Get userid2
   * @return userid2
   */
  @javax.annotation.Nullable
  public String getUserid2() {
    return userid2;
  }

  public void setUserid2(String userid2) {
    this.userid2 = userid2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewTask newTask = (NewTask) o;
    return Objects.equals(this.isbenchmark, newTask.isbenchmark) &&
        Objects.equals(this.strategyid, newTask.strategyid) &&
        Objects.equals(this.tasktypeid, newTask.tasktypeid) &&
        Objects.equals(this.userid2, newTask.userid2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isbenchmark, strategyid, tasktypeid, userid2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewTask {\n");
    sb.append("    isbenchmark: ").append(toIndentedString(isbenchmark)).append("\n");
    sb.append("    strategyid: ").append(toIndentedString(strategyid)).append("\n");
    sb.append("    tasktypeid: ").append(toIndentedString(tasktypeid)).append("\n");
    sb.append("    userid2: ").append(toIndentedString(userid2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isbenchmark");
    openapiFields.add("strategyid");
    openapiFields.add("tasktypeid");
    openapiFields.add("userid2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewTask is not found in the empty JSON string", NewTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("isbenchmark") != null && !jsonObj.get("isbenchmark").isJsonNull()) && !jsonObj.get("isbenchmark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isbenchmark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isbenchmark").toString()));
      }
      if ((jsonObj.get("strategyid") != null && !jsonObj.get("strategyid").isJsonNull()) && !jsonObj.get("strategyid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategyid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategyid").toString()));
      }
      if ((jsonObj.get("tasktypeid") != null && !jsonObj.get("tasktypeid").isJsonNull()) && !jsonObj.get("tasktypeid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasktypeid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tasktypeid").toString()));
      }
      if ((jsonObj.get("userid2") != null && !jsonObj.get("userid2").isJsonNull()) && !jsonObj.get("userid2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userid2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userid2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewTask.class));

       return (TypeAdapter<T>) new TypeAdapter<NewTask>() {
           @Override
           public void write(JsonWriter out, NewTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewTask
   * @throws IOException if the JSON string is invalid with respect to NewTask
   */
  public static NewTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewTask.class);
  }

  /**
   * Convert an instance of NewTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

