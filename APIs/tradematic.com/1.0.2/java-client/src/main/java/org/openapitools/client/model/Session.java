/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Session
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Session {
  public static final String SERIALIZED_NAME_COMPUTER = "computer";
  @SerializedName(SERIALIZED_NAME_COMPUTER)
  private String computer;

  public static final String SERIALIZED_NAME_HWID = "hwid";
  @SerializedName(SERIALIZED_NAME_HWID)
  private String hwid;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_SESSIONID = "sessionid";
  @SerializedName(SERIALIZED_NAME_SESSIONID)
  private String sessionid;

  public static final String SERIALIZED_NAME_SESSIONMODENAME = "sessionmodename";
  @SerializedName(SERIALIZED_NAME_SESSIONMODENAME)
  private String sessionmodename;

  public static final String SERIALIZED_NAME_SESSIONSTATUSNAME = "sessionstatusname";
  @SerializedName(SERIALIZED_NAME_SESSIONSTATUSNAME)
  private String sessionstatusname;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private String userid;

  public Session() {
  }

  public Session computer(String computer) {
    this.computer = computer;
    return this;
  }

  /**
   * Get computer
   * @return computer
   */
  @javax.annotation.Nullable
  public String getComputer() {
    return computer;
  }

  public void setComputer(String computer) {
    this.computer = computer;
  }


  public Session hwid(String hwid) {
    this.hwid = hwid;
    return this;
  }

  /**
   * Get hwid
   * @return hwid
   */
  @javax.annotation.Nullable
  public String getHwid() {
    return hwid;
  }

  public void setHwid(String hwid) {
    this.hwid = hwid;
  }


  public Session login(String login) {
    this.login = login;
    return this;
  }

  /**
   * Get login
   * @return login
   */
  @javax.annotation.Nullable
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }


  public Session mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public Session sessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  /**
   * Get sessionid
   * @return sessionid
   */
  @javax.annotation.Nullable
  public String getSessionid() {
    return sessionid;
  }

  public void setSessionid(String sessionid) {
    this.sessionid = sessionid;
  }


  public Session sessionmodename(String sessionmodename) {
    this.sessionmodename = sessionmodename;
    return this;
  }

  /**
   * Get sessionmodename
   * @return sessionmodename
   */
  @javax.annotation.Nullable
  public String getSessionmodename() {
    return sessionmodename;
  }

  public void setSessionmodename(String sessionmodename) {
    this.sessionmodename = sessionmodename;
  }


  public Session sessionstatusname(String sessionstatusname) {
    this.sessionstatusname = sessionstatusname;
    return this;
  }

  /**
   * Get sessionstatusname
   * @return sessionstatusname
   */
  @javax.annotation.Nullable
  public String getSessionstatusname() {
    return sessionstatusname;
  }

  public void setSessionstatusname(String sessionstatusname) {
    this.sessionstatusname = sessionstatusname;
  }


  public Session status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Session timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public Session type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Session userid(String userid) {
    this.userid = userid;
    return this;
  }

  /**
   * Get userid
   * @return userid
   */
  @javax.annotation.Nullable
  public String getUserid() {
    return userid;
  }

  public void setUserid(String userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.computer, session.computer) &&
        Objects.equals(this.hwid, session.hwid) &&
        Objects.equals(this.login, session.login) &&
        Objects.equals(this.mode, session.mode) &&
        Objects.equals(this.sessionid, session.sessionid) &&
        Objects.equals(this.sessionmodename, session.sessionmodename) &&
        Objects.equals(this.sessionstatusname, session.sessionstatusname) &&
        Objects.equals(this.status, session.status) &&
        Objects.equals(this.timestamp, session.timestamp) &&
        Objects.equals(this.type, session.type) &&
        Objects.equals(this.userid, session.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computer, hwid, login, mode, sessionid, sessionmodename, sessionstatusname, status, timestamp, type, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    computer: ").append(toIndentedString(computer)).append("\n");
    sb.append("    hwid: ").append(toIndentedString(hwid)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    sessionid: ").append(toIndentedString(sessionid)).append("\n");
    sb.append("    sessionmodename: ").append(toIndentedString(sessionmodename)).append("\n");
    sb.append("    sessionstatusname: ").append(toIndentedString(sessionstatusname)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computer");
    openapiFields.add("hwid");
    openapiFields.add("login");
    openapiFields.add("mode");
    openapiFields.add("sessionid");
    openapiFields.add("sessionmodename");
    openapiFields.add("sessionstatusname");
    openapiFields.add("status");
    openapiFields.add("timestamp");
    openapiFields.add("type");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Session
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Session.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Session.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Session` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computer") != null && !jsonObj.get("computer").isJsonNull()) && !jsonObj.get("computer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computer").toString()));
      }
      if ((jsonObj.get("hwid") != null && !jsonObj.get("hwid").isJsonNull()) && !jsonObj.get("hwid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hwid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hwid").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("sessionid") != null && !jsonObj.get("sessionid").isJsonNull()) && !jsonObj.get("sessionid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionid").toString()));
      }
      if ((jsonObj.get("sessionmodename") != null && !jsonObj.get("sessionmodename").isJsonNull()) && !jsonObj.get("sessionmodename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionmodename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionmodename").toString()));
      }
      if ((jsonObj.get("sessionstatusname") != null && !jsonObj.get("sessionstatusname").isJsonNull()) && !jsonObj.get("sessionstatusname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionstatusname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionstatusname").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("userid") != null && !jsonObj.get("userid").isJsonNull()) && !jsonObj.get("userid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Session given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Session
   * @throws IOException if the JSON string is invalid with respect to Session
   */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

  /**
   * Convert an instance of Session to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

