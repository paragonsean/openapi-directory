/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Taskresult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Taskresult {
  public static final String SERIALIZED_NAME_APR = "apr";
  @SerializedName(SERIALIZED_NAME_APR)
  private String apr;

  public static final String SERIALIZED_NAME_CUR_MONTH_PROFIT = "curMonthProfit";
  @SerializedName(SERIALIZED_NAME_CUR_MONTH_PROFIT)
  private String curMonthProfit;

  public static final String SERIALIZED_NAME_CUR_YEAR_PROFIT = "curYearProfit";
  @SerializedName(SERIALIZED_NAME_CUR_YEAR_PROFIT)
  private String curYearProfit;

  public static final String SERIALIZED_NAME_DRAWDOWN = "drawdown";
  @SerializedName(SERIALIZED_NAME_DRAWDOWN)
  private String drawdown;

  public static final String SERIALIZED_NAME_HALF_YEAR_PROFIT = "halfYearProfit";
  @SerializedName(SERIALIZED_NAME_HALF_YEAR_PROFIT)
  private String halfYearProfit;

  public static final String SERIALIZED_NAME_MONTH_PROFIT = "monthProfit";
  @SerializedName(SERIALIZED_NAME_MONTH_PROFIT)
  private String monthProfit;

  public static final String SERIALIZED_NAME_PREV_MONTH_PROFIT = "prevMonthProfit";
  @SerializedName(SERIALIZED_NAME_PREV_MONTH_PROFIT)
  private String prevMonthProfit;

  public static final String SERIALIZED_NAME_TOTAL_PROFIT = "totalProfit";
  @SerializedName(SERIALIZED_NAME_TOTAL_PROFIT)
  private String totalProfit;

  public static final String SERIALIZED_NAME_WEEK_PROFIT = "weekProfit";
  @SerializedName(SERIALIZED_NAME_WEEK_PROFIT)
  private String weekProfit;

  public static final String SERIALIZED_NAME_YEAR_PROFIT = "yearProfit";
  @SerializedName(SERIALIZED_NAME_YEAR_PROFIT)
  private String yearProfit;

  public Taskresult() {
  }

  public Taskresult apr(String apr) {
    this.apr = apr;
    return this;
  }

  /**
   * Get apr
   * @return apr
   */
  @javax.annotation.Nullable
  public String getApr() {
    return apr;
  }

  public void setApr(String apr) {
    this.apr = apr;
  }


  public Taskresult curMonthProfit(String curMonthProfit) {
    this.curMonthProfit = curMonthProfit;
    return this;
  }

  /**
   * Get curMonthProfit
   * @return curMonthProfit
   */
  @javax.annotation.Nullable
  public String getCurMonthProfit() {
    return curMonthProfit;
  }

  public void setCurMonthProfit(String curMonthProfit) {
    this.curMonthProfit = curMonthProfit;
  }


  public Taskresult curYearProfit(String curYearProfit) {
    this.curYearProfit = curYearProfit;
    return this;
  }

  /**
   * Get curYearProfit
   * @return curYearProfit
   */
  @javax.annotation.Nullable
  public String getCurYearProfit() {
    return curYearProfit;
  }

  public void setCurYearProfit(String curYearProfit) {
    this.curYearProfit = curYearProfit;
  }


  public Taskresult drawdown(String drawdown) {
    this.drawdown = drawdown;
    return this;
  }

  /**
   * Get drawdown
   * @return drawdown
   */
  @javax.annotation.Nullable
  public String getDrawdown() {
    return drawdown;
  }

  public void setDrawdown(String drawdown) {
    this.drawdown = drawdown;
  }


  public Taskresult halfYearProfit(String halfYearProfit) {
    this.halfYearProfit = halfYearProfit;
    return this;
  }

  /**
   * Get halfYearProfit
   * @return halfYearProfit
   */
  @javax.annotation.Nullable
  public String getHalfYearProfit() {
    return halfYearProfit;
  }

  public void setHalfYearProfit(String halfYearProfit) {
    this.halfYearProfit = halfYearProfit;
  }


  public Taskresult monthProfit(String monthProfit) {
    this.monthProfit = monthProfit;
    return this;
  }

  /**
   * Get monthProfit
   * @return monthProfit
   */
  @javax.annotation.Nullable
  public String getMonthProfit() {
    return monthProfit;
  }

  public void setMonthProfit(String monthProfit) {
    this.monthProfit = monthProfit;
  }


  public Taskresult prevMonthProfit(String prevMonthProfit) {
    this.prevMonthProfit = prevMonthProfit;
    return this;
  }

  /**
   * Get prevMonthProfit
   * @return prevMonthProfit
   */
  @javax.annotation.Nullable
  public String getPrevMonthProfit() {
    return prevMonthProfit;
  }

  public void setPrevMonthProfit(String prevMonthProfit) {
    this.prevMonthProfit = prevMonthProfit;
  }


  public Taskresult totalProfit(String totalProfit) {
    this.totalProfit = totalProfit;
    return this;
  }

  /**
   * Get totalProfit
   * @return totalProfit
   */
  @javax.annotation.Nullable
  public String getTotalProfit() {
    return totalProfit;
  }

  public void setTotalProfit(String totalProfit) {
    this.totalProfit = totalProfit;
  }


  public Taskresult weekProfit(String weekProfit) {
    this.weekProfit = weekProfit;
    return this;
  }

  /**
   * Get weekProfit
   * @return weekProfit
   */
  @javax.annotation.Nullable
  public String getWeekProfit() {
    return weekProfit;
  }

  public void setWeekProfit(String weekProfit) {
    this.weekProfit = weekProfit;
  }


  public Taskresult yearProfit(String yearProfit) {
    this.yearProfit = yearProfit;
    return this;
  }

  /**
   * Get yearProfit
   * @return yearProfit
   */
  @javax.annotation.Nullable
  public String getYearProfit() {
    return yearProfit;
  }

  public void setYearProfit(String yearProfit) {
    this.yearProfit = yearProfit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Taskresult taskresult = (Taskresult) o;
    return Objects.equals(this.apr, taskresult.apr) &&
        Objects.equals(this.curMonthProfit, taskresult.curMonthProfit) &&
        Objects.equals(this.curYearProfit, taskresult.curYearProfit) &&
        Objects.equals(this.drawdown, taskresult.drawdown) &&
        Objects.equals(this.halfYearProfit, taskresult.halfYearProfit) &&
        Objects.equals(this.monthProfit, taskresult.monthProfit) &&
        Objects.equals(this.prevMonthProfit, taskresult.prevMonthProfit) &&
        Objects.equals(this.totalProfit, taskresult.totalProfit) &&
        Objects.equals(this.weekProfit, taskresult.weekProfit) &&
        Objects.equals(this.yearProfit, taskresult.yearProfit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apr, curMonthProfit, curYearProfit, drawdown, halfYearProfit, monthProfit, prevMonthProfit, totalProfit, weekProfit, yearProfit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Taskresult {\n");
    sb.append("    apr: ").append(toIndentedString(apr)).append("\n");
    sb.append("    curMonthProfit: ").append(toIndentedString(curMonthProfit)).append("\n");
    sb.append("    curYearProfit: ").append(toIndentedString(curYearProfit)).append("\n");
    sb.append("    drawdown: ").append(toIndentedString(drawdown)).append("\n");
    sb.append("    halfYearProfit: ").append(toIndentedString(halfYearProfit)).append("\n");
    sb.append("    monthProfit: ").append(toIndentedString(monthProfit)).append("\n");
    sb.append("    prevMonthProfit: ").append(toIndentedString(prevMonthProfit)).append("\n");
    sb.append("    totalProfit: ").append(toIndentedString(totalProfit)).append("\n");
    sb.append("    weekProfit: ").append(toIndentedString(weekProfit)).append("\n");
    sb.append("    yearProfit: ").append(toIndentedString(yearProfit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apr");
    openapiFields.add("curMonthProfit");
    openapiFields.add("curYearProfit");
    openapiFields.add("drawdown");
    openapiFields.add("halfYearProfit");
    openapiFields.add("monthProfit");
    openapiFields.add("prevMonthProfit");
    openapiFields.add("totalProfit");
    openapiFields.add("weekProfit");
    openapiFields.add("yearProfit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Taskresult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Taskresult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Taskresult is not found in the empty JSON string", Taskresult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Taskresult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Taskresult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apr") != null && !jsonObj.get("apr").isJsonNull()) && !jsonObj.get("apr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apr").toString()));
      }
      if ((jsonObj.get("curMonthProfit") != null && !jsonObj.get("curMonthProfit").isJsonNull()) && !jsonObj.get("curMonthProfit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `curMonthProfit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("curMonthProfit").toString()));
      }
      if ((jsonObj.get("curYearProfit") != null && !jsonObj.get("curYearProfit").isJsonNull()) && !jsonObj.get("curYearProfit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `curYearProfit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("curYearProfit").toString()));
      }
      if ((jsonObj.get("drawdown") != null && !jsonObj.get("drawdown").isJsonNull()) && !jsonObj.get("drawdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drawdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drawdown").toString()));
      }
      if ((jsonObj.get("halfYearProfit") != null && !jsonObj.get("halfYearProfit").isJsonNull()) && !jsonObj.get("halfYearProfit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `halfYearProfit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("halfYearProfit").toString()));
      }
      if ((jsonObj.get("monthProfit") != null && !jsonObj.get("monthProfit").isJsonNull()) && !jsonObj.get("monthProfit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthProfit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthProfit").toString()));
      }
      if ((jsonObj.get("prevMonthProfit") != null && !jsonObj.get("prevMonthProfit").isJsonNull()) && !jsonObj.get("prevMonthProfit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prevMonthProfit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prevMonthProfit").toString()));
      }
      if ((jsonObj.get("totalProfit") != null && !jsonObj.get("totalProfit").isJsonNull()) && !jsonObj.get("totalProfit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalProfit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalProfit").toString()));
      }
      if ((jsonObj.get("weekProfit") != null && !jsonObj.get("weekProfit").isJsonNull()) && !jsonObj.get("weekProfit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weekProfit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weekProfit").toString()));
      }
      if ((jsonObj.get("yearProfit") != null && !jsonObj.get("yearProfit").isJsonNull()) && !jsonObj.get("yearProfit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yearProfit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yearProfit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Taskresult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Taskresult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Taskresult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Taskresult.class));

       return (TypeAdapter<T>) new TypeAdapter<Taskresult>() {
           @Override
           public void write(JsonWriter out, Taskresult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Taskresult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Taskresult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Taskresult
   * @throws IOException if the JSON string is invalid with respect to Taskresult
   */
  public static Taskresult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Taskresult.class);
  }

  /**
   * Convert an instance of Taskresult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

