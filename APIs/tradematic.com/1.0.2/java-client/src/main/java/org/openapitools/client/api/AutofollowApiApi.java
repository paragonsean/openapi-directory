/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutofollowStrategiesPost200Response;
import org.openapitools.client.model.AutofollowStrategiesPostRequest;
import org.openapitools.client.model.AutofollowStrategiesStrategyidContentPut200Response;
import org.openapitools.client.model.AutofollowStrategiesStrategyidContentPutRequest;
import org.openapitools.client.model.AutofollowStrategiesStrategyidPut200Response;
import org.openapitools.client.model.AutofollowStrategiesStrategyidPutRequest;
import org.openapitools.client.model.AutofollowStrategiesStrategyidSignalsPost200Response;
import org.openapitools.client.model.AutofollowStrategiesStrategyidSignalsPostRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Signal;
import org.openapitools.client.model.Strategy;
import org.openapitools.client.model.StrategyPosition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutofollowApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutofollowApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutofollowApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autofollowStrategiesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/autofollow/strategies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autofollowStrategiesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return autofollowStrategiesGetCall(_callback);

    }

    /**
     * Get autofollow strategies list
     * Get autofollow strategies list
     * @return List&lt;Strategy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Strategy> autofollowStrategiesGet() throws ApiException {
        ApiResponse<List<Strategy>> localVarResp = autofollowStrategiesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get autofollow strategies list
     * Get autofollow strategies list
     * @return ApiResponse&lt;List&lt;Strategy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Strategy>> autofollowStrategiesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = autofollowStrategiesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Strategy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get autofollow strategies list (asynchronously)
     * Get autofollow strategies list
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesGetAsync(final ApiCallback<List<Strategy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = autofollowStrategiesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Strategy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autofollowStrategiesPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesPostCall(AutofollowStrategiesPostRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/autofollow/strategies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autofollowStrategiesPostValidateBeforeCall(AutofollowStrategiesPostRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling autofollowStrategiesPost(Async)");
        }

        return autofollowStrategiesPostCall(body, _callback);

    }

    /**
     * Create new autofollow strategy
     * Create new autofollow strategy
     * @param body  (required)
     * @return AutofollowStrategiesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AutofollowStrategiesPost200Response autofollowStrategiesPost(AutofollowStrategiesPostRequest body) throws ApiException {
        ApiResponse<AutofollowStrategiesPost200Response> localVarResp = autofollowStrategiesPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create new autofollow strategy
     * Create new autofollow strategy
     * @param body  (required)
     * @return ApiResponse&lt;AutofollowStrategiesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutofollowStrategiesPost200Response> autofollowStrategiesPostWithHttpInfo(AutofollowStrategiesPostRequest body) throws ApiException {
        okhttp3.Call localVarCall = autofollowStrategiesPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<AutofollowStrategiesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new autofollow strategy (asynchronously)
     * Create new autofollow strategy
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesPostAsync(AutofollowStrategiesPostRequest body, final ApiCallback<AutofollowStrategiesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = autofollowStrategiesPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<AutofollowStrategiesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autofollowStrategiesStrategyidContentPut
     * @param strategyid  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidContentPutCall(Long strategyid, AutofollowStrategiesStrategyidContentPutRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/autofollow/strategies/{strategyid}/content"
            .replace("{" + "strategyid" + "}", localVarApiClient.escapeString(strategyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autofollowStrategiesStrategyidContentPutValidateBeforeCall(Long strategyid, AutofollowStrategiesStrategyidContentPutRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'strategyid' is set
        if (strategyid == null) {
            throw new ApiException("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidContentPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling autofollowStrategiesStrategyidContentPut(Async)");
        }

        return autofollowStrategiesStrategyidContentPutCall(strategyid, body, _callback);

    }

    /**
     * Update rules for strategy that was created with strategy builder
     * Update rules for strategy that was created with strategy builder
     * @param strategyid  (required)
     * @param body  (required)
     * @return AutofollowStrategiesStrategyidContentPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AutofollowStrategiesStrategyidContentPut200Response autofollowStrategiesStrategyidContentPut(Long strategyid, AutofollowStrategiesStrategyidContentPutRequest body) throws ApiException {
        ApiResponse<AutofollowStrategiesStrategyidContentPut200Response> localVarResp = autofollowStrategiesStrategyidContentPutWithHttpInfo(strategyid, body);
        return localVarResp.getData();
    }

    /**
     * Update rules for strategy that was created with strategy builder
     * Update rules for strategy that was created with strategy builder
     * @param strategyid  (required)
     * @param body  (required)
     * @return ApiResponse&lt;AutofollowStrategiesStrategyidContentPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutofollowStrategiesStrategyidContentPut200Response> autofollowStrategiesStrategyidContentPutWithHttpInfo(Long strategyid, AutofollowStrategiesStrategyidContentPutRequest body) throws ApiException {
        okhttp3.Call localVarCall = autofollowStrategiesStrategyidContentPutValidateBeforeCall(strategyid, body, null);
        Type localVarReturnType = new TypeToken<AutofollowStrategiesStrategyidContentPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update rules for strategy that was created with strategy builder (asynchronously)
     * Update rules for strategy that was created with strategy builder
     * @param strategyid  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidContentPutAsync(Long strategyid, AutofollowStrategiesStrategyidContentPutRequest body, final ApiCallback<AutofollowStrategiesStrategyidContentPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = autofollowStrategiesStrategyidContentPutValidateBeforeCall(strategyid, body, _callback);
        Type localVarReturnType = new TypeToken<AutofollowStrategiesStrategyidContentPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autofollowStrategiesStrategyidGet
     * @param strategyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidGetCall(Long strategyid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/autofollow/strategies/{strategyid}"
            .replace("{" + "strategyid" + "}", localVarApiClient.escapeString(strategyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autofollowStrategiesStrategyidGetValidateBeforeCall(Long strategyid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'strategyid' is set
        if (strategyid == null) {
            throw new ApiException("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidGet(Async)");
        }

        return autofollowStrategiesStrategyidGetCall(strategyid, _callback);

    }

    /**
     * Get autofollow strategy by ID
     * Get autofollow strategy by ID
     * @param strategyid  (required)
     * @return Strategy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Strategy autofollowStrategiesStrategyidGet(Long strategyid) throws ApiException {
        ApiResponse<Strategy> localVarResp = autofollowStrategiesStrategyidGetWithHttpInfo(strategyid);
        return localVarResp.getData();
    }

    /**
     * Get autofollow strategy by ID
     * Get autofollow strategy by ID
     * @param strategyid  (required)
     * @return ApiResponse&lt;Strategy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Strategy> autofollowStrategiesStrategyidGetWithHttpInfo(Long strategyid) throws ApiException {
        okhttp3.Call localVarCall = autofollowStrategiesStrategyidGetValidateBeforeCall(strategyid, null);
        Type localVarReturnType = new TypeToken<Strategy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get autofollow strategy by ID (asynchronously)
     * Get autofollow strategy by ID
     * @param strategyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidGetAsync(Long strategyid, final ApiCallback<Strategy> _callback) throws ApiException {

        okhttp3.Call localVarCall = autofollowStrategiesStrategyidGetValidateBeforeCall(strategyid, _callback);
        Type localVarReturnType = new TypeToken<Strategy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autofollowStrategiesStrategyidPositionsGet
     * @param strategyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidPositionsGetCall(Long strategyid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/autofollow/strategies/{strategyid}/positions"
            .replace("{" + "strategyid" + "}", localVarApiClient.escapeString(strategyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autofollowStrategiesStrategyidPositionsGetValidateBeforeCall(Long strategyid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'strategyid' is set
        if (strategyid == null) {
            throw new ApiException("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidPositionsGet(Async)");
        }

        return autofollowStrategiesStrategyidPositionsGetCall(strategyid, _callback);

    }

    /**
     * Get positions for strategy
     * Get positions for strategy
     * @param strategyid  (required)
     * @return List&lt;StrategyPosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<StrategyPosition> autofollowStrategiesStrategyidPositionsGet(Long strategyid) throws ApiException {
        ApiResponse<List<StrategyPosition>> localVarResp = autofollowStrategiesStrategyidPositionsGetWithHttpInfo(strategyid);
        return localVarResp.getData();
    }

    /**
     * Get positions for strategy
     * Get positions for strategy
     * @param strategyid  (required)
     * @return ApiResponse&lt;List&lt;StrategyPosition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StrategyPosition>> autofollowStrategiesStrategyidPositionsGetWithHttpInfo(Long strategyid) throws ApiException {
        okhttp3.Call localVarCall = autofollowStrategiesStrategyidPositionsGetValidateBeforeCall(strategyid, null);
        Type localVarReturnType = new TypeToken<List<StrategyPosition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get positions for strategy (asynchronously)
     * Get positions for strategy
     * @param strategyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidPositionsGetAsync(Long strategyid, final ApiCallback<List<StrategyPosition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = autofollowStrategiesStrategyidPositionsGetValidateBeforeCall(strategyid, _callback);
        Type localVarReturnType = new TypeToken<List<StrategyPosition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autofollowStrategiesStrategyidPut
     * @param strategyid  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidPutCall(Long strategyid, AutofollowStrategiesStrategyidPutRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/autofollow/strategies/{strategyid}"
            .replace("{" + "strategyid" + "}", localVarApiClient.escapeString(strategyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autofollowStrategiesStrategyidPutValidateBeforeCall(Long strategyid, AutofollowStrategiesStrategyidPutRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'strategyid' is set
        if (strategyid == null) {
            throw new ApiException("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling autofollowStrategiesStrategyidPut(Async)");
        }

        return autofollowStrategiesStrategyidPutCall(strategyid, body, _callback);

    }

    /**
     * Update autofollow strategy
     * Update autofollow strategy
     * @param strategyid  (required)
     * @param body  (required)
     * @return AutofollowStrategiesStrategyidPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AutofollowStrategiesStrategyidPut200Response autofollowStrategiesStrategyidPut(Long strategyid, AutofollowStrategiesStrategyidPutRequest body) throws ApiException {
        ApiResponse<AutofollowStrategiesStrategyidPut200Response> localVarResp = autofollowStrategiesStrategyidPutWithHttpInfo(strategyid, body);
        return localVarResp.getData();
    }

    /**
     * Update autofollow strategy
     * Update autofollow strategy
     * @param strategyid  (required)
     * @param body  (required)
     * @return ApiResponse&lt;AutofollowStrategiesStrategyidPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutofollowStrategiesStrategyidPut200Response> autofollowStrategiesStrategyidPutWithHttpInfo(Long strategyid, AutofollowStrategiesStrategyidPutRequest body) throws ApiException {
        okhttp3.Call localVarCall = autofollowStrategiesStrategyidPutValidateBeforeCall(strategyid, body, null);
        Type localVarReturnType = new TypeToken<AutofollowStrategiesStrategyidPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update autofollow strategy (asynchronously)
     * Update autofollow strategy
     * @param strategyid  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidPutAsync(Long strategyid, AutofollowStrategiesStrategyidPutRequest body, final ApiCallback<AutofollowStrategiesStrategyidPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = autofollowStrategiesStrategyidPutValidateBeforeCall(strategyid, body, _callback);
        Type localVarReturnType = new TypeToken<AutofollowStrategiesStrategyidPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autofollowStrategiesStrategyidSignalsGet
     * @param strategyid  (required)
     * @param count  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidSignalsGetCall(Long strategyid, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/autofollow/strategies/{strategyid}/signals"
            .replace("{" + "strategyid" + "}", localVarApiClient.escapeString(strategyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autofollowStrategiesStrategyidSignalsGetValidateBeforeCall(Long strategyid, Long count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'strategyid' is set
        if (strategyid == null) {
            throw new ApiException("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidSignalsGet(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling autofollowStrategiesStrategyidSignalsGet(Async)");
        }

        return autofollowStrategiesStrategyidSignalsGetCall(strategyid, count, _callback);

    }

    /**
     * Get trading signals for strategy
     * Get trading signals for strategy
     * @param strategyid  (required)
     * @param count  (required)
     * @return List&lt;Signal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Signal> autofollowStrategiesStrategyidSignalsGet(Long strategyid, Long count) throws ApiException {
        ApiResponse<List<Signal>> localVarResp = autofollowStrategiesStrategyidSignalsGetWithHttpInfo(strategyid, count);
        return localVarResp.getData();
    }

    /**
     * Get trading signals for strategy
     * Get trading signals for strategy
     * @param strategyid  (required)
     * @param count  (required)
     * @return ApiResponse&lt;List&lt;Signal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Signal>> autofollowStrategiesStrategyidSignalsGetWithHttpInfo(Long strategyid, Long count) throws ApiException {
        okhttp3.Call localVarCall = autofollowStrategiesStrategyidSignalsGetValidateBeforeCall(strategyid, count, null);
        Type localVarReturnType = new TypeToken<List<Signal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get trading signals for strategy (asynchronously)
     * Get trading signals for strategy
     * @param strategyid  (required)
     * @param count  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidSignalsGetAsync(Long strategyid, Long count, final ApiCallback<List<Signal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = autofollowStrategiesStrategyidSignalsGetValidateBeforeCall(strategyid, count, _callback);
        Type localVarReturnType = new TypeToken<List<Signal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autofollowStrategiesStrategyidSignalsPost
     * @param strategyid  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidSignalsPostCall(Long strategyid, AutofollowStrategiesStrategyidSignalsPostRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/autofollow/strategies/{strategyid}/signals"
            .replace("{" + "strategyid" + "}", localVarApiClient.escapeString(strategyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Secured" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autofollowStrategiesStrategyidSignalsPostValidateBeforeCall(Long strategyid, AutofollowStrategiesStrategyidSignalsPostRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'strategyid' is set
        if (strategyid == null) {
            throw new ApiException("Missing the required parameter 'strategyid' when calling autofollowStrategiesStrategyidSignalsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling autofollowStrategiesStrategyidSignalsPost(Async)");
        }

        return autofollowStrategiesStrategyidSignalsPostCall(strategyid, body, _callback);

    }

    /**
     * Send a new signal for autofollow strategy
     * Send a new signal for autofollow strategy
     * @param strategyid  (required)
     * @param body  (required)
     * @return AutofollowStrategiesStrategyidSignalsPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AutofollowStrategiesStrategyidSignalsPost200Response autofollowStrategiesStrategyidSignalsPost(Long strategyid, AutofollowStrategiesStrategyidSignalsPostRequest body) throws ApiException {
        ApiResponse<AutofollowStrategiesStrategyidSignalsPost200Response> localVarResp = autofollowStrategiesStrategyidSignalsPostWithHttpInfo(strategyid, body);
        return localVarResp.getData();
    }

    /**
     * Send a new signal for autofollow strategy
     * Send a new signal for autofollow strategy
     * @param strategyid  (required)
     * @param body  (required)
     * @return ApiResponse&lt;AutofollowStrategiesStrategyidSignalsPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutofollowStrategiesStrategyidSignalsPost200Response> autofollowStrategiesStrategyidSignalsPostWithHttpInfo(Long strategyid, AutofollowStrategiesStrategyidSignalsPostRequest body) throws ApiException {
        okhttp3.Call localVarCall = autofollowStrategiesStrategyidSignalsPostValidateBeforeCall(strategyid, body, null);
        Type localVarReturnType = new TypeToken<AutofollowStrategiesStrategyidSignalsPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a new signal for autofollow strategy (asynchronously)
     * Send a new signal for autofollow strategy
     * @param strategyid  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autofollowStrategiesStrategyidSignalsPostAsync(Long strategyid, AutofollowStrategiesStrategyidSignalsPostRequest body, final ApiCallback<AutofollowStrategiesStrategyidSignalsPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = autofollowStrategiesStrategyidSignalsPostValidateBeforeCall(strategyid, body, _callback);
        Type localVarReturnType = new TypeToken<AutofollowStrategiesStrategyidSignalsPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
