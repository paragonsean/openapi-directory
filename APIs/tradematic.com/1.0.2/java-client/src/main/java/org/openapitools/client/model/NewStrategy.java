/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewStrategy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewStrategy {
  public static final String SERIALIZED_NAME_APR = "apr";
  @SerializedName(SERIALIZED_NAME_APR)
  private String apr;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DRAWDOWN = "drawdown";
  @SerializedName(SERIALIZED_NAME_DRAWDOWN)
  private String drawdown;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_LIMITORDER = "limitorder";
  @SerializedName(SERIALIZED_NAME_LIMITORDER)
  private String limitorder;

  public static final String SERIALIZED_NAME_MARKETNAME = "marketname";
  @SerializedName(SERIALIZED_NAME_MARKETNAME)
  private String marketname;

  public static final String SERIALIZED_NAME_MULTIPOSITION = "multiposition";
  @SerializedName(SERIALIZED_NAME_MULTIPOSITION)
  private String multiposition;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSITIONSIZE = "positionsize";
  @SerializedName(SERIALIZED_NAME_POSITIONSIZE)
  private String positionsize;

  public static final String SERIALIZED_NAME_STRATEGYTYPEID = "strategytypeid";
  @SerializedName(SERIALIZED_NAME_STRATEGYTYPEID)
  private String strategytypeid;

  public static final String SERIALIZED_NAME_SYMBOLS = "symbols";
  @SerializedName(SERIALIZED_NAME_SYMBOLS)
  private String symbols;

  public static final String SERIALIZED_NAME_TIMEFRAME = "timeframe";
  @SerializedName(SERIALIZED_NAME_TIMEFRAME)
  private String timeframe;

  public NewStrategy() {
  }

  public NewStrategy apr(String apr) {
    this.apr = apr;
    return this;
  }

  /**
   * Get apr
   * @return apr
   */
  @javax.annotation.Nullable
  public String getApr() {
    return apr;
  }

  public void setApr(String apr) {
    this.apr = apr;
  }


  public NewStrategy author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public NewStrategy content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public NewStrategy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NewStrategy drawdown(String drawdown) {
    this.drawdown = drawdown;
    return this;
  }

  /**
   * Get drawdown
   * @return drawdown
   */
  @javax.annotation.Nullable
  public String getDrawdown() {
    return drawdown;
  }

  public void setDrawdown(String drawdown) {
    this.drawdown = drawdown;
  }


  public NewStrategy guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public NewStrategy limitorder(String limitorder) {
    this.limitorder = limitorder;
    return this;
  }

  /**
   * Get limitorder
   * @return limitorder
   */
  @javax.annotation.Nullable
  public String getLimitorder() {
    return limitorder;
  }

  public void setLimitorder(String limitorder) {
    this.limitorder = limitorder;
  }


  public NewStrategy marketname(String marketname) {
    this.marketname = marketname;
    return this;
  }

  /**
   * Get marketname
   * @return marketname
   */
  @javax.annotation.Nullable
  public String getMarketname() {
    return marketname;
  }

  public void setMarketname(String marketname) {
    this.marketname = marketname;
  }


  public NewStrategy multiposition(String multiposition) {
    this.multiposition = multiposition;
    return this;
  }

  /**
   * Get multiposition
   * @return multiposition
   */
  @javax.annotation.Nullable
  public String getMultiposition() {
    return multiposition;
  }

  public void setMultiposition(String multiposition) {
    this.multiposition = multiposition;
  }


  public NewStrategy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NewStrategy positionsize(String positionsize) {
    this.positionsize = positionsize;
    return this;
  }

  /**
   * Get positionsize
   * @return positionsize
   */
  @javax.annotation.Nullable
  public String getPositionsize() {
    return positionsize;
  }

  public void setPositionsize(String positionsize) {
    this.positionsize = positionsize;
  }


  public NewStrategy strategytypeid(String strategytypeid) {
    this.strategytypeid = strategytypeid;
    return this;
  }

  /**
   * Get strategytypeid
   * @return strategytypeid
   */
  @javax.annotation.Nullable
  public String getStrategytypeid() {
    return strategytypeid;
  }

  public void setStrategytypeid(String strategytypeid) {
    this.strategytypeid = strategytypeid;
  }


  public NewStrategy symbols(String symbols) {
    this.symbols = symbols;
    return this;
  }

  /**
   * Get symbols
   * @return symbols
   */
  @javax.annotation.Nullable
  public String getSymbols() {
    return symbols;
  }

  public void setSymbols(String symbols) {
    this.symbols = symbols;
  }


  public NewStrategy timeframe(String timeframe) {
    this.timeframe = timeframe;
    return this;
  }

  /**
   * Get timeframe
   * @return timeframe
   */
  @javax.annotation.Nullable
  public String getTimeframe() {
    return timeframe;
  }

  public void setTimeframe(String timeframe) {
    this.timeframe = timeframe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewStrategy newStrategy = (NewStrategy) o;
    return Objects.equals(this.apr, newStrategy.apr) &&
        Objects.equals(this.author, newStrategy.author) &&
        Objects.equals(this.content, newStrategy.content) &&
        Objects.equals(this.description, newStrategy.description) &&
        Objects.equals(this.drawdown, newStrategy.drawdown) &&
        Objects.equals(this.guid, newStrategy.guid) &&
        Objects.equals(this.limitorder, newStrategy.limitorder) &&
        Objects.equals(this.marketname, newStrategy.marketname) &&
        Objects.equals(this.multiposition, newStrategy.multiposition) &&
        Objects.equals(this.name, newStrategy.name) &&
        Objects.equals(this.positionsize, newStrategy.positionsize) &&
        Objects.equals(this.strategytypeid, newStrategy.strategytypeid) &&
        Objects.equals(this.symbols, newStrategy.symbols) &&
        Objects.equals(this.timeframe, newStrategy.timeframe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apr, author, content, description, drawdown, guid, limitorder, marketname, multiposition, name, positionsize, strategytypeid, symbols, timeframe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewStrategy {\n");
    sb.append("    apr: ").append(toIndentedString(apr)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    drawdown: ").append(toIndentedString(drawdown)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    limitorder: ").append(toIndentedString(limitorder)).append("\n");
    sb.append("    marketname: ").append(toIndentedString(marketname)).append("\n");
    sb.append("    multiposition: ").append(toIndentedString(multiposition)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    positionsize: ").append(toIndentedString(positionsize)).append("\n");
    sb.append("    strategytypeid: ").append(toIndentedString(strategytypeid)).append("\n");
    sb.append("    symbols: ").append(toIndentedString(symbols)).append("\n");
    sb.append("    timeframe: ").append(toIndentedString(timeframe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apr");
    openapiFields.add("author");
    openapiFields.add("content");
    openapiFields.add("description");
    openapiFields.add("drawdown");
    openapiFields.add("guid");
    openapiFields.add("limitorder");
    openapiFields.add("marketname");
    openapiFields.add("multiposition");
    openapiFields.add("name");
    openapiFields.add("positionsize");
    openapiFields.add("strategytypeid");
    openapiFields.add("symbols");
    openapiFields.add("timeframe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewStrategy is not found in the empty JSON string", NewStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apr") != null && !jsonObj.get("apr").isJsonNull()) && !jsonObj.get("apr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apr").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("drawdown") != null && !jsonObj.get("drawdown").isJsonNull()) && !jsonObj.get("drawdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drawdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drawdown").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("limitorder") != null && !jsonObj.get("limitorder").isJsonNull()) && !jsonObj.get("limitorder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitorder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitorder").toString()));
      }
      if ((jsonObj.get("marketname") != null && !jsonObj.get("marketname").isJsonNull()) && !jsonObj.get("marketname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketname").toString()));
      }
      if ((jsonObj.get("multiposition") != null && !jsonObj.get("multiposition").isJsonNull()) && !jsonObj.get("multiposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiposition").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("positionsize") != null && !jsonObj.get("positionsize").isJsonNull()) && !jsonObj.get("positionsize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionsize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positionsize").toString()));
      }
      if ((jsonObj.get("strategytypeid") != null && !jsonObj.get("strategytypeid").isJsonNull()) && !jsonObj.get("strategytypeid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategytypeid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategytypeid").toString()));
      }
      if ((jsonObj.get("symbols") != null && !jsonObj.get("symbols").isJsonNull()) && !jsonObj.get("symbols").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbols` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbols").toString()));
      }
      if ((jsonObj.get("timeframe") != null && !jsonObj.get("timeframe").isJsonNull()) && !jsonObj.get("timeframe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeframe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeframe").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<NewStrategy>() {
           @Override
           public void write(JsonWriter out, NewStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewStrategy
   * @throws IOException if the JSON string is invalid with respect to NewStrategy
   */
  public static NewStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewStrategy.class);
  }

  /**
   * Convert an instance of NewStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

