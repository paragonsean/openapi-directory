/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Task
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Task {
  public static final String SERIALIZED_NAME_ISBENCHMARK = "isbenchmark";
  @SerializedName(SERIALIZED_NAME_ISBENCHMARK)
  private String isbenchmark;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUSUPDATEDATE = "statusupdatedate";
  @SerializedName(SERIALIZED_NAME_STATUSUPDATEDATE)
  private OffsetDateTime statusupdatedate;

  public static final String SERIALIZED_NAME_STRATEGYID = "strategyid";
  @SerializedName(SERIALIZED_NAME_STRATEGYID)
  private String strategyid;

  public static final String SERIALIZED_NAME_TASKID = "taskid";
  @SerializedName(SERIALIZED_NAME_TASKID)
  private String taskid;

  public static final String SERIALIZED_NAME_USESTATICDATA = "usestaticdata";
  @SerializedName(SERIALIZED_NAME_USESTATICDATA)
  private String usestaticdata;

  public Task() {
  }

  public Task isbenchmark(String isbenchmark) {
    this.isbenchmark = isbenchmark;
    return this;
  }

  /**
   * Get isbenchmark
   * @return isbenchmark
   */
  @javax.annotation.Nullable
  public String getIsbenchmark() {
    return isbenchmark;
  }

  public void setIsbenchmark(String isbenchmark) {
    this.isbenchmark = isbenchmark;
  }


  public Task name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Task status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Task statusupdatedate(OffsetDateTime statusupdatedate) {
    this.statusupdatedate = statusupdatedate;
    return this;
  }

  /**
   * Get statusupdatedate
   * @return statusupdatedate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusupdatedate() {
    return statusupdatedate;
  }

  public void setStatusupdatedate(OffsetDateTime statusupdatedate) {
    this.statusupdatedate = statusupdatedate;
  }


  public Task strategyid(String strategyid) {
    this.strategyid = strategyid;
    return this;
  }

  /**
   * Get strategyid
   * @return strategyid
   */
  @javax.annotation.Nullable
  public String getStrategyid() {
    return strategyid;
  }

  public void setStrategyid(String strategyid) {
    this.strategyid = strategyid;
  }


  public Task taskid(String taskid) {
    this.taskid = taskid;
    return this;
  }

  /**
   * Get taskid
   * @return taskid
   */
  @javax.annotation.Nullable
  public String getTaskid() {
    return taskid;
  }

  public void setTaskid(String taskid) {
    this.taskid = taskid;
  }


  public Task usestaticdata(String usestaticdata) {
    this.usestaticdata = usestaticdata;
    return this;
  }

  /**
   * Get usestaticdata
   * @return usestaticdata
   */
  @javax.annotation.Nullable
  public String getUsestaticdata() {
    return usestaticdata;
  }

  public void setUsestaticdata(String usestaticdata) {
    this.usestaticdata = usestaticdata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Task task = (Task) o;
    return Objects.equals(this.isbenchmark, task.isbenchmark) &&
        Objects.equals(this.name, task.name) &&
        Objects.equals(this.status, task.status) &&
        Objects.equals(this.statusupdatedate, task.statusupdatedate) &&
        Objects.equals(this.strategyid, task.strategyid) &&
        Objects.equals(this.taskid, task.taskid) &&
        Objects.equals(this.usestaticdata, task.usestaticdata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isbenchmark, name, status, statusupdatedate, strategyid, taskid, usestaticdata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Task {\n");
    sb.append("    isbenchmark: ").append(toIndentedString(isbenchmark)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusupdatedate: ").append(toIndentedString(statusupdatedate)).append("\n");
    sb.append("    strategyid: ").append(toIndentedString(strategyid)).append("\n");
    sb.append("    taskid: ").append(toIndentedString(taskid)).append("\n");
    sb.append("    usestaticdata: ").append(toIndentedString(usestaticdata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isbenchmark");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("statusupdatedate");
    openapiFields.add("strategyid");
    openapiFields.add("taskid");
    openapiFields.add("usestaticdata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Task
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Task.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Task is not found in the empty JSON string", Task.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Task.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Task` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("isbenchmark") != null && !jsonObj.get("isbenchmark").isJsonNull()) && !jsonObj.get("isbenchmark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isbenchmark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isbenchmark").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("strategyid") != null && !jsonObj.get("strategyid").isJsonNull()) && !jsonObj.get("strategyid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategyid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategyid").toString()));
      }
      if ((jsonObj.get("taskid") != null && !jsonObj.get("taskid").isJsonNull()) && !jsonObj.get("taskid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskid").toString()));
      }
      if ((jsonObj.get("usestaticdata") != null && !jsonObj.get("usestaticdata").isJsonNull()) && !jsonObj.get("usestaticdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usestaticdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usestaticdata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Task.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Task' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Task> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Task.class));

       return (TypeAdapter<T>) new TypeAdapter<Task>() {
           @Override
           public void write(JsonWriter out, Task value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Task read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Task given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Task
   * @throws IOException if the JSON string is invalid with respect to Task
   */
  public static Task fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Task.class);
  }

  /**
   * Convert an instance of Task to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

