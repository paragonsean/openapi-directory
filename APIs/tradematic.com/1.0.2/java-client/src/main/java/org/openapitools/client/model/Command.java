/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Command
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Command {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_ACCOUNTID = "accountid";
  @SerializedName(SERIALIZED_NAME_ACCOUNTID)
  private String accountid;

  public static final String SERIALIZED_NAME_COMMANDDATE = "commanddate";
  @SerializedName(SERIALIZED_NAME_COMMANDDATE)
  private OffsetDateTime commanddate;

  public static final String SERIALIZED_NAME_COMMANDID = "commandid";
  @SerializedName(SERIALIZED_NAME_COMMANDID)
  private String commandid;

  public static final String SERIALIZED_NAME_COMMANDSTATUSNAME = "commandstatusname";
  @SerializedName(SERIALIZED_NAME_COMMANDSTATUSNAME)
  private String commandstatusname;

  public static final String SERIALIZED_NAME_COMMANDTYPENAME = "commandtypename";
  @SerializedName(SERIALIZED_NAME_COMMANDTYPENAME)
  private String commandtypename;

  public static final String SERIALIZED_NAME_COMPUTER = "computer";
  @SerializedName(SERIALIZED_NAME_COMPUTER)
  private String computer;

  public static final String SERIALIZED_NAME_HWID = "hwid";
  @SerializedName(SERIALIZED_NAME_HWID)
  private String hwid;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Command() {
  }

  public Command account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public Command accountid(String accountid) {
    this.accountid = accountid;
    return this;
  }

  /**
   * Get accountid
   * @return accountid
   */
  @javax.annotation.Nullable
  public String getAccountid() {
    return accountid;
  }

  public void setAccountid(String accountid) {
    this.accountid = accountid;
  }


  public Command commanddate(OffsetDateTime commanddate) {
    this.commanddate = commanddate;
    return this;
  }

  /**
   * Get commanddate
   * @return commanddate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCommanddate() {
    return commanddate;
  }

  public void setCommanddate(OffsetDateTime commanddate) {
    this.commanddate = commanddate;
  }


  public Command commandid(String commandid) {
    this.commandid = commandid;
    return this;
  }

  /**
   * Get commandid
   * @return commandid
   */
  @javax.annotation.Nullable
  public String getCommandid() {
    return commandid;
  }

  public void setCommandid(String commandid) {
    this.commandid = commandid;
  }


  public Command commandstatusname(String commandstatusname) {
    this.commandstatusname = commandstatusname;
    return this;
  }

  /**
   * Get commandstatusname
   * @return commandstatusname
   */
  @javax.annotation.Nullable
  public String getCommandstatusname() {
    return commandstatusname;
  }

  public void setCommandstatusname(String commandstatusname) {
    this.commandstatusname = commandstatusname;
  }


  public Command commandtypename(String commandtypename) {
    this.commandtypename = commandtypename;
    return this;
  }

  /**
   * Get commandtypename
   * @return commandtypename
   */
  @javax.annotation.Nullable
  public String getCommandtypename() {
    return commandtypename;
  }

  public void setCommandtypename(String commandtypename) {
    this.commandtypename = commandtypename;
  }


  public Command computer(String computer) {
    this.computer = computer;
    return this;
  }

  /**
   * Get computer
   * @return computer
   */
  @javax.annotation.Nullable
  public String getComputer() {
    return computer;
  }

  public void setComputer(String computer) {
    this.computer = computer;
  }


  public Command hwid(String hwid) {
    this.hwid = hwid;
    return this;
  }

  /**
   * Get hwid
   * @return hwid
   */
  @javax.annotation.Nullable
  public String getHwid() {
    return hwid;
  }

  public void setHwid(String hwid) {
    this.hwid = hwid;
  }


  public Command message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Command parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public Command putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public Command status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Command timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public Command type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Command command = (Command) o;
    return Objects.equals(this.account, command.account) &&
        Objects.equals(this.accountid, command.accountid) &&
        Objects.equals(this.commanddate, command.commanddate) &&
        Objects.equals(this.commandid, command.commandid) &&
        Objects.equals(this.commandstatusname, command.commandstatusname) &&
        Objects.equals(this.commandtypename, command.commandtypename) &&
        Objects.equals(this.computer, command.computer) &&
        Objects.equals(this.hwid, command.hwid) &&
        Objects.equals(this.message, command.message) &&
        Objects.equals(this.parameters, command.parameters) &&
        Objects.equals(this.status, command.status) &&
        Objects.equals(this.timestamp, command.timestamp) &&
        Objects.equals(this.type, command.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, accountid, commanddate, commandid, commandstatusname, commandtypename, computer, hwid, message, parameters, status, timestamp, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Command {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountid: ").append(toIndentedString(accountid)).append("\n");
    sb.append("    commanddate: ").append(toIndentedString(commanddate)).append("\n");
    sb.append("    commandid: ").append(toIndentedString(commandid)).append("\n");
    sb.append("    commandstatusname: ").append(toIndentedString(commandstatusname)).append("\n");
    sb.append("    commandtypename: ").append(toIndentedString(commandtypename)).append("\n");
    sb.append("    computer: ").append(toIndentedString(computer)).append("\n");
    sb.append("    hwid: ").append(toIndentedString(hwid)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("accountid");
    openapiFields.add("commanddate");
    openapiFields.add("commandid");
    openapiFields.add("commandstatusname");
    openapiFields.add("commandtypename");
    openapiFields.add("computer");
    openapiFields.add("hwid");
    openapiFields.add("message");
    openapiFields.add("parameters");
    openapiFields.add("status");
    openapiFields.add("timestamp");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Command
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Command.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Command is not found in the empty JSON string", Command.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Command.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Command` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("accountid") != null && !jsonObj.get("accountid").isJsonNull()) && !jsonObj.get("accountid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountid").toString()));
      }
      if ((jsonObj.get("commandid") != null && !jsonObj.get("commandid").isJsonNull()) && !jsonObj.get("commandid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandid").toString()));
      }
      if ((jsonObj.get("commandstatusname") != null && !jsonObj.get("commandstatusname").isJsonNull()) && !jsonObj.get("commandstatusname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandstatusname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandstatusname").toString()));
      }
      if ((jsonObj.get("commandtypename") != null && !jsonObj.get("commandtypename").isJsonNull()) && !jsonObj.get("commandtypename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandtypename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandtypename").toString()));
      }
      if ((jsonObj.get("computer") != null && !jsonObj.get("computer").isJsonNull()) && !jsonObj.get("computer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computer").toString()));
      }
      if ((jsonObj.get("hwid") != null && !jsonObj.get("hwid").isJsonNull()) && !jsonObj.get("hwid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hwid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hwid").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Command.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Command' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Command> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Command.class));

       return (TypeAdapter<T>) new TypeAdapter<Command>() {
           @Override
           public void write(JsonWriter out, Command value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Command read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Command given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Command
   * @throws IOException if the JSON string is invalid with respect to Command
   */
  public static Command fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Command.class);
  }

  /**
   * Convert an instance of Command to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

