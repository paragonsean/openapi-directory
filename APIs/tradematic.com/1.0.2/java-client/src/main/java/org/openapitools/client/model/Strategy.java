/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Rules;
import org.openapitools.client.model.Taskresult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Strategy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Strategy {
  public static final String SERIALIZED_NAME_APR = "apr";
  @SerializedName(SERIALIZED_NAME_APR)
  private String apr;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_BROKERNAME = "brokername";
  @SerializedName(SERIALIZED_NAME_BROKERNAME)
  private String brokername;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DATASCALE = "datascale";
  @SerializedName(SERIALIZED_NAME_DATASCALE)
  private String datascale;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DRAWDOWN = "drawdown";
  @SerializedName(SERIALIZED_NAME_DRAWDOWN)
  private String drawdown;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_LIMITORDER = "limitorder";
  @SerializedName(SERIALIZED_NAME_LIMITORDER)
  private String limitorder;

  public static final String SERIALIZED_NAME_MARKETNAME = "marketname";
  @SerializedName(SERIALIZED_NAME_MARKETNAME)
  private String marketname;

  public static final String SERIALIZED_NAME_MULTIPOSITION = "multiposition";
  @SerializedName(SERIALIZED_NAME_MULTIPOSITION)
  private String multiposition;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private String permissions;

  public static final String SERIALIZED_NAME_POSITIONSIZE = "positionsize";
  @SerializedName(SERIALIZED_NAME_POSITIONSIZE)
  private String positionsize;

  public static final String SERIALIZED_NAME_RISKLEVELCODE = "risklevelcode";
  @SerializedName(SERIALIZED_NAME_RISKLEVELCODE)
  private String risklevelcode;

  public static final String SERIALIZED_NAME_RISKLEVELID = "risklevelid";
  @SerializedName(SERIALIZED_NAME_RISKLEVELID)
  private String risklevelid;

  public static final String SERIALIZED_NAME_RISKLEVELNAME = "risklevelname";
  @SerializedName(SERIALIZED_NAME_RISKLEVELNAME)
  private String risklevelname;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private Rules rules;

  public static final String SERIALIZED_NAME_STRATEGYID = "strategyid";
  @SerializedName(SERIALIZED_NAME_STRATEGYID)
  private String strategyid;

  public static final String SERIALIZED_NAME_STRATEGYTYPEID = "strategytypeid";
  @SerializedName(SERIALIZED_NAME_STRATEGYTYPEID)
  private String strategytypeid;

  public static final String SERIALIZED_NAME_SYMBOLS = "symbols";
  @SerializedName(SERIALIZED_NAME_SYMBOLS)
  private List<String> symbols = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASKFOLDER = "taskfolder";
  @SerializedName(SERIALIZED_NAME_TASKFOLDER)
  private String taskfolder;

  public static final String SERIALIZED_NAME_TASKID = "taskid";
  @SerializedName(SERIALIZED_NAME_TASKID)
  private String taskid;

  public static final String SERIALIZED_NAME_TASKRESULT = "taskresult";
  @SerializedName(SERIALIZED_NAME_TASKRESULT)
  private Taskresult taskresult;

  public static final String SERIALIZED_NAME_TIMEFRAME = "timeframe";
  @SerializedName(SERIALIZED_NAME_TIMEFRAME)
  private String timeframe;

  public static final String SERIALIZED_NAME_UPDATEDATE = "updatedate";
  @SerializedName(SERIALIZED_NAME_UPDATEDATE)
  private OffsetDateTime updatedate;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Strategy() {
  }

  public Strategy apr(String apr) {
    this.apr = apr;
    return this;
  }

  /**
   * Get apr
   * @return apr
   */
  @javax.annotation.Nullable
  public String getApr() {
    return apr;
  }

  public void setApr(String apr) {
    this.apr = apr;
  }


  public Strategy author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public Strategy brokername(String brokername) {
    this.brokername = brokername;
    return this;
  }

  /**
   * Get brokername
   * @return brokername
   */
  @javax.annotation.Nullable
  public String getBrokername() {
    return brokername;
  }

  public void setBrokername(String brokername) {
    this.brokername = brokername;
  }


  public Strategy code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Strategy datascale(String datascale) {
    this.datascale = datascale;
    return this;
  }

  /**
   * Get datascale
   * @return datascale
   */
  @javax.annotation.Nullable
  public String getDatascale() {
    return datascale;
  }

  public void setDatascale(String datascale) {
    this.datascale = datascale;
  }


  public Strategy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Strategy drawdown(String drawdown) {
    this.drawdown = drawdown;
    return this;
  }

  /**
   * Get drawdown
   * @return drawdown
   */
  @javax.annotation.Nullable
  public String getDrawdown() {
    return drawdown;
  }

  public void setDrawdown(String drawdown) {
    this.drawdown = drawdown;
  }


  public Strategy folder(String folder) {
    this.folder = folder;
    return this;
  }

  /**
   * Get folder
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }

  public void setFolder(String folder) {
    this.folder = folder;
  }


  public Strategy guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public Strategy image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Strategy limitorder(String limitorder) {
    this.limitorder = limitorder;
    return this;
  }

  /**
   * Get limitorder
   * @return limitorder
   */
  @javax.annotation.Nullable
  public String getLimitorder() {
    return limitorder;
  }

  public void setLimitorder(String limitorder) {
    this.limitorder = limitorder;
  }


  public Strategy marketname(String marketname) {
    this.marketname = marketname;
    return this;
  }

  /**
   * Get marketname
   * @return marketname
   */
  @javax.annotation.Nullable
  public String getMarketname() {
    return marketname;
  }

  public void setMarketname(String marketname) {
    this.marketname = marketname;
  }


  public Strategy multiposition(String multiposition) {
    this.multiposition = multiposition;
    return this;
  }

  /**
   * Get multiposition
   * @return multiposition
   */
  @javax.annotation.Nullable
  public String getMultiposition() {
    return multiposition;
  }

  public void setMultiposition(String multiposition) {
    this.multiposition = multiposition;
  }


  public Strategy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Strategy owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public Strategy permissions(String permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public String getPermissions() {
    return permissions;
  }

  public void setPermissions(String permissions) {
    this.permissions = permissions;
  }


  public Strategy positionsize(String positionsize) {
    this.positionsize = positionsize;
    return this;
  }

  /**
   * Get positionsize
   * @return positionsize
   */
  @javax.annotation.Nullable
  public String getPositionsize() {
    return positionsize;
  }

  public void setPositionsize(String positionsize) {
    this.positionsize = positionsize;
  }


  public Strategy risklevelcode(String risklevelcode) {
    this.risklevelcode = risklevelcode;
    return this;
  }

  /**
   * Get risklevelcode
   * @return risklevelcode
   */
  @javax.annotation.Nullable
  public String getRisklevelcode() {
    return risklevelcode;
  }

  public void setRisklevelcode(String risklevelcode) {
    this.risklevelcode = risklevelcode;
  }


  public Strategy risklevelid(String risklevelid) {
    this.risklevelid = risklevelid;
    return this;
  }

  /**
   * Get risklevelid
   * @return risklevelid
   */
  @javax.annotation.Nullable
  public String getRisklevelid() {
    return risklevelid;
  }

  public void setRisklevelid(String risklevelid) {
    this.risklevelid = risklevelid;
  }


  public Strategy risklevelname(String risklevelname) {
    this.risklevelname = risklevelname;
    return this;
  }

  /**
   * Get risklevelname
   * @return risklevelname
   */
  @javax.annotation.Nullable
  public String getRisklevelname() {
    return risklevelname;
  }

  public void setRisklevelname(String risklevelname) {
    this.risklevelname = risklevelname;
  }


  public Strategy rules(Rules rules) {
    this.rules = rules;
    return this;
  }

  /**
   * Get rules
   * @return rules
   */
  @javax.annotation.Nullable
  public Rules getRules() {
    return rules;
  }

  public void setRules(Rules rules) {
    this.rules = rules;
  }


  public Strategy strategyid(String strategyid) {
    this.strategyid = strategyid;
    return this;
  }

  /**
   * Get strategyid
   * @return strategyid
   */
  @javax.annotation.Nullable
  public String getStrategyid() {
    return strategyid;
  }

  public void setStrategyid(String strategyid) {
    this.strategyid = strategyid;
  }


  public Strategy strategytypeid(String strategytypeid) {
    this.strategytypeid = strategytypeid;
    return this;
  }

  /**
   * Get strategytypeid
   * @return strategytypeid
   */
  @javax.annotation.Nullable
  public String getStrategytypeid() {
    return strategytypeid;
  }

  public void setStrategytypeid(String strategytypeid) {
    this.strategytypeid = strategytypeid;
  }


  public Strategy symbols(List<String> symbols) {
    this.symbols = symbols;
    return this;
  }

  public Strategy addSymbolsItem(String symbolsItem) {
    if (this.symbols == null) {
      this.symbols = new ArrayList<>();
    }
    this.symbols.add(symbolsItem);
    return this;
  }

  /**
   * Get symbols
   * @return symbols
   */
  @javax.annotation.Nullable
  public List<String> getSymbols() {
    return symbols;
  }

  public void setSymbols(List<String> symbols) {
    this.symbols = symbols;
  }


  public Strategy taskfolder(String taskfolder) {
    this.taskfolder = taskfolder;
    return this;
  }

  /**
   * Get taskfolder
   * @return taskfolder
   */
  @javax.annotation.Nullable
  public String getTaskfolder() {
    return taskfolder;
  }

  public void setTaskfolder(String taskfolder) {
    this.taskfolder = taskfolder;
  }


  public Strategy taskid(String taskid) {
    this.taskid = taskid;
    return this;
  }

  /**
   * Get taskid
   * @return taskid
   */
  @javax.annotation.Nullable
  public String getTaskid() {
    return taskid;
  }

  public void setTaskid(String taskid) {
    this.taskid = taskid;
  }


  public Strategy taskresult(Taskresult taskresult) {
    this.taskresult = taskresult;
    return this;
  }

  /**
   * Get taskresult
   * @return taskresult
   */
  @javax.annotation.Nullable
  public Taskresult getTaskresult() {
    return taskresult;
  }

  public void setTaskresult(Taskresult taskresult) {
    this.taskresult = taskresult;
  }


  public Strategy timeframe(String timeframe) {
    this.timeframe = timeframe;
    return this;
  }

  /**
   * Get timeframe
   * @return timeframe
   */
  @javax.annotation.Nullable
  public String getTimeframe() {
    return timeframe;
  }

  public void setTimeframe(String timeframe) {
    this.timeframe = timeframe;
  }


  public Strategy updatedate(OffsetDateTime updatedate) {
    this.updatedate = updatedate;
    return this;
  }

  /**
   * Get updatedate
   * @return updatedate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedate() {
    return updatedate;
  }

  public void setUpdatedate(OffsetDateTime updatedate) {
    this.updatedate = updatedate;
  }


  public Strategy url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Strategy strategy = (Strategy) o;
    return Objects.equals(this.apr, strategy.apr) &&
        Objects.equals(this.author, strategy.author) &&
        Objects.equals(this.brokername, strategy.brokername) &&
        Objects.equals(this.code, strategy.code) &&
        Objects.equals(this.datascale, strategy.datascale) &&
        Objects.equals(this.description, strategy.description) &&
        Objects.equals(this.drawdown, strategy.drawdown) &&
        Objects.equals(this.folder, strategy.folder) &&
        Objects.equals(this.guid, strategy.guid) &&
        Objects.equals(this.image, strategy.image) &&
        Objects.equals(this.limitorder, strategy.limitorder) &&
        Objects.equals(this.marketname, strategy.marketname) &&
        Objects.equals(this.multiposition, strategy.multiposition) &&
        Objects.equals(this.name, strategy.name) &&
        Objects.equals(this.owner, strategy.owner) &&
        Objects.equals(this.permissions, strategy.permissions) &&
        Objects.equals(this.positionsize, strategy.positionsize) &&
        Objects.equals(this.risklevelcode, strategy.risklevelcode) &&
        Objects.equals(this.risklevelid, strategy.risklevelid) &&
        Objects.equals(this.risklevelname, strategy.risklevelname) &&
        Objects.equals(this.rules, strategy.rules) &&
        Objects.equals(this.strategyid, strategy.strategyid) &&
        Objects.equals(this.strategytypeid, strategy.strategytypeid) &&
        Objects.equals(this.symbols, strategy.symbols) &&
        Objects.equals(this.taskfolder, strategy.taskfolder) &&
        Objects.equals(this.taskid, strategy.taskid) &&
        Objects.equals(this.taskresult, strategy.taskresult) &&
        Objects.equals(this.timeframe, strategy.timeframe) &&
        Objects.equals(this.updatedate, strategy.updatedate) &&
        Objects.equals(this.url, strategy.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apr, author, brokername, code, datascale, description, drawdown, folder, guid, image, limitorder, marketname, multiposition, name, owner, permissions, positionsize, risklevelcode, risklevelid, risklevelname, rules, strategyid, strategytypeid, symbols, taskfolder, taskid, taskresult, timeframe, updatedate, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Strategy {\n");
    sb.append("    apr: ").append(toIndentedString(apr)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    brokername: ").append(toIndentedString(brokername)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    datascale: ").append(toIndentedString(datascale)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    drawdown: ").append(toIndentedString(drawdown)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    limitorder: ").append(toIndentedString(limitorder)).append("\n");
    sb.append("    marketname: ").append(toIndentedString(marketname)).append("\n");
    sb.append("    multiposition: ").append(toIndentedString(multiposition)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    positionsize: ").append(toIndentedString(positionsize)).append("\n");
    sb.append("    risklevelcode: ").append(toIndentedString(risklevelcode)).append("\n");
    sb.append("    risklevelid: ").append(toIndentedString(risklevelid)).append("\n");
    sb.append("    risklevelname: ").append(toIndentedString(risklevelname)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    strategyid: ").append(toIndentedString(strategyid)).append("\n");
    sb.append("    strategytypeid: ").append(toIndentedString(strategytypeid)).append("\n");
    sb.append("    symbols: ").append(toIndentedString(symbols)).append("\n");
    sb.append("    taskfolder: ").append(toIndentedString(taskfolder)).append("\n");
    sb.append("    taskid: ").append(toIndentedString(taskid)).append("\n");
    sb.append("    taskresult: ").append(toIndentedString(taskresult)).append("\n");
    sb.append("    timeframe: ").append(toIndentedString(timeframe)).append("\n");
    sb.append("    updatedate: ").append(toIndentedString(updatedate)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apr");
    openapiFields.add("author");
    openapiFields.add("brokername");
    openapiFields.add("code");
    openapiFields.add("datascale");
    openapiFields.add("description");
    openapiFields.add("drawdown");
    openapiFields.add("folder");
    openapiFields.add("guid");
    openapiFields.add("image");
    openapiFields.add("limitorder");
    openapiFields.add("marketname");
    openapiFields.add("multiposition");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("permissions");
    openapiFields.add("positionsize");
    openapiFields.add("risklevelcode");
    openapiFields.add("risklevelid");
    openapiFields.add("risklevelname");
    openapiFields.add("rules");
    openapiFields.add("strategyid");
    openapiFields.add("strategytypeid");
    openapiFields.add("symbols");
    openapiFields.add("taskfolder");
    openapiFields.add("taskid");
    openapiFields.add("taskresult");
    openapiFields.add("timeframe");
    openapiFields.add("updatedate");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Strategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Strategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Strategy is not found in the empty JSON string", Strategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Strategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Strategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apr") != null && !jsonObj.get("apr").isJsonNull()) && !jsonObj.get("apr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apr").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("brokername") != null && !jsonObj.get("brokername").isJsonNull()) && !jsonObj.get("brokername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brokername").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("datascale") != null && !jsonObj.get("datascale").isJsonNull()) && !jsonObj.get("datascale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datascale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datascale").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("drawdown") != null && !jsonObj.get("drawdown").isJsonNull()) && !jsonObj.get("drawdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drawdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drawdown").toString()));
      }
      if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("limitorder") != null && !jsonObj.get("limitorder").isJsonNull()) && !jsonObj.get("limitorder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitorder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitorder").toString()));
      }
      if ((jsonObj.get("marketname") != null && !jsonObj.get("marketname").isJsonNull()) && !jsonObj.get("marketname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketname").toString()));
      }
      if ((jsonObj.get("multiposition") != null && !jsonObj.get("multiposition").isJsonNull()) && !jsonObj.get("multiposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiposition").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) && !jsonObj.get("permissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("positionsize") != null && !jsonObj.get("positionsize").isJsonNull()) && !jsonObj.get("positionsize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionsize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positionsize").toString()));
      }
      if ((jsonObj.get("risklevelcode") != null && !jsonObj.get("risklevelcode").isJsonNull()) && !jsonObj.get("risklevelcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risklevelcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risklevelcode").toString()));
      }
      if ((jsonObj.get("risklevelid") != null && !jsonObj.get("risklevelid").isJsonNull()) && !jsonObj.get("risklevelid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risklevelid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risklevelid").toString()));
      }
      if ((jsonObj.get("risklevelname") != null && !jsonObj.get("risklevelname").isJsonNull()) && !jsonObj.get("risklevelname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risklevelname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risklevelname").toString()));
      }
      // validate the optional field `rules`
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        Rules.validateJsonElement(jsonObj.get("rules"));
      }
      if ((jsonObj.get("strategyid") != null && !jsonObj.get("strategyid").isJsonNull()) && !jsonObj.get("strategyid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategyid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategyid").toString()));
      }
      if ((jsonObj.get("strategytypeid") != null && !jsonObj.get("strategytypeid").isJsonNull()) && !jsonObj.get("strategytypeid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategytypeid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategytypeid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("symbols") != null && !jsonObj.get("symbols").isJsonNull() && !jsonObj.get("symbols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbols` to be an array in the JSON string but got `%s`", jsonObj.get("symbols").toString()));
      }
      if ((jsonObj.get("taskfolder") != null && !jsonObj.get("taskfolder").isJsonNull()) && !jsonObj.get("taskfolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskfolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskfolder").toString()));
      }
      if ((jsonObj.get("taskid") != null && !jsonObj.get("taskid").isJsonNull()) && !jsonObj.get("taskid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskid").toString()));
      }
      // validate the optional field `taskresult`
      if (jsonObj.get("taskresult") != null && !jsonObj.get("taskresult").isJsonNull()) {
        Taskresult.validateJsonElement(jsonObj.get("taskresult"));
      }
      if ((jsonObj.get("timeframe") != null && !jsonObj.get("timeframe").isJsonNull()) && !jsonObj.get("timeframe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeframe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeframe").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Strategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Strategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Strategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Strategy.class));

       return (TypeAdapter<T>) new TypeAdapter<Strategy>() {
           @Override
           public void write(JsonWriter out, Strategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Strategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Strategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Strategy
   * @throws IOException if the JSON string is invalid with respect to Strategy
   */
  public static Strategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Strategy.class);
  }

  /**
   * Convert an instance of Strategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

