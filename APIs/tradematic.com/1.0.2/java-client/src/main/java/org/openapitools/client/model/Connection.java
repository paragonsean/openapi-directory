/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Connection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Connection {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private String active;

  public static final String SERIALIZED_NAME_CONNECTIONID = "connectionid";
  @SerializedName(SERIALIZED_NAME_CONNECTIONID)
  private String connectionid;

  public static final String SERIALIZED_NAME_CONNECTIONSTRING = "connectionstring";
  @SerializedName(SERIALIZED_NAME_CONNECTIONSTRING)
  private String connectionstring;

  public static final String SERIALIZED_NAME_CONNECTORCODE = "connectorcode";
  @SerializedName(SERIALIZED_NAME_CONNECTORCODE)
  private String connectorcode;

  public static final String SERIALIZED_NAME_CONNECTORID = "connectorid";
  @SerializedName(SERIALIZED_NAME_CONNECTORID)
  private String connectorid;

  public static final String SERIALIZED_NAME_CONNECTORNAME = "connectorname";
  @SerializedName(SERIALIZED_NAME_CONNECTORNAME)
  private String connectorname;

  public static final String SERIALIZED_NAME_CONNECTORTYPENAME = "connectortypename";
  @SerializedName(SERIALIZED_NAME_CONNECTORTYPENAME)
  private String connectortypename;

  public static final String SERIALIZED_NAME_CREATIONDATE = "creationdate";
  @SerializedName(SERIALIZED_NAME_CREATIONDATE)
  private OffsetDateTime creationdate;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_SESSIONID = "sessionid";
  @SerializedName(SERIALIZED_NAME_SESSIONID)
  private String sessionid;

  public static final String SERIALIZED_NAME_UPDATEDATE = "updatedate";
  @SerializedName(SERIALIZED_NAME_UPDATEDATE)
  private OffsetDateTime updatedate;

  public Connection() {
  }

  public Connection active(String active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public String getActive() {
    return active;
  }

  public void setActive(String active) {
    this.active = active;
  }


  public Connection connectionid(String connectionid) {
    this.connectionid = connectionid;
    return this;
  }

  /**
   * Get connectionid
   * @return connectionid
   */
  @javax.annotation.Nullable
  public String getConnectionid() {
    return connectionid;
  }

  public void setConnectionid(String connectionid) {
    this.connectionid = connectionid;
  }


  public Connection connectionstring(String connectionstring) {
    this.connectionstring = connectionstring;
    return this;
  }

  /**
   * Get connectionstring
   * @return connectionstring
   */
  @javax.annotation.Nullable
  public String getConnectionstring() {
    return connectionstring;
  }

  public void setConnectionstring(String connectionstring) {
    this.connectionstring = connectionstring;
  }


  public Connection connectorcode(String connectorcode) {
    this.connectorcode = connectorcode;
    return this;
  }

  /**
   * Get connectorcode
   * @return connectorcode
   */
  @javax.annotation.Nullable
  public String getConnectorcode() {
    return connectorcode;
  }

  public void setConnectorcode(String connectorcode) {
    this.connectorcode = connectorcode;
  }


  public Connection connectorid(String connectorid) {
    this.connectorid = connectorid;
    return this;
  }

  /**
   * Get connectorid
   * @return connectorid
   */
  @javax.annotation.Nullable
  public String getConnectorid() {
    return connectorid;
  }

  public void setConnectorid(String connectorid) {
    this.connectorid = connectorid;
  }


  public Connection connectorname(String connectorname) {
    this.connectorname = connectorname;
    return this;
  }

  /**
   * Get connectorname
   * @return connectorname
   */
  @javax.annotation.Nullable
  public String getConnectorname() {
    return connectorname;
  }

  public void setConnectorname(String connectorname) {
    this.connectorname = connectorname;
  }


  public Connection connectortypename(String connectortypename) {
    this.connectortypename = connectortypename;
    return this;
  }

  /**
   * Get connectortypename
   * @return connectortypename
   */
  @javax.annotation.Nullable
  public String getConnectortypename() {
    return connectortypename;
  }

  public void setConnectortypename(String connectortypename) {
    this.connectortypename = connectortypename;
  }


  public Connection creationdate(OffsetDateTime creationdate) {
    this.creationdate = creationdate;
    return this;
  }

  /**
   * Get creationdate
   * @return creationdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationdate() {
    return creationdate;
  }

  public void setCreationdate(OffsetDateTime creationdate) {
    this.creationdate = creationdate;
  }


  public Connection host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public Connection login(String login) {
    this.login = login;
    return this;
  }

  /**
   * Get login
   * @return login
   */
  @javax.annotation.Nullable
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }


  public Connection password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public Connection port(String port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  public Connection sessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  /**
   * Get sessionid
   * @return sessionid
   */
  @javax.annotation.Nullable
  public String getSessionid() {
    return sessionid;
  }

  public void setSessionid(String sessionid) {
    this.sessionid = sessionid;
  }


  public Connection updatedate(OffsetDateTime updatedate) {
    this.updatedate = updatedate;
    return this;
  }

  /**
   * Get updatedate
   * @return updatedate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedate() {
    return updatedate;
  }

  public void setUpdatedate(OffsetDateTime updatedate) {
    this.updatedate = updatedate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connection connection = (Connection) o;
    return Objects.equals(this.active, connection.active) &&
        Objects.equals(this.connectionid, connection.connectionid) &&
        Objects.equals(this.connectionstring, connection.connectionstring) &&
        Objects.equals(this.connectorcode, connection.connectorcode) &&
        Objects.equals(this.connectorid, connection.connectorid) &&
        Objects.equals(this.connectorname, connection.connectorname) &&
        Objects.equals(this.connectortypename, connection.connectortypename) &&
        Objects.equals(this.creationdate, connection.creationdate) &&
        Objects.equals(this.host, connection.host) &&
        Objects.equals(this.login, connection.login) &&
        Objects.equals(this.password, connection.password) &&
        Objects.equals(this.port, connection.port) &&
        Objects.equals(this.sessionid, connection.sessionid) &&
        Objects.equals(this.updatedate, connection.updatedate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, connectionid, connectionstring, connectorcode, connectorid, connectorname, connectortypename, creationdate, host, login, password, port, sessionid, updatedate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connection {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    connectionid: ").append(toIndentedString(connectionid)).append("\n");
    sb.append("    connectionstring: ").append(toIndentedString(connectionstring)).append("\n");
    sb.append("    connectorcode: ").append(toIndentedString(connectorcode)).append("\n");
    sb.append("    connectorid: ").append(toIndentedString(connectorid)).append("\n");
    sb.append("    connectorname: ").append(toIndentedString(connectorname)).append("\n");
    sb.append("    connectortypename: ").append(toIndentedString(connectortypename)).append("\n");
    sb.append("    creationdate: ").append(toIndentedString(creationdate)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    sessionid: ").append(toIndentedString(sessionid)).append("\n");
    sb.append("    updatedate: ").append(toIndentedString(updatedate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("connectionid");
    openapiFields.add("connectionstring");
    openapiFields.add("connectorcode");
    openapiFields.add("connectorid");
    openapiFields.add("connectorname");
    openapiFields.add("connectortypename");
    openapiFields.add("creationdate");
    openapiFields.add("host");
    openapiFields.add("login");
    openapiFields.add("password");
    openapiFields.add("port");
    openapiFields.add("sessionid");
    openapiFields.add("updatedate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Connection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connection is not found in the empty JSON string", Connection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active") != null && !jsonObj.get("active").isJsonNull()) && !jsonObj.get("active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active").toString()));
      }
      if ((jsonObj.get("connectionid") != null && !jsonObj.get("connectionid").isJsonNull()) && !jsonObj.get("connectionid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionid").toString()));
      }
      if ((jsonObj.get("connectionstring") != null && !jsonObj.get("connectionstring").isJsonNull()) && !jsonObj.get("connectionstring").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionstring` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionstring").toString()));
      }
      if ((jsonObj.get("connectorcode") != null && !jsonObj.get("connectorcode").isJsonNull()) && !jsonObj.get("connectorcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorcode").toString()));
      }
      if ((jsonObj.get("connectorid") != null && !jsonObj.get("connectorid").isJsonNull()) && !jsonObj.get("connectorid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorid").toString()));
      }
      if ((jsonObj.get("connectorname") != null && !jsonObj.get("connectorname").isJsonNull()) && !jsonObj.get("connectorname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorname").toString()));
      }
      if ((jsonObj.get("connectortypename") != null && !jsonObj.get("connectortypename").isJsonNull()) && !jsonObj.get("connectortypename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectortypename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectortypename").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) && !jsonObj.get("port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port").toString()));
      }
      if ((jsonObj.get("sessionid") != null && !jsonObj.get("sessionid").isJsonNull()) && !jsonObj.get("sessionid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connection.class));

       return (TypeAdapter<T>) new TypeAdapter<Connection>() {
           @Override
           public void write(JsonWriter out, Connection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Connection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Connection
   * @throws IOException if the JSON string is invalid with respect to Connection
   */
  public static Connection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connection.class);
  }

  /**
   * Convert an instance of Connection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

