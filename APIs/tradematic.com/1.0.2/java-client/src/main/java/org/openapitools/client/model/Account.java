/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_ACCOUNTID = "accountid";
  @SerializedName(SERIALIZED_NAME_ACCOUNTID)
  private String accountid;

  public static final String SERIALIZED_NAME_ACCOUNTTYPENAME = "accounttypename";
  @SerializedName(SERIALIZED_NAME_ACCOUNTTYPENAME)
  private String accounttypename;

  public static final String SERIALIZED_NAME_CASH = "cash";
  @SerializedName(SERIALIZED_NAME_CASH)
  private String cash;

  public static final String SERIALIZED_NAME_CHANGE = "change";
  @SerializedName(SERIALIZED_NAME_CHANGE)
  private String change;

  public static final String SERIALIZED_NAME_CHANGEPERCENT = "changepercent";
  @SerializedName(SERIALIZED_NAME_CHANGEPERCENT)
  private String changepercent;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_COMPUTER = "computer";
  @SerializedName(SERIALIZED_NAME_COMPUTER)
  private String computer;

  public static final String SERIALIZED_NAME_CURRENCYID = "currencyid";
  @SerializedName(SERIALIZED_NAME_CURRENCYID)
  private String currencyid;

  public static final String SERIALIZED_NAME_CURRENCYTEXT = "currencytext";
  @SerializedName(SERIALIZED_NAME_CURRENCYTEXT)
  private String currencytext;

  public static final String SERIALIZED_NAME_HWID = "hwid";
  @SerializedName(SERIALIZED_NAME_HWID)
  private String hwid;

  public static final String SERIALIZED_NAME_POSITIONS = "positions";
  @SerializedName(SERIALIZED_NAME_POSITIONS)
  private Map<String, String> positions = new HashMap<>();

  public static final String SERIALIZED_NAME_POSITIONSPERCENT = "positionspercent";
  @SerializedName(SERIALIZED_NAME_POSITIONSPERCENT)
  private Map<String, String> positionspercent = new HashMap<>();

  public static final String SERIALIZED_NAME_SESSIONID = "sessionid";
  @SerializedName(SERIALIZED_NAME_SESSIONID)
  private String sessionid;

  public static final String SERIALIZED_NAME_TYPEID = "typeid";
  @SerializedName(SERIALIZED_NAME_TYPEID)
  private String typeid;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public Account() {
  }

  public Account account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public Account accountid(String accountid) {
    this.accountid = accountid;
    return this;
  }

  /**
   * Get accountid
   * @return accountid
   */
  @javax.annotation.Nullable
  public String getAccountid() {
    return accountid;
  }

  public void setAccountid(String accountid) {
    this.accountid = accountid;
  }


  public Account accounttypename(String accounttypename) {
    this.accounttypename = accounttypename;
    return this;
  }

  /**
   * Get accounttypename
   * @return accounttypename
   */
  @javax.annotation.Nullable
  public String getAccounttypename() {
    return accounttypename;
  }

  public void setAccounttypename(String accounttypename) {
    this.accounttypename = accounttypename;
  }


  public Account cash(String cash) {
    this.cash = cash;
    return this;
  }

  /**
   * Get cash
   * @return cash
   */
  @javax.annotation.Nullable
  public String getCash() {
    return cash;
  }

  public void setCash(String cash) {
    this.cash = cash;
  }


  public Account change(String change) {
    this.change = change;
    return this;
  }

  /**
   * Get change
   * @return change
   */
  @javax.annotation.Nullable
  public String getChange() {
    return change;
  }

  public void setChange(String change) {
    this.change = change;
  }


  public Account changepercent(String changepercent) {
    this.changepercent = changepercent;
    return this;
  }

  /**
   * Get changepercent
   * @return changepercent
   */
  @javax.annotation.Nullable
  public String getChangepercent() {
    return changepercent;
  }

  public void setChangepercent(String changepercent) {
    this.changepercent = changepercent;
  }


  public Account comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public Account computer(String computer) {
    this.computer = computer;
    return this;
  }

  /**
   * Get computer
   * @return computer
   */
  @javax.annotation.Nullable
  public String getComputer() {
    return computer;
  }

  public void setComputer(String computer) {
    this.computer = computer;
  }


  public Account currencyid(String currencyid) {
    this.currencyid = currencyid;
    return this;
  }

  /**
   * Get currencyid
   * @return currencyid
   */
  @javax.annotation.Nullable
  public String getCurrencyid() {
    return currencyid;
  }

  public void setCurrencyid(String currencyid) {
    this.currencyid = currencyid;
  }


  public Account currencytext(String currencytext) {
    this.currencytext = currencytext;
    return this;
  }

  /**
   * Get currencytext
   * @return currencytext
   */
  @javax.annotation.Nullable
  public String getCurrencytext() {
    return currencytext;
  }

  public void setCurrencytext(String currencytext) {
    this.currencytext = currencytext;
  }


  public Account hwid(String hwid) {
    this.hwid = hwid;
    return this;
  }

  /**
   * Get hwid
   * @return hwid
   */
  @javax.annotation.Nullable
  public String getHwid() {
    return hwid;
  }

  public void setHwid(String hwid) {
    this.hwid = hwid;
  }


  public Account positions(Map<String, String> positions) {
    this.positions = positions;
    return this;
  }

  public Account putPositionsItem(String key, String positionsItem) {
    if (this.positions == null) {
      this.positions = new HashMap<>();
    }
    this.positions.put(key, positionsItem);
    return this;
  }

  /**
   * Get positions
   * @return positions
   */
  @javax.annotation.Nullable
  public Map<String, String> getPositions() {
    return positions;
  }

  public void setPositions(Map<String, String> positions) {
    this.positions = positions;
  }


  public Account positionspercent(Map<String, String> positionspercent) {
    this.positionspercent = positionspercent;
    return this;
  }

  public Account putPositionspercentItem(String key, String positionspercentItem) {
    if (this.positionspercent == null) {
      this.positionspercent = new HashMap<>();
    }
    this.positionspercent.put(key, positionspercentItem);
    return this;
  }

  /**
   * Get positionspercent
   * @return positionspercent
   */
  @javax.annotation.Nullable
  public Map<String, String> getPositionspercent() {
    return positionspercent;
  }

  public void setPositionspercent(Map<String, String> positionspercent) {
    this.positionspercent = positionspercent;
  }


  public Account sessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  /**
   * Get sessionid
   * @return sessionid
   */
  @javax.annotation.Nullable
  public String getSessionid() {
    return sessionid;
  }

  public void setSessionid(String sessionid) {
    this.sessionid = sessionid;
  }


  public Account typeid(String typeid) {
    this.typeid = typeid;
    return this;
  }

  /**
   * Get typeid
   * @return typeid
   */
  @javax.annotation.Nullable
  public String getTypeid() {
    return typeid;
  }

  public void setTypeid(String typeid) {
    this.typeid = typeid;
  }


  public Account value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.account, account.account) &&
        Objects.equals(this.accountid, account.accountid) &&
        Objects.equals(this.accounttypename, account.accounttypename) &&
        Objects.equals(this.cash, account.cash) &&
        Objects.equals(this.change, account.change) &&
        Objects.equals(this.changepercent, account.changepercent) &&
        Objects.equals(this.comments, account.comments) &&
        Objects.equals(this.computer, account.computer) &&
        Objects.equals(this.currencyid, account.currencyid) &&
        Objects.equals(this.currencytext, account.currencytext) &&
        Objects.equals(this.hwid, account.hwid) &&
        Objects.equals(this.positions, account.positions) &&
        Objects.equals(this.positionspercent, account.positionspercent) &&
        Objects.equals(this.sessionid, account.sessionid) &&
        Objects.equals(this.typeid, account.typeid) &&
        Objects.equals(this.value, account.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, accountid, accounttypename, cash, change, changepercent, comments, computer, currencyid, currencytext, hwid, positions, positionspercent, sessionid, typeid, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountid: ").append(toIndentedString(accountid)).append("\n");
    sb.append("    accounttypename: ").append(toIndentedString(accounttypename)).append("\n");
    sb.append("    cash: ").append(toIndentedString(cash)).append("\n");
    sb.append("    change: ").append(toIndentedString(change)).append("\n");
    sb.append("    changepercent: ").append(toIndentedString(changepercent)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    computer: ").append(toIndentedString(computer)).append("\n");
    sb.append("    currencyid: ").append(toIndentedString(currencyid)).append("\n");
    sb.append("    currencytext: ").append(toIndentedString(currencytext)).append("\n");
    sb.append("    hwid: ").append(toIndentedString(hwid)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("    positionspercent: ").append(toIndentedString(positionspercent)).append("\n");
    sb.append("    sessionid: ").append(toIndentedString(sessionid)).append("\n");
    sb.append("    typeid: ").append(toIndentedString(typeid)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("accountid");
    openapiFields.add("accounttypename");
    openapiFields.add("cash");
    openapiFields.add("change");
    openapiFields.add("changepercent");
    openapiFields.add("comments");
    openapiFields.add("computer");
    openapiFields.add("currencyid");
    openapiFields.add("currencytext");
    openapiFields.add("hwid");
    openapiFields.add("positions");
    openapiFields.add("positionspercent");
    openapiFields.add("sessionid");
    openapiFields.add("typeid");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("accountid") != null && !jsonObj.get("accountid").isJsonNull()) && !jsonObj.get("accountid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountid").toString()));
      }
      if ((jsonObj.get("accounttypename") != null && !jsonObj.get("accounttypename").isJsonNull()) && !jsonObj.get("accounttypename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounttypename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounttypename").toString()));
      }
      if ((jsonObj.get("cash") != null && !jsonObj.get("cash").isJsonNull()) && !jsonObj.get("cash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cash").toString()));
      }
      if ((jsonObj.get("change") != null && !jsonObj.get("change").isJsonNull()) && !jsonObj.get("change").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change").toString()));
      }
      if ((jsonObj.get("changepercent") != null && !jsonObj.get("changepercent").isJsonNull()) && !jsonObj.get("changepercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changepercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changepercent").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("computer") != null && !jsonObj.get("computer").isJsonNull()) && !jsonObj.get("computer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computer").toString()));
      }
      if ((jsonObj.get("currencyid") != null && !jsonObj.get("currencyid").isJsonNull()) && !jsonObj.get("currencyid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyid").toString()));
      }
      if ((jsonObj.get("currencytext") != null && !jsonObj.get("currencytext").isJsonNull()) && !jsonObj.get("currencytext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencytext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencytext").toString()));
      }
      if ((jsonObj.get("hwid") != null && !jsonObj.get("hwid").isJsonNull()) && !jsonObj.get("hwid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hwid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hwid").toString()));
      }
      if ((jsonObj.get("sessionid") != null && !jsonObj.get("sessionid").isJsonNull()) && !jsonObj.get("sessionid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionid").toString()));
      }
      if ((jsonObj.get("typeid") != null && !jsonObj.get("typeid").isJsonNull()) && !jsonObj.get("typeid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeid").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

