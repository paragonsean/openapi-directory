/*
 * Tradematic Cloud API
 * ### Overview Tradematic Cloud is a trading infrastructure for building investment services.  Itâ€™s a trading engine + API + ready-made adapters to stock and forex brokers, crypto exchanges, and market data providers.  You can use it as a cloud API, or you can deploy it on your servers.     ### How to use Tradematic Cloud API  Sign up at [tradematic.cloud](https://tradematic.cloud). After signing up, you will receive your API key.  ### Authorization  Add the 'X-API-KEY' header with your API key to each request.  ### Examples of writing code with Tradematic Cloud API  Examples are available at [tradematic.cloud](https://tradematic.cloud).   ### Swagger (.yaml) File Swagger (.yaml) file can be found [here](http://tradematic.cloud/sdk/swagger.yaml). 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@tradematic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BacktestTrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:20.110152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BacktestTrade {
  public static final String SERIALIZED_NAME_BARSHELD = "barsheld";
  @SerializedName(SERIALIZED_NAME_BARSHELD)
  private String barsheld;

  public static final String SERIALIZED_NAME_CHANGEPCT = "changepct";
  @SerializedName(SERIALIZED_NAME_CHANGEPCT)
  private String changepct;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private String commission;

  public static final String SERIALIZED_NAME_ENTRYDATETIME = "entrydatetime";
  @SerializedName(SERIALIZED_NAME_ENTRYDATETIME)
  private String entrydatetime;

  public static final String SERIALIZED_NAME_ENTRYPRICE = "entryprice";
  @SerializedName(SERIALIZED_NAME_ENTRYPRICE)
  private String entryprice;

  public static final String SERIALIZED_NAME_ENTRYSIGNAL = "entrysignal";
  @SerializedName(SERIALIZED_NAME_ENTRYSIGNAL)
  private String entrysignal;

  public static final String SERIALIZED_NAME_EXITDATETIME = "exitdatetime";
  @SerializedName(SERIALIZED_NAME_EXITDATETIME)
  private String exitdatetime;

  public static final String SERIALIZED_NAME_EXITPRICE = "exitprice";
  @SerializedName(SERIALIZED_NAME_EXITPRICE)
  private String exitprice;

  public static final String SERIALIZED_NAME_EXITSIGNAL = "exitsignal";
  @SerializedName(SERIALIZED_NAME_EXITSIGNAL)
  private String exitsignal;

  public static final String SERIALIZED_NAME_MAE = "mae";
  @SerializedName(SERIALIZED_NAME_MAE)
  private String mae;

  public static final String SERIALIZED_NAME_MFE = "mfe";
  @SerializedName(SERIALIZED_NAME_MFE)
  private String mfe;

  public static final String SERIALIZED_NAME_PANDL = "pandl";
  @SerializedName(SERIALIZED_NAME_PANDL)
  private String pandl;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_SHARES = "shares";
  @SerializedName(SERIALIZED_NAME_SHARES)
  private String shares;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public BacktestTrade() {
  }

  public BacktestTrade barsheld(String barsheld) {
    this.barsheld = barsheld;
    return this;
  }

  /**
   * Get barsheld
   * @return barsheld
   */
  @javax.annotation.Nullable
  public String getBarsheld() {
    return barsheld;
  }

  public void setBarsheld(String barsheld) {
    this.barsheld = barsheld;
  }


  public BacktestTrade changepct(String changepct) {
    this.changepct = changepct;
    return this;
  }

  /**
   * Get changepct
   * @return changepct
   */
  @javax.annotation.Nullable
  public String getChangepct() {
    return changepct;
  }

  public void setChangepct(String changepct) {
    this.changepct = changepct;
  }


  public BacktestTrade commission(String commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Get commission
   * @return commission
   */
  @javax.annotation.Nullable
  public String getCommission() {
    return commission;
  }

  public void setCommission(String commission) {
    this.commission = commission;
  }


  public BacktestTrade entrydatetime(String entrydatetime) {
    this.entrydatetime = entrydatetime;
    return this;
  }

  /**
   * Get entrydatetime
   * @return entrydatetime
   */
  @javax.annotation.Nullable
  public String getEntrydatetime() {
    return entrydatetime;
  }

  public void setEntrydatetime(String entrydatetime) {
    this.entrydatetime = entrydatetime;
  }


  public BacktestTrade entryprice(String entryprice) {
    this.entryprice = entryprice;
    return this;
  }

  /**
   * Get entryprice
   * @return entryprice
   */
  @javax.annotation.Nullable
  public String getEntryprice() {
    return entryprice;
  }

  public void setEntryprice(String entryprice) {
    this.entryprice = entryprice;
  }


  public BacktestTrade entrysignal(String entrysignal) {
    this.entrysignal = entrysignal;
    return this;
  }

  /**
   * Get entrysignal
   * @return entrysignal
   */
  @javax.annotation.Nullable
  public String getEntrysignal() {
    return entrysignal;
  }

  public void setEntrysignal(String entrysignal) {
    this.entrysignal = entrysignal;
  }


  public BacktestTrade exitdatetime(String exitdatetime) {
    this.exitdatetime = exitdatetime;
    return this;
  }

  /**
   * Get exitdatetime
   * @return exitdatetime
   */
  @javax.annotation.Nullable
  public String getExitdatetime() {
    return exitdatetime;
  }

  public void setExitdatetime(String exitdatetime) {
    this.exitdatetime = exitdatetime;
  }


  public BacktestTrade exitprice(String exitprice) {
    this.exitprice = exitprice;
    return this;
  }

  /**
   * Get exitprice
   * @return exitprice
   */
  @javax.annotation.Nullable
  public String getExitprice() {
    return exitprice;
  }

  public void setExitprice(String exitprice) {
    this.exitprice = exitprice;
  }


  public BacktestTrade exitsignal(String exitsignal) {
    this.exitsignal = exitsignal;
    return this;
  }

  /**
   * Get exitsignal
   * @return exitsignal
   */
  @javax.annotation.Nullable
  public String getExitsignal() {
    return exitsignal;
  }

  public void setExitsignal(String exitsignal) {
    this.exitsignal = exitsignal;
  }


  public BacktestTrade mae(String mae) {
    this.mae = mae;
    return this;
  }

  /**
   * Get mae
   * @return mae
   */
  @javax.annotation.Nullable
  public String getMae() {
    return mae;
  }

  public void setMae(String mae) {
    this.mae = mae;
  }


  public BacktestTrade mfe(String mfe) {
    this.mfe = mfe;
    return this;
  }

  /**
   * Get mfe
   * @return mfe
   */
  @javax.annotation.Nullable
  public String getMfe() {
    return mfe;
  }

  public void setMfe(String mfe) {
    this.mfe = mfe;
  }


  public BacktestTrade pandl(String pandl) {
    this.pandl = pandl;
    return this;
  }

  /**
   * Get pandl
   * @return pandl
   */
  @javax.annotation.Nullable
  public String getPandl() {
    return pandl;
  }

  public void setPandl(String pandl) {
    this.pandl = pandl;
  }


  public BacktestTrade position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public BacktestTrade shares(String shares) {
    this.shares = shares;
    return this;
  }

  /**
   * Get shares
   * @return shares
   */
  @javax.annotation.Nullable
  public String getShares() {
    return shares;
  }

  public void setShares(String shares) {
    this.shares = shares;
  }


  public BacktestTrade size(String size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public BacktestTrade symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BacktestTrade backtestTrade = (BacktestTrade) o;
    return Objects.equals(this.barsheld, backtestTrade.barsheld) &&
        Objects.equals(this.changepct, backtestTrade.changepct) &&
        Objects.equals(this.commission, backtestTrade.commission) &&
        Objects.equals(this.entrydatetime, backtestTrade.entrydatetime) &&
        Objects.equals(this.entryprice, backtestTrade.entryprice) &&
        Objects.equals(this.entrysignal, backtestTrade.entrysignal) &&
        Objects.equals(this.exitdatetime, backtestTrade.exitdatetime) &&
        Objects.equals(this.exitprice, backtestTrade.exitprice) &&
        Objects.equals(this.exitsignal, backtestTrade.exitsignal) &&
        Objects.equals(this.mae, backtestTrade.mae) &&
        Objects.equals(this.mfe, backtestTrade.mfe) &&
        Objects.equals(this.pandl, backtestTrade.pandl) &&
        Objects.equals(this.position, backtestTrade.position) &&
        Objects.equals(this.shares, backtestTrade.shares) &&
        Objects.equals(this.size, backtestTrade.size) &&
        Objects.equals(this.symbol, backtestTrade.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(barsheld, changepct, commission, entrydatetime, entryprice, entrysignal, exitdatetime, exitprice, exitsignal, mae, mfe, pandl, position, shares, size, symbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BacktestTrade {\n");
    sb.append("    barsheld: ").append(toIndentedString(barsheld)).append("\n");
    sb.append("    changepct: ").append(toIndentedString(changepct)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    entrydatetime: ").append(toIndentedString(entrydatetime)).append("\n");
    sb.append("    entryprice: ").append(toIndentedString(entryprice)).append("\n");
    sb.append("    entrysignal: ").append(toIndentedString(entrysignal)).append("\n");
    sb.append("    exitdatetime: ").append(toIndentedString(exitdatetime)).append("\n");
    sb.append("    exitprice: ").append(toIndentedString(exitprice)).append("\n");
    sb.append("    exitsignal: ").append(toIndentedString(exitsignal)).append("\n");
    sb.append("    mae: ").append(toIndentedString(mae)).append("\n");
    sb.append("    mfe: ").append(toIndentedString(mfe)).append("\n");
    sb.append("    pandl: ").append(toIndentedString(pandl)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("barsheld");
    openapiFields.add("changepct");
    openapiFields.add("commission");
    openapiFields.add("entrydatetime");
    openapiFields.add("entryprice");
    openapiFields.add("entrysignal");
    openapiFields.add("exitdatetime");
    openapiFields.add("exitprice");
    openapiFields.add("exitsignal");
    openapiFields.add("mae");
    openapiFields.add("mfe");
    openapiFields.add("pandl");
    openapiFields.add("position");
    openapiFields.add("shares");
    openapiFields.add("size");
    openapiFields.add("symbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BacktestTrade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BacktestTrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BacktestTrade is not found in the empty JSON string", BacktestTrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BacktestTrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BacktestTrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("barsheld") != null && !jsonObj.get("barsheld").isJsonNull()) && !jsonObj.get("barsheld").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `barsheld` to be a primitive type in the JSON string but got `%s`", jsonObj.get("barsheld").toString()));
      }
      if ((jsonObj.get("changepct") != null && !jsonObj.get("changepct").isJsonNull()) && !jsonObj.get("changepct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changepct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changepct").toString()));
      }
      if ((jsonObj.get("commission") != null && !jsonObj.get("commission").isJsonNull()) && !jsonObj.get("commission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commission").toString()));
      }
      if ((jsonObj.get("entrydatetime") != null && !jsonObj.get("entrydatetime").isJsonNull()) && !jsonObj.get("entrydatetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entrydatetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entrydatetime").toString()));
      }
      if ((jsonObj.get("entryprice") != null && !jsonObj.get("entryprice").isJsonNull()) && !jsonObj.get("entryprice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryprice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryprice").toString()));
      }
      if ((jsonObj.get("entrysignal") != null && !jsonObj.get("entrysignal").isJsonNull()) && !jsonObj.get("entrysignal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entrysignal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entrysignal").toString()));
      }
      if ((jsonObj.get("exitdatetime") != null && !jsonObj.get("exitdatetime").isJsonNull()) && !jsonObj.get("exitdatetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exitdatetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exitdatetime").toString()));
      }
      if ((jsonObj.get("exitprice") != null && !jsonObj.get("exitprice").isJsonNull()) && !jsonObj.get("exitprice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exitprice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exitprice").toString()));
      }
      if ((jsonObj.get("exitsignal") != null && !jsonObj.get("exitsignal").isJsonNull()) && !jsonObj.get("exitsignal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exitsignal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exitsignal").toString()));
      }
      if ((jsonObj.get("mae") != null && !jsonObj.get("mae").isJsonNull()) && !jsonObj.get("mae").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mae` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mae").toString()));
      }
      if ((jsonObj.get("mfe") != null && !jsonObj.get("mfe").isJsonNull()) && !jsonObj.get("mfe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfe").toString()));
      }
      if ((jsonObj.get("pandl") != null && !jsonObj.get("pandl").isJsonNull()) && !jsonObj.get("pandl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pandl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pandl").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("shares") != null && !jsonObj.get("shares").isJsonNull()) && !jsonObj.get("shares").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shares` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shares").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BacktestTrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BacktestTrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BacktestTrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BacktestTrade.class));

       return (TypeAdapter<T>) new TypeAdapter<BacktestTrade>() {
           @Override
           public void write(JsonWriter out, BacktestTrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BacktestTrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BacktestTrade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BacktestTrade
   * @throws IOException if the JSON string is invalid with respect to BacktestTrade
   */
  public static BacktestTrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BacktestTrade.class);
  }

  /**
   * Convert an instance of BacktestTrade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

