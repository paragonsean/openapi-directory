/*
 * Cisco PSIRT openVuln API
 * The Cisco Product Security Incident Response Team (PSIRT) openVuln API is a RESTful API that allows customers to obtain Cisco Security Vulnerability information in different machine-consumable formats. APIs are important for customers because they allow their technical staff and programmers to build tools that help them do their job more effectively (in this case, to keep up with security vulnerability information). For more information about the Cisco PSIRT openVuln API visit https://developer.cisco.com/site/PSIRT/discover/overview  For detail steps on how to use the API go to:https://developer.cisco.com/site/PSIRT/get-started/getting-started.gsp  This is a beta release of a swagger YAML for the Cisco PSIRT openVuln API  To access the API sign in with your Cisco CCO account at http://apiconsole.cisco.com and register an application to recieve a client_id and a client_secret  You can then get your token using curl or any other method you prefer.  'curl -s -k -H \"Content-Type: application/x-www-form-urlencoded\" -X POST -d \"client_id=<your_client_id>\" -d \"client_secret=<your_client_secret>\" -d \"grant_type=client_credentials\" https://cloudsso.cisco.com/as/token.oauth2'  You will receive an access token as demonstrated in the following example:  '{\"access_token\":\"I7omWtBDAieSiUX3shOxNJfuy4J6\",\"token_type\":\"Bearer\",\"expires_in\":3599}'  In Swagger, click on Change Authentication  enter the text \"I7omWtBDAieSiUX3shOxNJfuy4J6\" (which is the token you received)  then click on \"Try this operation\" 
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: os@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Used to obtain an advisory in CVRF format for a given advisory ID &#x60;advisory_id&#x60; (i.e., cisco-sa-20150819-pcp) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfAdvisoryAdvisoryIdGetTest() throws ApiException {
        String advisoryId = null;
        api.securityAdvisoriesCvrfAdvisoryAdvisoryIdGet(advisoryId);
        // TODO: test validations
    }

    /**
     * Used to obtain all advisories in Common Vulnerability Reporting Format (CVRF). For more information about CVRF go to https://communities.cisco.com/docs/DOC-63156 . By default the output is in JSON. To obtain the output in XML use the .xml extension. For example, /advisories/cvrf/all.xml 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfAllGetTest() throws ApiException {
        api.securityAdvisoriesCvrfAllGet();
        // TODO: test validations
    }

    /**
     * Used to obtain an advisory in CVRF format for a given Common Vulnerability Enumerator (CVE). The &#x60;cve_id&#x60; format is CVE-YYYY-NNNN. For more information about CVE visit http://cve.mitre.org/ 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfCveCveIdGetTest() throws ApiException {
        String cveId = null;
        api.securityAdvisoriesCvrfCveCveIdGet(cveId);
        // TODO: test validations
    }

    /**
     * Used to obtain all the latest security advisories in CVRF format given an absolute number. For instance, the latest 10 or latest 5. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfLatestNumberGetTest() throws ApiException {
        Integer number = null;
        api.securityAdvisoriesCvrfLatestNumberGet(number);
        // TODO: test validations
    }

    /**
     * Used to obtain all the advisories that affects the given product name. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfProductGetTest() throws ApiException {
        String product = null;
        api.securityAdvisoriesCvrfProductGet(product);
        // TODO: test validations
    }

    /**
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format and additionally filter based of firstpublished start date and enddate 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetTest() throws ApiException {
        String severity = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        api.securityAdvisoriesCvrfSeveritySeverityFirstpublishedGet(severity, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfSeveritySeverityGetTest() throws ApiException {
        String severity = null;
        api.securityAdvisoriesCvrfSeveritySeverityGet(severity);
        // TODO: test validations
    }

    /**
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in CVRF format. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfSeveritySeverityLastpublishedGetTest() throws ApiException {
        String severity = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        api.securityAdvisoriesCvrfSeveritySeverityLastpublishedGet(severity, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Used to obtain all security advisories that have were orginally published in a specific year &#x60;YYYY&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesCvrfYearYearGetTest() throws ApiException {
        String year = null;
        api.securityAdvisoriesCvrfYearYearGet(year);
        // TODO: test validations
    }

    /**
     * Used to obtain all advisories that affects the given ios version 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesIosGetTest() throws ApiException {
        String version = null;
        api.securityAdvisoriesIosGet(version);
        // TODO: test validations
    }

    /**
     * Used to obtain all advisories that affects the given ios version 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesIosxeGetTest() throws ApiException {
        String version = null;
        api.securityAdvisoriesIosxeGet(version);
        // TODO: test validations
    }

    /**
     * Used to obtain OVAL definitions for a given advisory ID &#x60;advisory_id&#x60; (i.e., cisco-sa-20150819-pcp) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesOvalAdvisoryAdvisoryIdGetTest() throws ApiException {
        String advisoryId = null;
        api.securityAdvisoriesOvalAdvisoryAdvisoryIdGet(advisoryId);
        // TODO: test validations
    }

    /**
     * Used to obtain all Open Vulnerability and Assessment Language (OVAL) definitions available for Cisco security vulnerabilities. For more information about OVAL go to https://communities.cisco.com/docs/DOC-63158 . By default the output is in JSON. To obtain the output in XML use the .xml extension. For example, /advisories/oval/all.xml 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesOvalAllGetTest() throws ApiException {
        api.securityAdvisoriesOvalAllGet();
        // TODO: test validations
    }

    /**
     * Used to obtain OVAL definitions for a given CVE Identifier. The &#x60;cve_id&#x60; format is CVE-YYYY-NNNN. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesOvalCveCveIdGetTest() throws ApiException {
        String cveId = null;
        api.securityAdvisoriesOvalCveCveIdGet(cveId);
        // TODO: test validations
    }

    /**
     * Used to obtain all the latest OVAL definitions given an absolute number. For instance, the latest 10 or latest 5. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesOvalLatestNumberGetTest() throws ApiException {
        Integer number = null;
        api.securityAdvisoriesOvalLatestNumberGet(number);
        // TODO: test validations
    }

    /**
     * Used to obtain all the oval advisories that affects the given product name. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesOvalProductGetTest() throws ApiException {
        String product = null;
        api.securityAdvisoriesOvalProductGet(product);
        // TODO: test validations
    }

    /**
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in OVAL format. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesOvalSeveritySeverityFirstpublishedGetTest() throws ApiException {
        String severity = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        api.securityAdvisoriesOvalSeveritySeverityFirstpublishedGet(severity, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Used to obtain all OVAL definitions for a given security impact rating (critical, high, medium, or low). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesOvalSeveritySeverityGetTest() throws ApiException {
        String severity = null;
        api.securityAdvisoriesOvalSeveritySeverityGet(severity);
        // TODO: test validations
    }

    /**
     * Used to obtain all security advisories for a given security impact rating (critical, high, medium, or low) in OVAL format. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityAdvisoriesOvalSeveritySeverityLastpublishedGetTest() throws ApiException {
        String severity = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        api.securityAdvisoriesOvalSeveritySeverityLastpublishedGet(severity, startDate, endDate);
        // TODO: test validations
    }

}
