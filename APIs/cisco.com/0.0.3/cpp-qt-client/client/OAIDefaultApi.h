/**
 * Cisco PSIRT openVuln API
 * The Cisco Product Security Incident Response Team (PSIRT) openVuln API is a RESTful API that allows customers to obtain Cisco Security Vulnerability information in different machine-consumable formats. APIs are important for customers because they allow their technical staff and programmers to build tools that help them do their job more effectively (in this case, to keep up with security vulnerability information). For more information about the Cisco PSIRT openVuln API visit https://developer.cisco.com/site/PSIRT/discover/overview  For detail steps on how to use the API go to:https://developer.cisco.com/site/PSIRT/get-started/getting-started.gsp  This is a beta release of a swagger YAML for the Cisco PSIRT openVuln API  To access the API sign in with your Cisco CCO account at http://apiconsole.cisco.com and register an application to recieve a client_id and a client_secret  You can then get your token using curl or any other method you prefer.  'curl -s -k -H \"Content-Type: application/x-www-form-urlencoded\" -X POST -d \"client_id=<your_client_id>\" -d \"client_secret=<your_client_secret>\" -d \"grant_type=client_credentials\" https://cloudsso.cisco.com/as/token.oauth2'  You will receive an access token as demonstrated in the following example:  '{\"access_token\":\"I7omWtBDAieSiUX3shOxNJfuy4J6\",\"token_type\":\"Bearer\",\"expires_in\":3599}'  In Swagger, click on Change Authentication  enter the text \"I7omWtBDAieSiUX3shOxNJfuy4J6\" (which is the token you received)  then click on \"Try this operation\" 
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: os@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  advisory_id QString [required]
    */
    virtual void securityAdvisoriesCvrfAdvisoryAdvisoryIdGet(const QString &advisory_id);


    virtual void securityAdvisoriesCvrfAllGet();

    /**
    * @param[in]  cve_id QString [required]
    */
    virtual void securityAdvisoriesCvrfCveCveIdGet(const QString &cve_id);

    /**
    * @param[in]  number qint32 [required]
    */
    virtual void securityAdvisoriesCvrfLatestNumberGet(const qint32 &number);

    /**
    * @param[in]  product QString [required]
    */
    virtual void securityAdvisoriesCvrfProductGet(const QString &product);

    /**
    * @param[in]  severity QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    */
    virtual void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGet(const QString &severity, const QDate &start_date, const QDate &end_date);

    /**
    * @param[in]  severity QString [required]
    */
    virtual void securityAdvisoriesCvrfSeveritySeverityGet(const QString &severity);

    /**
    * @param[in]  severity QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    */
    virtual void securityAdvisoriesCvrfSeveritySeverityLastpublishedGet(const QString &severity, const QDate &start_date, const QDate &end_date);

    /**
    * @param[in]  year QString [required]
    */
    virtual void securityAdvisoriesCvrfYearYearGet(const QString &year);

    /**
    * @param[in]  version QString [required]
    */
    virtual void securityAdvisoriesIosGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    */
    virtual void securityAdvisoriesIosxeGet(const QString &version);

    /**
    * @param[in]  advisory_id QString [required]
    */
    virtual void securityAdvisoriesOvalAdvisoryAdvisoryIdGet(const QString &advisory_id);


    virtual void securityAdvisoriesOvalAllGet();

    /**
    * @param[in]  cve_id QString [required]
    */
    virtual void securityAdvisoriesOvalCveCveIdGet(const QString &cve_id);

    /**
    * @param[in]  number qint32 [required]
    */
    virtual void securityAdvisoriesOvalLatestNumberGet(const qint32 &number);

    /**
    * @param[in]  product QString [required]
    */
    virtual void securityAdvisoriesOvalProductGet(const QString &product);

    /**
    * @param[in]  severity QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    */
    virtual void securityAdvisoriesOvalSeveritySeverityFirstpublishedGet(const QString &severity, const QDate &start_date, const QDate &end_date);

    /**
    * @param[in]  severity QString [required]
    */
    virtual void securityAdvisoriesOvalSeveritySeverityGet(const QString &severity);

    /**
    * @param[in]  severity QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    */
    virtual void securityAdvisoriesOvalSeveritySeverityLastpublishedGet(const QString &severity, const QDate &start_date, const QDate &end_date);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void securityAdvisoriesCvrfAdvisoryAdvisoryIdGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfAllGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfCveCveIdGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfLatestNumberGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfProductGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfSeveritySeverityGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfSeveritySeverityLastpublishedGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfYearYearGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesIosGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesIosxeGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalAdvisoryAdvisoryIdGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalAllGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalCveCveIdGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalLatestNumberGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalProductGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalSeveritySeverityFirstpublishedGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalSeveritySeverityGetCallback(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalSeveritySeverityLastpublishedGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void securityAdvisoriesCvrfAdvisoryAdvisoryIdGetSignal();
    void securityAdvisoriesCvrfAllGetSignal();
    void securityAdvisoriesCvrfCveCveIdGetSignal();
    void securityAdvisoriesCvrfLatestNumberGetSignal();
    void securityAdvisoriesCvrfProductGetSignal();
    void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetSignal();
    void securityAdvisoriesCvrfSeveritySeverityGetSignal();
    void securityAdvisoriesCvrfSeveritySeverityLastpublishedGetSignal();
    void securityAdvisoriesCvrfYearYearGetSignal();
    void securityAdvisoriesIosGetSignal();
    void securityAdvisoriesIosxeGetSignal();
    void securityAdvisoriesOvalAdvisoryAdvisoryIdGetSignal();
    void securityAdvisoriesOvalAllGetSignal();
    void securityAdvisoriesOvalCveCveIdGetSignal();
    void securityAdvisoriesOvalLatestNumberGetSignal();
    void securityAdvisoriesOvalProductGetSignal();
    void securityAdvisoriesOvalSeveritySeverityFirstpublishedGetSignal();
    void securityAdvisoriesOvalSeveritySeverityGetSignal();
    void securityAdvisoriesOvalSeveritySeverityLastpublishedGetSignal();


    void securityAdvisoriesCvrfAdvisoryAdvisoryIdGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfAllGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfCveCveIdGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfLatestNumberGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfProductGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfSeveritySeverityGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfSeveritySeverityLastpublishedGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesCvrfYearYearGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesIosGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesIosxeGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalAdvisoryAdvisoryIdGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalAllGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalCveCveIdGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalLatestNumberGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalProductGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalSeveritySeverityFirstpublishedGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalSeveritySeverityGetSignalFull(OAIHttpRequestWorker *worker);
    void securityAdvisoriesOvalSeveritySeverityLastpublishedGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfAdvisoryAdvisoryIdGetSignalError() instead")
    void securityAdvisoriesCvrfAdvisoryAdvisoryIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfAdvisoryAdvisoryIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfAllGetSignalError() instead")
    void securityAdvisoriesCvrfAllGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfAllGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfCveCveIdGetSignalError() instead")
    void securityAdvisoriesCvrfCveCveIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfCveCveIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfLatestNumberGetSignalError() instead")
    void securityAdvisoriesCvrfLatestNumberGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfLatestNumberGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfProductGetSignalError() instead")
    void securityAdvisoriesCvrfProductGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfProductGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetSignalError() instead")
    void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfSeveritySeverityGetSignalError() instead")
    void securityAdvisoriesCvrfSeveritySeverityGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfSeveritySeverityGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfSeveritySeverityLastpublishedGetSignalError() instead")
    void securityAdvisoriesCvrfSeveritySeverityLastpublishedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfSeveritySeverityLastpublishedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfYearYearGetSignalError() instead")
    void securityAdvisoriesCvrfYearYearGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfYearYearGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesIosGetSignalError() instead")
    void securityAdvisoriesIosGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesIosGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesIosxeGetSignalError() instead")
    void securityAdvisoriesIosxeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesIosxeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalAdvisoryAdvisoryIdGetSignalError() instead")
    void securityAdvisoriesOvalAdvisoryAdvisoryIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalAdvisoryAdvisoryIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalAllGetSignalError() instead")
    void securityAdvisoriesOvalAllGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalAllGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalCveCveIdGetSignalError() instead")
    void securityAdvisoriesOvalCveCveIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalCveCveIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalLatestNumberGetSignalError() instead")
    void securityAdvisoriesOvalLatestNumberGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalLatestNumberGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalProductGetSignalError() instead")
    void securityAdvisoriesOvalProductGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalProductGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalSeveritySeverityFirstpublishedGetSignalError() instead")
    void securityAdvisoriesOvalSeveritySeverityFirstpublishedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalSeveritySeverityFirstpublishedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalSeveritySeverityGetSignalError() instead")
    void securityAdvisoriesOvalSeveritySeverityGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalSeveritySeverityGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalSeveritySeverityLastpublishedGetSignalError() instead")
    void securityAdvisoriesOvalSeveritySeverityLastpublishedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalSeveritySeverityLastpublishedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfAdvisoryAdvisoryIdGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfAdvisoryAdvisoryIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfAdvisoryAdvisoryIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfAllGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfCveCveIdGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfCveCveIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfCveCveIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfLatestNumberGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfLatestNumberGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfLatestNumberGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfProductGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfProductGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfProductGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfSeveritySeverityFirstpublishedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfSeveritySeverityGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfSeveritySeverityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfSeveritySeverityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfSeveritySeverityLastpublishedGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfSeveritySeverityLastpublishedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfSeveritySeverityLastpublishedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesCvrfYearYearGetSignalErrorFull() instead")
    void securityAdvisoriesCvrfYearYearGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesCvrfYearYearGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesIosGetSignalErrorFull() instead")
    void securityAdvisoriesIosGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesIosGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesIosxeGetSignalErrorFull() instead")
    void securityAdvisoriesIosxeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesIosxeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalAdvisoryAdvisoryIdGetSignalErrorFull() instead")
    void securityAdvisoriesOvalAdvisoryAdvisoryIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalAdvisoryAdvisoryIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalAllGetSignalErrorFull() instead")
    void securityAdvisoriesOvalAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalCveCveIdGetSignalErrorFull() instead")
    void securityAdvisoriesOvalCveCveIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalCveCveIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalLatestNumberGetSignalErrorFull() instead")
    void securityAdvisoriesOvalLatestNumberGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalLatestNumberGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalProductGetSignalErrorFull() instead")
    void securityAdvisoriesOvalProductGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalProductGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalSeveritySeverityFirstpublishedGetSignalErrorFull() instead")
    void securityAdvisoriesOvalSeveritySeverityFirstpublishedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalSeveritySeverityFirstpublishedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalSeveritySeverityGetSignalErrorFull() instead")
    void securityAdvisoriesOvalSeveritySeverityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalSeveritySeverityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityAdvisoriesOvalSeveritySeverityLastpublishedGetSignalErrorFull() instead")
    void securityAdvisoriesOvalSeveritySeverityLastpublishedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityAdvisoriesOvalSeveritySeverityLastpublishedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
