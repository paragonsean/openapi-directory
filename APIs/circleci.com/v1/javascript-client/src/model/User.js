/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version v1
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'Boolean');
            }
            if (data.hasOwnProperty('all_emails')) {
                obj['all_emails'] = ApiClient.convertToType(data['all_emails'], ['String']);
            }
            if (data.hasOwnProperty('analytics_id')) {
                obj['analytics_id'] = ApiClient.convertToType(data['analytics_id'], 'String');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('basic_email_prefs')) {
                obj['basic_email_prefs'] = ApiClient.convertToType(data['basic_email_prefs'], 'String');
            }
            if (data.hasOwnProperty('bitbucket')) {
                obj['bitbucket'] = ApiClient.convertToType(data['bitbucket'], 'Number');
            }
            if (data.hasOwnProperty('bitbucket_authorized')) {
                obj['bitbucket_authorized'] = ApiClient.convertToType(data['bitbucket_authorized'], 'Boolean');
            }
            if (data.hasOwnProperty('containers')) {
                obj['containers'] = ApiClient.convertToType(data['containers'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('days_left_in_trial')) {
                obj['days_left_in_trial'] = ApiClient.convertToType(data['days_left_in_trial'], 'Number');
            }
            if (data.hasOwnProperty('dev_admin')) {
                obj['dev_admin'] = ApiClient.convertToType(data['dev_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('enrolled_betas')) {
                obj['enrolled_betas'] = ApiClient.convertToType(data['enrolled_betas'], ['String']);
            }
            if (data.hasOwnProperty('github_id')) {
                obj['github_id'] = ApiClient.convertToType(data['github_id'], 'Number');
            }
            if (data.hasOwnProperty('github_oauth_scopes')) {
                obj['github_oauth_scopes'] = ApiClient.convertToType(data['github_oauth_scopes'], ['String']);
            }
            if (data.hasOwnProperty('gravatar_id')) {
                obj['gravatar_id'] = ApiClient.convertToType(data['gravatar_id'], 'Number');
            }
            if (data.hasOwnProperty('heroku_api_key')) {
                obj['heroku_api_key'] = ApiClient.convertToType(data['heroku_api_key'], 'String');
            }
            if (data.hasOwnProperty('in_beta_program')) {
                obj['in_beta_program'] = ApiClient.convertToType(data['in_beta_program'], 'Boolean');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization_prefs')) {
                obj['organization_prefs'] = ApiClient.convertToType(data['organization_prefs'], Object);
            }
            if (data.hasOwnProperty('parallelism')) {
                obj['parallelism'] = ApiClient.convertToType(data['parallelism'], 'Number');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], 'String');
            }
            if (data.hasOwnProperty('projects')) {
                obj['projects'] = ApiClient.convertToType(data['projects'], Object);
            }
            if (data.hasOwnProperty('pusher_id')) {
                obj['pusher_id'] = ApiClient.convertToType(data['pusher_id'], 'String');
            }
            if (data.hasOwnProperty('selected_email')) {
                obj['selected_email'] = ApiClient.convertToType(data['selected_email'], 'String');
            }
            if (data.hasOwnProperty('sign_in_count')) {
                obj['sign_in_count'] = ApiClient.convertToType(data['sign_in_count'], 'Number');
            }
            if (data.hasOwnProperty('trial_end')) {
                obj['trial_end'] = ApiClient.convertToType(data['trial_end'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['all_emails'])) {
            throw new Error("Expected the field `all_emails` to be an array in the JSON data but got " + data['all_emails']);
        }
        // ensure the json data is a string
        if (data['analytics_id'] && !(typeof data['analytics_id'] === 'string' || data['analytics_id'] instanceof String)) {
            throw new Error("Expected the field `analytics_id` to be a primitive type in the JSON string but got " + data['analytics_id']);
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['basic_email_prefs'] && !(typeof data['basic_email_prefs'] === 'string' || data['basic_email_prefs'] instanceof String)) {
            throw new Error("Expected the field `basic_email_prefs` to be a primitive type in the JSON string but got " + data['basic_email_prefs']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enrolled_betas'])) {
            throw new Error("Expected the field `enrolled_betas` to be an array in the JSON data but got " + data['enrolled_betas']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['github_oauth_scopes'])) {
            throw new Error("Expected the field `github_oauth_scopes` to be an array in the JSON data but got " + data['github_oauth_scopes']);
        }
        // ensure the json data is a string
        if (data['heroku_api_key'] && !(typeof data['heroku_api_key'] === 'string' || data['heroku_api_key'] instanceof String)) {
            throw new Error("Expected the field `heroku_api_key` to be a primitive type in the JSON string but got " + data['heroku_api_key']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['plan'] && !(typeof data['plan'] === 'string' || data['plan'] instanceof String)) {
            throw new Error("Expected the field `plan` to be a primitive type in the JSON string but got " + data['plan']);
        }
        // ensure the json data is a string
        if (data['pusher_id'] && !(typeof data['pusher_id'] === 'string' || data['pusher_id'] instanceof String)) {
            throw new Error("Expected the field `pusher_id` to be a primitive type in the JSON string but got " + data['pusher_id']);
        }
        // ensure the json data is a string
        if (data['selected_email'] && !(typeof data['selected_email'] === 'string' || data['selected_email'] instanceof String)) {
            throw new Error("Expected the field `selected_email` to be a primitive type in the JSON string but got " + data['selected_email']);
        }

        return true;
    }


}



/**
 * @member {Boolean} admin
 */
User.prototype['admin'] = undefined;

/**
 * @member {Array.<String>} all_emails
 */
User.prototype['all_emails'] = undefined;

/**
 * @member {String} analytics_id
 */
User.prototype['analytics_id'] = undefined;

/**
 * @member {String} avatar_url
 */
User.prototype['avatar_url'] = undefined;

/**
 * @member {String} basic_email_prefs
 */
User.prototype['basic_email_prefs'] = undefined;

/**
 * @member {Number} bitbucket
 */
User.prototype['bitbucket'] = undefined;

/**
 * @member {Boolean} bitbucket_authorized
 */
User.prototype['bitbucket_authorized'] = undefined;

/**
 * @member {Number} containers
 */
User.prototype['containers'] = undefined;

/**
 * @member {Date} created_at
 */
User.prototype['created_at'] = undefined;

/**
 * @member {Number} days_left_in_trial
 */
User.prototype['days_left_in_trial'] = undefined;

/**
 * @member {Boolean} dev_admin
 */
User.prototype['dev_admin'] = undefined;

/**
 * @member {Array.<String>} enrolled_betas
 */
User.prototype['enrolled_betas'] = undefined;

/**
 * @member {Number} github_id
 */
User.prototype['github_id'] = undefined;

/**
 * @member {Array.<String>} github_oauth_scopes
 */
User.prototype['github_oauth_scopes'] = undefined;

/**
 * @member {Number} gravatar_id
 */
User.prototype['gravatar_id'] = undefined;

/**
 * @member {String} heroku_api_key
 */
User.prototype['heroku_api_key'] = undefined;

/**
 * @member {Boolean} in_beta_program
 */
User.prototype['in_beta_program'] = undefined;

/**
 * @member {String} login
 */
User.prototype['login'] = undefined;

/**
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * @member {Object} organization_prefs
 */
User.prototype['organization_prefs'] = undefined;

/**
 * @member {Number} parallelism
 */
User.prototype['parallelism'] = undefined;

/**
 * @member {String} plan
 */
User.prototype['plan'] = undefined;

/**
 * @member {Object} projects
 */
User.prototype['projects'] = undefined;

/**
 * @member {String} pusher_id
 */
User.prototype['pusher_id'] = undefined;

/**
 * @member {String} selected_email
 */
User.prototype['selected_email'] = undefined;

/**
 * @member {Number} sign_in_count
 */
User.prototype['sign_in_count'] = undefined;

/**
 * @member {Date} trial_end
 */
User.prototype['trial_end'] = undefined;






export default User;

