/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Key model module.
 * @module model/Key
 * @version v1
 */
class Key {
    /**
     * Constructs a new <code>Key</code>.
     * @alias module:model/Key
     */
    constructor() { 
        
        Key.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Key</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Key} obj Optional instance to populate.
     * @return {module:model/Key} The populated <code>Key</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Key();

            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('preferred')) {
                obj['preferred'] = ApiClient.convertToType(data['preferred'], 'Boolean');
            }
            if (data.hasOwnProperty('public_key')) {
                obj['public_key'] = ApiClient.convertToType(data['public_key'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Key</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Key</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['public_key'] && !(typeof data['public_key'] === 'string' || data['public_key'] instanceof String)) {
            throw new Error("Expected the field `public_key` to be a primitive type in the JSON string but got " + data['public_key']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} fingerprint
 */
Key.prototype['fingerprint'] = undefined;

/**
 * @member {Boolean} preferred
 */
Key.prototype['preferred'] = undefined;

/**
 * @member {String} public_key
 */
Key.prototype['public_key'] = undefined;

/**
 * when the key was issued
 * @member {Date} time
 */
Key.prototype['time'] = undefined;

/**
 * can be \"deploy-key\" or \"github-user-key\" 
 * @member {module:model/Key.TypeEnum} type
 */
Key.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Key['TypeEnum'] = {

    /**
     * value: "deploy-key"
     * @const
     */
    "deploy-key": "deploy-key",

    /**
     * value: "github-user-key"
     * @const
     */
    "github-user-key": "github-user-key"
};



export default Key;

