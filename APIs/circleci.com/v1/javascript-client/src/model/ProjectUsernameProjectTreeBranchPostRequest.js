/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectUsernameProjectTreeBranchPostRequest model module.
 * @module model/ProjectUsernameProjectTreeBranchPostRequest
 * @version v1
 */
class ProjectUsernameProjectTreeBranchPostRequest {
    /**
     * Constructs a new <code>ProjectUsernameProjectTreeBranchPostRequest</code>.
     * @alias module:model/ProjectUsernameProjectTreeBranchPostRequest
     */
    constructor() { 
        
        ProjectUsernameProjectTreeBranchPostRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectUsernameProjectTreeBranchPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectUsernameProjectTreeBranchPostRequest} obj Optional instance to populate.
     * @return {module:model/ProjectUsernameProjectTreeBranchPostRequest} The populated <code>ProjectUsernameProjectTreeBranchPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectUsernameProjectTreeBranchPostRequest();

            if (data.hasOwnProperty('build_parameters')) {
                obj['build_parameters'] = ApiClient.convertToType(data['build_parameters'], Object);
            }
            if (data.hasOwnProperty('parallel')) {
                obj['parallel'] = ApiClient.convertToType(data['parallel'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectUsernameProjectTreeBranchPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectUsernameProjectTreeBranchPostRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['parallel'] && !(typeof data['parallel'] === 'string' || data['parallel'] instanceof String)) {
            throw new Error("Expected the field `parallel` to be a primitive type in the JSON string but got " + data['parallel']);
        }
        // ensure the json data is a string
        if (data['revision'] && !(typeof data['revision'] === 'string' || data['revision'] instanceof String)) {
            throw new Error("Expected the field `revision` to be a primitive type in the JSON string but got " + data['revision']);
        }

        return true;
    }


}



/**
 * Additional environment variables to inject into the build environment. A map of names to values. 
 * @member {Object} build_parameters
 */
ProjectUsernameProjectTreeBranchPostRequest.prototype['build_parameters'] = undefined;

/**
 * The number of containers to use to run the build. Default is null and the project default is used. 
 * @member {String} parallel
 */
ProjectUsernameProjectTreeBranchPostRequest.prototype['parallel'] = undefined;

/**
 * The specific revision to build. Default is null and the head of the branch is used. Cannot be used with tag parameter. 
 * @member {String} revision
 */
ProjectUsernameProjectTreeBranchPostRequest.prototype['revision'] = undefined;






export default ProjectUsernameProjectTreeBranchPostRequest;

