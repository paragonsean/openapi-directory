/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitDetail from './CommitDetail';
import PreviousBuild from './PreviousBuild';
import User from './User';

/**
 * The BuildDetail model module.
 * @module model/BuildDetail
 * @version v1
 */
class BuildDetail {
    /**
     * Constructs a new <code>BuildDetail</code>.
     * previous build
     * @alias module:model/BuildDetail
     */
    constructor() { 
        
        BuildDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildDetail} obj Optional instance to populate.
     * @return {module:model/BuildDetail} The populated <code>BuildDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildDetail();

            if (data.hasOwnProperty('all_commit_details')) {
                obj['all_commit_details'] = ApiClient.convertToType(data['all_commit_details'], [CommitDetail]);
            }
            if (data.hasOwnProperty('compare')) {
                obj['compare'] = ApiClient.convertToType(data['compare'], 'String');
            }
            if (data.hasOwnProperty('job_name')) {
                obj['job_name'] = ApiClient.convertToType(data['job_name'], 'String');
            }
            if (data.hasOwnProperty('node')) {
                obj['node'] = ApiClient.convertToType(data['node'], Object);
            }
            if (data.hasOwnProperty('previous_successful_build')) {
                obj['previous_successful_build'] = PreviousBuild.constructFromObject(data['previous_successful_build']);
            }
            if (data.hasOwnProperty('retries')) {
                obj['retries'] = ApiClient.convertToType(data['retries'], 'Boolean');
            }
            if (data.hasOwnProperty('ssh_enabled')) {
                obj['ssh_enabled'] = ApiClient.convertToType(data['ssh_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('timedout')) {
                obj['timedout'] = ApiClient.convertToType(data['timedout'], 'Boolean');
            }
            if (data.hasOwnProperty('usage_queued_at')) {
                obj['usage_queued_at'] = ApiClient.convertToType(data['usage_queued_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildDetail</code>.
     */
    static validateJSON(data) {
        if (data['all_commit_details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['all_commit_details'])) {
                throw new Error("Expected the field `all_commit_details` to be an array in the JSON data but got " + data['all_commit_details']);
            }
            // validate the optional field `all_commit_details` (array)
            for (const item of data['all_commit_details']) {
                CommitDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['compare'] && !(typeof data['compare'] === 'string' || data['compare'] instanceof String)) {
            throw new Error("Expected the field `compare` to be a primitive type in the JSON string but got " + data['compare']);
        }
        // ensure the json data is a string
        if (data['job_name'] && !(typeof data['job_name'] === 'string' || data['job_name'] instanceof String)) {
            throw new Error("Expected the field `job_name` to be a primitive type in the JSON string but got " + data['job_name']);
        }
        // validate the optional field `previous_successful_build`
        if (data['previous_successful_build']) { // data not null
          PreviousBuild.validateJSON(data['previous_successful_build']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CommitDetail>} all_commit_details
 */
BuildDetail.prototype['all_commit_details'] = undefined;

/**
 * @member {String} compare
 */
BuildDetail.prototype['compare'] = undefined;

/**
 * @member {String} job_name
 */
BuildDetail.prototype['job_name'] = undefined;

/**
 * @member {Object} node
 */
BuildDetail.prototype['node'] = undefined;

/**
 * @member {module:model/PreviousBuild} previous_successful_build
 */
BuildDetail.prototype['previous_successful_build'] = undefined;

/**
 * @member {Boolean} retries
 */
BuildDetail.prototype['retries'] = undefined;

/**
 * @member {Boolean} ssh_enabled
 */
BuildDetail.prototype['ssh_enabled'] = undefined;

/**
 * @member {Boolean} timedout
 */
BuildDetail.prototype['timedout'] = undefined;

/**
 * @member {Date} usage_queued_at
 */
BuildDetail.prototype['usage_queued_at'] = undefined;

/**
 * @member {module:model/User} user
 */
BuildDetail.prototype['user'] = undefined;






export default BuildDetail;

