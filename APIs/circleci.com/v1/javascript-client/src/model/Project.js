/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Aws from './Aws';
import ProjectFeatureFlags from './ProjectFeatureFlags';
import Scope from './Scope';

/**
 * The Project model module.
 * @module model/Project
 * @version v1
 */
class Project {
    /**
     * Constructs a new <code>Project</code>.
     * @alias module:model/Project
     */
    constructor() { 
        
        Project.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Project} obj Optional instance to populate.
     * @return {module:model/Project} The populated <code>Project</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Project();

            if (data.hasOwnProperty('aws')) {
                obj['aws'] = Aws.constructFromObject(data['aws']);
            }
            if (data.hasOwnProperty('branches')) {
                obj['branches'] = ApiClient.convertToType(data['branches'], Object);
            }
            if (data.hasOwnProperty('campfire_notify_prefs')) {
                obj['campfire_notify_prefs'] = ApiClient.convertToType(data['campfire_notify_prefs'], 'String');
            }
            if (data.hasOwnProperty('campfire_room')) {
                obj['campfire_room'] = ApiClient.convertToType(data['campfire_room'], 'String');
            }
            if (data.hasOwnProperty('campfire_subdomain')) {
                obj['campfire_subdomain'] = ApiClient.convertToType(data['campfire_subdomain'], 'String');
            }
            if (data.hasOwnProperty('campfire_token')) {
                obj['campfire_token'] = ApiClient.convertToType(data['campfire_token'], 'String');
            }
            if (data.hasOwnProperty('compile')) {
                obj['compile'] = ApiClient.convertToType(data['compile'], 'String');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('dependencies')) {
                obj['dependencies'] = ApiClient.convertToType(data['dependencies'], 'String');
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = ApiClient.convertToType(data['extra'], 'String');
            }
            if (data.hasOwnProperty('feature_flags')) {
                obj['feature_flags'] = ProjectFeatureFlags.constructFromObject(data['feature_flags']);
            }
            if (data.hasOwnProperty('flowdock_api_token')) {
                obj['flowdock_api_token'] = ApiClient.convertToType(data['flowdock_api_token'], 'String');
            }
            if (data.hasOwnProperty('followed')) {
                obj['followed'] = ApiClient.convertToType(data['followed'], 'Boolean');
            }
            if (data.hasOwnProperty('has_usable_key')) {
                obj['has_usable_key'] = ApiClient.convertToType(data['has_usable_key'], 'Boolean');
            }
            if (data.hasOwnProperty('heroku_deploy_user')) {
                obj['heroku_deploy_user'] = ApiClient.convertToType(data['heroku_deploy_user'], 'String');
            }
            if (data.hasOwnProperty('hipchat_api_token')) {
                obj['hipchat_api_token'] = ApiClient.convertToType(data['hipchat_api_token'], 'String');
            }
            if (data.hasOwnProperty('hipchat_notify')) {
                obj['hipchat_notify'] = ApiClient.convertToType(data['hipchat_notify'], 'String');
            }
            if (data.hasOwnProperty('hipchat_notify_prefs')) {
                obj['hipchat_notify_prefs'] = ApiClient.convertToType(data['hipchat_notify_prefs'], 'String');
            }
            if (data.hasOwnProperty('hipchat_room')) {
                obj['hipchat_room'] = ApiClient.convertToType(data['hipchat_room'], 'String');
            }
            if (data.hasOwnProperty('irc_channel')) {
                obj['irc_channel'] = ApiClient.convertToType(data['irc_channel'], 'String');
            }
            if (data.hasOwnProperty('irc_keyword')) {
                obj['irc_keyword'] = ApiClient.convertToType(data['irc_keyword'], 'String');
            }
            if (data.hasOwnProperty('irc_notify_prefs')) {
                obj['irc_notify_prefs'] = ApiClient.convertToType(data['irc_notify_prefs'], 'String');
            }
            if (data.hasOwnProperty('irc_password')) {
                obj['irc_password'] = ApiClient.convertToType(data['irc_password'], 'String');
            }
            if (data.hasOwnProperty('irc_server')) {
                obj['irc_server'] = ApiClient.convertToType(data['irc_server'], 'String');
            }
            if (data.hasOwnProperty('irc_username')) {
                obj['irc_username'] = ApiClient.convertToType(data['irc_username'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('oss')) {
                obj['oss'] = ApiClient.convertToType(data['oss'], 'Boolean');
            }
            if (data.hasOwnProperty('parallel')) {
                obj['parallel'] = ApiClient.convertToType(data['parallel'], 'Number');
            }
            if (data.hasOwnProperty('reponame')) {
                obj['reponame'] = ApiClient.convertToType(data['reponame'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], [Scope]);
            }
            if (data.hasOwnProperty('setup')) {
                obj['setup'] = ApiClient.convertToType(data['setup'], 'String');
            }
            if (data.hasOwnProperty('slack_api_token')) {
                obj['slack_api_token'] = ApiClient.convertToType(data['slack_api_token'], 'String');
            }
            if (data.hasOwnProperty('slack_channel')) {
                obj['slack_channel'] = ApiClient.convertToType(data['slack_channel'], 'String');
            }
            if (data.hasOwnProperty('slack_channel_override')) {
                obj['slack_channel_override'] = ApiClient.convertToType(data['slack_channel_override'], 'String');
            }
            if (data.hasOwnProperty('slack_notify_prefs')) {
                obj['slack_notify_prefs'] = ApiClient.convertToType(data['slack_notify_prefs'], 'String');
            }
            if (data.hasOwnProperty('slack_subdomain')) {
                obj['slack_subdomain'] = ApiClient.convertToType(data['slack_subdomain'], 'String');
            }
            if (data.hasOwnProperty('slack_webhook_url')) {
                obj['slack_webhook_url'] = ApiClient.convertToType(data['slack_webhook_url'], 'String');
            }
            if (data.hasOwnProperty('ssh_keys')) {
                obj['ssh_keys'] = ApiClient.convertToType(data['ssh_keys'], ['String']);
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('vcs_type')) {
                obj['vcs_type'] = ApiClient.convertToType(data['vcs_type'], 'String');
            }
            if (data.hasOwnProperty('vcs_url')) {
                obj['vcs_url'] = ApiClient.convertToType(data['vcs_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Project</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Project</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aws`
        if (data['aws']) { // data not null
          Aws.validateJSON(data['aws']);
        }
        // ensure the json data is a string
        if (data['campfire_notify_prefs'] && !(typeof data['campfire_notify_prefs'] === 'string' || data['campfire_notify_prefs'] instanceof String)) {
            throw new Error("Expected the field `campfire_notify_prefs` to be a primitive type in the JSON string but got " + data['campfire_notify_prefs']);
        }
        // ensure the json data is a string
        if (data['campfire_room'] && !(typeof data['campfire_room'] === 'string' || data['campfire_room'] instanceof String)) {
            throw new Error("Expected the field `campfire_room` to be a primitive type in the JSON string but got " + data['campfire_room']);
        }
        // ensure the json data is a string
        if (data['campfire_subdomain'] && !(typeof data['campfire_subdomain'] === 'string' || data['campfire_subdomain'] instanceof String)) {
            throw new Error("Expected the field `campfire_subdomain` to be a primitive type in the JSON string but got " + data['campfire_subdomain']);
        }
        // ensure the json data is a string
        if (data['campfire_token'] && !(typeof data['campfire_token'] === 'string' || data['campfire_token'] instanceof String)) {
            throw new Error("Expected the field `campfire_token` to be a primitive type in the JSON string but got " + data['campfire_token']);
        }
        // ensure the json data is a string
        if (data['compile'] && !(typeof data['compile'] === 'string' || data['compile'] instanceof String)) {
            throw new Error("Expected the field `compile` to be a primitive type in the JSON string but got " + data['compile']);
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['dependencies'] && !(typeof data['dependencies'] === 'string' || data['dependencies'] instanceof String)) {
            throw new Error("Expected the field `dependencies` to be a primitive type in the JSON string but got " + data['dependencies']);
        }
        // ensure the json data is a string
        if (data['extra'] && !(typeof data['extra'] === 'string' || data['extra'] instanceof String)) {
            throw new Error("Expected the field `extra` to be a primitive type in the JSON string but got " + data['extra']);
        }
        // validate the optional field `feature_flags`
        if (data['feature_flags']) { // data not null
          ProjectFeatureFlags.validateJSON(data['feature_flags']);
        }
        // ensure the json data is a string
        if (data['flowdock_api_token'] && !(typeof data['flowdock_api_token'] === 'string' || data['flowdock_api_token'] instanceof String)) {
            throw new Error("Expected the field `flowdock_api_token` to be a primitive type in the JSON string but got " + data['flowdock_api_token']);
        }
        // ensure the json data is a string
        if (data['heroku_deploy_user'] && !(typeof data['heroku_deploy_user'] === 'string' || data['heroku_deploy_user'] instanceof String)) {
            throw new Error("Expected the field `heroku_deploy_user` to be a primitive type in the JSON string but got " + data['heroku_deploy_user']);
        }
        // ensure the json data is a string
        if (data['hipchat_api_token'] && !(typeof data['hipchat_api_token'] === 'string' || data['hipchat_api_token'] instanceof String)) {
            throw new Error("Expected the field `hipchat_api_token` to be a primitive type in the JSON string but got " + data['hipchat_api_token']);
        }
        // ensure the json data is a string
        if (data['hipchat_notify'] && !(typeof data['hipchat_notify'] === 'string' || data['hipchat_notify'] instanceof String)) {
            throw new Error("Expected the field `hipchat_notify` to be a primitive type in the JSON string but got " + data['hipchat_notify']);
        }
        // ensure the json data is a string
        if (data['hipchat_notify_prefs'] && !(typeof data['hipchat_notify_prefs'] === 'string' || data['hipchat_notify_prefs'] instanceof String)) {
            throw new Error("Expected the field `hipchat_notify_prefs` to be a primitive type in the JSON string but got " + data['hipchat_notify_prefs']);
        }
        // ensure the json data is a string
        if (data['hipchat_room'] && !(typeof data['hipchat_room'] === 'string' || data['hipchat_room'] instanceof String)) {
            throw new Error("Expected the field `hipchat_room` to be a primitive type in the JSON string but got " + data['hipchat_room']);
        }
        // ensure the json data is a string
        if (data['irc_channel'] && !(typeof data['irc_channel'] === 'string' || data['irc_channel'] instanceof String)) {
            throw new Error("Expected the field `irc_channel` to be a primitive type in the JSON string but got " + data['irc_channel']);
        }
        // ensure the json data is a string
        if (data['irc_keyword'] && !(typeof data['irc_keyword'] === 'string' || data['irc_keyword'] instanceof String)) {
            throw new Error("Expected the field `irc_keyword` to be a primitive type in the JSON string but got " + data['irc_keyword']);
        }
        // ensure the json data is a string
        if (data['irc_notify_prefs'] && !(typeof data['irc_notify_prefs'] === 'string' || data['irc_notify_prefs'] instanceof String)) {
            throw new Error("Expected the field `irc_notify_prefs` to be a primitive type in the JSON string but got " + data['irc_notify_prefs']);
        }
        // ensure the json data is a string
        if (data['irc_password'] && !(typeof data['irc_password'] === 'string' || data['irc_password'] instanceof String)) {
            throw new Error("Expected the field `irc_password` to be a primitive type in the JSON string but got " + data['irc_password']);
        }
        // ensure the json data is a string
        if (data['irc_server'] && !(typeof data['irc_server'] === 'string' || data['irc_server'] instanceof String)) {
            throw new Error("Expected the field `irc_server` to be a primitive type in the JSON string but got " + data['irc_server']);
        }
        // ensure the json data is a string
        if (data['irc_username'] && !(typeof data['irc_username'] === 'string' || data['irc_username'] instanceof String)) {
            throw new Error("Expected the field `irc_username` to be a primitive type in the JSON string but got " + data['irc_username']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['reponame'] && !(typeof data['reponame'] === 'string' || data['reponame'] instanceof String)) {
            throw new Error("Expected the field `reponame` to be a primitive type in the JSON string but got " + data['reponame']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['setup'] && !(typeof data['setup'] === 'string' || data['setup'] instanceof String)) {
            throw new Error("Expected the field `setup` to be a primitive type in the JSON string but got " + data['setup']);
        }
        // ensure the json data is a string
        if (data['slack_api_token'] && !(typeof data['slack_api_token'] === 'string' || data['slack_api_token'] instanceof String)) {
            throw new Error("Expected the field `slack_api_token` to be a primitive type in the JSON string but got " + data['slack_api_token']);
        }
        // ensure the json data is a string
        if (data['slack_channel'] && !(typeof data['slack_channel'] === 'string' || data['slack_channel'] instanceof String)) {
            throw new Error("Expected the field `slack_channel` to be a primitive type in the JSON string but got " + data['slack_channel']);
        }
        // ensure the json data is a string
        if (data['slack_channel_override'] && !(typeof data['slack_channel_override'] === 'string' || data['slack_channel_override'] instanceof String)) {
            throw new Error("Expected the field `slack_channel_override` to be a primitive type in the JSON string but got " + data['slack_channel_override']);
        }
        // ensure the json data is a string
        if (data['slack_notify_prefs'] && !(typeof data['slack_notify_prefs'] === 'string' || data['slack_notify_prefs'] instanceof String)) {
            throw new Error("Expected the field `slack_notify_prefs` to be a primitive type in the JSON string but got " + data['slack_notify_prefs']);
        }
        // ensure the json data is a string
        if (data['slack_subdomain'] && !(typeof data['slack_subdomain'] === 'string' || data['slack_subdomain'] instanceof String)) {
            throw new Error("Expected the field `slack_subdomain` to be a primitive type in the JSON string but got " + data['slack_subdomain']);
        }
        // ensure the json data is a string
        if (data['slack_webhook_url'] && !(typeof data['slack_webhook_url'] === 'string' || data['slack_webhook_url'] instanceof String)) {
            throw new Error("Expected the field `slack_webhook_url` to be a primitive type in the JSON string but got " + data['slack_webhook_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ssh_keys'])) {
            throw new Error("Expected the field `ssh_keys` to be an array in the JSON data but got " + data['ssh_keys']);
        }
        // ensure the json data is a string
        if (data['test'] && !(typeof data['test'] === 'string' || data['test'] instanceof String)) {
            throw new Error("Expected the field `test` to be a primitive type in the JSON string but got " + data['test']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['vcs_type'] && !(typeof data['vcs_type'] === 'string' || data['vcs_type'] instanceof String)) {
            throw new Error("Expected the field `vcs_type` to be a primitive type in the JSON string but got " + data['vcs_type']);
        }
        // ensure the json data is a string
        if (data['vcs_url'] && !(typeof data['vcs_url'] === 'string' || data['vcs_url'] instanceof String)) {
            throw new Error("Expected the field `vcs_url` to be a primitive type in the JSON string but got " + data['vcs_url']);
        }

        return true;
    }


}



/**
 * @member {module:model/Aws} aws
 */
Project.prototype['aws'] = undefined;

/**
 * @member {Object} branches
 */
Project.prototype['branches'] = undefined;

/**
 * @member {String} campfire_notify_prefs
 */
Project.prototype['campfire_notify_prefs'] = undefined;

/**
 * @member {String} campfire_room
 */
Project.prototype['campfire_room'] = undefined;

/**
 * @member {String} campfire_subdomain
 */
Project.prototype['campfire_subdomain'] = undefined;

/**
 * @member {String} campfire_token
 */
Project.prototype['campfire_token'] = undefined;

/**
 * @member {String} compile
 */
Project.prototype['compile'] = undefined;

/**
 * @member {String} default_branch
 */
Project.prototype['default_branch'] = undefined;

/**
 * @member {String} dependencies
 */
Project.prototype['dependencies'] = undefined;

/**
 * @member {String} extra
 */
Project.prototype['extra'] = undefined;

/**
 * @member {module:model/ProjectFeatureFlags} feature_flags
 */
Project.prototype['feature_flags'] = undefined;

/**
 * @member {String} flowdock_api_token
 */
Project.prototype['flowdock_api_token'] = undefined;

/**
 * @member {Boolean} followed
 */
Project.prototype['followed'] = undefined;

/**
 * @member {Boolean} has_usable_key
 */
Project.prototype['has_usable_key'] = undefined;

/**
 * @member {String} heroku_deploy_user
 */
Project.prototype['heroku_deploy_user'] = undefined;

/**
 * @member {String} hipchat_api_token
 */
Project.prototype['hipchat_api_token'] = undefined;

/**
 * @member {String} hipchat_notify
 */
Project.prototype['hipchat_notify'] = undefined;

/**
 * @member {String} hipchat_notify_prefs
 */
Project.prototype['hipchat_notify_prefs'] = undefined;

/**
 * @member {String} hipchat_room
 */
Project.prototype['hipchat_room'] = undefined;

/**
 * @member {String} irc_channel
 */
Project.prototype['irc_channel'] = undefined;

/**
 * @member {String} irc_keyword
 */
Project.prototype['irc_keyword'] = undefined;

/**
 * @member {String} irc_notify_prefs
 */
Project.prototype['irc_notify_prefs'] = undefined;

/**
 * @member {String} irc_password
 */
Project.prototype['irc_password'] = undefined;

/**
 * @member {String} irc_server
 */
Project.prototype['irc_server'] = undefined;

/**
 * @member {String} irc_username
 */
Project.prototype['irc_username'] = undefined;

/**
 * @member {String} language
 */
Project.prototype['language'] = undefined;

/**
 * @member {Boolean} oss
 */
Project.prototype['oss'] = undefined;

/**
 * @member {Number} parallel
 */
Project.prototype['parallel'] = undefined;

/**
 * @member {String} reponame
 */
Project.prototype['reponame'] = undefined;

/**
 * @member {Array.<module:model/Scope>} scopes
 */
Project.prototype['scopes'] = undefined;

/**
 * @member {String} setup
 */
Project.prototype['setup'] = undefined;

/**
 * @member {String} slack_api_token
 */
Project.prototype['slack_api_token'] = undefined;

/**
 * @member {String} slack_channel
 */
Project.prototype['slack_channel'] = undefined;

/**
 * @member {String} slack_channel_override
 */
Project.prototype['slack_channel_override'] = undefined;

/**
 * @member {String} slack_notify_prefs
 */
Project.prototype['slack_notify_prefs'] = undefined;

/**
 * @member {String} slack_subdomain
 */
Project.prototype['slack_subdomain'] = undefined;

/**
 * @member {String} slack_webhook_url
 */
Project.prototype['slack_webhook_url'] = undefined;

/**
 * @member {Array.<String>} ssh_keys
 */
Project.prototype['ssh_keys'] = undefined;

/**
 * @member {String} test
 */
Project.prototype['test'] = undefined;

/**
 * @member {String} username
 */
Project.prototype['username'] = undefined;

/**
 * @member {String} vcs_type
 */
Project.prototype['vcs_type'] = undefined;

/**
 * @member {String} vcs_url
 */
Project.prototype['vcs_url'] = undefined;






export default Project;

