/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommitDetail model module.
 * @module model/CommitDetail
 * @version v1
 */
class CommitDetail {
    /**
     * Constructs a new <code>CommitDetail</code>.
     * @alias module:model/CommitDetail
     */
    constructor() { 
        
        CommitDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitDetail} obj Optional instance to populate.
     * @return {module:model/CommitDetail} The populated <code>CommitDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitDetail();

            if (data.hasOwnProperty('author_date')) {
                obj['author_date'] = ApiClient.convertToType(data['author_date'], 'Date');
            }
            if (data.hasOwnProperty('author_email')) {
                obj['author_email'] = ApiClient.convertToType(data['author_email'], 'String');
            }
            if (data.hasOwnProperty('author_login')) {
                obj['author_login'] = ApiClient.convertToType(data['author_login'], 'String');
            }
            if (data.hasOwnProperty('author_name')) {
                obj['author_name'] = ApiClient.convertToType(data['author_name'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = ApiClient.convertToType(data['commit'], 'String');
            }
            if (data.hasOwnProperty('commit_url')) {
                obj['commit_url'] = ApiClient.convertToType(data['commit_url'], 'String');
            }
            if (data.hasOwnProperty('committer_date')) {
                obj['committer_date'] = ApiClient.convertToType(data['committer_date'], 'Date');
            }
            if (data.hasOwnProperty('committer_email')) {
                obj['committer_email'] = ApiClient.convertToType(data['committer_email'], 'String');
            }
            if (data.hasOwnProperty('committer_login')) {
                obj['committer_login'] = ApiClient.convertToType(data['committer_login'], 'String');
            }
            if (data.hasOwnProperty('committer_name')) {
                obj['committer_name'] = ApiClient.convertToType(data['committer_name'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author_email'] && !(typeof data['author_email'] === 'string' || data['author_email'] instanceof String)) {
            throw new Error("Expected the field `author_email` to be a primitive type in the JSON string but got " + data['author_email']);
        }
        // ensure the json data is a string
        if (data['author_login'] && !(typeof data['author_login'] === 'string' || data['author_login'] instanceof String)) {
            throw new Error("Expected the field `author_login` to be a primitive type in the JSON string but got " + data['author_login']);
        }
        // ensure the json data is a string
        if (data['author_name'] && !(typeof data['author_name'] === 'string' || data['author_name'] instanceof String)) {
            throw new Error("Expected the field `author_name` to be a primitive type in the JSON string but got " + data['author_name']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['commit'] && !(typeof data['commit'] === 'string' || data['commit'] instanceof String)) {
            throw new Error("Expected the field `commit` to be a primitive type in the JSON string but got " + data['commit']);
        }
        // ensure the json data is a string
        if (data['commit_url'] && !(typeof data['commit_url'] === 'string' || data['commit_url'] instanceof String)) {
            throw new Error("Expected the field `commit_url` to be a primitive type in the JSON string but got " + data['commit_url']);
        }
        // ensure the json data is a string
        if (data['committer_email'] && !(typeof data['committer_email'] === 'string' || data['committer_email'] instanceof String)) {
            throw new Error("Expected the field `committer_email` to be a primitive type in the JSON string but got " + data['committer_email']);
        }
        // ensure the json data is a string
        if (data['committer_login'] && !(typeof data['committer_login'] === 'string' || data['committer_login'] instanceof String)) {
            throw new Error("Expected the field `committer_login` to be a primitive type in the JSON string but got " + data['committer_login']);
        }
        // ensure the json data is a string
        if (data['committer_name'] && !(typeof data['committer_name'] === 'string' || data['committer_name'] instanceof String)) {
            throw new Error("Expected the field `committer_name` to be a primitive type in the JSON string but got " + data['committer_name']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}



/**
 * @member {Date} author_date
 */
CommitDetail.prototype['author_date'] = undefined;

/**
 * @member {String} author_email
 */
CommitDetail.prototype['author_email'] = undefined;

/**
 * @member {String} author_login
 */
CommitDetail.prototype['author_login'] = undefined;

/**
 * @member {String} author_name
 */
CommitDetail.prototype['author_name'] = undefined;

/**
 * @member {String} body
 */
CommitDetail.prototype['body'] = undefined;

/**
 * @member {String} commit
 */
CommitDetail.prototype['commit'] = undefined;

/**
 * @member {String} commit_url
 */
CommitDetail.prototype['commit_url'] = undefined;

/**
 * @member {Date} committer_date
 */
CommitDetail.prototype['committer_date'] = undefined;

/**
 * @member {String} committer_email
 */
CommitDetail.prototype['committer_email'] = undefined;

/**
 * @member {String} committer_login
 */
CommitDetail.prototype['committer_login'] = undefined;

/**
 * @member {String} committer_name
 */
CommitDetail.prototype['committer_name'] = undefined;

/**
 * @member {String} subject
 */
CommitDetail.prototype['subject'] = undefined;






export default CommitDetail;

