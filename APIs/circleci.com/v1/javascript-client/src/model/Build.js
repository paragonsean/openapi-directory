/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Lifecycle from './Lifecycle';
import PreviousBuild from './PreviousBuild';

/**
 * The Build model module.
 * @module model/Build
 * @version v1
 */
class Build {
    /**
     * Constructs a new <code>Build</code>.
     * @alias module:model/Build
     */
    constructor() { 
        
        Build.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Build</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Build} obj Optional instance to populate.
     * @return {module:model/Build} The populated <code>Build</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Build();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('build_time_millis')) {
                obj['build_time_millis'] = ApiClient.convertToType(data['build_time_millis'], 'Number');
            }
            if (data.hasOwnProperty('build_url')) {
                obj['build_url'] = ApiClient.convertToType(data['build_url'], 'String');
            }
            if (data.hasOwnProperty('committer_email')) {
                obj['committer_email'] = ApiClient.convertToType(data['committer_email'], 'String');
            }
            if (data.hasOwnProperty('committer_name')) {
                obj['committer_name'] = ApiClient.convertToType(data['committer_name'], 'String');
            }
            if (data.hasOwnProperty('dont_build')) {
                obj['dont_build'] = ApiClient.convertToType(data['dont_build'], 'String');
            }
            if (data.hasOwnProperty('lifecycle')) {
                obj['lifecycle'] = Lifecycle.constructFromObject(data['lifecycle']);
            }
            if (data.hasOwnProperty('previous')) {
                obj['previous'] = PreviousBuild.constructFromObject(data['previous']);
            }
            if (data.hasOwnProperty('queued_at')) {
                obj['queued_at'] = ApiClient.convertToType(data['queued_at'], 'Date');
            }
            if (data.hasOwnProperty('reponame')) {
                obj['reponame'] = ApiClient.convertToType(data['reponame'], 'String');
            }
            if (data.hasOwnProperty('retry_of')) {
                obj['retry_of'] = ApiClient.convertToType(data['retry_of'], 'Number');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Date');
            }
            if (data.hasOwnProperty('stop_time')) {
                obj['stop_time'] = ApiClient.convertToType(data['stop_time'], 'Date');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('vcs_url')) {
                obj['vcs_url'] = ApiClient.convertToType(data['vcs_url'], 'String');
            }
            if (data.hasOwnProperty('why')) {
                obj['why'] = ApiClient.convertToType(data['why'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Build</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Build</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['build_url'] && !(typeof data['build_url'] === 'string' || data['build_url'] instanceof String)) {
            throw new Error("Expected the field `build_url` to be a primitive type in the JSON string but got " + data['build_url']);
        }
        // ensure the json data is a string
        if (data['committer_email'] && !(typeof data['committer_email'] === 'string' || data['committer_email'] instanceof String)) {
            throw new Error("Expected the field `committer_email` to be a primitive type in the JSON string but got " + data['committer_email']);
        }
        // ensure the json data is a string
        if (data['committer_name'] && !(typeof data['committer_name'] === 'string' || data['committer_name'] instanceof String)) {
            throw new Error("Expected the field `committer_name` to be a primitive type in the JSON string but got " + data['committer_name']);
        }
        // ensure the json data is a string
        if (data['dont_build'] && !(typeof data['dont_build'] === 'string' || data['dont_build'] instanceof String)) {
            throw new Error("Expected the field `dont_build` to be a primitive type in the JSON string but got " + data['dont_build']);
        }
        // validate the optional field `previous`
        if (data['previous']) { // data not null
          PreviousBuild.validateJSON(data['previous']);
        }
        // ensure the json data is a string
        if (data['reponame'] && !(typeof data['reponame'] === 'string' || data['reponame'] instanceof String)) {
            throw new Error("Expected the field `reponame` to be a primitive type in the JSON string but got " + data['reponame']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['vcs_url'] && !(typeof data['vcs_url'] === 'string' || data['vcs_url'] instanceof String)) {
            throw new Error("Expected the field `vcs_url` to be a primitive type in the JSON string but got " + data['vcs_url']);
        }
        // ensure the json data is a string
        if (data['why'] && !(typeof data['why'] === 'string' || data['why'] instanceof String)) {
            throw new Error("Expected the field `why` to be a primitive type in the JSON string but got " + data['why']);
        }

        return true;
    }


}



/**
 * commit message body
 * @member {String} body
 */
Build.prototype['body'] = undefined;

/**
 * @member {String} branch
 */
Build.prototype['branch'] = undefined;

/**
 * @member {Number} build_time_millis
 */
Build.prototype['build_time_millis'] = undefined;

/**
 * @member {String} build_url
 */
Build.prototype['build_url'] = undefined;

/**
 * @member {String} committer_email
 */
Build.prototype['committer_email'] = undefined;

/**
 * @member {String} committer_name
 */
Build.prototype['committer_name'] = undefined;

/**
 * reason why we didn't build, if we didn't build
 * @member {String} dont_build
 */
Build.prototype['dont_build'] = undefined;

/**
 * @member {module:model/Lifecycle} lifecycle
 */
Build.prototype['lifecycle'] = undefined;

/**
 * @member {module:model/PreviousBuild} previous
 */
Build.prototype['previous'] = undefined;

/**
 * time build was queued
 * @member {Date} queued_at
 */
Build.prototype['queued_at'] = undefined;

/**
 * @member {String} reponame
 */
Build.prototype['reponame'] = undefined;

/**
 * build_num of the build this is a retry of
 * @member {Number} retry_of
 */
Build.prototype['retry_of'] = undefined;

/**
 * time build started
 * @member {Date} start_time
 */
Build.prototype['start_time'] = undefined;

/**
 * time build finished
 * @member {Date} stop_time
 */
Build.prototype['stop_time'] = undefined;

/**
 * @member {String} subject
 */
Build.prototype['subject'] = undefined;

/**
 * @member {String} username
 */
Build.prototype['username'] = undefined;

/**
 * @member {String} vcs_url
 */
Build.prototype['vcs_url'] = undefined;

/**
 * short string explaining the reason we built
 * @member {String} why
 */
Build.prototype['why'] = undefined;






export default Build;

