/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Artifact from '../model/Artifact';
import Build from '../model/Build';
import BuildDetail from '../model/BuildDetail';
import BuildSummary from '../model/BuildSummary';
import Envvar from '../model/Envvar';
import Key from '../model/Key';
import Project from '../model/Project';
import ProjectUsernameProjectBuildCacheDelete200Response from '../model/ProjectUsernameProjectBuildCacheDelete200Response';
import ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response from '../model/ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response';
import ProjectUsernameProjectPostRequest from '../model/ProjectUsernameProjectPostRequest';
import ProjectUsernameProjectSshKeyPostDefaultResponse from '../model/ProjectUsernameProjectSshKeyPostDefaultResponse';
import ProjectUsernameProjectSshKeyPostRequest from '../model/ProjectUsernameProjectSshKeyPostRequest';
import ProjectUsernameProjectTreeBranchPostRequest from '../model/ProjectUsernameProjectTreeBranchPostRequest';
import Tests from '../model/Tests';
import User from '../model/User';

/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the meGet operation.
     * @callback module:api/DefaultApi~meGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about the signed in user. 
     * @param {module:api/DefaultApi~meGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    meGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectBuildCacheDelete operation.
     * @callback module:api/DefaultApi~projectUsernameProjectBuildCacheDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectUsernameProjectBuildCacheDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears the cache for a project. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectBuildCacheDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectUsernameProjectBuildCacheDelete200Response}
     */
    projectUsernameProjectBuildCacheDelete(username, project, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectBuildCacheDelete");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectBuildCacheDelete");
      }

      let pathParams = {
        'username': username,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectUsernameProjectBuildCacheDelete200Response;
      return this.apiClient.callApi(
        '/project/{username}/{project}/build-cache', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectBuildNumArtifactsGet operation.
     * @callback module:api/DefaultApi~projectUsernameProjectBuildNumArtifactsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Artifact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the artifacts produced by a given build. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {Number} buildNum XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectBuildNumArtifactsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Artifact>}
     */
    projectUsernameProjectBuildNumArtifactsGet(username, project, buildNum, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumArtifactsGet");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumArtifactsGet");
      }
      // verify the required parameter 'buildNum' is set
      if (buildNum === undefined || buildNum === null) {
        throw new Error("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumArtifactsGet");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'build_num': buildNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Artifact];
      return this.apiClient.callApi(
        '/project/{username}/{project}/{build_num}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectBuildNumCancelPost operation.
     * @callback module:api/DefaultApi~projectUsernameProjectBuildNumCancelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the build, returns a summary of the build. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {Number} buildNum XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectBuildNumCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    projectUsernameProjectBuildNumCancelPost(username, project, buildNum, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumCancelPost");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumCancelPost");
      }
      // verify the required parameter 'buildNum' is set
      if (buildNum === undefined || buildNum === null) {
        throw new Error("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumCancelPost");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'build_num': buildNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/project/{username}/{project}/{build_num}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectBuildNumGet operation.
     * @callback module:api/DefaultApi~projectUsernameProjectBuildNumGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Full details for a single build. The response includes all of the fields from the build summary. This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {Number} buildNum XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectBuildNumGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildDetail}
     */
    projectUsernameProjectBuildNumGet(username, project, buildNum, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumGet");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumGet");
      }
      // verify the required parameter 'buildNum' is set
      if (buildNum === undefined || buildNum === null) {
        throw new Error("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumGet");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'build_num': buildNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildDetail;
      return this.apiClient.callApi(
        '/project/{username}/{project}/{build_num}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectBuildNumRetryPost operation.
     * @callback module:api/DefaultApi~projectUsernameProjectBuildNumRetryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retries the build, returns a summary of the new build. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {Number} buildNum XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectBuildNumRetryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    projectUsernameProjectBuildNumRetryPost(username, project, buildNum, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumRetryPost");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumRetryPost");
      }
      // verify the required parameter 'buildNum' is set
      if (buildNum === undefined || buildNum === null) {
        throw new Error("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumRetryPost");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'build_num': buildNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/project/{username}/{project}/{build_num}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectBuildNumTestsGet operation.
     * @callback module:api/DefaultApi~projectUsernameProjectBuildNumTestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides test metadata for a build Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/) 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {Number} buildNum XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectBuildNumTestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tests}
     */
    projectUsernameProjectBuildNumTestsGet(username, project, buildNum, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumTestsGet");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumTestsGet");
      }
      // verify the required parameter 'buildNum' is set
      if (buildNum === undefined || buildNum === null) {
        throw new Error("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumTestsGet");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'build_num': buildNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tests;
      return this.apiClient.callApi(
        '/project/{username}/{project}/{build_num}/tests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectCheckoutKeyFingerprintDelete operation.
     * @callback module:api/DefaultApi~projectUsernameProjectCheckoutKeyFingerprintDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a checkout key. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {String} fingerprint XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectCheckoutKeyFingerprintDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response}
     */
    projectUsernameProjectCheckoutKeyFingerprintDelete(username, project, fingerprint, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectCheckoutKeyFingerprintDelete");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectCheckoutKeyFingerprintDelete");
      }
      // verify the required parameter 'fingerprint' is set
      if (fingerprint === undefined || fingerprint === null) {
        throw new Error("Missing the required parameter 'fingerprint' when calling projectUsernameProjectCheckoutKeyFingerprintDelete");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'fingerprint': fingerprint
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response;
      return this.apiClient.callApi(
        '/project/{username}/{project}/checkout-key/{fingerprint}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectCheckoutKeyFingerprintGet operation.
     * @callback module:api/DefaultApi~projectUsernameProjectCheckoutKeyFingerprintGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Key} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a checkout key. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {String} fingerprint XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectCheckoutKeyFingerprintGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Key}
     */
    projectUsernameProjectCheckoutKeyFingerprintGet(username, project, fingerprint, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectCheckoutKeyFingerprintGet");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectCheckoutKeyFingerprintGet");
      }
      // verify the required parameter 'fingerprint' is set
      if (fingerprint === undefined || fingerprint === null) {
        throw new Error("Missing the required parameter 'fingerprint' when calling projectUsernameProjectCheckoutKeyFingerprintGet");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'fingerprint': fingerprint
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Key;
      return this.apiClient.callApi(
        '/project/{username}/{project}/checkout-key/{fingerprint}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectCheckoutKeyGet operation.
     * @callback module:api/DefaultApi~projectUsernameProjectCheckoutKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Key>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists checkout keys. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectCheckoutKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Key>}
     */
    projectUsernameProjectCheckoutKeyGet(username, project, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectCheckoutKeyGet");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectCheckoutKeyGet");
      }

      let pathParams = {
        'username': username,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Key];
      return this.apiClient.callApi(
        '/project/{username}/{project}/checkout-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectCheckoutKeyPost operation.
     * @callback module:api/DefaultApi~projectUsernameProjectCheckoutKeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Key} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new checkout key. Only usable with a user API token. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {Object} opts Optional parameters
     * @param {String} [body] The type of key to create. Can be 'deploy-key' or 'github-user-key'. 
     * @param {module:api/DefaultApi~projectUsernameProjectCheckoutKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Key}
     */
    projectUsernameProjectCheckoutKeyPost(username, project, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectCheckoutKeyPost");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectCheckoutKeyPost");
      }

      let pathParams = {
        'username': username,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Key;
      return this.apiClient.callApi(
        '/project/{username}/{project}/checkout-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectEnvvarGet operation.
     * @callback module:api/DefaultApi~projectUsernameProjectEnvvarGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Envvar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the environment variables for :project 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectEnvvarGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Envvar>}
     */
    projectUsernameProjectEnvvarGet(username, project, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectEnvvarGet");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectEnvvarGet");
      }

      let pathParams = {
        'username': username,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Envvar];
      return this.apiClient.callApi(
        '/project/{username}/{project}/envvar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectEnvvarNameDelete operation.
     * @callback module:api/DefaultApi~projectUsernameProjectEnvvarNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the environment variable named ':name' 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {String} name XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectEnvvarNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response}
     */
    projectUsernameProjectEnvvarNameDelete(username, project, name, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectEnvvarNameDelete");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectEnvvarNameDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling projectUsernameProjectEnvvarNameDelete");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response;
      return this.apiClient.callApi(
        '/project/{username}/{project}/envvar/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectEnvvarNameGet operation.
     * @callback module:api/DefaultApi~projectUsernameProjectEnvvarNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envvar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the hidden value of environment variable :name 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {String} name XXXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectEnvvarNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envvar}
     */
    projectUsernameProjectEnvvarNameGet(username, project, name, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectEnvvarNameGet");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectEnvvarNameGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling projectUsernameProjectEnvvarNameGet");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Envvar;
      return this.apiClient.callApi(
        '/project/{username}/{project}/envvar/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectEnvvarPost operation.
     * @callback module:api/DefaultApi~projectUsernameProjectEnvvarPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envvar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new environment variable 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {module:api/DefaultApi~projectUsernameProjectEnvvarPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envvar}
     */
    projectUsernameProjectEnvvarPost(username, project, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectEnvvarPost");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectEnvvarPost");
      }

      let pathParams = {
        'username': username,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Envvar;
      return this.apiClient.callApi(
        '/project/{username}/{project}/envvar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectGet operation.
     * @callback module:api/DefaultApi~projectUsernameProjectGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Build>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Build summary for each of the last 30 builds for a single git repo. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 30)] The number of builds to return. Maximum 100, defaults to 30. 
     * @param {Number} [offset = 0)] The API returns builds starting from this offset, defaults to 0. 
     * @param {module:model/String} [filter] Restricts which builds are returned. Set to \"completed\", \"successful\", \"failed\", \"running\", or defaults to no filter. 
     * @param {module:api/DefaultApi~projectUsernameProjectGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Build>}
     */
    projectUsernameProjectGet(username, project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectGet");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectGet");
      }

      let pathParams = {
        'username': username,
        'project': project
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Build];
      return this.apiClient.callApi(
        '/project/{username}/{project}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectPost operation.
     * @callback module:api/DefaultApi~projectUsernameProjectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Triggers a new build, returns a summary of the build. 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectUsernameProjectPostRequest} [projectUsernameProjectPostRequest] 
     * @param {module:api/DefaultApi~projectUsernameProjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSummary}
     */
    projectUsernameProjectPost(username, project, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectUsernameProjectPostRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectPost");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectPost");
      }

      let pathParams = {
        'username': username,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildSummary;
      return this.apiClient.callApi(
        '/project/{username}/{project}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectSshKeyPost operation.
     * @callback module:api/DefaultApi~projectUsernameProjectSshKeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectUsernameProjectSshKeyPostDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an ssh key used to access external systems that require SSH key-based authentication 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {module:model/String} contentType 
     * @param {module:model/ProjectUsernameProjectSshKeyPostRequest} projectUsernameProjectSshKeyPostRequest 
     * @param {module:api/DefaultApi~projectUsernameProjectSshKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectUsernameProjectSshKeyPostDefaultResponse}
     */
    projectUsernameProjectSshKeyPost(username, project, contentType, projectUsernameProjectSshKeyPostRequest, callback) {
      let postBody = projectUsernameProjectSshKeyPostRequest;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectSshKeyPost");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectSshKeyPost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling projectUsernameProjectSshKeyPost");
      }
      // verify the required parameter 'projectUsernameProjectSshKeyPostRequest' is set
      if (projectUsernameProjectSshKeyPostRequest === undefined || projectUsernameProjectSshKeyPostRequest === null) {
        throw new Error("Missing the required parameter 'projectUsernameProjectSshKeyPostRequest' when calling projectUsernameProjectSshKeyPost");
      }

      let pathParams = {
        'username': username,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectUsernameProjectSshKeyPostDefaultResponse;
      return this.apiClient.callApi(
        '/project/{username}/{project}/ssh-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUsernameProjectTreeBranchPost operation.
     * @callback module:api/DefaultApi~projectUsernameProjectTreeBranchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Triggers a new build, returns a summary of the build. Optional build parameters can be set using an experimental API.  Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/) 
     * @param {String} username XXXXXXXXX 
     * @param {String} project XXXXXXXXX 
     * @param {String} branch The branch name should be url-encoded. 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectUsernameProjectTreeBranchPostRequest} [projectUsernameProjectTreeBranchPostRequest] 
     * @param {module:api/DefaultApi~projectUsernameProjectTreeBranchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    projectUsernameProjectTreeBranchPost(username, project, branch, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectUsernameProjectTreeBranchPostRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectUsernameProjectTreeBranchPost");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectUsernameProjectTreeBranchPost");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling projectUsernameProjectTreeBranchPost");
      }

      let pathParams = {
        'username': username,
        'project': project,
        'branch': branch
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/project/{username}/{project}/tree/{branch}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGet operation.
     * @callback module:api/DefaultApi~projectsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the projects you're following on CircleCI, with build information organized by branch. 
     * @param {module:api/DefaultApi~projectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recentBuildsGet operation.
     * @callback module:api/DefaultApi~recentBuildsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Build>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Build summary for each of the last 30 recent builds, ordered by build_num. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 30)] The number of builds to return. Maximum 100, defaults to 30. 
     * @param {Number} [offset = 0)] The API returns builds starting from this offset, defaults to 0. 
     * @param {module:api/DefaultApi~recentBuildsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Build>}
     */
    recentBuildsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Build];
      return this.apiClient.callApi(
        '/recent-builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userHerokuKeyPost operation.
     * @callback module:api/DefaultApi~userHerokuKeyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds your Heroku API key to CircleCI, takes apikey as form param name. 
     * @param {module:api/DefaultApi~userHerokuKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userHerokuKeyPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/heroku-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
