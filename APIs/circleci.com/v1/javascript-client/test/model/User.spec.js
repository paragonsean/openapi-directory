/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CircleCiRestApi);
  }
}(this, function(expect, CircleCiRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CircleCiRestApi.User();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('User', function() {
    it('should create an instance of User', function() {
      // uncomment below and update the code to test User
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be.a(CircleCiRestApi.User);
    });

    it('should have the property admin (base name: "admin")', function() {
      // uncomment below and update the code to test the property admin
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property allEmails (base name: "all_emails")', function() {
      // uncomment below and update the code to test the property allEmails
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property analyticsId (base name: "analytics_id")', function() {
      // uncomment below and update the code to test the property analyticsId
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property avatarUrl (base name: "avatar_url")', function() {
      // uncomment below and update the code to test the property avatarUrl
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property basicEmailPrefs (base name: "basic_email_prefs")', function() {
      // uncomment below and update the code to test the property basicEmailPrefs
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property bitbucket (base name: "bitbucket")', function() {
      // uncomment below and update the code to test the property bitbucket
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property bitbucketAuthorized (base name: "bitbucket_authorized")', function() {
      // uncomment below and update the code to test the property bitbucketAuthorized
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property containers (base name: "containers")', function() {
      // uncomment below and update the code to test the property containers
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property daysLeftInTrial (base name: "days_left_in_trial")', function() {
      // uncomment below and update the code to test the property daysLeftInTrial
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property devAdmin (base name: "dev_admin")', function() {
      // uncomment below and update the code to test the property devAdmin
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property enrolledBetas (base name: "enrolled_betas")', function() {
      // uncomment below and update the code to test the property enrolledBetas
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property githubId (base name: "github_id")', function() {
      // uncomment below and update the code to test the property githubId
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property githubOauthScopes (base name: "github_oauth_scopes")', function() {
      // uncomment below and update the code to test the property githubOauthScopes
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property gravatarId (base name: "gravatar_id")', function() {
      // uncomment below and update the code to test the property gravatarId
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property herokuApiKey (base name: "heroku_api_key")', function() {
      // uncomment below and update the code to test the property herokuApiKey
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property inBetaProgram (base name: "in_beta_program")', function() {
      // uncomment below and update the code to test the property inBetaProgram
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property login (base name: "login")', function() {
      // uncomment below and update the code to test the property login
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property organizationPrefs (base name: "organization_prefs")', function() {
      // uncomment below and update the code to test the property organizationPrefs
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property parallelism (base name: "parallelism")', function() {
      // uncomment below and update the code to test the property parallelism
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property projects (base name: "projects")', function() {
      // uncomment below and update the code to test the property projects
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property pusherId (base name: "pusher_id")', function() {
      // uncomment below and update the code to test the property pusherId
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property selectedEmail (base name: "selected_email")', function() {
      // uncomment below and update the code to test the property selectedEmail
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property signInCount (base name: "sign_in_count")', function() {
      // uncomment below and update the code to test the property signInCount
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property trialEnd (base name: "trial_end")', function() {
      // uncomment below and update the code to test the property trialEnd
      //var instance = new CircleCiRestApi.User();
      //expect(instance).to.be();
    });

  });

}));
