/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CircleCiRestApi);
  }
}(this, function(expect, CircleCiRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CircleCiRestApi.Project();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Project', function() {
    it('should create an instance of Project', function() {
      // uncomment below and update the code to test Project
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be.a(CircleCiRestApi.Project);
    });

    it('should have the property aws (base name: "aws")', function() {
      // uncomment below and update the code to test the property aws
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property branches (base name: "branches")', function() {
      // uncomment below and update the code to test the property branches
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property campfireNotifyPrefs (base name: "campfire_notify_prefs")', function() {
      // uncomment below and update the code to test the property campfireNotifyPrefs
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property campfireRoom (base name: "campfire_room")', function() {
      // uncomment below and update the code to test the property campfireRoom
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property campfireSubdomain (base name: "campfire_subdomain")', function() {
      // uncomment below and update the code to test the property campfireSubdomain
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property campfireToken (base name: "campfire_token")', function() {
      // uncomment below and update the code to test the property campfireToken
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property compile (base name: "compile")', function() {
      // uncomment below and update the code to test the property compile
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property defaultBranch (base name: "default_branch")', function() {
      // uncomment below and update the code to test the property defaultBranch
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property dependencies (base name: "dependencies")', function() {
      // uncomment below and update the code to test the property dependencies
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property extra (base name: "extra")', function() {
      // uncomment below and update the code to test the property extra
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property featureFlags (base name: "feature_flags")', function() {
      // uncomment below and update the code to test the property featureFlags
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property flowdockApiToken (base name: "flowdock_api_token")', function() {
      // uncomment below and update the code to test the property flowdockApiToken
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property followed (base name: "followed")', function() {
      // uncomment below and update the code to test the property followed
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property hasUsableKey (base name: "has_usable_key")', function() {
      // uncomment below and update the code to test the property hasUsableKey
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property herokuDeployUser (base name: "heroku_deploy_user")', function() {
      // uncomment below and update the code to test the property herokuDeployUser
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property hipchatApiToken (base name: "hipchat_api_token")', function() {
      // uncomment below and update the code to test the property hipchatApiToken
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property hipchatNotify (base name: "hipchat_notify")', function() {
      // uncomment below and update the code to test the property hipchatNotify
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property hipchatNotifyPrefs (base name: "hipchat_notify_prefs")', function() {
      // uncomment below and update the code to test the property hipchatNotifyPrefs
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property hipchatRoom (base name: "hipchat_room")', function() {
      // uncomment below and update the code to test the property hipchatRoom
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property ircChannel (base name: "irc_channel")', function() {
      // uncomment below and update the code to test the property ircChannel
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property ircKeyword (base name: "irc_keyword")', function() {
      // uncomment below and update the code to test the property ircKeyword
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property ircNotifyPrefs (base name: "irc_notify_prefs")', function() {
      // uncomment below and update the code to test the property ircNotifyPrefs
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property ircPassword (base name: "irc_password")', function() {
      // uncomment below and update the code to test the property ircPassword
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property ircServer (base name: "irc_server")', function() {
      // uncomment below and update the code to test the property ircServer
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property ircUsername (base name: "irc_username")', function() {
      // uncomment below and update the code to test the property ircUsername
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property oss (base name: "oss")', function() {
      // uncomment below and update the code to test the property oss
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property parallel (base name: "parallel")', function() {
      // uncomment below and update the code to test the property parallel
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property reponame (base name: "reponame")', function() {
      // uncomment below and update the code to test the property reponame
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property scopes (base name: "scopes")', function() {
      // uncomment below and update the code to test the property scopes
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property setup (base name: "setup")', function() {
      // uncomment below and update the code to test the property setup
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property slackApiToken (base name: "slack_api_token")', function() {
      // uncomment below and update the code to test the property slackApiToken
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property slackChannel (base name: "slack_channel")', function() {
      // uncomment below and update the code to test the property slackChannel
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property slackChannelOverride (base name: "slack_channel_override")', function() {
      // uncomment below and update the code to test the property slackChannelOverride
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property slackNotifyPrefs (base name: "slack_notify_prefs")', function() {
      // uncomment below and update the code to test the property slackNotifyPrefs
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property slackSubdomain (base name: "slack_subdomain")', function() {
      // uncomment below and update the code to test the property slackSubdomain
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property slackWebhookUrl (base name: "slack_webhook_url")', function() {
      // uncomment below and update the code to test the property slackWebhookUrl
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property sshKeys (base name: "ssh_keys")', function() {
      // uncomment below and update the code to test the property sshKeys
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property test (base name: "test")', function() {
      // uncomment below and update the code to test the property test
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property vcsType (base name: "vcs_type")', function() {
      // uncomment below and update the code to test the property vcsType
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property vcsUrl (base name: "vcs_url")', function() {
      // uncomment below and update the code to test the property vcsUrl
      //var instance = new CircleCiRestApi.Project();
      //expect(instance).to.be();
    });

  });

}));
