/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CircleCiRestApi);
  }
}(this, function(expect, CircleCiRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CircleCiRestApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('meGet', function() {
      it('should call meGet successfully', function(done) {
        //uncomment below and update the code to test meGet
        //instance.meGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectBuildCacheDelete', function() {
      it('should call projectUsernameProjectBuildCacheDelete successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectBuildCacheDelete
        //instance.projectUsernameProjectBuildCacheDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectBuildNumArtifactsGet', function() {
      it('should call projectUsernameProjectBuildNumArtifactsGet successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectBuildNumArtifactsGet
        //instance.projectUsernameProjectBuildNumArtifactsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectBuildNumCancelPost', function() {
      it('should call projectUsernameProjectBuildNumCancelPost successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectBuildNumCancelPost
        //instance.projectUsernameProjectBuildNumCancelPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectBuildNumGet', function() {
      it('should call projectUsernameProjectBuildNumGet successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectBuildNumGet
        //instance.projectUsernameProjectBuildNumGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectBuildNumRetryPost', function() {
      it('should call projectUsernameProjectBuildNumRetryPost successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectBuildNumRetryPost
        //instance.projectUsernameProjectBuildNumRetryPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectBuildNumTestsGet', function() {
      it('should call projectUsernameProjectBuildNumTestsGet successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectBuildNumTestsGet
        //instance.projectUsernameProjectBuildNumTestsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectCheckoutKeyFingerprintDelete', function() {
      it('should call projectUsernameProjectCheckoutKeyFingerprintDelete successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectCheckoutKeyFingerprintDelete
        //instance.projectUsernameProjectCheckoutKeyFingerprintDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectCheckoutKeyFingerprintGet', function() {
      it('should call projectUsernameProjectCheckoutKeyFingerprintGet successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectCheckoutKeyFingerprintGet
        //instance.projectUsernameProjectCheckoutKeyFingerprintGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectCheckoutKeyGet', function() {
      it('should call projectUsernameProjectCheckoutKeyGet successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectCheckoutKeyGet
        //instance.projectUsernameProjectCheckoutKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectCheckoutKeyPost', function() {
      it('should call projectUsernameProjectCheckoutKeyPost successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectCheckoutKeyPost
        //instance.projectUsernameProjectCheckoutKeyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectEnvvarGet', function() {
      it('should call projectUsernameProjectEnvvarGet successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectEnvvarGet
        //instance.projectUsernameProjectEnvvarGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectEnvvarNameDelete', function() {
      it('should call projectUsernameProjectEnvvarNameDelete successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectEnvvarNameDelete
        //instance.projectUsernameProjectEnvvarNameDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectEnvvarNameGet', function() {
      it('should call projectUsernameProjectEnvvarNameGet successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectEnvvarNameGet
        //instance.projectUsernameProjectEnvvarNameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectEnvvarPost', function() {
      it('should call projectUsernameProjectEnvvarPost successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectEnvvarPost
        //instance.projectUsernameProjectEnvvarPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectGet', function() {
      it('should call projectUsernameProjectGet successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectGet
        //instance.projectUsernameProjectGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectPost', function() {
      it('should call projectUsernameProjectPost successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectPost
        //instance.projectUsernameProjectPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectSshKeyPost', function() {
      it('should call projectUsernameProjectSshKeyPost successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectSshKeyPost
        //instance.projectUsernameProjectSshKeyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUsernameProjectTreeBranchPost', function() {
      it('should call projectUsernameProjectTreeBranchPost successfully', function(done) {
        //uncomment below and update the code to test projectUsernameProjectTreeBranchPost
        //instance.projectUsernameProjectTreeBranchPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsGet', function() {
      it('should call projectsGet successfully', function(done) {
        //uncomment below and update the code to test projectsGet
        //instance.projectsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recentBuildsGet', function() {
      it('should call recentBuildsGet successfully', function(done) {
        //uncomment below and update the code to test recentBuildsGet
        //instance.recentBuildsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userHerokuKeyPost', function() {
      it('should call userHerokuKeyPost successfully', function(done) {
        //uncomment below and update the code to test userHerokuKeyPost
        //instance.userHerokuKeyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
