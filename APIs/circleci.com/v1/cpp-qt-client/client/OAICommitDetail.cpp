/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitDetail::OAICommitDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitDetail::OAICommitDetail() {
    this->initializeModel();
}

OAICommitDetail::~OAICommitDetail() {}

void OAICommitDetail::initializeModel() {

    m_author_date_isSet = false;
    m_author_date_isValid = false;

    m_author_email_isSet = false;
    m_author_email_isValid = false;

    m_author_login_isSet = false;
    m_author_login_isValid = false;

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_commit_url_isSet = false;
    m_commit_url_isValid = false;

    m_committer_date_isSet = false;
    m_committer_date_isValid = false;

    m_committer_email_isSet = false;
    m_committer_email_isValid = false;

    m_committer_login_isSet = false;
    m_committer_login_isValid = false;

    m_committer_name_isSet = false;
    m_committer_name_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAICommitDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitDetail::fromJsonObject(QJsonObject json) {

    m_author_date_isValid = ::OpenAPI::fromJsonValue(m_author_date, json[QString("author_date")]);
    m_author_date_isSet = !json[QString("author_date")].isNull() && m_author_date_isValid;

    m_author_email_isValid = ::OpenAPI::fromJsonValue(m_author_email, json[QString("author_email")]);
    m_author_email_isSet = !json[QString("author_email")].isNull() && m_author_email_isValid;

    m_author_login_isValid = ::OpenAPI::fromJsonValue(m_author_login, json[QString("author_login")]);
    m_author_login_isSet = !json[QString("author_login")].isNull() && m_author_login_isValid;

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("author_name")]);
    m_author_name_isSet = !json[QString("author_name")].isNull() && m_author_name_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_commit_url_isValid = ::OpenAPI::fromJsonValue(m_commit_url, json[QString("commit_url")]);
    m_commit_url_isSet = !json[QString("commit_url")].isNull() && m_commit_url_isValid;

    m_committer_date_isValid = ::OpenAPI::fromJsonValue(m_committer_date, json[QString("committer_date")]);
    m_committer_date_isSet = !json[QString("committer_date")].isNull() && m_committer_date_isValid;

    m_committer_email_isValid = ::OpenAPI::fromJsonValue(m_committer_email, json[QString("committer_email")]);
    m_committer_email_isSet = !json[QString("committer_email")].isNull() && m_committer_email_isValid;

    m_committer_login_isValid = ::OpenAPI::fromJsonValue(m_committer_login, json[QString("committer_login")]);
    m_committer_login_isSet = !json[QString("committer_login")].isNull() && m_committer_login_isValid;

    m_committer_name_isValid = ::OpenAPI::fromJsonValue(m_committer_name, json[QString("committer_name")]);
    m_committer_name_isSet = !json[QString("committer_name")].isNull() && m_committer_name_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAICommitDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_author_date_isSet) {
        obj.insert(QString("author_date"), ::OpenAPI::toJsonValue(m_author_date));
    }
    if (m_author_email_isSet) {
        obj.insert(QString("author_email"), ::OpenAPI::toJsonValue(m_author_email));
    }
    if (m_author_login_isSet) {
        obj.insert(QString("author_login"), ::OpenAPI::toJsonValue(m_author_login));
    }
    if (m_author_name_isSet) {
        obj.insert(QString("author_name"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_commit_url_isSet) {
        obj.insert(QString("commit_url"), ::OpenAPI::toJsonValue(m_commit_url));
    }
    if (m_committer_date_isSet) {
        obj.insert(QString("committer_date"), ::OpenAPI::toJsonValue(m_committer_date));
    }
    if (m_committer_email_isSet) {
        obj.insert(QString("committer_email"), ::OpenAPI::toJsonValue(m_committer_email));
    }
    if (m_committer_login_isSet) {
        obj.insert(QString("committer_login"), ::OpenAPI::toJsonValue(m_committer_login));
    }
    if (m_committer_name_isSet) {
        obj.insert(QString("committer_name"), ::OpenAPI::toJsonValue(m_committer_name));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QDateTime OAICommitDetail::getAuthorDate() const {
    return m_author_date;
}
void OAICommitDetail::setAuthorDate(const QDateTime &author_date) {
    m_author_date = author_date;
    m_author_date_isSet = true;
}

bool OAICommitDetail::is_author_date_Set() const{
    return m_author_date_isSet;
}

bool OAICommitDetail::is_author_date_Valid() const{
    return m_author_date_isValid;
}

QString OAICommitDetail::getAuthorEmail() const {
    return m_author_email;
}
void OAICommitDetail::setAuthorEmail(const QString &author_email) {
    m_author_email = author_email;
    m_author_email_isSet = true;
}

bool OAICommitDetail::is_author_email_Set() const{
    return m_author_email_isSet;
}

bool OAICommitDetail::is_author_email_Valid() const{
    return m_author_email_isValid;
}

QString OAICommitDetail::getAuthorLogin() const {
    return m_author_login;
}
void OAICommitDetail::setAuthorLogin(const QString &author_login) {
    m_author_login = author_login;
    m_author_login_isSet = true;
}

bool OAICommitDetail::is_author_login_Set() const{
    return m_author_login_isSet;
}

bool OAICommitDetail::is_author_login_Valid() const{
    return m_author_login_isValid;
}

QString OAICommitDetail::getAuthorName() const {
    return m_author_name;
}
void OAICommitDetail::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAICommitDetail::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAICommitDetail::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QString OAICommitDetail::getBody() const {
    return m_body;
}
void OAICommitDetail::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICommitDetail::is_body_Set() const{
    return m_body_isSet;
}

bool OAICommitDetail::is_body_Valid() const{
    return m_body_isValid;
}

QString OAICommitDetail::getCommit() const {
    return m_commit;
}
void OAICommitDetail::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAICommitDetail::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAICommitDetail::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAICommitDetail::getCommitUrl() const {
    return m_commit_url;
}
void OAICommitDetail::setCommitUrl(const QString &commit_url) {
    m_commit_url = commit_url;
    m_commit_url_isSet = true;
}

bool OAICommitDetail::is_commit_url_Set() const{
    return m_commit_url_isSet;
}

bool OAICommitDetail::is_commit_url_Valid() const{
    return m_commit_url_isValid;
}

QDateTime OAICommitDetail::getCommitterDate() const {
    return m_committer_date;
}
void OAICommitDetail::setCommitterDate(const QDateTime &committer_date) {
    m_committer_date = committer_date;
    m_committer_date_isSet = true;
}

bool OAICommitDetail::is_committer_date_Set() const{
    return m_committer_date_isSet;
}

bool OAICommitDetail::is_committer_date_Valid() const{
    return m_committer_date_isValid;
}

QString OAICommitDetail::getCommitterEmail() const {
    return m_committer_email;
}
void OAICommitDetail::setCommitterEmail(const QString &committer_email) {
    m_committer_email = committer_email;
    m_committer_email_isSet = true;
}

bool OAICommitDetail::is_committer_email_Set() const{
    return m_committer_email_isSet;
}

bool OAICommitDetail::is_committer_email_Valid() const{
    return m_committer_email_isValid;
}

QString OAICommitDetail::getCommitterLogin() const {
    return m_committer_login;
}
void OAICommitDetail::setCommitterLogin(const QString &committer_login) {
    m_committer_login = committer_login;
    m_committer_login_isSet = true;
}

bool OAICommitDetail::is_committer_login_Set() const{
    return m_committer_login_isSet;
}

bool OAICommitDetail::is_committer_login_Valid() const{
    return m_committer_login_isValid;
}

QString OAICommitDetail::getCommitterName() const {
    return m_committer_name;
}
void OAICommitDetail::setCommitterName(const QString &committer_name) {
    m_committer_name = committer_name;
    m_committer_name_isSet = true;
}

bool OAICommitDetail::is_committer_name_Set() const{
    return m_committer_name_isSet;
}

bool OAICommitDetail::is_committer_name_Valid() const{
    return m_committer_name_isValid;
}

QString OAICommitDetail::getSubject() const {
    return m_subject;
}
void OAICommitDetail::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICommitDetail::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICommitDetail::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAICommitDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
