/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject_feature_flags.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject_feature_flags::OAIProject_feature_flags(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject_feature_flags::OAIProject_feature_flags() {
    this->initializeModel();
}

OAIProject_feature_flags::~OAIProject_feature_flags() {}

void OAIProject_feature_flags::initializeModel() {

    m_build_fork_prs_isSet = false;
    m_build_fork_prs_isValid = false;

    m_fleet_isSet = false;
    m_fleet_isValid = false;

    m_junit_isSet = false;
    m_junit_isValid = false;

    m_oss_isSet = false;
    m_oss_isValid = false;

    m_osx_isSet = false;
    m_osx_isValid = false;

    m_set_github_status_isSet = false;
    m_set_github_status_isValid = false;

    m_trusty_beta_isSet = false;
    m_trusty_beta_isValid = false;
}

void OAIProject_feature_flags::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject_feature_flags::fromJsonObject(QJsonObject json) {

    m_build_fork_prs_isValid = ::OpenAPI::fromJsonValue(m_build_fork_prs, json[QString("build-fork-prs")]);
    m_build_fork_prs_isSet = !json[QString("build-fork-prs")].isNull() && m_build_fork_prs_isValid;

    m_fleet_isValid = ::OpenAPI::fromJsonValue(m_fleet, json[QString("fleet")]);
    m_fleet_isSet = !json[QString("fleet")].isNull() && m_fleet_isValid;

    m_junit_isValid = ::OpenAPI::fromJsonValue(m_junit, json[QString("junit")]);
    m_junit_isSet = !json[QString("junit")].isNull() && m_junit_isValid;

    m_oss_isValid = ::OpenAPI::fromJsonValue(m_oss, json[QString("oss")]);
    m_oss_isSet = !json[QString("oss")].isNull() && m_oss_isValid;

    m_osx_isValid = ::OpenAPI::fromJsonValue(m_osx, json[QString("osx")]);
    m_osx_isSet = !json[QString("osx")].isNull() && m_osx_isValid;

    m_set_github_status_isValid = ::OpenAPI::fromJsonValue(m_set_github_status, json[QString("set-github-status")]);
    m_set_github_status_isSet = !json[QString("set-github-status")].isNull() && m_set_github_status_isValid;

    m_trusty_beta_isValid = ::OpenAPI::fromJsonValue(m_trusty_beta, json[QString("trusty-beta")]);
    m_trusty_beta_isSet = !json[QString("trusty-beta")].isNull() && m_trusty_beta_isValid;
}

QString OAIProject_feature_flags::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject_feature_flags::asJsonObject() const {
    QJsonObject obj;
    if (m_build_fork_prs_isSet) {
        obj.insert(QString("build-fork-prs"), ::OpenAPI::toJsonValue(m_build_fork_prs));
    }
    if (m_fleet_isSet) {
        obj.insert(QString("fleet"), ::OpenAPI::toJsonValue(m_fleet));
    }
    if (m_junit_isSet) {
        obj.insert(QString("junit"), ::OpenAPI::toJsonValue(m_junit));
    }
    if (m_oss_isSet) {
        obj.insert(QString("oss"), ::OpenAPI::toJsonValue(m_oss));
    }
    if (m_osx_isSet) {
        obj.insert(QString("osx"), ::OpenAPI::toJsonValue(m_osx));
    }
    if (m_set_github_status_isSet) {
        obj.insert(QString("set-github-status"), ::OpenAPI::toJsonValue(m_set_github_status));
    }
    if (m_trusty_beta_isSet) {
        obj.insert(QString("trusty-beta"), ::OpenAPI::toJsonValue(m_trusty_beta));
    }
    return obj;
}

bool OAIProject_feature_flags::isBuildForkPrs() const {
    return m_build_fork_prs;
}
void OAIProject_feature_flags::setBuildForkPrs(const bool &build_fork_prs) {
    m_build_fork_prs = build_fork_prs;
    m_build_fork_prs_isSet = true;
}

bool OAIProject_feature_flags::is_build_fork_prs_Set() const{
    return m_build_fork_prs_isSet;
}

bool OAIProject_feature_flags::is_build_fork_prs_Valid() const{
    return m_build_fork_prs_isValid;
}

bool OAIProject_feature_flags::isFleet() const {
    return m_fleet;
}
void OAIProject_feature_flags::setFleet(const bool &fleet) {
    m_fleet = fleet;
    m_fleet_isSet = true;
}

bool OAIProject_feature_flags::is_fleet_Set() const{
    return m_fleet_isSet;
}

bool OAIProject_feature_flags::is_fleet_Valid() const{
    return m_fleet_isValid;
}

bool OAIProject_feature_flags::isJunit() const {
    return m_junit;
}
void OAIProject_feature_flags::setJunit(const bool &junit) {
    m_junit = junit;
    m_junit_isSet = true;
}

bool OAIProject_feature_flags::is_junit_Set() const{
    return m_junit_isSet;
}

bool OAIProject_feature_flags::is_junit_Valid() const{
    return m_junit_isValid;
}

bool OAIProject_feature_flags::isOss() const {
    return m_oss;
}
void OAIProject_feature_flags::setOss(const bool &oss) {
    m_oss = oss;
    m_oss_isSet = true;
}

bool OAIProject_feature_flags::is_oss_Set() const{
    return m_oss_isSet;
}

bool OAIProject_feature_flags::is_oss_Valid() const{
    return m_oss_isValid;
}

bool OAIProject_feature_flags::isOsx() const {
    return m_osx;
}
void OAIProject_feature_flags::setOsx(const bool &osx) {
    m_osx = osx;
    m_osx_isSet = true;
}

bool OAIProject_feature_flags::is_osx_Set() const{
    return m_osx_isSet;
}

bool OAIProject_feature_flags::is_osx_Valid() const{
    return m_osx_isValid;
}

bool OAIProject_feature_flags::isSetGithubStatus() const {
    return m_set_github_status;
}
void OAIProject_feature_flags::setSetGithubStatus(const bool &set_github_status) {
    m_set_github_status = set_github_status;
    m_set_github_status_isSet = true;
}

bool OAIProject_feature_flags::is_set_github_status_Set() const{
    return m_set_github_status_isSet;
}

bool OAIProject_feature_flags::is_set_github_status_Valid() const{
    return m_set_github_status_isValid;
}

bool OAIProject_feature_flags::isTrustyBeta() const {
    return m_trusty_beta;
}
void OAIProject_feature_flags::setTrustyBeta(const bool &trusty_beta) {
    m_trusty_beta = trusty_beta;
    m_trusty_beta_isSet = true;
}

bool OAIProject_feature_flags::is_trusty_beta_Set() const{
    return m_trusty_beta_isSet;
}

bool OAIProject_feature_flags::is_trusty_beta_Valid() const{
    return m_trusty_beta_isValid;
}

bool OAIProject_feature_flags::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_fork_prs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_junit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_github_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusty_beta_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject_feature_flags::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
