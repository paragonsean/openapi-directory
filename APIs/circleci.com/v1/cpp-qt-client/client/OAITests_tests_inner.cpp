/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITests_tests_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITests_tests_inner::OAITests_tests_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITests_tests_inner::OAITests_tests_inner() {
    this->initializeModel();
}

OAITests_tests_inner::~OAITests_tests_inner() {}

void OAITests_tests_inner::initializeModel() {

    m_classname_isSet = false;
    m_classname_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_run_time_isSet = false;
    m_run_time_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAITests_tests_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITests_tests_inner::fromJsonObject(QJsonObject json) {

    m_classname_isValid = ::OpenAPI::fromJsonValue(m_classname, json[QString("classname")]);
    m_classname_isSet = !json[QString("classname")].isNull() && m_classname_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_run_time_isValid = ::OpenAPI::fromJsonValue(m_run_time, json[QString("run_time")]);
    m_run_time_isSet = !json[QString("run_time")].isNull() && m_run_time_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAITests_tests_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITests_tests_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_classname_isSet) {
        obj.insert(QString("classname"), ::OpenAPI::toJsonValue(m_classname));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_run_time_isSet) {
        obj.insert(QString("run_time"), ::OpenAPI::toJsonValue(m_run_time));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAITests_tests_inner::getClassname() const {
    return m_classname;
}
void OAITests_tests_inner::setClassname(const QString &classname) {
    m_classname = classname;
    m_classname_isSet = true;
}

bool OAITests_tests_inner::is_classname_Set() const{
    return m_classname_isSet;
}

bool OAITests_tests_inner::is_classname_Valid() const{
    return m_classname_isValid;
}

QString OAITests_tests_inner::getFile() const {
    return m_file;
}
void OAITests_tests_inner::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAITests_tests_inner::is_file_Set() const{
    return m_file_isSet;
}

bool OAITests_tests_inner::is_file_Valid() const{
    return m_file_isValid;
}

QString OAITests_tests_inner::getMessage() const {
    return m_message;
}
void OAITests_tests_inner::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITests_tests_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAITests_tests_inner::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITests_tests_inner::getName() const {
    return m_name;
}
void OAITests_tests_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITests_tests_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAITests_tests_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIStatus OAITests_tests_inner::getResult() const {
    return m_result;
}
void OAITests_tests_inner::setResult(const OAIStatus &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAITests_tests_inner::is_result_Set() const{
    return m_result_isSet;
}

bool OAITests_tests_inner::is_result_Valid() const{
    return m_result_isValid;
}

double OAITests_tests_inner::getRunTime() const {
    return m_run_time;
}
void OAITests_tests_inner::setRunTime(const double &run_time) {
    m_run_time = run_time;
    m_run_time_isSet = true;
}

bool OAITests_tests_inner::is_run_time_Set() const{
    return m_run_time_isSet;
}

bool OAITests_tests_inner::is_run_time_Valid() const{
    return m_run_time_isValid;
}

QString OAITests_tests_inner::getSource() const {
    return m_source;
}
void OAITests_tests_inner::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITests_tests_inner::is_source_Set() const{
    return m_source_isSet;
}

bool OAITests_tests_inner::is_source_Valid() const{
    return m_source_isValid;
}

bool OAITests_tests_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITests_tests_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
