/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtifact.h"
#include "OAIBuild.h"
#include "OAIBuildDetail.h"
#include "OAIBuildSummary.h"
#include "OAIEnvvar.h"
#include "OAIKey.h"
#include "OAIProject.h"
#include "OAITests.h"
#include "OAIUser.h"
#include "OAI_project__username___project__build_cache_delete_200_response.h"
#include "OAI_project__username___project__checkout_key__fingerprint__delete_200_response.h"
#include "OAI_project__username___project__post_request.h"
#include "OAI_project__username___project__ssh_key_post_default_response.h"
#include "OAI_project__username___project__ssh_key_post_request.h"
#include "OAI_project__username___project__tree__branch__post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void meGet();

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    */
    virtual void projectUsernameProjectBuildCacheDelete(const QString &username, const QString &project);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  build_num qint32 [required]
    */
    virtual void projectUsernameProjectBuildNumArtifactsGet(const QString &username, const QString &project, const qint32 &build_num);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  build_num qint32 [required]
    */
    virtual void projectUsernameProjectBuildNumCancelPost(const QString &username, const QString &project, const qint32 &build_num);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  build_num qint32 [required]
    */
    virtual void projectUsernameProjectBuildNumGet(const QString &username, const QString &project, const qint32 &build_num);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  build_num qint32 [required]
    */
    virtual void projectUsernameProjectBuildNumRetryPost(const QString &username, const QString &project, const qint32 &build_num);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  build_num qint32 [required]
    */
    virtual void projectUsernameProjectBuildNumTestsGet(const QString &username, const QString &project, const qint32 &build_num);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  fingerprint QString [required]
    */
    virtual void projectUsernameProjectCheckoutKeyFingerprintDelete(const QString &username, const QString &project, const QString &fingerprint);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  fingerprint QString [required]
    */
    virtual void projectUsernameProjectCheckoutKeyFingerprintGet(const QString &username, const QString &project, const QString &fingerprint);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    */
    virtual void projectUsernameProjectCheckoutKeyGet(const QString &username, const QString &project);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void projectUsernameProjectCheckoutKeyPost(const QString &username, const QString &project, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    */
    virtual void projectUsernameProjectEnvvarGet(const QString &username, const QString &project);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  name QString [required]
    */
    virtual void projectUsernameProjectEnvvarNameDelete(const QString &username, const QString &project, const QString &name);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  name QString [required]
    */
    virtual void projectUsernameProjectEnvvarNameGet(const QString &username, const QString &project, const QString &name);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    */
    virtual void projectUsernameProjectEnvvarPost(const QString &username, const QString &project);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void projectUsernameProjectGet(const QString &username, const QString &project, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  oai_project__username___project__post_request OAI_project__username___project__post_request [optional]
    */
    virtual void projectUsernameProjectPost(const QString &username, const QString &project, const ::OpenAPI::OptionalParam<OAI_project__username___project__post_request> &oai_project__username___project__post_request = ::OpenAPI::OptionalParam<OAI_project__username___project__post_request>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_project__username___project__ssh_key_post_request OAI_project__username___project__ssh_key_post_request [required]
    */
    virtual void projectUsernameProjectSshKeyPost(const QString &username, const QString &project, const QString &content_type, const OAI_project__username___project__ssh_key_post_request &oai_project__username___project__ssh_key_post_request);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_project__username___project__tree__branch__post_request OAI_project__username___project__tree__branch__post_request [optional]
    */
    virtual void projectUsernameProjectTreeBranchPost(const QString &username, const QString &project, const QString &branch, const ::OpenAPI::OptionalParam<OAI_project__username___project__tree__branch__post_request> &oai_project__username___project__tree__branch__post_request = ::OpenAPI::OptionalParam<OAI_project__username___project__tree__branch__post_request>());


    virtual void projectsGet();

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void recentBuildsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


    virtual void userHerokuKeyPost();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void meGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectBuildCacheDeleteCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectBuildNumArtifactsGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectBuildNumCancelPostCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectBuildNumGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectBuildNumRetryPostCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectBuildNumTestsGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectCheckoutKeyFingerprintDeleteCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectCheckoutKeyFingerprintGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectCheckoutKeyGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectCheckoutKeyPostCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectEnvvarGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectEnvvarNameDeleteCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectEnvvarNameGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectEnvvarPostCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectGetCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectPostCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectSshKeyPostCallback(OAIHttpRequestWorker *worker);
    void projectUsernameProjectTreeBranchPostCallback(OAIHttpRequestWorker *worker);
    void projectsGetCallback(OAIHttpRequestWorker *worker);
    void recentBuildsGetCallback(OAIHttpRequestWorker *worker);
    void userHerokuKeyPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void meGetSignal(OAIUser summary);
    void projectUsernameProjectBuildCacheDeleteSignal(OAI_project__username___project__build_cache_delete_200_response summary);
    void projectUsernameProjectBuildNumArtifactsGetSignal(QList<OAIArtifact> summary);
    void projectUsernameProjectBuildNumCancelPostSignal(OAIBuild summary);
    void projectUsernameProjectBuildNumGetSignal(OAIBuildDetail summary);
    void projectUsernameProjectBuildNumRetryPostSignal(OAIBuild summary);
    void projectUsernameProjectBuildNumTestsGetSignal(OAITests summary);
    void projectUsernameProjectCheckoutKeyFingerprintDeleteSignal(OAI_project__username___project__checkout_key__fingerprint__delete_200_response summary);
    void projectUsernameProjectCheckoutKeyFingerprintGetSignal(OAIKey summary);
    void projectUsernameProjectCheckoutKeyGetSignal(QList<OAIKey> summary);
    void projectUsernameProjectCheckoutKeyPostSignal(OAIKey summary);
    void projectUsernameProjectEnvvarGetSignal(QList<OAIEnvvar> summary);
    void projectUsernameProjectEnvvarNameDeleteSignal(OAI_project__username___project__checkout_key__fingerprint__delete_200_response summary);
    void projectUsernameProjectEnvvarNameGetSignal(OAIEnvvar summary);
    void projectUsernameProjectEnvvarPostSignal(OAIEnvvar summary);
    void projectUsernameProjectGetSignal(QList<OAIBuild> summary);
    void projectUsernameProjectPostSignal(OAIBuildSummary summary);
    void projectUsernameProjectSshKeyPostSignal(OAI_project__username___project__ssh_key_post_default_response summary);
    void projectUsernameProjectTreeBranchPostSignal(OAIBuild summary);
    void projectsGetSignal(QList<OAIProject> summary);
    void recentBuildsGetSignal(QList<OAIBuild> summary);
    void userHerokuKeyPostSignal();


    void meGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void projectUsernameProjectBuildCacheDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_project__username___project__build_cache_delete_200_response summary);
    void projectUsernameProjectBuildNumArtifactsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIArtifact> summary);
    void projectUsernameProjectBuildNumCancelPostSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void projectUsernameProjectBuildNumGetSignalFull(OAIHttpRequestWorker *worker, OAIBuildDetail summary);
    void projectUsernameProjectBuildNumRetryPostSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void projectUsernameProjectBuildNumTestsGetSignalFull(OAIHttpRequestWorker *worker, OAITests summary);
    void projectUsernameProjectCheckoutKeyFingerprintDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_project__username___project__checkout_key__fingerprint__delete_200_response summary);
    void projectUsernameProjectCheckoutKeyFingerprintGetSignalFull(OAIHttpRequestWorker *worker, OAIKey summary);
    void projectUsernameProjectCheckoutKeyGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIKey> summary);
    void projectUsernameProjectCheckoutKeyPostSignalFull(OAIHttpRequestWorker *worker, OAIKey summary);
    void projectUsernameProjectEnvvarGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnvvar> summary);
    void projectUsernameProjectEnvvarNameDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_project__username___project__checkout_key__fingerprint__delete_200_response summary);
    void projectUsernameProjectEnvvarNameGetSignalFull(OAIHttpRequestWorker *worker, OAIEnvvar summary);
    void projectUsernameProjectEnvvarPostSignalFull(OAIHttpRequestWorker *worker, OAIEnvvar summary);
    void projectUsernameProjectGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBuild> summary);
    void projectUsernameProjectPostSignalFull(OAIHttpRequestWorker *worker, OAIBuildSummary summary);
    void projectUsernameProjectSshKeyPostSignalFull(OAIHttpRequestWorker *worker, OAI_project__username___project__ssh_key_post_default_response summary);
    void projectUsernameProjectTreeBranchPostSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void projectsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void recentBuildsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBuild> summary);
    void userHerokuKeyPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use meGetSignalError() instead")
    void meGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildCacheDeleteSignalError() instead")
    void projectUsernameProjectBuildCacheDeleteSignalE(OAI_project__username___project__build_cache_delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildCacheDeleteSignalError(OAI_project__username___project__build_cache_delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumArtifactsGetSignalError() instead")
    void projectUsernameProjectBuildNumArtifactsGetSignalE(QList<OAIArtifact> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumArtifactsGetSignalError(QList<OAIArtifact> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumCancelPostSignalError() instead")
    void projectUsernameProjectBuildNumCancelPostSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumCancelPostSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumGetSignalError() instead")
    void projectUsernameProjectBuildNumGetSignalE(OAIBuildDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumGetSignalError(OAIBuildDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumRetryPostSignalError() instead")
    void projectUsernameProjectBuildNumRetryPostSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumRetryPostSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumTestsGetSignalError() instead")
    void projectUsernameProjectBuildNumTestsGetSignalE(OAITests summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumTestsGetSignalError(OAITests summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectCheckoutKeyFingerprintDeleteSignalError() instead")
    void projectUsernameProjectCheckoutKeyFingerprintDeleteSignalE(OAI_project__username___project__checkout_key__fingerprint__delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectCheckoutKeyFingerprintDeleteSignalError(OAI_project__username___project__checkout_key__fingerprint__delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectCheckoutKeyFingerprintGetSignalError() instead")
    void projectUsernameProjectCheckoutKeyFingerprintGetSignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectCheckoutKeyFingerprintGetSignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectCheckoutKeyGetSignalError() instead")
    void projectUsernameProjectCheckoutKeyGetSignalE(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectCheckoutKeyGetSignalError(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectCheckoutKeyPostSignalError() instead")
    void projectUsernameProjectCheckoutKeyPostSignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectCheckoutKeyPostSignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectEnvvarGetSignalError() instead")
    void projectUsernameProjectEnvvarGetSignalE(QList<OAIEnvvar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectEnvvarGetSignalError(QList<OAIEnvvar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectEnvvarNameDeleteSignalError() instead")
    void projectUsernameProjectEnvvarNameDeleteSignalE(OAI_project__username___project__checkout_key__fingerprint__delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectEnvvarNameDeleteSignalError(OAI_project__username___project__checkout_key__fingerprint__delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectEnvvarNameGetSignalError() instead")
    void projectUsernameProjectEnvvarNameGetSignalE(OAIEnvvar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectEnvvarNameGetSignalError(OAIEnvvar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectEnvvarPostSignalError() instead")
    void projectUsernameProjectEnvvarPostSignalE(OAIEnvvar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectEnvvarPostSignalError(OAIEnvvar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectGetSignalError() instead")
    void projectUsernameProjectGetSignalE(QList<OAIBuild> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectGetSignalError(QList<OAIBuild> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectPostSignalError() instead")
    void projectUsernameProjectPostSignalE(OAIBuildSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectPostSignalError(OAIBuildSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectSshKeyPostSignalError() instead")
    void projectUsernameProjectSshKeyPostSignalE(OAI_project__username___project__ssh_key_post_default_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectSshKeyPostSignalError(OAI_project__username___project__ssh_key_post_default_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectTreeBranchPostSignalError() instead")
    void projectUsernameProjectTreeBranchPostSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectTreeBranchPostSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSignalError() instead")
    void projectsGetSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recentBuildsGetSignalError() instead")
    void recentBuildsGetSignalE(QList<OAIBuild> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recentBuildsGetSignalError(QList<OAIBuild> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userHerokuKeyPostSignalError() instead")
    void userHerokuKeyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userHerokuKeyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use meGetSignalErrorFull() instead")
    void meGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildCacheDeleteSignalErrorFull() instead")
    void projectUsernameProjectBuildCacheDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildCacheDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumArtifactsGetSignalErrorFull() instead")
    void projectUsernameProjectBuildNumArtifactsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumArtifactsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumCancelPostSignalErrorFull() instead")
    void projectUsernameProjectBuildNumCancelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumCancelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumGetSignalErrorFull() instead")
    void projectUsernameProjectBuildNumGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumRetryPostSignalErrorFull() instead")
    void projectUsernameProjectBuildNumRetryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumRetryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectBuildNumTestsGetSignalErrorFull() instead")
    void projectUsernameProjectBuildNumTestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectBuildNumTestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectCheckoutKeyFingerprintDeleteSignalErrorFull() instead")
    void projectUsernameProjectCheckoutKeyFingerprintDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectCheckoutKeyFingerprintDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectCheckoutKeyFingerprintGetSignalErrorFull() instead")
    void projectUsernameProjectCheckoutKeyFingerprintGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectCheckoutKeyFingerprintGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectCheckoutKeyGetSignalErrorFull() instead")
    void projectUsernameProjectCheckoutKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectCheckoutKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectCheckoutKeyPostSignalErrorFull() instead")
    void projectUsernameProjectCheckoutKeyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectCheckoutKeyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectEnvvarGetSignalErrorFull() instead")
    void projectUsernameProjectEnvvarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectEnvvarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectEnvvarNameDeleteSignalErrorFull() instead")
    void projectUsernameProjectEnvvarNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectEnvvarNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectEnvvarNameGetSignalErrorFull() instead")
    void projectUsernameProjectEnvvarNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectEnvvarNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectEnvvarPostSignalErrorFull() instead")
    void projectUsernameProjectEnvvarPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectEnvvarPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectGetSignalErrorFull() instead")
    void projectUsernameProjectGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectPostSignalErrorFull() instead")
    void projectUsernameProjectPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectSshKeyPostSignalErrorFull() instead")
    void projectUsernameProjectSshKeyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectSshKeyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectUsernameProjectTreeBranchPostSignalErrorFull() instead")
    void projectUsernameProjectTreeBranchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectUsernameProjectTreeBranchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSignalErrorFull() instead")
    void projectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recentBuildsGetSignalErrorFull() instead")
    void recentBuildsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recentBuildsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userHerokuKeyPostSignalErrorFull() instead")
    void userHerokuKeyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userHerokuKeyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
