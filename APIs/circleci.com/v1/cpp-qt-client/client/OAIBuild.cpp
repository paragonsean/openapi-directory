/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild::OAIBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild::OAIBuild() {
    this->initializeModel();
}

OAIBuild::~OAIBuild() {}

void OAIBuild::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_build_time_millis_isSet = false;
    m_build_time_millis_isValid = false;

    m_build_url_isSet = false;
    m_build_url_isValid = false;

    m_committer_email_isSet = false;
    m_committer_email_isValid = false;

    m_committer_name_isSet = false;
    m_committer_name_isValid = false;

    m_dont_build_isSet = false;
    m_dont_build_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_queued_at_isSet = false;
    m_queued_at_isValid = false;

    m_reponame_isSet = false;
    m_reponame_isValid = false;

    m_retry_of_isSet = false;
    m_retry_of_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_stop_time_isSet = false;
    m_stop_time_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_vcs_url_isSet = false;
    m_vcs_url_isValid = false;

    m_why_isSet = false;
    m_why_isValid = false;
}

void OAIBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_build_time_millis_isValid = ::OpenAPI::fromJsonValue(m_build_time_millis, json[QString("build_time_millis")]);
    m_build_time_millis_isSet = !json[QString("build_time_millis")].isNull() && m_build_time_millis_isValid;

    m_build_url_isValid = ::OpenAPI::fromJsonValue(m_build_url, json[QString("build_url")]);
    m_build_url_isSet = !json[QString("build_url")].isNull() && m_build_url_isValid;

    m_committer_email_isValid = ::OpenAPI::fromJsonValue(m_committer_email, json[QString("committer_email")]);
    m_committer_email_isSet = !json[QString("committer_email")].isNull() && m_committer_email_isValid;

    m_committer_name_isValid = ::OpenAPI::fromJsonValue(m_committer_name, json[QString("committer_name")]);
    m_committer_name_isSet = !json[QString("committer_name")].isNull() && m_committer_name_isValid;

    m_dont_build_isValid = ::OpenAPI::fromJsonValue(m_dont_build, json[QString("dont_build")]);
    m_dont_build_isSet = !json[QString("dont_build")].isNull() && m_dont_build_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("lifecycle")]);
    m_lifecycle_isSet = !json[QString("lifecycle")].isNull() && m_lifecycle_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_queued_at_isValid = ::OpenAPI::fromJsonValue(m_queued_at, json[QString("queued_at")]);
    m_queued_at_isSet = !json[QString("queued_at")].isNull() && m_queued_at_isValid;

    m_reponame_isValid = ::OpenAPI::fromJsonValue(m_reponame, json[QString("reponame")]);
    m_reponame_isSet = !json[QString("reponame")].isNull() && m_reponame_isValid;

    m_retry_of_isValid = ::OpenAPI::fromJsonValue(m_retry_of, json[QString("retry_of")]);
    m_retry_of_isSet = !json[QString("retry_of")].isNull() && m_retry_of_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_stop_time_isValid = ::OpenAPI::fromJsonValue(m_stop_time, json[QString("stop_time")]);
    m_stop_time_isSet = !json[QString("stop_time")].isNull() && m_stop_time_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_vcs_url_isValid = ::OpenAPI::fromJsonValue(m_vcs_url, json[QString("vcs_url")]);
    m_vcs_url_isSet = !json[QString("vcs_url")].isNull() && m_vcs_url_isValid;

    m_why_isValid = ::OpenAPI::fromJsonValue(m_why, json[QString("why")]);
    m_why_isSet = !json[QString("why")].isNull() && m_why_isValid;
}

QString OAIBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_build_time_millis_isSet) {
        obj.insert(QString("build_time_millis"), ::OpenAPI::toJsonValue(m_build_time_millis));
    }
    if (m_build_url_isSet) {
        obj.insert(QString("build_url"), ::OpenAPI::toJsonValue(m_build_url));
    }
    if (m_committer_email_isSet) {
        obj.insert(QString("committer_email"), ::OpenAPI::toJsonValue(m_committer_email));
    }
    if (m_committer_name_isSet) {
        obj.insert(QString("committer_name"), ::OpenAPI::toJsonValue(m_committer_name));
    }
    if (m_dont_build_isSet) {
        obj.insert(QString("dont_build"), ::OpenAPI::toJsonValue(m_dont_build));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_previous.isSet()) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    if (m_queued_at_isSet) {
        obj.insert(QString("queued_at"), ::OpenAPI::toJsonValue(m_queued_at));
    }
    if (m_reponame_isSet) {
        obj.insert(QString("reponame"), ::OpenAPI::toJsonValue(m_reponame));
    }
    if (m_retry_of_isSet) {
        obj.insert(QString("retry_of"), ::OpenAPI::toJsonValue(m_retry_of));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_stop_time_isSet) {
        obj.insert(QString("stop_time"), ::OpenAPI::toJsonValue(m_stop_time));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_vcs_url_isSet) {
        obj.insert(QString("vcs_url"), ::OpenAPI::toJsonValue(m_vcs_url));
    }
    if (m_why_isSet) {
        obj.insert(QString("why"), ::OpenAPI::toJsonValue(m_why));
    }
    return obj;
}

QString OAIBuild::getBody() const {
    return m_body;
}
void OAIBuild::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIBuild::is_body_Set() const{
    return m_body_isSet;
}

bool OAIBuild::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIBuild::getBranch() const {
    return m_branch;
}
void OAIBuild::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIBuild::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIBuild::is_branch_Valid() const{
    return m_branch_isValid;
}

qint32 OAIBuild::getBuildTimeMillis() const {
    return m_build_time_millis;
}
void OAIBuild::setBuildTimeMillis(const qint32 &build_time_millis) {
    m_build_time_millis = build_time_millis;
    m_build_time_millis_isSet = true;
}

bool OAIBuild::is_build_time_millis_Set() const{
    return m_build_time_millis_isSet;
}

bool OAIBuild::is_build_time_millis_Valid() const{
    return m_build_time_millis_isValid;
}

QString OAIBuild::getBuildUrl() const {
    return m_build_url;
}
void OAIBuild::setBuildUrl(const QString &build_url) {
    m_build_url = build_url;
    m_build_url_isSet = true;
}

bool OAIBuild::is_build_url_Set() const{
    return m_build_url_isSet;
}

bool OAIBuild::is_build_url_Valid() const{
    return m_build_url_isValid;
}

QString OAIBuild::getCommitterEmail() const {
    return m_committer_email;
}
void OAIBuild::setCommitterEmail(const QString &committer_email) {
    m_committer_email = committer_email;
    m_committer_email_isSet = true;
}

bool OAIBuild::is_committer_email_Set() const{
    return m_committer_email_isSet;
}

bool OAIBuild::is_committer_email_Valid() const{
    return m_committer_email_isValid;
}

QString OAIBuild::getCommitterName() const {
    return m_committer_name;
}
void OAIBuild::setCommitterName(const QString &committer_name) {
    m_committer_name = committer_name;
    m_committer_name_isSet = true;
}

bool OAIBuild::is_committer_name_Set() const{
    return m_committer_name_isSet;
}

bool OAIBuild::is_committer_name_Valid() const{
    return m_committer_name_isValid;
}

QString OAIBuild::getDontBuild() const {
    return m_dont_build;
}
void OAIBuild::setDontBuild(const QString &dont_build) {
    m_dont_build = dont_build;
    m_dont_build_isSet = true;
}

bool OAIBuild::is_dont_build_Set() const{
    return m_dont_build_isSet;
}

bool OAIBuild::is_dont_build_Valid() const{
    return m_dont_build_isValid;
}

OAILifecycle OAIBuild::getLifecycle() const {
    return m_lifecycle;
}
void OAIBuild::setLifecycle(const OAILifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIBuild::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIBuild::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

OAIPreviousBuild OAIBuild::getPrevious() const {
    return m_previous;
}
void OAIBuild::setPrevious(const OAIPreviousBuild &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAIBuild::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAIBuild::is_previous_Valid() const{
    return m_previous_isValid;
}

QDateTime OAIBuild::getQueuedAt() const {
    return m_queued_at;
}
void OAIBuild::setQueuedAt(const QDateTime &queued_at) {
    m_queued_at = queued_at;
    m_queued_at_isSet = true;
}

bool OAIBuild::is_queued_at_Set() const{
    return m_queued_at_isSet;
}

bool OAIBuild::is_queued_at_Valid() const{
    return m_queued_at_isValid;
}

QString OAIBuild::getReponame() const {
    return m_reponame;
}
void OAIBuild::setReponame(const QString &reponame) {
    m_reponame = reponame;
    m_reponame_isSet = true;
}

bool OAIBuild::is_reponame_Set() const{
    return m_reponame_isSet;
}

bool OAIBuild::is_reponame_Valid() const{
    return m_reponame_isValid;
}

qint32 OAIBuild::getRetryOf() const {
    return m_retry_of;
}
void OAIBuild::setRetryOf(const qint32 &retry_of) {
    m_retry_of = retry_of;
    m_retry_of_isSet = true;
}

bool OAIBuild::is_retry_of_Set() const{
    return m_retry_of_isSet;
}

bool OAIBuild::is_retry_of_Valid() const{
    return m_retry_of_isValid;
}

QDateTime OAIBuild::getStartTime() const {
    return m_start_time;
}
void OAIBuild::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBuild::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBuild::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIBuild::getStopTime() const {
    return m_stop_time;
}
void OAIBuild::setStopTime(const QDateTime &stop_time) {
    m_stop_time = stop_time;
    m_stop_time_isSet = true;
}

bool OAIBuild::is_stop_time_Set() const{
    return m_stop_time_isSet;
}

bool OAIBuild::is_stop_time_Valid() const{
    return m_stop_time_isValid;
}

QString OAIBuild::getSubject() const {
    return m_subject;
}
void OAIBuild::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIBuild::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIBuild::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIBuild::getUsername() const {
    return m_username;
}
void OAIBuild::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIBuild::is_username_Set() const{
    return m_username_isSet;
}

bool OAIBuild::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIBuild::getVcsUrl() const {
    return m_vcs_url;
}
void OAIBuild::setVcsUrl(const QString &vcs_url) {
    m_vcs_url = vcs_url;
    m_vcs_url_isSet = true;
}

bool OAIBuild::is_vcs_url_Set() const{
    return m_vcs_url_isSet;
}

bool OAIBuild::is_vcs_url_Valid() const{
    return m_vcs_url_isValid;
}

QString OAIBuild::getWhy() const {
    return m_why;
}
void OAIBuild::setWhy(const QString &why) {
    m_why = why;
    m_why_isSet = true;
}

bool OAIBuild::is_why_Set() const{
    return m_why_isSet;
}

bool OAIBuild::is_why_Valid() const{
    return m_why_isValid;
}

bool OAIBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reponame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_why_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
