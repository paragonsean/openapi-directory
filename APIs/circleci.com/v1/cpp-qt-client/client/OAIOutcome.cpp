/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutcome.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutcome::OAIOutcome(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutcome::OAIOutcome() {
    this->initializeModel();
}

OAIOutcome::~OAIOutcome() {}

void OAIOutcome::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOutcome::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOutcome::fromJson(QString jsonString) {
    
    if ( jsonString.compare("canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutcome::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("infrastructure_fail", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutcome::INFRASTRUCTURE_FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("timedout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutcome::TIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutcome::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("no_tests", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutcome::NO_TESTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutcome::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOutcome::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOutcome::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOutcome::CANCELED:
            val = "canceled";
            break;
        case eOAIOutcome::INFRASTRUCTURE_FAIL:
            val = "infrastructure_fail";
            break;
        case eOAIOutcome::TIMEDOUT:
            val = "timedout";
            break;
        case eOAIOutcome::FAILED:
            val = "failed";
            break;
        case eOAIOutcome::NO_TESTS:
            val = "no_tests";
            break;
        case eOAIOutcome::SUCCESS:
            val = "success";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOutcome::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOutcome::eOAIOutcome OAIOutcome::getValue() const {
    return m_value;
}

void OAIOutcome::setValue(const OAIOutcome::eOAIOutcome& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOutcome::isSet() const {
    
    return m_value_isSet;
}

bool OAIOutcome::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
