/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_all_emails_isSet = false;
    m_all_emails_isValid = false;

    m_analytics_id_isSet = false;
    m_analytics_id_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_basic_email_prefs_isSet = false;
    m_basic_email_prefs_isValid = false;

    m_bitbucket_isSet = false;
    m_bitbucket_isValid = false;

    m_bitbucket_authorized_isSet = false;
    m_bitbucket_authorized_isValid = false;

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_days_left_in_trial_isSet = false;
    m_days_left_in_trial_isValid = false;

    m_dev_admin_isSet = false;
    m_dev_admin_isValid = false;

    m_enrolled_betas_isSet = false;
    m_enrolled_betas_isValid = false;

    m_github_id_isSet = false;
    m_github_id_isValid = false;

    m_github_oauth_scopes_isSet = false;
    m_github_oauth_scopes_isValid = false;

    m_gravatar_id_isSet = false;
    m_gravatar_id_isValid = false;

    m_heroku_api_key_isSet = false;
    m_heroku_api_key_isValid = false;

    m_in_beta_program_isSet = false;
    m_in_beta_program_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_prefs_isSet = false;
    m_organization_prefs_isValid = false;

    m_parallelism_isSet = false;
    m_parallelism_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_pusher_id_isSet = false;
    m_pusher_id_isValid = false;

    m_selected_email_isSet = false;
    m_selected_email_isValid = false;

    m_sign_in_count_isSet = false;
    m_sign_in_count_isValid = false;

    m_trial_end_isSet = false;
    m_trial_end_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_all_emails_isValid = ::OpenAPI::fromJsonValue(m_all_emails, json[QString("all_emails")]);
    m_all_emails_isSet = !json[QString("all_emails")].isNull() && m_all_emails_isValid;

    m_analytics_id_isValid = ::OpenAPI::fromJsonValue(m_analytics_id, json[QString("analytics_id")]);
    m_analytics_id_isSet = !json[QString("analytics_id")].isNull() && m_analytics_id_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_basic_email_prefs_isValid = ::OpenAPI::fromJsonValue(m_basic_email_prefs, json[QString("basic_email_prefs")]);
    m_basic_email_prefs_isSet = !json[QString("basic_email_prefs")].isNull() && m_basic_email_prefs_isValid;

    m_bitbucket_isValid = ::OpenAPI::fromJsonValue(m_bitbucket, json[QString("bitbucket")]);
    m_bitbucket_isSet = !json[QString("bitbucket")].isNull() && m_bitbucket_isValid;

    m_bitbucket_authorized_isValid = ::OpenAPI::fromJsonValue(m_bitbucket_authorized, json[QString("bitbucket_authorized")]);
    m_bitbucket_authorized_isSet = !json[QString("bitbucket_authorized")].isNull() && m_bitbucket_authorized_isValid;

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_days_left_in_trial_isValid = ::OpenAPI::fromJsonValue(m_days_left_in_trial, json[QString("days_left_in_trial")]);
    m_days_left_in_trial_isSet = !json[QString("days_left_in_trial")].isNull() && m_days_left_in_trial_isValid;

    m_dev_admin_isValid = ::OpenAPI::fromJsonValue(m_dev_admin, json[QString("dev_admin")]);
    m_dev_admin_isSet = !json[QString("dev_admin")].isNull() && m_dev_admin_isValid;

    m_enrolled_betas_isValid = ::OpenAPI::fromJsonValue(m_enrolled_betas, json[QString("enrolled_betas")]);
    m_enrolled_betas_isSet = !json[QString("enrolled_betas")].isNull() && m_enrolled_betas_isValid;

    m_github_id_isValid = ::OpenAPI::fromJsonValue(m_github_id, json[QString("github_id")]);
    m_github_id_isSet = !json[QString("github_id")].isNull() && m_github_id_isValid;

    m_github_oauth_scopes_isValid = ::OpenAPI::fromJsonValue(m_github_oauth_scopes, json[QString("github_oauth_scopes")]);
    m_github_oauth_scopes_isSet = !json[QString("github_oauth_scopes")].isNull() && m_github_oauth_scopes_isValid;

    m_gravatar_id_isValid = ::OpenAPI::fromJsonValue(m_gravatar_id, json[QString("gravatar_id")]);
    m_gravatar_id_isSet = !json[QString("gravatar_id")].isNull() && m_gravatar_id_isValid;

    m_heroku_api_key_isValid = ::OpenAPI::fromJsonValue(m_heroku_api_key, json[QString("heroku_api_key")]);
    m_heroku_api_key_isSet = !json[QString("heroku_api_key")].isNull() && m_heroku_api_key_isValid;

    m_in_beta_program_isValid = ::OpenAPI::fromJsonValue(m_in_beta_program, json[QString("in_beta_program")]);
    m_in_beta_program_isSet = !json[QString("in_beta_program")].isNull() && m_in_beta_program_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_prefs_isValid = ::OpenAPI::fromJsonValue(m_organization_prefs, json[QString("organization_prefs")]);
    m_organization_prefs_isSet = !json[QString("organization_prefs")].isNull() && m_organization_prefs_isValid;

    m_parallelism_isValid = ::OpenAPI::fromJsonValue(m_parallelism, json[QString("parallelism")]);
    m_parallelism_isSet = !json[QString("parallelism")].isNull() && m_parallelism_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_pusher_id_isValid = ::OpenAPI::fromJsonValue(m_pusher_id, json[QString("pusher_id")]);
    m_pusher_id_isSet = !json[QString("pusher_id")].isNull() && m_pusher_id_isValid;

    m_selected_email_isValid = ::OpenAPI::fromJsonValue(m_selected_email, json[QString("selected_email")]);
    m_selected_email_isSet = !json[QString("selected_email")].isNull() && m_selected_email_isValid;

    m_sign_in_count_isValid = ::OpenAPI::fromJsonValue(m_sign_in_count, json[QString("sign_in_count")]);
    m_sign_in_count_isSet = !json[QString("sign_in_count")].isNull() && m_sign_in_count_isValid;

    m_trial_end_isValid = ::OpenAPI::fromJsonValue(m_trial_end, json[QString("trial_end")]);
    m_trial_end_isSet = !json[QString("trial_end")].isNull() && m_trial_end_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_all_emails.size() > 0) {
        obj.insert(QString("all_emails"), ::OpenAPI::toJsonValue(m_all_emails));
    }
    if (m_analytics_id_isSet) {
        obj.insert(QString("analytics_id"), ::OpenAPI::toJsonValue(m_analytics_id));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_basic_email_prefs_isSet) {
        obj.insert(QString("basic_email_prefs"), ::OpenAPI::toJsonValue(m_basic_email_prefs));
    }
    if (m_bitbucket_isSet) {
        obj.insert(QString("bitbucket"), ::OpenAPI::toJsonValue(m_bitbucket));
    }
    if (m_bitbucket_authorized_isSet) {
        obj.insert(QString("bitbucket_authorized"), ::OpenAPI::toJsonValue(m_bitbucket_authorized));
    }
    if (m_containers_isSet) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_days_left_in_trial_isSet) {
        obj.insert(QString("days_left_in_trial"), ::OpenAPI::toJsonValue(m_days_left_in_trial));
    }
    if (m_dev_admin_isSet) {
        obj.insert(QString("dev_admin"), ::OpenAPI::toJsonValue(m_dev_admin));
    }
    if (m_enrolled_betas.size() > 0) {
        obj.insert(QString("enrolled_betas"), ::OpenAPI::toJsonValue(m_enrolled_betas));
    }
    if (m_github_id_isSet) {
        obj.insert(QString("github_id"), ::OpenAPI::toJsonValue(m_github_id));
    }
    if (m_github_oauth_scopes.size() > 0) {
        obj.insert(QString("github_oauth_scopes"), ::OpenAPI::toJsonValue(m_github_oauth_scopes));
    }
    if (m_gravatar_id_isSet) {
        obj.insert(QString("gravatar_id"), ::OpenAPI::toJsonValue(m_gravatar_id));
    }
    if (m_heroku_api_key_isSet) {
        obj.insert(QString("heroku_api_key"), ::OpenAPI::toJsonValue(m_heroku_api_key));
    }
    if (m_in_beta_program_isSet) {
        obj.insert(QString("in_beta_program"), ::OpenAPI::toJsonValue(m_in_beta_program));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_prefs_isSet) {
        obj.insert(QString("organization_prefs"), ::OpenAPI::toJsonValue(m_organization_prefs));
    }
    if (m_parallelism_isSet) {
        obj.insert(QString("parallelism"), ::OpenAPI::toJsonValue(m_parallelism));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_projects_isSet) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_pusher_id_isSet) {
        obj.insert(QString("pusher_id"), ::OpenAPI::toJsonValue(m_pusher_id));
    }
    if (m_selected_email_isSet) {
        obj.insert(QString("selected_email"), ::OpenAPI::toJsonValue(m_selected_email));
    }
    if (m_sign_in_count_isSet) {
        obj.insert(QString("sign_in_count"), ::OpenAPI::toJsonValue(m_sign_in_count));
    }
    if (m_trial_end_isSet) {
        obj.insert(QString("trial_end"), ::OpenAPI::toJsonValue(m_trial_end));
    }
    return obj;
}

bool OAIUser::isAdmin() const {
    return m_admin;
}
void OAIUser::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIUser::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIUser::is_admin_Valid() const{
    return m_admin_isValid;
}

QList<QString> OAIUser::getAllEmails() const {
    return m_all_emails;
}
void OAIUser::setAllEmails(const QList<QString> &all_emails) {
    m_all_emails = all_emails;
    m_all_emails_isSet = true;
}

bool OAIUser::is_all_emails_Set() const{
    return m_all_emails_isSet;
}

bool OAIUser::is_all_emails_Valid() const{
    return m_all_emails_isValid;
}

QString OAIUser::getAnalyticsId() const {
    return m_analytics_id;
}
void OAIUser::setAnalyticsId(const QString &analytics_id) {
    m_analytics_id = analytics_id;
    m_analytics_id_isSet = true;
}

bool OAIUser::is_analytics_id_Set() const{
    return m_analytics_id_isSet;
}

bool OAIUser::is_analytics_id_Valid() const{
    return m_analytics_id_isValid;
}

QString OAIUser::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIUser::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIUser::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIUser::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIUser::getBasicEmailPrefs() const {
    return m_basic_email_prefs;
}
void OAIUser::setBasicEmailPrefs(const QString &basic_email_prefs) {
    m_basic_email_prefs = basic_email_prefs;
    m_basic_email_prefs_isSet = true;
}

bool OAIUser::is_basic_email_prefs_Set() const{
    return m_basic_email_prefs_isSet;
}

bool OAIUser::is_basic_email_prefs_Valid() const{
    return m_basic_email_prefs_isValid;
}

qint32 OAIUser::getBitbucket() const {
    return m_bitbucket;
}
void OAIUser::setBitbucket(const qint32 &bitbucket) {
    m_bitbucket = bitbucket;
    m_bitbucket_isSet = true;
}

bool OAIUser::is_bitbucket_Set() const{
    return m_bitbucket_isSet;
}

bool OAIUser::is_bitbucket_Valid() const{
    return m_bitbucket_isValid;
}

bool OAIUser::isBitbucketAuthorized() const {
    return m_bitbucket_authorized;
}
void OAIUser::setBitbucketAuthorized(const bool &bitbucket_authorized) {
    m_bitbucket_authorized = bitbucket_authorized;
    m_bitbucket_authorized_isSet = true;
}

bool OAIUser::is_bitbucket_authorized_Set() const{
    return m_bitbucket_authorized_isSet;
}

bool OAIUser::is_bitbucket_authorized_Valid() const{
    return m_bitbucket_authorized_isValid;
}

qint32 OAIUser::getContainers() const {
    return m_containers;
}
void OAIUser::setContainers(const qint32 &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIUser::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIUser::is_containers_Valid() const{
    return m_containers_isValid;
}

QDateTime OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIUser::getDaysLeftInTrial() const {
    return m_days_left_in_trial;
}
void OAIUser::setDaysLeftInTrial(const qint32 &days_left_in_trial) {
    m_days_left_in_trial = days_left_in_trial;
    m_days_left_in_trial_isSet = true;
}

bool OAIUser::is_days_left_in_trial_Set() const{
    return m_days_left_in_trial_isSet;
}

bool OAIUser::is_days_left_in_trial_Valid() const{
    return m_days_left_in_trial_isValid;
}

bool OAIUser::isDevAdmin() const {
    return m_dev_admin;
}
void OAIUser::setDevAdmin(const bool &dev_admin) {
    m_dev_admin = dev_admin;
    m_dev_admin_isSet = true;
}

bool OAIUser::is_dev_admin_Set() const{
    return m_dev_admin_isSet;
}

bool OAIUser::is_dev_admin_Valid() const{
    return m_dev_admin_isValid;
}

QList<QString> OAIUser::getEnrolledBetas() const {
    return m_enrolled_betas;
}
void OAIUser::setEnrolledBetas(const QList<QString> &enrolled_betas) {
    m_enrolled_betas = enrolled_betas;
    m_enrolled_betas_isSet = true;
}

bool OAIUser::is_enrolled_betas_Set() const{
    return m_enrolled_betas_isSet;
}

bool OAIUser::is_enrolled_betas_Valid() const{
    return m_enrolled_betas_isValid;
}

qint32 OAIUser::getGithubId() const {
    return m_github_id;
}
void OAIUser::setGithubId(const qint32 &github_id) {
    m_github_id = github_id;
    m_github_id_isSet = true;
}

bool OAIUser::is_github_id_Set() const{
    return m_github_id_isSet;
}

bool OAIUser::is_github_id_Valid() const{
    return m_github_id_isValid;
}

QList<QString> OAIUser::getGithubOauthScopes() const {
    return m_github_oauth_scopes;
}
void OAIUser::setGithubOauthScopes(const QList<QString> &github_oauth_scopes) {
    m_github_oauth_scopes = github_oauth_scopes;
    m_github_oauth_scopes_isSet = true;
}

bool OAIUser::is_github_oauth_scopes_Set() const{
    return m_github_oauth_scopes_isSet;
}

bool OAIUser::is_github_oauth_scopes_Valid() const{
    return m_github_oauth_scopes_isValid;
}

qint32 OAIUser::getGravatarId() const {
    return m_gravatar_id;
}
void OAIUser::setGravatarId(const qint32 &gravatar_id) {
    m_gravatar_id = gravatar_id;
    m_gravatar_id_isSet = true;
}

bool OAIUser::is_gravatar_id_Set() const{
    return m_gravatar_id_isSet;
}

bool OAIUser::is_gravatar_id_Valid() const{
    return m_gravatar_id_isValid;
}

QString OAIUser::getHerokuApiKey() const {
    return m_heroku_api_key;
}
void OAIUser::setHerokuApiKey(const QString &heroku_api_key) {
    m_heroku_api_key = heroku_api_key;
    m_heroku_api_key_isSet = true;
}

bool OAIUser::is_heroku_api_key_Set() const{
    return m_heroku_api_key_isSet;
}

bool OAIUser::is_heroku_api_key_Valid() const{
    return m_heroku_api_key_isValid;
}

bool OAIUser::isInBetaProgram() const {
    return m_in_beta_program;
}
void OAIUser::setInBetaProgram(const bool &in_beta_program) {
    m_in_beta_program = in_beta_program;
    m_in_beta_program_isSet = true;
}

bool OAIUser::is_in_beta_program_Set() const{
    return m_in_beta_program_isSet;
}

bool OAIUser::is_in_beta_program_Valid() const{
    return m_in_beta_program_isValid;
}

QString OAIUser::getLogin() const {
    return m_login;
}
void OAIUser::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIUser::is_login_Set() const{
    return m_login_isSet;
}

bool OAIUser::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIUser::getOrganizationPrefs() const {
    return m_organization_prefs;
}
void OAIUser::setOrganizationPrefs(const OAIObject &organization_prefs) {
    m_organization_prefs = organization_prefs;
    m_organization_prefs_isSet = true;
}

bool OAIUser::is_organization_prefs_Set() const{
    return m_organization_prefs_isSet;
}

bool OAIUser::is_organization_prefs_Valid() const{
    return m_organization_prefs_isValid;
}

qint32 OAIUser::getParallelism() const {
    return m_parallelism;
}
void OAIUser::setParallelism(const qint32 &parallelism) {
    m_parallelism = parallelism;
    m_parallelism_isSet = true;
}

bool OAIUser::is_parallelism_Set() const{
    return m_parallelism_isSet;
}

bool OAIUser::is_parallelism_Valid() const{
    return m_parallelism_isValid;
}

QString OAIUser::getPlan() const {
    return m_plan;
}
void OAIUser::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIUser::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIUser::is_plan_Valid() const{
    return m_plan_isValid;
}

OAIObject OAIUser::getProjects() const {
    return m_projects;
}
void OAIUser::setProjects(const OAIObject &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIUser::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIUser::is_projects_Valid() const{
    return m_projects_isValid;
}

QString OAIUser::getPusherId() const {
    return m_pusher_id;
}
void OAIUser::setPusherId(const QString &pusher_id) {
    m_pusher_id = pusher_id;
    m_pusher_id_isSet = true;
}

bool OAIUser::is_pusher_id_Set() const{
    return m_pusher_id_isSet;
}

bool OAIUser::is_pusher_id_Valid() const{
    return m_pusher_id_isValid;
}

QString OAIUser::getSelectedEmail() const {
    return m_selected_email;
}
void OAIUser::setSelectedEmail(const QString &selected_email) {
    m_selected_email = selected_email;
    m_selected_email_isSet = true;
}

bool OAIUser::is_selected_email_Set() const{
    return m_selected_email_isSet;
}

bool OAIUser::is_selected_email_Valid() const{
    return m_selected_email_isValid;
}

qint32 OAIUser::getSignInCount() const {
    return m_sign_in_count;
}
void OAIUser::setSignInCount(const qint32 &sign_in_count) {
    m_sign_in_count = sign_in_count;
    m_sign_in_count_isSet = true;
}

bool OAIUser::is_sign_in_count_Set() const{
    return m_sign_in_count_isSet;
}

bool OAIUser::is_sign_in_count_Valid() const{
    return m_sign_in_count_isValid;
}

QDateTime OAIUser::getTrialEnd() const {
    return m_trial_end;
}
void OAIUser::setTrialEnd(const QDateTime &trial_end) {
    m_trial_end = trial_end;
    m_trial_end_isSet = true;
}

bool OAIUser::is_trial_end_Set() const{
    return m_trial_end_isSet;
}

bool OAIUser::is_trial_end_Valid() const{
    return m_trial_end_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_analytics_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_email_prefs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitbucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitbucket_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_left_in_trial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dev_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrolled_betas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_oauth_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gravatar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heroku_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_beta_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_prefs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pusher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_end_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
