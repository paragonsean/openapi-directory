/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreviousBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreviousBuild::OAIPreviousBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreviousBuild::OAIPreviousBuild() {
    this->initializeModel();
}

OAIPreviousBuild::~OAIPreviousBuild() {}

void OAIPreviousBuild::initializeModel() {

    m_build_num_isSet = false;
    m_build_num_isValid = false;

    m_build_time_millis_isSet = false;
    m_build_time_millis_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPreviousBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreviousBuild::fromJsonObject(QJsonObject json) {

    m_build_num_isValid = ::OpenAPI::fromJsonValue(m_build_num, json[QString("build_num")]);
    m_build_num_isSet = !json[QString("build_num")].isNull() && m_build_num_isValid;

    m_build_time_millis_isValid = ::OpenAPI::fromJsonValue(m_build_time_millis, json[QString("build_time_millis")]);
    m_build_time_millis_isSet = !json[QString("build_time_millis")].isNull() && m_build_time_millis_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPreviousBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreviousBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_build_num_isSet) {
        obj.insert(QString("build_num"), ::OpenAPI::toJsonValue(m_build_num));
    }
    if (m_build_time_millis_isSet) {
        obj.insert(QString("build_time_millis"), ::OpenAPI::toJsonValue(m_build_time_millis));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIPreviousBuild::getBuildNum() const {
    return m_build_num;
}
void OAIPreviousBuild::setBuildNum(const qint32 &build_num) {
    m_build_num = build_num;
    m_build_num_isSet = true;
}

bool OAIPreviousBuild::is_build_num_Set() const{
    return m_build_num_isSet;
}

bool OAIPreviousBuild::is_build_num_Valid() const{
    return m_build_num_isValid;
}

qint32 OAIPreviousBuild::getBuildTimeMillis() const {
    return m_build_time_millis;
}
void OAIPreviousBuild::setBuildTimeMillis(const qint32 &build_time_millis) {
    m_build_time_millis = build_time_millis;
    m_build_time_millis_isSet = true;
}

bool OAIPreviousBuild::is_build_time_millis_Set() const{
    return m_build_time_millis_isSet;
}

bool OAIPreviousBuild::is_build_time_millis_Valid() const{
    return m_build_time_millis_isValid;
}

OAIStatus OAIPreviousBuild::getStatus() const {
    return m_status;
}
void OAIPreviousBuild::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPreviousBuild::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPreviousBuild::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPreviousBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreviousBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
