/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProject_feature_flags.h
 *
 * 
 */

#ifndef OAIProject_feature_flags_H
#define OAIProject_feature_flags_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProject_feature_flags : public OAIObject {
public:
    OAIProject_feature_flags();
    OAIProject_feature_flags(QString json);
    ~OAIProject_feature_flags() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBuildForkPrs() const;
    void setBuildForkPrs(const bool &build_fork_prs);
    bool is_build_fork_prs_Set() const;
    bool is_build_fork_prs_Valid() const;

    bool isFleet() const;
    void setFleet(const bool &fleet);
    bool is_fleet_Set() const;
    bool is_fleet_Valid() const;

    bool isJunit() const;
    void setJunit(const bool &junit);
    bool is_junit_Set() const;
    bool is_junit_Valid() const;

    bool isOss() const;
    void setOss(const bool &oss);
    bool is_oss_Set() const;
    bool is_oss_Valid() const;

    bool isOsx() const;
    void setOsx(const bool &osx);
    bool is_osx_Set() const;
    bool is_osx_Valid() const;

    bool isSetGithubStatus() const;
    void setSetGithubStatus(const bool &set_github_status);
    bool is_set_github_status_Set() const;
    bool is_set_github_status_Valid() const;

    bool isTrustyBeta() const;
    void setTrustyBeta(const bool &trusty_beta);
    bool is_trusty_beta_Set() const;
    bool is_trusty_beta_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_build_fork_prs;
    bool m_build_fork_prs_isSet;
    bool m_build_fork_prs_isValid;

    bool m_fleet;
    bool m_fleet_isSet;
    bool m_fleet_isValid;

    bool m_junit;
    bool m_junit_isSet;
    bool m_junit_isValid;

    bool m_oss;
    bool m_oss_isSet;
    bool m_oss_isValid;

    bool m_osx;
    bool m_osx_isSet;
    bool m_osx_isValid;

    bool m_set_github_status;
    bool m_set_github_status_isSet;
    bool m_set_github_status_isValid;

    bool m_trusty_beta;
    bool m_trusty_beta_isSet;
    bool m_trusty_beta_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProject_feature_flags)

#endif // OAIProject_feature_flags_H
