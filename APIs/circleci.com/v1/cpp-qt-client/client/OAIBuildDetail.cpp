/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildDetail::OAIBuildDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildDetail::OAIBuildDetail() {
    this->initializeModel();
}

OAIBuildDetail::~OAIBuildDetail() {}

void OAIBuildDetail::initializeModel() {

    m_all_commit_details_isSet = false;
    m_all_commit_details_isValid = false;

    m_compare_isSet = false;
    m_compare_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_node_isSet = false;
    m_node_isValid = false;

    m_previous_successful_build_isSet = false;
    m_previous_successful_build_isValid = false;

    m_retries_isSet = false;
    m_retries_isValid = false;

    m_ssh_enabled_isSet = false;
    m_ssh_enabled_isValid = false;

    m_timedout_isSet = false;
    m_timedout_isValid = false;

    m_usage_queued_at_isSet = false;
    m_usage_queued_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIBuildDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildDetail::fromJsonObject(QJsonObject json) {

    m_all_commit_details_isValid = ::OpenAPI::fromJsonValue(m_all_commit_details, json[QString("all_commit_details")]);
    m_all_commit_details_isSet = !json[QString("all_commit_details")].isNull() && m_all_commit_details_isValid;

    m_compare_isValid = ::OpenAPI::fromJsonValue(m_compare, json[QString("compare")]);
    m_compare_isSet = !json[QString("compare")].isNull() && m_compare_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("job_name")]);
    m_job_name_isSet = !json[QString("job_name")].isNull() && m_job_name_isValid;

    m_node_isValid = ::OpenAPI::fromJsonValue(m_node, json[QString("node")]);
    m_node_isSet = !json[QString("node")].isNull() && m_node_isValid;

    m_previous_successful_build_isValid = ::OpenAPI::fromJsonValue(m_previous_successful_build, json[QString("previous_successful_build")]);
    m_previous_successful_build_isSet = !json[QString("previous_successful_build")].isNull() && m_previous_successful_build_isValid;

    m_retries_isValid = ::OpenAPI::fromJsonValue(m_retries, json[QString("retries")]);
    m_retries_isSet = !json[QString("retries")].isNull() && m_retries_isValid;

    m_ssh_enabled_isValid = ::OpenAPI::fromJsonValue(m_ssh_enabled, json[QString("ssh_enabled")]);
    m_ssh_enabled_isSet = !json[QString("ssh_enabled")].isNull() && m_ssh_enabled_isValid;

    m_timedout_isValid = ::OpenAPI::fromJsonValue(m_timedout, json[QString("timedout")]);
    m_timedout_isSet = !json[QString("timedout")].isNull() && m_timedout_isValid;

    m_usage_queued_at_isValid = ::OpenAPI::fromJsonValue(m_usage_queued_at, json[QString("usage_queued_at")]);
    m_usage_queued_at_isSet = !json[QString("usage_queued_at")].isNull() && m_usage_queued_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIBuildDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_all_commit_details.size() > 0) {
        obj.insert(QString("all_commit_details"), ::OpenAPI::toJsonValue(m_all_commit_details));
    }
    if (m_compare_isSet) {
        obj.insert(QString("compare"), ::OpenAPI::toJsonValue(m_compare));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("job_name"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_node_isSet) {
        obj.insert(QString("node"), ::OpenAPI::toJsonValue(m_node));
    }
    if (m_previous_successful_build.isSet()) {
        obj.insert(QString("previous_successful_build"), ::OpenAPI::toJsonValue(m_previous_successful_build));
    }
    if (m_retries_isSet) {
        obj.insert(QString("retries"), ::OpenAPI::toJsonValue(m_retries));
    }
    if (m_ssh_enabled_isSet) {
        obj.insert(QString("ssh_enabled"), ::OpenAPI::toJsonValue(m_ssh_enabled));
    }
    if (m_timedout_isSet) {
        obj.insert(QString("timedout"), ::OpenAPI::toJsonValue(m_timedout));
    }
    if (m_usage_queued_at_isSet) {
        obj.insert(QString("usage_queued_at"), ::OpenAPI::toJsonValue(m_usage_queued_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAICommitDetail> OAIBuildDetail::getAllCommitDetails() const {
    return m_all_commit_details;
}
void OAIBuildDetail::setAllCommitDetails(const QList<OAICommitDetail> &all_commit_details) {
    m_all_commit_details = all_commit_details;
    m_all_commit_details_isSet = true;
}

bool OAIBuildDetail::is_all_commit_details_Set() const{
    return m_all_commit_details_isSet;
}

bool OAIBuildDetail::is_all_commit_details_Valid() const{
    return m_all_commit_details_isValid;
}

QString OAIBuildDetail::getCompare() const {
    return m_compare;
}
void OAIBuildDetail::setCompare(const QString &compare) {
    m_compare = compare;
    m_compare_isSet = true;
}

bool OAIBuildDetail::is_compare_Set() const{
    return m_compare_isSet;
}

bool OAIBuildDetail::is_compare_Valid() const{
    return m_compare_isValid;
}

QString OAIBuildDetail::getJobName() const {
    return m_job_name;
}
void OAIBuildDetail::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIBuildDetail::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIBuildDetail::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QJsonValue OAIBuildDetail::getNode() const {
    return m_node;
}
void OAIBuildDetail::setNode(const QJsonValue &node) {
    m_node = node;
    m_node_isSet = true;
}

bool OAIBuildDetail::is_node_Set() const{
    return m_node_isSet;
}

bool OAIBuildDetail::is_node_Valid() const{
    return m_node_isValid;
}

OAIPreviousBuild OAIBuildDetail::getPreviousSuccessfulBuild() const {
    return m_previous_successful_build;
}
void OAIBuildDetail::setPreviousSuccessfulBuild(const OAIPreviousBuild &previous_successful_build) {
    m_previous_successful_build = previous_successful_build;
    m_previous_successful_build_isSet = true;
}

bool OAIBuildDetail::is_previous_successful_build_Set() const{
    return m_previous_successful_build_isSet;
}

bool OAIBuildDetail::is_previous_successful_build_Valid() const{
    return m_previous_successful_build_isValid;
}

bool OAIBuildDetail::isRetries() const {
    return m_retries;
}
void OAIBuildDetail::setRetries(const bool &retries) {
    m_retries = retries;
    m_retries_isSet = true;
}

bool OAIBuildDetail::is_retries_Set() const{
    return m_retries_isSet;
}

bool OAIBuildDetail::is_retries_Valid() const{
    return m_retries_isValid;
}

bool OAIBuildDetail::isSshEnabled() const {
    return m_ssh_enabled;
}
void OAIBuildDetail::setSshEnabled(const bool &ssh_enabled) {
    m_ssh_enabled = ssh_enabled;
    m_ssh_enabled_isSet = true;
}

bool OAIBuildDetail::is_ssh_enabled_Set() const{
    return m_ssh_enabled_isSet;
}

bool OAIBuildDetail::is_ssh_enabled_Valid() const{
    return m_ssh_enabled_isValid;
}

bool OAIBuildDetail::isTimedout() const {
    return m_timedout;
}
void OAIBuildDetail::setTimedout(const bool &timedout) {
    m_timedout = timedout;
    m_timedout_isSet = true;
}

bool OAIBuildDetail::is_timedout_Set() const{
    return m_timedout_isSet;
}

bool OAIBuildDetail::is_timedout_Valid() const{
    return m_timedout_isValid;
}

QDateTime OAIBuildDetail::getUsageQueuedAt() const {
    return m_usage_queued_at;
}
void OAIBuildDetail::setUsageQueuedAt(const QDateTime &usage_queued_at) {
    m_usage_queued_at = usage_queued_at;
    m_usage_queued_at_isSet = true;
}

bool OAIBuildDetail::is_usage_queued_at_Set() const{
    return m_usage_queued_at_isSet;
}

bool OAIBuildDetail::is_usage_queued_at_Valid() const{
    return m_usage_queued_at_isValid;
}

OAIUser OAIBuildDetail::getUser() const {
    return m_user;
}
void OAIBuildDetail::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIBuildDetail::is_user_Set() const{
    return m_user_isSet;
}

bool OAIBuildDetail::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIBuildDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_commit_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_successful_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timedout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_queued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
