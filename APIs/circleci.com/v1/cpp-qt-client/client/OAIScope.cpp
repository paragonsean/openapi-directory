/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScope::OAIScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScope::OAIScope() {
    this->initializeModel();
}

OAIScope::~OAIScope() {}

void OAIScope::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIScope::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIScope::fromJson(QString jsonString) {
    
    if ( jsonString.compare("write-settings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScope::WRITE_SETTINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("view-builds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScope::VIEW_BUILDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("read-settings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScope::READ_SETTINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trigger-builds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScope::TRIGGER_BUILDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("all", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScope::ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("status", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScope::STATUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("none", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScope::NONE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIScope::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIScope::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIScope::WRITE_SETTINGS:
            val = "write-settings";
            break;
        case eOAIScope::VIEW_BUILDS:
            val = "view-builds";
            break;
        case eOAIScope::READ_SETTINGS:
            val = "read-settings";
            break;
        case eOAIScope::TRIGGER_BUILDS:
            val = "trigger-builds";
            break;
        case eOAIScope::ALL:
            val = "all";
            break;
        case eOAIScope::STATUS:
            val = "status";
            break;
        case eOAIScope::NONE:
            val = "none";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIScope::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIScope::eOAIScope OAIScope::getValue() const {
    return m_value;
}

void OAIScope::setValue(const OAIScope::eOAIScope& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIScope::isSet() const {
    
    return m_value_isSet;
}

bool OAIScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
