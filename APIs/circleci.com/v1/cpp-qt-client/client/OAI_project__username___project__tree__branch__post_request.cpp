/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_project__username___project__tree__branch__post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_project__username___project__tree__branch__post_request::OAI_project__username___project__tree__branch__post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_project__username___project__tree__branch__post_request::OAI_project__username___project__tree__branch__post_request() {
    this->initializeModel();
}

OAI_project__username___project__tree__branch__post_request::~OAI_project__username___project__tree__branch__post_request() {}

void OAI_project__username___project__tree__branch__post_request::initializeModel() {

    m_build_parameters_isSet = false;
    m_build_parameters_isValid = false;

    m_parallel_isSet = false;
    m_parallel_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAI_project__username___project__tree__branch__post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_project__username___project__tree__branch__post_request::fromJsonObject(QJsonObject json) {

    m_build_parameters_isValid = ::OpenAPI::fromJsonValue(m_build_parameters, json[QString("build_parameters")]);
    m_build_parameters_isSet = !json[QString("build_parameters")].isNull() && m_build_parameters_isValid;

    m_parallel_isValid = ::OpenAPI::fromJsonValue(m_parallel, json[QString("parallel")]);
    m_parallel_isSet = !json[QString("parallel")].isNull() && m_parallel_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;
}

QString OAI_project__username___project__tree__branch__post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_project__username___project__tree__branch__post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_build_parameters_isSet) {
        obj.insert(QString("build_parameters"), ::OpenAPI::toJsonValue(m_build_parameters));
    }
    if (m_parallel_isSet) {
        obj.insert(QString("parallel"), ::OpenAPI::toJsonValue(m_parallel));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

OAIObject OAI_project__username___project__tree__branch__post_request::getBuildParameters() const {
    return m_build_parameters;
}
void OAI_project__username___project__tree__branch__post_request::setBuildParameters(const OAIObject &build_parameters) {
    m_build_parameters = build_parameters;
    m_build_parameters_isSet = true;
}

bool OAI_project__username___project__tree__branch__post_request::is_build_parameters_Set() const{
    return m_build_parameters_isSet;
}

bool OAI_project__username___project__tree__branch__post_request::is_build_parameters_Valid() const{
    return m_build_parameters_isValid;
}

QString OAI_project__username___project__tree__branch__post_request::getParallel() const {
    return m_parallel;
}
void OAI_project__username___project__tree__branch__post_request::setParallel(const QString &parallel) {
    m_parallel = parallel;
    m_parallel_isSet = true;
}

bool OAI_project__username___project__tree__branch__post_request::is_parallel_Set() const{
    return m_parallel_isSet;
}

bool OAI_project__username___project__tree__branch__post_request::is_parallel_Valid() const{
    return m_parallel_isValid;
}

QString OAI_project__username___project__tree__branch__post_request::getRevision() const {
    return m_revision;
}
void OAI_project__username___project__tree__branch__post_request::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAI_project__username___project__tree__branch__post_request::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAI_project__username___project__tree__branch__post_request::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAI_project__username___project__tree__branch__post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_project__username___project__tree__branch__post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
