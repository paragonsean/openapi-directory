/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecycle::OAILifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecycle::OAILifecycle() {
    this->initializeModel();
}

OAILifecycle::~OAILifecycle() {}

void OAILifecycle::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILifecycle::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILifecycle::fromJson(QString jsonString) {
    
    if ( jsonString.compare("queued", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycle::QUEUED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("scheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycle::SCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("not_run", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycle::NOT_RUN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("not_running", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycle::NOT_RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("running", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycle::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("finished", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifecycle::FINISHED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILifecycle::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILifecycle::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILifecycle::QUEUED:
            val = "queued";
            break;
        case eOAILifecycle::SCHEDULED:
            val = "scheduled";
            break;
        case eOAILifecycle::NOT_RUN:
            val = "not_run";
            break;
        case eOAILifecycle::NOT_RUNNING:
            val = "not_running";
            break;
        case eOAILifecycle::RUNNING:
            val = "running";
            break;
        case eOAILifecycle::FINISHED:
            val = "finished";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILifecycle::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILifecycle::eOAILifecycle OAILifecycle::getValue() const {
    return m_value;
}

void OAILifecycle::setValue(const OAILifecycle::eOAILifecycle& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILifecycle::isSet() const {
    
    return m_value_isSet;
}

bool OAILifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
