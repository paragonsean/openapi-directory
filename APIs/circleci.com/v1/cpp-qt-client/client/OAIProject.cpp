/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_aws_isSet = false;
    m_aws_isValid = false;

    m_branches_isSet = false;
    m_branches_isValid = false;

    m_campfire_notify_prefs_isSet = false;
    m_campfire_notify_prefs_isValid = false;

    m_campfire_room_isSet = false;
    m_campfire_room_isValid = false;

    m_campfire_subdomain_isSet = false;
    m_campfire_subdomain_isValid = false;

    m_campfire_token_isSet = false;
    m_campfire_token_isValid = false;

    m_compile_isSet = false;
    m_compile_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_dependencies_isSet = false;
    m_dependencies_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_feature_flags_isSet = false;
    m_feature_flags_isValid = false;

    m_flowdock_api_token_isSet = false;
    m_flowdock_api_token_isValid = false;

    m_followed_isSet = false;
    m_followed_isValid = false;

    m_has_usable_key_isSet = false;
    m_has_usable_key_isValid = false;

    m_heroku_deploy_user_isSet = false;
    m_heroku_deploy_user_isValid = false;

    m_hipchat_api_token_isSet = false;
    m_hipchat_api_token_isValid = false;

    m_hipchat_notify_isSet = false;
    m_hipchat_notify_isValid = false;

    m_hipchat_notify_prefs_isSet = false;
    m_hipchat_notify_prefs_isValid = false;

    m_hipchat_room_isSet = false;
    m_hipchat_room_isValid = false;

    m_irc_channel_isSet = false;
    m_irc_channel_isValid = false;

    m_irc_keyword_isSet = false;
    m_irc_keyword_isValid = false;

    m_irc_notify_prefs_isSet = false;
    m_irc_notify_prefs_isValid = false;

    m_irc_password_isSet = false;
    m_irc_password_isValid = false;

    m_irc_server_isSet = false;
    m_irc_server_isValid = false;

    m_irc_username_isSet = false;
    m_irc_username_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_oss_isSet = false;
    m_oss_isValid = false;

    m_parallel_isSet = false;
    m_parallel_isValid = false;

    m_reponame_isSet = false;
    m_reponame_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_setup_isSet = false;
    m_setup_isValid = false;

    m_slack_api_token_isSet = false;
    m_slack_api_token_isValid = false;

    m_slack_channel_isSet = false;
    m_slack_channel_isValid = false;

    m_slack_channel_override_isSet = false;
    m_slack_channel_override_isValid = false;

    m_slack_notify_prefs_isSet = false;
    m_slack_notify_prefs_isValid = false;

    m_slack_subdomain_isSet = false;
    m_slack_subdomain_isValid = false;

    m_slack_webhook_url_isSet = false;
    m_slack_webhook_url_isValid = false;

    m_ssh_keys_isSet = false;
    m_ssh_keys_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_vcs_type_isSet = false;
    m_vcs_type_isValid = false;

    m_vcs_url_isSet = false;
    m_vcs_url_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_aws_isValid = ::OpenAPI::fromJsonValue(m_aws, json[QString("aws")]);
    m_aws_isSet = !json[QString("aws")].isNull() && m_aws_isValid;

    m_branches_isValid = ::OpenAPI::fromJsonValue(m_branches, json[QString("branches")]);
    m_branches_isSet = !json[QString("branches")].isNull() && m_branches_isValid;

    m_campfire_notify_prefs_isValid = ::OpenAPI::fromJsonValue(m_campfire_notify_prefs, json[QString("campfire_notify_prefs")]);
    m_campfire_notify_prefs_isSet = !json[QString("campfire_notify_prefs")].isNull() && m_campfire_notify_prefs_isValid;

    m_campfire_room_isValid = ::OpenAPI::fromJsonValue(m_campfire_room, json[QString("campfire_room")]);
    m_campfire_room_isSet = !json[QString("campfire_room")].isNull() && m_campfire_room_isValid;

    m_campfire_subdomain_isValid = ::OpenAPI::fromJsonValue(m_campfire_subdomain, json[QString("campfire_subdomain")]);
    m_campfire_subdomain_isSet = !json[QString("campfire_subdomain")].isNull() && m_campfire_subdomain_isValid;

    m_campfire_token_isValid = ::OpenAPI::fromJsonValue(m_campfire_token, json[QString("campfire_token")]);
    m_campfire_token_isSet = !json[QString("campfire_token")].isNull() && m_campfire_token_isValid;

    m_compile_isValid = ::OpenAPI::fromJsonValue(m_compile, json[QString("compile")]);
    m_compile_isSet = !json[QString("compile")].isNull() && m_compile_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_dependencies_isValid = ::OpenAPI::fromJsonValue(m_dependencies, json[QString("dependencies")]);
    m_dependencies_isSet = !json[QString("dependencies")].isNull() && m_dependencies_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_feature_flags_isValid = ::OpenAPI::fromJsonValue(m_feature_flags, json[QString("feature_flags")]);
    m_feature_flags_isSet = !json[QString("feature_flags")].isNull() && m_feature_flags_isValid;

    m_flowdock_api_token_isValid = ::OpenAPI::fromJsonValue(m_flowdock_api_token, json[QString("flowdock_api_token")]);
    m_flowdock_api_token_isSet = !json[QString("flowdock_api_token")].isNull() && m_flowdock_api_token_isValid;

    m_followed_isValid = ::OpenAPI::fromJsonValue(m_followed, json[QString("followed")]);
    m_followed_isSet = !json[QString("followed")].isNull() && m_followed_isValid;

    m_has_usable_key_isValid = ::OpenAPI::fromJsonValue(m_has_usable_key, json[QString("has_usable_key")]);
    m_has_usable_key_isSet = !json[QString("has_usable_key")].isNull() && m_has_usable_key_isValid;

    m_heroku_deploy_user_isValid = ::OpenAPI::fromJsonValue(m_heroku_deploy_user, json[QString("heroku_deploy_user")]);
    m_heroku_deploy_user_isSet = !json[QString("heroku_deploy_user")].isNull() && m_heroku_deploy_user_isValid;

    m_hipchat_api_token_isValid = ::OpenAPI::fromJsonValue(m_hipchat_api_token, json[QString("hipchat_api_token")]);
    m_hipchat_api_token_isSet = !json[QString("hipchat_api_token")].isNull() && m_hipchat_api_token_isValid;

    m_hipchat_notify_isValid = ::OpenAPI::fromJsonValue(m_hipchat_notify, json[QString("hipchat_notify")]);
    m_hipchat_notify_isSet = !json[QString("hipchat_notify")].isNull() && m_hipchat_notify_isValid;

    m_hipchat_notify_prefs_isValid = ::OpenAPI::fromJsonValue(m_hipchat_notify_prefs, json[QString("hipchat_notify_prefs")]);
    m_hipchat_notify_prefs_isSet = !json[QString("hipchat_notify_prefs")].isNull() && m_hipchat_notify_prefs_isValid;

    m_hipchat_room_isValid = ::OpenAPI::fromJsonValue(m_hipchat_room, json[QString("hipchat_room")]);
    m_hipchat_room_isSet = !json[QString("hipchat_room")].isNull() && m_hipchat_room_isValid;

    m_irc_channel_isValid = ::OpenAPI::fromJsonValue(m_irc_channel, json[QString("irc_channel")]);
    m_irc_channel_isSet = !json[QString("irc_channel")].isNull() && m_irc_channel_isValid;

    m_irc_keyword_isValid = ::OpenAPI::fromJsonValue(m_irc_keyword, json[QString("irc_keyword")]);
    m_irc_keyword_isSet = !json[QString("irc_keyword")].isNull() && m_irc_keyword_isValid;

    m_irc_notify_prefs_isValid = ::OpenAPI::fromJsonValue(m_irc_notify_prefs, json[QString("irc_notify_prefs")]);
    m_irc_notify_prefs_isSet = !json[QString("irc_notify_prefs")].isNull() && m_irc_notify_prefs_isValid;

    m_irc_password_isValid = ::OpenAPI::fromJsonValue(m_irc_password, json[QString("irc_password")]);
    m_irc_password_isSet = !json[QString("irc_password")].isNull() && m_irc_password_isValid;

    m_irc_server_isValid = ::OpenAPI::fromJsonValue(m_irc_server, json[QString("irc_server")]);
    m_irc_server_isSet = !json[QString("irc_server")].isNull() && m_irc_server_isValid;

    m_irc_username_isValid = ::OpenAPI::fromJsonValue(m_irc_username, json[QString("irc_username")]);
    m_irc_username_isSet = !json[QString("irc_username")].isNull() && m_irc_username_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_oss_isValid = ::OpenAPI::fromJsonValue(m_oss, json[QString("oss")]);
    m_oss_isSet = !json[QString("oss")].isNull() && m_oss_isValid;

    m_parallel_isValid = ::OpenAPI::fromJsonValue(m_parallel, json[QString("parallel")]);
    m_parallel_isSet = !json[QString("parallel")].isNull() && m_parallel_isValid;

    m_reponame_isValid = ::OpenAPI::fromJsonValue(m_reponame, json[QString("reponame")]);
    m_reponame_isSet = !json[QString("reponame")].isNull() && m_reponame_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_setup_isValid = ::OpenAPI::fromJsonValue(m_setup, json[QString("setup")]);
    m_setup_isSet = !json[QString("setup")].isNull() && m_setup_isValid;

    m_slack_api_token_isValid = ::OpenAPI::fromJsonValue(m_slack_api_token, json[QString("slack_api_token")]);
    m_slack_api_token_isSet = !json[QString("slack_api_token")].isNull() && m_slack_api_token_isValid;

    m_slack_channel_isValid = ::OpenAPI::fromJsonValue(m_slack_channel, json[QString("slack_channel")]);
    m_slack_channel_isSet = !json[QString("slack_channel")].isNull() && m_slack_channel_isValid;

    m_slack_channel_override_isValid = ::OpenAPI::fromJsonValue(m_slack_channel_override, json[QString("slack_channel_override")]);
    m_slack_channel_override_isSet = !json[QString("slack_channel_override")].isNull() && m_slack_channel_override_isValid;

    m_slack_notify_prefs_isValid = ::OpenAPI::fromJsonValue(m_slack_notify_prefs, json[QString("slack_notify_prefs")]);
    m_slack_notify_prefs_isSet = !json[QString("slack_notify_prefs")].isNull() && m_slack_notify_prefs_isValid;

    m_slack_subdomain_isValid = ::OpenAPI::fromJsonValue(m_slack_subdomain, json[QString("slack_subdomain")]);
    m_slack_subdomain_isSet = !json[QString("slack_subdomain")].isNull() && m_slack_subdomain_isValid;

    m_slack_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_slack_webhook_url, json[QString("slack_webhook_url")]);
    m_slack_webhook_url_isSet = !json[QString("slack_webhook_url")].isNull() && m_slack_webhook_url_isValid;

    m_ssh_keys_isValid = ::OpenAPI::fromJsonValue(m_ssh_keys, json[QString("ssh_keys")]);
    m_ssh_keys_isSet = !json[QString("ssh_keys")].isNull() && m_ssh_keys_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_vcs_type_isValid = ::OpenAPI::fromJsonValue(m_vcs_type, json[QString("vcs_type")]);
    m_vcs_type_isSet = !json[QString("vcs_type")].isNull() && m_vcs_type_isValid;

    m_vcs_url_isValid = ::OpenAPI::fromJsonValue(m_vcs_url, json[QString("vcs_url")]);
    m_vcs_url_isSet = !json[QString("vcs_url")].isNull() && m_vcs_url_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_aws.isSet()) {
        obj.insert(QString("aws"), ::OpenAPI::toJsonValue(m_aws));
    }
    if (m_branches_isSet) {
        obj.insert(QString("branches"), ::OpenAPI::toJsonValue(m_branches));
    }
    if (m_campfire_notify_prefs_isSet) {
        obj.insert(QString("campfire_notify_prefs"), ::OpenAPI::toJsonValue(m_campfire_notify_prefs));
    }
    if (m_campfire_room_isSet) {
        obj.insert(QString("campfire_room"), ::OpenAPI::toJsonValue(m_campfire_room));
    }
    if (m_campfire_subdomain_isSet) {
        obj.insert(QString("campfire_subdomain"), ::OpenAPI::toJsonValue(m_campfire_subdomain));
    }
    if (m_campfire_token_isSet) {
        obj.insert(QString("campfire_token"), ::OpenAPI::toJsonValue(m_campfire_token));
    }
    if (m_compile_isSet) {
        obj.insert(QString("compile"), ::OpenAPI::toJsonValue(m_compile));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_dependencies_isSet) {
        obj.insert(QString("dependencies"), ::OpenAPI::toJsonValue(m_dependencies));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_feature_flags.isSet()) {
        obj.insert(QString("feature_flags"), ::OpenAPI::toJsonValue(m_feature_flags));
    }
    if (m_flowdock_api_token_isSet) {
        obj.insert(QString("flowdock_api_token"), ::OpenAPI::toJsonValue(m_flowdock_api_token));
    }
    if (m_followed_isSet) {
        obj.insert(QString("followed"), ::OpenAPI::toJsonValue(m_followed));
    }
    if (m_has_usable_key_isSet) {
        obj.insert(QString("has_usable_key"), ::OpenAPI::toJsonValue(m_has_usable_key));
    }
    if (m_heroku_deploy_user_isSet) {
        obj.insert(QString("heroku_deploy_user"), ::OpenAPI::toJsonValue(m_heroku_deploy_user));
    }
    if (m_hipchat_api_token_isSet) {
        obj.insert(QString("hipchat_api_token"), ::OpenAPI::toJsonValue(m_hipchat_api_token));
    }
    if (m_hipchat_notify_isSet) {
        obj.insert(QString("hipchat_notify"), ::OpenAPI::toJsonValue(m_hipchat_notify));
    }
    if (m_hipchat_notify_prefs_isSet) {
        obj.insert(QString("hipchat_notify_prefs"), ::OpenAPI::toJsonValue(m_hipchat_notify_prefs));
    }
    if (m_hipchat_room_isSet) {
        obj.insert(QString("hipchat_room"), ::OpenAPI::toJsonValue(m_hipchat_room));
    }
    if (m_irc_channel_isSet) {
        obj.insert(QString("irc_channel"), ::OpenAPI::toJsonValue(m_irc_channel));
    }
    if (m_irc_keyword_isSet) {
        obj.insert(QString("irc_keyword"), ::OpenAPI::toJsonValue(m_irc_keyword));
    }
    if (m_irc_notify_prefs_isSet) {
        obj.insert(QString("irc_notify_prefs"), ::OpenAPI::toJsonValue(m_irc_notify_prefs));
    }
    if (m_irc_password_isSet) {
        obj.insert(QString("irc_password"), ::OpenAPI::toJsonValue(m_irc_password));
    }
    if (m_irc_server_isSet) {
        obj.insert(QString("irc_server"), ::OpenAPI::toJsonValue(m_irc_server));
    }
    if (m_irc_username_isSet) {
        obj.insert(QString("irc_username"), ::OpenAPI::toJsonValue(m_irc_username));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_oss_isSet) {
        obj.insert(QString("oss"), ::OpenAPI::toJsonValue(m_oss));
    }
    if (m_parallel_isSet) {
        obj.insert(QString("parallel"), ::OpenAPI::toJsonValue(m_parallel));
    }
    if (m_reponame_isSet) {
        obj.insert(QString("reponame"), ::OpenAPI::toJsonValue(m_reponame));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_setup_isSet) {
        obj.insert(QString("setup"), ::OpenAPI::toJsonValue(m_setup));
    }
    if (m_slack_api_token_isSet) {
        obj.insert(QString("slack_api_token"), ::OpenAPI::toJsonValue(m_slack_api_token));
    }
    if (m_slack_channel_isSet) {
        obj.insert(QString("slack_channel"), ::OpenAPI::toJsonValue(m_slack_channel));
    }
    if (m_slack_channel_override_isSet) {
        obj.insert(QString("slack_channel_override"), ::OpenAPI::toJsonValue(m_slack_channel_override));
    }
    if (m_slack_notify_prefs_isSet) {
        obj.insert(QString("slack_notify_prefs"), ::OpenAPI::toJsonValue(m_slack_notify_prefs));
    }
    if (m_slack_subdomain_isSet) {
        obj.insert(QString("slack_subdomain"), ::OpenAPI::toJsonValue(m_slack_subdomain));
    }
    if (m_slack_webhook_url_isSet) {
        obj.insert(QString("slack_webhook_url"), ::OpenAPI::toJsonValue(m_slack_webhook_url));
    }
    if (m_ssh_keys.size() > 0) {
        obj.insert(QString("ssh_keys"), ::OpenAPI::toJsonValue(m_ssh_keys));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_vcs_type_isSet) {
        obj.insert(QString("vcs_type"), ::OpenAPI::toJsonValue(m_vcs_type));
    }
    if (m_vcs_url_isSet) {
        obj.insert(QString("vcs_url"), ::OpenAPI::toJsonValue(m_vcs_url));
    }
    return obj;
}

OAIAws OAIProject::getAws() const {
    return m_aws;
}
void OAIProject::setAws(const OAIAws &aws) {
    m_aws = aws;
    m_aws_isSet = true;
}

bool OAIProject::is_aws_Set() const{
    return m_aws_isSet;
}

bool OAIProject::is_aws_Valid() const{
    return m_aws_isValid;
}

OAIObject OAIProject::getBranches() const {
    return m_branches;
}
void OAIProject::setBranches(const OAIObject &branches) {
    m_branches = branches;
    m_branches_isSet = true;
}

bool OAIProject::is_branches_Set() const{
    return m_branches_isSet;
}

bool OAIProject::is_branches_Valid() const{
    return m_branches_isValid;
}

QString OAIProject::getCampfireNotifyPrefs() const {
    return m_campfire_notify_prefs;
}
void OAIProject::setCampfireNotifyPrefs(const QString &campfire_notify_prefs) {
    m_campfire_notify_prefs = campfire_notify_prefs;
    m_campfire_notify_prefs_isSet = true;
}

bool OAIProject::is_campfire_notify_prefs_Set() const{
    return m_campfire_notify_prefs_isSet;
}

bool OAIProject::is_campfire_notify_prefs_Valid() const{
    return m_campfire_notify_prefs_isValid;
}

QString OAIProject::getCampfireRoom() const {
    return m_campfire_room;
}
void OAIProject::setCampfireRoom(const QString &campfire_room) {
    m_campfire_room = campfire_room;
    m_campfire_room_isSet = true;
}

bool OAIProject::is_campfire_room_Set() const{
    return m_campfire_room_isSet;
}

bool OAIProject::is_campfire_room_Valid() const{
    return m_campfire_room_isValid;
}

QString OAIProject::getCampfireSubdomain() const {
    return m_campfire_subdomain;
}
void OAIProject::setCampfireSubdomain(const QString &campfire_subdomain) {
    m_campfire_subdomain = campfire_subdomain;
    m_campfire_subdomain_isSet = true;
}

bool OAIProject::is_campfire_subdomain_Set() const{
    return m_campfire_subdomain_isSet;
}

bool OAIProject::is_campfire_subdomain_Valid() const{
    return m_campfire_subdomain_isValid;
}

QString OAIProject::getCampfireToken() const {
    return m_campfire_token;
}
void OAIProject::setCampfireToken(const QString &campfire_token) {
    m_campfire_token = campfire_token;
    m_campfire_token_isSet = true;
}

bool OAIProject::is_campfire_token_Set() const{
    return m_campfire_token_isSet;
}

bool OAIProject::is_campfire_token_Valid() const{
    return m_campfire_token_isValid;
}

QString OAIProject::getCompile() const {
    return m_compile;
}
void OAIProject::setCompile(const QString &compile) {
    m_compile = compile;
    m_compile_isSet = true;
}

bool OAIProject::is_compile_Set() const{
    return m_compile_isSet;
}

bool OAIProject::is_compile_Valid() const{
    return m_compile_isValid;
}

QString OAIProject::getDefaultBranch() const {
    return m_default_branch;
}
void OAIProject::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIProject::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIProject::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

QString OAIProject::getDependencies() const {
    return m_dependencies;
}
void OAIProject::setDependencies(const QString &dependencies) {
    m_dependencies = dependencies;
    m_dependencies_isSet = true;
}

bool OAIProject::is_dependencies_Set() const{
    return m_dependencies_isSet;
}

bool OAIProject::is_dependencies_Valid() const{
    return m_dependencies_isValid;
}

QString OAIProject::getExtra() const {
    return m_extra;
}
void OAIProject::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIProject::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIProject::is_extra_Valid() const{
    return m_extra_isValid;
}

OAIProject_feature_flags OAIProject::getFeatureFlags() const {
    return m_feature_flags;
}
void OAIProject::setFeatureFlags(const OAIProject_feature_flags &feature_flags) {
    m_feature_flags = feature_flags;
    m_feature_flags_isSet = true;
}

bool OAIProject::is_feature_flags_Set() const{
    return m_feature_flags_isSet;
}

bool OAIProject::is_feature_flags_Valid() const{
    return m_feature_flags_isValid;
}

QString OAIProject::getFlowdockApiToken() const {
    return m_flowdock_api_token;
}
void OAIProject::setFlowdockApiToken(const QString &flowdock_api_token) {
    m_flowdock_api_token = flowdock_api_token;
    m_flowdock_api_token_isSet = true;
}

bool OAIProject::is_flowdock_api_token_Set() const{
    return m_flowdock_api_token_isSet;
}

bool OAIProject::is_flowdock_api_token_Valid() const{
    return m_flowdock_api_token_isValid;
}

bool OAIProject::isFollowed() const {
    return m_followed;
}
void OAIProject::setFollowed(const bool &followed) {
    m_followed = followed;
    m_followed_isSet = true;
}

bool OAIProject::is_followed_Set() const{
    return m_followed_isSet;
}

bool OAIProject::is_followed_Valid() const{
    return m_followed_isValid;
}

bool OAIProject::isHasUsableKey() const {
    return m_has_usable_key;
}
void OAIProject::setHasUsableKey(const bool &has_usable_key) {
    m_has_usable_key = has_usable_key;
    m_has_usable_key_isSet = true;
}

bool OAIProject::is_has_usable_key_Set() const{
    return m_has_usable_key_isSet;
}

bool OAIProject::is_has_usable_key_Valid() const{
    return m_has_usable_key_isValid;
}

QString OAIProject::getHerokuDeployUser() const {
    return m_heroku_deploy_user;
}
void OAIProject::setHerokuDeployUser(const QString &heroku_deploy_user) {
    m_heroku_deploy_user = heroku_deploy_user;
    m_heroku_deploy_user_isSet = true;
}

bool OAIProject::is_heroku_deploy_user_Set() const{
    return m_heroku_deploy_user_isSet;
}

bool OAIProject::is_heroku_deploy_user_Valid() const{
    return m_heroku_deploy_user_isValid;
}

QString OAIProject::getHipchatApiToken() const {
    return m_hipchat_api_token;
}
void OAIProject::setHipchatApiToken(const QString &hipchat_api_token) {
    m_hipchat_api_token = hipchat_api_token;
    m_hipchat_api_token_isSet = true;
}

bool OAIProject::is_hipchat_api_token_Set() const{
    return m_hipchat_api_token_isSet;
}

bool OAIProject::is_hipchat_api_token_Valid() const{
    return m_hipchat_api_token_isValid;
}

QString OAIProject::getHipchatNotify() const {
    return m_hipchat_notify;
}
void OAIProject::setHipchatNotify(const QString &hipchat_notify) {
    m_hipchat_notify = hipchat_notify;
    m_hipchat_notify_isSet = true;
}

bool OAIProject::is_hipchat_notify_Set() const{
    return m_hipchat_notify_isSet;
}

bool OAIProject::is_hipchat_notify_Valid() const{
    return m_hipchat_notify_isValid;
}

QString OAIProject::getHipchatNotifyPrefs() const {
    return m_hipchat_notify_prefs;
}
void OAIProject::setHipchatNotifyPrefs(const QString &hipchat_notify_prefs) {
    m_hipchat_notify_prefs = hipchat_notify_prefs;
    m_hipchat_notify_prefs_isSet = true;
}

bool OAIProject::is_hipchat_notify_prefs_Set() const{
    return m_hipchat_notify_prefs_isSet;
}

bool OAIProject::is_hipchat_notify_prefs_Valid() const{
    return m_hipchat_notify_prefs_isValid;
}

QString OAIProject::getHipchatRoom() const {
    return m_hipchat_room;
}
void OAIProject::setHipchatRoom(const QString &hipchat_room) {
    m_hipchat_room = hipchat_room;
    m_hipchat_room_isSet = true;
}

bool OAIProject::is_hipchat_room_Set() const{
    return m_hipchat_room_isSet;
}

bool OAIProject::is_hipchat_room_Valid() const{
    return m_hipchat_room_isValid;
}

QString OAIProject::getIrcChannel() const {
    return m_irc_channel;
}
void OAIProject::setIrcChannel(const QString &irc_channel) {
    m_irc_channel = irc_channel;
    m_irc_channel_isSet = true;
}

bool OAIProject::is_irc_channel_Set() const{
    return m_irc_channel_isSet;
}

bool OAIProject::is_irc_channel_Valid() const{
    return m_irc_channel_isValid;
}

QString OAIProject::getIrcKeyword() const {
    return m_irc_keyword;
}
void OAIProject::setIrcKeyword(const QString &irc_keyword) {
    m_irc_keyword = irc_keyword;
    m_irc_keyword_isSet = true;
}

bool OAIProject::is_irc_keyword_Set() const{
    return m_irc_keyword_isSet;
}

bool OAIProject::is_irc_keyword_Valid() const{
    return m_irc_keyword_isValid;
}

QString OAIProject::getIrcNotifyPrefs() const {
    return m_irc_notify_prefs;
}
void OAIProject::setIrcNotifyPrefs(const QString &irc_notify_prefs) {
    m_irc_notify_prefs = irc_notify_prefs;
    m_irc_notify_prefs_isSet = true;
}

bool OAIProject::is_irc_notify_prefs_Set() const{
    return m_irc_notify_prefs_isSet;
}

bool OAIProject::is_irc_notify_prefs_Valid() const{
    return m_irc_notify_prefs_isValid;
}

QString OAIProject::getIrcPassword() const {
    return m_irc_password;
}
void OAIProject::setIrcPassword(const QString &irc_password) {
    m_irc_password = irc_password;
    m_irc_password_isSet = true;
}

bool OAIProject::is_irc_password_Set() const{
    return m_irc_password_isSet;
}

bool OAIProject::is_irc_password_Valid() const{
    return m_irc_password_isValid;
}

QString OAIProject::getIrcServer() const {
    return m_irc_server;
}
void OAIProject::setIrcServer(const QString &irc_server) {
    m_irc_server = irc_server;
    m_irc_server_isSet = true;
}

bool OAIProject::is_irc_server_Set() const{
    return m_irc_server_isSet;
}

bool OAIProject::is_irc_server_Valid() const{
    return m_irc_server_isValid;
}

QString OAIProject::getIrcUsername() const {
    return m_irc_username;
}
void OAIProject::setIrcUsername(const QString &irc_username) {
    m_irc_username = irc_username;
    m_irc_username_isSet = true;
}

bool OAIProject::is_irc_username_Set() const{
    return m_irc_username_isSet;
}

bool OAIProject::is_irc_username_Valid() const{
    return m_irc_username_isValid;
}

QString OAIProject::getLanguage() const {
    return m_language;
}
void OAIProject::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIProject::is_language_Set() const{
    return m_language_isSet;
}

bool OAIProject::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIProject::isOss() const {
    return m_oss;
}
void OAIProject::setOss(const bool &oss) {
    m_oss = oss;
    m_oss_isSet = true;
}

bool OAIProject::is_oss_Set() const{
    return m_oss_isSet;
}

bool OAIProject::is_oss_Valid() const{
    return m_oss_isValid;
}

qint32 OAIProject::getParallel() const {
    return m_parallel;
}
void OAIProject::setParallel(const qint32 &parallel) {
    m_parallel = parallel;
    m_parallel_isSet = true;
}

bool OAIProject::is_parallel_Set() const{
    return m_parallel_isSet;
}

bool OAIProject::is_parallel_Valid() const{
    return m_parallel_isValid;
}

QString OAIProject::getReponame() const {
    return m_reponame;
}
void OAIProject::setReponame(const QString &reponame) {
    m_reponame = reponame;
    m_reponame_isSet = true;
}

bool OAIProject::is_reponame_Set() const{
    return m_reponame_isSet;
}

bool OAIProject::is_reponame_Valid() const{
    return m_reponame_isValid;
}

QList<OAIScope> OAIProject::getScopes() const {
    return m_scopes;
}
void OAIProject::setScopes(const QList<OAIScope> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIProject::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIProject::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIProject::getSetup() const {
    return m_setup;
}
void OAIProject::setSetup(const QString &setup) {
    m_setup = setup;
    m_setup_isSet = true;
}

bool OAIProject::is_setup_Set() const{
    return m_setup_isSet;
}

bool OAIProject::is_setup_Valid() const{
    return m_setup_isValid;
}

QString OAIProject::getSlackApiToken() const {
    return m_slack_api_token;
}
void OAIProject::setSlackApiToken(const QString &slack_api_token) {
    m_slack_api_token = slack_api_token;
    m_slack_api_token_isSet = true;
}

bool OAIProject::is_slack_api_token_Set() const{
    return m_slack_api_token_isSet;
}

bool OAIProject::is_slack_api_token_Valid() const{
    return m_slack_api_token_isValid;
}

QString OAIProject::getSlackChannel() const {
    return m_slack_channel;
}
void OAIProject::setSlackChannel(const QString &slack_channel) {
    m_slack_channel = slack_channel;
    m_slack_channel_isSet = true;
}

bool OAIProject::is_slack_channel_Set() const{
    return m_slack_channel_isSet;
}

bool OAIProject::is_slack_channel_Valid() const{
    return m_slack_channel_isValid;
}

QString OAIProject::getSlackChannelOverride() const {
    return m_slack_channel_override;
}
void OAIProject::setSlackChannelOverride(const QString &slack_channel_override) {
    m_slack_channel_override = slack_channel_override;
    m_slack_channel_override_isSet = true;
}

bool OAIProject::is_slack_channel_override_Set() const{
    return m_slack_channel_override_isSet;
}

bool OAIProject::is_slack_channel_override_Valid() const{
    return m_slack_channel_override_isValid;
}

QString OAIProject::getSlackNotifyPrefs() const {
    return m_slack_notify_prefs;
}
void OAIProject::setSlackNotifyPrefs(const QString &slack_notify_prefs) {
    m_slack_notify_prefs = slack_notify_prefs;
    m_slack_notify_prefs_isSet = true;
}

bool OAIProject::is_slack_notify_prefs_Set() const{
    return m_slack_notify_prefs_isSet;
}

bool OAIProject::is_slack_notify_prefs_Valid() const{
    return m_slack_notify_prefs_isValid;
}

QString OAIProject::getSlackSubdomain() const {
    return m_slack_subdomain;
}
void OAIProject::setSlackSubdomain(const QString &slack_subdomain) {
    m_slack_subdomain = slack_subdomain;
    m_slack_subdomain_isSet = true;
}

bool OAIProject::is_slack_subdomain_Set() const{
    return m_slack_subdomain_isSet;
}

bool OAIProject::is_slack_subdomain_Valid() const{
    return m_slack_subdomain_isValid;
}

QString OAIProject::getSlackWebhookUrl() const {
    return m_slack_webhook_url;
}
void OAIProject::setSlackWebhookUrl(const QString &slack_webhook_url) {
    m_slack_webhook_url = slack_webhook_url;
    m_slack_webhook_url_isSet = true;
}

bool OAIProject::is_slack_webhook_url_Set() const{
    return m_slack_webhook_url_isSet;
}

bool OAIProject::is_slack_webhook_url_Valid() const{
    return m_slack_webhook_url_isValid;
}

QList<QString> OAIProject::getSshKeys() const {
    return m_ssh_keys;
}
void OAIProject::setSshKeys(const QList<QString> &ssh_keys) {
    m_ssh_keys = ssh_keys;
    m_ssh_keys_isSet = true;
}

bool OAIProject::is_ssh_keys_Set() const{
    return m_ssh_keys_isSet;
}

bool OAIProject::is_ssh_keys_Valid() const{
    return m_ssh_keys_isValid;
}

QString OAIProject::getTest() const {
    return m_test;
}
void OAIProject::setTest(const QString &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIProject::is_test_Set() const{
    return m_test_isSet;
}

bool OAIProject::is_test_Valid() const{
    return m_test_isValid;
}

QString OAIProject::getUsername() const {
    return m_username;
}
void OAIProject::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIProject::is_username_Set() const{
    return m_username_isSet;
}

bool OAIProject::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIProject::getVcsType() const {
    return m_vcs_type;
}
void OAIProject::setVcsType(const QString &vcs_type) {
    m_vcs_type = vcs_type;
    m_vcs_type_isSet = true;
}

bool OAIProject::is_vcs_type_Set() const{
    return m_vcs_type_isSet;
}

bool OAIProject::is_vcs_type_Valid() const{
    return m_vcs_type_isValid;
}

QString OAIProject::getVcsUrl() const {
    return m_vcs_url;
}
void OAIProject::setVcsUrl(const QString &vcs_url) {
    m_vcs_url = vcs_url;
    m_vcs_url_isSet = true;
}

bool OAIProject::is_vcs_url_Set() const{
    return m_vcs_url_isSet;
}

bool OAIProject::is_vcs_url_Valid() const{
    return m_vcs_url_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campfire_notify_prefs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campfire_room_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campfire_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campfire_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_flags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flowdock_api_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_usable_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heroku_deploy_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hipchat_api_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hipchat_notify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hipchat_notify_prefs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hipchat_room_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irc_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irc_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irc_notify_prefs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irc_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irc_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irc_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reponame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_api_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_channel_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_notify_prefs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcs_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcs_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
