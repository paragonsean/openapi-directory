/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuild.h
 *
 * 
 */

#ifndef OAIBuild_H
#define OAIBuild_H

#include <QJsonObject>

#include "OAILifecycle.h"
#include "OAIPreviousBuild.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPreviousBuild;

class OAIBuild : public OAIObject {
public:
    OAIBuild();
    OAIBuild(QString json);
    ~OAIBuild() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBody() const;
    void setBody(const QString &body);
    bool is_body_Set() const;
    bool is_body_Valid() const;

    QString getBranch() const;
    void setBranch(const QString &branch);
    bool is_branch_Set() const;
    bool is_branch_Valid() const;

    qint32 getBuildTimeMillis() const;
    void setBuildTimeMillis(const qint32 &build_time_millis);
    bool is_build_time_millis_Set() const;
    bool is_build_time_millis_Valid() const;

    QString getBuildUrl() const;
    void setBuildUrl(const QString &build_url);
    bool is_build_url_Set() const;
    bool is_build_url_Valid() const;

    QString getCommitterEmail() const;
    void setCommitterEmail(const QString &committer_email);
    bool is_committer_email_Set() const;
    bool is_committer_email_Valid() const;

    QString getCommitterName() const;
    void setCommitterName(const QString &committer_name);
    bool is_committer_name_Set() const;
    bool is_committer_name_Valid() const;

    QString getDontBuild() const;
    void setDontBuild(const QString &dont_build);
    bool is_dont_build_Set() const;
    bool is_dont_build_Valid() const;

    OAILifecycle getLifecycle() const;
    void setLifecycle(const OAILifecycle &lifecycle);
    bool is_lifecycle_Set() const;
    bool is_lifecycle_Valid() const;

    OAIPreviousBuild getPrevious() const;
    void setPrevious(const OAIPreviousBuild &previous);
    bool is_previous_Set() const;
    bool is_previous_Valid() const;

    QDateTime getQueuedAt() const;
    void setQueuedAt(const QDateTime &queued_at);
    bool is_queued_at_Set() const;
    bool is_queued_at_Valid() const;

    QString getReponame() const;
    void setReponame(const QString &reponame);
    bool is_reponame_Set() const;
    bool is_reponame_Valid() const;

    qint32 getRetryOf() const;
    void setRetryOf(const qint32 &retry_of);
    bool is_retry_of_Set() const;
    bool is_retry_of_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getStopTime() const;
    void setStopTime(const QDateTime &stop_time);
    bool is_stop_time_Set() const;
    bool is_stop_time_Valid() const;

    QString getSubject() const;
    void setSubject(const QString &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    QString getVcsUrl() const;
    void setVcsUrl(const QString &vcs_url);
    bool is_vcs_url_Set() const;
    bool is_vcs_url_Valid() const;

    QString getWhy() const;
    void setWhy(const QString &why);
    bool is_why_Set() const;
    bool is_why_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_body;
    bool m_body_isSet;
    bool m_body_isValid;

    QString m_branch;
    bool m_branch_isSet;
    bool m_branch_isValid;

    qint32 m_build_time_millis;
    bool m_build_time_millis_isSet;
    bool m_build_time_millis_isValid;

    QString m_build_url;
    bool m_build_url_isSet;
    bool m_build_url_isValid;

    QString m_committer_email;
    bool m_committer_email_isSet;
    bool m_committer_email_isValid;

    QString m_committer_name;
    bool m_committer_name_isSet;
    bool m_committer_name_isValid;

    QString m_dont_build;
    bool m_dont_build_isSet;
    bool m_dont_build_isValid;

    OAILifecycle m_lifecycle;
    bool m_lifecycle_isSet;
    bool m_lifecycle_isValid;

    OAIPreviousBuild m_previous;
    bool m_previous_isSet;
    bool m_previous_isValid;

    QDateTime m_queued_at;
    bool m_queued_at_isSet;
    bool m_queued_at_isValid;

    QString m_reponame;
    bool m_reponame_isSet;
    bool m_reponame_isValid;

    qint32 m_retry_of;
    bool m_retry_of_isSet;
    bool m_retry_of_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_stop_time;
    bool m_stop_time_isSet;
    bool m_stop_time_isValid;

    QString m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    QString m_vcs_url;
    bool m_vcs_url_isSet;
    bool m_vcs_url_isValid;

    QString m_why;
    bool m_why_isSet;
    bool m_why_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuild)

#endif // OAIBuild_H
