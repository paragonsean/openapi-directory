/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProject.h
 *
 * 
 */

#ifndef OAIProject_H
#define OAIProject_H

#include <QJsonObject>

#include "OAIAws.h"
#include "OAIObject.h"
#include "OAIProject_feature_flags.h"
#include "OAIScope.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAws;
class OAIProject_feature_flags;

class OAIProject : public OAIObject {
public:
    OAIProject();
    OAIProject(QString json);
    ~OAIProject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAws getAws() const;
    void setAws(const OAIAws &aws);
    bool is_aws_Set() const;
    bool is_aws_Valid() const;

    OAIObject getBranches() const;
    void setBranches(const OAIObject &branches);
    bool is_branches_Set() const;
    bool is_branches_Valid() const;

    QString getCampfireNotifyPrefs() const;
    void setCampfireNotifyPrefs(const QString &campfire_notify_prefs);
    bool is_campfire_notify_prefs_Set() const;
    bool is_campfire_notify_prefs_Valid() const;

    QString getCampfireRoom() const;
    void setCampfireRoom(const QString &campfire_room);
    bool is_campfire_room_Set() const;
    bool is_campfire_room_Valid() const;

    QString getCampfireSubdomain() const;
    void setCampfireSubdomain(const QString &campfire_subdomain);
    bool is_campfire_subdomain_Set() const;
    bool is_campfire_subdomain_Valid() const;

    QString getCampfireToken() const;
    void setCampfireToken(const QString &campfire_token);
    bool is_campfire_token_Set() const;
    bool is_campfire_token_Valid() const;

    QString getCompile() const;
    void setCompile(const QString &compile);
    bool is_compile_Set() const;
    bool is_compile_Valid() const;

    QString getDefaultBranch() const;
    void setDefaultBranch(const QString &default_branch);
    bool is_default_branch_Set() const;
    bool is_default_branch_Valid() const;

    QString getDependencies() const;
    void setDependencies(const QString &dependencies);
    bool is_dependencies_Set() const;
    bool is_dependencies_Valid() const;

    QString getExtra() const;
    void setExtra(const QString &extra);
    bool is_extra_Set() const;
    bool is_extra_Valid() const;

    OAIProject_feature_flags getFeatureFlags() const;
    void setFeatureFlags(const OAIProject_feature_flags &feature_flags);
    bool is_feature_flags_Set() const;
    bool is_feature_flags_Valid() const;

    QString getFlowdockApiToken() const;
    void setFlowdockApiToken(const QString &flowdock_api_token);
    bool is_flowdock_api_token_Set() const;
    bool is_flowdock_api_token_Valid() const;

    bool isFollowed() const;
    void setFollowed(const bool &followed);
    bool is_followed_Set() const;
    bool is_followed_Valid() const;

    bool isHasUsableKey() const;
    void setHasUsableKey(const bool &has_usable_key);
    bool is_has_usable_key_Set() const;
    bool is_has_usable_key_Valid() const;

    QString getHerokuDeployUser() const;
    void setHerokuDeployUser(const QString &heroku_deploy_user);
    bool is_heroku_deploy_user_Set() const;
    bool is_heroku_deploy_user_Valid() const;

    QString getHipchatApiToken() const;
    void setHipchatApiToken(const QString &hipchat_api_token);
    bool is_hipchat_api_token_Set() const;
    bool is_hipchat_api_token_Valid() const;

    QString getHipchatNotify() const;
    void setHipchatNotify(const QString &hipchat_notify);
    bool is_hipchat_notify_Set() const;
    bool is_hipchat_notify_Valid() const;

    QString getHipchatNotifyPrefs() const;
    void setHipchatNotifyPrefs(const QString &hipchat_notify_prefs);
    bool is_hipchat_notify_prefs_Set() const;
    bool is_hipchat_notify_prefs_Valid() const;

    QString getHipchatRoom() const;
    void setHipchatRoom(const QString &hipchat_room);
    bool is_hipchat_room_Set() const;
    bool is_hipchat_room_Valid() const;

    QString getIrcChannel() const;
    void setIrcChannel(const QString &irc_channel);
    bool is_irc_channel_Set() const;
    bool is_irc_channel_Valid() const;

    QString getIrcKeyword() const;
    void setIrcKeyword(const QString &irc_keyword);
    bool is_irc_keyword_Set() const;
    bool is_irc_keyword_Valid() const;

    QString getIrcNotifyPrefs() const;
    void setIrcNotifyPrefs(const QString &irc_notify_prefs);
    bool is_irc_notify_prefs_Set() const;
    bool is_irc_notify_prefs_Valid() const;

    QString getIrcPassword() const;
    void setIrcPassword(const QString &irc_password);
    bool is_irc_password_Set() const;
    bool is_irc_password_Valid() const;

    QString getIrcServer() const;
    void setIrcServer(const QString &irc_server);
    bool is_irc_server_Set() const;
    bool is_irc_server_Valid() const;

    QString getIrcUsername() const;
    void setIrcUsername(const QString &irc_username);
    bool is_irc_username_Set() const;
    bool is_irc_username_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    bool isOss() const;
    void setOss(const bool &oss);
    bool is_oss_Set() const;
    bool is_oss_Valid() const;

    qint32 getParallel() const;
    void setParallel(const qint32 &parallel);
    bool is_parallel_Set() const;
    bool is_parallel_Valid() const;

    QString getReponame() const;
    void setReponame(const QString &reponame);
    bool is_reponame_Set() const;
    bool is_reponame_Valid() const;

    QList<OAIScope> getScopes() const;
    void setScopes(const QList<OAIScope> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    QString getSetup() const;
    void setSetup(const QString &setup);
    bool is_setup_Set() const;
    bool is_setup_Valid() const;

    QString getSlackApiToken() const;
    void setSlackApiToken(const QString &slack_api_token);
    bool is_slack_api_token_Set() const;
    bool is_slack_api_token_Valid() const;

    QString getSlackChannel() const;
    void setSlackChannel(const QString &slack_channel);
    bool is_slack_channel_Set() const;
    bool is_slack_channel_Valid() const;

    QString getSlackChannelOverride() const;
    void setSlackChannelOverride(const QString &slack_channel_override);
    bool is_slack_channel_override_Set() const;
    bool is_slack_channel_override_Valid() const;

    QString getSlackNotifyPrefs() const;
    void setSlackNotifyPrefs(const QString &slack_notify_prefs);
    bool is_slack_notify_prefs_Set() const;
    bool is_slack_notify_prefs_Valid() const;

    QString getSlackSubdomain() const;
    void setSlackSubdomain(const QString &slack_subdomain);
    bool is_slack_subdomain_Set() const;
    bool is_slack_subdomain_Valid() const;

    QString getSlackWebhookUrl() const;
    void setSlackWebhookUrl(const QString &slack_webhook_url);
    bool is_slack_webhook_url_Set() const;
    bool is_slack_webhook_url_Valid() const;

    QList<QString> getSshKeys() const;
    void setSshKeys(const QList<QString> &ssh_keys);
    bool is_ssh_keys_Set() const;
    bool is_ssh_keys_Valid() const;

    QString getTest() const;
    void setTest(const QString &test);
    bool is_test_Set() const;
    bool is_test_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    QString getVcsType() const;
    void setVcsType(const QString &vcs_type);
    bool is_vcs_type_Set() const;
    bool is_vcs_type_Valid() const;

    QString getVcsUrl() const;
    void setVcsUrl(const QString &vcs_url);
    bool is_vcs_url_Set() const;
    bool is_vcs_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAws m_aws;
    bool m_aws_isSet;
    bool m_aws_isValid;

    OAIObject m_branches;
    bool m_branches_isSet;
    bool m_branches_isValid;

    QString m_campfire_notify_prefs;
    bool m_campfire_notify_prefs_isSet;
    bool m_campfire_notify_prefs_isValid;

    QString m_campfire_room;
    bool m_campfire_room_isSet;
    bool m_campfire_room_isValid;

    QString m_campfire_subdomain;
    bool m_campfire_subdomain_isSet;
    bool m_campfire_subdomain_isValid;

    QString m_campfire_token;
    bool m_campfire_token_isSet;
    bool m_campfire_token_isValid;

    QString m_compile;
    bool m_compile_isSet;
    bool m_compile_isValid;

    QString m_default_branch;
    bool m_default_branch_isSet;
    bool m_default_branch_isValid;

    QString m_dependencies;
    bool m_dependencies_isSet;
    bool m_dependencies_isValid;

    QString m_extra;
    bool m_extra_isSet;
    bool m_extra_isValid;

    OAIProject_feature_flags m_feature_flags;
    bool m_feature_flags_isSet;
    bool m_feature_flags_isValid;

    QString m_flowdock_api_token;
    bool m_flowdock_api_token_isSet;
    bool m_flowdock_api_token_isValid;

    bool m_followed;
    bool m_followed_isSet;
    bool m_followed_isValid;

    bool m_has_usable_key;
    bool m_has_usable_key_isSet;
    bool m_has_usable_key_isValid;

    QString m_heroku_deploy_user;
    bool m_heroku_deploy_user_isSet;
    bool m_heroku_deploy_user_isValid;

    QString m_hipchat_api_token;
    bool m_hipchat_api_token_isSet;
    bool m_hipchat_api_token_isValid;

    QString m_hipchat_notify;
    bool m_hipchat_notify_isSet;
    bool m_hipchat_notify_isValid;

    QString m_hipchat_notify_prefs;
    bool m_hipchat_notify_prefs_isSet;
    bool m_hipchat_notify_prefs_isValid;

    QString m_hipchat_room;
    bool m_hipchat_room_isSet;
    bool m_hipchat_room_isValid;

    QString m_irc_channel;
    bool m_irc_channel_isSet;
    bool m_irc_channel_isValid;

    QString m_irc_keyword;
    bool m_irc_keyword_isSet;
    bool m_irc_keyword_isValid;

    QString m_irc_notify_prefs;
    bool m_irc_notify_prefs_isSet;
    bool m_irc_notify_prefs_isValid;

    QString m_irc_password;
    bool m_irc_password_isSet;
    bool m_irc_password_isValid;

    QString m_irc_server;
    bool m_irc_server_isSet;
    bool m_irc_server_isValid;

    QString m_irc_username;
    bool m_irc_username_isSet;
    bool m_irc_username_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    bool m_oss;
    bool m_oss_isSet;
    bool m_oss_isValid;

    qint32 m_parallel;
    bool m_parallel_isSet;
    bool m_parallel_isValid;

    QString m_reponame;
    bool m_reponame_isSet;
    bool m_reponame_isValid;

    QList<OAIScope> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    QString m_setup;
    bool m_setup_isSet;
    bool m_setup_isValid;

    QString m_slack_api_token;
    bool m_slack_api_token_isSet;
    bool m_slack_api_token_isValid;

    QString m_slack_channel;
    bool m_slack_channel_isSet;
    bool m_slack_channel_isValid;

    QString m_slack_channel_override;
    bool m_slack_channel_override_isSet;
    bool m_slack_channel_override_isValid;

    QString m_slack_notify_prefs;
    bool m_slack_notify_prefs_isSet;
    bool m_slack_notify_prefs_isValid;

    QString m_slack_subdomain;
    bool m_slack_subdomain_isSet;
    bool m_slack_subdomain_isValid;

    QString m_slack_webhook_url;
    bool m_slack_webhook_url_isSet;
    bool m_slack_webhook_url_isValid;

    QList<QString> m_ssh_keys;
    bool m_ssh_keys_isSet;
    bool m_ssh_keys_isValid;

    QString m_test;
    bool m_test_isSet;
    bool m_test_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    QString m_vcs_type;
    bool m_vcs_type_isSet;
    bool m_vcs_type_isValid;

    QString m_vcs_url;
    bool m_vcs_url_isSet;
    bool m_vcs_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProject)

#endif // OAIProject_H
