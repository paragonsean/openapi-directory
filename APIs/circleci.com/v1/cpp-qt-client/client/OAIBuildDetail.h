/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildDetail.h
 *
 * previous build
 */

#ifndef OAIBuildDetail_H
#define OAIBuildDetail_H

#include <QJsonObject>

#include "OAICommitDetail.h"
#include "OAIPreviousBuild.h"
#include "OAIUser.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICommitDetail;
class OAIPreviousBuild;
class OAIUser;

class OAIBuildDetail : public OAIObject {
public:
    OAIBuildDetail();
    OAIBuildDetail(QString json);
    ~OAIBuildDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICommitDetail> getAllCommitDetails() const;
    void setAllCommitDetails(const QList<OAICommitDetail> &all_commit_details);
    bool is_all_commit_details_Set() const;
    bool is_all_commit_details_Valid() const;

    QString getCompare() const;
    void setCompare(const QString &compare);
    bool is_compare_Set() const;
    bool is_compare_Valid() const;

    QString getJobName() const;
    void setJobName(const QString &job_name);
    bool is_job_name_Set() const;
    bool is_job_name_Valid() const;

    QJsonValue getNode() const;
    void setNode(const QJsonValue &node);
    bool is_node_Set() const;
    bool is_node_Valid() const;

    OAIPreviousBuild getPreviousSuccessfulBuild() const;
    void setPreviousSuccessfulBuild(const OAIPreviousBuild &previous_successful_build);
    bool is_previous_successful_build_Set() const;
    bool is_previous_successful_build_Valid() const;

    bool isRetries() const;
    void setRetries(const bool &retries);
    bool is_retries_Set() const;
    bool is_retries_Valid() const;

    bool isSshEnabled() const;
    void setSshEnabled(const bool &ssh_enabled);
    bool is_ssh_enabled_Set() const;
    bool is_ssh_enabled_Valid() const;

    bool isTimedout() const;
    void setTimedout(const bool &timedout);
    bool is_timedout_Set() const;
    bool is_timedout_Valid() const;

    QDateTime getUsageQueuedAt() const;
    void setUsageQueuedAt(const QDateTime &usage_queued_at);
    bool is_usage_queued_at_Set() const;
    bool is_usage_queued_at_Valid() const;

    OAIUser getUser() const;
    void setUser(const OAIUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICommitDetail> m_all_commit_details;
    bool m_all_commit_details_isSet;
    bool m_all_commit_details_isValid;

    QString m_compare;
    bool m_compare_isSet;
    bool m_compare_isValid;

    QString m_job_name;
    bool m_job_name_isSet;
    bool m_job_name_isValid;

    QJsonValue m_node;
    bool m_node_isSet;
    bool m_node_isValid;

    OAIPreviousBuild m_previous_successful_build;
    bool m_previous_successful_build_isSet;
    bool m_previous_successful_build_isValid;

    bool m_retries;
    bool m_retries_isSet;
    bool m_retries_isValid;

    bool m_ssh_enabled;
    bool m_ssh_enabled_isSet;
    bool m_ssh_enabled_isValid;

    bool m_timedout;
    bool m_timedout_isSet;
    bool m_timedout_isValid;

    QDateTime m_usage_queued_at;
    bool m_usage_queued_at_isSet;
    bool m_usage_queued_at_isValid;

    OAIUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildDetail)

#endif // OAIBuildDetail_H
