/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifact::OAIArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifact::OAIArtifact() {
    this->initializeModel();
}

OAIArtifact::~OAIArtifact() {}

void OAIArtifact::initializeModel() {

    m_node_index_isSet = false;
    m_node_index_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_pretty_path_isSet = false;
    m_pretty_path_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifact::fromJsonObject(QJsonObject json) {

    m_node_index_isValid = ::OpenAPI::fromJsonValue(m_node_index, json[QString("node_index")]);
    m_node_index_isSet = !json[QString("node_index")].isNull() && m_node_index_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_pretty_path_isValid = ::OpenAPI::fromJsonValue(m_pretty_path, json[QString("pretty_path")]);
    m_pretty_path_isSet = !json[QString("pretty_path")].isNull() && m_pretty_path_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_node_index_isSet) {
        obj.insert(QString("node_index"), ::OpenAPI::toJsonValue(m_node_index));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_pretty_path_isSet) {
        obj.insert(QString("pretty_path"), ::OpenAPI::toJsonValue(m_pretty_path));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIArtifact::getNodeIndex() const {
    return m_node_index;
}
void OAIArtifact::setNodeIndex(const qint32 &node_index) {
    m_node_index = node_index;
    m_node_index_isSet = true;
}

bool OAIArtifact::is_node_index_Set() const{
    return m_node_index_isSet;
}

bool OAIArtifact::is_node_index_Valid() const{
    return m_node_index_isValid;
}

QString OAIArtifact::getPath() const {
    return m_path;
}
void OAIArtifact::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIArtifact::is_path_Set() const{
    return m_path_isSet;
}

bool OAIArtifact::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIArtifact::getPrettyPath() const {
    return m_pretty_path;
}
void OAIArtifact::setPrettyPath(const QString &pretty_path) {
    m_pretty_path = pretty_path;
    m_pretty_path_isSet = true;
}

bool OAIArtifact::is_pretty_path_Set() const{
    return m_pretty_path_isSet;
}

bool OAIArtifact::is_pretty_path_Valid() const{
    return m_pretty_path_isValid;
}

QString OAIArtifact::getUrl() const {
    return m_url;
}
void OAIArtifact::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArtifact::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArtifact::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pretty_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
