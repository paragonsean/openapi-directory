/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITests::OAITests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITests::OAITests() {
    this->initializeModel();
}

OAITests::~OAITests() {}

void OAITests::initializeModel() {

    m_tests_isSet = false;
    m_tests_isValid = false;
}

void OAITests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITests::fromJsonObject(QJsonObject json) {

    m_tests_isValid = ::OpenAPI::fromJsonValue(m_tests, json[QString("tests")]);
    m_tests_isSet = !json[QString("tests")].isNull() && m_tests_isValid;
}

QString OAITests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITests::asJsonObject() const {
    QJsonObject obj;
    if (m_tests.size() > 0) {
        obj.insert(QString("tests"), ::OpenAPI::toJsonValue(m_tests));
    }
    return obj;
}

QList<OAITests_tests_inner> OAITests::getTests() const {
    return m_tests;
}
void OAITests::setTests(const QList<OAITests_tests_inner> &tests) {
    m_tests = tests;
    m_tests_isSet = true;
}

bool OAITests::is_tests_Set() const{
    return m_tests_isSet;
}

bool OAITests::is_tests_Valid() const{
    return m_tests_isValid;
}

bool OAITests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITests::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
