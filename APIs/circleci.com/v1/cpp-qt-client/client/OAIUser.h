/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * 
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAdmin() const;
    void setAdmin(const bool &admin);
    bool is_admin_Set() const;
    bool is_admin_Valid() const;

    QList<QString> getAllEmails() const;
    void setAllEmails(const QList<QString> &all_emails);
    bool is_all_emails_Set() const;
    bool is_all_emails_Valid() const;

    QString getAnalyticsId() const;
    void setAnalyticsId(const QString &analytics_id);
    bool is_analytics_id_Set() const;
    bool is_analytics_id_Valid() const;

    QString getAvatarUrl() const;
    void setAvatarUrl(const QString &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    QString getBasicEmailPrefs() const;
    void setBasicEmailPrefs(const QString &basic_email_prefs);
    bool is_basic_email_prefs_Set() const;
    bool is_basic_email_prefs_Valid() const;

    qint32 getBitbucket() const;
    void setBitbucket(const qint32 &bitbucket);
    bool is_bitbucket_Set() const;
    bool is_bitbucket_Valid() const;

    bool isBitbucketAuthorized() const;
    void setBitbucketAuthorized(const bool &bitbucket_authorized);
    bool is_bitbucket_authorized_Set() const;
    bool is_bitbucket_authorized_Valid() const;

    qint32 getContainers() const;
    void setContainers(const qint32 &containers);
    bool is_containers_Set() const;
    bool is_containers_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    qint32 getDaysLeftInTrial() const;
    void setDaysLeftInTrial(const qint32 &days_left_in_trial);
    bool is_days_left_in_trial_Set() const;
    bool is_days_left_in_trial_Valid() const;

    bool isDevAdmin() const;
    void setDevAdmin(const bool &dev_admin);
    bool is_dev_admin_Set() const;
    bool is_dev_admin_Valid() const;

    QList<QString> getEnrolledBetas() const;
    void setEnrolledBetas(const QList<QString> &enrolled_betas);
    bool is_enrolled_betas_Set() const;
    bool is_enrolled_betas_Valid() const;

    qint32 getGithubId() const;
    void setGithubId(const qint32 &github_id);
    bool is_github_id_Set() const;
    bool is_github_id_Valid() const;

    QList<QString> getGithubOauthScopes() const;
    void setGithubOauthScopes(const QList<QString> &github_oauth_scopes);
    bool is_github_oauth_scopes_Set() const;
    bool is_github_oauth_scopes_Valid() const;

    qint32 getGravatarId() const;
    void setGravatarId(const qint32 &gravatar_id);
    bool is_gravatar_id_Set() const;
    bool is_gravatar_id_Valid() const;

    QString getHerokuApiKey() const;
    void setHerokuApiKey(const QString &heroku_api_key);
    bool is_heroku_api_key_Set() const;
    bool is_heroku_api_key_Valid() const;

    bool isInBetaProgram() const;
    void setInBetaProgram(const bool &in_beta_program);
    bool is_in_beta_program_Set() const;
    bool is_in_beta_program_Valid() const;

    QString getLogin() const;
    void setLogin(const QString &login);
    bool is_login_Set() const;
    bool is_login_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIObject getOrganizationPrefs() const;
    void setOrganizationPrefs(const OAIObject &organization_prefs);
    bool is_organization_prefs_Set() const;
    bool is_organization_prefs_Valid() const;

    qint32 getParallelism() const;
    void setParallelism(const qint32 &parallelism);
    bool is_parallelism_Set() const;
    bool is_parallelism_Valid() const;

    QString getPlan() const;
    void setPlan(const QString &plan);
    bool is_plan_Set() const;
    bool is_plan_Valid() const;

    OAIObject getProjects() const;
    void setProjects(const OAIObject &projects);
    bool is_projects_Set() const;
    bool is_projects_Valid() const;

    QString getPusherId() const;
    void setPusherId(const QString &pusher_id);
    bool is_pusher_id_Set() const;
    bool is_pusher_id_Valid() const;

    QString getSelectedEmail() const;
    void setSelectedEmail(const QString &selected_email);
    bool is_selected_email_Set() const;
    bool is_selected_email_Valid() const;

    qint32 getSignInCount() const;
    void setSignInCount(const qint32 &sign_in_count);
    bool is_sign_in_count_Set() const;
    bool is_sign_in_count_Valid() const;

    QDateTime getTrialEnd() const;
    void setTrialEnd(const QDateTime &trial_end);
    bool is_trial_end_Set() const;
    bool is_trial_end_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_admin;
    bool m_admin_isSet;
    bool m_admin_isValid;

    QList<QString> m_all_emails;
    bool m_all_emails_isSet;
    bool m_all_emails_isValid;

    QString m_analytics_id;
    bool m_analytics_id_isSet;
    bool m_analytics_id_isValid;

    QString m_avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    QString m_basic_email_prefs;
    bool m_basic_email_prefs_isSet;
    bool m_basic_email_prefs_isValid;

    qint32 m_bitbucket;
    bool m_bitbucket_isSet;
    bool m_bitbucket_isValid;

    bool m_bitbucket_authorized;
    bool m_bitbucket_authorized_isSet;
    bool m_bitbucket_authorized_isValid;

    qint32 m_containers;
    bool m_containers_isSet;
    bool m_containers_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    qint32 m_days_left_in_trial;
    bool m_days_left_in_trial_isSet;
    bool m_days_left_in_trial_isValid;

    bool m_dev_admin;
    bool m_dev_admin_isSet;
    bool m_dev_admin_isValid;

    QList<QString> m_enrolled_betas;
    bool m_enrolled_betas_isSet;
    bool m_enrolled_betas_isValid;

    qint32 m_github_id;
    bool m_github_id_isSet;
    bool m_github_id_isValid;

    QList<QString> m_github_oauth_scopes;
    bool m_github_oauth_scopes_isSet;
    bool m_github_oauth_scopes_isValid;

    qint32 m_gravatar_id;
    bool m_gravatar_id_isSet;
    bool m_gravatar_id_isValid;

    QString m_heroku_api_key;
    bool m_heroku_api_key_isSet;
    bool m_heroku_api_key_isValid;

    bool m_in_beta_program;
    bool m_in_beta_program_isSet;
    bool m_in_beta_program_isValid;

    QString m_login;
    bool m_login_isSet;
    bool m_login_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIObject m_organization_prefs;
    bool m_organization_prefs_isSet;
    bool m_organization_prefs_isValid;

    qint32 m_parallelism;
    bool m_parallelism_isSet;
    bool m_parallelism_isValid;

    QString m_plan;
    bool m_plan_isSet;
    bool m_plan_isValid;

    OAIObject m_projects;
    bool m_projects_isSet;
    bool m_projects_isValid;

    QString m_pusher_id;
    bool m_pusher_id_isSet;
    bool m_pusher_id_isValid;

    QString m_selected_email;
    bool m_selected_email_isSet;
    bool m_selected_email_isValid;

    qint32 m_sign_in_count;
    bool m_sign_in_count_isSet;
    bool m_sign_in_count_isValid;

    QDateTime m_trial_end;
    bool m_trial_end_isSet;
    bool m_trial_end_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
