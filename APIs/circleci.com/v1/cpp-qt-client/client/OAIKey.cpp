/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKey::OAIKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKey::OAIKey() {
    this->initializeModel();
}

OAIKey::~OAIKey() {}

void OAIKey::initializeModel() {

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKey::fromJsonObject(QJsonObject json) {

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("public_key")]);
    m_public_key_isSet = !json[QString("public_key")].isNull() && m_public_key_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKey::asJsonObject() const {
    QJsonObject obj;
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("public_key"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIKey::getFingerprint() const {
    return m_fingerprint;
}
void OAIKey::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIKey::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIKey::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

bool OAIKey::isPreferred() const {
    return m_preferred;
}
void OAIKey::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIKey::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIKey::is_preferred_Valid() const{
    return m_preferred_isValid;
}

QString OAIKey::getPublicKey() const {
    return m_public_key;
}
void OAIKey::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIKey::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIKey::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QDateTime OAIKey::getTime() const {
    return m_time;
}
void OAIKey::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIKey::is_time_Set() const{
    return m_time_isSet;
}

bool OAIKey::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIKey::getType() const {
    return m_type;
}
void OAIKey::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIKey::is_type_Set() const{
    return m_type_isSet;
}

bool OAIKey::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
