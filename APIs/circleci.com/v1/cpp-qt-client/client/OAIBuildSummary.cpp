/**
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildSummary::OAIBuildSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildSummary::OAIBuildSummary() {
    this->initializeModel();
}

OAIBuildSummary::~OAIBuildSummary() {}

void OAIBuildSummary::initializeModel() {

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_build_num_isSet = false;
    m_build_num_isValid = false;

    m_outcome_isSet = false;
    m_outcome_isValid = false;

    m_pushed_at_isSet = false;
    m_pushed_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vcs_revision_isSet = false;
    m_vcs_revision_isValid = false;
}

void OAIBuildSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildSummary::fromJsonObject(QJsonObject json) {

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_build_num_isValid = ::OpenAPI::fromJsonValue(m_build_num, json[QString("build_num")]);
    m_build_num_isSet = !json[QString("build_num")].isNull() && m_build_num_isValid;

    m_outcome_isValid = ::OpenAPI::fromJsonValue(m_outcome, json[QString("outcome")]);
    m_outcome_isSet = !json[QString("outcome")].isNull() && m_outcome_isValid;

    m_pushed_at_isValid = ::OpenAPI::fromJsonValue(m_pushed_at, json[QString("pushed_at")]);
    m_pushed_at_isSet = !json[QString("pushed_at")].isNull() && m_pushed_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vcs_revision_isValid = ::OpenAPI::fromJsonValue(m_vcs_revision, json[QString("vcs_revision")]);
    m_vcs_revision_isSet = !json[QString("vcs_revision")].isNull() && m_vcs_revision_isValid;
}

QString OAIBuildSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_build_num_isSet) {
        obj.insert(QString("build_num"), ::OpenAPI::toJsonValue(m_build_num));
    }
    if (m_outcome.isSet()) {
        obj.insert(QString("outcome"), ::OpenAPI::toJsonValue(m_outcome));
    }
    if (m_pushed_at_isSet) {
        obj.insert(QString("pushed_at"), ::OpenAPI::toJsonValue(m_pushed_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vcs_revision_isSet) {
        obj.insert(QString("vcs_revision"), ::OpenAPI::toJsonValue(m_vcs_revision));
    }
    return obj;
}

QDateTime OAIBuildSummary::getAddedAt() const {
    return m_added_at;
}
void OAIBuildSummary::setAddedAt(const QDateTime &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAIBuildSummary::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAIBuildSummary::is_added_at_Valid() const{
    return m_added_at_isValid;
}

qint32 OAIBuildSummary::getBuildNum() const {
    return m_build_num;
}
void OAIBuildSummary::setBuildNum(const qint32 &build_num) {
    m_build_num = build_num;
    m_build_num_isSet = true;
}

bool OAIBuildSummary::is_build_num_Set() const{
    return m_build_num_isSet;
}

bool OAIBuildSummary::is_build_num_Valid() const{
    return m_build_num_isValid;
}

OAIOutcome OAIBuildSummary::getOutcome() const {
    return m_outcome;
}
void OAIBuildSummary::setOutcome(const OAIOutcome &outcome) {
    m_outcome = outcome;
    m_outcome_isSet = true;
}

bool OAIBuildSummary::is_outcome_Set() const{
    return m_outcome_isSet;
}

bool OAIBuildSummary::is_outcome_Valid() const{
    return m_outcome_isValid;
}

QDateTime OAIBuildSummary::getPushedAt() const {
    return m_pushed_at;
}
void OAIBuildSummary::setPushedAt(const QDateTime &pushed_at) {
    m_pushed_at = pushed_at;
    m_pushed_at_isSet = true;
}

bool OAIBuildSummary::is_pushed_at_Set() const{
    return m_pushed_at_isSet;
}

bool OAIBuildSummary::is_pushed_at_Valid() const{
    return m_pushed_at_isValid;
}

OAIStatus OAIBuildSummary::getStatus() const {
    return m_status;
}
void OAIBuildSummary::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBuildSummary::getVcsRevision() const {
    return m_vcs_revision;
}
void OAIBuildSummary::setVcsRevision(const QString &vcs_revision) {
    m_vcs_revision = vcs_revision;
    m_vcs_revision_isSet = true;
}

bool OAIBuildSummary::is_vcs_revision_Set() const{
    return m_vcs_revision_isSet;
}

bool OAIBuildSummary::is_vcs_revision_Valid() const{
    return m_vcs_revision_isValid;
}

bool OAIBuildSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outcome.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pushed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcs_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
