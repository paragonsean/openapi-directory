/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:25.013031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_ALL_EMAILS = "all_emails";
  @SerializedName(SERIALIZED_NAME_ALL_EMAILS)
  private List<String> allEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANALYTICS_ID = "analytics_id";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_ID)
  private String analyticsId;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private URI avatarUrl;

  public static final String SERIALIZED_NAME_BASIC_EMAIL_PREFS = "basic_email_prefs";
  @SerializedName(SERIALIZED_NAME_BASIC_EMAIL_PREFS)
  private String basicEmailPrefs;

  public static final String SERIALIZED_NAME_BITBUCKET = "bitbucket";
  @SerializedName(SERIALIZED_NAME_BITBUCKET)
  private Integer bitbucket;

  public static final String SERIALIZED_NAME_BITBUCKET_AUTHORIZED = "bitbucket_authorized";
  @SerializedName(SERIALIZED_NAME_BITBUCKET_AUTHORIZED)
  private Boolean bitbucketAuthorized;

  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private Integer containers;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DAYS_LEFT_IN_TRIAL = "days_left_in_trial";
  @SerializedName(SERIALIZED_NAME_DAYS_LEFT_IN_TRIAL)
  private Integer daysLeftInTrial;

  public static final String SERIALIZED_NAME_DEV_ADMIN = "dev_admin";
  @SerializedName(SERIALIZED_NAME_DEV_ADMIN)
  private Boolean devAdmin;

  public static final String SERIALIZED_NAME_ENROLLED_BETAS = "enrolled_betas";
  @SerializedName(SERIALIZED_NAME_ENROLLED_BETAS)
  private List<String> enrolledBetas = new ArrayList<>();

  public static final String SERIALIZED_NAME_GITHUB_ID = "github_id";
  @SerializedName(SERIALIZED_NAME_GITHUB_ID)
  private Integer githubId;

  public static final String SERIALIZED_NAME_GITHUB_OAUTH_SCOPES = "github_oauth_scopes";
  @SerializedName(SERIALIZED_NAME_GITHUB_OAUTH_SCOPES)
  private List<String> githubOauthScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRAVATAR_ID = "gravatar_id";
  @SerializedName(SERIALIZED_NAME_GRAVATAR_ID)
  private Integer gravatarId;

  public static final String SERIALIZED_NAME_HEROKU_API_KEY = "heroku_api_key";
  @SerializedName(SERIALIZED_NAME_HEROKU_API_KEY)
  private String herokuApiKey;

  public static final String SERIALIZED_NAME_IN_BETA_PROGRAM = "in_beta_program";
  @SerializedName(SERIALIZED_NAME_IN_BETA_PROGRAM)
  private Boolean inBetaProgram;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION_PREFS = "organization_prefs";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_PREFS)
  private Object organizationPrefs;

  public static final String SERIALIZED_NAME_PARALLELISM = "parallelism";
  @SerializedName(SERIALIZED_NAME_PARALLELISM)
  private Integer parallelism;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private Object projects;

  public static final String SERIALIZED_NAME_PUSHER_ID = "pusher_id";
  @SerializedName(SERIALIZED_NAME_PUSHER_ID)
  private String pusherId;

  public static final String SERIALIZED_NAME_SELECTED_EMAIL = "selected_email";
  @SerializedName(SERIALIZED_NAME_SELECTED_EMAIL)
  private String selectedEmail;

  public static final String SERIALIZED_NAME_SIGN_IN_COUNT = "sign_in_count";
  @SerializedName(SERIALIZED_NAME_SIGN_IN_COUNT)
  private Integer signInCount;

  public static final String SERIALIZED_NAME_TRIAL_END = "trial_end";
  @SerializedName(SERIALIZED_NAME_TRIAL_END)
  private OffsetDateTime trialEnd;

  public User() {
  }

  public User admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

  /**
   * Get admin
   * @return admin
   */
  @javax.annotation.Nullable
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public User allEmails(List<String> allEmails) {
    this.allEmails = allEmails;
    return this;
  }

  public User addAllEmailsItem(String allEmailsItem) {
    if (this.allEmails == null) {
      this.allEmails = new ArrayList<>();
    }
    this.allEmails.add(allEmailsItem);
    return this;
  }

  /**
   * Get allEmails
   * @return allEmails
   */
  @javax.annotation.Nullable
  public List<String> getAllEmails() {
    return allEmails;
  }

  public void setAllEmails(List<String> allEmails) {
    this.allEmails = allEmails;
  }


  public User analyticsId(String analyticsId) {
    this.analyticsId = analyticsId;
    return this;
  }

  /**
   * Get analyticsId
   * @return analyticsId
   */
  @javax.annotation.Nullable
  public String getAnalyticsId() {
    return analyticsId;
  }

  public void setAnalyticsId(String analyticsId) {
    this.analyticsId = analyticsId;
  }


  public User avatarUrl(URI avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * Get avatarUrl
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public URI getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(URI avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public User basicEmailPrefs(String basicEmailPrefs) {
    this.basicEmailPrefs = basicEmailPrefs;
    return this;
  }

  /**
   * Get basicEmailPrefs
   * @return basicEmailPrefs
   */
  @javax.annotation.Nullable
  public String getBasicEmailPrefs() {
    return basicEmailPrefs;
  }

  public void setBasicEmailPrefs(String basicEmailPrefs) {
    this.basicEmailPrefs = basicEmailPrefs;
  }


  public User bitbucket(Integer bitbucket) {
    this.bitbucket = bitbucket;
    return this;
  }

  /**
   * Get bitbucket
   * @return bitbucket
   */
  @javax.annotation.Nullable
  public Integer getBitbucket() {
    return bitbucket;
  }

  public void setBitbucket(Integer bitbucket) {
    this.bitbucket = bitbucket;
  }


  public User bitbucketAuthorized(Boolean bitbucketAuthorized) {
    this.bitbucketAuthorized = bitbucketAuthorized;
    return this;
  }

  /**
   * Get bitbucketAuthorized
   * @return bitbucketAuthorized
   */
  @javax.annotation.Nullable
  public Boolean getBitbucketAuthorized() {
    return bitbucketAuthorized;
  }

  public void setBitbucketAuthorized(Boolean bitbucketAuthorized) {
    this.bitbucketAuthorized = bitbucketAuthorized;
  }


  public User containers(Integer containers) {
    this.containers = containers;
    return this;
  }

  /**
   * Get containers
   * @return containers
   */
  @javax.annotation.Nullable
  public Integer getContainers() {
    return containers;
  }

  public void setContainers(Integer containers) {
    this.containers = containers;
  }


  public User createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public User daysLeftInTrial(Integer daysLeftInTrial) {
    this.daysLeftInTrial = daysLeftInTrial;
    return this;
  }

  /**
   * Get daysLeftInTrial
   * @return daysLeftInTrial
   */
  @javax.annotation.Nullable
  public Integer getDaysLeftInTrial() {
    return daysLeftInTrial;
  }

  public void setDaysLeftInTrial(Integer daysLeftInTrial) {
    this.daysLeftInTrial = daysLeftInTrial;
  }


  public User devAdmin(Boolean devAdmin) {
    this.devAdmin = devAdmin;
    return this;
  }

  /**
   * Get devAdmin
   * @return devAdmin
   */
  @javax.annotation.Nullable
  public Boolean getDevAdmin() {
    return devAdmin;
  }

  public void setDevAdmin(Boolean devAdmin) {
    this.devAdmin = devAdmin;
  }


  public User enrolledBetas(List<String> enrolledBetas) {
    this.enrolledBetas = enrolledBetas;
    return this;
  }

  public User addEnrolledBetasItem(String enrolledBetasItem) {
    if (this.enrolledBetas == null) {
      this.enrolledBetas = new ArrayList<>();
    }
    this.enrolledBetas.add(enrolledBetasItem);
    return this;
  }

  /**
   * Get enrolledBetas
   * @return enrolledBetas
   */
  @javax.annotation.Nullable
  public List<String> getEnrolledBetas() {
    return enrolledBetas;
  }

  public void setEnrolledBetas(List<String> enrolledBetas) {
    this.enrolledBetas = enrolledBetas;
  }


  public User githubId(Integer githubId) {
    this.githubId = githubId;
    return this;
  }

  /**
   * Get githubId
   * @return githubId
   */
  @javax.annotation.Nullable
  public Integer getGithubId() {
    return githubId;
  }

  public void setGithubId(Integer githubId) {
    this.githubId = githubId;
  }


  public User githubOauthScopes(List<String> githubOauthScopes) {
    this.githubOauthScopes = githubOauthScopes;
    return this;
  }

  public User addGithubOauthScopesItem(String githubOauthScopesItem) {
    if (this.githubOauthScopes == null) {
      this.githubOauthScopes = new ArrayList<>();
    }
    this.githubOauthScopes.add(githubOauthScopesItem);
    return this;
  }

  /**
   * Get githubOauthScopes
   * @return githubOauthScopes
   */
  @javax.annotation.Nullable
  public List<String> getGithubOauthScopes() {
    return githubOauthScopes;
  }

  public void setGithubOauthScopes(List<String> githubOauthScopes) {
    this.githubOauthScopes = githubOauthScopes;
  }


  public User gravatarId(Integer gravatarId) {
    this.gravatarId = gravatarId;
    return this;
  }

  /**
   * Get gravatarId
   * @return gravatarId
   */
  @javax.annotation.Nullable
  public Integer getGravatarId() {
    return gravatarId;
  }

  public void setGravatarId(Integer gravatarId) {
    this.gravatarId = gravatarId;
  }


  public User herokuApiKey(String herokuApiKey) {
    this.herokuApiKey = herokuApiKey;
    return this;
  }

  /**
   * Get herokuApiKey
   * @return herokuApiKey
   */
  @javax.annotation.Nullable
  public String getHerokuApiKey() {
    return herokuApiKey;
  }

  public void setHerokuApiKey(String herokuApiKey) {
    this.herokuApiKey = herokuApiKey;
  }


  public User inBetaProgram(Boolean inBetaProgram) {
    this.inBetaProgram = inBetaProgram;
    return this;
  }

  /**
   * Get inBetaProgram
   * @return inBetaProgram
   */
  @javax.annotation.Nullable
  public Boolean getInBetaProgram() {
    return inBetaProgram;
  }

  public void setInBetaProgram(Boolean inBetaProgram) {
    this.inBetaProgram = inBetaProgram;
  }


  public User login(String login) {
    this.login = login;
    return this;
  }

  /**
   * Get login
   * @return login
   */
  @javax.annotation.Nullable
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User organizationPrefs(Object organizationPrefs) {
    this.organizationPrefs = organizationPrefs;
    return this;
  }

  /**
   * Get organizationPrefs
   * @return organizationPrefs
   */
  @javax.annotation.Nullable
  public Object getOrganizationPrefs() {
    return organizationPrefs;
  }

  public void setOrganizationPrefs(Object organizationPrefs) {
    this.organizationPrefs = organizationPrefs;
  }


  public User parallelism(Integer parallelism) {
    this.parallelism = parallelism;
    return this;
  }

  /**
   * Get parallelism
   * @return parallelism
   */
  @javax.annotation.Nullable
  public Integer getParallelism() {
    return parallelism;
  }

  public void setParallelism(Integer parallelism) {
    this.parallelism = parallelism;
  }


  public User plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public User projects(Object projects) {
    this.projects = projects;
    return this;
  }

  /**
   * Get projects
   * @return projects
   */
  @javax.annotation.Nullable
  public Object getProjects() {
    return projects;
  }

  public void setProjects(Object projects) {
    this.projects = projects;
  }


  public User pusherId(String pusherId) {
    this.pusherId = pusherId;
    return this;
  }

  /**
   * Get pusherId
   * @return pusherId
   */
  @javax.annotation.Nullable
  public String getPusherId() {
    return pusherId;
  }

  public void setPusherId(String pusherId) {
    this.pusherId = pusherId;
  }


  public User selectedEmail(String selectedEmail) {
    this.selectedEmail = selectedEmail;
    return this;
  }

  /**
   * Get selectedEmail
   * @return selectedEmail
   */
  @javax.annotation.Nullable
  public String getSelectedEmail() {
    return selectedEmail;
  }

  public void setSelectedEmail(String selectedEmail) {
    this.selectedEmail = selectedEmail;
  }


  public User signInCount(Integer signInCount) {
    this.signInCount = signInCount;
    return this;
  }

  /**
   * Get signInCount
   * @return signInCount
   */
  @javax.annotation.Nullable
  public Integer getSignInCount() {
    return signInCount;
  }

  public void setSignInCount(Integer signInCount) {
    this.signInCount = signInCount;
  }


  public User trialEnd(OffsetDateTime trialEnd) {
    this.trialEnd = trialEnd;
    return this;
  }

  /**
   * Get trialEnd
   * @return trialEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTrialEnd() {
    return trialEnd;
  }

  public void setTrialEnd(OffsetDateTime trialEnd) {
    this.trialEnd = trialEnd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.admin, user.admin) &&
        Objects.equals(this.allEmails, user.allEmails) &&
        Objects.equals(this.analyticsId, user.analyticsId) &&
        Objects.equals(this.avatarUrl, user.avatarUrl) &&
        Objects.equals(this.basicEmailPrefs, user.basicEmailPrefs) &&
        Objects.equals(this.bitbucket, user.bitbucket) &&
        Objects.equals(this.bitbucketAuthorized, user.bitbucketAuthorized) &&
        Objects.equals(this.containers, user.containers) &&
        Objects.equals(this.createdAt, user.createdAt) &&
        Objects.equals(this.daysLeftInTrial, user.daysLeftInTrial) &&
        Objects.equals(this.devAdmin, user.devAdmin) &&
        Objects.equals(this.enrolledBetas, user.enrolledBetas) &&
        Objects.equals(this.githubId, user.githubId) &&
        Objects.equals(this.githubOauthScopes, user.githubOauthScopes) &&
        Objects.equals(this.gravatarId, user.gravatarId) &&
        Objects.equals(this.herokuApiKey, user.herokuApiKey) &&
        Objects.equals(this.inBetaProgram, user.inBetaProgram) &&
        Objects.equals(this.login, user.login) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.organizationPrefs, user.organizationPrefs) &&
        Objects.equals(this.parallelism, user.parallelism) &&
        Objects.equals(this.plan, user.plan) &&
        Objects.equals(this.projects, user.projects) &&
        Objects.equals(this.pusherId, user.pusherId) &&
        Objects.equals(this.selectedEmail, user.selectedEmail) &&
        Objects.equals(this.signInCount, user.signInCount) &&
        Objects.equals(this.trialEnd, user.trialEnd);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, allEmails, analyticsId, avatarUrl, basicEmailPrefs, bitbucket, bitbucketAuthorized, containers, createdAt, daysLeftInTrial, devAdmin, enrolledBetas, githubId, githubOauthScopes, gravatarId, herokuApiKey, inBetaProgram, login, name, organizationPrefs, parallelism, plan, projects, pusherId, selectedEmail, signInCount, trialEnd);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    allEmails: ").append(toIndentedString(allEmails)).append("\n");
    sb.append("    analyticsId: ").append(toIndentedString(analyticsId)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    basicEmailPrefs: ").append(toIndentedString(basicEmailPrefs)).append("\n");
    sb.append("    bitbucket: ").append(toIndentedString(bitbucket)).append("\n");
    sb.append("    bitbucketAuthorized: ").append(toIndentedString(bitbucketAuthorized)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    daysLeftInTrial: ").append(toIndentedString(daysLeftInTrial)).append("\n");
    sb.append("    devAdmin: ").append(toIndentedString(devAdmin)).append("\n");
    sb.append("    enrolledBetas: ").append(toIndentedString(enrolledBetas)).append("\n");
    sb.append("    githubId: ").append(toIndentedString(githubId)).append("\n");
    sb.append("    githubOauthScopes: ").append(toIndentedString(githubOauthScopes)).append("\n");
    sb.append("    gravatarId: ").append(toIndentedString(gravatarId)).append("\n");
    sb.append("    herokuApiKey: ").append(toIndentedString(herokuApiKey)).append("\n");
    sb.append("    inBetaProgram: ").append(toIndentedString(inBetaProgram)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationPrefs: ").append(toIndentedString(organizationPrefs)).append("\n");
    sb.append("    parallelism: ").append(toIndentedString(parallelism)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    pusherId: ").append(toIndentedString(pusherId)).append("\n");
    sb.append("    selectedEmail: ").append(toIndentedString(selectedEmail)).append("\n");
    sb.append("    signInCount: ").append(toIndentedString(signInCount)).append("\n");
    sb.append("    trialEnd: ").append(toIndentedString(trialEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("all_emails");
    openapiFields.add("analytics_id");
    openapiFields.add("avatar_url");
    openapiFields.add("basic_email_prefs");
    openapiFields.add("bitbucket");
    openapiFields.add("bitbucket_authorized");
    openapiFields.add("containers");
    openapiFields.add("created_at");
    openapiFields.add("days_left_in_trial");
    openapiFields.add("dev_admin");
    openapiFields.add("enrolled_betas");
    openapiFields.add("github_id");
    openapiFields.add("github_oauth_scopes");
    openapiFields.add("gravatar_id");
    openapiFields.add("heroku_api_key");
    openapiFields.add("in_beta_program");
    openapiFields.add("login");
    openapiFields.add("name");
    openapiFields.add("organization_prefs");
    openapiFields.add("parallelism");
    openapiFields.add("plan");
    openapiFields.add("projects");
    openapiFields.add("pusher_id");
    openapiFields.add("selected_email");
    openapiFields.add("sign_in_count");
    openapiFields.add("trial_end");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("all_emails") != null && !jsonObj.get("all_emails").isJsonNull() && !jsonObj.get("all_emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `all_emails` to be an array in the JSON string but got `%s`", jsonObj.get("all_emails").toString()));
      }
      if ((jsonObj.get("analytics_id") != null && !jsonObj.get("analytics_id").isJsonNull()) && !jsonObj.get("analytics_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analytics_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analytics_id").toString()));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("basic_email_prefs") != null && !jsonObj.get("basic_email_prefs").isJsonNull()) && !jsonObj.get("basic_email_prefs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basic_email_prefs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basic_email_prefs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enrolled_betas") != null && !jsonObj.get("enrolled_betas").isJsonNull() && !jsonObj.get("enrolled_betas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrolled_betas` to be an array in the JSON string but got `%s`", jsonObj.get("enrolled_betas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("github_oauth_scopes") != null && !jsonObj.get("github_oauth_scopes").isJsonNull() && !jsonObj.get("github_oauth_scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `github_oauth_scopes` to be an array in the JSON string but got `%s`", jsonObj.get("github_oauth_scopes").toString()));
      }
      if ((jsonObj.get("heroku_api_key") != null && !jsonObj.get("heroku_api_key").isJsonNull()) && !jsonObj.get("heroku_api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heroku_api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heroku_api_key").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("pusher_id") != null && !jsonObj.get("pusher_id").isJsonNull()) && !jsonObj.get("pusher_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pusher_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pusher_id").toString()));
      }
      if ((jsonObj.get("selected_email") != null && !jsonObj.get("selected_email").isJsonNull()) && !jsonObj.get("selected_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selected_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

