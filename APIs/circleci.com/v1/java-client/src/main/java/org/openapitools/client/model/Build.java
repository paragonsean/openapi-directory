/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Lifecycle;
import org.openapitools.client.model.PreviousBuild;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Build
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:25.013031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Build {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_BUILD_TIME_MILLIS = "build_time_millis";
  @SerializedName(SERIALIZED_NAME_BUILD_TIME_MILLIS)
  private Integer buildTimeMillis;

  public static final String SERIALIZED_NAME_BUILD_URL = "build_url";
  @SerializedName(SERIALIZED_NAME_BUILD_URL)
  private URI buildUrl;

  public static final String SERIALIZED_NAME_COMMITTER_EMAIL = "committer_email";
  @SerializedName(SERIALIZED_NAME_COMMITTER_EMAIL)
  private String committerEmail;

  public static final String SERIALIZED_NAME_COMMITTER_NAME = "committer_name";
  @SerializedName(SERIALIZED_NAME_COMMITTER_NAME)
  private String committerName;

  public static final String SERIALIZED_NAME_DONT_BUILD = "dont_build";
  @SerializedName(SERIALIZED_NAME_DONT_BUILD)
  private String dontBuild;

  public static final String SERIALIZED_NAME_LIFECYCLE = "lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private Lifecycle lifecycle;

  public static final String SERIALIZED_NAME_PREVIOUS = "previous";
  @SerializedName(SERIALIZED_NAME_PREVIOUS)
  private PreviousBuild previous;

  public static final String SERIALIZED_NAME_QUEUED_AT = "queued_at";
  @SerializedName(SERIALIZED_NAME_QUEUED_AT)
  private OffsetDateTime queuedAt;

  public static final String SERIALIZED_NAME_REPONAME = "reponame";
  @SerializedName(SERIALIZED_NAME_REPONAME)
  private String reponame;

  public static final String SERIALIZED_NAME_RETRY_OF = "retry_of";
  @SerializedName(SERIALIZED_NAME_RETRY_OF)
  private Integer retryOf;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STOP_TIME = "stop_time";
  @SerializedName(SERIALIZED_NAME_STOP_TIME)
  private OffsetDateTime stopTime;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VCS_URL = "vcs_url";
  @SerializedName(SERIALIZED_NAME_VCS_URL)
  private URI vcsUrl;

  public static final String SERIALIZED_NAME_WHY = "why";
  @SerializedName(SERIALIZED_NAME_WHY)
  private String why;

  public Build() {
  }

  public Build body(String body) {
    this.body = body;
    return this;
  }

  /**
   * commit message body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public Build branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public Build buildTimeMillis(Integer buildTimeMillis) {
    this.buildTimeMillis = buildTimeMillis;
    return this;
  }

  /**
   * Get buildTimeMillis
   * @return buildTimeMillis
   */
  @javax.annotation.Nullable
  public Integer getBuildTimeMillis() {
    return buildTimeMillis;
  }

  public void setBuildTimeMillis(Integer buildTimeMillis) {
    this.buildTimeMillis = buildTimeMillis;
  }


  public Build buildUrl(URI buildUrl) {
    this.buildUrl = buildUrl;
    return this;
  }

  /**
   * Get buildUrl
   * @return buildUrl
   */
  @javax.annotation.Nullable
  public URI getBuildUrl() {
    return buildUrl;
  }

  public void setBuildUrl(URI buildUrl) {
    this.buildUrl = buildUrl;
  }


  public Build committerEmail(String committerEmail) {
    this.committerEmail = committerEmail;
    return this;
  }

  /**
   * Get committerEmail
   * @return committerEmail
   */
  @javax.annotation.Nullable
  public String getCommitterEmail() {
    return committerEmail;
  }

  public void setCommitterEmail(String committerEmail) {
    this.committerEmail = committerEmail;
  }


  public Build committerName(String committerName) {
    this.committerName = committerName;
    return this;
  }

  /**
   * Get committerName
   * @return committerName
   */
  @javax.annotation.Nullable
  public String getCommitterName() {
    return committerName;
  }

  public void setCommitterName(String committerName) {
    this.committerName = committerName;
  }


  public Build dontBuild(String dontBuild) {
    this.dontBuild = dontBuild;
    return this;
  }

  /**
   * reason why we didn&#39;t build, if we didn&#39;t build
   * @return dontBuild
   */
  @javax.annotation.Nullable
  public String getDontBuild() {
    return dontBuild;
  }

  public void setDontBuild(String dontBuild) {
    this.dontBuild = dontBuild;
  }


  public Build lifecycle(Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nullable
  public Lifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public Build previous(PreviousBuild previous) {
    this.previous = previous;
    return this;
  }

  /**
   * Get previous
   * @return previous
   */
  @javax.annotation.Nullable
  public PreviousBuild getPrevious() {
    return previous;
  }

  public void setPrevious(PreviousBuild previous) {
    this.previous = previous;
  }


  public Build queuedAt(OffsetDateTime queuedAt) {
    this.queuedAt = queuedAt;
    return this;
  }

  /**
   * time build was queued
   * @return queuedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getQueuedAt() {
    return queuedAt;
  }

  public void setQueuedAt(OffsetDateTime queuedAt) {
    this.queuedAt = queuedAt;
  }


  public Build reponame(String reponame) {
    this.reponame = reponame;
    return this;
  }

  /**
   * Get reponame
   * @return reponame
   */
  @javax.annotation.Nullable
  public String getReponame() {
    return reponame;
  }

  public void setReponame(String reponame) {
    this.reponame = reponame;
  }


  public Build retryOf(Integer retryOf) {
    this.retryOf = retryOf;
    return this;
  }

  /**
   * build_num of the build this is a retry of
   * @return retryOf
   */
  @javax.annotation.Nullable
  public Integer getRetryOf() {
    return retryOf;
  }

  public void setRetryOf(Integer retryOf) {
    this.retryOf = retryOf;
  }


  public Build startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * time build started
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Build stopTime(OffsetDateTime stopTime) {
    this.stopTime = stopTime;
    return this;
  }

  /**
   * time build finished
   * @return stopTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopTime() {
    return stopTime;
  }

  public void setStopTime(OffsetDateTime stopTime) {
    this.stopTime = stopTime;
  }


  public Build subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public Build username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public Build vcsUrl(URI vcsUrl) {
    this.vcsUrl = vcsUrl;
    return this;
  }

  /**
   * Get vcsUrl
   * @return vcsUrl
   */
  @javax.annotation.Nullable
  public URI getVcsUrl() {
    return vcsUrl;
  }

  public void setVcsUrl(URI vcsUrl) {
    this.vcsUrl = vcsUrl;
  }


  public Build why(String why) {
    this.why = why;
    return this;
  }

  /**
   * short string explaining the reason we built
   * @return why
   */
  @javax.annotation.Nullable
  public String getWhy() {
    return why;
  }

  public void setWhy(String why) {
    this.why = why;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Build build = (Build) o;
    return Objects.equals(this.body, build.body) &&
        Objects.equals(this.branch, build.branch) &&
        Objects.equals(this.buildTimeMillis, build.buildTimeMillis) &&
        Objects.equals(this.buildUrl, build.buildUrl) &&
        Objects.equals(this.committerEmail, build.committerEmail) &&
        Objects.equals(this.committerName, build.committerName) &&
        Objects.equals(this.dontBuild, build.dontBuild) &&
        Objects.equals(this.lifecycle, build.lifecycle) &&
        Objects.equals(this.previous, build.previous) &&
        Objects.equals(this.queuedAt, build.queuedAt) &&
        Objects.equals(this.reponame, build.reponame) &&
        Objects.equals(this.retryOf, build.retryOf) &&
        Objects.equals(this.startTime, build.startTime) &&
        Objects.equals(this.stopTime, build.stopTime) &&
        Objects.equals(this.subject, build.subject) &&
        Objects.equals(this.username, build.username) &&
        Objects.equals(this.vcsUrl, build.vcsUrl) &&
        Objects.equals(this.why, build.why);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, branch, buildTimeMillis, buildUrl, committerEmail, committerName, dontBuild, lifecycle, previous, queuedAt, reponame, retryOf, startTime, stopTime, subject, username, vcsUrl, why);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Build {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    buildTimeMillis: ").append(toIndentedString(buildTimeMillis)).append("\n");
    sb.append("    buildUrl: ").append(toIndentedString(buildUrl)).append("\n");
    sb.append("    committerEmail: ").append(toIndentedString(committerEmail)).append("\n");
    sb.append("    committerName: ").append(toIndentedString(committerName)).append("\n");
    sb.append("    dontBuild: ").append(toIndentedString(dontBuild)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    previous: ").append(toIndentedString(previous)).append("\n");
    sb.append("    queuedAt: ").append(toIndentedString(queuedAt)).append("\n");
    sb.append("    reponame: ").append(toIndentedString(reponame)).append("\n");
    sb.append("    retryOf: ").append(toIndentedString(retryOf)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stopTime: ").append(toIndentedString(stopTime)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    vcsUrl: ").append(toIndentedString(vcsUrl)).append("\n");
    sb.append("    why: ").append(toIndentedString(why)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("branch");
    openapiFields.add("build_time_millis");
    openapiFields.add("build_url");
    openapiFields.add("committer_email");
    openapiFields.add("committer_name");
    openapiFields.add("dont_build");
    openapiFields.add("lifecycle");
    openapiFields.add("previous");
    openapiFields.add("queued_at");
    openapiFields.add("reponame");
    openapiFields.add("retry_of");
    openapiFields.add("start_time");
    openapiFields.add("stop_time");
    openapiFields.add("subject");
    openapiFields.add("username");
    openapiFields.add("vcs_url");
    openapiFields.add("why");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Build
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Build.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Build is not found in the empty JSON string", Build.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Build.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Build` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if ((jsonObj.get("build_url") != null && !jsonObj.get("build_url").isJsonNull()) && !jsonObj.get("build_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_url").toString()));
      }
      if ((jsonObj.get("committer_email") != null && !jsonObj.get("committer_email").isJsonNull()) && !jsonObj.get("committer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committer_email").toString()));
      }
      if ((jsonObj.get("committer_name") != null && !jsonObj.get("committer_name").isJsonNull()) && !jsonObj.get("committer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committer_name").toString()));
      }
      if ((jsonObj.get("dont_build") != null && !jsonObj.get("dont_build").isJsonNull()) && !jsonObj.get("dont_build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dont_build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dont_build").toString()));
      }
      // validate the optional field `lifecycle`
      if (jsonObj.get("lifecycle") != null && !jsonObj.get("lifecycle").isJsonNull()) {
        Lifecycle.validateJsonElement(jsonObj.get("lifecycle"));
      }
      // validate the optional field `previous`
      if (jsonObj.get("previous") != null && !jsonObj.get("previous").isJsonNull()) {
        PreviousBuild.validateJsonElement(jsonObj.get("previous"));
      }
      if ((jsonObj.get("reponame") != null && !jsonObj.get("reponame").isJsonNull()) && !jsonObj.get("reponame").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reponame` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reponame").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("vcs_url") != null && !jsonObj.get("vcs_url").isJsonNull()) && !jsonObj.get("vcs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs_url").toString()));
      }
      if ((jsonObj.get("why") != null && !jsonObj.get("why").isJsonNull()) && !jsonObj.get("why").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `why` to be a primitive type in the JSON string but got `%s`", jsonObj.get("why").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Build.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Build' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Build> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Build.class));

       return (TypeAdapter<T>) new TypeAdapter<Build>() {
           @Override
           public void write(JsonWriter out, Build value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Build read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Build given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Build
   * @throws IOException if the JSON string is invalid with respect to Build
   */
  public static Build fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Build.class);
  }

  /**
   * Convert an instance of Build to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

