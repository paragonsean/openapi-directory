/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectFeatureFlags
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:25.013031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectFeatureFlags {
  public static final String SERIALIZED_NAME_BUILD_FORK_PRS = "build-fork-prs";
  @SerializedName(SERIALIZED_NAME_BUILD_FORK_PRS)
  private Boolean buildForkPrs;

  public static final String SERIALIZED_NAME_FLEET = "fleet";
  @SerializedName(SERIALIZED_NAME_FLEET)
  private Boolean fleet;

  public static final String SERIALIZED_NAME_JUNIT = "junit";
  @SerializedName(SERIALIZED_NAME_JUNIT)
  private Boolean junit;

  public static final String SERIALIZED_NAME_OSS = "oss";
  @SerializedName(SERIALIZED_NAME_OSS)
  private Boolean oss;

  public static final String SERIALIZED_NAME_OSX = "osx";
  @SerializedName(SERIALIZED_NAME_OSX)
  private Boolean osx;

  public static final String SERIALIZED_NAME_SET_GITHUB_STATUS = "set-github-status";
  @SerializedName(SERIALIZED_NAME_SET_GITHUB_STATUS)
  private Boolean setGithubStatus;

  public static final String SERIALIZED_NAME_TRUSTY_BETA = "trusty-beta";
  @SerializedName(SERIALIZED_NAME_TRUSTY_BETA)
  private Boolean trustyBeta;

  public ProjectFeatureFlags() {
  }

  public ProjectFeatureFlags buildForkPrs(Boolean buildForkPrs) {
    this.buildForkPrs = buildForkPrs;
    return this;
  }

  /**
   * Get buildForkPrs
   * @return buildForkPrs
   */
  @javax.annotation.Nullable
  public Boolean getBuildForkPrs() {
    return buildForkPrs;
  }

  public void setBuildForkPrs(Boolean buildForkPrs) {
    this.buildForkPrs = buildForkPrs;
  }


  public ProjectFeatureFlags fleet(Boolean fleet) {
    this.fleet = fleet;
    return this;
  }

  /**
   * Get fleet
   * @return fleet
   */
  @javax.annotation.Nullable
  public Boolean getFleet() {
    return fleet;
  }

  public void setFleet(Boolean fleet) {
    this.fleet = fleet;
  }


  public ProjectFeatureFlags junit(Boolean junit) {
    this.junit = junit;
    return this;
  }

  /**
   * Get junit
   * @return junit
   */
  @javax.annotation.Nullable
  public Boolean getJunit() {
    return junit;
  }

  public void setJunit(Boolean junit) {
    this.junit = junit;
  }


  public ProjectFeatureFlags oss(Boolean oss) {
    this.oss = oss;
    return this;
  }

  /**
   * Get oss
   * @return oss
   */
  @javax.annotation.Nullable
  public Boolean getOss() {
    return oss;
  }

  public void setOss(Boolean oss) {
    this.oss = oss;
  }


  public ProjectFeatureFlags osx(Boolean osx) {
    this.osx = osx;
    return this;
  }

  /**
   * Get osx
   * @return osx
   */
  @javax.annotation.Nullable
  public Boolean getOsx() {
    return osx;
  }

  public void setOsx(Boolean osx) {
    this.osx = osx;
  }


  public ProjectFeatureFlags setGithubStatus(Boolean setGithubStatus) {
    this.setGithubStatus = setGithubStatus;
    return this;
  }

  /**
   * Get setGithubStatus
   * @return setGithubStatus
   */
  @javax.annotation.Nullable
  public Boolean getSetGithubStatus() {
    return setGithubStatus;
  }

  public void setSetGithubStatus(Boolean setGithubStatus) {
    this.setGithubStatus = setGithubStatus;
  }


  public ProjectFeatureFlags trustyBeta(Boolean trustyBeta) {
    this.trustyBeta = trustyBeta;
    return this;
  }

  /**
   * Get trustyBeta
   * @return trustyBeta
   */
  @javax.annotation.Nullable
  public Boolean getTrustyBeta() {
    return trustyBeta;
  }

  public void setTrustyBeta(Boolean trustyBeta) {
    this.trustyBeta = trustyBeta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectFeatureFlags projectFeatureFlags = (ProjectFeatureFlags) o;
    return Objects.equals(this.buildForkPrs, projectFeatureFlags.buildForkPrs) &&
        Objects.equals(this.fleet, projectFeatureFlags.fleet) &&
        Objects.equals(this.junit, projectFeatureFlags.junit) &&
        Objects.equals(this.oss, projectFeatureFlags.oss) &&
        Objects.equals(this.osx, projectFeatureFlags.osx) &&
        Objects.equals(this.setGithubStatus, projectFeatureFlags.setGithubStatus) &&
        Objects.equals(this.trustyBeta, projectFeatureFlags.trustyBeta);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildForkPrs, fleet, junit, oss, osx, setGithubStatus, trustyBeta);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectFeatureFlags {\n");
    sb.append("    buildForkPrs: ").append(toIndentedString(buildForkPrs)).append("\n");
    sb.append("    fleet: ").append(toIndentedString(fleet)).append("\n");
    sb.append("    junit: ").append(toIndentedString(junit)).append("\n");
    sb.append("    oss: ").append(toIndentedString(oss)).append("\n");
    sb.append("    osx: ").append(toIndentedString(osx)).append("\n");
    sb.append("    setGithubStatus: ").append(toIndentedString(setGithubStatus)).append("\n");
    sb.append("    trustyBeta: ").append(toIndentedString(trustyBeta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("build-fork-prs");
    openapiFields.add("fleet");
    openapiFields.add("junit");
    openapiFields.add("oss");
    openapiFields.add("osx");
    openapiFields.add("set-github-status");
    openapiFields.add("trusty-beta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectFeatureFlags
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectFeatureFlags.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectFeatureFlags is not found in the empty JSON string", ProjectFeatureFlags.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectFeatureFlags.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectFeatureFlags` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectFeatureFlags.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectFeatureFlags' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectFeatureFlags> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectFeatureFlags.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectFeatureFlags>() {
           @Override
           public void write(JsonWriter out, ProjectFeatureFlags value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectFeatureFlags read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectFeatureFlags given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectFeatureFlags
   * @throws IOException if the JSON string is invalid with respect to ProjectFeatureFlags
   */
  public static ProjectFeatureFlags fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectFeatureFlags.class);
  }

  /**
   * Convert an instance of ProjectFeatureFlags to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

