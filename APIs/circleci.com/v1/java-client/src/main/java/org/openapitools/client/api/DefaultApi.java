/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.BuildDetail;
import org.openapitools.client.model.BuildSummary;
import org.openapitools.client.model.Envvar;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectUsernameProjectBuildCacheDelete200Response;
import org.openapitools.client.model.ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response;
import org.openapitools.client.model.ProjectUsernameProjectPostRequest;
import org.openapitools.client.model.ProjectUsernameProjectSshKeyPostDefaultResponse;
import org.openapitools.client.model.ProjectUsernameProjectSshKeyPostRequest;
import org.openapitools.client.model.ProjectUsernameProjectTreeBranchPostRequest;
import org.openapitools.client.model.Tests;
import java.net.URI;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for meGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signed in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return meGetCall(_callback);

    }

    /**
     * 
     * Provides information about the signed in user. 
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signed in user </td><td>  -  </td></tr>
     </table>
     */
    public User meGet() throws ApiException {
        ApiResponse<User> localVarResp = meGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Provides information about the signed in user. 
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signed in user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> meGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = meGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides information about the signed in user. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signed in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meGetAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = meGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectBuildCacheDelete
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildCacheDeleteCall(String username, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/build-cache"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectBuildCacheDeleteValidateBeforeCall(String username, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectBuildCacheDelete(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectBuildCacheDelete(Async)");
        }

        return projectUsernameProjectBuildCacheDeleteCall(username, project, _callback);

    }

    /**
     * 
     * Clears the cache for a project. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return ProjectUsernameProjectBuildCacheDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status message </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUsernameProjectBuildCacheDelete200Response projectUsernameProjectBuildCacheDelete(String username, String project) throws ApiException {
        ApiResponse<ProjectUsernameProjectBuildCacheDelete200Response> localVarResp = projectUsernameProjectBuildCacheDeleteWithHttpInfo(username, project);
        return localVarResp.getData();
    }

    /**
     * 
     * Clears the cache for a project. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return ApiResponse&lt;ProjectUsernameProjectBuildCacheDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUsernameProjectBuildCacheDelete200Response> projectUsernameProjectBuildCacheDeleteWithHttpInfo(String username, String project) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectBuildCacheDeleteValidateBeforeCall(username, project, null);
        Type localVarReturnType = new TypeToken<ProjectUsernameProjectBuildCacheDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clears the cache for a project. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildCacheDeleteAsync(String username, String project, final ApiCallback<ProjectUsernameProjectBuildCacheDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectBuildCacheDeleteValidateBeforeCall(username, project, _callback);
        Type localVarReturnType = new TypeToken<ProjectUsernameProjectBuildCacheDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectBuildNumArtifactsGet
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List the artifacts produced by a given build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumArtifactsGetCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/{build_num}/artifacts"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "build_num" + "}", localVarApiClient.escapeString(buildNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectBuildNumArtifactsGetValidateBeforeCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumArtifactsGet(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumArtifactsGet(Async)");
        }

        // verify the required parameter 'buildNum' is set
        if (buildNum == null) {
            throw new ApiException("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumArtifactsGet(Async)");
        }

        return projectUsernameProjectBuildNumArtifactsGetCall(username, project, buildNum, _callback);

    }

    /**
     * 
     * List the artifacts produced by a given build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return List&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List the artifacts produced by a given build </td><td>  -  </td></tr>
     </table>
     */
    public List<Artifact> projectUsernameProjectBuildNumArtifactsGet(String username, String project, Integer buildNum) throws ApiException {
        ApiResponse<List<Artifact>> localVarResp = projectUsernameProjectBuildNumArtifactsGetWithHttpInfo(username, project, buildNum);
        return localVarResp.getData();
    }

    /**
     * 
     * List the artifacts produced by a given build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return ApiResponse&lt;List&lt;Artifact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List the artifacts produced by a given build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Artifact>> projectUsernameProjectBuildNumArtifactsGetWithHttpInfo(String username, String project, Integer buildNum) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectBuildNumArtifactsGetValidateBeforeCall(username, project, buildNum, null);
        Type localVarReturnType = new TypeToken<List<Artifact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the artifacts produced by a given build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List the artifacts produced by a given build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumArtifactsGetAsync(String username, String project, Integer buildNum, final ApiCallback<List<Artifact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectBuildNumArtifactsGetValidateBeforeCall(username, project, buildNum, _callback);
        Type localVarReturnType = new TypeToken<List<Artifact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectBuildNumCancelPost
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a summary of the build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumCancelPostCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/{build_num}/cancel"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "build_num" + "}", localVarApiClient.escapeString(buildNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectBuildNumCancelPostValidateBeforeCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumCancelPost(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumCancelPost(Async)");
        }

        // verify the required parameter 'buildNum' is set
        if (buildNum == null) {
            throw new ApiException("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumCancelPost(Async)");
        }

        return projectUsernameProjectBuildNumCancelPostCall(username, project, buildNum, _callback);

    }

    /**
     * 
     * Cancels the build, returns a summary of the build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a summary of the build </td><td>  -  </td></tr>
     </table>
     */
    public Build projectUsernameProjectBuildNumCancelPost(String username, String project, Integer buildNum) throws ApiException {
        ApiResponse<Build> localVarResp = projectUsernameProjectBuildNumCancelPostWithHttpInfo(username, project, buildNum);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels the build, returns a summary of the build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a summary of the build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> projectUsernameProjectBuildNumCancelPostWithHttpInfo(String username, String project, Integer buildNum) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectBuildNumCancelPostValidateBeforeCall(username, project, buildNum, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels the build, returns a summary of the build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a summary of the build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumCancelPostAsync(String username, String project, Integer buildNum, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectBuildNumCancelPostValidateBeforeCall(username, project, buildNum, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectBuildNumGet
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Full details for a single build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumGetCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/{build_num}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "build_num" + "}", localVarApiClient.escapeString(buildNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectBuildNumGetValidateBeforeCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumGet(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumGet(Async)");
        }

        // verify the required parameter 'buildNum' is set
        if (buildNum == null) {
            throw new ApiException("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumGet(Async)");
        }

        return projectUsernameProjectBuildNumGetCall(username, project, buildNum, _callback);

    }

    /**
     * 
     * Full details for a single build. The response includes all of the fields from the build summary. This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named &#39;payload&#39;. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return BuildDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Full details for a single build </td><td>  -  </td></tr>
     </table>
     */
    public BuildDetail projectUsernameProjectBuildNumGet(String username, String project, Integer buildNum) throws ApiException {
        ApiResponse<BuildDetail> localVarResp = projectUsernameProjectBuildNumGetWithHttpInfo(username, project, buildNum);
        return localVarResp.getData();
    }

    /**
     * 
     * Full details for a single build. The response includes all of the fields from the build summary. This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named &#39;payload&#39;. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return ApiResponse&lt;BuildDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Full details for a single build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildDetail> projectUsernameProjectBuildNumGetWithHttpInfo(String username, String project, Integer buildNum) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectBuildNumGetValidateBeforeCall(username, project, buildNum, null);
        Type localVarReturnType = new TypeToken<BuildDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Full details for a single build. The response includes all of the fields from the build summary. This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named &#39;payload&#39;. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Full details for a single build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumGetAsync(String username, String project, Integer buildNum, final ApiCallback<BuildDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectBuildNumGetValidateBeforeCall(username, project, buildNum, _callback);
        Type localVarReturnType = new TypeToken<BuildDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectBuildNumRetryPost
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a summary of the new build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumRetryPostCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/{build_num}/retry"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "build_num" + "}", localVarApiClient.escapeString(buildNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectBuildNumRetryPostValidateBeforeCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumRetryPost(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumRetryPost(Async)");
        }

        // verify the required parameter 'buildNum' is set
        if (buildNum == null) {
            throw new ApiException("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumRetryPost(Async)");
        }

        return projectUsernameProjectBuildNumRetryPostCall(username, project, buildNum, _callback);

    }

    /**
     * 
     * Retries the build, returns a summary of the new build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a summary of the new build </td><td>  -  </td></tr>
     </table>
     */
    public Build projectUsernameProjectBuildNumRetryPost(String username, String project, Integer buildNum) throws ApiException {
        ApiResponse<Build> localVarResp = projectUsernameProjectBuildNumRetryPostWithHttpInfo(username, project, buildNum);
        return localVarResp.getData();
    }

    /**
     * 
     * Retries the build, returns a summary of the new build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a summary of the new build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> projectUsernameProjectBuildNumRetryPostWithHttpInfo(String username, String project, Integer buildNum) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectBuildNumRetryPostValidateBeforeCall(username, project, buildNum, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retries the build, returns a summary of the new build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a summary of the new build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumRetryPostAsync(String username, String project, Integer buildNum, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectBuildNumRetryPostValidateBeforeCall(username, project, buildNum, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectBuildNumTestsGet
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> test metadata for a build  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumTestsGetCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/{build_num}/tests"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "build_num" + "}", localVarApiClient.escapeString(buildNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectBuildNumTestsGetValidateBeforeCall(String username, String project, Integer buildNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectBuildNumTestsGet(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectBuildNumTestsGet(Async)");
        }

        // verify the required parameter 'buildNum' is set
        if (buildNum == null) {
            throw new ApiException("Missing the required parameter 'buildNum' when calling projectUsernameProjectBuildNumTestsGet(Async)");
        }

        return projectUsernameProjectBuildNumTestsGetCall(username, project, buildNum, _callback);

    }

    /**
     * 
     * Provides test metadata for a build Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/) 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return Tests
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> test metadata for a build  </td><td>  -  </td></tr>
     </table>
     */
    public Tests projectUsernameProjectBuildNumTestsGet(String username, String project, Integer buildNum) throws ApiException {
        ApiResponse<Tests> localVarResp = projectUsernameProjectBuildNumTestsGetWithHttpInfo(username, project, buildNum);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides test metadata for a build Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/) 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return ApiResponse&lt;Tests&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> test metadata for a build  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tests> projectUsernameProjectBuildNumTestsGetWithHttpInfo(String username, String project, Integer buildNum) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectBuildNumTestsGetValidateBeforeCall(username, project, buildNum, null);
        Type localVarReturnType = new TypeToken<Tests>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides test metadata for a build Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/) 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> test metadata for a build  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectBuildNumTestsGetAsync(String username, String project, Integer buildNum, final ApiCallback<Tests> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectBuildNumTestsGetValidateBeforeCall(username, project, buildNum, _callback);
        Type localVarReturnType = new TypeToken<Tests>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectCheckoutKeyFingerprintDelete
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectCheckoutKeyFingerprintDeleteCall(String username, String project, String fingerprint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/checkout-key/{fingerprint}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "fingerprint" + "}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectCheckoutKeyFingerprintDeleteValidateBeforeCall(String username, String project, String fingerprint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectCheckoutKeyFingerprintDelete(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectCheckoutKeyFingerprintDelete(Async)");
        }

        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling projectUsernameProjectCheckoutKeyFingerprintDelete(Async)");
        }

        return projectUsernameProjectCheckoutKeyFingerprintDeleteCall(username, project, fingerprint, _callback);

    }

    /**
     * 
     * Delete a checkout key. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @return ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status message </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response projectUsernameProjectCheckoutKeyFingerprintDelete(String username, String project, String fingerprint) throws ApiException {
        ApiResponse<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response> localVarResp = projectUsernameProjectCheckoutKeyFingerprintDeleteWithHttpInfo(username, project, fingerprint);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a checkout key. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @return ApiResponse&lt;ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response> projectUsernameProjectCheckoutKeyFingerprintDeleteWithHttpInfo(String username, String project, String fingerprint) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectCheckoutKeyFingerprintDeleteValidateBeforeCall(username, project, fingerprint, null);
        Type localVarReturnType = new TypeToken<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a checkout key. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectCheckoutKeyFingerprintDeleteAsync(String username, String project, String fingerprint, final ApiCallback<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectCheckoutKeyFingerprintDeleteValidateBeforeCall(username, project, fingerprint, _callback);
        Type localVarReturnType = new TypeToken<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectCheckoutKeyFingerprintGet
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectCheckoutKeyFingerprintGetCall(String username, String project, String fingerprint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/checkout-key/{fingerprint}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "fingerprint" + "}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectCheckoutKeyFingerprintGetValidateBeforeCall(String username, String project, String fingerprint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectCheckoutKeyFingerprintGet(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectCheckoutKeyFingerprintGet(Async)");
        }

        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling projectUsernameProjectCheckoutKeyFingerprintGet(Async)");
        }

        return projectUsernameProjectCheckoutKeyFingerprintGetCall(username, project, fingerprint, _callback);

    }

    /**
     * 
     * Get a checkout key. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @return Key
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout key </td><td>  -  </td></tr>
     </table>
     */
    public Key projectUsernameProjectCheckoutKeyFingerprintGet(String username, String project, String fingerprint) throws ApiException {
        ApiResponse<Key> localVarResp = projectUsernameProjectCheckoutKeyFingerprintGetWithHttpInfo(username, project, fingerprint);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a checkout key. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @return ApiResponse&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Key> projectUsernameProjectCheckoutKeyFingerprintGetWithHttpInfo(String username, String project, String fingerprint) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectCheckoutKeyFingerprintGetValidateBeforeCall(username, project, fingerprint, null);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a checkout key. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectCheckoutKeyFingerprintGetAsync(String username, String project, String fingerprint, final ApiCallback<Key> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectCheckoutKeyFingerprintGetValidateBeforeCall(username, project, fingerprint, _callback);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectCheckoutKeyGet
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectCheckoutKeyGetCall(String username, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/checkout-key"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectCheckoutKeyGetValidateBeforeCall(String username, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectCheckoutKeyGet(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectCheckoutKeyGet(Async)");
        }

        return projectUsernameProjectCheckoutKeyGetCall(username, project, _callback);

    }

    /**
     * 
     * Lists checkout keys. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return List&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout keys </td><td>  -  </td></tr>
     </table>
     */
    public List<Key> projectUsernameProjectCheckoutKeyGet(String username, String project) throws ApiException {
        ApiResponse<List<Key>> localVarResp = projectUsernameProjectCheckoutKeyGetWithHttpInfo(username, project);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists checkout keys. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return ApiResponse&lt;List&lt;Key&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Key>> projectUsernameProjectCheckoutKeyGetWithHttpInfo(String username, String project) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectCheckoutKeyGetValidateBeforeCall(username, project, null);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists checkout keys. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectCheckoutKeyGetAsync(String username, String project, final ApiCallback<List<Key>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectCheckoutKeyGetValidateBeforeCall(username, project, _callback);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectCheckoutKeyPost
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param body The type of key to create. Can be &#39;deploy-key&#39; or &#39;github-user-key&#39;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectCheckoutKeyPostCall(String username, String project, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/checkout-key"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectCheckoutKeyPostValidateBeforeCall(String username, String project, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectCheckoutKeyPost(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectCheckoutKeyPost(Async)");
        }

        return projectUsernameProjectCheckoutKeyPostCall(username, project, body, _callback);

    }

    /**
     * 
     * Creates a new checkout key. Only usable with a user API token. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param body The type of key to create. Can be &#39;deploy-key&#39; or &#39;github-user-key&#39;.  (optional)
     * @return Key
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout key </td><td>  -  </td></tr>
     </table>
     */
    public Key projectUsernameProjectCheckoutKeyPost(String username, String project, String body) throws ApiException {
        ApiResponse<Key> localVarResp = projectUsernameProjectCheckoutKeyPostWithHttpInfo(username, project, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new checkout key. Only usable with a user API token. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param body The type of key to create. Can be &#39;deploy-key&#39; or &#39;github-user-key&#39;.  (optional)
     * @return ApiResponse&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Key> projectUsernameProjectCheckoutKeyPostWithHttpInfo(String username, String project, String body) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectCheckoutKeyPostValidateBeforeCall(username, project, body, null);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new checkout key. Only usable with a user API token. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param body The type of key to create. Can be &#39;deploy-key&#39; or &#39;github-user-key&#39;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> checkout key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectCheckoutKeyPostAsync(String username, String project, String body, final ApiCallback<Key> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectCheckoutKeyPostValidateBeforeCall(username, project, body, _callback);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectEnvvarGet
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectEnvvarGetCall(String username, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/envvar"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectEnvvarGetValidateBeforeCall(String username, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectEnvvarGet(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectEnvvarGet(Async)");
        }

        return projectUsernameProjectEnvvarGetCall(username, project, _callback);

    }

    /**
     * 
     * Lists the environment variables for :project 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return List&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public List<Envvar> projectUsernameProjectEnvvarGet(String username, String project) throws ApiException {
        ApiResponse<List<Envvar>> localVarResp = projectUsernameProjectEnvvarGetWithHttpInfo(username, project);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the environment variables for :project 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return ApiResponse&lt;List&lt;Envvar&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Envvar>> projectUsernameProjectEnvvarGetWithHttpInfo(String username, String project) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectEnvvarGetValidateBeforeCall(username, project, null);
        Type localVarReturnType = new TypeToken<List<Envvar>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the environment variables for :project 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectEnvvarGetAsync(String username, String project, final ApiCallback<List<Envvar>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectEnvvarGetValidateBeforeCall(username, project, _callback);
        Type localVarReturnType = new TypeToken<List<Envvar>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectEnvvarNameDelete
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes the environment variable named &#39;:name&#39;  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectEnvvarNameDeleteCall(String username, String project, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/envvar/{name}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectEnvvarNameDeleteValidateBeforeCall(String username, String project, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectEnvvarNameDelete(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectEnvvarNameDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling projectUsernameProjectEnvvarNameDelete(Async)");
        }

        return projectUsernameProjectEnvvarNameDeleteCall(username, project, name, _callback);

    }

    /**
     * 
     * Deletes the environment variable named &#39;:name&#39; 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @return ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes the environment variable named &#39;:name&#39;  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response projectUsernameProjectEnvvarNameDelete(String username, String project, String name) throws ApiException {
        ApiResponse<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response> localVarResp = projectUsernameProjectEnvvarNameDeleteWithHttpInfo(username, project, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the environment variable named &#39;:name&#39; 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @return ApiResponse&lt;ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes the environment variable named &#39;:name&#39;  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response> projectUsernameProjectEnvvarNameDeleteWithHttpInfo(String username, String project, String name) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectEnvvarNameDeleteValidateBeforeCall(username, project, name, null);
        Type localVarReturnType = new TypeToken<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the environment variable named &#39;:name&#39; 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes the environment variable named &#39;:name&#39;  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectEnvvarNameDeleteAsync(String username, String project, String name, final ApiCallback<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectEnvvarNameDeleteValidateBeforeCall(username, project, name, _callback);
        Type localVarReturnType = new TypeToken<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectEnvvarNameGet
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectEnvvarNameGetCall(String username, String project, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/envvar/{name}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectEnvvarNameGetValidateBeforeCall(String username, String project, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectEnvvarNameGet(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectEnvvarNameGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling projectUsernameProjectEnvvarNameGet(Async)");
        }

        return projectUsernameProjectEnvvarNameGetCall(username, project, name, _callback);

    }

    /**
     * 
     * Gets the hidden value of environment variable :name 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @return Envvar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public Envvar projectUsernameProjectEnvvarNameGet(String username, String project, String name) throws ApiException {
        ApiResponse<Envvar> localVarResp = projectUsernameProjectEnvvarNameGetWithHttpInfo(username, project, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the hidden value of environment variable :name 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @return ApiResponse&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Envvar> projectUsernameProjectEnvvarNameGetWithHttpInfo(String username, String project, String name) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectEnvvarNameGetValidateBeforeCall(username, project, name, null);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the hidden value of environment variable :name 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectEnvvarNameGetAsync(String username, String project, String name, final ApiCallback<Envvar> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectEnvvarNameGetValidateBeforeCall(username, project, name, _callback);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectEnvvarPost
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectEnvvarPostCall(String username, String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/envvar"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectEnvvarPostValidateBeforeCall(String username, String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectEnvvarPost(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectEnvvarPost(Async)");
        }

        return projectUsernameProjectEnvvarPostCall(username, project, _callback);

    }

    /**
     * 
     * Creates a new environment variable 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return Envvar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public Envvar projectUsernameProjectEnvvarPost(String username, String project) throws ApiException {
        ApiResponse<Envvar> localVarResp = projectUsernameProjectEnvvarPostWithHttpInfo(username, project);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new environment variable 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return ApiResponse&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Envvar> projectUsernameProjectEnvvarPostWithHttpInfo(String username, String project) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectEnvvarPostValidateBeforeCall(username, project, null);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new environment variable 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> XXX </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectEnvvarPostAsync(String username, String project, final ApiCallback<Envvar> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectEnvvarPostValidateBeforeCall(username, project, _callback);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectGet
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @param filter Restricts which builds are returned. Set to \&quot;completed\&quot;, \&quot;successful\&quot;, \&quot;failed\&quot;, \&quot;running\&quot;, or defaults to no filter.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Build summary for each of the last 30 builds </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectGetCall(String username, String project, Integer limit, Integer offset, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectGetValidateBeforeCall(String username, String project, Integer limit, Integer offset, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectGet(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectGet(Async)");
        }

        return projectUsernameProjectGetCall(username, project, limit, offset, filter, _callback);

    }

    /**
     * 
     * Build summary for each of the last 30 builds for a single git repo. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @param filter Restricts which builds are returned. Set to \&quot;completed\&quot;, \&quot;successful\&quot;, \&quot;failed\&quot;, \&quot;running\&quot;, or defaults to no filter.  (optional)
     * @return List&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Build summary for each of the last 30 builds </td><td>  -  </td></tr>
     </table>
     */
    public List<Build> projectUsernameProjectGet(String username, String project, Integer limit, Integer offset, String filter) throws ApiException {
        ApiResponse<List<Build>> localVarResp = projectUsernameProjectGetWithHttpInfo(username, project, limit, offset, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Build summary for each of the last 30 builds for a single git repo. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @param filter Restricts which builds are returned. Set to \&quot;completed\&quot;, \&quot;successful\&quot;, \&quot;failed\&quot;, \&quot;running\&quot;, or defaults to no filter.  (optional)
     * @return ApiResponse&lt;List&lt;Build&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Build summary for each of the last 30 builds </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Build>> projectUsernameProjectGetWithHttpInfo(String username, String project, Integer limit, Integer offset, String filter) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectGetValidateBeforeCall(username, project, limit, offset, filter, null);
        Type localVarReturnType = new TypeToken<List<Build>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Build summary for each of the last 30 builds for a single git repo. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @param filter Restricts which builds are returned. Set to \&quot;completed\&quot;, \&quot;successful\&quot;, \&quot;failed\&quot;, \&quot;running\&quot;, or defaults to no filter.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Build summary for each of the last 30 builds </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectGetAsync(String username, String project, Integer limit, Integer offset, String filter, final ApiCallback<List<Build>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectGetValidateBeforeCall(username, project, limit, offset, filter, _callback);
        Type localVarReturnType = new TypeToken<List<Build>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectPost
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param projectUsernameProjectPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a summary of the build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectPostCall(String username, String project, ProjectUsernameProjectPostRequest projectUsernameProjectPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectUsernameProjectPostRequest;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectPostValidateBeforeCall(String username, String project, ProjectUsernameProjectPostRequest projectUsernameProjectPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectPost(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectPost(Async)");
        }

        return projectUsernameProjectPostCall(username, project, projectUsernameProjectPostRequest, _callback);

    }

    /**
     * 
     * Triggers a new build, returns a summary of the build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param projectUsernameProjectPostRequest  (optional)
     * @return BuildSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a summary of the build </td><td>  -  </td></tr>
     </table>
     */
    public BuildSummary projectUsernameProjectPost(String username, String project, ProjectUsernameProjectPostRequest projectUsernameProjectPostRequest) throws ApiException {
        ApiResponse<BuildSummary> localVarResp = projectUsernameProjectPostWithHttpInfo(username, project, projectUsernameProjectPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Triggers a new build, returns a summary of the build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param projectUsernameProjectPostRequest  (optional)
     * @return ApiResponse&lt;BuildSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a summary of the build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSummary> projectUsernameProjectPostWithHttpInfo(String username, String project, ProjectUsernameProjectPostRequest projectUsernameProjectPostRequest) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectPostValidateBeforeCall(username, project, projectUsernameProjectPostRequest, null);
        Type localVarReturnType = new TypeToken<BuildSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Triggers a new build, returns a summary of the build. 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param projectUsernameProjectPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a summary of the build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectPostAsync(String username, String project, ProjectUsernameProjectPostRequest projectUsernameProjectPostRequest, final ApiCallback<BuildSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectPostValidateBeforeCall(username, project, projectUsernameProjectPostRequest, _callback);
        Type localVarReturnType = new TypeToken<BuildSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectSshKeyPost
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param contentType  (required)
     * @param projectUsernameProjectSshKeyPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> no response expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectSshKeyPostCall(String username, String project, String contentType, ProjectUsernameProjectSshKeyPostRequest projectUsernameProjectSshKeyPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectUsernameProjectSshKeyPostRequest;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/ssh-key"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectSshKeyPostValidateBeforeCall(String username, String project, String contentType, ProjectUsernameProjectSshKeyPostRequest projectUsernameProjectSshKeyPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectSshKeyPost(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectSshKeyPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling projectUsernameProjectSshKeyPost(Async)");
        }

        // verify the required parameter 'projectUsernameProjectSshKeyPostRequest' is set
        if (projectUsernameProjectSshKeyPostRequest == null) {
            throw new ApiException("Missing the required parameter 'projectUsernameProjectSshKeyPostRequest' when calling projectUsernameProjectSshKeyPost(Async)");
        }

        return projectUsernameProjectSshKeyPostCall(username, project, contentType, projectUsernameProjectSshKeyPostRequest, _callback);

    }

    /**
     * 
     * Create an ssh key used to access external systems that require SSH key-based authentication 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param contentType  (required)
     * @param projectUsernameProjectSshKeyPostRequest  (required)
     * @return ProjectUsernameProjectSshKeyPostDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> no response expected </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUsernameProjectSshKeyPostDefaultResponse projectUsernameProjectSshKeyPost(String username, String project, String contentType, ProjectUsernameProjectSshKeyPostRequest projectUsernameProjectSshKeyPostRequest) throws ApiException {
        ApiResponse<ProjectUsernameProjectSshKeyPostDefaultResponse> localVarResp = projectUsernameProjectSshKeyPostWithHttpInfo(username, project, contentType, projectUsernameProjectSshKeyPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an ssh key used to access external systems that require SSH key-based authentication 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param contentType  (required)
     * @param projectUsernameProjectSshKeyPostRequest  (required)
     * @return ApiResponse&lt;ProjectUsernameProjectSshKeyPostDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> no response expected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUsernameProjectSshKeyPostDefaultResponse> projectUsernameProjectSshKeyPostWithHttpInfo(String username, String project, String contentType, ProjectUsernameProjectSshKeyPostRequest projectUsernameProjectSshKeyPostRequest) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectSshKeyPostValidateBeforeCall(username, project, contentType, projectUsernameProjectSshKeyPostRequest, null);
        Type localVarReturnType = new TypeToken<ProjectUsernameProjectSshKeyPostDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an ssh key used to access external systems that require SSH key-based authentication 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param contentType  (required)
     * @param projectUsernameProjectSshKeyPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> no response expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectSshKeyPostAsync(String username, String project, String contentType, ProjectUsernameProjectSshKeyPostRequest projectUsernameProjectSshKeyPostRequest, final ApiCallback<ProjectUsernameProjectSshKeyPostDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectSshKeyPostValidateBeforeCall(username, project, contentType, projectUsernameProjectSshKeyPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectUsernameProjectSshKeyPostDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUsernameProjectTreeBranchPost
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param branch The branch name should be url-encoded.  (required)
     * @param projectUsernameProjectTreeBranchPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a summary of the build </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectTreeBranchPostCall(String username, String project, String branch, ProjectUsernameProjectTreeBranchPostRequest projectUsernameProjectTreeBranchPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectUsernameProjectTreeBranchPostRequest;

        // create path and map variables
        String localVarPath = "/project/{username}/{project}/tree/{branch}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUsernameProjectTreeBranchPostValidateBeforeCall(String username, String project, String branch, ProjectUsernameProjectTreeBranchPostRequest projectUsernameProjectTreeBranchPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling projectUsernameProjectTreeBranchPost(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectUsernameProjectTreeBranchPost(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling projectUsernameProjectTreeBranchPost(Async)");
        }

        return projectUsernameProjectTreeBranchPostCall(username, project, branch, projectUsernameProjectTreeBranchPostRequest, _callback);

    }

    /**
     * 
     * Triggers a new build, returns a summary of the build. Optional build parameters can be set using an experimental API.  Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/) 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param branch The branch name should be url-encoded.  (required)
     * @param projectUsernameProjectTreeBranchPostRequest  (optional)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a summary of the build </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public Build projectUsernameProjectTreeBranchPost(String username, String project, String branch, ProjectUsernameProjectTreeBranchPostRequest projectUsernameProjectTreeBranchPostRequest) throws ApiException {
        ApiResponse<Build> localVarResp = projectUsernameProjectTreeBranchPostWithHttpInfo(username, project, branch, projectUsernameProjectTreeBranchPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Triggers a new build, returns a summary of the build. Optional build parameters can be set using an experimental API.  Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/) 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param branch The branch name should be url-encoded.  (required)
     * @param projectUsernameProjectTreeBranchPostRequest  (optional)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a summary of the build </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Build> projectUsernameProjectTreeBranchPostWithHttpInfo(String username, String project, String branch, ProjectUsernameProjectTreeBranchPostRequest projectUsernameProjectTreeBranchPostRequest) throws ApiException {
        okhttp3.Call localVarCall = projectUsernameProjectTreeBranchPostValidateBeforeCall(username, project, branch, projectUsernameProjectTreeBranchPostRequest, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Triggers a new build, returns a summary of the build. Optional build parameters can be set using an experimental API.  Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/) 
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param branch The branch name should be url-encoded.  (required)
     * @param projectUsernameProjectTreeBranchPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> returns a summary of the build </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call projectUsernameProjectTreeBranchPostAsync(String username, String project, String branch, ProjectUsernameProjectTreeBranchPostRequest projectUsernameProjectTreeBranchPostRequest, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUsernameProjectTreeBranchPostValidateBeforeCall(username, project, branch, projectUsernameProjectTreeBranchPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the projects you&#39;re following on CircleCI  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return projectsGetCall(_callback);

    }

    /**
     * 
     * List of all the projects you&#39;re following on CircleCI, with build information organized by branch. 
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the projects you&#39;re following on CircleCI  </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> projectsGet() throws ApiException {
        ApiResponse<List<Project>> localVarResp = projectsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * List of all the projects you&#39;re following on CircleCI, with build information organized by branch. 
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the projects you&#39;re following on CircleCI  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> projectsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = projectsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of all the projects you&#39;re following on CircleCI, with build information organized by branch. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the projects you&#39;re following on CircleCI  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetAsync(final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recentBuildsGet
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Build summary for each of the last 30 recent builds </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentBuildsGetCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recent-builds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recentBuildsGetValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return recentBuildsGetCall(limit, offset, _callback);

    }

    /**
     * 
     * Build summary for each of the last 30 recent builds, ordered by build_num. 
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @return List&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Build summary for each of the last 30 recent builds </td><td>  -  </td></tr>
     </table>
     */
    public List<Build> recentBuildsGet(Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<Build>> localVarResp = recentBuildsGetWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Build summary for each of the last 30 recent builds, ordered by build_num. 
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @return ApiResponse&lt;List&lt;Build&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Build summary for each of the last 30 recent builds </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Build>> recentBuildsGetWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = recentBuildsGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<List<Build>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Build summary for each of the last 30 recent builds, ordered by build_num. 
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Build summary for each of the last 30 recent builds </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentBuildsGetAsync(Integer limit, Integer offset, final ApiCallback<List<Build>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recentBuildsGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<Build>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userHerokuKeyPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Your Heroku API key is invalid.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userHerokuKeyPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/heroku-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userHerokuKeyPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userHerokuKeyPostCall(_callback);

    }

    /**
     * 
     * Adds your Heroku API key to CircleCI, takes apikey as form param name. 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Your Heroku API key is invalid.  </td><td>  -  </td></tr>
     </table>
     */
    public void userHerokuKeyPost() throws ApiException {
        userHerokuKeyPostWithHttpInfo();
    }

    /**
     * 
     * Adds your Heroku API key to CircleCI, takes apikey as form param name. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Your Heroku API key is invalid.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userHerokuKeyPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userHerokuKeyPostValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds your Heroku API key to CircleCI, takes apikey as form param name. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Your Heroku API key is invalid.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userHerokuKeyPostAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userHerokuKeyPostValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
