/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Outcome;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuildSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:25.013031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildSummary {
  public static final String SERIALIZED_NAME_ADDED_AT = "added_at";
  @SerializedName(SERIALIZED_NAME_ADDED_AT)
  private OffsetDateTime addedAt;

  public static final String SERIALIZED_NAME_BUILD_NUM = "build_num";
  @SerializedName(SERIALIZED_NAME_BUILD_NUM)
  private Integer buildNum;

  public static final String SERIALIZED_NAME_OUTCOME = "outcome";
  @SerializedName(SERIALIZED_NAME_OUTCOME)
  private Outcome outcome;

  public static final String SERIALIZED_NAME_PUSHED_AT = "pushed_at";
  @SerializedName(SERIALIZED_NAME_PUSHED_AT)
  private OffsetDateTime pushedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_VCS_REVISION = "vcs_revision";
  @SerializedName(SERIALIZED_NAME_VCS_REVISION)
  private String vcsRevision;

  public BuildSummary() {
  }

  public BuildSummary addedAt(OffsetDateTime addedAt) {
    this.addedAt = addedAt;
    return this;
  }

  /**
   * Get addedAt
   * @return addedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAddedAt() {
    return addedAt;
  }

  public void setAddedAt(OffsetDateTime addedAt) {
    this.addedAt = addedAt;
  }


  public BuildSummary buildNum(Integer buildNum) {
    this.buildNum = buildNum;
    return this;
  }

  /**
   * Get buildNum
   * @return buildNum
   */
  @javax.annotation.Nullable
  public Integer getBuildNum() {
    return buildNum;
  }

  public void setBuildNum(Integer buildNum) {
    this.buildNum = buildNum;
  }


  public BuildSummary outcome(Outcome outcome) {
    this.outcome = outcome;
    return this;
  }

  /**
   * Get outcome
   * @return outcome
   */
  @javax.annotation.Nullable
  public Outcome getOutcome() {
    return outcome;
  }

  public void setOutcome(Outcome outcome) {
    this.outcome = outcome;
  }


  public BuildSummary pushedAt(OffsetDateTime pushedAt) {
    this.pushedAt = pushedAt;
    return this;
  }

  /**
   * Get pushedAt
   * @return pushedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPushedAt() {
    return pushedAt;
  }

  public void setPushedAt(OffsetDateTime pushedAt) {
    this.pushedAt = pushedAt;
  }


  public BuildSummary status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public BuildSummary vcsRevision(String vcsRevision) {
    this.vcsRevision = vcsRevision;
    return this;
  }

  /**
   * Get vcsRevision
   * @return vcsRevision
   */
  @javax.annotation.Nullable
  public String getVcsRevision() {
    return vcsRevision;
  }

  public void setVcsRevision(String vcsRevision) {
    this.vcsRevision = vcsRevision;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSummary buildSummary = (BuildSummary) o;
    return Objects.equals(this.addedAt, buildSummary.addedAt) &&
        Objects.equals(this.buildNum, buildSummary.buildNum) &&
        Objects.equals(this.outcome, buildSummary.outcome) &&
        Objects.equals(this.pushedAt, buildSummary.pushedAt) &&
        Objects.equals(this.status, buildSummary.status) &&
        Objects.equals(this.vcsRevision, buildSummary.vcsRevision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedAt, buildNum, outcome, pushedAt, status, vcsRevision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSummary {\n");
    sb.append("    addedAt: ").append(toIndentedString(addedAt)).append("\n");
    sb.append("    buildNum: ").append(toIndentedString(buildNum)).append("\n");
    sb.append("    outcome: ").append(toIndentedString(outcome)).append("\n");
    sb.append("    pushedAt: ").append(toIndentedString(pushedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vcsRevision: ").append(toIndentedString(vcsRevision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_at");
    openapiFields.add("build_num");
    openapiFields.add("outcome");
    openapiFields.add("pushed_at");
    openapiFields.add("status");
    openapiFields.add("vcs_revision");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildSummary is not found in the empty JSON string", BuildSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `outcome`
      if (jsonObj.get("outcome") != null && !jsonObj.get("outcome").isJsonNull()) {
        Outcome.validateJsonElement(jsonObj.get("outcome"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("vcs_revision") != null && !jsonObj.get("vcs_revision").isJsonNull()) && !jsonObj.get("vcs_revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs_revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs_revision").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildSummary>() {
           @Override
           public void write(JsonWriter out, BuildSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildSummary
   * @throws IOException if the JSON string is invalid with respect to BuildSummary
   */
  public static BuildSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildSummary.class);
  }

  /**
   * Convert an instance of BuildSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

