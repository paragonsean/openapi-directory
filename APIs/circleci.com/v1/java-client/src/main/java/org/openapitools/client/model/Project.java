/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Aws;
import org.openapitools.client.model.ProjectFeatureFlags;
import org.openapitools.client.model.Scope;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Project
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:25.013031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Project {
  public static final String SERIALIZED_NAME_AWS = "aws";
  @SerializedName(SERIALIZED_NAME_AWS)
  private Aws aws;

  public static final String SERIALIZED_NAME_BRANCHES = "branches";
  @SerializedName(SERIALIZED_NAME_BRANCHES)
  private Object branches;

  public static final String SERIALIZED_NAME_CAMPFIRE_NOTIFY_PREFS = "campfire_notify_prefs";
  @SerializedName(SERIALIZED_NAME_CAMPFIRE_NOTIFY_PREFS)
  private String campfireNotifyPrefs;

  public static final String SERIALIZED_NAME_CAMPFIRE_ROOM = "campfire_room";
  @SerializedName(SERIALIZED_NAME_CAMPFIRE_ROOM)
  private String campfireRoom;

  public static final String SERIALIZED_NAME_CAMPFIRE_SUBDOMAIN = "campfire_subdomain";
  @SerializedName(SERIALIZED_NAME_CAMPFIRE_SUBDOMAIN)
  private String campfireSubdomain;

  public static final String SERIALIZED_NAME_CAMPFIRE_TOKEN = "campfire_token";
  @SerializedName(SERIALIZED_NAME_CAMPFIRE_TOKEN)
  private String campfireToken;

  public static final String SERIALIZED_NAME_COMPILE = "compile";
  @SerializedName(SERIALIZED_NAME_COMPILE)
  private String compile;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private String dependencies;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private String extra;

  public static final String SERIALIZED_NAME_FEATURE_FLAGS = "feature_flags";
  @SerializedName(SERIALIZED_NAME_FEATURE_FLAGS)
  private ProjectFeatureFlags featureFlags;

  public static final String SERIALIZED_NAME_FLOWDOCK_API_TOKEN = "flowdock_api_token";
  @SerializedName(SERIALIZED_NAME_FLOWDOCK_API_TOKEN)
  private String flowdockApiToken;

  public static final String SERIALIZED_NAME_FOLLOWED = "followed";
  @SerializedName(SERIALIZED_NAME_FOLLOWED)
  private Boolean followed;

  public static final String SERIALIZED_NAME_HAS_USABLE_KEY = "has_usable_key";
  @SerializedName(SERIALIZED_NAME_HAS_USABLE_KEY)
  private Boolean hasUsableKey;

  public static final String SERIALIZED_NAME_HEROKU_DEPLOY_USER = "heroku_deploy_user";
  @SerializedName(SERIALIZED_NAME_HEROKU_DEPLOY_USER)
  private String herokuDeployUser;

  public static final String SERIALIZED_NAME_HIPCHAT_API_TOKEN = "hipchat_api_token";
  @SerializedName(SERIALIZED_NAME_HIPCHAT_API_TOKEN)
  private String hipchatApiToken;

  public static final String SERIALIZED_NAME_HIPCHAT_NOTIFY = "hipchat_notify";
  @SerializedName(SERIALIZED_NAME_HIPCHAT_NOTIFY)
  private String hipchatNotify;

  public static final String SERIALIZED_NAME_HIPCHAT_NOTIFY_PREFS = "hipchat_notify_prefs";
  @SerializedName(SERIALIZED_NAME_HIPCHAT_NOTIFY_PREFS)
  private String hipchatNotifyPrefs;

  public static final String SERIALIZED_NAME_HIPCHAT_ROOM = "hipchat_room";
  @SerializedName(SERIALIZED_NAME_HIPCHAT_ROOM)
  private String hipchatRoom;

  public static final String SERIALIZED_NAME_IRC_CHANNEL = "irc_channel";
  @SerializedName(SERIALIZED_NAME_IRC_CHANNEL)
  private String ircChannel;

  public static final String SERIALIZED_NAME_IRC_KEYWORD = "irc_keyword";
  @SerializedName(SERIALIZED_NAME_IRC_KEYWORD)
  private String ircKeyword;

  public static final String SERIALIZED_NAME_IRC_NOTIFY_PREFS = "irc_notify_prefs";
  @SerializedName(SERIALIZED_NAME_IRC_NOTIFY_PREFS)
  private String ircNotifyPrefs;

  public static final String SERIALIZED_NAME_IRC_PASSWORD = "irc_password";
  @SerializedName(SERIALIZED_NAME_IRC_PASSWORD)
  private String ircPassword;

  public static final String SERIALIZED_NAME_IRC_SERVER = "irc_server";
  @SerializedName(SERIALIZED_NAME_IRC_SERVER)
  private String ircServer;

  public static final String SERIALIZED_NAME_IRC_USERNAME = "irc_username";
  @SerializedName(SERIALIZED_NAME_IRC_USERNAME)
  private String ircUsername;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_OSS = "oss";
  @SerializedName(SERIALIZED_NAME_OSS)
  private Boolean oss;

  public static final String SERIALIZED_NAME_PARALLEL = "parallel";
  @SerializedName(SERIALIZED_NAME_PARALLEL)
  private Integer parallel;

  public static final String SERIALIZED_NAME_REPONAME = "reponame";
  @SerializedName(SERIALIZED_NAME_REPONAME)
  private String reponame;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<Scope> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETUP = "setup";
  @SerializedName(SERIALIZED_NAME_SETUP)
  private String setup;

  public static final String SERIALIZED_NAME_SLACK_API_TOKEN = "slack_api_token";
  @SerializedName(SERIALIZED_NAME_SLACK_API_TOKEN)
  private String slackApiToken;

  public static final String SERIALIZED_NAME_SLACK_CHANNEL = "slack_channel";
  @SerializedName(SERIALIZED_NAME_SLACK_CHANNEL)
  private String slackChannel;

  public static final String SERIALIZED_NAME_SLACK_CHANNEL_OVERRIDE = "slack_channel_override";
  @SerializedName(SERIALIZED_NAME_SLACK_CHANNEL_OVERRIDE)
  private String slackChannelOverride;

  public static final String SERIALIZED_NAME_SLACK_NOTIFY_PREFS = "slack_notify_prefs";
  @SerializedName(SERIALIZED_NAME_SLACK_NOTIFY_PREFS)
  private String slackNotifyPrefs;

  public static final String SERIALIZED_NAME_SLACK_SUBDOMAIN = "slack_subdomain";
  @SerializedName(SERIALIZED_NAME_SLACK_SUBDOMAIN)
  private String slackSubdomain;

  public static final String SERIALIZED_NAME_SLACK_WEBHOOK_URL = "slack_webhook_url";
  @SerializedName(SERIALIZED_NAME_SLACK_WEBHOOK_URL)
  private URI slackWebhookUrl;

  public static final String SERIALIZED_NAME_SSH_KEYS = "ssh_keys";
  @SerializedName(SERIALIZED_NAME_SSH_KEYS)
  private List<String> sshKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private String test;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VCS_TYPE = "vcs_type";
  @SerializedName(SERIALIZED_NAME_VCS_TYPE)
  private String vcsType;

  public static final String SERIALIZED_NAME_VCS_URL = "vcs_url";
  @SerializedName(SERIALIZED_NAME_VCS_URL)
  private URI vcsUrl;

  public Project() {
  }

  public Project aws(Aws aws) {
    this.aws = aws;
    return this;
  }

  /**
   * Get aws
   * @return aws
   */
  @javax.annotation.Nullable
  public Aws getAws() {
    return aws;
  }

  public void setAws(Aws aws) {
    this.aws = aws;
  }


  public Project branches(Object branches) {
    this.branches = branches;
    return this;
  }

  /**
   * Get branches
   * @return branches
   */
  @javax.annotation.Nullable
  public Object getBranches() {
    return branches;
  }

  public void setBranches(Object branches) {
    this.branches = branches;
  }


  public Project campfireNotifyPrefs(String campfireNotifyPrefs) {
    this.campfireNotifyPrefs = campfireNotifyPrefs;
    return this;
  }

  /**
   * Get campfireNotifyPrefs
   * @return campfireNotifyPrefs
   */
  @javax.annotation.Nullable
  public String getCampfireNotifyPrefs() {
    return campfireNotifyPrefs;
  }

  public void setCampfireNotifyPrefs(String campfireNotifyPrefs) {
    this.campfireNotifyPrefs = campfireNotifyPrefs;
  }


  public Project campfireRoom(String campfireRoom) {
    this.campfireRoom = campfireRoom;
    return this;
  }

  /**
   * Get campfireRoom
   * @return campfireRoom
   */
  @javax.annotation.Nullable
  public String getCampfireRoom() {
    return campfireRoom;
  }

  public void setCampfireRoom(String campfireRoom) {
    this.campfireRoom = campfireRoom;
  }


  public Project campfireSubdomain(String campfireSubdomain) {
    this.campfireSubdomain = campfireSubdomain;
    return this;
  }

  /**
   * Get campfireSubdomain
   * @return campfireSubdomain
   */
  @javax.annotation.Nullable
  public String getCampfireSubdomain() {
    return campfireSubdomain;
  }

  public void setCampfireSubdomain(String campfireSubdomain) {
    this.campfireSubdomain = campfireSubdomain;
  }


  public Project campfireToken(String campfireToken) {
    this.campfireToken = campfireToken;
    return this;
  }

  /**
   * Get campfireToken
   * @return campfireToken
   */
  @javax.annotation.Nullable
  public String getCampfireToken() {
    return campfireToken;
  }

  public void setCampfireToken(String campfireToken) {
    this.campfireToken = campfireToken;
  }


  public Project compile(String compile) {
    this.compile = compile;
    return this;
  }

  /**
   * Get compile
   * @return compile
   */
  @javax.annotation.Nullable
  public String getCompile() {
    return compile;
  }

  public void setCompile(String compile) {
    this.compile = compile;
  }


  public Project defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Get defaultBranch
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public Project dependencies(String dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  /**
   * Get dependencies
   * @return dependencies
   */
  @javax.annotation.Nullable
  public String getDependencies() {
    return dependencies;
  }

  public void setDependencies(String dependencies) {
    this.dependencies = dependencies;
  }


  public Project extra(String extra) {
    this.extra = extra;
    return this;
  }

  /**
   * Get extra
   * @return extra
   */
  @javax.annotation.Nullable
  public String getExtra() {
    return extra;
  }

  public void setExtra(String extra) {
    this.extra = extra;
  }


  public Project featureFlags(ProjectFeatureFlags featureFlags) {
    this.featureFlags = featureFlags;
    return this;
  }

  /**
   * Get featureFlags
   * @return featureFlags
   */
  @javax.annotation.Nullable
  public ProjectFeatureFlags getFeatureFlags() {
    return featureFlags;
  }

  public void setFeatureFlags(ProjectFeatureFlags featureFlags) {
    this.featureFlags = featureFlags;
  }


  public Project flowdockApiToken(String flowdockApiToken) {
    this.flowdockApiToken = flowdockApiToken;
    return this;
  }

  /**
   * Get flowdockApiToken
   * @return flowdockApiToken
   */
  @javax.annotation.Nullable
  public String getFlowdockApiToken() {
    return flowdockApiToken;
  }

  public void setFlowdockApiToken(String flowdockApiToken) {
    this.flowdockApiToken = flowdockApiToken;
  }


  public Project followed(Boolean followed) {
    this.followed = followed;
    return this;
  }

  /**
   * Get followed
   * @return followed
   */
  @javax.annotation.Nullable
  public Boolean getFollowed() {
    return followed;
  }

  public void setFollowed(Boolean followed) {
    this.followed = followed;
  }


  public Project hasUsableKey(Boolean hasUsableKey) {
    this.hasUsableKey = hasUsableKey;
    return this;
  }

  /**
   * Get hasUsableKey
   * @return hasUsableKey
   */
  @javax.annotation.Nullable
  public Boolean getHasUsableKey() {
    return hasUsableKey;
  }

  public void setHasUsableKey(Boolean hasUsableKey) {
    this.hasUsableKey = hasUsableKey;
  }


  public Project herokuDeployUser(String herokuDeployUser) {
    this.herokuDeployUser = herokuDeployUser;
    return this;
  }

  /**
   * Get herokuDeployUser
   * @return herokuDeployUser
   */
  @javax.annotation.Nullable
  public String getHerokuDeployUser() {
    return herokuDeployUser;
  }

  public void setHerokuDeployUser(String herokuDeployUser) {
    this.herokuDeployUser = herokuDeployUser;
  }


  public Project hipchatApiToken(String hipchatApiToken) {
    this.hipchatApiToken = hipchatApiToken;
    return this;
  }

  /**
   * Get hipchatApiToken
   * @return hipchatApiToken
   */
  @javax.annotation.Nullable
  public String getHipchatApiToken() {
    return hipchatApiToken;
  }

  public void setHipchatApiToken(String hipchatApiToken) {
    this.hipchatApiToken = hipchatApiToken;
  }


  public Project hipchatNotify(String hipchatNotify) {
    this.hipchatNotify = hipchatNotify;
    return this;
  }

  /**
   * Get hipchatNotify
   * @return hipchatNotify
   */
  @javax.annotation.Nullable
  public String getHipchatNotify() {
    return hipchatNotify;
  }

  public void setHipchatNotify(String hipchatNotify) {
    this.hipchatNotify = hipchatNotify;
  }


  public Project hipchatNotifyPrefs(String hipchatNotifyPrefs) {
    this.hipchatNotifyPrefs = hipchatNotifyPrefs;
    return this;
  }

  /**
   * Get hipchatNotifyPrefs
   * @return hipchatNotifyPrefs
   */
  @javax.annotation.Nullable
  public String getHipchatNotifyPrefs() {
    return hipchatNotifyPrefs;
  }

  public void setHipchatNotifyPrefs(String hipchatNotifyPrefs) {
    this.hipchatNotifyPrefs = hipchatNotifyPrefs;
  }


  public Project hipchatRoom(String hipchatRoom) {
    this.hipchatRoom = hipchatRoom;
    return this;
  }

  /**
   * Get hipchatRoom
   * @return hipchatRoom
   */
  @javax.annotation.Nullable
  public String getHipchatRoom() {
    return hipchatRoom;
  }

  public void setHipchatRoom(String hipchatRoom) {
    this.hipchatRoom = hipchatRoom;
  }


  public Project ircChannel(String ircChannel) {
    this.ircChannel = ircChannel;
    return this;
  }

  /**
   * Get ircChannel
   * @return ircChannel
   */
  @javax.annotation.Nullable
  public String getIrcChannel() {
    return ircChannel;
  }

  public void setIrcChannel(String ircChannel) {
    this.ircChannel = ircChannel;
  }


  public Project ircKeyword(String ircKeyword) {
    this.ircKeyword = ircKeyword;
    return this;
  }

  /**
   * Get ircKeyword
   * @return ircKeyword
   */
  @javax.annotation.Nullable
  public String getIrcKeyword() {
    return ircKeyword;
  }

  public void setIrcKeyword(String ircKeyword) {
    this.ircKeyword = ircKeyword;
  }


  public Project ircNotifyPrefs(String ircNotifyPrefs) {
    this.ircNotifyPrefs = ircNotifyPrefs;
    return this;
  }

  /**
   * Get ircNotifyPrefs
   * @return ircNotifyPrefs
   */
  @javax.annotation.Nullable
  public String getIrcNotifyPrefs() {
    return ircNotifyPrefs;
  }

  public void setIrcNotifyPrefs(String ircNotifyPrefs) {
    this.ircNotifyPrefs = ircNotifyPrefs;
  }


  public Project ircPassword(String ircPassword) {
    this.ircPassword = ircPassword;
    return this;
  }

  /**
   * Get ircPassword
   * @return ircPassword
   */
  @javax.annotation.Nullable
  public String getIrcPassword() {
    return ircPassword;
  }

  public void setIrcPassword(String ircPassword) {
    this.ircPassword = ircPassword;
  }


  public Project ircServer(String ircServer) {
    this.ircServer = ircServer;
    return this;
  }

  /**
   * Get ircServer
   * @return ircServer
   */
  @javax.annotation.Nullable
  public String getIrcServer() {
    return ircServer;
  }

  public void setIrcServer(String ircServer) {
    this.ircServer = ircServer;
  }


  public Project ircUsername(String ircUsername) {
    this.ircUsername = ircUsername;
    return this;
  }

  /**
   * Get ircUsername
   * @return ircUsername
   */
  @javax.annotation.Nullable
  public String getIrcUsername() {
    return ircUsername;
  }

  public void setIrcUsername(String ircUsername) {
    this.ircUsername = ircUsername;
  }


  public Project language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Project oss(Boolean oss) {
    this.oss = oss;
    return this;
  }

  /**
   * Get oss
   * @return oss
   */
  @javax.annotation.Nullable
  public Boolean getOss() {
    return oss;
  }

  public void setOss(Boolean oss) {
    this.oss = oss;
  }


  public Project parallel(Integer parallel) {
    this.parallel = parallel;
    return this;
  }

  /**
   * Get parallel
   * @return parallel
   */
  @javax.annotation.Nullable
  public Integer getParallel() {
    return parallel;
  }

  public void setParallel(Integer parallel) {
    this.parallel = parallel;
  }


  public Project reponame(String reponame) {
    this.reponame = reponame;
    return this;
  }

  /**
   * Get reponame
   * @return reponame
   */
  @javax.annotation.Nullable
  public String getReponame() {
    return reponame;
  }

  public void setReponame(String reponame) {
    this.reponame = reponame;
  }


  public Project scopes(List<Scope> scopes) {
    this.scopes = scopes;
    return this;
  }

  public Project addScopesItem(Scope scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<Scope> getScopes() {
    return scopes;
  }

  public void setScopes(List<Scope> scopes) {
    this.scopes = scopes;
  }


  public Project setup(String setup) {
    this.setup = setup;
    return this;
  }

  /**
   * Get setup
   * @return setup
   */
  @javax.annotation.Nullable
  public String getSetup() {
    return setup;
  }

  public void setSetup(String setup) {
    this.setup = setup;
  }


  public Project slackApiToken(String slackApiToken) {
    this.slackApiToken = slackApiToken;
    return this;
  }

  /**
   * Get slackApiToken
   * @return slackApiToken
   */
  @javax.annotation.Nullable
  public String getSlackApiToken() {
    return slackApiToken;
  }

  public void setSlackApiToken(String slackApiToken) {
    this.slackApiToken = slackApiToken;
  }


  public Project slackChannel(String slackChannel) {
    this.slackChannel = slackChannel;
    return this;
  }

  /**
   * Get slackChannel
   * @return slackChannel
   */
  @javax.annotation.Nullable
  public String getSlackChannel() {
    return slackChannel;
  }

  public void setSlackChannel(String slackChannel) {
    this.slackChannel = slackChannel;
  }


  public Project slackChannelOverride(String slackChannelOverride) {
    this.slackChannelOverride = slackChannelOverride;
    return this;
  }

  /**
   * Get slackChannelOverride
   * @return slackChannelOverride
   */
  @javax.annotation.Nullable
  public String getSlackChannelOverride() {
    return slackChannelOverride;
  }

  public void setSlackChannelOverride(String slackChannelOverride) {
    this.slackChannelOverride = slackChannelOverride;
  }


  public Project slackNotifyPrefs(String slackNotifyPrefs) {
    this.slackNotifyPrefs = slackNotifyPrefs;
    return this;
  }

  /**
   * Get slackNotifyPrefs
   * @return slackNotifyPrefs
   */
  @javax.annotation.Nullable
  public String getSlackNotifyPrefs() {
    return slackNotifyPrefs;
  }

  public void setSlackNotifyPrefs(String slackNotifyPrefs) {
    this.slackNotifyPrefs = slackNotifyPrefs;
  }


  public Project slackSubdomain(String slackSubdomain) {
    this.slackSubdomain = slackSubdomain;
    return this;
  }

  /**
   * Get slackSubdomain
   * @return slackSubdomain
   */
  @javax.annotation.Nullable
  public String getSlackSubdomain() {
    return slackSubdomain;
  }

  public void setSlackSubdomain(String slackSubdomain) {
    this.slackSubdomain = slackSubdomain;
  }


  public Project slackWebhookUrl(URI slackWebhookUrl) {
    this.slackWebhookUrl = slackWebhookUrl;
    return this;
  }

  /**
   * Get slackWebhookUrl
   * @return slackWebhookUrl
   */
  @javax.annotation.Nullable
  public URI getSlackWebhookUrl() {
    return slackWebhookUrl;
  }

  public void setSlackWebhookUrl(URI slackWebhookUrl) {
    this.slackWebhookUrl = slackWebhookUrl;
  }


  public Project sshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
    return this;
  }

  public Project addSshKeysItem(String sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

  /**
   * Get sshKeys
   * @return sshKeys
   */
  @javax.annotation.Nullable
  public List<String> getSshKeys() {
    return sshKeys;
  }

  public void setSshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
  }


  public Project test(String test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nullable
  public String getTest() {
    return test;
  }

  public void setTest(String test) {
    this.test = test;
  }


  public Project username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public Project vcsType(String vcsType) {
    this.vcsType = vcsType;
    return this;
  }

  /**
   * Get vcsType
   * @return vcsType
   */
  @javax.annotation.Nullable
  public String getVcsType() {
    return vcsType;
  }

  public void setVcsType(String vcsType) {
    this.vcsType = vcsType;
  }


  public Project vcsUrl(URI vcsUrl) {
    this.vcsUrl = vcsUrl;
    return this;
  }

  /**
   * Get vcsUrl
   * @return vcsUrl
   */
  @javax.annotation.Nullable
  public URI getVcsUrl() {
    return vcsUrl;
  }

  public void setVcsUrl(URI vcsUrl) {
    this.vcsUrl = vcsUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.aws, project.aws) &&
        Objects.equals(this.branches, project.branches) &&
        Objects.equals(this.campfireNotifyPrefs, project.campfireNotifyPrefs) &&
        Objects.equals(this.campfireRoom, project.campfireRoom) &&
        Objects.equals(this.campfireSubdomain, project.campfireSubdomain) &&
        Objects.equals(this.campfireToken, project.campfireToken) &&
        Objects.equals(this.compile, project.compile) &&
        Objects.equals(this.defaultBranch, project.defaultBranch) &&
        Objects.equals(this.dependencies, project.dependencies) &&
        Objects.equals(this.extra, project.extra) &&
        Objects.equals(this.featureFlags, project.featureFlags) &&
        Objects.equals(this.flowdockApiToken, project.flowdockApiToken) &&
        Objects.equals(this.followed, project.followed) &&
        Objects.equals(this.hasUsableKey, project.hasUsableKey) &&
        Objects.equals(this.herokuDeployUser, project.herokuDeployUser) &&
        Objects.equals(this.hipchatApiToken, project.hipchatApiToken) &&
        Objects.equals(this.hipchatNotify, project.hipchatNotify) &&
        Objects.equals(this.hipchatNotifyPrefs, project.hipchatNotifyPrefs) &&
        Objects.equals(this.hipchatRoom, project.hipchatRoom) &&
        Objects.equals(this.ircChannel, project.ircChannel) &&
        Objects.equals(this.ircKeyword, project.ircKeyword) &&
        Objects.equals(this.ircNotifyPrefs, project.ircNotifyPrefs) &&
        Objects.equals(this.ircPassword, project.ircPassword) &&
        Objects.equals(this.ircServer, project.ircServer) &&
        Objects.equals(this.ircUsername, project.ircUsername) &&
        Objects.equals(this.language, project.language) &&
        Objects.equals(this.oss, project.oss) &&
        Objects.equals(this.parallel, project.parallel) &&
        Objects.equals(this.reponame, project.reponame) &&
        Objects.equals(this.scopes, project.scopes) &&
        Objects.equals(this.setup, project.setup) &&
        Objects.equals(this.slackApiToken, project.slackApiToken) &&
        Objects.equals(this.slackChannel, project.slackChannel) &&
        Objects.equals(this.slackChannelOverride, project.slackChannelOverride) &&
        Objects.equals(this.slackNotifyPrefs, project.slackNotifyPrefs) &&
        Objects.equals(this.slackSubdomain, project.slackSubdomain) &&
        Objects.equals(this.slackWebhookUrl, project.slackWebhookUrl) &&
        Objects.equals(this.sshKeys, project.sshKeys) &&
        Objects.equals(this.test, project.test) &&
        Objects.equals(this.username, project.username) &&
        Objects.equals(this.vcsType, project.vcsType) &&
        Objects.equals(this.vcsUrl, project.vcsUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(aws, branches, campfireNotifyPrefs, campfireRoom, campfireSubdomain, campfireToken, compile, defaultBranch, dependencies, extra, featureFlags, flowdockApiToken, followed, hasUsableKey, herokuDeployUser, hipchatApiToken, hipchatNotify, hipchatNotifyPrefs, hipchatRoom, ircChannel, ircKeyword, ircNotifyPrefs, ircPassword, ircServer, ircUsername, language, oss, parallel, reponame, scopes, setup, slackApiToken, slackChannel, slackChannelOverride, slackNotifyPrefs, slackSubdomain, slackWebhookUrl, sshKeys, test, username, vcsType, vcsUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    sb.append("    aws: ").append(toIndentedString(aws)).append("\n");
    sb.append("    branches: ").append(toIndentedString(branches)).append("\n");
    sb.append("    campfireNotifyPrefs: ").append(toIndentedString(campfireNotifyPrefs)).append("\n");
    sb.append("    campfireRoom: ").append(toIndentedString(campfireRoom)).append("\n");
    sb.append("    campfireSubdomain: ").append(toIndentedString(campfireSubdomain)).append("\n");
    sb.append("    campfireToken: ").append(toIndentedString(campfireToken)).append("\n");
    sb.append("    compile: ").append(toIndentedString(compile)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    featureFlags: ").append(toIndentedString(featureFlags)).append("\n");
    sb.append("    flowdockApiToken: ").append(toIndentedString(flowdockApiToken)).append("\n");
    sb.append("    followed: ").append(toIndentedString(followed)).append("\n");
    sb.append("    hasUsableKey: ").append(toIndentedString(hasUsableKey)).append("\n");
    sb.append("    herokuDeployUser: ").append(toIndentedString(herokuDeployUser)).append("\n");
    sb.append("    hipchatApiToken: ").append(toIndentedString(hipchatApiToken)).append("\n");
    sb.append("    hipchatNotify: ").append(toIndentedString(hipchatNotify)).append("\n");
    sb.append("    hipchatNotifyPrefs: ").append(toIndentedString(hipchatNotifyPrefs)).append("\n");
    sb.append("    hipchatRoom: ").append(toIndentedString(hipchatRoom)).append("\n");
    sb.append("    ircChannel: ").append(toIndentedString(ircChannel)).append("\n");
    sb.append("    ircKeyword: ").append(toIndentedString(ircKeyword)).append("\n");
    sb.append("    ircNotifyPrefs: ").append(toIndentedString(ircNotifyPrefs)).append("\n");
    sb.append("    ircPassword: ").append(toIndentedString(ircPassword)).append("\n");
    sb.append("    ircServer: ").append(toIndentedString(ircServer)).append("\n");
    sb.append("    ircUsername: ").append(toIndentedString(ircUsername)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    oss: ").append(toIndentedString(oss)).append("\n");
    sb.append("    parallel: ").append(toIndentedString(parallel)).append("\n");
    sb.append("    reponame: ").append(toIndentedString(reponame)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    setup: ").append(toIndentedString(setup)).append("\n");
    sb.append("    slackApiToken: ").append(toIndentedString(slackApiToken)).append("\n");
    sb.append("    slackChannel: ").append(toIndentedString(slackChannel)).append("\n");
    sb.append("    slackChannelOverride: ").append(toIndentedString(slackChannelOverride)).append("\n");
    sb.append("    slackNotifyPrefs: ").append(toIndentedString(slackNotifyPrefs)).append("\n");
    sb.append("    slackSubdomain: ").append(toIndentedString(slackSubdomain)).append("\n");
    sb.append("    slackWebhookUrl: ").append(toIndentedString(slackWebhookUrl)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    vcsType: ").append(toIndentedString(vcsType)).append("\n");
    sb.append("    vcsUrl: ").append(toIndentedString(vcsUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aws");
    openapiFields.add("branches");
    openapiFields.add("campfire_notify_prefs");
    openapiFields.add("campfire_room");
    openapiFields.add("campfire_subdomain");
    openapiFields.add("campfire_token");
    openapiFields.add("compile");
    openapiFields.add("default_branch");
    openapiFields.add("dependencies");
    openapiFields.add("extra");
    openapiFields.add("feature_flags");
    openapiFields.add("flowdock_api_token");
    openapiFields.add("followed");
    openapiFields.add("has_usable_key");
    openapiFields.add("heroku_deploy_user");
    openapiFields.add("hipchat_api_token");
    openapiFields.add("hipchat_notify");
    openapiFields.add("hipchat_notify_prefs");
    openapiFields.add("hipchat_room");
    openapiFields.add("irc_channel");
    openapiFields.add("irc_keyword");
    openapiFields.add("irc_notify_prefs");
    openapiFields.add("irc_password");
    openapiFields.add("irc_server");
    openapiFields.add("irc_username");
    openapiFields.add("language");
    openapiFields.add("oss");
    openapiFields.add("parallel");
    openapiFields.add("reponame");
    openapiFields.add("scopes");
    openapiFields.add("setup");
    openapiFields.add("slack_api_token");
    openapiFields.add("slack_channel");
    openapiFields.add("slack_channel_override");
    openapiFields.add("slack_notify_prefs");
    openapiFields.add("slack_subdomain");
    openapiFields.add("slack_webhook_url");
    openapiFields.add("ssh_keys");
    openapiFields.add("test");
    openapiFields.add("username");
    openapiFields.add("vcs_type");
    openapiFields.add("vcs_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Project
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Project.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Project is not found in the empty JSON string", Project.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Project.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Project` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aws`
      if (jsonObj.get("aws") != null && !jsonObj.get("aws").isJsonNull()) {
        Aws.validateJsonElement(jsonObj.get("aws"));
      }
      if ((jsonObj.get("campfire_notify_prefs") != null && !jsonObj.get("campfire_notify_prefs").isJsonNull()) && !jsonObj.get("campfire_notify_prefs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campfire_notify_prefs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campfire_notify_prefs").toString()));
      }
      if ((jsonObj.get("campfire_room") != null && !jsonObj.get("campfire_room").isJsonNull()) && !jsonObj.get("campfire_room").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campfire_room` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campfire_room").toString()));
      }
      if ((jsonObj.get("campfire_subdomain") != null && !jsonObj.get("campfire_subdomain").isJsonNull()) && !jsonObj.get("campfire_subdomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campfire_subdomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campfire_subdomain").toString()));
      }
      if ((jsonObj.get("campfire_token") != null && !jsonObj.get("campfire_token").isJsonNull()) && !jsonObj.get("campfire_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campfire_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campfire_token").toString()));
      }
      if ((jsonObj.get("compile") != null && !jsonObj.get("compile").isJsonNull()) && !jsonObj.get("compile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compile").toString()));
      }
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) && !jsonObj.get("dependencies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
      }
      if ((jsonObj.get("extra") != null && !jsonObj.get("extra").isJsonNull()) && !jsonObj.get("extra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra").toString()));
      }
      // validate the optional field `feature_flags`
      if (jsonObj.get("feature_flags") != null && !jsonObj.get("feature_flags").isJsonNull()) {
        ProjectFeatureFlags.validateJsonElement(jsonObj.get("feature_flags"));
      }
      if ((jsonObj.get("flowdock_api_token") != null && !jsonObj.get("flowdock_api_token").isJsonNull()) && !jsonObj.get("flowdock_api_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowdock_api_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowdock_api_token").toString()));
      }
      if ((jsonObj.get("heroku_deploy_user") != null && !jsonObj.get("heroku_deploy_user").isJsonNull()) && !jsonObj.get("heroku_deploy_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heroku_deploy_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heroku_deploy_user").toString()));
      }
      if ((jsonObj.get("hipchat_api_token") != null && !jsonObj.get("hipchat_api_token").isJsonNull()) && !jsonObj.get("hipchat_api_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipchat_api_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipchat_api_token").toString()));
      }
      if ((jsonObj.get("hipchat_notify") != null && !jsonObj.get("hipchat_notify").isJsonNull()) && !jsonObj.get("hipchat_notify").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipchat_notify` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipchat_notify").toString()));
      }
      if ((jsonObj.get("hipchat_notify_prefs") != null && !jsonObj.get("hipchat_notify_prefs").isJsonNull()) && !jsonObj.get("hipchat_notify_prefs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipchat_notify_prefs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipchat_notify_prefs").toString()));
      }
      if ((jsonObj.get("hipchat_room") != null && !jsonObj.get("hipchat_room").isJsonNull()) && !jsonObj.get("hipchat_room").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipchat_room` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipchat_room").toString()));
      }
      if ((jsonObj.get("irc_channel") != null && !jsonObj.get("irc_channel").isJsonNull()) && !jsonObj.get("irc_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `irc_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("irc_channel").toString()));
      }
      if ((jsonObj.get("irc_keyword") != null && !jsonObj.get("irc_keyword").isJsonNull()) && !jsonObj.get("irc_keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `irc_keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("irc_keyword").toString()));
      }
      if ((jsonObj.get("irc_notify_prefs") != null && !jsonObj.get("irc_notify_prefs").isJsonNull()) && !jsonObj.get("irc_notify_prefs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `irc_notify_prefs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("irc_notify_prefs").toString()));
      }
      if ((jsonObj.get("irc_password") != null && !jsonObj.get("irc_password").isJsonNull()) && !jsonObj.get("irc_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `irc_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("irc_password").toString()));
      }
      if ((jsonObj.get("irc_server") != null && !jsonObj.get("irc_server").isJsonNull()) && !jsonObj.get("irc_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `irc_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("irc_server").toString()));
      }
      if ((jsonObj.get("irc_username") != null && !jsonObj.get("irc_username").isJsonNull()) && !jsonObj.get("irc_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `irc_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("irc_username").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("reponame") != null && !jsonObj.get("reponame").isJsonNull()) && !jsonObj.get("reponame").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reponame` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reponame").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if ((jsonObj.get("setup") != null && !jsonObj.get("setup").isJsonNull()) && !jsonObj.get("setup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `setup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("setup").toString()));
      }
      if ((jsonObj.get("slack_api_token") != null && !jsonObj.get("slack_api_token").isJsonNull()) && !jsonObj.get("slack_api_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_api_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_api_token").toString()));
      }
      if ((jsonObj.get("slack_channel") != null && !jsonObj.get("slack_channel").isJsonNull()) && !jsonObj.get("slack_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_channel").toString()));
      }
      if ((jsonObj.get("slack_channel_override") != null && !jsonObj.get("slack_channel_override").isJsonNull()) && !jsonObj.get("slack_channel_override").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_channel_override` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_channel_override").toString()));
      }
      if ((jsonObj.get("slack_notify_prefs") != null && !jsonObj.get("slack_notify_prefs").isJsonNull()) && !jsonObj.get("slack_notify_prefs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_notify_prefs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_notify_prefs").toString()));
      }
      if ((jsonObj.get("slack_subdomain") != null && !jsonObj.get("slack_subdomain").isJsonNull()) && !jsonObj.get("slack_subdomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_subdomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_subdomain").toString()));
      }
      if ((jsonObj.get("slack_webhook_url") != null && !jsonObj.get("slack_webhook_url").isJsonNull()) && !jsonObj.get("slack_webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_webhook_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ssh_keys") != null && !jsonObj.get("ssh_keys").isJsonNull() && !jsonObj.get("ssh_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_keys` to be an array in the JSON string but got `%s`", jsonObj.get("ssh_keys").toString()));
      }
      if ((jsonObj.get("test") != null && !jsonObj.get("test").isJsonNull()) && !jsonObj.get("test").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `test` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("vcs_type") != null && !jsonObj.get("vcs_type").isJsonNull()) && !jsonObj.get("vcs_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs_type").toString()));
      }
      if ((jsonObj.get("vcs_url") != null && !jsonObj.get("vcs_url").isJsonNull()) && !jsonObj.get("vcs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Project.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Project' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Project> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Project.class));

       return (TypeAdapter<T>) new TypeAdapter<Project>() {
           @Override
           public void write(JsonWriter out, Project value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Project read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Project given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Project
   * @throws IOException if the JSON string is invalid with respect to Project
   */
  public static Project fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Project.class);
  }

  /**
   * Convert an instance of Project to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

