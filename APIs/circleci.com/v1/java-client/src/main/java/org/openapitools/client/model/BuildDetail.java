/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommitDetail;
import org.openapitools.client.model.PreviousBuild;
import org.openapitools.client.model.User;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * previous build
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:25.013031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildDetail {
  public static final String SERIALIZED_NAME_ALL_COMMIT_DETAILS = "all_commit_details";
  @SerializedName(SERIALIZED_NAME_ALL_COMMIT_DETAILS)
  private List<CommitDetail> allCommitDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPARE = "compare";
  @SerializedName(SERIALIZED_NAME_COMPARE)
  private URI compare;

  public static final String SERIALIZED_NAME_JOB_NAME = "job_name";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private Object node = null;

  public static final String SERIALIZED_NAME_PREVIOUS_SUCCESSFUL_BUILD = "previous_successful_build";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_SUCCESSFUL_BUILD)
  private PreviousBuild previousSuccessfulBuild;

  public static final String SERIALIZED_NAME_RETRIES = "retries";
  @SerializedName(SERIALIZED_NAME_RETRIES)
  private Boolean retries;

  public static final String SERIALIZED_NAME_SSH_ENABLED = "ssh_enabled";
  @SerializedName(SERIALIZED_NAME_SSH_ENABLED)
  private Boolean sshEnabled;

  public static final String SERIALIZED_NAME_TIMEDOUT = "timedout";
  @SerializedName(SERIALIZED_NAME_TIMEDOUT)
  private Boolean timedout;

  public static final String SERIALIZED_NAME_USAGE_QUEUED_AT = "usage_queued_at";
  @SerializedName(SERIALIZED_NAME_USAGE_QUEUED_AT)
  private OffsetDateTime usageQueuedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public BuildDetail() {
  }

  public BuildDetail allCommitDetails(List<CommitDetail> allCommitDetails) {
    this.allCommitDetails = allCommitDetails;
    return this;
  }

  public BuildDetail addAllCommitDetailsItem(CommitDetail allCommitDetailsItem) {
    if (this.allCommitDetails == null) {
      this.allCommitDetails = new ArrayList<>();
    }
    this.allCommitDetails.add(allCommitDetailsItem);
    return this;
  }

  /**
   * Get allCommitDetails
   * @return allCommitDetails
   */
  @javax.annotation.Nullable
  public List<CommitDetail> getAllCommitDetails() {
    return allCommitDetails;
  }

  public void setAllCommitDetails(List<CommitDetail> allCommitDetails) {
    this.allCommitDetails = allCommitDetails;
  }


  public BuildDetail compare(URI compare) {
    this.compare = compare;
    return this;
  }

  /**
   * Get compare
   * @return compare
   */
  @javax.annotation.Nullable
  public URI getCompare() {
    return compare;
  }

  public void setCompare(URI compare) {
    this.compare = compare;
  }


  public BuildDetail jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public BuildDetail node(Object node) {
    this.node = node;
    return this;
  }

  /**
   * Get node
   * @return node
   */
  @javax.annotation.Nullable
  public Object getNode() {
    return node;
  }

  public void setNode(Object node) {
    this.node = node;
  }


  public BuildDetail previousSuccessfulBuild(PreviousBuild previousSuccessfulBuild) {
    this.previousSuccessfulBuild = previousSuccessfulBuild;
    return this;
  }

  /**
   * Get previousSuccessfulBuild
   * @return previousSuccessfulBuild
   */
  @javax.annotation.Nullable
  public PreviousBuild getPreviousSuccessfulBuild() {
    return previousSuccessfulBuild;
  }

  public void setPreviousSuccessfulBuild(PreviousBuild previousSuccessfulBuild) {
    this.previousSuccessfulBuild = previousSuccessfulBuild;
  }


  public BuildDetail retries(Boolean retries) {
    this.retries = retries;
    return this;
  }

  /**
   * Get retries
   * @return retries
   */
  @javax.annotation.Nullable
  public Boolean getRetries() {
    return retries;
  }

  public void setRetries(Boolean retries) {
    this.retries = retries;
  }


  public BuildDetail sshEnabled(Boolean sshEnabled) {
    this.sshEnabled = sshEnabled;
    return this;
  }

  /**
   * Get sshEnabled
   * @return sshEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSshEnabled() {
    return sshEnabled;
  }

  public void setSshEnabled(Boolean sshEnabled) {
    this.sshEnabled = sshEnabled;
  }


  public BuildDetail timedout(Boolean timedout) {
    this.timedout = timedout;
    return this;
  }

  /**
   * Get timedout
   * @return timedout
   */
  @javax.annotation.Nullable
  public Boolean getTimedout() {
    return timedout;
  }

  public void setTimedout(Boolean timedout) {
    this.timedout = timedout;
  }


  public BuildDetail usageQueuedAt(OffsetDateTime usageQueuedAt) {
    this.usageQueuedAt = usageQueuedAt;
    return this;
  }

  /**
   * Get usageQueuedAt
   * @return usageQueuedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageQueuedAt() {
    return usageQueuedAt;
  }

  public void setUsageQueuedAt(OffsetDateTime usageQueuedAt) {
    this.usageQueuedAt = usageQueuedAt;
  }


  public BuildDetail user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildDetail buildDetail = (BuildDetail) o;
    return Objects.equals(this.allCommitDetails, buildDetail.allCommitDetails) &&
        Objects.equals(this.compare, buildDetail.compare) &&
        Objects.equals(this.jobName, buildDetail.jobName) &&
        Objects.equals(this.node, buildDetail.node) &&
        Objects.equals(this.previousSuccessfulBuild, buildDetail.previousSuccessfulBuild) &&
        Objects.equals(this.retries, buildDetail.retries) &&
        Objects.equals(this.sshEnabled, buildDetail.sshEnabled) &&
        Objects.equals(this.timedout, buildDetail.timedout) &&
        Objects.equals(this.usageQueuedAt, buildDetail.usageQueuedAt) &&
        Objects.equals(this.user, buildDetail.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allCommitDetails, compare, jobName, node, previousSuccessfulBuild, retries, sshEnabled, timedout, usageQueuedAt, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildDetail {\n");
    sb.append("    allCommitDetails: ").append(toIndentedString(allCommitDetails)).append("\n");
    sb.append("    compare: ").append(toIndentedString(compare)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    previousSuccessfulBuild: ").append(toIndentedString(previousSuccessfulBuild)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    sshEnabled: ").append(toIndentedString(sshEnabled)).append("\n");
    sb.append("    timedout: ").append(toIndentedString(timedout)).append("\n");
    sb.append("    usageQueuedAt: ").append(toIndentedString(usageQueuedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all_commit_details");
    openapiFields.add("compare");
    openapiFields.add("job_name");
    openapiFields.add("node");
    openapiFields.add("previous_successful_build");
    openapiFields.add("retries");
    openapiFields.add("ssh_enabled");
    openapiFields.add("timedout");
    openapiFields.add("usage_queued_at");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildDetail is not found in the empty JSON string", BuildDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("all_commit_details") != null && !jsonObj.get("all_commit_details").isJsonNull()) {
        JsonArray jsonArrayallCommitDetails = jsonObj.getAsJsonArray("all_commit_details");
        if (jsonArrayallCommitDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("all_commit_details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `all_commit_details` to be an array in the JSON string but got `%s`", jsonObj.get("all_commit_details").toString()));
          }

          // validate the optional field `all_commit_details` (array)
          for (int i = 0; i < jsonArrayallCommitDetails.size(); i++) {
            CommitDetail.validateJsonElement(jsonArrayallCommitDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("compare") != null && !jsonObj.get("compare").isJsonNull()) && !jsonObj.get("compare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare").toString()));
      }
      if ((jsonObj.get("job_name") != null && !jsonObj.get("job_name").isJsonNull()) && !jsonObj.get("job_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_name").toString()));
      }
      // validate the optional field `previous_successful_build`
      if (jsonObj.get("previous_successful_build") != null && !jsonObj.get("previous_successful_build").isJsonNull()) {
        PreviousBuild.validateJsonElement(jsonObj.get("previous_successful_build"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildDetail>() {
           @Override
           public void write(JsonWriter out, BuildDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildDetail
   * @throws IOException if the JSON string is invalid with respect to BuildDetail
   */
  public static BuildDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildDetail.class);
  }

  /**
   * Convert an instance of BuildDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

