/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.BuildDetail;
import org.openapitools.client.model.BuildSummary;
import org.openapitools.client.model.Envvar;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectUsernameProjectBuildCacheDelete200Response;
import org.openapitools.client.model.ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response;
import org.openapitools.client.model.ProjectUsernameProjectPostRequest;
import org.openapitools.client.model.ProjectUsernameProjectSshKeyPostDefaultResponse;
import org.openapitools.client.model.ProjectUsernameProjectSshKeyPostRequest;
import org.openapitools.client.model.ProjectUsernameProjectTreeBranchPostRequest;
import org.openapitools.client.model.Tests;
import java.net.URI;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Provides information about the signed in user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meGetTest() throws ApiException {
        User response = api.meGet();
        // TODO: test validations
    }

    /**
     * Clears the cache for a project. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectBuildCacheDeleteTest() throws ApiException {
        String username = null;
        String project = null;
        ProjectUsernameProjectBuildCacheDelete200Response response = api.projectUsernameProjectBuildCacheDelete(username, project);
        // TODO: test validations
    }

    /**
     * List the artifacts produced by a given build. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectBuildNumArtifactsGetTest() throws ApiException {
        String username = null;
        String project = null;
        Integer buildNum = null;
        List<Artifact> response = api.projectUsernameProjectBuildNumArtifactsGet(username, project, buildNum);
        // TODO: test validations
    }

    /**
     * Cancels the build, returns a summary of the build. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectBuildNumCancelPostTest() throws ApiException {
        String username = null;
        String project = null;
        Integer buildNum = null;
        Build response = api.projectUsernameProjectBuildNumCancelPost(username, project, buildNum);
        // TODO: test validations
    }

    /**
     * Full details for a single build. The response includes all of the fields from the build summary. This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named &#39;payload&#39;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectBuildNumGetTest() throws ApiException {
        String username = null;
        String project = null;
        Integer buildNum = null;
        BuildDetail response = api.projectUsernameProjectBuildNumGet(username, project, buildNum);
        // TODO: test validations
    }

    /**
     * Retries the build, returns a summary of the new build. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectBuildNumRetryPostTest() throws ApiException {
        String username = null;
        String project = null;
        Integer buildNum = null;
        Build response = api.projectUsernameProjectBuildNumRetryPost(username, project, buildNum);
        // TODO: test validations
    }

    /**
     * Provides test metadata for a build Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectBuildNumTestsGetTest() throws ApiException {
        String username = null;
        String project = null;
        Integer buildNum = null;
        Tests response = api.projectUsernameProjectBuildNumTestsGet(username, project, buildNum);
        // TODO: test validations
    }

    /**
     * Delete a checkout key. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectCheckoutKeyFingerprintDeleteTest() throws ApiException {
        String username = null;
        String project = null;
        String fingerprint = null;
        ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response response = api.projectUsernameProjectCheckoutKeyFingerprintDelete(username, project, fingerprint);
        // TODO: test validations
    }

    /**
     * Get a checkout key. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectCheckoutKeyFingerprintGetTest() throws ApiException {
        String username = null;
        String project = null;
        String fingerprint = null;
        Key response = api.projectUsernameProjectCheckoutKeyFingerprintGet(username, project, fingerprint);
        // TODO: test validations
    }

    /**
     * Lists checkout keys. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectCheckoutKeyGetTest() throws ApiException {
        String username = null;
        String project = null;
        List<Key> response = api.projectUsernameProjectCheckoutKeyGet(username, project);
        // TODO: test validations
    }

    /**
     * Creates a new checkout key. Only usable with a user API token. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectCheckoutKeyPostTest() throws ApiException {
        String username = null;
        String project = null;
        String body = null;
        Key response = api.projectUsernameProjectCheckoutKeyPost(username, project, body);
        // TODO: test validations
    }

    /**
     * Lists the environment variables for :project 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectEnvvarGetTest() throws ApiException {
        String username = null;
        String project = null;
        List<Envvar> response = api.projectUsernameProjectEnvvarGet(username, project);
        // TODO: test validations
    }

    /**
     * Deletes the environment variable named &#39;:name&#39; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectEnvvarNameDeleteTest() throws ApiException {
        String username = null;
        String project = null;
        String name = null;
        ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response response = api.projectUsernameProjectEnvvarNameDelete(username, project, name);
        // TODO: test validations
    }

    /**
     * Gets the hidden value of environment variable :name 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectEnvvarNameGetTest() throws ApiException {
        String username = null;
        String project = null;
        String name = null;
        Envvar response = api.projectUsernameProjectEnvvarNameGet(username, project, name);
        // TODO: test validations
    }

    /**
     * Creates a new environment variable 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectEnvvarPostTest() throws ApiException {
        String username = null;
        String project = null;
        Envvar response = api.projectUsernameProjectEnvvarPost(username, project);
        // TODO: test validations
    }

    /**
     * Build summary for each of the last 30 builds for a single git repo. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectGetTest() throws ApiException {
        String username = null;
        String project = null;
        Integer limit = null;
        Integer offset = null;
        String filter = null;
        List<Build> response = api.projectUsernameProjectGet(username, project, limit, offset, filter);
        // TODO: test validations
    }

    /**
     * Triggers a new build, returns a summary of the build. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectPostTest() throws ApiException {
        String username = null;
        String project = null;
        ProjectUsernameProjectPostRequest projectUsernameProjectPostRequest = null;
        BuildSummary response = api.projectUsernameProjectPost(username, project, projectUsernameProjectPostRequest);
        // TODO: test validations
    }

    /**
     * Create an ssh key used to access external systems that require SSH key-based authentication 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectSshKeyPostTest() throws ApiException {
        String username = null;
        String project = null;
        String contentType = null;
        ProjectUsernameProjectSshKeyPostRequest projectUsernameProjectSshKeyPostRequest = null;
        ProjectUsernameProjectSshKeyPostDefaultResponse response = api.projectUsernameProjectSshKeyPost(username, project, contentType, projectUsernameProjectSshKeyPostRequest);
        // TODO: test validations
    }

    /**
     * Triggers a new build, returns a summary of the build. Optional build parameters can be set using an experimental API.  Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectUsernameProjectTreeBranchPostTest() throws ApiException {
        String username = null;
        String project = null;
        String branch = null;
        ProjectUsernameProjectTreeBranchPostRequest projectUsernameProjectTreeBranchPostRequest = null;
        Build response = api.projectUsernameProjectTreeBranchPost(username, project, branch, projectUsernameProjectTreeBranchPostRequest);
        // TODO: test validations
    }

    /**
     * List of all the projects you&#39;re following on CircleCI, with build information organized by branch. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetTest() throws ApiException {
        List<Project> response = api.projectsGet();
        // TODO: test validations
    }

    /**
     * Build summary for each of the last 30 recent builds, ordered by build_num. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recentBuildsGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<Build> response = api.recentBuildsGet(limit, offset);
        // TODO: test validations
    }

    /**
     * Adds your Heroku API key to CircleCI, takes apikey as form param name. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userHerokuKeyPostTest() throws ApiException {
        api.userHerokuKeyPost();
        // TODO: test validations
    }

}
