/*
 * CircleCI REST API
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for User
 */
public class UserTest {
    private final User model = new User();

    /**
     * Model tests for User
     */
    @Test
    public void testUser() {
        // TODO: test User
    }

    /**
     * Test the property 'admin'
     */
    @Test
    public void adminTest() {
        // TODO: test admin
    }

    /**
     * Test the property 'allEmails'
     */
    @Test
    public void allEmailsTest() {
        // TODO: test allEmails
    }

    /**
     * Test the property 'analyticsId'
     */
    @Test
    public void analyticsIdTest() {
        // TODO: test analyticsId
    }

    /**
     * Test the property 'avatarUrl'
     */
    @Test
    public void avatarUrlTest() {
        // TODO: test avatarUrl
    }

    /**
     * Test the property 'basicEmailPrefs'
     */
    @Test
    public void basicEmailPrefsTest() {
        // TODO: test basicEmailPrefs
    }

    /**
     * Test the property 'bitbucket'
     */
    @Test
    public void bitbucketTest() {
        // TODO: test bitbucket
    }

    /**
     * Test the property 'bitbucketAuthorized'
     */
    @Test
    public void bitbucketAuthorizedTest() {
        // TODO: test bitbucketAuthorized
    }

    /**
     * Test the property 'containers'
     */
    @Test
    public void containersTest() {
        // TODO: test containers
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'daysLeftInTrial'
     */
    @Test
    public void daysLeftInTrialTest() {
        // TODO: test daysLeftInTrial
    }

    /**
     * Test the property 'devAdmin'
     */
    @Test
    public void devAdminTest() {
        // TODO: test devAdmin
    }

    /**
     * Test the property 'enrolledBetas'
     */
    @Test
    public void enrolledBetasTest() {
        // TODO: test enrolledBetas
    }

    /**
     * Test the property 'githubId'
     */
    @Test
    public void githubIdTest() {
        // TODO: test githubId
    }

    /**
     * Test the property 'githubOauthScopes'
     */
    @Test
    public void githubOauthScopesTest() {
        // TODO: test githubOauthScopes
    }

    /**
     * Test the property 'gravatarId'
     */
    @Test
    public void gravatarIdTest() {
        // TODO: test gravatarId
    }

    /**
     * Test the property 'herokuApiKey'
     */
    @Test
    public void herokuApiKeyTest() {
        // TODO: test herokuApiKey
    }

    /**
     * Test the property 'inBetaProgram'
     */
    @Test
    public void inBetaProgramTest() {
        // TODO: test inBetaProgram
    }

    /**
     * Test the property 'login'
     */
    @Test
    public void loginTest() {
        // TODO: test login
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'organizationPrefs'
     */
    @Test
    public void organizationPrefsTest() {
        // TODO: test organizationPrefs
    }

    /**
     * Test the property 'parallelism'
     */
    @Test
    public void parallelismTest() {
        // TODO: test parallelism
    }

    /**
     * Test the property 'plan'
     */
    @Test
    public void planTest() {
        // TODO: test plan
    }

    /**
     * Test the property 'projects'
     */
    @Test
    public void projectsTest() {
        // TODO: test projects
    }

    /**
     * Test the property 'pusherId'
     */
    @Test
    public void pusherIdTest() {
        // TODO: test pusherId
    }

    /**
     * Test the property 'selectedEmail'
     */
    @Test
    public void selectedEmailTest() {
        // TODO: test selectedEmail
    }

    /**
     * Test the property 'signInCount'
     */
    @Test
    public void signInCountTest() {
        // TODO: test signInCount
    }

    /**
     * Test the property 'trialEnd'
     */
    @Test
    public void trialEndTest() {
        // TODO: test trialEnd
    }

}
