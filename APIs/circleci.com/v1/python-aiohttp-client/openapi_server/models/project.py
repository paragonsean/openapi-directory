# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aws import Aws
from openapi_server.models.project_feature_flags import ProjectFeatureFlags
from openapi_server.models.scope import Scope
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aws: Aws=None, branches: object=None, campfire_notify_prefs: str=None, campfire_room: str=None, campfire_subdomain: str=None, campfire_token: str=None, compile: str=None, default_branch: str=None, dependencies: str=None, extra: str=None, feature_flags: ProjectFeatureFlags=None, flowdock_api_token: str=None, followed: bool=None, has_usable_key: bool=None, heroku_deploy_user: str=None, hipchat_api_token: str=None, hipchat_notify: str=None, hipchat_notify_prefs: str=None, hipchat_room: str=None, irc_channel: str=None, irc_keyword: str=None, irc_notify_prefs: str=None, irc_password: str=None, irc_server: str=None, irc_username: str=None, language: str=None, oss: bool=None, parallel: int=None, reponame: str=None, scopes: List[Scope]=None, setup: str=None, slack_api_token: str=None, slack_channel: str=None, slack_channel_override: str=None, slack_notify_prefs: str=None, slack_subdomain: str=None, slack_webhook_url: str=None, ssh_keys: List[str]=None, test: str=None, username: str=None, vcs_type: str=None, vcs_url: str=None):
        """Project - a model defined in OpenAPI

        :param aws: The aws of this Project.
        :param branches: The branches of this Project.
        :param campfire_notify_prefs: The campfire_notify_prefs of this Project.
        :param campfire_room: The campfire_room of this Project.
        :param campfire_subdomain: The campfire_subdomain of this Project.
        :param campfire_token: The campfire_token of this Project.
        :param compile: The compile of this Project.
        :param default_branch: The default_branch of this Project.
        :param dependencies: The dependencies of this Project.
        :param extra: The extra of this Project.
        :param feature_flags: The feature_flags of this Project.
        :param flowdock_api_token: The flowdock_api_token of this Project.
        :param followed: The followed of this Project.
        :param has_usable_key: The has_usable_key of this Project.
        :param heroku_deploy_user: The heroku_deploy_user of this Project.
        :param hipchat_api_token: The hipchat_api_token of this Project.
        :param hipchat_notify: The hipchat_notify of this Project.
        :param hipchat_notify_prefs: The hipchat_notify_prefs of this Project.
        :param hipchat_room: The hipchat_room of this Project.
        :param irc_channel: The irc_channel of this Project.
        :param irc_keyword: The irc_keyword of this Project.
        :param irc_notify_prefs: The irc_notify_prefs of this Project.
        :param irc_password: The irc_password of this Project.
        :param irc_server: The irc_server of this Project.
        :param irc_username: The irc_username of this Project.
        :param language: The language of this Project.
        :param oss: The oss of this Project.
        :param parallel: The parallel of this Project.
        :param reponame: The reponame of this Project.
        :param scopes: The scopes of this Project.
        :param setup: The setup of this Project.
        :param slack_api_token: The slack_api_token of this Project.
        :param slack_channel: The slack_channel of this Project.
        :param slack_channel_override: The slack_channel_override of this Project.
        :param slack_notify_prefs: The slack_notify_prefs of this Project.
        :param slack_subdomain: The slack_subdomain of this Project.
        :param slack_webhook_url: The slack_webhook_url of this Project.
        :param ssh_keys: The ssh_keys of this Project.
        :param test: The test of this Project.
        :param username: The username of this Project.
        :param vcs_type: The vcs_type of this Project.
        :param vcs_url: The vcs_url of this Project.
        """
        self.openapi_types = {
            'aws': Aws,
            'branches': object,
            'campfire_notify_prefs': str,
            'campfire_room': str,
            'campfire_subdomain': str,
            'campfire_token': str,
            'compile': str,
            'default_branch': str,
            'dependencies': str,
            'extra': str,
            'feature_flags': ProjectFeatureFlags,
            'flowdock_api_token': str,
            'followed': bool,
            'has_usable_key': bool,
            'heroku_deploy_user': str,
            'hipchat_api_token': str,
            'hipchat_notify': str,
            'hipchat_notify_prefs': str,
            'hipchat_room': str,
            'irc_channel': str,
            'irc_keyword': str,
            'irc_notify_prefs': str,
            'irc_password': str,
            'irc_server': str,
            'irc_username': str,
            'language': str,
            'oss': bool,
            'parallel': int,
            'reponame': str,
            'scopes': List[Scope],
            'setup': str,
            'slack_api_token': str,
            'slack_channel': str,
            'slack_channel_override': str,
            'slack_notify_prefs': str,
            'slack_subdomain': str,
            'slack_webhook_url': str,
            'ssh_keys': List[str],
            'test': str,
            'username': str,
            'vcs_type': str,
            'vcs_url': str
        }

        self.attribute_map = {
            'aws': 'aws',
            'branches': 'branches',
            'campfire_notify_prefs': 'campfire_notify_prefs',
            'campfire_room': 'campfire_room',
            'campfire_subdomain': 'campfire_subdomain',
            'campfire_token': 'campfire_token',
            'compile': 'compile',
            'default_branch': 'default_branch',
            'dependencies': 'dependencies',
            'extra': 'extra',
            'feature_flags': 'feature_flags',
            'flowdock_api_token': 'flowdock_api_token',
            'followed': 'followed',
            'has_usable_key': 'has_usable_key',
            'heroku_deploy_user': 'heroku_deploy_user',
            'hipchat_api_token': 'hipchat_api_token',
            'hipchat_notify': 'hipchat_notify',
            'hipchat_notify_prefs': 'hipchat_notify_prefs',
            'hipchat_room': 'hipchat_room',
            'irc_channel': 'irc_channel',
            'irc_keyword': 'irc_keyword',
            'irc_notify_prefs': 'irc_notify_prefs',
            'irc_password': 'irc_password',
            'irc_server': 'irc_server',
            'irc_username': 'irc_username',
            'language': 'language',
            'oss': 'oss',
            'parallel': 'parallel',
            'reponame': 'reponame',
            'scopes': 'scopes',
            'setup': 'setup',
            'slack_api_token': 'slack_api_token',
            'slack_channel': 'slack_channel',
            'slack_channel_override': 'slack_channel_override',
            'slack_notify_prefs': 'slack_notify_prefs',
            'slack_subdomain': 'slack_subdomain',
            'slack_webhook_url': 'slack_webhook_url',
            'ssh_keys': 'ssh_keys',
            'test': 'test',
            'username': 'username',
            'vcs_type': 'vcs_type',
            'vcs_url': 'vcs_url'
        }

        self._aws = aws
        self._branches = branches
        self._campfire_notify_prefs = campfire_notify_prefs
        self._campfire_room = campfire_room
        self._campfire_subdomain = campfire_subdomain
        self._campfire_token = campfire_token
        self._compile = compile
        self._default_branch = default_branch
        self._dependencies = dependencies
        self._extra = extra
        self._feature_flags = feature_flags
        self._flowdock_api_token = flowdock_api_token
        self._followed = followed
        self._has_usable_key = has_usable_key
        self._heroku_deploy_user = heroku_deploy_user
        self._hipchat_api_token = hipchat_api_token
        self._hipchat_notify = hipchat_notify
        self._hipchat_notify_prefs = hipchat_notify_prefs
        self._hipchat_room = hipchat_room
        self._irc_channel = irc_channel
        self._irc_keyword = irc_keyword
        self._irc_notify_prefs = irc_notify_prefs
        self._irc_password = irc_password
        self._irc_server = irc_server
        self._irc_username = irc_username
        self._language = language
        self._oss = oss
        self._parallel = parallel
        self._reponame = reponame
        self._scopes = scopes
        self._setup = setup
        self._slack_api_token = slack_api_token
        self._slack_channel = slack_channel
        self._slack_channel_override = slack_channel_override
        self._slack_notify_prefs = slack_notify_prefs
        self._slack_subdomain = slack_subdomain
        self._slack_webhook_url = slack_webhook_url
        self._ssh_keys = ssh_keys
        self._test = test
        self._username = username
        self._vcs_type = vcs_type
        self._vcs_url = vcs_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aws(self):
        """Gets the aws of this Project.


        :return: The aws of this Project.
        :rtype: Aws
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this Project.


        :param aws: The aws of this Project.
        :type aws: Aws
        """

        self._aws = aws

    @property
    def branches(self):
        """Gets the branches of this Project.


        :return: The branches of this Project.
        :rtype: object
        """
        return self._branches

    @branches.setter
    def branches(self, branches):
        """Sets the branches of this Project.


        :param branches: The branches of this Project.
        :type branches: object
        """

        self._branches = branches

    @property
    def campfire_notify_prefs(self):
        """Gets the campfire_notify_prefs of this Project.


        :return: The campfire_notify_prefs of this Project.
        :rtype: str
        """
        return self._campfire_notify_prefs

    @campfire_notify_prefs.setter
    def campfire_notify_prefs(self, campfire_notify_prefs):
        """Sets the campfire_notify_prefs of this Project.


        :param campfire_notify_prefs: The campfire_notify_prefs of this Project.
        :type campfire_notify_prefs: str
        """

        self._campfire_notify_prefs = campfire_notify_prefs

    @property
    def campfire_room(self):
        """Gets the campfire_room of this Project.


        :return: The campfire_room of this Project.
        :rtype: str
        """
        return self._campfire_room

    @campfire_room.setter
    def campfire_room(self, campfire_room):
        """Sets the campfire_room of this Project.


        :param campfire_room: The campfire_room of this Project.
        :type campfire_room: str
        """

        self._campfire_room = campfire_room

    @property
    def campfire_subdomain(self):
        """Gets the campfire_subdomain of this Project.


        :return: The campfire_subdomain of this Project.
        :rtype: str
        """
        return self._campfire_subdomain

    @campfire_subdomain.setter
    def campfire_subdomain(self, campfire_subdomain):
        """Sets the campfire_subdomain of this Project.


        :param campfire_subdomain: The campfire_subdomain of this Project.
        :type campfire_subdomain: str
        """

        self._campfire_subdomain = campfire_subdomain

    @property
    def campfire_token(self):
        """Gets the campfire_token of this Project.


        :return: The campfire_token of this Project.
        :rtype: str
        """
        return self._campfire_token

    @campfire_token.setter
    def campfire_token(self, campfire_token):
        """Sets the campfire_token of this Project.


        :param campfire_token: The campfire_token of this Project.
        :type campfire_token: str
        """

        self._campfire_token = campfire_token

    @property
    def compile(self):
        """Gets the compile of this Project.


        :return: The compile of this Project.
        :rtype: str
        """
        return self._compile

    @compile.setter
    def compile(self, compile):
        """Sets the compile of this Project.


        :param compile: The compile of this Project.
        :type compile: str
        """

        self._compile = compile

    @property
    def default_branch(self):
        """Gets the default_branch of this Project.


        :return: The default_branch of this Project.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this Project.


        :param default_branch: The default_branch of this Project.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def dependencies(self):
        """Gets the dependencies of this Project.


        :return: The dependencies of this Project.
        :rtype: str
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this Project.


        :param dependencies: The dependencies of this Project.
        :type dependencies: str
        """

        self._dependencies = dependencies

    @property
    def extra(self):
        """Gets the extra of this Project.


        :return: The extra of this Project.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Project.


        :param extra: The extra of this Project.
        :type extra: str
        """

        self._extra = extra

    @property
    def feature_flags(self):
        """Gets the feature_flags of this Project.


        :return: The feature_flags of this Project.
        :rtype: ProjectFeatureFlags
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this Project.


        :param feature_flags: The feature_flags of this Project.
        :type feature_flags: ProjectFeatureFlags
        """

        self._feature_flags = feature_flags

    @property
    def flowdock_api_token(self):
        """Gets the flowdock_api_token of this Project.


        :return: The flowdock_api_token of this Project.
        :rtype: str
        """
        return self._flowdock_api_token

    @flowdock_api_token.setter
    def flowdock_api_token(self, flowdock_api_token):
        """Sets the flowdock_api_token of this Project.


        :param flowdock_api_token: The flowdock_api_token of this Project.
        :type flowdock_api_token: str
        """

        self._flowdock_api_token = flowdock_api_token

    @property
    def followed(self):
        """Gets the followed of this Project.


        :return: The followed of this Project.
        :rtype: bool
        """
        return self._followed

    @followed.setter
    def followed(self, followed):
        """Sets the followed of this Project.


        :param followed: The followed of this Project.
        :type followed: bool
        """

        self._followed = followed

    @property
    def has_usable_key(self):
        """Gets the has_usable_key of this Project.


        :return: The has_usable_key of this Project.
        :rtype: bool
        """
        return self._has_usable_key

    @has_usable_key.setter
    def has_usable_key(self, has_usable_key):
        """Sets the has_usable_key of this Project.


        :param has_usable_key: The has_usable_key of this Project.
        :type has_usable_key: bool
        """

        self._has_usable_key = has_usable_key

    @property
    def heroku_deploy_user(self):
        """Gets the heroku_deploy_user of this Project.


        :return: The heroku_deploy_user of this Project.
        :rtype: str
        """
        return self._heroku_deploy_user

    @heroku_deploy_user.setter
    def heroku_deploy_user(self, heroku_deploy_user):
        """Sets the heroku_deploy_user of this Project.


        :param heroku_deploy_user: The heroku_deploy_user of this Project.
        :type heroku_deploy_user: str
        """

        self._heroku_deploy_user = heroku_deploy_user

    @property
    def hipchat_api_token(self):
        """Gets the hipchat_api_token of this Project.


        :return: The hipchat_api_token of this Project.
        :rtype: str
        """
        return self._hipchat_api_token

    @hipchat_api_token.setter
    def hipchat_api_token(self, hipchat_api_token):
        """Sets the hipchat_api_token of this Project.


        :param hipchat_api_token: The hipchat_api_token of this Project.
        :type hipchat_api_token: str
        """

        self._hipchat_api_token = hipchat_api_token

    @property
    def hipchat_notify(self):
        """Gets the hipchat_notify of this Project.


        :return: The hipchat_notify of this Project.
        :rtype: str
        """
        return self._hipchat_notify

    @hipchat_notify.setter
    def hipchat_notify(self, hipchat_notify):
        """Sets the hipchat_notify of this Project.


        :param hipchat_notify: The hipchat_notify of this Project.
        :type hipchat_notify: str
        """

        self._hipchat_notify = hipchat_notify

    @property
    def hipchat_notify_prefs(self):
        """Gets the hipchat_notify_prefs of this Project.


        :return: The hipchat_notify_prefs of this Project.
        :rtype: str
        """
        return self._hipchat_notify_prefs

    @hipchat_notify_prefs.setter
    def hipchat_notify_prefs(self, hipchat_notify_prefs):
        """Sets the hipchat_notify_prefs of this Project.


        :param hipchat_notify_prefs: The hipchat_notify_prefs of this Project.
        :type hipchat_notify_prefs: str
        """

        self._hipchat_notify_prefs = hipchat_notify_prefs

    @property
    def hipchat_room(self):
        """Gets the hipchat_room of this Project.


        :return: The hipchat_room of this Project.
        :rtype: str
        """
        return self._hipchat_room

    @hipchat_room.setter
    def hipchat_room(self, hipchat_room):
        """Sets the hipchat_room of this Project.


        :param hipchat_room: The hipchat_room of this Project.
        :type hipchat_room: str
        """

        self._hipchat_room = hipchat_room

    @property
    def irc_channel(self):
        """Gets the irc_channel of this Project.


        :return: The irc_channel of this Project.
        :rtype: str
        """
        return self._irc_channel

    @irc_channel.setter
    def irc_channel(self, irc_channel):
        """Sets the irc_channel of this Project.


        :param irc_channel: The irc_channel of this Project.
        :type irc_channel: str
        """

        self._irc_channel = irc_channel

    @property
    def irc_keyword(self):
        """Gets the irc_keyword of this Project.


        :return: The irc_keyword of this Project.
        :rtype: str
        """
        return self._irc_keyword

    @irc_keyword.setter
    def irc_keyword(self, irc_keyword):
        """Sets the irc_keyword of this Project.


        :param irc_keyword: The irc_keyword of this Project.
        :type irc_keyword: str
        """

        self._irc_keyword = irc_keyword

    @property
    def irc_notify_prefs(self):
        """Gets the irc_notify_prefs of this Project.


        :return: The irc_notify_prefs of this Project.
        :rtype: str
        """
        return self._irc_notify_prefs

    @irc_notify_prefs.setter
    def irc_notify_prefs(self, irc_notify_prefs):
        """Sets the irc_notify_prefs of this Project.


        :param irc_notify_prefs: The irc_notify_prefs of this Project.
        :type irc_notify_prefs: str
        """

        self._irc_notify_prefs = irc_notify_prefs

    @property
    def irc_password(self):
        """Gets the irc_password of this Project.


        :return: The irc_password of this Project.
        :rtype: str
        """
        return self._irc_password

    @irc_password.setter
    def irc_password(self, irc_password):
        """Sets the irc_password of this Project.


        :param irc_password: The irc_password of this Project.
        :type irc_password: str
        """

        self._irc_password = irc_password

    @property
    def irc_server(self):
        """Gets the irc_server of this Project.


        :return: The irc_server of this Project.
        :rtype: str
        """
        return self._irc_server

    @irc_server.setter
    def irc_server(self, irc_server):
        """Sets the irc_server of this Project.


        :param irc_server: The irc_server of this Project.
        :type irc_server: str
        """

        self._irc_server = irc_server

    @property
    def irc_username(self):
        """Gets the irc_username of this Project.


        :return: The irc_username of this Project.
        :rtype: str
        """
        return self._irc_username

    @irc_username.setter
    def irc_username(self, irc_username):
        """Sets the irc_username of this Project.


        :param irc_username: The irc_username of this Project.
        :type irc_username: str
        """

        self._irc_username = irc_username

    @property
    def language(self):
        """Gets the language of this Project.


        :return: The language of this Project.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Project.


        :param language: The language of this Project.
        :type language: str
        """

        self._language = language

    @property
    def oss(self):
        """Gets the oss of this Project.


        :return: The oss of this Project.
        :rtype: bool
        """
        return self._oss

    @oss.setter
    def oss(self, oss):
        """Sets the oss of this Project.


        :param oss: The oss of this Project.
        :type oss: bool
        """

        self._oss = oss

    @property
    def parallel(self):
        """Gets the parallel of this Project.


        :return: The parallel of this Project.
        :rtype: int
        """
        return self._parallel

    @parallel.setter
    def parallel(self, parallel):
        """Sets the parallel of this Project.


        :param parallel: The parallel of this Project.
        :type parallel: int
        """

        self._parallel = parallel

    @property
    def reponame(self):
        """Gets the reponame of this Project.


        :return: The reponame of this Project.
        :rtype: str
        """
        return self._reponame

    @reponame.setter
    def reponame(self, reponame):
        """Sets the reponame of this Project.


        :param reponame: The reponame of this Project.
        :type reponame: str
        """

        self._reponame = reponame

    @property
    def scopes(self):
        """Gets the scopes of this Project.


        :return: The scopes of this Project.
        :rtype: List[Scope]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Project.


        :param scopes: The scopes of this Project.
        :type scopes: List[Scope]
        """

        self._scopes = scopes

    @property
    def setup(self):
        """Gets the setup of this Project.


        :return: The setup of this Project.
        :rtype: str
        """
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Sets the setup of this Project.


        :param setup: The setup of this Project.
        :type setup: str
        """

        self._setup = setup

    @property
    def slack_api_token(self):
        """Gets the slack_api_token of this Project.


        :return: The slack_api_token of this Project.
        :rtype: str
        """
        return self._slack_api_token

    @slack_api_token.setter
    def slack_api_token(self, slack_api_token):
        """Sets the slack_api_token of this Project.


        :param slack_api_token: The slack_api_token of this Project.
        :type slack_api_token: str
        """

        self._slack_api_token = slack_api_token

    @property
    def slack_channel(self):
        """Gets the slack_channel of this Project.


        :return: The slack_channel of this Project.
        :rtype: str
        """
        return self._slack_channel

    @slack_channel.setter
    def slack_channel(self, slack_channel):
        """Sets the slack_channel of this Project.


        :param slack_channel: The slack_channel of this Project.
        :type slack_channel: str
        """

        self._slack_channel = slack_channel

    @property
    def slack_channel_override(self):
        """Gets the slack_channel_override of this Project.


        :return: The slack_channel_override of this Project.
        :rtype: str
        """
        return self._slack_channel_override

    @slack_channel_override.setter
    def slack_channel_override(self, slack_channel_override):
        """Sets the slack_channel_override of this Project.


        :param slack_channel_override: The slack_channel_override of this Project.
        :type slack_channel_override: str
        """

        self._slack_channel_override = slack_channel_override

    @property
    def slack_notify_prefs(self):
        """Gets the slack_notify_prefs of this Project.


        :return: The slack_notify_prefs of this Project.
        :rtype: str
        """
        return self._slack_notify_prefs

    @slack_notify_prefs.setter
    def slack_notify_prefs(self, slack_notify_prefs):
        """Sets the slack_notify_prefs of this Project.


        :param slack_notify_prefs: The slack_notify_prefs of this Project.
        :type slack_notify_prefs: str
        """

        self._slack_notify_prefs = slack_notify_prefs

    @property
    def slack_subdomain(self):
        """Gets the slack_subdomain of this Project.


        :return: The slack_subdomain of this Project.
        :rtype: str
        """
        return self._slack_subdomain

    @slack_subdomain.setter
    def slack_subdomain(self, slack_subdomain):
        """Sets the slack_subdomain of this Project.


        :param slack_subdomain: The slack_subdomain of this Project.
        :type slack_subdomain: str
        """

        self._slack_subdomain = slack_subdomain

    @property
    def slack_webhook_url(self):
        """Gets the slack_webhook_url of this Project.


        :return: The slack_webhook_url of this Project.
        :rtype: str
        """
        return self._slack_webhook_url

    @slack_webhook_url.setter
    def slack_webhook_url(self, slack_webhook_url):
        """Sets the slack_webhook_url of this Project.


        :param slack_webhook_url: The slack_webhook_url of this Project.
        :type slack_webhook_url: str
        """

        self._slack_webhook_url = slack_webhook_url

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this Project.


        :return: The ssh_keys of this Project.
        :rtype: List[str]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this Project.


        :param ssh_keys: The ssh_keys of this Project.
        :type ssh_keys: List[str]
        """

        self._ssh_keys = ssh_keys

    @property
    def test(self):
        """Gets the test of this Project.


        :return: The test of this Project.
        :rtype: str
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Project.


        :param test: The test of this Project.
        :type test: str
        """

        self._test = test

    @property
    def username(self):
        """Gets the username of this Project.


        :return: The username of this Project.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Project.


        :param username: The username of this Project.
        :type username: str
        """

        self._username = username

    @property
    def vcs_type(self):
        """Gets the vcs_type of this Project.


        :return: The vcs_type of this Project.
        :rtype: str
        """
        return self._vcs_type

    @vcs_type.setter
    def vcs_type(self, vcs_type):
        """Sets the vcs_type of this Project.


        :param vcs_type: The vcs_type of this Project.
        :type vcs_type: str
        """

        self._vcs_type = vcs_type

    @property
    def vcs_url(self):
        """Gets the vcs_url of this Project.


        :return: The vcs_url of this Project.
        :rtype: str
        """
        return self._vcs_url

    @vcs_url.setter
    def vcs_url(self, vcs_url):
        """Sets the vcs_url of this Project.


        :param vcs_url: The vcs_url of this Project.
        :type vcs_url: str
        """

        self._vcs_url = vcs_url
