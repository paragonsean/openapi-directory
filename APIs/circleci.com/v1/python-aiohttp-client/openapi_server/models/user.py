# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, all_emails: List[str]=None, analytics_id: str=None, avatar_url: str=None, basic_email_prefs: str=None, bitbucket: int=None, bitbucket_authorized: bool=None, containers: int=None, created_at: datetime=None, days_left_in_trial: int=None, dev_admin: bool=None, enrolled_betas: List[str]=None, github_id: int=None, github_oauth_scopes: List[str]=None, gravatar_id: int=None, heroku_api_key: str=None, in_beta_program: bool=None, login: str=None, name: str=None, organization_prefs: object=None, parallelism: int=None, plan: str=None, projects: object=None, pusher_id: str=None, selected_email: str=None, sign_in_count: int=None, trial_end: datetime=None):
        """User - a model defined in OpenAPI

        :param admin: The admin of this User.
        :param all_emails: The all_emails of this User.
        :param analytics_id: The analytics_id of this User.
        :param avatar_url: The avatar_url of this User.
        :param basic_email_prefs: The basic_email_prefs of this User.
        :param bitbucket: The bitbucket of this User.
        :param bitbucket_authorized: The bitbucket_authorized of this User.
        :param containers: The containers of this User.
        :param created_at: The created_at of this User.
        :param days_left_in_trial: The days_left_in_trial of this User.
        :param dev_admin: The dev_admin of this User.
        :param enrolled_betas: The enrolled_betas of this User.
        :param github_id: The github_id of this User.
        :param github_oauth_scopes: The github_oauth_scopes of this User.
        :param gravatar_id: The gravatar_id of this User.
        :param heroku_api_key: The heroku_api_key of this User.
        :param in_beta_program: The in_beta_program of this User.
        :param login: The login of this User.
        :param name: The name of this User.
        :param organization_prefs: The organization_prefs of this User.
        :param parallelism: The parallelism of this User.
        :param plan: The plan of this User.
        :param projects: The projects of this User.
        :param pusher_id: The pusher_id of this User.
        :param selected_email: The selected_email of this User.
        :param sign_in_count: The sign_in_count of this User.
        :param trial_end: The trial_end of this User.
        """
        self.openapi_types = {
            'admin': bool,
            'all_emails': List[str],
            'analytics_id': str,
            'avatar_url': str,
            'basic_email_prefs': str,
            'bitbucket': int,
            'bitbucket_authorized': bool,
            'containers': int,
            'created_at': datetime,
            'days_left_in_trial': int,
            'dev_admin': bool,
            'enrolled_betas': List[str],
            'github_id': int,
            'github_oauth_scopes': List[str],
            'gravatar_id': int,
            'heroku_api_key': str,
            'in_beta_program': bool,
            'login': str,
            'name': str,
            'organization_prefs': object,
            'parallelism': int,
            'plan': str,
            'projects': object,
            'pusher_id': str,
            'selected_email': str,
            'sign_in_count': int,
            'trial_end': datetime
        }

        self.attribute_map = {
            'admin': 'admin',
            'all_emails': 'all_emails',
            'analytics_id': 'analytics_id',
            'avatar_url': 'avatar_url',
            'basic_email_prefs': 'basic_email_prefs',
            'bitbucket': 'bitbucket',
            'bitbucket_authorized': 'bitbucket_authorized',
            'containers': 'containers',
            'created_at': 'created_at',
            'days_left_in_trial': 'days_left_in_trial',
            'dev_admin': 'dev_admin',
            'enrolled_betas': 'enrolled_betas',
            'github_id': 'github_id',
            'github_oauth_scopes': 'github_oauth_scopes',
            'gravatar_id': 'gravatar_id',
            'heroku_api_key': 'heroku_api_key',
            'in_beta_program': 'in_beta_program',
            'login': 'login',
            'name': 'name',
            'organization_prefs': 'organization_prefs',
            'parallelism': 'parallelism',
            'plan': 'plan',
            'projects': 'projects',
            'pusher_id': 'pusher_id',
            'selected_email': 'selected_email',
            'sign_in_count': 'sign_in_count',
            'trial_end': 'trial_end'
        }

        self._admin = admin
        self._all_emails = all_emails
        self._analytics_id = analytics_id
        self._avatar_url = avatar_url
        self._basic_email_prefs = basic_email_prefs
        self._bitbucket = bitbucket
        self._bitbucket_authorized = bitbucket_authorized
        self._containers = containers
        self._created_at = created_at
        self._days_left_in_trial = days_left_in_trial
        self._dev_admin = dev_admin
        self._enrolled_betas = enrolled_betas
        self._github_id = github_id
        self._github_oauth_scopes = github_oauth_scopes
        self._gravatar_id = gravatar_id
        self._heroku_api_key = heroku_api_key
        self._in_beta_program = in_beta_program
        self._login = login
        self._name = name
        self._organization_prefs = organization_prefs
        self._parallelism = parallelism
        self._plan = plan
        self._projects = projects
        self._pusher_id = pusher_id
        self._selected_email = selected_email
        self._sign_in_count = sign_in_count
        self._trial_end = trial_end

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this User.


        :return: The admin of this User.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this User.


        :param admin: The admin of this User.
        :type admin: bool
        """

        self._admin = admin

    @property
    def all_emails(self):
        """Gets the all_emails of this User.


        :return: The all_emails of this User.
        :rtype: List[str]
        """
        return self._all_emails

    @all_emails.setter
    def all_emails(self, all_emails):
        """Sets the all_emails of this User.


        :param all_emails: The all_emails of this User.
        :type all_emails: List[str]
        """

        self._all_emails = all_emails

    @property
    def analytics_id(self):
        """Gets the analytics_id of this User.


        :return: The analytics_id of this User.
        :rtype: str
        """
        return self._analytics_id

    @analytics_id.setter
    def analytics_id(self, analytics_id):
        """Sets the analytics_id of this User.


        :param analytics_id: The analytics_id of this User.
        :type analytics_id: str
        """

        self._analytics_id = analytics_id

    @property
    def avatar_url(self):
        """Gets the avatar_url of this User.


        :return: The avatar_url of this User.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this User.


        :param avatar_url: The avatar_url of this User.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def basic_email_prefs(self):
        """Gets the basic_email_prefs of this User.


        :return: The basic_email_prefs of this User.
        :rtype: str
        """
        return self._basic_email_prefs

    @basic_email_prefs.setter
    def basic_email_prefs(self, basic_email_prefs):
        """Sets the basic_email_prefs of this User.


        :param basic_email_prefs: The basic_email_prefs of this User.
        :type basic_email_prefs: str
        """

        self._basic_email_prefs = basic_email_prefs

    @property
    def bitbucket(self):
        """Gets the bitbucket of this User.


        :return: The bitbucket of this User.
        :rtype: int
        """
        return self._bitbucket

    @bitbucket.setter
    def bitbucket(self, bitbucket):
        """Sets the bitbucket of this User.


        :param bitbucket: The bitbucket of this User.
        :type bitbucket: int
        """

        self._bitbucket = bitbucket

    @property
    def bitbucket_authorized(self):
        """Gets the bitbucket_authorized of this User.


        :return: The bitbucket_authorized of this User.
        :rtype: bool
        """
        return self._bitbucket_authorized

    @bitbucket_authorized.setter
    def bitbucket_authorized(self, bitbucket_authorized):
        """Sets the bitbucket_authorized of this User.


        :param bitbucket_authorized: The bitbucket_authorized of this User.
        :type bitbucket_authorized: bool
        """

        self._bitbucket_authorized = bitbucket_authorized

    @property
    def containers(self):
        """Gets the containers of this User.


        :return: The containers of this User.
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this User.


        :param containers: The containers of this User.
        :type containers: int
        """

        self._containers = containers

    @property
    def created_at(self):
        """Gets the created_at of this User.


        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def days_left_in_trial(self):
        """Gets the days_left_in_trial of this User.


        :return: The days_left_in_trial of this User.
        :rtype: int
        """
        return self._days_left_in_trial

    @days_left_in_trial.setter
    def days_left_in_trial(self, days_left_in_trial):
        """Sets the days_left_in_trial of this User.


        :param days_left_in_trial: The days_left_in_trial of this User.
        :type days_left_in_trial: int
        """

        self._days_left_in_trial = days_left_in_trial

    @property
    def dev_admin(self):
        """Gets the dev_admin of this User.


        :return: The dev_admin of this User.
        :rtype: bool
        """
        return self._dev_admin

    @dev_admin.setter
    def dev_admin(self, dev_admin):
        """Sets the dev_admin of this User.


        :param dev_admin: The dev_admin of this User.
        :type dev_admin: bool
        """

        self._dev_admin = dev_admin

    @property
    def enrolled_betas(self):
        """Gets the enrolled_betas of this User.


        :return: The enrolled_betas of this User.
        :rtype: List[str]
        """
        return self._enrolled_betas

    @enrolled_betas.setter
    def enrolled_betas(self, enrolled_betas):
        """Sets the enrolled_betas of this User.


        :param enrolled_betas: The enrolled_betas of this User.
        :type enrolled_betas: List[str]
        """

        self._enrolled_betas = enrolled_betas

    @property
    def github_id(self):
        """Gets the github_id of this User.


        :return: The github_id of this User.
        :rtype: int
        """
        return self._github_id

    @github_id.setter
    def github_id(self, github_id):
        """Sets the github_id of this User.


        :param github_id: The github_id of this User.
        :type github_id: int
        """

        self._github_id = github_id

    @property
    def github_oauth_scopes(self):
        """Gets the github_oauth_scopes of this User.


        :return: The github_oauth_scopes of this User.
        :rtype: List[str]
        """
        return self._github_oauth_scopes

    @github_oauth_scopes.setter
    def github_oauth_scopes(self, github_oauth_scopes):
        """Sets the github_oauth_scopes of this User.


        :param github_oauth_scopes: The github_oauth_scopes of this User.
        :type github_oauth_scopes: List[str]
        """

        self._github_oauth_scopes = github_oauth_scopes

    @property
    def gravatar_id(self):
        """Gets the gravatar_id of this User.


        :return: The gravatar_id of this User.
        :rtype: int
        """
        return self._gravatar_id

    @gravatar_id.setter
    def gravatar_id(self, gravatar_id):
        """Sets the gravatar_id of this User.


        :param gravatar_id: The gravatar_id of this User.
        :type gravatar_id: int
        """

        self._gravatar_id = gravatar_id

    @property
    def heroku_api_key(self):
        """Gets the heroku_api_key of this User.


        :return: The heroku_api_key of this User.
        :rtype: str
        """
        return self._heroku_api_key

    @heroku_api_key.setter
    def heroku_api_key(self, heroku_api_key):
        """Sets the heroku_api_key of this User.


        :param heroku_api_key: The heroku_api_key of this User.
        :type heroku_api_key: str
        """

        self._heroku_api_key = heroku_api_key

    @property
    def in_beta_program(self):
        """Gets the in_beta_program of this User.


        :return: The in_beta_program of this User.
        :rtype: bool
        """
        return self._in_beta_program

    @in_beta_program.setter
    def in_beta_program(self, in_beta_program):
        """Sets the in_beta_program of this User.


        :param in_beta_program: The in_beta_program of this User.
        :type in_beta_program: bool
        """

        self._in_beta_program = in_beta_program

    @property
    def login(self):
        """Gets the login of this User.


        :return: The login of this User.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this User.


        :param login: The login of this User.
        :type login: str
        """

        self._login = login

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def organization_prefs(self):
        """Gets the organization_prefs of this User.


        :return: The organization_prefs of this User.
        :rtype: object
        """
        return self._organization_prefs

    @organization_prefs.setter
    def organization_prefs(self, organization_prefs):
        """Sets the organization_prefs of this User.


        :param organization_prefs: The organization_prefs of this User.
        :type organization_prefs: object
        """

        self._organization_prefs = organization_prefs

    @property
    def parallelism(self):
        """Gets the parallelism of this User.


        :return: The parallelism of this User.
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this User.


        :param parallelism: The parallelism of this User.
        :type parallelism: int
        """

        self._parallelism = parallelism

    @property
    def plan(self):
        """Gets the plan of this User.


        :return: The plan of this User.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this User.


        :param plan: The plan of this User.
        :type plan: str
        """

        self._plan = plan

    @property
    def projects(self):
        """Gets the projects of this User.


        :return: The projects of this User.
        :rtype: object
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this User.


        :param projects: The projects of this User.
        :type projects: object
        """

        self._projects = projects

    @property
    def pusher_id(self):
        """Gets the pusher_id of this User.


        :return: The pusher_id of this User.
        :rtype: str
        """
        return self._pusher_id

    @pusher_id.setter
    def pusher_id(self, pusher_id):
        """Sets the pusher_id of this User.


        :param pusher_id: The pusher_id of this User.
        :type pusher_id: str
        """

        self._pusher_id = pusher_id

    @property
    def selected_email(self):
        """Gets the selected_email of this User.


        :return: The selected_email of this User.
        :rtype: str
        """
        return self._selected_email

    @selected_email.setter
    def selected_email(self, selected_email):
        """Sets the selected_email of this User.


        :param selected_email: The selected_email of this User.
        :type selected_email: str
        """

        self._selected_email = selected_email

    @property
    def sign_in_count(self):
        """Gets the sign_in_count of this User.


        :return: The sign_in_count of this User.
        :rtype: int
        """
        return self._sign_in_count

    @sign_in_count.setter
    def sign_in_count(self, sign_in_count):
        """Sets the sign_in_count of this User.


        :param sign_in_count: The sign_in_count of this User.
        :type sign_in_count: int
        """

        self._sign_in_count = sign_in_count

    @property
    def trial_end(self):
        """Gets the trial_end of this User.


        :return: The trial_end of this User.
        :rtype: datetime
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end):
        """Sets the trial_end of this User.


        :param trial_end: The trial_end of this User.
        :type trial_end: datetime
        """

        self._trial_end = trial_end
