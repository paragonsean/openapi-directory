# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Key(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fingerprint: str=None, preferred: bool=None, public_key: str=None, time: datetime=None, type: str=None):
        """Key - a model defined in OpenAPI

        :param fingerprint: The fingerprint of this Key.
        :param preferred: The preferred of this Key.
        :param public_key: The public_key of this Key.
        :param time: The time of this Key.
        :param type: The type of this Key.
        """
        self.openapi_types = {
            'fingerprint': str,
            'preferred': bool,
            'public_key': str,
            'time': datetime,
            'type': str
        }

        self.attribute_map = {
            'fingerprint': 'fingerprint',
            'preferred': 'preferred',
            'public_key': 'public_key',
            'time': 'time',
            'type': 'type'
        }

        self._fingerprint = fingerprint
        self._preferred = preferred
        self._public_key = public_key
        self._time = time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Key of this Key.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Key.


        :return: The fingerprint of this Key.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Key.


        :param fingerprint: The fingerprint of this Key.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def preferred(self):
        """Gets the preferred of this Key.


        :return: The preferred of this Key.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this Key.


        :param preferred: The preferred of this Key.
        :type preferred: bool
        """

        self._preferred = preferred

    @property
    def public_key(self):
        """Gets the public_key of this Key.


        :return: The public_key of this Key.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this Key.


        :param public_key: The public_key of this Key.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def time(self):
        """Gets the time of this Key.

        when the key was issued

        :return: The time of this Key.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Key.

        when the key was issued

        :param time: The time of this Key.
        :type time: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this Key.

        can be \"deploy-key\" or \"github-user-key\" 

        :return: The type of this Key.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Key.

        can be \"deploy-key\" or \"github-user-key\" 

        :param type: The type of this Key.
        :type type: str
        """
        allowed_values = ["deploy-key", "github-user-key"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
