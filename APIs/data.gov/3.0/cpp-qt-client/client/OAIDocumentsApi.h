/**
 * Regulations.gov
 * Provides public users access to federal regulatory content.
 *
 * The version of the OpenAPI document: 3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentsApi_H
#define OAI_OAIDocumentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentsApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentsApi(const int timeOut = 0);
    ~OAIDocumentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  response_format QString [required]
    * @param[in]  document_id QString [optional]
    * @param[in]  federal_register_number QString [optional]
    */
    virtual void document(const QString &response_format, const ::OpenAPI::OptionalParam<QString> &document_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &federal_register_number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  response_format QString [required]
    * @param[in]  counts_only qint32 [optional]
    * @param[in]  encoded qint32 [optional]
    * @param[in]  s QString [optional]
    * @param[in]  dct QString [optional]
    * @param[in]  dktid QString [optional]
    * @param[in]  dkt QString [optional]
    * @param[in]  cp QString [optional]
    * @param[in]  a QString [optional]
    * @param[in]  rpp QString [optional]
    * @param[in]  po qint32 [optional]
    * @param[in]  cs qint32 [optional]
    * @param[in]  np qint32 [optional]
    * @param[in]  cmsd QDate [optional]
    * @param[in]  cmd QDate [optional]
    * @param[in]  crd QDate [optional]
    * @param[in]  rd QDate [optional]
    * @param[in]  pd QDate [optional]
    * @param[in]  cat QString [optional]
    * @param[in]  sb QString [optional]
    * @param[in]  so QString [optional]
    * @param[in]  dktst QString [optional]
    * @param[in]  dktst2 QString [optional]
    * @param[in]  docst QString [optional]
    */
    virtual void documents(const QString &response_format, const ::OpenAPI::OptionalParam<qint32> &counts_only = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &encoded = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &s = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dktid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dkt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &a = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rpp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &po = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &np = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &cmsd = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &cmd = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &crd = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &rd = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &pd = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &cat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &so = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dktst = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dktst2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &docst = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void documentCallback(OAIHttpRequestWorker *worker);
    void documentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void documentSignal();
    void documentsSignal();


    void documentSignalFull(OAIHttpRequestWorker *worker);
    void documentsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use documentSignalError() instead")
    void documentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsSignalError() instead")
    void documentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use documentSignalErrorFull() instead")
    void documentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsSignalErrorFull() instead")
    void documentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
