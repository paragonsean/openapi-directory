/**
 * Regulations.gov
 * Provides public users access to federal regulatory content.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Documents service.
* @module api/DocumentsApi
* @version 3.0
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the document operation.
     * @callback module:api/DocumentsApi~documentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Document information
     * @param {module:model/String} responseFormat Format
     * @param {Object} opts Optional parameters
     * @param {String} [documentId = 'EPA-HQ-OAR-2011-0028-0108')] FDMS Document ID
     * @param {String} [federalRegisterNumber] Federal Register Document Number
     * @param {module:api/DocumentsApi~documentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    document(responseFormat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'responseFormat' is set
      if (responseFormat === undefined || responseFormat === null) {
        throw new Error("Missing the required parameter 'responseFormat' when calling document");
      }

      let pathParams = {
        'response_format': responseFormat
      };
      let queryParams = {
        'documentId': opts['documentId'],
        'federalRegisterNumber': opts['federalRegisterNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/document.{response_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documents operation.
     * @callback module:api/DocumentsApi~documentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Documents
     * This API allows users to build a query based on any of the parameters below.  If you have trouble building queries, you may wish to try them through the <a href=\"http://www.regulations.gov/#!advancedSearch\">Advanced Search</a> page on the Regulations.gov website.
     * @param {module:model/String} responseFormat Format
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [countsOnly] Counts Only: <ul><li>1 (will return only the document count for a search query)</li><li>0 (will return documents as well)</li></ul>
     * @param {module:model/Number} [encoded] Encoded: <ul><li>1 (will accept Regulations.gov style encoded parameters)</li><li>0 (will not accept such encoded parameters)</li></ul>
     * @param {String} [s] Keyword(s)
     * @param {module:model/String} [dct] Document Type: <ul><li>N: Notice</li><li>PR: Proposed Rule</li><li>FR: Rule</li><li>O: Other</li><li>SR: Supporting & Related Material</li><li>PS: Public Submission</li></ul>
     * @param {String} [dktid] Valid Docket ID (ex. SEC-2012-0044)
     * @param {module:model/String} [dkt] Docket Type: <ul><li>R: Rulemaking</li><li>N: Nonrulemaking</li></ul><p>A Docket Type is either Rulemaking or Nonrulemaking. A Rulemaking docket includes the type of regulation that establishes a rule. While a Non-Rulemaking docket does not include a rule.</p>
     * @param {module:model/String} [cp] Comment Period: <ul><li>O: Open</li><li>C: Closed</li></ul>
     * @param {String} [a] Federal Agency: List of accepted Federal Agency values. This field allows multiple values. Ex. a=FMCSA%252BEPA%252BFDA
     * @param {module:model/String} [rpp] Results Per Page 10, 25, 100, 500, 1,000.  Results per page may not exceed 1,000.
     * @param {Number} [po] Enter the page offset (always starts with 0). This is used in conjunction with results per page to provide large data sets. For example, if a search produces 82 results and the result per page is set to 25, this will generate 4 pages. 3 pages will have 25 results and the last page will have 7 results. Page offset values for each page will be: <pre>Page 1: po=0 Page 2: po=25 Page 3: po=50 Page 4: po=75</pre> The total number of pages is [total results/results per page] and page offset for page X is [X-1 * results per page]
     * @param {module:model/Number} [cs] Comment Period Closing Soon: <ul><li>0 (closing today)</li><li>3 (closing within 3 days)</li><li>15 (closing within 15 days)</li><li>30 (closing within 30 days)</li><li>90 (closing within 90 days)</li></ul>
     * @param {module:model/Number} [np] Newly Posted: <ul><li>0 (posted today)</li><li>3 (posted within last 3 days)</li><li>15 (posted within last 15 days)</li><li>30 (posted within last 30 days)</li><li>90 (posted within last 90 days)</li></ul>  For periods of time beyond 90-days, please use a date range with the Posted Date parameter.
     * @param {Date} [cmsd] Comment Period Start Date: Enter a date in the form of MM/DD/YY. Note: If the Comment Period End Date is also provided, then ensure the Comment Period Start date is earlier.
     * @param {Date} [cmd] Comment Period End Date: Enter a date in the form of MM/DD/YY. Note: If the Comment Period Start Date is also provided, then ensure the Comment Period End date is after.<br/>* Comment Period Start and End Dates are mutually exclusive with the 'closing soon' parameter. If both are provided, 'closing soon' will be ignored.
     * @param {Date} [crd] Creation Date: Enter a date in the form of MM/DD/YY. Accepts a single date or a date range. Ex. <code>crd=11/06/13-03/06/14</code>
     * @param {Date} [rd] Received Date: Enter a date in the form of MM/DD/YY. Accepts a single date or a date range. Ex. <code>rd=11/06/13-03/06/14</code>
     * @param {Date} [pd] Posted Date: Enter a date in the form of MM/DD/YY. Accepts a single date or a date range. Ex. <code>pd=11/06/13-03/06/14</code>
     * @param {module:model/String} [cat] Document Category: <ul><li>AD (Aerospace and Transportation)</li> <li>AEP (Agriculture, Environment, and Public Lands)</li> <li>BFS (Banking and Financial)</li> <li>CT (Commerce and International)</li> <li>LES (Defense, Law Enforcement, and Security)</li> <li>EELS (Education, Labor, Presidential, and Government Services)</li> <li>EUMM (Energy, Natural Resources, and Utilities)</li> <li>HCFP (Food Safety, Health, and Pharmaceutical)</li> <li>PRE (Housing, Development, and Real Estate)</li> <li>ITT (Technology and Telecommunications)</li></ul>
     * @param {module:model/String} [sb] Sort By: <ul><li>docketId (Docket ID)</li><li>docId (Document ID)</li><li>title (Title)</li><li>postedDate (Posted Date)</li><li>agency (Agency)</li><li>documentType (Document Type)</li><li>submitterName (Submitter Name)</li><li>organization (Organization)</li></ul> Sort Order is REQUIRED if this parameter is included.
     * @param {module:model/String} [so] Sort Order: <ul><li>ASC: Ascending</li><li>DESC: Descending</li></ul>
     * @param {String} [dktst] Docket Subtype: Only one docket subtype at a time may be selected. One or more agency values must be part of the request. Only values valid for the selected agency will be returned.
     * @param {String} [dktst2] Docket Sub-subtype: Only one docket sub-subtype at a time may be selected. One or more agency values must be part of the request. Only values valid for the selected agency will be returned.
     * @param {String} [docst] Document Subtype: Single or multiple document subtypes may be included.  Multiple values should be passed as follows: <code>docst=%20Certificate+of+Service%252BCorrespondence</code>
     * @param {module:api/DocumentsApi~documentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documents(responseFormat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'responseFormat' is set
      if (responseFormat === undefined || responseFormat === null) {
        throw new Error("Missing the required parameter 'responseFormat' when calling documents");
      }

      let pathParams = {
        'response_format': responseFormat
      };
      let queryParams = {
        'countsOnly': opts['countsOnly'],
        'encoded': opts['encoded'],
        's': opts['s'],
        'dct': opts['dct'],
        'dktid': opts['dktid'],
        'dkt': opts['dkt'],
        'cp': opts['cp'],
        'a': opts['a'],
        'rpp': opts['rpp'],
        'po': opts['po'],
        'cs': opts['cs'],
        'np': opts['np'],
        'cmsd': opts['cmsd'],
        'cmd': opts['cmd'],
        'crd': opts['crd'],
        'rd': opts['rd'],
        'pd': opts['pd'],
        'cat': opts['cat'],
        'sb': opts['sb'],
        'so': opts['so'],
        'dktst': opts['dktst'],
        'dktst2': opts['dktst2'],
        'docst': opts['docst']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents.{response_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
