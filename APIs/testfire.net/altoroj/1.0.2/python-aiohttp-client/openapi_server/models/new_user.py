# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firstname: str=None, lastname: str=None, password1: str=None, password2: str=None, username: str=None):
        """NewUser - a model defined in OpenAPI

        :param firstname: The firstname of this NewUser.
        :param lastname: The lastname of this NewUser.
        :param password1: The password1 of this NewUser.
        :param password2: The password2 of this NewUser.
        :param username: The username of this NewUser.
        """
        self.openapi_types = {
            'firstname': str,
            'lastname': str,
            'password1': str,
            'password2': str,
            'username': str
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'lastname': 'lastname',
            'password1': 'password1',
            'password2': 'password2',
            'username': 'username'
        }

        self._firstname = firstname
        self._lastname = lastname
        self._password1 = password1
        self._password2 = password2
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The newUser of this NewUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firstname(self):
        """Gets the firstname of this NewUser.


        :return: The firstname of this NewUser.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this NewUser.


        :param firstname: The firstname of this NewUser.
        :type firstname: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this NewUser.


        :return: The lastname of this NewUser.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this NewUser.


        :param lastname: The lastname of this NewUser.
        :type lastname: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")

        self._lastname = lastname

    @property
    def password1(self):
        """Gets the password1 of this NewUser.


        :return: The password1 of this NewUser.
        :rtype: str
        """
        return self._password1

    @password1.setter
    def password1(self, password1):
        """Sets the password1 of this NewUser.


        :param password1: The password1 of this NewUser.
        :type password1: str
        """
        if password1 is None:
            raise ValueError("Invalid value for `password1`, must not be `None`")

        self._password1 = password1

    @property
    def password2(self):
        """Gets the password2 of this NewUser.


        :return: The password2 of this NewUser.
        :rtype: str
        """
        return self._password2

    @password2.setter
    def password2(self, password2):
        """Sets the password2 of this NewUser.


        :param password2: The password2 of this NewUser.
        :type password2: str
        """
        if password2 is None:
            raise ValueError("Invalid value for `password2`, must not be `None`")

        self._password2 = password2

    @property
    def username(self):
        """Gets the username of this NewUser.


        :return: The username of this NewUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NewUser.


        :param username: The username of this NewUser.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
