# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_account: str=None, to_account: str=None, transfer_amount: str=None):
        """Transfer - a model defined in OpenAPI

        :param from_account: The from_account of this Transfer.
        :param to_account: The to_account of this Transfer.
        :param transfer_amount: The transfer_amount of this Transfer.
        """
        self.openapi_types = {
            'from_account': str,
            'to_account': str,
            'transfer_amount': str
        }

        self.attribute_map = {
            'from_account': 'fromAccount',
            'to_account': 'toAccount',
            'transfer_amount': 'transferAmount'
        }

        self._from_account = from_account
        self._to_account = to_account
        self._transfer_amount = transfer_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The transfer of this Transfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_account(self):
        """Gets the from_account of this Transfer.


        :return: The from_account of this Transfer.
        :rtype: str
        """
        return self._from_account

    @from_account.setter
    def from_account(self, from_account):
        """Sets the from_account of this Transfer.


        :param from_account: The from_account of this Transfer.
        :type from_account: str
        """
        if from_account is None:
            raise ValueError("Invalid value for `from_account`, must not be `None`")

        self._from_account = from_account

    @property
    def to_account(self):
        """Gets the to_account of this Transfer.


        :return: The to_account of this Transfer.
        :rtype: str
        """
        return self._to_account

    @to_account.setter
    def to_account(self, to_account):
        """Sets the to_account of this Transfer.


        :param to_account: The to_account of this Transfer.
        :type to_account: str
        """
        if to_account is None:
            raise ValueError("Invalid value for `to_account`, must not be `None`")

        self._to_account = to_account

    @property
    def transfer_amount(self):
        """Gets the transfer_amount of this Transfer.


        :return: The transfer_amount of this Transfer.
        :rtype: str
        """
        return self._transfer_amount

    @transfer_amount.setter
    def transfer_amount(self, transfer_amount):
        """Sets the transfer_amount of this Transfer.


        :param transfer_amount: The transfer_amount of this Transfer.
        :type transfer_amount: str
        """
        if transfer_amount is None:
            raise ValueError("Invalid value for `transfer_amount`, must not be `None`")

        self._transfer_amount = transfer_amount
