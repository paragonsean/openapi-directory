/**
 * AltoroJ REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewUser model module.
 * @module model/NewUser
 * @version 1.0.2
 */
class NewUser {
    /**
     * Constructs a new <code>NewUser</code>.
     * @alias module:model/NewUser
     * @param firstname {String} 
     * @param lastname {String} 
     * @param password1 {String} 
     * @param password2 {String} 
     * @param username {String} 
     */
    constructor(firstname, lastname, password1, password2, username) { 
        
        NewUser.initialize(this, firstname, lastname, password1, password2, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstname, lastname, password1, password2, username) { 
        obj['firstname'] = firstname;
        obj['lastname'] = lastname;
        obj['password1'] = password1;
        obj['password2'] = password2;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>NewUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewUser} obj Optional instance to populate.
     * @return {module:model/NewUser} The populated <code>NewUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewUser();

            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('password1')) {
                obj['password1'] = ApiClient.convertToType(data['password1'], 'String');
            }
            if (data.hasOwnProperty('password2')) {
                obj['password2'] = ApiClient.convertToType(data['password2'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['password1'] && !(typeof data['password1'] === 'string' || data['password1'] instanceof String)) {
            throw new Error("Expected the field `password1` to be a primitive type in the JSON string but got " + data['password1']);
        }
        // ensure the json data is a string
        if (data['password2'] && !(typeof data['password2'] === 'string' || data['password2'] instanceof String)) {
            throw new Error("Expected the field `password2` to be a primitive type in the JSON string but got " + data['password2']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

NewUser.RequiredProperties = ["firstname", "lastname", "password1", "password2", "username"];

/**
 * @member {String} firstname
 */
NewUser.prototype['firstname'] = undefined;

/**
 * @member {String} lastname
 */
NewUser.prototype['lastname'] = undefined;

/**
 * @member {String} password1
 */
NewUser.prototype['password1'] = undefined;

/**
 * @member {String} password2
 */
NewUser.prototype['password2'] = undefined;

/**
 * @member {String} username
 */
NewUser.prototype['username'] = undefined;






export default NewUser;

