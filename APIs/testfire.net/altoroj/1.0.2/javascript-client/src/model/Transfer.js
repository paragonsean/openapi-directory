/**
 * AltoroJ REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Transfer model module.
 * @module model/Transfer
 * @version 1.0.2
 */
class Transfer {
    /**
     * Constructs a new <code>Transfer</code>.
     * @alias module:model/Transfer
     * @param fromAccount {String} 
     * @param toAccount {String} 
     * @param transferAmount {String} 
     */
    constructor(fromAccount, toAccount, transferAmount) { 
        
        Transfer.initialize(this, fromAccount, toAccount, transferAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fromAccount, toAccount, transferAmount) { 
        obj['fromAccount'] = fromAccount;
        obj['toAccount'] = toAccount;
        obj['transferAmount'] = transferAmount;
    }

    /**
     * Constructs a <code>Transfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transfer} obj Optional instance to populate.
     * @return {module:model/Transfer} The populated <code>Transfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transfer();

            if (data.hasOwnProperty('fromAccount')) {
                obj['fromAccount'] = ApiClient.convertToType(data['fromAccount'], 'String');
            }
            if (data.hasOwnProperty('toAccount')) {
                obj['toAccount'] = ApiClient.convertToType(data['toAccount'], 'String');
            }
            if (data.hasOwnProperty('transferAmount')) {
                obj['transferAmount'] = ApiClient.convertToType(data['transferAmount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fromAccount'] && !(typeof data['fromAccount'] === 'string' || data['fromAccount'] instanceof String)) {
            throw new Error("Expected the field `fromAccount` to be a primitive type in the JSON string but got " + data['fromAccount']);
        }
        // ensure the json data is a string
        if (data['toAccount'] && !(typeof data['toAccount'] === 'string' || data['toAccount'] instanceof String)) {
            throw new Error("Expected the field `toAccount` to be a primitive type in the JSON string but got " + data['toAccount']);
        }
        // ensure the json data is a string
        if (data['transferAmount'] && !(typeof data['transferAmount'] === 'string' || data['transferAmount'] instanceof String)) {
            throw new Error("Expected the field `transferAmount` to be a primitive type in the JSON string but got " + data['transferAmount']);
        }

        return true;
    }


}

Transfer.RequiredProperties = ["fromAccount", "toAccount", "transferAmount"];

/**
 * @member {String} fromAccount
 */
Transfer.prototype['fromAccount'] = undefined;

/**
 * @member {String} toAccount
 */
Transfer.prototype['toAccount'] = undefined;

/**
 * @member {String} transferAmount
 */
Transfer.prototype['transferAmount'] = undefined;






export default Transfer;

