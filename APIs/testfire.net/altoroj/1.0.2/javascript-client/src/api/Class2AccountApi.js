/**
 * AltoroJ REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dates from '../model/Dates';

/**
* Class2Account service.
* @module api/Class2AccountApi
* @version 1.0.2
*/
export default class Class2AccountApi {

    /**
    * Constructs a new Class2AccountApi. 
    * @alias module:api/Class2AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/Class2AccountApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all the accounts owned by the user
     * @param {String} authorization Authorization token (provided upon successful login)
     * @param {module:api/Class2AccountApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAccount(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountBalance operation.
     * @callback module:api/Class2AccountApi~getAccountBalanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about a specific account
     * @param {String} authorization Authorization token (provided upon successful login)
     * @param {String} accountNo Account id
     * @param {module:api/Class2AccountApi~getAccountBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAccountBalance(authorization, accountNo, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAccountBalance");
      }
      // verify the required parameter 'accountNo' is set
      if (accountNo === undefined || accountNo === null) {
        throw new Error("Missing the required parameter 'accountNo' when calling getAccountBalance");
      }

      let pathParams = {
        'accountNo': accountNo
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/{accountNo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:api/Class2AccountApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return transactions between 2 specific dates
     * @param {String} authorization Authorization token (provided upon successful login)
     * @param {String} accountNo Account id
     * @param {module:model/Dates} body A start date and an end date
     * @param {module:api/Class2AccountApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTransactions(authorization, accountNo, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTransactions");
      }
      // verify the required parameter 'accountNo' is set
      if (accountNo === undefined || accountNo === null) {
        throw new Error("Missing the required parameter 'accountNo' when calling getTransactions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTransactions");
      }

      let pathParams = {
        'accountNo': accountNo
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/{accountNo}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showLastTenTransactions operation.
     * @callback module:api/Class2AccountApi~showLastTenTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the last 10 transactions attached to an account
     * @param {String} authorization Authorization token (provided upon successful login)
     * @param {String} accountNo Account id
     * @param {module:api/Class2AccountApi~showLastTenTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showLastTenTransactions(authorization, accountNo, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling showLastTenTransactions");
      }
      // verify the required parameter 'accountNo' is set
      if (accountNo === undefined || accountNo === null) {
        throw new Error("Missing the required parameter 'accountNo' when calling showLastTenTransactions");
      }

      let pathParams = {
        'accountNo': accountNo
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/{accountNo}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
