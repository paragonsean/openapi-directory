/**
 * Random Lovecraft
 * Random sentences from the complete works of H.P. Lovecraft. CORS-enabled.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Book from './Book';

/**
 * The Sentence model module.
 * @module model/Sentence
 * @version 1.0
 */
class Sentence {
    /**
     * Constructs a new <code>Sentence</code>.
     * @alias module:model/Sentence
     */
    constructor() { 
        
        Sentence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Sentence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sentence} obj Optional instance to populate.
     * @return {module:model/Sentence} The populated <code>Sentence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sentence();

            if (data.hasOwnProperty('book')) {
                obj['book'] = Book.constructFromObject(data['book']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('sentence')) {
                obj['sentence'] = ApiClient.convertToType(data['sentence'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sentence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sentence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `book`
        if (data['book']) { // data not null
          Book.validateJSON(data['book']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['sentence'] && !(typeof data['sentence'] === 'string' || data['sentence'] instanceof String)) {
            throw new Error("Expected the field `sentence` to be a primitive type in the JSON string but got " + data['sentence']);
        }

        return true;
    }


}



/**
 * @member {module:model/Book} book
 */
Sentence.prototype['book'] = undefined;

/**
 * @member {String} id
 */
Sentence.prototype['id'] = undefined;

/**
 * @member {String} sentence
 */
Sentence.prototype['sentence'] = undefined;






export default Sentence;

