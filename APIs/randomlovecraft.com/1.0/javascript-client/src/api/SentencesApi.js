/**
 * Random Lovecraft
 * Random sentences from the complete works of H.P. Lovecraft. CORS-enabled.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetSentencesFromBook200Response from '../model/GetSentencesFromBook200Response';
import GetSpecificSentence200Response from '../model/GetSpecificSentence200Response';

/**
* Sentences service.
* @module api/SentencesApi
* @version 1.0
*/
export default class SentencesApi {

    /**
    * Constructs a new SentencesApi. 
    * @alias module:api/SentencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSentences operation.
     * @callback module:api/SentencesApi~getSentencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSentencesFromBook200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A random sentence
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 1)] 
     * @param {module:api/SentencesApi~getSentencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSentencesFromBook200Response}
     */
    getSentences(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSentencesFromBook200Response;
      return this.apiClient.callApi(
        '/sentences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSentencesFromBook operation.
     * @callback module:api/SentencesApi~getSentencesFromBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSentencesFromBook200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Random sentences from a specific book
     * 
     * @param {String} id Book ID
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 1)] 
     * @param {module:api/SentencesApi~getSentencesFromBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSentencesFromBook200Response}
     */
    getSentencesFromBook(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSentencesFromBook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSentencesFromBook200Response;
      return this.apiClient.callApi(
        '/books/{id}/sentences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecificSentence operation.
     * @callback module:api/SentencesApi~getSpecificSentenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSpecificSentence200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A specific sentence
     * 
     * @param {String} id Sentence ID
     * @param {module:api/SentencesApi~getSpecificSentenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSpecificSentence200Response}
     */
    getSpecificSentence(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpecificSentence");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSpecificSentence200Response;
      return this.apiClient.callApi(
        '/sentences/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
