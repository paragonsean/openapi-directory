/**
 * Random Lovecraft
 * Random sentences from the complete works of H.P. Lovecraft. CORS-enabled.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentence::OAISentence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentence::OAISentence() {
    this->initializeModel();
}

OAISentence::~OAISentence() {}

void OAISentence::initializeModel() {

    m_book_isSet = false;
    m_book_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_sentence_isSet = false;
    m_sentence_isValid = false;
}

void OAISentence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentence::fromJsonObject(QJsonObject json) {

    m_book_isValid = ::OpenAPI::fromJsonValue(m_book, json[QString("book")]);
    m_book_isSet = !json[QString("book")].isNull() && m_book_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sentence_isValid = ::OpenAPI::fromJsonValue(m_sentence, json[QString("sentence")]);
    m_sentence_isSet = !json[QString("sentence")].isNull() && m_sentence_isValid;
}

QString OAISentence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentence::asJsonObject() const {
    QJsonObject obj;
    if (m_book.isSet()) {
        obj.insert(QString("book"), ::OpenAPI::toJsonValue(m_book));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sentence_isSet) {
        obj.insert(QString("sentence"), ::OpenAPI::toJsonValue(m_sentence));
    }
    return obj;
}

OAIBook OAISentence::getBook() const {
    return m_book;
}
void OAISentence::setBook(const OAIBook &book) {
    m_book = book;
    m_book_isSet = true;
}

bool OAISentence::is_book_Set() const{
    return m_book_isSet;
}

bool OAISentence::is_book_Valid() const{
    return m_book_isValid;
}

QString OAISentence::getId() const {
    return m_id;
}
void OAISentence::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISentence::is_id_Set() const{
    return m_id_isSet;
}

bool OAISentence::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISentence::getSentence() const {
    return m_sentence;
}
void OAISentence::setSentence(const QString &sentence) {
    m_sentence = sentence;
    m_sentence_isSet = true;
}

bool OAISentence::is_sentence_Set() const{
    return m_sentence_isSet;
}

bool OAISentence::is_sentence_Valid() const{
    return m_sentence_isValid;
}

bool OAISentence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_book.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
