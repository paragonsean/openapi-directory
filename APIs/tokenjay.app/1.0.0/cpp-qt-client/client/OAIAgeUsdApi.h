/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAgeUsdApi_H
#define OAI_OAIAgeUsdApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAgeUsdExchangeInfo.h"
#include "OAIAgeUsdInfo.h"
#include "OAIErgoPayResponse.h"
#include "OAITokenPrice.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAgeUsdApi : public QObject {
    Q_OBJECT

public:
    OAIAgeUsdApi(const int timeOut = 0);
    ~OAIAgeUsdApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  amount qint64 [required]
    */
    virtual void calcSigmaRsvExchange(const qint64 &amount);

    /**
    * @param[in]  amount qint64 [required]
    */
    virtual void calcSigmaUsdExchange(const qint64 &amount);

    /**
    * @param[in]  amount qint64 [required]
    * @param[in]  address QString [required]
    * @param[in]  check_rate qint64 [optional]
    * @param[in]  execution_fee qint64 [optional]
    */
    virtual void doSigmaRsvExchange(const qint64 &amount, const QString &address, const ::OpenAPI::OptionalParam<qint64> &check_rate = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &execution_fee = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  amount qint64 [required]
    * @param[in]  address QString [required]
    * @param[in]  check_rate qint64 [optional]
    * @param[in]  execution_fee qint64 [optional]
    */
    virtual void doSigmaUsdExchange(const qint64 &amount, const QString &address, const ::OpenAPI::OptionalParam<qint64> &check_rate = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &execution_fee = ::OpenAPI::OptionalParam<qint64>());


    virtual void getAgeUsdInfo();


    virtual void getSigmaRsvPrice();


    virtual void getSigmaUsdPrice();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void calcSigmaRsvExchangeCallback(OAIHttpRequestWorker *worker);
    void calcSigmaUsdExchangeCallback(OAIHttpRequestWorker *worker);
    void doSigmaRsvExchangeCallback(OAIHttpRequestWorker *worker);
    void doSigmaUsdExchangeCallback(OAIHttpRequestWorker *worker);
    void getAgeUsdInfoCallback(OAIHttpRequestWorker *worker);
    void getSigmaRsvPriceCallback(OAIHttpRequestWorker *worker);
    void getSigmaUsdPriceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void calcSigmaRsvExchangeSignal(OAIAgeUsdExchangeInfo summary);
    void calcSigmaUsdExchangeSignal(OAIAgeUsdExchangeInfo summary);
    void doSigmaRsvExchangeSignal(OAIErgoPayResponse summary);
    void doSigmaUsdExchangeSignal(OAIErgoPayResponse summary);
    void getAgeUsdInfoSignal(OAIAgeUsdInfo summary);
    void getSigmaRsvPriceSignal(OAITokenPrice summary);
    void getSigmaUsdPriceSignal(OAITokenPrice summary);


    void calcSigmaRsvExchangeSignalFull(OAIHttpRequestWorker *worker, OAIAgeUsdExchangeInfo summary);
    void calcSigmaUsdExchangeSignalFull(OAIHttpRequestWorker *worker, OAIAgeUsdExchangeInfo summary);
    void doSigmaRsvExchangeSignalFull(OAIHttpRequestWorker *worker, OAIErgoPayResponse summary);
    void doSigmaUsdExchangeSignalFull(OAIHttpRequestWorker *worker, OAIErgoPayResponse summary);
    void getAgeUsdInfoSignalFull(OAIHttpRequestWorker *worker, OAIAgeUsdInfo summary);
    void getSigmaRsvPriceSignalFull(OAIHttpRequestWorker *worker, OAITokenPrice summary);
    void getSigmaUsdPriceSignalFull(OAIHttpRequestWorker *worker, OAITokenPrice summary);

    Q_DECL_DEPRECATED_X("Use calcSigmaRsvExchangeSignalError() instead")
    void calcSigmaRsvExchangeSignalE(OAIAgeUsdExchangeInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calcSigmaRsvExchangeSignalError(OAIAgeUsdExchangeInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calcSigmaUsdExchangeSignalError() instead")
    void calcSigmaUsdExchangeSignalE(OAIAgeUsdExchangeInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calcSigmaUsdExchangeSignalError(OAIAgeUsdExchangeInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doSigmaRsvExchangeSignalError() instead")
    void doSigmaRsvExchangeSignalE(OAIErgoPayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void doSigmaRsvExchangeSignalError(OAIErgoPayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doSigmaUsdExchangeSignalError() instead")
    void doSigmaUsdExchangeSignalE(OAIErgoPayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void doSigmaUsdExchangeSignalError(OAIErgoPayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAgeUsdInfoSignalError() instead")
    void getAgeUsdInfoSignalE(OAIAgeUsdInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAgeUsdInfoSignalError(OAIAgeUsdInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigmaRsvPriceSignalError() instead")
    void getSigmaRsvPriceSignalE(OAITokenPrice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigmaRsvPriceSignalError(OAITokenPrice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigmaUsdPriceSignalError() instead")
    void getSigmaUsdPriceSignalE(OAITokenPrice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigmaUsdPriceSignalError(OAITokenPrice summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use calcSigmaRsvExchangeSignalErrorFull() instead")
    void calcSigmaRsvExchangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calcSigmaRsvExchangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calcSigmaUsdExchangeSignalErrorFull() instead")
    void calcSigmaUsdExchangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calcSigmaUsdExchangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doSigmaRsvExchangeSignalErrorFull() instead")
    void doSigmaRsvExchangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void doSigmaRsvExchangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doSigmaUsdExchangeSignalErrorFull() instead")
    void doSigmaUsdExchangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void doSigmaUsdExchangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAgeUsdInfoSignalErrorFull() instead")
    void getAgeUsdInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAgeUsdInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigmaRsvPriceSignalErrorFull() instead")
    void getSigmaRsvPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigmaRsvPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigmaUsdPriceSignalErrorFull() instead")
    void getSigmaUsdPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigmaUsdPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
