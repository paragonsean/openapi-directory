/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMosaikManifest.h
 *
 * 
 */

#ifndef OAIMosaikManifest_H
#define OAIMosaikManifest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMosaikManifest : public OAIObject {
public:
    OAIMosaikManifest();
    OAIMosaikManifest(QString json);
    ~OAIMosaikManifest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppDescription() const;
    void setAppDescription(const QString &app_description);
    bool is_app_description_Set() const;
    bool is_app_description_Valid() const;

    QString getAppName() const;
    void setAppName(const QString &app_name);
    bool is_app_name_Set() const;
    bool is_app_name_Valid() const;

    qint32 getAppVersion() const;
    void setAppVersion(const qint32 &app_version);
    bool is_app_version_Set() const;
    bool is_app_version_Valid() const;

    qint32 getCacheLifetime() const;
    void setCacheLifetime(const qint32 &cache_lifetime);
    bool is_cache_lifetime_Set() const;
    bool is_cache_lifetime_Valid() const;

    QString getErrorReportUrl() const;
    void setErrorReportUrl(const QString &error_report_url);
    bool is_error_report_url_Set() const;
    bool is_error_report_url_Valid() const;

    QString getIconUrl() const;
    void setIconUrl(const QString &icon_url);
    bool is_icon_url_Set() const;
    bool is_icon_url_Valid() const;

    QString getNotificationCheckUrl() const;
    void setNotificationCheckUrl(const QString &notification_check_url);
    bool is_notification_check_url_Set() const;
    bool is_notification_check_url_Valid() const;

    QString getOnAppLoadedAction() const;
    void setOnAppLoadedAction(const QString &on_app_loaded_action);
    bool is_on_app_loaded_action_Set() const;
    bool is_on_app_loaded_action_Valid() const;

    QString getOnResizeAction() const;
    void setOnResizeAction(const QString &on_resize_action);
    bool is_on_resize_action_Set() const;
    bool is_on_resize_action_Valid() const;

    QString getTargetCanvasDimension() const;
    void setTargetCanvasDimension(const QString &target_canvas_dimension);
    bool is_target_canvas_dimension_Set() const;
    bool is_target_canvas_dimension_Valid() const;

    qint32 getTargetMosaikVersion() const;
    void setTargetMosaikVersion(const qint32 &target_mosaik_version);
    bool is_target_mosaik_version_Set() const;
    bool is_target_mosaik_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_description;
    bool m_app_description_isSet;
    bool m_app_description_isValid;

    QString m_app_name;
    bool m_app_name_isSet;
    bool m_app_name_isValid;

    qint32 m_app_version;
    bool m_app_version_isSet;
    bool m_app_version_isValid;

    qint32 m_cache_lifetime;
    bool m_cache_lifetime_isSet;
    bool m_cache_lifetime_isValid;

    QString m_error_report_url;
    bool m_error_report_url_isSet;
    bool m_error_report_url_isValid;

    QString m_icon_url;
    bool m_icon_url_isSet;
    bool m_icon_url_isValid;

    QString m_notification_check_url;
    bool m_notification_check_url_isSet;
    bool m_notification_check_url_isValid;

    QString m_on_app_loaded_action;
    bool m_on_app_loaded_action_isSet;
    bool m_on_app_loaded_action_isValid;

    QString m_on_resize_action;
    bool m_on_resize_action_isSet;
    bool m_on_resize_action_isValid;

    QString m_target_canvas_dimension;
    bool m_target_canvas_dimension_isSet;
    bool m_target_canvas_dimension_isValid;

    qint32 m_target_mosaik_version;
    bool m_target_mosaik_version_isSet;
    bool m_target_mosaik_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMosaikManifest)

#endif // OAIMosaikManifest_H
