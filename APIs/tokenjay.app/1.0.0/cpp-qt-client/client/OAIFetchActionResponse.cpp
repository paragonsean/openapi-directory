/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFetchActionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFetchActionResponse::OAIFetchActionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFetchActionResponse::OAIFetchActionResponse() {
    this->initializeModel();
}

OAIFetchActionResponse::~OAIFetchActionResponse() {}

void OAIFetchActionResponse::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;
}

void OAIFetchActionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFetchActionResponse::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;
}

QString OAIFetchActionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFetchActionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    return obj;
}

OAIAction OAIFetchActionResponse::getAction() const {
    return m_action;
}
void OAIFetchActionResponse::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIFetchActionResponse::is_action_Set() const{
    return m_action_isSet;
}

bool OAIFetchActionResponse::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAIFetchActionResponse::getAppVersion() const {
    return m_app_version;
}
void OAIFetchActionResponse::setAppVersion(const qint32 &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIFetchActionResponse::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIFetchActionResponse::is_app_version_Valid() const{
    return m_app_version_isValid;
}

bool OAIFetchActionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFetchActionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
