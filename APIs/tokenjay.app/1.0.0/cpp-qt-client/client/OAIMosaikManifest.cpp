/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMosaikManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMosaikManifest::OAIMosaikManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMosaikManifest::OAIMosaikManifest() {
    this->initializeModel();
}

OAIMosaikManifest::~OAIMosaikManifest() {}

void OAIMosaikManifest::initializeModel() {

    m_app_description_isSet = false;
    m_app_description_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_cache_lifetime_isSet = false;
    m_cache_lifetime_isValid = false;

    m_error_report_url_isSet = false;
    m_error_report_url_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_notification_check_url_isSet = false;
    m_notification_check_url_isValid = false;

    m_on_app_loaded_action_isSet = false;
    m_on_app_loaded_action_isValid = false;

    m_on_resize_action_isSet = false;
    m_on_resize_action_isValid = false;

    m_target_canvas_dimension_isSet = false;
    m_target_canvas_dimension_isValid = false;

    m_target_mosaik_version_isSet = false;
    m_target_mosaik_version_isValid = false;
}

void OAIMosaikManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMosaikManifest::fromJsonObject(QJsonObject json) {

    m_app_description_isValid = ::OpenAPI::fromJsonValue(m_app_description, json[QString("appDescription")]);
    m_app_description_isSet = !json[QString("appDescription")].isNull() && m_app_description_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_cache_lifetime_isValid = ::OpenAPI::fromJsonValue(m_cache_lifetime, json[QString("cacheLifetime")]);
    m_cache_lifetime_isSet = !json[QString("cacheLifetime")].isNull() && m_cache_lifetime_isValid;

    m_error_report_url_isValid = ::OpenAPI::fromJsonValue(m_error_report_url, json[QString("errorReportUrl")]);
    m_error_report_url_isSet = !json[QString("errorReportUrl")].isNull() && m_error_report_url_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_notification_check_url_isValid = ::OpenAPI::fromJsonValue(m_notification_check_url, json[QString("notificationCheckUrl")]);
    m_notification_check_url_isSet = !json[QString("notificationCheckUrl")].isNull() && m_notification_check_url_isValid;

    m_on_app_loaded_action_isValid = ::OpenAPI::fromJsonValue(m_on_app_loaded_action, json[QString("onAppLoadedAction")]);
    m_on_app_loaded_action_isSet = !json[QString("onAppLoadedAction")].isNull() && m_on_app_loaded_action_isValid;

    m_on_resize_action_isValid = ::OpenAPI::fromJsonValue(m_on_resize_action, json[QString("onResizeAction")]);
    m_on_resize_action_isSet = !json[QString("onResizeAction")].isNull() && m_on_resize_action_isValid;

    m_target_canvas_dimension_isValid = ::OpenAPI::fromJsonValue(m_target_canvas_dimension, json[QString("targetCanvasDimension")]);
    m_target_canvas_dimension_isSet = !json[QString("targetCanvasDimension")].isNull() && m_target_canvas_dimension_isValid;

    m_target_mosaik_version_isValid = ::OpenAPI::fromJsonValue(m_target_mosaik_version, json[QString("targetMosaikVersion")]);
    m_target_mosaik_version_isSet = !json[QString("targetMosaikVersion")].isNull() && m_target_mosaik_version_isValid;
}

QString OAIMosaikManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMosaikManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_description_isSet) {
        obj.insert(QString("appDescription"), ::OpenAPI::toJsonValue(m_app_description));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_cache_lifetime_isSet) {
        obj.insert(QString("cacheLifetime"), ::OpenAPI::toJsonValue(m_cache_lifetime));
    }
    if (m_error_report_url_isSet) {
        obj.insert(QString("errorReportUrl"), ::OpenAPI::toJsonValue(m_error_report_url));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_notification_check_url_isSet) {
        obj.insert(QString("notificationCheckUrl"), ::OpenAPI::toJsonValue(m_notification_check_url));
    }
    if (m_on_app_loaded_action_isSet) {
        obj.insert(QString("onAppLoadedAction"), ::OpenAPI::toJsonValue(m_on_app_loaded_action));
    }
    if (m_on_resize_action_isSet) {
        obj.insert(QString("onResizeAction"), ::OpenAPI::toJsonValue(m_on_resize_action));
    }
    if (m_target_canvas_dimension_isSet) {
        obj.insert(QString("targetCanvasDimension"), ::OpenAPI::toJsonValue(m_target_canvas_dimension));
    }
    if (m_target_mosaik_version_isSet) {
        obj.insert(QString("targetMosaikVersion"), ::OpenAPI::toJsonValue(m_target_mosaik_version));
    }
    return obj;
}

QString OAIMosaikManifest::getAppDescription() const {
    return m_app_description;
}
void OAIMosaikManifest::setAppDescription(const QString &app_description) {
    m_app_description = app_description;
    m_app_description_isSet = true;
}

bool OAIMosaikManifest::is_app_description_Set() const{
    return m_app_description_isSet;
}

bool OAIMosaikManifest::is_app_description_Valid() const{
    return m_app_description_isValid;
}

QString OAIMosaikManifest::getAppName() const {
    return m_app_name;
}
void OAIMosaikManifest::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIMosaikManifest::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIMosaikManifest::is_app_name_Valid() const{
    return m_app_name_isValid;
}

qint32 OAIMosaikManifest::getAppVersion() const {
    return m_app_version;
}
void OAIMosaikManifest::setAppVersion(const qint32 &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIMosaikManifest::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIMosaikManifest::is_app_version_Valid() const{
    return m_app_version_isValid;
}

qint32 OAIMosaikManifest::getCacheLifetime() const {
    return m_cache_lifetime;
}
void OAIMosaikManifest::setCacheLifetime(const qint32 &cache_lifetime) {
    m_cache_lifetime = cache_lifetime;
    m_cache_lifetime_isSet = true;
}

bool OAIMosaikManifest::is_cache_lifetime_Set() const{
    return m_cache_lifetime_isSet;
}

bool OAIMosaikManifest::is_cache_lifetime_Valid() const{
    return m_cache_lifetime_isValid;
}

QString OAIMosaikManifest::getErrorReportUrl() const {
    return m_error_report_url;
}
void OAIMosaikManifest::setErrorReportUrl(const QString &error_report_url) {
    m_error_report_url = error_report_url;
    m_error_report_url_isSet = true;
}

bool OAIMosaikManifest::is_error_report_url_Set() const{
    return m_error_report_url_isSet;
}

bool OAIMosaikManifest::is_error_report_url_Valid() const{
    return m_error_report_url_isValid;
}

QString OAIMosaikManifest::getIconUrl() const {
    return m_icon_url;
}
void OAIMosaikManifest::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIMosaikManifest::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIMosaikManifest::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIMosaikManifest::getNotificationCheckUrl() const {
    return m_notification_check_url;
}
void OAIMosaikManifest::setNotificationCheckUrl(const QString &notification_check_url) {
    m_notification_check_url = notification_check_url;
    m_notification_check_url_isSet = true;
}

bool OAIMosaikManifest::is_notification_check_url_Set() const{
    return m_notification_check_url_isSet;
}

bool OAIMosaikManifest::is_notification_check_url_Valid() const{
    return m_notification_check_url_isValid;
}

QString OAIMosaikManifest::getOnAppLoadedAction() const {
    return m_on_app_loaded_action;
}
void OAIMosaikManifest::setOnAppLoadedAction(const QString &on_app_loaded_action) {
    m_on_app_loaded_action = on_app_loaded_action;
    m_on_app_loaded_action_isSet = true;
}

bool OAIMosaikManifest::is_on_app_loaded_action_Set() const{
    return m_on_app_loaded_action_isSet;
}

bool OAIMosaikManifest::is_on_app_loaded_action_Valid() const{
    return m_on_app_loaded_action_isValid;
}

QString OAIMosaikManifest::getOnResizeAction() const {
    return m_on_resize_action;
}
void OAIMosaikManifest::setOnResizeAction(const QString &on_resize_action) {
    m_on_resize_action = on_resize_action;
    m_on_resize_action_isSet = true;
}

bool OAIMosaikManifest::is_on_resize_action_Set() const{
    return m_on_resize_action_isSet;
}

bool OAIMosaikManifest::is_on_resize_action_Valid() const{
    return m_on_resize_action_isValid;
}

QString OAIMosaikManifest::getTargetCanvasDimension() const {
    return m_target_canvas_dimension;
}
void OAIMosaikManifest::setTargetCanvasDimension(const QString &target_canvas_dimension) {
    m_target_canvas_dimension = target_canvas_dimension;
    m_target_canvas_dimension_isSet = true;
}

bool OAIMosaikManifest::is_target_canvas_dimension_Set() const{
    return m_target_canvas_dimension_isSet;
}

bool OAIMosaikManifest::is_target_canvas_dimension_Valid() const{
    return m_target_canvas_dimension_isValid;
}

qint32 OAIMosaikManifest::getTargetMosaikVersion() const {
    return m_target_mosaik_version;
}
void OAIMosaikManifest::setTargetMosaikVersion(const qint32 &target_mosaik_version) {
    m_target_mosaik_version = target_mosaik_version;
    m_target_mosaik_version_isSet = true;
}

bool OAIMosaikManifest::is_target_mosaik_version_Set() const{
    return m_target_mosaik_version_isSet;
}

bool OAIMosaikManifest::is_target_mosaik_version_Valid() const{
    return m_target_mosaik_version_isValid;
}

bool OAIMosaikManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_report_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_check_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_app_loaded_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_resize_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_canvas_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_mosaik_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMosaikManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
