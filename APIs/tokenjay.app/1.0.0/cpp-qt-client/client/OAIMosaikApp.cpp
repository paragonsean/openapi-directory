/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMosaikApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMosaikApp::OAIMosaikApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMosaikApp::OAIMosaikApp() {
    this->initializeModel();
}

OAIMosaikApp::~OAIMosaikApp() {}

void OAIMosaikApp::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_manifest_isSet = false;
    m_manifest_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAIMosaikApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMosaikApp::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_manifest_isValid = ::OpenAPI::fromJsonValue(m_manifest, json[QString("manifest")]);
    m_manifest_isSet = !json[QString("manifest")].isNull() && m_manifest_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAIMosaikApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMosaikApp::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_manifest.isSet()) {
        obj.insert(QString("manifest"), ::OpenAPI::toJsonValue(m_manifest));
    }
    if (m_view.isSet()) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

QList<OAIAction> OAIMosaikApp::getActions() const {
    return m_actions;
}
void OAIMosaikApp::setActions(const QList<OAIAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIMosaikApp::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIMosaikApp::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIMosaikManifest OAIMosaikApp::getManifest() const {
    return m_manifest;
}
void OAIMosaikApp::setManifest(const OAIMosaikManifest &manifest) {
    m_manifest = manifest;
    m_manifest_isSet = true;
}

bool OAIMosaikApp::is_manifest_Set() const{
    return m_manifest_isSet;
}

bool OAIMosaikApp::is_manifest_Valid() const{
    return m_manifest_isValid;
}

OAIViewElement OAIMosaikApp::getView() const {
    return m_view;
}
void OAIMosaikApp::setView(const OAIViewElement &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIMosaikApp::is_view_Set() const{
    return m_view_isSet;
}

bool OAIMosaikApp::is_view_Valid() const{
    return m_view_isValid;
}

bool OAIMosaikApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMosaikApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
