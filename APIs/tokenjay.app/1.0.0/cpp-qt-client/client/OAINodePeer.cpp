/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodePeer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodePeer::OAINodePeer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodePeer::OAINodePeer() {
    this->initializeModel();
}

OAINodePeer::~OAINodePeer() {}

void OAINodePeer::initializeModel() {

    m_block_height_isSet = false;
    m_block_height_isValid = false;

    m_blockchain_api_isSet = false;
    m_blockchain_api_isValid = false;

    m_header_height_isSet = false;
    m_header_height_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_open_rest_api_isSet = false;
    m_open_rest_api_isValid = false;

    m_response_time_isSet = false;
    m_response_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINodePeer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodePeer::fromJsonObject(QJsonObject json) {

    m_block_height_isValid = ::OpenAPI::fromJsonValue(m_block_height, json[QString("blockHeight")]);
    m_block_height_isSet = !json[QString("blockHeight")].isNull() && m_block_height_isValid;

    m_blockchain_api_isValid = ::OpenAPI::fromJsonValue(m_blockchain_api, json[QString("blockchainApi")]);
    m_blockchain_api_isSet = !json[QString("blockchainApi")].isNull() && m_blockchain_api_isValid;

    m_header_height_isValid = ::OpenAPI::fromJsonValue(m_header_height, json[QString("headerHeight")]);
    m_header_height_isSet = !json[QString("headerHeight")].isNull() && m_header_height_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("lastSeen")]);
    m_last_seen_isSet = !json[QString("lastSeen")].isNull() && m_last_seen_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_open_rest_api_isValid = ::OpenAPI::fromJsonValue(m_open_rest_api, json[QString("openRestApi")]);
    m_open_rest_api_isSet = !json[QString("openRestApi")].isNull() && m_open_rest_api_isValid;

    m_response_time_isValid = ::OpenAPI::fromJsonValue(m_response_time, json[QString("responseTime")]);
    m_response_time_isSet = !json[QString("responseTime")].isNull() && m_response_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINodePeer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodePeer::asJsonObject() const {
    QJsonObject obj;
    if (m_block_height_isSet) {
        obj.insert(QString("blockHeight"), ::OpenAPI::toJsonValue(m_block_height));
    }
    if (m_blockchain_api_isSet) {
        obj.insert(QString("blockchainApi"), ::OpenAPI::toJsonValue(m_blockchain_api));
    }
    if (m_header_height_isSet) {
        obj.insert(QString("headerHeight"), ::OpenAPI::toJsonValue(m_header_height));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("lastSeen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_open_rest_api_isSet) {
        obj.insert(QString("openRestApi"), ::OpenAPI::toJsonValue(m_open_rest_api));
    }
    if (m_response_time_isSet) {
        obj.insert(QString("responseTime"), ::OpenAPI::toJsonValue(m_response_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint64 OAINodePeer::getBlockHeight() const {
    return m_block_height;
}
void OAINodePeer::setBlockHeight(const qint64 &block_height) {
    m_block_height = block_height;
    m_block_height_isSet = true;
}

bool OAINodePeer::is_block_height_Set() const{
    return m_block_height_isSet;
}

bool OAINodePeer::is_block_height_Valid() const{
    return m_block_height_isValid;
}

bool OAINodePeer::isBlockchainApi() const {
    return m_blockchain_api;
}
void OAINodePeer::setBlockchainApi(const bool &blockchain_api) {
    m_blockchain_api = blockchain_api;
    m_blockchain_api_isSet = true;
}

bool OAINodePeer::is_blockchain_api_Set() const{
    return m_blockchain_api_isSet;
}

bool OAINodePeer::is_blockchain_api_Valid() const{
    return m_blockchain_api_isValid;
}

qint64 OAINodePeer::getHeaderHeight() const {
    return m_header_height;
}
void OAINodePeer::setHeaderHeight(const qint64 &header_height) {
    m_header_height = header_height;
    m_header_height_isSet = true;
}

bool OAINodePeer::is_header_height_Set() const{
    return m_header_height_isSet;
}

bool OAINodePeer::is_header_height_Valid() const{
    return m_header_height_isValid;
}

qint64 OAINodePeer::getLastSeen() const {
    return m_last_seen;
}
void OAINodePeer::setLastSeen(const qint64 &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAINodePeer::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAINodePeer::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

QString OAINodePeer::getName() const {
    return m_name;
}
void OAINodePeer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINodePeer::is_name_Set() const{
    return m_name_isSet;
}

bool OAINodePeer::is_name_Valid() const{
    return m_name_isValid;
}

bool OAINodePeer::isOpenRestApi() const {
    return m_open_rest_api;
}
void OAINodePeer::setOpenRestApi(const bool &open_rest_api) {
    m_open_rest_api = open_rest_api;
    m_open_rest_api_isSet = true;
}

bool OAINodePeer::is_open_rest_api_Set() const{
    return m_open_rest_api_isSet;
}

bool OAINodePeer::is_open_rest_api_Valid() const{
    return m_open_rest_api_isValid;
}

qint64 OAINodePeer::getResponseTime() const {
    return m_response_time;
}
void OAINodePeer::setResponseTime(const qint64 &response_time) {
    m_response_time = response_time;
    m_response_time_isSet = true;
}

bool OAINodePeer::is_response_time_Set() const{
    return m_response_time_isSet;
}

bool OAINodePeer::is_response_time_Valid() const{
    return m_response_time_isValid;
}

QString OAINodePeer::getUrl() const {
    return m_url;
}
void OAINodePeer::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINodePeer::is_url_Set() const{
    return m_url_isSet;
}

bool OAINodePeer::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINodePeer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blockchain_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_rest_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodePeer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_block_height_isValid && m_blockchain_api_isValid && m_header_height_isValid && m_last_seen_isValid && m_name_isValid && m_open_rest_api_isValid && m_response_time_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
