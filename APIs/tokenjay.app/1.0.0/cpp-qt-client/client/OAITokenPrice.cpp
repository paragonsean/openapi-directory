/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenPrice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenPrice::OAITokenPrice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenPrice::OAITokenPrice() {
    this->initializeModel();
}

OAITokenPrice::~OAITokenPrice() {}

void OAITokenPrice::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_volume_last_day_isSet = false;
    m_volume_last_day_isValid = false;
}

void OAITokenPrice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenPrice::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;

    m_volume_last_day_isValid = ::OpenAPI::fromJsonValue(m_volume_last_day, json[QString("volumeLastDay")]);
    m_volume_last_day_isSet = !json[QString("volumeLastDay")].isNull() && m_volume_last_day_isValid;
}

QString OAITokenPrice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenPrice::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_volume_last_day_isSet) {
        obj.insert(QString("volumeLastDay"), ::OpenAPI::toJsonValue(m_volume_last_day));
    }
    return obj;
}

qint64 OAITokenPrice::getAvailable() const {
    return m_available;
}
void OAITokenPrice::setAvailable(const qint64 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAITokenPrice::is_available_Set() const{
    return m_available_isSet;
}

bool OAITokenPrice::is_available_Valid() const{
    return m_available_isValid;
}

QString OAITokenPrice::getDisplayName() const {
    return m_display_name;
}
void OAITokenPrice::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITokenPrice::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITokenPrice::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint64 OAITokenPrice::getLastUpdated() const {
    return m_last_updated;
}
void OAITokenPrice::setLastUpdated(const qint64 &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAITokenPrice::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAITokenPrice::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint64 OAITokenPrice::getPrice() const {
    return m_price;
}
void OAITokenPrice::setPrice(const qint64 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAITokenPrice::is_price_Set() const{
    return m_price_isSet;
}

bool OAITokenPrice::is_price_Valid() const{
    return m_price_isValid;
}

QString OAITokenPrice::getTokenId() const {
    return m_token_id;
}
void OAITokenPrice::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAITokenPrice::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAITokenPrice::is_token_id_Valid() const{
    return m_token_id_isValid;
}

qint64 OAITokenPrice::getVolumeLastDay() const {
    return m_volume_last_day;
}
void OAITokenPrice::setVolumeLastDay(const qint64 &volume_last_day) {
    m_volume_last_day = volume_last_day;
    m_volume_last_day_isSet = true;
}

bool OAITokenPrice::is_volume_last_day_Set() const{
    return m_volume_last_day_isSet;
}

bool OAITokenPrice::is_volume_last_day_Valid() const{
    return m_volume_last_day_isValid;
}

bool OAITokenPrice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_last_day_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenPrice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_isValid && m_display_name_isValid && m_last_updated_isValid && m_price_isValid && m_token_id_isValid && m_volume_last_day_isValid && true;
}

} // namespace OpenAPI
