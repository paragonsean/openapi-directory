# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentRequestStateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_request_state: str=None, request_id: str=None, tx_id: str=None):
        """PaymentRequestStateResponse - a model defined in OpenAPI

        :param payment_request_state: The payment_request_state of this PaymentRequestStateResponse.
        :param request_id: The request_id of this PaymentRequestStateResponse.
        :param tx_id: The tx_id of this PaymentRequestStateResponse.
        """
        self.openapi_types = {
            'payment_request_state': str,
            'request_id': str,
            'tx_id': str
        }

        self.attribute_map = {
            'payment_request_state': 'paymentRequestState',
            'request_id': 'requestId',
            'tx_id': 'txId'
        }

        self._payment_request_state = payment_request_state
        self._request_id = request_id
        self._tx_id = tx_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRequestStateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRequestStateResponse of this PaymentRequestStateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_request_state(self):
        """Gets the payment_request_state of this PaymentRequestStateResponse.


        :return: The payment_request_state of this PaymentRequestStateResponse.
        :rtype: str
        """
        return self._payment_request_state

    @payment_request_state.setter
    def payment_request_state(self, payment_request_state):
        """Sets the payment_request_state of this PaymentRequestStateResponse.


        :param payment_request_state: The payment_request_state of this PaymentRequestStateResponse.
        :type payment_request_state: str
        """
        allowed_values = ["CREATED", "WAITING", "EXECUTED", "INVALID"]  # noqa: E501
        if payment_request_state not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_request_state` ({0}), must be one of {1}"
                .format(payment_request_state, allowed_values)
            )

        self._payment_request_state = payment_request_state

    @property
    def request_id(self):
        """Gets the request_id of this PaymentRequestStateResponse.


        :return: The request_id of this PaymentRequestStateResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this PaymentRequestStateResponse.


        :param request_id: The request_id of this PaymentRequestStateResponse.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def tx_id(self):
        """Gets the tx_id of this PaymentRequestStateResponse.


        :return: The tx_id of this PaymentRequestStateResponse.
        :rtype: str
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this PaymentRequestStateResponse.


        :param tx_id: The tx_id of this PaymentRequestStateResponse.
        :type tx_id: str
        """

        self._tx_id = tx_id
