# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodePeer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_height: int=None, blockchain_api: bool=None, header_height: int=None, last_seen: int=None, name: str=None, open_rest_api: bool=None, response_time: int=None, url: str=None):
        """NodePeer - a model defined in OpenAPI

        :param block_height: The block_height of this NodePeer.
        :param blockchain_api: The blockchain_api of this NodePeer.
        :param header_height: The header_height of this NodePeer.
        :param last_seen: The last_seen of this NodePeer.
        :param name: The name of this NodePeer.
        :param open_rest_api: The open_rest_api of this NodePeer.
        :param response_time: The response_time of this NodePeer.
        :param url: The url of this NodePeer.
        """
        self.openapi_types = {
            'block_height': int,
            'blockchain_api': bool,
            'header_height': int,
            'last_seen': int,
            'name': str,
            'open_rest_api': bool,
            'response_time': int,
            'url': str
        }

        self.attribute_map = {
            'block_height': 'blockHeight',
            'blockchain_api': 'blockchainApi',
            'header_height': 'headerHeight',
            'last_seen': 'lastSeen',
            'name': 'name',
            'open_rest_api': 'openRestApi',
            'response_time': 'responseTime',
            'url': 'url'
        }

        self._block_height = block_height
        self._blockchain_api = blockchain_api
        self._header_height = header_height
        self._last_seen = last_seen
        self._name = name
        self._open_rest_api = open_rest_api
        self._response_time = response_time
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodePeer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodePeer of this NodePeer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_height(self):
        """Gets the block_height of this NodePeer.


        :return: The block_height of this NodePeer.
        :rtype: int
        """
        return self._block_height

    @block_height.setter
    def block_height(self, block_height):
        """Sets the block_height of this NodePeer.


        :param block_height: The block_height of this NodePeer.
        :type block_height: int
        """
        if block_height is None:
            raise ValueError("Invalid value for `block_height`, must not be `None`")

        self._block_height = block_height

    @property
    def blockchain_api(self):
        """Gets the blockchain_api of this NodePeer.


        :return: The blockchain_api of this NodePeer.
        :rtype: bool
        """
        return self._blockchain_api

    @blockchain_api.setter
    def blockchain_api(self, blockchain_api):
        """Sets the blockchain_api of this NodePeer.


        :param blockchain_api: The blockchain_api of this NodePeer.
        :type blockchain_api: bool
        """
        if blockchain_api is None:
            raise ValueError("Invalid value for `blockchain_api`, must not be `None`")

        self._blockchain_api = blockchain_api

    @property
    def header_height(self):
        """Gets the header_height of this NodePeer.


        :return: The header_height of this NodePeer.
        :rtype: int
        """
        return self._header_height

    @header_height.setter
    def header_height(self, header_height):
        """Sets the header_height of this NodePeer.


        :param header_height: The header_height of this NodePeer.
        :type header_height: int
        """
        if header_height is None:
            raise ValueError("Invalid value for `header_height`, must not be `None`")

        self._header_height = header_height

    @property
    def last_seen(self):
        """Gets the last_seen of this NodePeer.


        :return: The last_seen of this NodePeer.
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this NodePeer.


        :param last_seen: The last_seen of this NodePeer.
        :type last_seen: int
        """
        if last_seen is None:
            raise ValueError("Invalid value for `last_seen`, must not be `None`")

        self._last_seen = last_seen

    @property
    def name(self):
        """Gets the name of this NodePeer.


        :return: The name of this NodePeer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodePeer.


        :param name: The name of this NodePeer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def open_rest_api(self):
        """Gets the open_rest_api of this NodePeer.


        :return: The open_rest_api of this NodePeer.
        :rtype: bool
        """
        return self._open_rest_api

    @open_rest_api.setter
    def open_rest_api(self, open_rest_api):
        """Sets the open_rest_api of this NodePeer.


        :param open_rest_api: The open_rest_api of this NodePeer.
        :type open_rest_api: bool
        """
        if open_rest_api is None:
            raise ValueError("Invalid value for `open_rest_api`, must not be `None`")

        self._open_rest_api = open_rest_api

    @property
    def response_time(self):
        """Gets the response_time of this NodePeer.


        :return: The response_time of this NodePeer.
        :rtype: int
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this NodePeer.


        :param response_time: The response_time of this NodePeer.
        :type response_time: int
        """
        if response_time is None:
            raise ValueError("Invalid value for `response_time`, must not be `None`")

        self._response_time = response_time

    @property
    def url(self):
        """Gets the url of this NodePeer.


        :return: The url of this NodePeer.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NodePeer.


        :param url: The url of this NodePeer.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
