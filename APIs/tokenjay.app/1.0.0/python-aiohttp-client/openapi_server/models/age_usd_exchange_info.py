# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgeUsdExchangeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_fee_amount: int=None, bank_fee_description: str=None, erg_amount: int=None, erg_amount_description: str=None, exchange_rate: int=None, jay_fee_amount: int=None, jay_fee_description: str=None, total_amount: int=None):
        """AgeUsdExchangeInfo - a model defined in OpenAPI

        :param bank_fee_amount: The bank_fee_amount of this AgeUsdExchangeInfo.
        :param bank_fee_description: The bank_fee_description of this AgeUsdExchangeInfo.
        :param erg_amount: The erg_amount of this AgeUsdExchangeInfo.
        :param erg_amount_description: The erg_amount_description of this AgeUsdExchangeInfo.
        :param exchange_rate: The exchange_rate of this AgeUsdExchangeInfo.
        :param jay_fee_amount: The jay_fee_amount of this AgeUsdExchangeInfo.
        :param jay_fee_description: The jay_fee_description of this AgeUsdExchangeInfo.
        :param total_amount: The total_amount of this AgeUsdExchangeInfo.
        """
        self.openapi_types = {
            'bank_fee_amount': int,
            'bank_fee_description': str,
            'erg_amount': int,
            'erg_amount_description': str,
            'exchange_rate': int,
            'jay_fee_amount': int,
            'jay_fee_description': str,
            'total_amount': int
        }

        self.attribute_map = {
            'bank_fee_amount': 'bankFeeAmount',
            'bank_fee_description': 'bankFeeDescription',
            'erg_amount': 'ergAmount',
            'erg_amount_description': 'ergAmountDescription',
            'exchange_rate': 'exchangeRate',
            'jay_fee_amount': 'jayFeeAmount',
            'jay_fee_description': 'jayFeeDescription',
            'total_amount': 'totalAmount'
        }

        self._bank_fee_amount = bank_fee_amount
        self._bank_fee_description = bank_fee_description
        self._erg_amount = erg_amount
        self._erg_amount_description = erg_amount_description
        self._exchange_rate = exchange_rate
        self._jay_fee_amount = jay_fee_amount
        self._jay_fee_description = jay_fee_description
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgeUsdExchangeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgeUsdExchangeInfo of this AgeUsdExchangeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_fee_amount(self):
        """Gets the bank_fee_amount of this AgeUsdExchangeInfo.


        :return: The bank_fee_amount of this AgeUsdExchangeInfo.
        :rtype: int
        """
        return self._bank_fee_amount

    @bank_fee_amount.setter
    def bank_fee_amount(self, bank_fee_amount):
        """Sets the bank_fee_amount of this AgeUsdExchangeInfo.


        :param bank_fee_amount: The bank_fee_amount of this AgeUsdExchangeInfo.
        :type bank_fee_amount: int
        """
        if bank_fee_amount is None:
            raise ValueError("Invalid value for `bank_fee_amount`, must not be `None`")

        self._bank_fee_amount = bank_fee_amount

    @property
    def bank_fee_description(self):
        """Gets the bank_fee_description of this AgeUsdExchangeInfo.


        :return: The bank_fee_description of this AgeUsdExchangeInfo.
        :rtype: str
        """
        return self._bank_fee_description

    @bank_fee_description.setter
    def bank_fee_description(self, bank_fee_description):
        """Sets the bank_fee_description of this AgeUsdExchangeInfo.


        :param bank_fee_description: The bank_fee_description of this AgeUsdExchangeInfo.
        :type bank_fee_description: str
        """
        if bank_fee_description is None:
            raise ValueError("Invalid value for `bank_fee_description`, must not be `None`")

        self._bank_fee_description = bank_fee_description

    @property
    def erg_amount(self):
        """Gets the erg_amount of this AgeUsdExchangeInfo.


        :return: The erg_amount of this AgeUsdExchangeInfo.
        :rtype: int
        """
        return self._erg_amount

    @erg_amount.setter
    def erg_amount(self, erg_amount):
        """Sets the erg_amount of this AgeUsdExchangeInfo.


        :param erg_amount: The erg_amount of this AgeUsdExchangeInfo.
        :type erg_amount: int
        """
        if erg_amount is None:
            raise ValueError("Invalid value for `erg_amount`, must not be `None`")

        self._erg_amount = erg_amount

    @property
    def erg_amount_description(self):
        """Gets the erg_amount_description of this AgeUsdExchangeInfo.


        :return: The erg_amount_description of this AgeUsdExchangeInfo.
        :rtype: str
        """
        return self._erg_amount_description

    @erg_amount_description.setter
    def erg_amount_description(self, erg_amount_description):
        """Sets the erg_amount_description of this AgeUsdExchangeInfo.


        :param erg_amount_description: The erg_amount_description of this AgeUsdExchangeInfo.
        :type erg_amount_description: str
        """
        if erg_amount_description is None:
            raise ValueError("Invalid value for `erg_amount_description`, must not be `None`")

        self._erg_amount_description = erg_amount_description

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this AgeUsdExchangeInfo.


        :return: The exchange_rate of this AgeUsdExchangeInfo.
        :rtype: int
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this AgeUsdExchangeInfo.


        :param exchange_rate: The exchange_rate of this AgeUsdExchangeInfo.
        :type exchange_rate: int
        """
        if exchange_rate is None:
            raise ValueError("Invalid value for `exchange_rate`, must not be `None`")

        self._exchange_rate = exchange_rate

    @property
    def jay_fee_amount(self):
        """Gets the jay_fee_amount of this AgeUsdExchangeInfo.


        :return: The jay_fee_amount of this AgeUsdExchangeInfo.
        :rtype: int
        """
        return self._jay_fee_amount

    @jay_fee_amount.setter
    def jay_fee_amount(self, jay_fee_amount):
        """Sets the jay_fee_amount of this AgeUsdExchangeInfo.


        :param jay_fee_amount: The jay_fee_amount of this AgeUsdExchangeInfo.
        :type jay_fee_amount: int
        """
        if jay_fee_amount is None:
            raise ValueError("Invalid value for `jay_fee_amount`, must not be `None`")

        self._jay_fee_amount = jay_fee_amount

    @property
    def jay_fee_description(self):
        """Gets the jay_fee_description of this AgeUsdExchangeInfo.


        :return: The jay_fee_description of this AgeUsdExchangeInfo.
        :rtype: str
        """
        return self._jay_fee_description

    @jay_fee_description.setter
    def jay_fee_description(self, jay_fee_description):
        """Sets the jay_fee_description of this AgeUsdExchangeInfo.


        :param jay_fee_description: The jay_fee_description of this AgeUsdExchangeInfo.
        :type jay_fee_description: str
        """
        if jay_fee_description is None:
            raise ValueError("Invalid value for `jay_fee_description`, must not be `None`")

        self._jay_fee_description = jay_fee_description

    @property
    def total_amount(self):
        """Gets the total_amount of this AgeUsdExchangeInfo.


        :return: The total_amount of this AgeUsdExchangeInfo.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this AgeUsdExchangeInfo.


        :param total_amount: The total_amount of this AgeUsdExchangeInfo.
        :type total_amount: int
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")

        self._total_amount = total_amount
