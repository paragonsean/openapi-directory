# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErgoPayResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, addresses: List[str]=None, message: str=None, message_severity: str=None, reduced_tx: str=None, reduced_tx_list: List[str]=None, reply_to: str=None):
        """ErgoPayResponse - a model defined in OpenAPI

        :param address: The address of this ErgoPayResponse.
        :param addresses: The addresses of this ErgoPayResponse.
        :param message: The message of this ErgoPayResponse.
        :param message_severity: The message_severity of this ErgoPayResponse.
        :param reduced_tx: The reduced_tx of this ErgoPayResponse.
        :param reduced_tx_list: The reduced_tx_list of this ErgoPayResponse.
        :param reply_to: The reply_to of this ErgoPayResponse.
        """
        self.openapi_types = {
            'address': str,
            'addresses': List[str],
            'message': str,
            'message_severity': str,
            'reduced_tx': str,
            'reduced_tx_list': List[str],
            'reply_to': str
        }

        self.attribute_map = {
            'address': 'address',
            'addresses': 'addresses',
            'message': 'message',
            'message_severity': 'messageSeverity',
            'reduced_tx': 'reducedTx',
            'reduced_tx_list': 'reducedTxList',
            'reply_to': 'replyTo'
        }

        self._address = address
        self._addresses = addresses
        self._message = message
        self._message_severity = message_severity
        self._reduced_tx = reduced_tx
        self._reduced_tx_list = reduced_tx_list
        self._reply_to = reply_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErgoPayResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErgoPayResponse of this ErgoPayResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ErgoPayResponse.


        :return: The address of this ErgoPayResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ErgoPayResponse.


        :param address: The address of this ErgoPayResponse.
        :type address: str
        """

        self._address = address

    @property
    def addresses(self):
        """Gets the addresses of this ErgoPayResponse.


        :return: The addresses of this ErgoPayResponse.
        :rtype: List[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this ErgoPayResponse.


        :param addresses: The addresses of this ErgoPayResponse.
        :type addresses: List[str]
        """

        self._addresses = addresses

    @property
    def message(self):
        """Gets the message of this ErgoPayResponse.


        :return: The message of this ErgoPayResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErgoPayResponse.


        :param message: The message of this ErgoPayResponse.
        :type message: str
        """

        self._message = message

    @property
    def message_severity(self):
        """Gets the message_severity of this ErgoPayResponse.


        :return: The message_severity of this ErgoPayResponse.
        :rtype: str
        """
        return self._message_severity

    @message_severity.setter
    def message_severity(self, message_severity):
        """Sets the message_severity of this ErgoPayResponse.


        :param message_severity: The message_severity of this ErgoPayResponse.
        :type message_severity: str
        """
        allowed_values = ["NONE", "INFORMATION", "WARNING", "ERROR"]  # noqa: E501
        if message_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `message_severity` ({0}), must be one of {1}"
                .format(message_severity, allowed_values)
            )

        self._message_severity = message_severity

    @property
    def reduced_tx(self):
        """Gets the reduced_tx of this ErgoPayResponse.


        :return: The reduced_tx of this ErgoPayResponse.
        :rtype: str
        """
        return self._reduced_tx

    @reduced_tx.setter
    def reduced_tx(self, reduced_tx):
        """Sets the reduced_tx of this ErgoPayResponse.


        :param reduced_tx: The reduced_tx of this ErgoPayResponse.
        :type reduced_tx: str
        """

        self._reduced_tx = reduced_tx

    @property
    def reduced_tx_list(self):
        """Gets the reduced_tx_list of this ErgoPayResponse.


        :return: The reduced_tx_list of this ErgoPayResponse.
        :rtype: List[str]
        """
        return self._reduced_tx_list

    @reduced_tx_list.setter
    def reduced_tx_list(self, reduced_tx_list):
        """Sets the reduced_tx_list of this ErgoPayResponse.


        :param reduced_tx_list: The reduced_tx_list of this ErgoPayResponse.
        :type reduced_tx_list: List[str]
        """

        self._reduced_tx_list = reduced_tx_list

    @property
    def reply_to(self):
        """Gets the reply_to of this ErgoPayResponse.


        :return: The reply_to of this ErgoPayResponse.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this ErgoPayResponse.


        :param reply_to: The reply_to of this ErgoPayResponse.
        :type reply_to: str
        """

        self._reply_to = reply_to
