# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ViewElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, on_click_action: str=None, on_long_press_action: str=None, visible: bool=None):
        """ViewElement - a model defined in OpenAPI

        :param id: The id of this ViewElement.
        :param on_click_action: The on_click_action of this ViewElement.
        :param on_long_press_action: The on_long_press_action of this ViewElement.
        :param visible: The visible of this ViewElement.
        """
        self.openapi_types = {
            'id': str,
            'on_click_action': str,
            'on_long_press_action': str,
            'visible': bool
        }

        self.attribute_map = {
            'id': 'id',
            'on_click_action': 'onClickAction',
            'on_long_press_action': 'onLongPressAction',
            'visible': 'visible'
        }

        self._id = id
        self._on_click_action = on_click_action
        self._on_long_press_action = on_long_press_action
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViewElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViewElement of this ViewElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ViewElement.


        :return: The id of this ViewElement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ViewElement.


        :param id: The id of this ViewElement.
        :type id: str
        """

        self._id = id

    @property
    def on_click_action(self):
        """Gets the on_click_action of this ViewElement.


        :return: The on_click_action of this ViewElement.
        :rtype: str
        """
        return self._on_click_action

    @on_click_action.setter
    def on_click_action(self, on_click_action):
        """Sets the on_click_action of this ViewElement.


        :param on_click_action: The on_click_action of this ViewElement.
        :type on_click_action: str
        """

        self._on_click_action = on_click_action

    @property
    def on_long_press_action(self):
        """Gets the on_long_press_action of this ViewElement.


        :return: The on_long_press_action of this ViewElement.
        :rtype: str
        """
        return self._on_long_press_action

    @on_long_press_action.setter
    def on_long_press_action(self, on_long_press_action):
        """Sets the on_long_press_action of this ViewElement.


        :param on_long_press_action: The on_long_press_action of this ViewElement.
        :type on_long_press_action: str
        """

        self._on_long_press_action = on_long_press_action

    @property
    def visible(self):
        """Gets the visible of this ViewElement.


        :return: The visible of this ViewElement.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ViewElement.


        :param visible: The visible of this ViewElement.
        :type visible: bool
        """

        self._visible = visible
