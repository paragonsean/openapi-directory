# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.genuine_token import GenuineToken
from openapi_server import util


class CheckResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, genuine: int=None, token: GenuineToken=None):
        """CheckResponse - a model defined in OpenAPI

        :param genuine: The genuine of this CheckResponse.
        :param token: The token of this CheckResponse.
        """
        self.openapi_types = {
            'genuine': int,
            'token': GenuineToken
        }

        self.attribute_map = {
            'genuine': 'genuine',
            'token': 'token'
        }

        self._genuine = genuine
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckResponse of this CheckResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def genuine(self):
        """Gets the genuine of this CheckResponse.

        Flag with 0 unknown, 1 verified, 2 suspicious, 3 blocked (see EIP-21)

        :return: The genuine of this CheckResponse.
        :rtype: int
        """
        return self._genuine

    @genuine.setter
    def genuine(self, genuine):
        """Sets the genuine of this CheckResponse.

        Flag with 0 unknown, 1 verified, 2 suspicious, 3 blocked (see EIP-21)

        :param genuine: The genuine of this CheckResponse.
        :type genuine: int
        """
        if genuine is None:
            raise ValueError("Invalid value for `genuine`, must not be `None`")

        self._genuine = genuine

    @property
    def token(self):
        """Gets the token of this CheckResponse.


        :return: The token of this CheckResponse.
        :rtype: GenuineToken
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CheckResponse.


        :param token: The token of this CheckResponse.
        :type token: GenuineToken
        """

        self._token = token
