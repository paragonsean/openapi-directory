# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: int=None, display_name: str=None, last_updated: int=None, price: int=None, token_id: str=None, volume_last_day: int=None):
        """TokenPrice - a model defined in OpenAPI

        :param available: The available of this TokenPrice.
        :param display_name: The display_name of this TokenPrice.
        :param last_updated: The last_updated of this TokenPrice.
        :param price: The price of this TokenPrice.
        :param token_id: The token_id of this TokenPrice.
        :param volume_last_day: The volume_last_day of this TokenPrice.
        """
        self.openapi_types = {
            'available': int,
            'display_name': str,
            'last_updated': int,
            'price': int,
            'token_id': str,
            'volume_last_day': int
        }

        self.attribute_map = {
            'available': 'available',
            'display_name': 'displayName',
            'last_updated': 'lastUpdated',
            'price': 'price',
            'token_id': 'tokenId',
            'volume_last_day': 'volumeLastDay'
        }

        self._available = available
        self._display_name = display_name
        self._last_updated = last_updated
        self._price = price
        self._token_id = token_id
        self._volume_last_day = volume_last_day

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenPrice of this TokenPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this TokenPrice.


        :return: The available of this TokenPrice.
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this TokenPrice.


        :param available: The available of this TokenPrice.
        :type available: int
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def display_name(self):
        """Gets the display_name of this TokenPrice.


        :return: The display_name of this TokenPrice.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TokenPrice.


        :param display_name: The display_name of this TokenPrice.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def last_updated(self):
        """Gets the last_updated of this TokenPrice.


        :return: The last_updated of this TokenPrice.
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this TokenPrice.


        :param last_updated: The last_updated of this TokenPrice.
        :type last_updated: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def price(self):
        """Gets the price of this TokenPrice.


        :return: The price of this TokenPrice.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TokenPrice.


        :param price: The price of this TokenPrice.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def token_id(self):
        """Gets the token_id of this TokenPrice.


        :return: The token_id of this TokenPrice.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TokenPrice.


        :param token_id: The token_id of this TokenPrice.
        :type token_id: str
        """
        if token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")

        self._token_id = token_id

    @property
    def volume_last_day(self):
        """Gets the volume_last_day of this TokenPrice.


        :return: The volume_last_day of this TokenPrice.
        :rtype: int
        """
        return self._volume_last_day

    @volume_last_day.setter
    def volume_last_day(self, volume_last_day):
        """Sets the volume_last_day of this TokenPrice.


        :param volume_last_day: The volume_last_day of this TokenPrice.
        :type volume_last_day: int
        """
        if volume_last_day is None:
            raise ValueError("Invalid value for `volume_last_day`, must not be `None`")

        self._volume_last_day = volume_last_day
