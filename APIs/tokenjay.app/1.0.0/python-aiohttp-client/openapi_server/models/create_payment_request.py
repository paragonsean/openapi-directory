# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, nano_erg: int=None, receiver_address: str=None, sender_address: str=None, token_id: str=None, token_raw_amount: int=None):
        """CreatePaymentRequest - a model defined in OpenAPI

        :param message: The message of this CreatePaymentRequest.
        :param nano_erg: The nano_erg of this CreatePaymentRequest.
        :param receiver_address: The receiver_address of this CreatePaymentRequest.
        :param sender_address: The sender_address of this CreatePaymentRequest.
        :param token_id: The token_id of this CreatePaymentRequest.
        :param token_raw_amount: The token_raw_amount of this CreatePaymentRequest.
        """
        self.openapi_types = {
            'message': str,
            'nano_erg': int,
            'receiver_address': str,
            'sender_address': str,
            'token_id': str,
            'token_raw_amount': int
        }

        self.attribute_map = {
            'message': 'message',
            'nano_erg': 'nanoErg',
            'receiver_address': 'receiverAddress',
            'sender_address': 'senderAddress',
            'token_id': 'tokenId',
            'token_raw_amount': 'tokenRawAmount'
        }

        self._message = message
        self._nano_erg = nano_erg
        self._receiver_address = receiver_address
        self._sender_address = sender_address
        self._token_id = token_id
        self._token_raw_amount = token_raw_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePaymentRequest of this CreatePaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this CreatePaymentRequest.


        :return: The message of this CreatePaymentRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreatePaymentRequest.


        :param message: The message of this CreatePaymentRequest.
        :type message: str
        """

        self._message = message

    @property
    def nano_erg(self):
        """Gets the nano_erg of this CreatePaymentRequest.


        :return: The nano_erg of this CreatePaymentRequest.
        :rtype: int
        """
        return self._nano_erg

    @nano_erg.setter
    def nano_erg(self, nano_erg):
        """Sets the nano_erg of this CreatePaymentRequest.


        :param nano_erg: The nano_erg of this CreatePaymentRequest.
        :type nano_erg: int
        """
        if nano_erg is None:
            raise ValueError("Invalid value for `nano_erg`, must not be `None`")

        self._nano_erg = nano_erg

    @property
    def receiver_address(self):
        """Gets the receiver_address of this CreatePaymentRequest.


        :return: The receiver_address of this CreatePaymentRequest.
        :rtype: str
        """
        return self._receiver_address

    @receiver_address.setter
    def receiver_address(self, receiver_address):
        """Sets the receiver_address of this CreatePaymentRequest.


        :param receiver_address: The receiver_address of this CreatePaymentRequest.
        :type receiver_address: str
        """
        if receiver_address is None:
            raise ValueError("Invalid value for `receiver_address`, must not be `None`")

        self._receiver_address = receiver_address

    @property
    def sender_address(self):
        """Gets the sender_address of this CreatePaymentRequest.


        :return: The sender_address of this CreatePaymentRequest.
        :rtype: str
        """
        return self._sender_address

    @sender_address.setter
    def sender_address(self, sender_address):
        """Sets the sender_address of this CreatePaymentRequest.


        :param sender_address: The sender_address of this CreatePaymentRequest.
        :type sender_address: str
        """

        self._sender_address = sender_address

    @property
    def token_id(self):
        """Gets the token_id of this CreatePaymentRequest.


        :return: The token_id of this CreatePaymentRequest.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this CreatePaymentRequest.


        :param token_id: The token_id of this CreatePaymentRequest.
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def token_raw_amount(self):
        """Gets the token_raw_amount of this CreatePaymentRequest.


        :return: The token_raw_amount of this CreatePaymentRequest.
        :rtype: int
        """
        return self._token_raw_amount

    @token_raw_amount.setter
    def token_raw_amount(self, token_raw_amount):
        """Sets the token_raw_amount of this CreatePaymentRequest.


        :param token_raw_amount: The token_raw_amount of this CreatePaymentRequest.
        :type token_raw_amount: int
        """

        self._token_raw_amount = token_raw_amount
