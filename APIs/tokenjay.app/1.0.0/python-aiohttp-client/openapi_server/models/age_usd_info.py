# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgeUsdInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reserve_ratio: int=None, sig_rsv_price: int=None, sig_usd_price: int=None):
        """AgeUsdInfo - a model defined in OpenAPI

        :param reserve_ratio: The reserve_ratio of this AgeUsdInfo.
        :param sig_rsv_price: The sig_rsv_price of this AgeUsdInfo.
        :param sig_usd_price: The sig_usd_price of this AgeUsdInfo.
        """
        self.openapi_types = {
            'reserve_ratio': int,
            'sig_rsv_price': int,
            'sig_usd_price': int
        }

        self.attribute_map = {
            'reserve_ratio': 'reserveRatio',
            'sig_rsv_price': 'sigRsvPrice',
            'sig_usd_price': 'sigUsdPrice'
        }

        self._reserve_ratio = reserve_ratio
        self._sig_rsv_price = sig_rsv_price
        self._sig_usd_price = sig_usd_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgeUsdInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgeUsdInfo of this AgeUsdInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reserve_ratio(self):
        """Gets the reserve_ratio of this AgeUsdInfo.


        :return: The reserve_ratio of this AgeUsdInfo.
        :rtype: int
        """
        return self._reserve_ratio

    @reserve_ratio.setter
    def reserve_ratio(self, reserve_ratio):
        """Sets the reserve_ratio of this AgeUsdInfo.


        :param reserve_ratio: The reserve_ratio of this AgeUsdInfo.
        :type reserve_ratio: int
        """
        if reserve_ratio is None:
            raise ValueError("Invalid value for `reserve_ratio`, must not be `None`")

        self._reserve_ratio = reserve_ratio

    @property
    def sig_rsv_price(self):
        """Gets the sig_rsv_price of this AgeUsdInfo.


        :return: The sig_rsv_price of this AgeUsdInfo.
        :rtype: int
        """
        return self._sig_rsv_price

    @sig_rsv_price.setter
    def sig_rsv_price(self, sig_rsv_price):
        """Sets the sig_rsv_price of this AgeUsdInfo.


        :param sig_rsv_price: The sig_rsv_price of this AgeUsdInfo.
        :type sig_rsv_price: int
        """
        if sig_rsv_price is None:
            raise ValueError("Invalid value for `sig_rsv_price`, must not be `None`")

        self._sig_rsv_price = sig_rsv_price

    @property
    def sig_usd_price(self):
        """Gets the sig_usd_price of this AgeUsdInfo.


        :return: The sig_usd_price of this AgeUsdInfo.
        :rtype: int
        """
        return self._sig_usd_price

    @sig_usd_price.setter
    def sig_usd_price(self, sig_usd_price):
        """Sets the sig_usd_price of this AgeUsdInfo.


        :param sig_usd_price: The sig_usd_price of this AgeUsdInfo.
        :type sig_usd_price: int
        """
        if sig_usd_price is None:
            raise ValueError("Invalid value for `sig_usd_price`, must not be `None`")

        self._sig_usd_price = sig_usd_price
