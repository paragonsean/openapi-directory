# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddRequestResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ergo_pay_url: str=None, request_id: str=None):
        """AddRequestResponse - a model defined in OpenAPI

        :param ergo_pay_url: The ergo_pay_url of this AddRequestResponse.
        :param request_id: The request_id of this AddRequestResponse.
        """
        self.openapi_types = {
            'ergo_pay_url': str,
            'request_id': str
        }

        self.attribute_map = {
            'ergo_pay_url': 'ergoPayUrl',
            'request_id': 'requestId'
        }

        self._ergo_pay_url = ergo_pay_url
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddRequestResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddRequestResponse of this AddRequestResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ergo_pay_url(self):
        """Gets the ergo_pay_url of this AddRequestResponse.


        :return: The ergo_pay_url of this AddRequestResponse.
        :rtype: str
        """
        return self._ergo_pay_url

    @ergo_pay_url.setter
    def ergo_pay_url(self, ergo_pay_url):
        """Sets the ergo_pay_url of this AddRequestResponse.


        :param ergo_pay_url: The ergo_pay_url of this AddRequestResponse.
        :type ergo_pay_url: str
        """
        if ergo_pay_url is None:
            raise ValueError("Invalid value for `ergo_pay_url`, must not be `None`")

        self._ergo_pay_url = ergo_pay_url

    @property
    def request_id(self):
        """Gets the request_id of this AddRequestResponse.


        :return: The request_id of this AddRequestResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AddRequestResponse.


        :param request_id: The request_id of this AddRequestResponse.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id
