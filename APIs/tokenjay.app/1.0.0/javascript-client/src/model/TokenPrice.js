/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenPrice model module.
 * @module model/TokenPrice
 * @version 1.0.0
 */
class TokenPrice {
    /**
     * Constructs a new <code>TokenPrice</code>.
     * @alias module:model/TokenPrice
     * @param available {Number} 
     * @param displayName {String} 
     * @param lastUpdated {Number} 
     * @param price {Number} 
     * @param tokenId {String} 
     * @param volumeLastDay {Number} 
     */
    constructor(available, displayName, lastUpdated, price, tokenId, volumeLastDay) { 
        
        TokenPrice.initialize(this, available, displayName, lastUpdated, price, tokenId, volumeLastDay);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, available, displayName, lastUpdated, price, tokenId, volumeLastDay) { 
        obj['available'] = available;
        obj['displayName'] = displayName;
        obj['lastUpdated'] = lastUpdated;
        obj['price'] = price;
        obj['tokenId'] = tokenId;
        obj['volumeLastDay'] = volumeLastDay;
    }

    /**
     * Constructs a <code>TokenPrice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenPrice} obj Optional instance to populate.
     * @return {module:model/TokenPrice} The populated <code>TokenPrice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenPrice();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('tokenId')) {
                obj['tokenId'] = ApiClient.convertToType(data['tokenId'], 'String');
            }
            if (data.hasOwnProperty('volumeLastDay')) {
                obj['volumeLastDay'] = ApiClient.convertToType(data['volumeLastDay'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenPrice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenPrice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenPrice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['tokenId'] && !(typeof data['tokenId'] === 'string' || data['tokenId'] instanceof String)) {
            throw new Error("Expected the field `tokenId` to be a primitive type in the JSON string but got " + data['tokenId']);
        }

        return true;
    }


}

TokenPrice.RequiredProperties = ["available", "displayName", "lastUpdated", "price", "tokenId", "volumeLastDay"];

/**
 * @member {Number} available
 */
TokenPrice.prototype['available'] = undefined;

/**
 * @member {String} displayName
 */
TokenPrice.prototype['displayName'] = undefined;

/**
 * @member {Number} lastUpdated
 */
TokenPrice.prototype['lastUpdated'] = undefined;

/**
 * @member {Number} price
 */
TokenPrice.prototype['price'] = undefined;

/**
 * @member {String} tokenId
 */
TokenPrice.prototype['tokenId'] = undefined;

/**
 * @member {Number} volumeLastDay
 */
TokenPrice.prototype['volumeLastDay'] = undefined;






export default TokenPrice;

