/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErgoPayResponse model module.
 * @module model/ErgoPayResponse
 * @version 1.0.0
 */
class ErgoPayResponse {
    /**
     * Constructs a new <code>ErgoPayResponse</code>.
     * @alias module:model/ErgoPayResponse
     */
    constructor() { 
        
        ErgoPayResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErgoPayResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErgoPayResponse} obj Optional instance to populate.
     * @return {module:model/ErgoPayResponse} The populated <code>ErgoPayResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErgoPayResponse();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], ['String']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('messageSeverity')) {
                obj['messageSeverity'] = ApiClient.convertToType(data['messageSeverity'], 'String');
            }
            if (data.hasOwnProperty('reducedTx')) {
                obj['reducedTx'] = ApiClient.convertToType(data['reducedTx'], 'String');
            }
            if (data.hasOwnProperty('reducedTxList')) {
                obj['reducedTxList'] = ApiClient.convertToType(data['reducedTxList'], ['String']);
            }
            if (data.hasOwnProperty('replyTo')) {
                obj['replyTo'] = ApiClient.convertToType(data['replyTo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErgoPayResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErgoPayResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['addresses'])) {
            throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['messageSeverity'] && !(typeof data['messageSeverity'] === 'string' || data['messageSeverity'] instanceof String)) {
            throw new Error("Expected the field `messageSeverity` to be a primitive type in the JSON string but got " + data['messageSeverity']);
        }
        // ensure the json data is a string
        if (data['reducedTx'] && !(typeof data['reducedTx'] === 'string' || data['reducedTx'] instanceof String)) {
            throw new Error("Expected the field `reducedTx` to be a primitive type in the JSON string but got " + data['reducedTx']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reducedTxList'])) {
            throw new Error("Expected the field `reducedTxList` to be an array in the JSON data but got " + data['reducedTxList']);
        }
        // ensure the json data is a string
        if (data['replyTo'] && !(typeof data['replyTo'] === 'string' || data['replyTo'] instanceof String)) {
            throw new Error("Expected the field `replyTo` to be a primitive type in the JSON string but got " + data['replyTo']);
        }

        return true;
    }


}



/**
 * @member {String} address
 */
ErgoPayResponse.prototype['address'] = undefined;

/**
 * @member {Array.<String>} addresses
 */
ErgoPayResponse.prototype['addresses'] = undefined;

/**
 * @member {String} message
 */
ErgoPayResponse.prototype['message'] = undefined;

/**
 * @member {module:model/ErgoPayResponse.MessageSeverityEnum} messageSeverity
 */
ErgoPayResponse.prototype['messageSeverity'] = undefined;

/**
 * @member {String} reducedTx
 */
ErgoPayResponse.prototype['reducedTx'] = undefined;

/**
 * @member {Array.<String>} reducedTxList
 */
ErgoPayResponse.prototype['reducedTxList'] = undefined;

/**
 * @member {String} replyTo
 */
ErgoPayResponse.prototype['replyTo'] = undefined;





/**
 * Allowed values for the <code>messageSeverity</code> property.
 * @enum {String}
 * @readonly
 */
ErgoPayResponse['MessageSeverityEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "INFORMATION"
     * @const
     */
    "INFORMATION": "INFORMATION",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default ErgoPayResponse;

