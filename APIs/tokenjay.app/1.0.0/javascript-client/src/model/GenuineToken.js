/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GenuineToken model module.
 * @module model/GenuineToken
 * @version 1.0.0
 */
class GenuineToken {
    /**
     * Constructs a new <code>GenuineToken</code>.
     * @alias module:model/GenuineToken
     * @param tokenId {String} 
     * @param tokenName {String} 
     * @param uniqueName {Boolean} 
     */
    constructor(tokenId, tokenName, uniqueName) { 
        
        GenuineToken.initialize(this, tokenId, tokenName, uniqueName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tokenId, tokenName, uniqueName) { 
        obj['tokenId'] = tokenId;
        obj['tokenName'] = tokenName;
        obj['uniqueName'] = uniqueName;
    }

    /**
     * Constructs a <code>GenuineToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenuineToken} obj Optional instance to populate.
     * @return {module:model/GenuineToken} The populated <code>GenuineToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenuineToken();

            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('tokenId')) {
                obj['tokenId'] = ApiClient.convertToType(data['tokenId'], 'String');
            }
            if (data.hasOwnProperty('tokenName')) {
                obj['tokenName'] = ApiClient.convertToType(data['tokenName'], 'String');
            }
            if (data.hasOwnProperty('uniqueName')) {
                obj['uniqueName'] = ApiClient.convertToType(data['uniqueName'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenuineToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenuineToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GenuineToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['tokenId'] && !(typeof data['tokenId'] === 'string' || data['tokenId'] instanceof String)) {
            throw new Error("Expected the field `tokenId` to be a primitive type in the JSON string but got " + data['tokenId']);
        }
        // ensure the json data is a string
        if (data['tokenName'] && !(typeof data['tokenName'] === 'string' || data['tokenName'] instanceof String)) {
            throw new Error("Expected the field `tokenName` to be a primitive type in the JSON string but got " + data['tokenName']);
        }

        return true;
    }


}

GenuineToken.RequiredProperties = ["tokenId", "tokenName", "uniqueName"];

/**
 * @member {String} issuer
 */
GenuineToken.prototype['issuer'] = undefined;

/**
 * @member {String} tokenId
 */
GenuineToken.prototype['tokenId'] = undefined;

/**
 * @member {String} tokenName
 */
GenuineToken.prototype['tokenName'] = undefined;

/**
 * @member {Boolean} uniqueName
 */
GenuineToken.prototype['uniqueName'] = undefined;






export default GenuineToken;

