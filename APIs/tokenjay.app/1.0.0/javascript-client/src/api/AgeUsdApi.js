/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AgeUsdExchangeInfo from '../model/AgeUsdExchangeInfo';
import AgeUsdInfo from '../model/AgeUsdInfo';
import ErgoPayResponse from '../model/ErgoPayResponse';
import TokenPrice from '../model/TokenPrice';

/**
* AgeUsd service.
* @module api/AgeUsdApi
* @version 1.0.0
*/
export default class AgeUsdApi {

    /**
    * Constructs a new AgeUsdApi. 
    * @alias module:api/AgeUsdApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the calcSigmaRsvExchange operation.
     * @callback module:api/AgeUsdApi~calcSigmaRsvExchangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgeUsdExchangeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculates SigRSV exchange
     * @param {Number} amount 
     * @param {module:api/AgeUsdApi~calcSigmaRsvExchangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgeUsdExchangeInfo}
     */
    calcSigmaRsvExchange(amount, callback) {
      let postBody = null;
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling calcSigmaRsvExchange");
      }

      let pathParams = {
        'amount': amount
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AgeUsdExchangeInfo;
      return this.apiClient.callApi(
        '/sigrsv/exchange/{amount}/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calcSigmaUsdExchange operation.
     * @callback module:api/AgeUsdApi~calcSigmaUsdExchangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgeUsdExchangeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculates SigUSD exchange
     * @param {Number} amount 
     * @param {module:api/AgeUsdApi~calcSigmaUsdExchangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgeUsdExchangeInfo}
     */
    calcSigmaUsdExchange(amount, callback) {
      let postBody = null;
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling calcSigmaUsdExchange");
      }

      let pathParams = {
        'amount': amount
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AgeUsdExchangeInfo;
      return this.apiClient.callApi(
        '/sigusd/exchange/{amount}/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doSigmaRsvExchange operation.
     * @callback module:api/AgeUsdApi~doSigmaRsvExchangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErgoPayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Builds ErgoPayRequest for SigRSV exchange
     * @param {Number} amount 
     * @param {String} address 
     * @param {Object} opts Optional parameters
     * @param {Number} [checkRate = 0)] 
     * @param {Number} [executionFee = 0)] 
     * @param {module:api/AgeUsdApi~doSigmaRsvExchangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErgoPayResponse}
     */
    doSigmaRsvExchange(amount, address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling doSigmaRsvExchange");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling doSigmaRsvExchange");
      }

      let pathParams = {
      };
      let queryParams = {
        'amount': amount,
        'address': address,
        'checkRate': opts['checkRate'],
        'executionFee': opts['executionFee']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ErgoPayResponse;
      return this.apiClient.callApi(
        '/sigrsv/exchange/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doSigmaUsdExchange operation.
     * @callback module:api/AgeUsdApi~doSigmaUsdExchangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErgoPayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Builds ErgoPayRequest for SigUSD exchange
     * @param {Number} amount 
     * @param {String} address 
     * @param {Object} opts Optional parameters
     * @param {Number} [checkRate = 0)] 
     * @param {Number} [executionFee = 0)] 
     * @param {module:api/AgeUsdApi~doSigmaUsdExchangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErgoPayResponse}
     */
    doSigmaUsdExchange(amount, address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling doSigmaUsdExchange");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling doSigmaUsdExchange");
      }

      let pathParams = {
      };
      let queryParams = {
        'amount': amount,
        'address': address,
        'checkRate': opts['checkRate'],
        'executionFee': opts['executionFee']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ErgoPayResponse;
      return this.apiClient.callApi(
        '/sigusd/exchange/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgeUsdInfo operation.
     * @callback module:api/AgeUsdApi~getAgeUsdInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgeUsdInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns state of AgeUSD at this moment
     * @param {module:api/AgeUsdApi~getAgeUsdInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgeUsdInfo}
     */
    getAgeUsdInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AgeUsdInfo;
      return this.apiClient.callApi(
        '/ageusd/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigmaRsvPrice operation.
     * @callback module:api/AgeUsdApi~getSigmaRsvPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenPrice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists price and available volume for SigmaRSV
     * @param {module:api/AgeUsdApi~getSigmaRsvPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenPrice}
     */
    getSigmaRsvPrice(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokenPrice;
      return this.apiClient.callApi(
        '/sigrsv/price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigmaUsdPrice operation.
     * @callback module:api/AgeUsdApi~getSigmaUsdPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenPrice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists price and available volume for SigmaUSD
     * @param {module:api/AgeUsdApi~getSigmaUsdPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenPrice}
     */
    getSigmaUsdPrice(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokenPrice;
      return this.apiClient.callApi(
        '/sigusd/price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
