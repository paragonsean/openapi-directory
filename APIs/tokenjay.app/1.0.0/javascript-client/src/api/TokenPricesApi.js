/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TokenPrice from '../model/TokenPrice';

/**
* TokenPrices service.
* @module api/TokenPricesApi
* @version 1.0.0
*/
export default class TokenPricesApi {

    /**
    * Constructs a new TokenPricesApi. 
    * @alias module:api/TokenPricesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTokenPrice operation.
     * @callback module:api/TokenPricesApi~getTokenPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenPrice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists price and available volume for a certain token
     * @param {String} tokenId 
     * @param {module:api/TokenPricesApi~getTokenPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenPrice}
     */
    getTokenPrice(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getTokenPrice");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokenPrice;
      return this.apiClient.callApi(
        '/tokens/prices/{tokenId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenPrices operation.
     * @callback module:api/TokenPricesApi~getTokenPricesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TokenPrice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all token prices and available volume
     * @param {module:api/TokenPricesApi~getTokenPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TokenPrice>}
     */
    getTokenPrices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TokenPrice];
      return this.apiClient.callApi(
        '/tokens/prices/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
