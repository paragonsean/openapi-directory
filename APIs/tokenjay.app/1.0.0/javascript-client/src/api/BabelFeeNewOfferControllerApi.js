/**
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErgoPayResponse from '../model/ErgoPayResponse';
import FetchActionResponse from '../model/FetchActionResponse';
import MosaikApp from '../model/MosaikApp';

/**
* BabelFeeNewOfferController service.
* @module api/BabelFeeNewOfferControllerApi
* @version 1.0.0
*/
export default class BabelFeeNewOfferControllerApi {

    /**
    * Constructs a new BabelFeeNewOfferControllerApi. 
    * @alias module:api/BabelFeeNewOfferControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the doCreateBabelBox operation.
     * @callback module:api/BabelFeeNewOfferControllerApi~doCreateBabelBoxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FetchActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, {String: Object}>} requestBody 
     * @param {module:api/BabelFeeNewOfferControllerApi~doCreateBabelBoxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FetchActionResponse}
     */
    doCreateBabelBox(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling doCreateBabelBox");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = FetchActionResponse;
      return this.apiClient.callApi(
        '/mosaik/babelfee/newoffer/doit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ergoPayCreateBabelBox operation.
     * @callback module:api/BabelFeeNewOfferControllerApi~ergoPayCreateBabelBoxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErgoPayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} address 
     * @param {String} tokenId 
     * @param {Number} ergAmount 
     * @param {Number} tokenAmount 
     * @param {module:api/BabelFeeNewOfferControllerApi~ergoPayCreateBabelBoxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErgoPayResponse}
     */
    ergoPayCreateBabelBox(address, tokenId, ergAmount, tokenAmount, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling ergoPayCreateBabelBox");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling ergoPayCreateBabelBox");
      }
      // verify the required parameter 'ergAmount' is set
      if (ergAmount === undefined || ergAmount === null) {
        throw new Error("Missing the required parameter 'ergAmount' when calling ergoPayCreateBabelBox");
      }
      // verify the required parameter 'tokenAmount' is set
      if (tokenAmount === undefined || tokenAmount === null) {
        throw new Error("Missing the required parameter 'tokenAmount' when calling ergoPayCreateBabelBox");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        'tokenId': tokenId,
        'ergAmount': ergAmount,
        'tokenAmount': tokenAmount
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ErgoPayResponse;
      return this.apiClient.callApi(
        '/createbabel/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBabelFeeNewOffer operation.
     * @callback module:api/BabelFeeNewOfferControllerApi~getBabelFeeNewOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MosaikApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BabelFeeNewOfferControllerApi~getBabelFeeNewOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MosaikApp}
     */
    getBabelFeeNewOffer(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = MosaikApp;
      return this.apiClient.callApi(
        '/mosaik/babelfee/newoffer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceTokenAmountInputFields operation.
     * @callback module:api/BabelFeeNewOfferControllerApi~replaceTokenAmountInputFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FetchActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, {String: Object}>} requestBody 
     * @param {module:api/BabelFeeNewOfferControllerApi~replaceTokenAmountInputFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FetchActionResponse}
     */
    replaceTokenAmountInputFields(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling replaceTokenAmountInputFields");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = FetchActionResponse;
      return this.apiClient.callApi(
        '/mosaik/babelfee/newoffer/new-input', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
