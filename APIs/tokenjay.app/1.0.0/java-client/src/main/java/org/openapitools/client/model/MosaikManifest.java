/*
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MosaikManifest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:59.917164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MosaikManifest {
  public static final String SERIALIZED_NAME_APP_DESCRIPTION = "appDescription";
  @SerializedName(SERIALIZED_NAME_APP_DESCRIPTION)
  private String appDescription;

  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  private Integer appVersion;

  public static final String SERIALIZED_NAME_CACHE_LIFETIME = "cacheLifetime";
  @SerializedName(SERIALIZED_NAME_CACHE_LIFETIME)
  private Integer cacheLifetime;

  public static final String SERIALIZED_NAME_ERROR_REPORT_URL = "errorReportUrl";
  @SerializedName(SERIALIZED_NAME_ERROR_REPORT_URL)
  private String errorReportUrl;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_NOTIFICATION_CHECK_URL = "notificationCheckUrl";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CHECK_URL)
  private String notificationCheckUrl;

  public static final String SERIALIZED_NAME_ON_APP_LOADED_ACTION = "onAppLoadedAction";
  @SerializedName(SERIALIZED_NAME_ON_APP_LOADED_ACTION)
  private String onAppLoadedAction;

  public static final String SERIALIZED_NAME_ON_RESIZE_ACTION = "onResizeAction";
  @SerializedName(SERIALIZED_NAME_ON_RESIZE_ACTION)
  private String onResizeAction;

  /**
   * Gets or Sets targetCanvasDimension
   */
  @JsonAdapter(TargetCanvasDimensionEnum.Adapter.class)
  public enum TargetCanvasDimensionEnum {
    COMPACT_WIDTH("COMPACT_WIDTH"),
    
    MEDIUM_WIDTH("MEDIUM_WIDTH"),
    
    FULL_WIDTH("FULL_WIDTH");

    private String value;

    TargetCanvasDimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetCanvasDimensionEnum fromValue(String value) {
      for (TargetCanvasDimensionEnum b : TargetCanvasDimensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetCanvasDimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetCanvasDimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetCanvasDimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetCanvasDimensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetCanvasDimensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_CANVAS_DIMENSION = "targetCanvasDimension";
  @SerializedName(SERIALIZED_NAME_TARGET_CANVAS_DIMENSION)
  private TargetCanvasDimensionEnum targetCanvasDimension;

  public static final String SERIALIZED_NAME_TARGET_MOSAIK_VERSION = "targetMosaikVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_MOSAIK_VERSION)
  private Integer targetMosaikVersion;

  public MosaikManifest() {
  }

  public MosaikManifest appDescription(String appDescription) {
    this.appDescription = appDescription;
    return this;
  }

  /**
   * Get appDescription
   * @return appDescription
   */
  @javax.annotation.Nullable
  public String getAppDescription() {
    return appDescription;
  }

  public void setAppDescription(String appDescription) {
    this.appDescription = appDescription;
  }


  public MosaikManifest appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Get appName
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public MosaikManifest appVersion(Integer appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * Get appVersion
   * @return appVersion
   */
  @javax.annotation.Nullable
  public Integer getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(Integer appVersion) {
    this.appVersion = appVersion;
  }


  public MosaikManifest cacheLifetime(Integer cacheLifetime) {
    this.cacheLifetime = cacheLifetime;
    return this;
  }

  /**
   * Get cacheLifetime
   * @return cacheLifetime
   */
  @javax.annotation.Nullable
  public Integer getCacheLifetime() {
    return cacheLifetime;
  }

  public void setCacheLifetime(Integer cacheLifetime) {
    this.cacheLifetime = cacheLifetime;
  }


  public MosaikManifest errorReportUrl(String errorReportUrl) {
    this.errorReportUrl = errorReportUrl;
    return this;
  }

  /**
   * Get errorReportUrl
   * @return errorReportUrl
   */
  @javax.annotation.Nullable
  public String getErrorReportUrl() {
    return errorReportUrl;
  }

  public void setErrorReportUrl(String errorReportUrl) {
    this.errorReportUrl = errorReportUrl;
  }


  public MosaikManifest iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * Get iconUrl
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public MosaikManifest notificationCheckUrl(String notificationCheckUrl) {
    this.notificationCheckUrl = notificationCheckUrl;
    return this;
  }

  /**
   * Get notificationCheckUrl
   * @return notificationCheckUrl
   */
  @javax.annotation.Nullable
  public String getNotificationCheckUrl() {
    return notificationCheckUrl;
  }

  public void setNotificationCheckUrl(String notificationCheckUrl) {
    this.notificationCheckUrl = notificationCheckUrl;
  }


  public MosaikManifest onAppLoadedAction(String onAppLoadedAction) {
    this.onAppLoadedAction = onAppLoadedAction;
    return this;
  }

  /**
   * Get onAppLoadedAction
   * @return onAppLoadedAction
   */
  @javax.annotation.Nullable
  public String getOnAppLoadedAction() {
    return onAppLoadedAction;
  }

  public void setOnAppLoadedAction(String onAppLoadedAction) {
    this.onAppLoadedAction = onAppLoadedAction;
  }


  public MosaikManifest onResizeAction(String onResizeAction) {
    this.onResizeAction = onResizeAction;
    return this;
  }

  /**
   * Get onResizeAction
   * @return onResizeAction
   */
  @javax.annotation.Nullable
  public String getOnResizeAction() {
    return onResizeAction;
  }

  public void setOnResizeAction(String onResizeAction) {
    this.onResizeAction = onResizeAction;
  }


  public MosaikManifest targetCanvasDimension(TargetCanvasDimensionEnum targetCanvasDimension) {
    this.targetCanvasDimension = targetCanvasDimension;
    return this;
  }

  /**
   * Get targetCanvasDimension
   * @return targetCanvasDimension
   */
  @javax.annotation.Nullable
  public TargetCanvasDimensionEnum getTargetCanvasDimension() {
    return targetCanvasDimension;
  }

  public void setTargetCanvasDimension(TargetCanvasDimensionEnum targetCanvasDimension) {
    this.targetCanvasDimension = targetCanvasDimension;
  }


  public MosaikManifest targetMosaikVersion(Integer targetMosaikVersion) {
    this.targetMosaikVersion = targetMosaikVersion;
    return this;
  }

  /**
   * Get targetMosaikVersion
   * @return targetMosaikVersion
   */
  @javax.annotation.Nullable
  public Integer getTargetMosaikVersion() {
    return targetMosaikVersion;
  }

  public void setTargetMosaikVersion(Integer targetMosaikVersion) {
    this.targetMosaikVersion = targetMosaikVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MosaikManifest mosaikManifest = (MosaikManifest) o;
    return Objects.equals(this.appDescription, mosaikManifest.appDescription) &&
        Objects.equals(this.appName, mosaikManifest.appName) &&
        Objects.equals(this.appVersion, mosaikManifest.appVersion) &&
        Objects.equals(this.cacheLifetime, mosaikManifest.cacheLifetime) &&
        Objects.equals(this.errorReportUrl, mosaikManifest.errorReportUrl) &&
        Objects.equals(this.iconUrl, mosaikManifest.iconUrl) &&
        Objects.equals(this.notificationCheckUrl, mosaikManifest.notificationCheckUrl) &&
        Objects.equals(this.onAppLoadedAction, mosaikManifest.onAppLoadedAction) &&
        Objects.equals(this.onResizeAction, mosaikManifest.onResizeAction) &&
        Objects.equals(this.targetCanvasDimension, mosaikManifest.targetCanvasDimension) &&
        Objects.equals(this.targetMosaikVersion, mosaikManifest.targetMosaikVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appDescription, appName, appVersion, cacheLifetime, errorReportUrl, iconUrl, notificationCheckUrl, onAppLoadedAction, onResizeAction, targetCanvasDimension, targetMosaikVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MosaikManifest {\n");
    sb.append("    appDescription: ").append(toIndentedString(appDescription)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    cacheLifetime: ").append(toIndentedString(cacheLifetime)).append("\n");
    sb.append("    errorReportUrl: ").append(toIndentedString(errorReportUrl)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    notificationCheckUrl: ").append(toIndentedString(notificationCheckUrl)).append("\n");
    sb.append("    onAppLoadedAction: ").append(toIndentedString(onAppLoadedAction)).append("\n");
    sb.append("    onResizeAction: ").append(toIndentedString(onResizeAction)).append("\n");
    sb.append("    targetCanvasDimension: ").append(toIndentedString(targetCanvasDimension)).append("\n");
    sb.append("    targetMosaikVersion: ").append(toIndentedString(targetMosaikVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appDescription");
    openapiFields.add("appName");
    openapiFields.add("appVersion");
    openapiFields.add("cacheLifetime");
    openapiFields.add("errorReportUrl");
    openapiFields.add("iconUrl");
    openapiFields.add("notificationCheckUrl");
    openapiFields.add("onAppLoadedAction");
    openapiFields.add("onResizeAction");
    openapiFields.add("targetCanvasDimension");
    openapiFields.add("targetMosaikVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MosaikManifest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MosaikManifest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MosaikManifest is not found in the empty JSON string", MosaikManifest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MosaikManifest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MosaikManifest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appDescription") != null && !jsonObj.get("appDescription").isJsonNull()) && !jsonObj.get("appDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDescription").toString()));
      }
      if ((jsonObj.get("appName") != null && !jsonObj.get("appName").isJsonNull()) && !jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if ((jsonObj.get("errorReportUrl") != null && !jsonObj.get("errorReportUrl").isJsonNull()) && !jsonObj.get("errorReportUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorReportUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorReportUrl").toString()));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      if ((jsonObj.get("notificationCheckUrl") != null && !jsonObj.get("notificationCheckUrl").isJsonNull()) && !jsonObj.get("notificationCheckUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationCheckUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationCheckUrl").toString()));
      }
      if ((jsonObj.get("onAppLoadedAction") != null && !jsonObj.get("onAppLoadedAction").isJsonNull()) && !jsonObj.get("onAppLoadedAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onAppLoadedAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onAppLoadedAction").toString()));
      }
      if ((jsonObj.get("onResizeAction") != null && !jsonObj.get("onResizeAction").isJsonNull()) && !jsonObj.get("onResizeAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onResizeAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onResizeAction").toString()));
      }
      if ((jsonObj.get("targetCanvasDimension") != null && !jsonObj.get("targetCanvasDimension").isJsonNull()) && !jsonObj.get("targetCanvasDimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetCanvasDimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetCanvasDimension").toString()));
      }
      // validate the optional field `targetCanvasDimension`
      if (jsonObj.get("targetCanvasDimension") != null && !jsonObj.get("targetCanvasDimension").isJsonNull()) {
        TargetCanvasDimensionEnum.validateJsonElement(jsonObj.get("targetCanvasDimension"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MosaikManifest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MosaikManifest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MosaikManifest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MosaikManifest.class));

       return (TypeAdapter<T>) new TypeAdapter<MosaikManifest>() {
           @Override
           public void write(JsonWriter out, MosaikManifest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MosaikManifest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MosaikManifest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MosaikManifest
   * @throws IOException if the JSON string is invalid with respect to MosaikManifest
   */
  public static MosaikManifest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MosaikManifest.class);
  }

  /**
   * Convert an instance of MosaikManifest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

