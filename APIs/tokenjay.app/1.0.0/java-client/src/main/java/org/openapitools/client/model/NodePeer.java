/*
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NodePeer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:59.917164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodePeer {
  public static final String SERIALIZED_NAME_BLOCK_HEIGHT = "blockHeight";
  @SerializedName(SERIALIZED_NAME_BLOCK_HEIGHT)
  private Long blockHeight;

  public static final String SERIALIZED_NAME_BLOCKCHAIN_API = "blockchainApi";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN_API)
  private Boolean blockchainApi;

  public static final String SERIALIZED_NAME_HEADER_HEIGHT = "headerHeight";
  @SerializedName(SERIALIZED_NAME_HEADER_HEIGHT)
  private Long headerHeight;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private Long lastSeen;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_REST_API = "openRestApi";
  @SerializedName(SERIALIZED_NAME_OPEN_REST_API)
  private Boolean openRestApi;

  public static final String SERIALIZED_NAME_RESPONSE_TIME = "responseTime";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME)
  private Long responseTime;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public NodePeer() {
  }

  public NodePeer blockHeight(Long blockHeight) {
    this.blockHeight = blockHeight;
    return this;
  }

  /**
   * Get blockHeight
   * @return blockHeight
   */
  @javax.annotation.Nonnull
  public Long getBlockHeight() {
    return blockHeight;
  }

  public void setBlockHeight(Long blockHeight) {
    this.blockHeight = blockHeight;
  }


  public NodePeer blockchainApi(Boolean blockchainApi) {
    this.blockchainApi = blockchainApi;
    return this;
  }

  /**
   * Get blockchainApi
   * @return blockchainApi
   */
  @javax.annotation.Nonnull
  public Boolean getBlockchainApi() {
    return blockchainApi;
  }

  public void setBlockchainApi(Boolean blockchainApi) {
    this.blockchainApi = blockchainApi;
  }


  public NodePeer headerHeight(Long headerHeight) {
    this.headerHeight = headerHeight;
    return this;
  }

  /**
   * Get headerHeight
   * @return headerHeight
   */
  @javax.annotation.Nonnull
  public Long getHeaderHeight() {
    return headerHeight;
  }

  public void setHeaderHeight(Long headerHeight) {
    this.headerHeight = headerHeight;
  }


  public NodePeer lastSeen(Long lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

  /**
   * Get lastSeen
   * @return lastSeen
   */
  @javax.annotation.Nonnull
  public Long getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(Long lastSeen) {
    this.lastSeen = lastSeen;
  }


  public NodePeer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NodePeer openRestApi(Boolean openRestApi) {
    this.openRestApi = openRestApi;
    return this;
  }

  /**
   * Get openRestApi
   * @return openRestApi
   */
  @javax.annotation.Nonnull
  public Boolean getOpenRestApi() {
    return openRestApi;
  }

  public void setOpenRestApi(Boolean openRestApi) {
    this.openRestApi = openRestApi;
  }


  public NodePeer responseTime(Long responseTime) {
    this.responseTime = responseTime;
    return this;
  }

  /**
   * Get responseTime
   * @return responseTime
   */
  @javax.annotation.Nonnull
  public Long getResponseTime() {
    return responseTime;
  }

  public void setResponseTime(Long responseTime) {
    this.responseTime = responseTime;
  }


  public NodePeer url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodePeer nodePeer = (NodePeer) o;
    return Objects.equals(this.blockHeight, nodePeer.blockHeight) &&
        Objects.equals(this.blockchainApi, nodePeer.blockchainApi) &&
        Objects.equals(this.headerHeight, nodePeer.headerHeight) &&
        Objects.equals(this.lastSeen, nodePeer.lastSeen) &&
        Objects.equals(this.name, nodePeer.name) &&
        Objects.equals(this.openRestApi, nodePeer.openRestApi) &&
        Objects.equals(this.responseTime, nodePeer.responseTime) &&
        Objects.equals(this.url, nodePeer.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockHeight, blockchainApi, headerHeight, lastSeen, name, openRestApi, responseTime, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodePeer {\n");
    sb.append("    blockHeight: ").append(toIndentedString(blockHeight)).append("\n");
    sb.append("    blockchainApi: ").append(toIndentedString(blockchainApi)).append("\n");
    sb.append("    headerHeight: ").append(toIndentedString(headerHeight)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openRestApi: ").append(toIndentedString(openRestApi)).append("\n");
    sb.append("    responseTime: ").append(toIndentedString(responseTime)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockHeight");
    openapiFields.add("blockchainApi");
    openapiFields.add("headerHeight");
    openapiFields.add("lastSeen");
    openapiFields.add("name");
    openapiFields.add("openRestApi");
    openapiFields.add("responseTime");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blockHeight");
    openapiRequiredFields.add("blockchainApi");
    openapiRequiredFields.add("headerHeight");
    openapiRequiredFields.add("lastSeen");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("openRestApi");
    openapiRequiredFields.add("responseTime");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodePeer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodePeer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodePeer is not found in the empty JSON string", NodePeer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodePeer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodePeer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodePeer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodePeer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodePeer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodePeer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodePeer.class));

       return (TypeAdapter<T>) new TypeAdapter<NodePeer>() {
           @Override
           public void write(JsonWriter out, NodePeer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodePeer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodePeer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodePeer
   * @throws IOException if the JSON string is invalid with respect to NodePeer
   */
  public static NodePeer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodePeer.class);
  }

  /**
   * Convert an instance of NodePeer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

