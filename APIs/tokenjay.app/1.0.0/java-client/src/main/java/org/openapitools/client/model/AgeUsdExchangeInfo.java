/*
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AgeUsdExchangeInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:59.917164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgeUsdExchangeInfo {
  public static final String SERIALIZED_NAME_BANK_FEE_AMOUNT = "bankFeeAmount";
  @SerializedName(SERIALIZED_NAME_BANK_FEE_AMOUNT)
  private Long bankFeeAmount;

  public static final String SERIALIZED_NAME_BANK_FEE_DESCRIPTION = "bankFeeDescription";
  @SerializedName(SERIALIZED_NAME_BANK_FEE_DESCRIPTION)
  private String bankFeeDescription;

  public static final String SERIALIZED_NAME_ERG_AMOUNT = "ergAmount";
  @SerializedName(SERIALIZED_NAME_ERG_AMOUNT)
  private Long ergAmount;

  public static final String SERIALIZED_NAME_ERG_AMOUNT_DESCRIPTION = "ergAmountDescription";
  @SerializedName(SERIALIZED_NAME_ERG_AMOUNT_DESCRIPTION)
  private String ergAmountDescription;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private Long exchangeRate;

  public static final String SERIALIZED_NAME_JAY_FEE_AMOUNT = "jayFeeAmount";
  @SerializedName(SERIALIZED_NAME_JAY_FEE_AMOUNT)
  private Long jayFeeAmount;

  public static final String SERIALIZED_NAME_JAY_FEE_DESCRIPTION = "jayFeeDescription";
  @SerializedName(SERIALIZED_NAME_JAY_FEE_DESCRIPTION)
  private String jayFeeDescription;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Long totalAmount;

  public AgeUsdExchangeInfo() {
  }

  public AgeUsdExchangeInfo bankFeeAmount(Long bankFeeAmount) {
    this.bankFeeAmount = bankFeeAmount;
    return this;
  }

  /**
   * Get bankFeeAmount
   * @return bankFeeAmount
   */
  @javax.annotation.Nonnull
  public Long getBankFeeAmount() {
    return bankFeeAmount;
  }

  public void setBankFeeAmount(Long bankFeeAmount) {
    this.bankFeeAmount = bankFeeAmount;
  }


  public AgeUsdExchangeInfo bankFeeDescription(String bankFeeDescription) {
    this.bankFeeDescription = bankFeeDescription;
    return this;
  }

  /**
   * Get bankFeeDescription
   * @return bankFeeDescription
   */
  @javax.annotation.Nonnull
  public String getBankFeeDescription() {
    return bankFeeDescription;
  }

  public void setBankFeeDescription(String bankFeeDescription) {
    this.bankFeeDescription = bankFeeDescription;
  }


  public AgeUsdExchangeInfo ergAmount(Long ergAmount) {
    this.ergAmount = ergAmount;
    return this;
  }

  /**
   * Get ergAmount
   * @return ergAmount
   */
  @javax.annotation.Nonnull
  public Long getErgAmount() {
    return ergAmount;
  }

  public void setErgAmount(Long ergAmount) {
    this.ergAmount = ergAmount;
  }


  public AgeUsdExchangeInfo ergAmountDescription(String ergAmountDescription) {
    this.ergAmountDescription = ergAmountDescription;
    return this;
  }

  /**
   * Get ergAmountDescription
   * @return ergAmountDescription
   */
  @javax.annotation.Nonnull
  public String getErgAmountDescription() {
    return ergAmountDescription;
  }

  public void setErgAmountDescription(String ergAmountDescription) {
    this.ergAmountDescription = ergAmountDescription;
  }


  public AgeUsdExchangeInfo exchangeRate(Long exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

  /**
   * Get exchangeRate
   * @return exchangeRate
   */
  @javax.annotation.Nonnull
  public Long getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(Long exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public AgeUsdExchangeInfo jayFeeAmount(Long jayFeeAmount) {
    this.jayFeeAmount = jayFeeAmount;
    return this;
  }

  /**
   * Get jayFeeAmount
   * @return jayFeeAmount
   */
  @javax.annotation.Nonnull
  public Long getJayFeeAmount() {
    return jayFeeAmount;
  }

  public void setJayFeeAmount(Long jayFeeAmount) {
    this.jayFeeAmount = jayFeeAmount;
  }


  public AgeUsdExchangeInfo jayFeeDescription(String jayFeeDescription) {
    this.jayFeeDescription = jayFeeDescription;
    return this;
  }

  /**
   * Get jayFeeDescription
   * @return jayFeeDescription
   */
  @javax.annotation.Nonnull
  public String getJayFeeDescription() {
    return jayFeeDescription;
  }

  public void setJayFeeDescription(String jayFeeDescription) {
    this.jayFeeDescription = jayFeeDescription;
  }


  public AgeUsdExchangeInfo totalAmount(Long totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Get totalAmount
   * @return totalAmount
   */
  @javax.annotation.Nonnull
  public Long getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Long totalAmount) {
    this.totalAmount = totalAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgeUsdExchangeInfo ageUsdExchangeInfo = (AgeUsdExchangeInfo) o;
    return Objects.equals(this.bankFeeAmount, ageUsdExchangeInfo.bankFeeAmount) &&
        Objects.equals(this.bankFeeDescription, ageUsdExchangeInfo.bankFeeDescription) &&
        Objects.equals(this.ergAmount, ageUsdExchangeInfo.ergAmount) &&
        Objects.equals(this.ergAmountDescription, ageUsdExchangeInfo.ergAmountDescription) &&
        Objects.equals(this.exchangeRate, ageUsdExchangeInfo.exchangeRate) &&
        Objects.equals(this.jayFeeAmount, ageUsdExchangeInfo.jayFeeAmount) &&
        Objects.equals(this.jayFeeDescription, ageUsdExchangeInfo.jayFeeDescription) &&
        Objects.equals(this.totalAmount, ageUsdExchangeInfo.totalAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankFeeAmount, bankFeeDescription, ergAmount, ergAmountDescription, exchangeRate, jayFeeAmount, jayFeeDescription, totalAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgeUsdExchangeInfo {\n");
    sb.append("    bankFeeAmount: ").append(toIndentedString(bankFeeAmount)).append("\n");
    sb.append("    bankFeeDescription: ").append(toIndentedString(bankFeeDescription)).append("\n");
    sb.append("    ergAmount: ").append(toIndentedString(ergAmount)).append("\n");
    sb.append("    ergAmountDescription: ").append(toIndentedString(ergAmountDescription)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    jayFeeAmount: ").append(toIndentedString(jayFeeAmount)).append("\n");
    sb.append("    jayFeeDescription: ").append(toIndentedString(jayFeeDescription)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bankFeeAmount");
    openapiFields.add("bankFeeDescription");
    openapiFields.add("ergAmount");
    openapiFields.add("ergAmountDescription");
    openapiFields.add("exchangeRate");
    openapiFields.add("jayFeeAmount");
    openapiFields.add("jayFeeDescription");
    openapiFields.add("totalAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bankFeeAmount");
    openapiRequiredFields.add("bankFeeDescription");
    openapiRequiredFields.add("ergAmount");
    openapiRequiredFields.add("ergAmountDescription");
    openapiRequiredFields.add("exchangeRate");
    openapiRequiredFields.add("jayFeeAmount");
    openapiRequiredFields.add("jayFeeDescription");
    openapiRequiredFields.add("totalAmount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgeUsdExchangeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgeUsdExchangeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgeUsdExchangeInfo is not found in the empty JSON string", AgeUsdExchangeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgeUsdExchangeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgeUsdExchangeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AgeUsdExchangeInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bankFeeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankFeeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankFeeDescription").toString()));
      }
      if (!jsonObj.get("ergAmountDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ergAmountDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ergAmountDescription").toString()));
      }
      if (!jsonObj.get("jayFeeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jayFeeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jayFeeDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgeUsdExchangeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgeUsdExchangeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgeUsdExchangeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgeUsdExchangeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AgeUsdExchangeInfo>() {
           @Override
           public void write(JsonWriter out, AgeUsdExchangeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgeUsdExchangeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgeUsdExchangeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgeUsdExchangeInfo
   * @throws IOException if the JSON string is invalid with respect to AgeUsdExchangeInfo
   */
  public static AgeUsdExchangeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgeUsdExchangeInfo.class);
  }

  /**
   * Convert an instance of AgeUsdExchangeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

