/*
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ErgoPayResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:59.917164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErgoPayResponse {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<String> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * Gets or Sets messageSeverity
   */
  @JsonAdapter(MessageSeverityEnum.Adapter.class)
  public enum MessageSeverityEnum {
    NONE("NONE"),
    
    INFORMATION("INFORMATION"),
    
    WARNING("WARNING"),
    
    ERROR("ERROR");

    private String value;

    MessageSeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageSeverityEnum fromValue(String value) {
      for (MessageSeverityEnum b : MessageSeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageSeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageSeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageSeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageSeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageSeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_SEVERITY = "messageSeverity";
  @SerializedName(SERIALIZED_NAME_MESSAGE_SEVERITY)
  private MessageSeverityEnum messageSeverity;

  public static final String SERIALIZED_NAME_REDUCED_TX = "reducedTx";
  @SerializedName(SERIALIZED_NAME_REDUCED_TX)
  private String reducedTx;

  public static final String SERIALIZED_NAME_REDUCED_TX_LIST = "reducedTxList";
  @SerializedName(SERIALIZED_NAME_REDUCED_TX_LIST)
  private List<String> reducedTxList = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLY_TO = "replyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public ErgoPayResponse() {
  }

  public ErgoPayResponse address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public ErgoPayResponse addresses(List<String> addresses) {
    this.addresses = addresses;
    return this;
  }

  public ErgoPayResponse addAddressesItem(String addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Get addresses
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<String> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<String> addresses) {
    this.addresses = addresses;
  }


  public ErgoPayResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ErgoPayResponse messageSeverity(MessageSeverityEnum messageSeverity) {
    this.messageSeverity = messageSeverity;
    return this;
  }

  /**
   * Get messageSeverity
   * @return messageSeverity
   */
  @javax.annotation.Nullable
  public MessageSeverityEnum getMessageSeverity() {
    return messageSeverity;
  }

  public void setMessageSeverity(MessageSeverityEnum messageSeverity) {
    this.messageSeverity = messageSeverity;
  }


  public ErgoPayResponse reducedTx(String reducedTx) {
    this.reducedTx = reducedTx;
    return this;
  }

  /**
   * Get reducedTx
   * @return reducedTx
   */
  @javax.annotation.Nullable
  public String getReducedTx() {
    return reducedTx;
  }

  public void setReducedTx(String reducedTx) {
    this.reducedTx = reducedTx;
  }


  public ErgoPayResponse reducedTxList(List<String> reducedTxList) {
    this.reducedTxList = reducedTxList;
    return this;
  }

  public ErgoPayResponse addReducedTxListItem(String reducedTxListItem) {
    if (this.reducedTxList == null) {
      this.reducedTxList = new ArrayList<>();
    }
    this.reducedTxList.add(reducedTxListItem);
    return this;
  }

  /**
   * Get reducedTxList
   * @return reducedTxList
   */
  @javax.annotation.Nullable
  public List<String> getReducedTxList() {
    return reducedTxList;
  }

  public void setReducedTxList(List<String> reducedTxList) {
    this.reducedTxList = reducedTxList;
  }


  public ErgoPayResponse replyTo(String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * Get replyTo
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(String replyTo) {
    this.replyTo = replyTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErgoPayResponse ergoPayResponse = (ErgoPayResponse) o;
    return Objects.equals(this.address, ergoPayResponse.address) &&
        Objects.equals(this.addresses, ergoPayResponse.addresses) &&
        Objects.equals(this.message, ergoPayResponse.message) &&
        Objects.equals(this.messageSeverity, ergoPayResponse.messageSeverity) &&
        Objects.equals(this.reducedTx, ergoPayResponse.reducedTx) &&
        Objects.equals(this.reducedTxList, ergoPayResponse.reducedTxList) &&
        Objects.equals(this.replyTo, ergoPayResponse.replyTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, addresses, message, messageSeverity, reducedTx, reducedTxList, replyTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErgoPayResponse {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    messageSeverity: ").append(toIndentedString(messageSeverity)).append("\n");
    sb.append("    reducedTx: ").append(toIndentedString(reducedTx)).append("\n");
    sb.append("    reducedTxList: ").append(toIndentedString(reducedTxList)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("addresses");
    openapiFields.add("message");
    openapiFields.add("messageSeverity");
    openapiFields.add("reducedTx");
    openapiFields.add("reducedTxList");
    openapiFields.add("replyTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErgoPayResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErgoPayResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErgoPayResponse is not found in the empty JSON string", ErgoPayResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErgoPayResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErgoPayResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull() && !jsonObj.get("addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("messageSeverity") != null && !jsonObj.get("messageSeverity").isJsonNull()) && !jsonObj.get("messageSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageSeverity").toString()));
      }
      // validate the optional field `messageSeverity`
      if (jsonObj.get("messageSeverity") != null && !jsonObj.get("messageSeverity").isJsonNull()) {
        MessageSeverityEnum.validateJsonElement(jsonObj.get("messageSeverity"));
      }
      if ((jsonObj.get("reducedTx") != null && !jsonObj.get("reducedTx").isJsonNull()) && !jsonObj.get("reducedTx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reducedTx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reducedTx").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reducedTxList") != null && !jsonObj.get("reducedTxList").isJsonNull() && !jsonObj.get("reducedTxList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reducedTxList` to be an array in the JSON string but got `%s`", jsonObj.get("reducedTxList").toString()));
      }
      if ((jsonObj.get("replyTo") != null && !jsonObj.get("replyTo").isJsonNull()) && !jsonObj.get("replyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyTo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErgoPayResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErgoPayResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErgoPayResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErgoPayResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ErgoPayResponse>() {
           @Override
           public void write(JsonWriter out, ErgoPayResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErgoPayResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErgoPayResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErgoPayResponse
   * @throws IOException if the JSON string is invalid with respect to ErgoPayResponse
   */
  public static ErgoPayResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErgoPayResponse.class);
  }

  /**
   * Convert an instance of ErgoPayResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

