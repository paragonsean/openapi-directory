/*
 * TokenJay API services
 * Please see usage policies on tokenjay.app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreatePaymentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:59.917164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequest {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NANO_ERG = "nanoErg";
  @SerializedName(SERIALIZED_NAME_NANO_ERG)
  private Long nanoErg;

  public static final String SERIALIZED_NAME_RECEIVER_ADDRESS = "receiverAddress";
  @SerializedName(SERIALIZED_NAME_RECEIVER_ADDRESS)
  private String receiverAddress;

  public static final String SERIALIZED_NAME_SENDER_ADDRESS = "senderAddress";
  @SerializedName(SERIALIZED_NAME_SENDER_ADDRESS)
  private String senderAddress;

  public static final String SERIALIZED_NAME_TOKEN_ID = "tokenId";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_TOKEN_RAW_AMOUNT = "tokenRawAmount";
  @SerializedName(SERIALIZED_NAME_TOKEN_RAW_AMOUNT)
  private Long tokenRawAmount;

  public CreatePaymentRequest() {
  }

  public CreatePaymentRequest message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public CreatePaymentRequest nanoErg(Long nanoErg) {
    this.nanoErg = nanoErg;
    return this;
  }

  /**
   * Get nanoErg
   * @return nanoErg
   */
  @javax.annotation.Nonnull
  public Long getNanoErg() {
    return nanoErg;
  }

  public void setNanoErg(Long nanoErg) {
    this.nanoErg = nanoErg;
  }


  public CreatePaymentRequest receiverAddress(String receiverAddress) {
    this.receiverAddress = receiverAddress;
    return this;
  }

  /**
   * Get receiverAddress
   * @return receiverAddress
   */
  @javax.annotation.Nonnull
  public String getReceiverAddress() {
    return receiverAddress;
  }

  public void setReceiverAddress(String receiverAddress) {
    this.receiverAddress = receiverAddress;
  }


  public CreatePaymentRequest senderAddress(String senderAddress) {
    this.senderAddress = senderAddress;
    return this;
  }

  /**
   * Get senderAddress
   * @return senderAddress
   */
  @javax.annotation.Nullable
  public String getSenderAddress() {
    return senderAddress;
  }

  public void setSenderAddress(String senderAddress) {
    this.senderAddress = senderAddress;
  }


  public CreatePaymentRequest tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

  /**
   * Get tokenId
   * @return tokenId
   */
  @javax.annotation.Nullable
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public CreatePaymentRequest tokenRawAmount(Long tokenRawAmount) {
    this.tokenRawAmount = tokenRawAmount;
    return this;
  }

  /**
   * Get tokenRawAmount
   * @return tokenRawAmount
   */
  @javax.annotation.Nullable
  public Long getTokenRawAmount() {
    return tokenRawAmount;
  }

  public void setTokenRawAmount(Long tokenRawAmount) {
    this.tokenRawAmount = tokenRawAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequest createPaymentRequest = (CreatePaymentRequest) o;
    return Objects.equals(this.message, createPaymentRequest.message) &&
        Objects.equals(this.nanoErg, createPaymentRequest.nanoErg) &&
        Objects.equals(this.receiverAddress, createPaymentRequest.receiverAddress) &&
        Objects.equals(this.senderAddress, createPaymentRequest.senderAddress) &&
        Objects.equals(this.tokenId, createPaymentRequest.tokenId) &&
        Objects.equals(this.tokenRawAmount, createPaymentRequest.tokenRawAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, nanoErg, receiverAddress, senderAddress, tokenId, tokenRawAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequest {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    nanoErg: ").append(toIndentedString(nanoErg)).append("\n");
    sb.append("    receiverAddress: ").append(toIndentedString(receiverAddress)).append("\n");
    sb.append("    senderAddress: ").append(toIndentedString(senderAddress)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    tokenRawAmount: ").append(toIndentedString(tokenRawAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("nanoErg");
    openapiFields.add("receiverAddress");
    openapiFields.add("senderAddress");
    openapiFields.add("tokenId");
    openapiFields.add("tokenRawAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nanoErg");
    openapiRequiredFields.add("receiverAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePaymentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePaymentRequest is not found in the empty JSON string", CreatePaymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePaymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePaymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePaymentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("receiverAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverAddress").toString()));
      }
      if ((jsonObj.get("senderAddress") != null && !jsonObj.get("senderAddress").isJsonNull()) && !jsonObj.get("senderAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderAddress").toString()));
      }
      if ((jsonObj.get("tokenId") != null && !jsonObj.get("tokenId").isJsonNull()) && !jsonObj.get("tokenId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePaymentRequest>() {
           @Override
           public void write(JsonWriter out, CreatePaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePaymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePaymentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePaymentRequest
   * @throws IOException if the JSON string is invalid with respect to CreatePaymentRequest
   */
  public static CreatePaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePaymentRequest.class);
  }

  /**
   * Convert an instance of CreatePaymentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

