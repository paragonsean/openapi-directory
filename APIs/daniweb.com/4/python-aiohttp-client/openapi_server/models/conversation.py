# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_first_message import ConversationFirstMessage
from openapi_server.models.message import Message
from openapi_server.models.user import User
from openapi_server import util


class Conversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_message: ConversationFirstMessage=None, id: float=None, latest_message: Message=None, user_a: User=None, user_b: User=None):
        """Conversation - a model defined in OpenAPI

        :param first_message: The first_message of this Conversation.
        :param id: The id of this Conversation.
        :param latest_message: The latest_message of this Conversation.
        :param user_a: The user_a of this Conversation.
        :param user_b: The user_b of this Conversation.
        """
        self.openapi_types = {
            'first_message': ConversationFirstMessage,
            'id': float,
            'latest_message': Message,
            'user_a': User,
            'user_b': User
        }

        self.attribute_map = {
            'first_message': 'first_message',
            'id': 'id',
            'latest_message': 'latest_message',
            'user_a': 'user_a',
            'user_b': 'user_b'
        }

        self._first_message = first_message
        self._id = id
        self._latest_message = latest_message
        self._user_a = user_a
        self._user_b = user_b

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation of this Conversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_message(self):
        """Gets the first_message of this Conversation.


        :return: The first_message of this Conversation.
        :rtype: ConversationFirstMessage
        """
        return self._first_message

    @first_message.setter
    def first_message(self, first_message):
        """Sets the first_message of this Conversation.


        :param first_message: The first_message of this Conversation.
        :type first_message: ConversationFirstMessage
        """

        self._first_message = first_message

    @property
    def id(self):
        """Gets the id of this Conversation.


        :return: The id of this Conversation.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conversation.


        :param id: The id of this Conversation.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def latest_message(self):
        """Gets the latest_message of this Conversation.


        :return: The latest_message of this Conversation.
        :rtype: Message
        """
        return self._latest_message

    @latest_message.setter
    def latest_message(self, latest_message):
        """Sets the latest_message of this Conversation.


        :param latest_message: The latest_message of this Conversation.
        :type latest_message: Message
        """

        self._latest_message = latest_message

    @property
    def user_a(self):
        """Gets the user_a of this Conversation.


        :return: The user_a of this Conversation.
        :rtype: User
        """
        return self._user_a

    @user_a.setter
    def user_a(self, user_a):
        """Sets the user_a of this Conversation.


        :param user_a: The user_a of this Conversation.
        :type user_a: User
        """

        self._user_a = user_a

    @property
    def user_b(self):
        """Gets the user_b of this Conversation.


        :return: The user_b of this Conversation.
        :rtype: User
        """
        return self._user_b

    @user_b.setter
    def user_b(self, user_b):
        """Sets the user_b of this Conversation.


        :param user_b: The user_b of this Conversation.
        :type user_b: User
        """

        self._user_b = user_b
