# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MemberPersonal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about_me: str=None, birthday: str=None, interests: str=None, pc_specs: str=None):
        """MemberPersonal - a model defined in OpenAPI

        :param about_me: The about_me of this MemberPersonal.
        :param birthday: The birthday of this MemberPersonal.
        :param interests: The interests of this MemberPersonal.
        :param pc_specs: The pc_specs of this MemberPersonal.
        """
        self.openapi_types = {
            'about_me': str,
            'birthday': str,
            'interests': str,
            'pc_specs': str
        }

        self.attribute_map = {
            'about_me': 'about_me',
            'birthday': 'birthday',
            'interests': 'interests',
            'pc_specs': 'pc_specs'
        }

        self._about_me = about_me
        self._birthday = birthday
        self._interests = interests
        self._pc_specs = pc_specs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberPersonal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Member_personal of this MemberPersonal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about_me(self):
        """Gets the about_me of this MemberPersonal.


        :return: The about_me of this MemberPersonal.
        :rtype: str
        """
        return self._about_me

    @about_me.setter
    def about_me(self, about_me):
        """Sets the about_me of this MemberPersonal.


        :param about_me: The about_me of this MemberPersonal.
        :type about_me: str
        """

        self._about_me = about_me

    @property
    def birthday(self):
        """Gets the birthday of this MemberPersonal.


        :return: The birthday of this MemberPersonal.
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this MemberPersonal.


        :param birthday: The birthday of this MemberPersonal.
        :type birthday: str
        """

        self._birthday = birthday

    @property
    def interests(self):
        """Gets the interests of this MemberPersonal.


        :return: The interests of this MemberPersonal.
        :rtype: str
        """
        return self._interests

    @interests.setter
    def interests(self, interests):
        """Sets the interests of this MemberPersonal.


        :param interests: The interests of this MemberPersonal.
        :type interests: str
        """

        self._interests = interests

    @property
    def pc_specs(self):
        """Gets the pc_specs of this MemberPersonal.


        :return: The pc_specs of this MemberPersonal.
        :rtype: str
        """
        return self._pc_specs

    @pc_specs.setter
    def pc_specs(self, pc_specs):
        """Sets the pc_specs of this MemberPersonal.


        :param pc_specs: The pc_specs of this MemberPersonal.
        :type pc_specs: str
        """

        self._pc_specs = pc_specs
