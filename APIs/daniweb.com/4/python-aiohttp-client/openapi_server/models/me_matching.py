# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeMatching(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, goals: List[str]=None, interest_tags: List[str]=None, location_importance: str=None, targeted_industry: str=None):
        """MeMatching - a model defined in OpenAPI

        :param goals: The goals of this MeMatching.
        :param interest_tags: The interest_tags of this MeMatching.
        :param location_importance: The location_importance of this MeMatching.
        :param targeted_industry: The targeted_industry of this MeMatching.
        """
        self.openapi_types = {
            'goals': List[str],
            'interest_tags': List[str],
            'location_importance': str,
            'targeted_industry': str
        }

        self.attribute_map = {
            'goals': 'goals',
            'interest_tags': 'interest_tags',
            'location_importance': 'location_importance',
            'targeted_industry': 'targeted_industry'
        }

        self._goals = goals
        self._interest_tags = interest_tags
        self._location_importance = location_importance
        self._targeted_industry = targeted_industry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeMatching':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Me_matching of this MeMatching.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def goals(self):
        """Gets the goals of this MeMatching.


        :return: The goals of this MeMatching.
        :rtype: List[str]
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this MeMatching.


        :param goals: The goals of this MeMatching.
        :type goals: List[str]
        """

        self._goals = goals

    @property
    def interest_tags(self):
        """Gets the interest_tags of this MeMatching.


        :return: The interest_tags of this MeMatching.
        :rtype: List[str]
        """
        return self._interest_tags

    @interest_tags.setter
    def interest_tags(self, interest_tags):
        """Sets the interest_tags of this MeMatching.


        :param interest_tags: The interest_tags of this MeMatching.
        :type interest_tags: List[str]
        """

        self._interest_tags = interest_tags

    @property
    def location_importance(self):
        """Gets the location_importance of this MeMatching.


        :return: The location_importance of this MeMatching.
        :rtype: str
        """
        return self._location_importance

    @location_importance.setter
    def location_importance(self, location_importance):
        """Sets the location_importance of this MeMatching.


        :param location_importance: The location_importance of this MeMatching.
        :type location_importance: str
        """

        self._location_importance = location_importance

    @property
    def targeted_industry(self):
        """Gets the targeted_industry of this MeMatching.


        :return: The targeted_industry of this MeMatching.
        :rtype: str
        """
        return self._targeted_industry

    @targeted_industry.setter
    def targeted_industry(self, targeted_industry):
        """Sets the targeted_industry of this MeMatching.


        :param targeted_industry: The targeted_industry of this MeMatching.
        :type targeted_industry: str
        """

        self._targeted_industry = targeted_industry
