# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server.models.group_message_last_seen import GroupMessageLastSeen
from openapi_server.models.group_message_moderated import GroupMessageModerated
from openapi_server.models.group_message_text import GroupMessageText
from openapi_server.models.user import User
from openapi_server import util


class GroupMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: User=None, group: Group=None, id: float=None, last_seen: GroupMessageLastSeen=None, moderated: GroupMessageModerated=None, text: GroupMessageText=None, timestamp: datetime=None):
        """GroupMessage - a model defined in OpenAPI

        :param author: The author of this GroupMessage.
        :param group: The group of this GroupMessage.
        :param id: The id of this GroupMessage.
        :param last_seen: The last_seen of this GroupMessage.
        :param moderated: The moderated of this GroupMessage.
        :param text: The text of this GroupMessage.
        :param timestamp: The timestamp of this GroupMessage.
        """
        self.openapi_types = {
            'author': User,
            'group': Group,
            'id': float,
            'last_seen': GroupMessageLastSeen,
            'moderated': GroupMessageModerated,
            'text': GroupMessageText,
            'timestamp': datetime
        }

        self.attribute_map = {
            'author': 'author',
            'group': 'group',
            'id': 'id',
            'last_seen': 'last_seen',
            'moderated': 'moderated',
            'text': 'text',
            'timestamp': 'timestamp'
        }

        self._author = author
        self._group = group
        self._id = id
        self._last_seen = last_seen
        self._moderated = moderated
        self._text = text
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group_message of this GroupMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this GroupMessage.


        :return: The author of this GroupMessage.
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GroupMessage.


        :param author: The author of this GroupMessage.
        :type author: User
        """

        self._author = author

    @property
    def group(self):
        """Gets the group of this GroupMessage.


        :return: The group of this GroupMessage.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GroupMessage.


        :param group: The group of this GroupMessage.
        :type group: Group
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this GroupMessage.


        :return: The id of this GroupMessage.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupMessage.


        :param id: The id of this GroupMessage.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_seen(self):
        """Gets the last_seen of this GroupMessage.


        :return: The last_seen of this GroupMessage.
        :rtype: GroupMessageLastSeen
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this GroupMessage.


        :param last_seen: The last_seen of this GroupMessage.
        :type last_seen: GroupMessageLastSeen
        """

        self._last_seen = last_seen

    @property
    def moderated(self):
        """Gets the moderated of this GroupMessage.


        :return: The moderated of this GroupMessage.
        :rtype: GroupMessageModerated
        """
        return self._moderated

    @moderated.setter
    def moderated(self, moderated):
        """Sets the moderated of this GroupMessage.


        :param moderated: The moderated of this GroupMessage.
        :type moderated: GroupMessageModerated
        """

        self._moderated = moderated

    @property
    def text(self):
        """Gets the text of this GroupMessage.


        :return: The text of this GroupMessage.
        :rtype: GroupMessageText
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GroupMessage.


        :param text: The text of this GroupMessage.
        :type text: GroupMessageText
        """

        self._text = text

    @property
    def timestamp(self):
        """Gets the timestamp of this GroupMessage.


        :return: The timestamp of this GroupMessage.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GroupMessage.


        :param timestamp: The timestamp of this GroupMessage.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
