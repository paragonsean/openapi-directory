# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, introduction: str=None, last_name: str=None):
        """MeProfile - a model defined in OpenAPI

        :param first_name: The first_name of this MeProfile.
        :param introduction: The introduction of this MeProfile.
        :param last_name: The last_name of this MeProfile.
        """
        self.openapi_types = {
            'first_name': str,
            'introduction': str,
            'last_name': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'introduction': 'introduction',
            'last_name': 'last_name'
        }

        self._first_name = first_name
        self._introduction = introduction
        self._last_name = last_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Me_profile of this MeProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this MeProfile.


        :return: The first_name of this MeProfile.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MeProfile.


        :param first_name: The first_name of this MeProfile.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def introduction(self):
        """Gets the introduction of this MeProfile.


        :return: The introduction of this MeProfile.
        :rtype: str
        """
        return self._introduction

    @introduction.setter
    def introduction(self, introduction):
        """Sets the introduction of this MeProfile.


        :param introduction: The introduction of this MeProfile.
        :type introduction: str
        """

        self._introduction = introduction

    @property
    def last_name(self):
        """Gets the last_name of this MeProfile.


        :return: The last_name of this MeProfile.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MeProfile.


        :param last_name: The last_name of this MeProfile.
        :type last_name: str
        """

        self._last_name = last_name
