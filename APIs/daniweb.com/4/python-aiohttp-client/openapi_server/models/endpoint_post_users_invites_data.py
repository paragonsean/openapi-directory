# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_post_users_invites_data_discovered import EndpointPostUsersInvitesDataDiscovered
from openapi_server.models.endpoint_post_users_invites_data_emailed import EndpointPostUsersInvitesDataEmailed
from openapi_server.models.endpoint_post_users_invites_data_existing import EndpointPostUsersInvitesDataExisting
from openapi_server import util


class EndpointPostUsersInvitesData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discovered: EndpointPostUsersInvitesDataDiscovered=None, emailed: EndpointPostUsersInvitesDataEmailed=None, existing: EndpointPostUsersInvitesDataExisting=None, invalid: EndpointPostUsersInvitesDataEmailed=None):
        """EndpointPostUsersInvitesData - a model defined in OpenAPI

        :param discovered: The discovered of this EndpointPostUsersInvitesData.
        :param emailed: The emailed of this EndpointPostUsersInvitesData.
        :param existing: The existing of this EndpointPostUsersInvitesData.
        :param invalid: The invalid of this EndpointPostUsersInvitesData.
        """
        self.openapi_types = {
            'discovered': EndpointPostUsersInvitesDataDiscovered,
            'emailed': EndpointPostUsersInvitesDataEmailed,
            'existing': EndpointPostUsersInvitesDataExisting,
            'invalid': EndpointPostUsersInvitesDataEmailed
        }

        self.attribute_map = {
            'discovered': 'discovered',
            'emailed': 'emailed',
            'existing': 'existing',
            'invalid': 'invalid'
        }

        self._discovered = discovered
        self._emailed = emailed
        self._existing = existing
        self._invalid = invalid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointPostUsersInvitesData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint_post_users_invites_data of this EndpointPostUsersInvitesData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discovered(self):
        """Gets the discovered of this EndpointPostUsersInvitesData.


        :return: The discovered of this EndpointPostUsersInvitesData.
        :rtype: EndpointPostUsersInvitesDataDiscovered
        """
        return self._discovered

    @discovered.setter
    def discovered(self, discovered):
        """Sets the discovered of this EndpointPostUsersInvitesData.


        :param discovered: The discovered of this EndpointPostUsersInvitesData.
        :type discovered: EndpointPostUsersInvitesDataDiscovered
        """

        self._discovered = discovered

    @property
    def emailed(self):
        """Gets the emailed of this EndpointPostUsersInvitesData.


        :return: The emailed of this EndpointPostUsersInvitesData.
        :rtype: EndpointPostUsersInvitesDataEmailed
        """
        return self._emailed

    @emailed.setter
    def emailed(self, emailed):
        """Sets the emailed of this EndpointPostUsersInvitesData.


        :param emailed: The emailed of this EndpointPostUsersInvitesData.
        :type emailed: EndpointPostUsersInvitesDataEmailed
        """

        self._emailed = emailed

    @property
    def existing(self):
        """Gets the existing of this EndpointPostUsersInvitesData.


        :return: The existing of this EndpointPostUsersInvitesData.
        :rtype: EndpointPostUsersInvitesDataExisting
        """
        return self._existing

    @existing.setter
    def existing(self, existing):
        """Sets the existing of this EndpointPostUsersInvitesData.


        :param existing: The existing of this EndpointPostUsersInvitesData.
        :type existing: EndpointPostUsersInvitesDataExisting
        """

        self._existing = existing

    @property
    def invalid(self):
        """Gets the invalid of this EndpointPostUsersInvitesData.


        :return: The invalid of this EndpointPostUsersInvitesData.
        :rtype: EndpointPostUsersInvitesDataEmailed
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this EndpointPostUsersInvitesData.


        :param invalid: The invalid of this EndpointPostUsersInvitesData.
        :type invalid: EndpointPostUsersInvitesDataEmailed
        """

        self._invalid = invalid
