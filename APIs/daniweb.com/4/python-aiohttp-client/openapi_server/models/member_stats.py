# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MemberStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answered_count: float=None, endorsements_count: float=None, posts_count: float=None, reputation_count: float=None):
        """MemberStats - a model defined in OpenAPI

        :param answered_count: The answered_count of this MemberStats.
        :param endorsements_count: The endorsements_count of this MemberStats.
        :param posts_count: The posts_count of this MemberStats.
        :param reputation_count: The reputation_count of this MemberStats.
        """
        self.openapi_types = {
            'answered_count': float,
            'endorsements_count': float,
            'posts_count': float,
            'reputation_count': float
        }

        self.attribute_map = {
            'answered_count': 'answered_count',
            'endorsements_count': 'endorsements_count',
            'posts_count': 'posts_count',
            'reputation_count': 'reputation_count'
        }

        self._answered_count = answered_count
        self._endorsements_count = endorsements_count
        self._posts_count = posts_count
        self._reputation_count = reputation_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Member_stats of this MemberStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answered_count(self):
        """Gets the answered_count of this MemberStats.


        :return: The answered_count of this MemberStats.
        :rtype: float
        """
        return self._answered_count

    @answered_count.setter
    def answered_count(self, answered_count):
        """Sets the answered_count of this MemberStats.


        :param answered_count: The answered_count of this MemberStats.
        :type answered_count: float
        """

        self._answered_count = answered_count

    @property
    def endorsements_count(self):
        """Gets the endorsements_count of this MemberStats.


        :return: The endorsements_count of this MemberStats.
        :rtype: float
        """
        return self._endorsements_count

    @endorsements_count.setter
    def endorsements_count(self, endorsements_count):
        """Sets the endorsements_count of this MemberStats.


        :param endorsements_count: The endorsements_count of this MemberStats.
        :type endorsements_count: float
        """

        self._endorsements_count = endorsements_count

    @property
    def posts_count(self):
        """Gets the posts_count of this MemberStats.


        :return: The posts_count of this MemberStats.
        :rtype: float
        """
        return self._posts_count

    @posts_count.setter
    def posts_count(self, posts_count):
        """Sets the posts_count of this MemberStats.


        :param posts_count: The posts_count of this MemberStats.
        :type posts_count: float
        """

        self._posts_count = posts_count

    @property
    def reputation_count(self):
        """Gets the reputation_count of this MemberStats.


        :return: The reputation_count of this MemberStats.
        :rtype: float
        """
        return self._reputation_count

    @reputation_count.setter
    def reputation_count(self, reputation_count):
        """Sets the reputation_count of this MemberStats.


        :param reputation_count: The reputation_count of this MemberStats.
        :type reputation_count: float
        """

        self._reputation_count = reputation_count
