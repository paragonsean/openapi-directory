# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.me_business_card import MeBusinessCard
from openapi_server.models.me_location import MeLocation
from openapi_server.models.me_matching import MeMatching
from openapi_server.models.me_profile import MeProfile
from openapi_server.models.me_settings import MeSettings
from openapi_server.models.me_usage import MeUsage
from openapi_server.models.member import Member
from openapi_server import util


class Me(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_card: MeBusinessCard=None, community_persona: Member=None, id: float=None, location: MeLocation=None, matching: MeMatching=None, profile: MeProfile=None, settings: MeSettings=None, usage: MeUsage=None):
        """Me - a model defined in OpenAPI

        :param business_card: The business_card of this Me.
        :param community_persona: The community_persona of this Me.
        :param id: The id of this Me.
        :param location: The location of this Me.
        :param matching: The matching of this Me.
        :param profile: The profile of this Me.
        :param settings: The settings of this Me.
        :param usage: The usage of this Me.
        """
        self.openapi_types = {
            'business_card': MeBusinessCard,
            'community_persona': Member,
            'id': float,
            'location': MeLocation,
            'matching': MeMatching,
            'profile': MeProfile,
            'settings': MeSettings,
            'usage': MeUsage
        }

        self.attribute_map = {
            'business_card': 'business_card',
            'community_persona': 'community_persona',
            'id': 'id',
            'location': 'location',
            'matching': 'matching',
            'profile': 'profile',
            'settings': 'settings',
            'usage': 'usage'
        }

        self._business_card = business_card
        self._community_persona = community_persona
        self._id = id
        self._location = location
        self._matching = matching
        self._profile = profile
        self._settings = settings
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Me':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Me of this Me.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_card(self):
        """Gets the business_card of this Me.


        :return: The business_card of this Me.
        :rtype: MeBusinessCard
        """
        return self._business_card

    @business_card.setter
    def business_card(self, business_card):
        """Sets the business_card of this Me.


        :param business_card: The business_card of this Me.
        :type business_card: MeBusinessCard
        """

        self._business_card = business_card

    @property
    def community_persona(self):
        """Gets the community_persona of this Me.


        :return: The community_persona of this Me.
        :rtype: Member
        """
        return self._community_persona

    @community_persona.setter
    def community_persona(self, community_persona):
        """Sets the community_persona of this Me.


        :param community_persona: The community_persona of this Me.
        :type community_persona: Member
        """

        self._community_persona = community_persona

    @property
    def id(self):
        """Gets the id of this Me.


        :return: The id of this Me.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Me.


        :param id: The id of this Me.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this Me.


        :return: The location of this Me.
        :rtype: MeLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Me.


        :param location: The location of this Me.
        :type location: MeLocation
        """

        self._location = location

    @property
    def matching(self):
        """Gets the matching of this Me.


        :return: The matching of this Me.
        :rtype: MeMatching
        """
        return self._matching

    @matching.setter
    def matching(self, matching):
        """Sets the matching of this Me.


        :param matching: The matching of this Me.
        :type matching: MeMatching
        """

        self._matching = matching

    @property
    def profile(self):
        """Gets the profile of this Me.


        :return: The profile of this Me.
        :rtype: MeProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Me.


        :param profile: The profile of this Me.
        :type profile: MeProfile
        """

        self._profile = profile

    @property
    def settings(self):
        """Gets the settings of this Me.


        :return: The settings of this Me.
        :rtype: MeSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Me.


        :param settings: The settings of this Me.
        :type settings: MeSettings
        """

        self._settings = settings

    @property
    def usage(self):
        """Gets the usage of this Me.


        :return: The usage of this Me.
        :rtype: MeUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Me.


        :param usage: The usage of this Me.
        :type usage: MeUsage
        """

        self._usage = usage
