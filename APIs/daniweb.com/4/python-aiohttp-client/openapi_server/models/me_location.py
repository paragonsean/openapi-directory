# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: float=None, ip_address: str=None, latitude: str=None, longitude: str=None, region: str=None):
        """MeLocation - a model defined in OpenAPI

        :param city: The city of this MeLocation.
        :param country: The country of this MeLocation.
        :param ip_address: The ip_address of this MeLocation.
        :param latitude: The latitude of this MeLocation.
        :param longitude: The longitude of this MeLocation.
        :param region: The region of this MeLocation.
        """
        self.openapi_types = {
            'city': str,
            'country': float,
            'ip_address': str,
            'latitude': str,
            'longitude': str,
            'region': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'ip_address': 'ip_address',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'region': 'region'
        }

        self._city = city
        self._country = country
        self._ip_address = ip_address
        self._latitude = latitude
        self._longitude = longitude
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Me_location of this MeLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this MeLocation.


        :return: The city of this MeLocation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MeLocation.


        :param city: The city of this MeLocation.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this MeLocation.


        :return: The country of this MeLocation.
        :rtype: float
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this MeLocation.


        :param country: The country of this MeLocation.
        :type country: float
        """

        self._country = country

    @property
    def ip_address(self):
        """Gets the ip_address of this MeLocation.


        :return: The ip_address of this MeLocation.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this MeLocation.


        :param ip_address: The ip_address of this MeLocation.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def latitude(self):
        """Gets the latitude of this MeLocation.


        :return: The latitude of this MeLocation.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this MeLocation.


        :param latitude: The latitude of this MeLocation.
        :type latitude: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this MeLocation.


        :return: The longitude of this MeLocation.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this MeLocation.


        :param longitude: The longitude of this MeLocation.
        :type longitude: str
        """

        self._longitude = longitude

    @property
    def region(self):
        """Gets the region of this MeLocation.


        :return: The region of this MeLocation.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this MeLocation.


        :param region: The region of this MeLocation.
        :type region: str
        """

        self._region = region
