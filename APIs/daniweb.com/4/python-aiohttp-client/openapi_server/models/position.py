# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app import App
from openapi_server.models.position_organization import PositionOrganization
from openapi_server.models.position_role import PositionRole
from openapi_server.models.user import User
from openapi_server import util


class Position(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: App=None, category: str=None, id: float=None, organization: PositionOrganization=None, role: PositionRole=None, user: User=None):
        """Position - a model defined in OpenAPI

        :param app: The app of this Position.
        :param category: The category of this Position.
        :param id: The id of this Position.
        :param organization: The organization of this Position.
        :param role: The role of this Position.
        :param user: The user of this Position.
        """
        self.openapi_types = {
            'app': App,
            'category': str,
            'id': float,
            'organization': PositionOrganization,
            'role': PositionRole,
            'user': User
        }

        self.attribute_map = {
            'app': 'app',
            'category': 'category',
            'id': 'id',
            'organization': 'organization',
            'role': 'role',
            'user': 'user'
        }

        self._app = app
        self._category = category
        self._id = id
        self._organization = organization
        self._role = role
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Position':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Position of this Position.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this Position.


        :return: The app of this Position.
        :rtype: App
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this Position.


        :param app: The app of this Position.
        :type app: App
        """

        self._app = app

    @property
    def category(self):
        """Gets the category of this Position.


        :return: The category of this Position.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Position.


        :param category: The category of this Position.
        :type category: str
        """

        self._category = category

    @property
    def id(self):
        """Gets the id of this Position.


        :return: The id of this Position.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Position.


        :param id: The id of this Position.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def organization(self):
        """Gets the organization of this Position.


        :return: The organization of this Position.
        :rtype: PositionOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Position.


        :param organization: The organization of this Position.
        :type organization: PositionOrganization
        """

        self._organization = organization

    @property
    def role(self):
        """Gets the role of this Position.


        :return: The role of this Position.
        :rtype: PositionRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Position.


        :param role: The role of this Position.
        :type role: PositionRole
        """

        self._role = role

    @property
    def user(self):
        """Gets the user of this Position.


        :return: The user of this Position.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Position.


        :param user: The user of this Position.
        :type user: User
        """

        self._user = user
