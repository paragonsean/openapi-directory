# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_post_markdown_data import EndpointPostMarkdownData
from openapi_server.models.member_identity import MemberIdentity
from openapi_server.models.member_location import MemberLocation
from openapi_server.models.member_personal import MemberPersonal
from openapi_server.models.member_stats import MemberStats
from openapi_server import util


class Member(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: float=None, identity: MemberIdentity=None, location: MemberLocation=None, personal: MemberPersonal=None, signature: EndpointPostMarkdownData=None, stats: MemberStats=None):
        """Member - a model defined in OpenAPI

        :param id: The id of this Member.
        :param identity: The identity of this Member.
        :param location: The location of this Member.
        :param personal: The personal of this Member.
        :param signature: The signature of this Member.
        :param stats: The stats of this Member.
        """
        self.openapi_types = {
            'id': float,
            'identity': MemberIdentity,
            'location': MemberLocation,
            'personal': MemberPersonal,
            'signature': EndpointPostMarkdownData,
            'stats': MemberStats
        }

        self.attribute_map = {
            'id': 'id',
            'identity': 'identity',
            'location': 'location',
            'personal': 'personal',
            'signature': 'signature',
            'stats': 'stats'
        }

        self._id = id
        self._identity = identity
        self._location = location
        self._personal = personal
        self._signature = signature
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Member':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Member of this Member.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Member.


        :return: The id of this Member.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Member.


        :param id: The id of this Member.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identity(self):
        """Gets the identity of this Member.


        :return: The identity of this Member.
        :rtype: MemberIdentity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this Member.


        :param identity: The identity of this Member.
        :type identity: MemberIdentity
        """

        self._identity = identity

    @property
    def location(self):
        """Gets the location of this Member.


        :return: The location of this Member.
        :rtype: MemberLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Member.


        :param location: The location of this Member.
        :type location: MemberLocation
        """

        self._location = location

    @property
    def personal(self):
        """Gets the personal of this Member.


        :return: The personal of this Member.
        :rtype: MemberPersonal
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this Member.


        :param personal: The personal of this Member.
        :type personal: MemberPersonal
        """

        self._personal = personal

    @property
    def signature(self):
        """Gets the signature of this Member.


        :return: The signature of this Member.
        :rtype: EndpointPostMarkdownData
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this Member.


        :param signature: The signature of this Member.
        :type signature: EndpointPostMarkdownData
        """

        self._signature = signature

    @property
    def stats(self):
        """Gets the stats of this Member.


        :return: The stats of this Member.
        :rtype: MemberStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Member.


        :param stats: The stats of this Member.
        :type stats: MemberStats
        """

        self._stats = stats
