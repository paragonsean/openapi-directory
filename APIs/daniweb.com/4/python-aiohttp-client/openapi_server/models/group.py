# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_first_message import GroupFirstMessage
from openapi_server.models.group_message import GroupMessage
from openapi_server.models.group_properties import GroupProperties
from openapi_server.models.user import User
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_message: GroupFirstMessage=None, id: float=None, latest_message: GroupMessage=None, member_count: float=None, owner: User=None, properties: GroupProperties=None):
        """Group - a model defined in OpenAPI

        :param first_message: The first_message of this Group.
        :param id: The id of this Group.
        :param latest_message: The latest_message of this Group.
        :param member_count: The member_count of this Group.
        :param owner: The owner of this Group.
        :param properties: The properties of this Group.
        """
        self.openapi_types = {
            'first_message': GroupFirstMessage,
            'id': float,
            'latest_message': GroupMessage,
            'member_count': float,
            'owner': User,
            'properties': GroupProperties
        }

        self.attribute_map = {
            'first_message': 'first_message',
            'id': 'id',
            'latest_message': 'latest_message',
            'member_count': 'member_count',
            'owner': 'owner',
            'properties': 'properties'
        }

        self._first_message = first_message
        self._id = id
        self._latest_message = latest_message
        self._member_count = member_count
        self._owner = owner
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_message(self):
        """Gets the first_message of this Group.


        :return: The first_message of this Group.
        :rtype: GroupFirstMessage
        """
        return self._first_message

    @first_message.setter
    def first_message(self, first_message):
        """Sets the first_message of this Group.


        :param first_message: The first_message of this Group.
        :type first_message: GroupFirstMessage
        """

        self._first_message = first_message

    @property
    def id(self):
        """Gets the id of this Group.


        :return: The id of this Group.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def latest_message(self):
        """Gets the latest_message of this Group.


        :return: The latest_message of this Group.
        :rtype: GroupMessage
        """
        return self._latest_message

    @latest_message.setter
    def latest_message(self, latest_message):
        """Sets the latest_message of this Group.


        :param latest_message: The latest_message of this Group.
        :type latest_message: GroupMessage
        """

        self._latest_message = latest_message

    @property
    def member_count(self):
        """Gets the member_count of this Group.


        :return: The member_count of this Group.
        :rtype: float
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this Group.


        :param member_count: The member_count of this Group.
        :type member_count: float
        """

        self._member_count = member_count

    @property
    def owner(self):
        """Gets the owner of this Group.


        :return: The owner of this Group.
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Group.


        :param owner: The owner of this Group.
        :type owner: User
        """

        self._owner = owner

    @property
    def properties(self):
        """Gets the properties of this Group.


        :return: The properties of this Group.
        :rtype: GroupProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Group.


        :param properties: The properties of this Group.
        :type properties: GroupProperties
        """

        self._properties = properties
