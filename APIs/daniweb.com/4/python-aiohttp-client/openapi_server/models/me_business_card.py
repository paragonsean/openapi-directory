# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.me_business_card_website import MeBusinessCardWebsite
from openapi_server import util


class MeBusinessCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_name: str=None, company_size: str=None, headline: str=None, industry: str=None, interest_tags: List[str]=None, job_position: str=None, summary: str=None, website: MeBusinessCardWebsite=None):
        """MeBusinessCard - a model defined in OpenAPI

        :param company_name: The company_name of this MeBusinessCard.
        :param company_size: The company_size of this MeBusinessCard.
        :param headline: The headline of this MeBusinessCard.
        :param industry: The industry of this MeBusinessCard.
        :param interest_tags: The interest_tags of this MeBusinessCard.
        :param job_position: The job_position of this MeBusinessCard.
        :param summary: The summary of this MeBusinessCard.
        :param website: The website of this MeBusinessCard.
        """
        self.openapi_types = {
            'company_name': str,
            'company_size': str,
            'headline': str,
            'industry': str,
            'interest_tags': List[str],
            'job_position': str,
            'summary': str,
            'website': MeBusinessCardWebsite
        }

        self.attribute_map = {
            'company_name': 'company_name',
            'company_size': 'company_size',
            'headline': 'headline',
            'industry': 'industry',
            'interest_tags': 'interest_tags',
            'job_position': 'job_position',
            'summary': 'summary',
            'website': 'website'
        }

        self._company_name = company_name
        self._company_size = company_size
        self._headline = headline
        self._industry = industry
        self._interest_tags = interest_tags
        self._job_position = job_position
        self._summary = summary
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeBusinessCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Me_business_card of this MeBusinessCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_name(self):
        """Gets the company_name of this MeBusinessCard.


        :return: The company_name of this MeBusinessCard.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this MeBusinessCard.


        :param company_name: The company_name of this MeBusinessCard.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def company_size(self):
        """Gets the company_size of this MeBusinessCard.


        :return: The company_size of this MeBusinessCard.
        :rtype: str
        """
        return self._company_size

    @company_size.setter
    def company_size(self, company_size):
        """Sets the company_size of this MeBusinessCard.


        :param company_size: The company_size of this MeBusinessCard.
        :type company_size: str
        """

        self._company_size = company_size

    @property
    def headline(self):
        """Gets the headline of this MeBusinessCard.


        :return: The headline of this MeBusinessCard.
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this MeBusinessCard.


        :param headline: The headline of this MeBusinessCard.
        :type headline: str
        """

        self._headline = headline

    @property
    def industry(self):
        """Gets the industry of this MeBusinessCard.


        :return: The industry of this MeBusinessCard.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this MeBusinessCard.


        :param industry: The industry of this MeBusinessCard.
        :type industry: str
        """

        self._industry = industry

    @property
    def interest_tags(self):
        """Gets the interest_tags of this MeBusinessCard.


        :return: The interest_tags of this MeBusinessCard.
        :rtype: List[str]
        """
        return self._interest_tags

    @interest_tags.setter
    def interest_tags(self, interest_tags):
        """Sets the interest_tags of this MeBusinessCard.


        :param interest_tags: The interest_tags of this MeBusinessCard.
        :type interest_tags: List[str]
        """

        self._interest_tags = interest_tags

    @property
    def job_position(self):
        """Gets the job_position of this MeBusinessCard.


        :return: The job_position of this MeBusinessCard.
        :rtype: str
        """
        return self._job_position

    @job_position.setter
    def job_position(self, job_position):
        """Sets the job_position of this MeBusinessCard.


        :param job_position: The job_position of this MeBusinessCard.
        :type job_position: str
        """

        self._job_position = job_position

    @property
    def summary(self):
        """Gets the summary of this MeBusinessCard.


        :return: The summary of this MeBusinessCard.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this MeBusinessCard.


        :param summary: The summary of this MeBusinessCard.
        :type summary: str
        """

        self._summary = summary

    @property
    def website(self):
        """Gets the website of this MeBusinessCard.


        :return: The website of this MeBusinessCard.
        :rtype: MeBusinessCardWebsite
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this MeBusinessCard.


        :param website: The website of this MeBusinessCard.
        :type website: MeBusinessCardWebsite
        """

        self._website = website
