# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app import App
from openapi_server.models.group_message_data_content import GroupMessageDataContent
from openapi_server.models.group_message_data_settings import GroupMessageDataSettings
from openapi_server.models.group_message_data_status import GroupMessageDataStatus
from openapi_server.models.message import Message
from openapi_server.models.user import User
from openapi_server import util


class MessageData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: App=None, content: GroupMessageDataContent=None, id: float=None, message: Message=None, owner: User=None, settings: GroupMessageDataSettings=None, status: GroupMessageDataStatus=None):
        """MessageData - a model defined in OpenAPI

        :param app: The app of this MessageData.
        :param content: The content of this MessageData.
        :param id: The id of this MessageData.
        :param message: The message of this MessageData.
        :param owner: The owner of this MessageData.
        :param settings: The settings of this MessageData.
        :param status: The status of this MessageData.
        """
        self.openapi_types = {
            'app': App,
            'content': GroupMessageDataContent,
            'id': float,
            'message': Message,
            'owner': User,
            'settings': GroupMessageDataSettings,
            'status': GroupMessageDataStatus
        }

        self.attribute_map = {
            'app': 'app',
            'content': 'content',
            'id': 'id',
            'message': 'message',
            'owner': 'owner',
            'settings': 'settings',
            'status': 'status'
        }

        self._app = app
        self._content = content
        self._id = id
        self._message = message
        self._owner = owner
        self._settings = settings
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message_data of this MessageData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this MessageData.


        :return: The app of this MessageData.
        :rtype: App
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this MessageData.


        :param app: The app of this MessageData.
        :type app: App
        """

        self._app = app

    @property
    def content(self):
        """Gets the content of this MessageData.


        :return: The content of this MessageData.
        :rtype: GroupMessageDataContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this MessageData.


        :param content: The content of this MessageData.
        :type content: GroupMessageDataContent
        """

        self._content = content

    @property
    def id(self):
        """Gets the id of this MessageData.


        :return: The id of this MessageData.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageData.


        :param id: The id of this MessageData.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def message(self):
        """Gets the message of this MessageData.


        :return: The message of this MessageData.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessageData.


        :param message: The message of this MessageData.
        :type message: Message
        """

        self._message = message

    @property
    def owner(self):
        """Gets the owner of this MessageData.


        :return: The owner of this MessageData.
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this MessageData.


        :param owner: The owner of this MessageData.
        :type owner: User
        """

        self._owner = owner

    @property
    def settings(self):
        """Gets the settings of this MessageData.


        :return: The settings of this MessageData.
        :rtype: GroupMessageDataSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this MessageData.


        :param settings: The settings of this MessageData.
        :type settings: GroupMessageDataSettings
        """

        self._settings = settings

    @property
    def status(self):
        """Gets the status of this MessageData.


        :return: The status of this MessageData.
        :rtype: GroupMessageDataStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MessageData.


        :param status: The status of this MessageData.
        :type status: GroupMessageDataStatus
        """

        self._status = status
