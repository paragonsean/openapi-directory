# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PositionOrganization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, industry: str=None, name: str=None, size: str=None, ticker: str=None, type: str=None, url: str=None):
        """PositionOrganization - a model defined in OpenAPI

        :param industry: The industry of this PositionOrganization.
        :param name: The name of this PositionOrganization.
        :param size: The size of this PositionOrganization.
        :param ticker: The ticker of this PositionOrganization.
        :param type: The type of this PositionOrganization.
        :param url: The url of this PositionOrganization.
        """
        self.openapi_types = {
            'industry': str,
            'name': str,
            'size': str,
            'ticker': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'industry': 'industry',
            'name': 'name',
            'size': 'size',
            'ticker': 'ticker',
            'type': 'type',
            'url': 'url'
        }

        self._industry = industry
        self._name = name
        self._size = size
        self._ticker = ticker
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PositionOrganization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Position_organization of this PositionOrganization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def industry(self):
        """Gets the industry of this PositionOrganization.


        :return: The industry of this PositionOrganization.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this PositionOrganization.


        :param industry: The industry of this PositionOrganization.
        :type industry: str
        """

        self._industry = industry

    @property
    def name(self):
        """Gets the name of this PositionOrganization.


        :return: The name of this PositionOrganization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PositionOrganization.


        :param name: The name of this PositionOrganization.
        :type name: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this PositionOrganization.


        :return: The size of this PositionOrganization.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PositionOrganization.


        :param size: The size of this PositionOrganization.
        :type size: str
        """

        self._size = size

    @property
    def ticker(self):
        """Gets the ticker of this PositionOrganization.


        :return: The ticker of this PositionOrganization.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this PositionOrganization.


        :param ticker: The ticker of this PositionOrganization.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def type(self):
        """Gets the type of this PositionOrganization.


        :return: The type of this PositionOrganization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PositionOrganization.


        :param type: The type of this PositionOrganization.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this PositionOrganization.


        :return: The url of this PositionOrganization.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PositionOrganization.


        :param url: The url of this PositionOrganization.
        :type url: str
        """

        self._url = url
