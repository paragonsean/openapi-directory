/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeBusinessCard from './MeBusinessCard';
import MeLocation from './MeLocation';
import MeMatching from './MeMatching';
import MeProfile from './MeProfile';
import MeSettings from './MeSettings';
import MeUsage from './MeUsage';
import Member from './Member';

/**
 * The Me model module.
 * @module model/Me
 * @version 4
 */
class Me {
    /**
     * Constructs a new <code>Me</code>.
     * @alias module:model/Me
     * @param id {Number} 
     */
    constructor(id) { 
        
        Me.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Me</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Me} obj Optional instance to populate.
     * @return {module:model/Me} The populated <code>Me</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Me();

            if (data.hasOwnProperty('business_card')) {
                obj['business_card'] = MeBusinessCard.constructFromObject(data['business_card']);
            }
            if (data.hasOwnProperty('community_persona')) {
                obj['community_persona'] = Member.constructFromObject(data['community_persona']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = MeLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('matching')) {
                obj['matching'] = MeMatching.constructFromObject(data['matching']);
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = MeProfile.constructFromObject(data['profile']);
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = MeSettings.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = MeUsage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Me</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Me</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Me.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `business_card`
        if (data['business_card']) { // data not null
          MeBusinessCard.validateJSON(data['business_card']);
        }
        // validate the optional field `community_persona`
        if (data['community_persona']) { // data not null
          Member.validateJSON(data['community_persona']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          MeLocation.validateJSON(data['location']);
        }
        // validate the optional field `matching`
        if (data['matching']) { // data not null
          MeMatching.validateJSON(data['matching']);
        }
        // validate the optional field `profile`
        if (data['profile']) { // data not null
          MeProfile.validateJSON(data['profile']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          MeSettings.validateJSON(data['settings']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          MeUsage.validateJSON(data['usage']);
        }

        return true;
    }


}

Me.RequiredProperties = ["id"];

/**
 * @member {module:model/MeBusinessCard} business_card
 */
Me.prototype['business_card'] = undefined;

/**
 * @member {module:model/Member} community_persona
 */
Me.prototype['community_persona'] = undefined;

/**
 * @member {Number} id
 */
Me.prototype['id'] = undefined;

/**
 * @member {module:model/MeLocation} location
 */
Me.prototype['location'] = undefined;

/**
 * @member {module:model/MeMatching} matching
 */
Me.prototype['matching'] = undefined;

/**
 * @member {module:model/MeProfile} profile
 */
Me.prototype['profile'] = undefined;

/**
 * @member {module:model/MeSettings} settings
 */
Me.prototype['settings'] = undefined;

/**
 * @member {module:model/MeUsage} usage
 */
Me.prototype['usage'] = undefined;






export default Me;

