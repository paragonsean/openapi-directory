/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EndpointPostMarkdownData from './EndpointPostMarkdownData';
import MemberIdentity from './MemberIdentity';
import MemberLocation from './MemberLocation';
import MemberPersonal from './MemberPersonal';
import MemberStats from './MemberStats';

/**
 * The Member model module.
 * @module model/Member
 * @version 4
 */
class Member {
    /**
     * Constructs a new <code>Member</code>.
     * @alias module:model/Member
     * @param id {Number} 
     */
    constructor(id) { 
        
        Member.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Member</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Member} obj Optional instance to populate.
     * @return {module:model/Member} The populated <code>Member</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Member();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identity')) {
                obj['identity'] = MemberIdentity.constructFromObject(data['identity']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = MemberLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('personal')) {
                obj['personal'] = MemberPersonal.constructFromObject(data['personal']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = EndpointPostMarkdownData.constructFromObject(data['signature']);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = MemberStats.constructFromObject(data['stats']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Member</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Member</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Member.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `identity`
        if (data['identity']) { // data not null
          MemberIdentity.validateJSON(data['identity']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          MemberLocation.validateJSON(data['location']);
        }
        // validate the optional field `personal`
        if (data['personal']) { // data not null
          MemberPersonal.validateJSON(data['personal']);
        }
        // validate the optional field `signature`
        if (data['signature']) { // data not null
          EndpointPostMarkdownData.validateJSON(data['signature']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          MemberStats.validateJSON(data['stats']);
        }

        return true;
    }


}

Member.RequiredProperties = ["id"];

/**
 * @member {Number} id
 */
Member.prototype['id'] = undefined;

/**
 * @member {module:model/MemberIdentity} identity
 */
Member.prototype['identity'] = undefined;

/**
 * @member {module:model/MemberLocation} location
 */
Member.prototype['location'] = undefined;

/**
 * @member {module:model/MemberPersonal} personal
 */
Member.prototype['personal'] = undefined;

/**
 * @member {module:model/EndpointPostMarkdownData} signature
 */
Member.prototype['signature'] = undefined;

/**
 * @member {module:model/MemberStats} stats
 */
Member.prototype['stats'] = undefined;






export default Member;

