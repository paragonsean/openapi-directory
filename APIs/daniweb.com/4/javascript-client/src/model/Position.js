/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import App from './App';
import PositionOrganization from './PositionOrganization';
import PositionRole from './PositionRole';
import User from './User';

/**
 * The Position model module.
 * @module model/Position
 * @version 4
 */
class Position {
    /**
     * Constructs a new <code>Position</code>.
     * @alias module:model/Position
     * @param id {Number} 
     */
    constructor(id) { 
        
        Position.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Position</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Position} obj Optional instance to populate.
     * @return {module:model/Position} The populated <code>Position</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Position();

            if (data.hasOwnProperty('app')) {
                obj['app'] = App.constructFromObject(data['app']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = PositionOrganization.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = PositionRole.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Position</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Position</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Position.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `app`
        if (data['app']) { // data not null
          App.validateJSON(data['app']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          PositionOrganization.validateJSON(data['organization']);
        }
        // validate the optional field `role`
        if (data['role']) { // data not null
          PositionRole.validateJSON(data['role']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Position.RequiredProperties = ["id"];

/**
 * @member {module:model/App} app
 */
Position.prototype['app'] = undefined;

/**
 * @member {String} category
 */
Position.prototype['category'] = undefined;

/**
 * @member {Number} id
 */
Position.prototype['id'] = undefined;

/**
 * @member {module:model/PositionOrganization} organization
 */
Position.prototype['organization'] = undefined;

/**
 * @member {module:model/PositionRole} role
 */
Position.prototype['role'] = undefined;

/**
 * @member {module:model/User} user
 */
Position.prototype['user'] = undefined;






export default Position;

