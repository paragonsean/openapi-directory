/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import App from './App';
import User from './User';
import WebhookEvent from './WebhookEvent';
import WebhookObject from './WebhookObject';

/**
 * The Webhook model module.
 * @module model/Webhook
 * @version 4
 */
class Webhook {
    /**
     * Constructs a new <code>Webhook</code>.
     * @alias module:model/Webhook
     * @param id {Number} 
     */
    constructor(id) { 
        
        Webhook.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Webhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Webhook} obj Optional instance to populate.
     * @return {module:model/Webhook} The populated <code>Webhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Webhook();

            if (data.hasOwnProperty('app')) {
                obj['app'] = App.constructFromObject(data['app']);
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = WebhookEvent.constructFromObject(data['event']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = WebhookObject.constructFromObject(data['object']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Webhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Webhook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Webhook.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `app`
        if (data['app']) { // data not null
          App.validateJSON(data['app']);
        }
        // validate the optional field `event`
        if (data['event']) { // data not null
          WebhookEvent.validateJSON(data['event']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `object`
        if (data['object']) { // data not null
          WebhookObject.validateJSON(data['object']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Webhook.RequiredProperties = ["id"];

/**
 * @member {module:model/App} app
 */
Webhook.prototype['app'] = undefined;

/**
 * @member {module:model/WebhookEvent} event
 */
Webhook.prototype['event'] = undefined;

/**
 * @member {Number} id
 */
Webhook.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Webhook.prototype['name'] = undefined;

/**
 * @member {module:model/WebhookObject} object
 */
Webhook.prototype['object'] = undefined;

/**
 * @member {String} uri
 */
Webhook.prototype['uri'] = undefined;

/**
 * @member {module:model/User} user
 */
Webhook.prototype['user'] = undefined;






export default Webhook;

