/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointDeleteWebhooksID from '../model/EndpointDeleteWebhooksID';
import EndpointGetWebhooks from '../model/EndpointGetWebhooks';
import EndpointPostWebhooks from '../model/EndpointPostWebhooks';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version 4
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webhooksGet operation.
     * @callback module:api/WebhooksApi~webhooksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetWebhooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a listing of all webhooks owned by the current user/bubble combination.
     * @param {module:api/WebhooksApi~webhooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetWebhooks}
     */
    webhooksGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetWebhooks;
      return this.apiClient.callApi(
        '/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksIDDelete operation.
     * @callback module:api/WebhooksApi~webhooksIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointDeleteWebhooksID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a webhook that was previously registered by the current user/bubble combination.
     * @param {Number} ID 
     * @param {module:api/WebhooksApi~webhooksIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointDeleteWebhooksID}
     */
    webhooksIDDelete(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling webhooksIDDelete");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointDeleteWebhooksID;
      return this.apiClient.callApi(
        '/webhooks/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksPost operation.
     * @callback module:api/WebhooksApi~webhooksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostWebhooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new webhook for the current user/bubble combination. Specify an object_id to only be notified on an event related to that specific Conversation ID, Group ID, or User ID. Your access token must have access to the user being tracked, user you are in the conversation with, or user who created the group. You must be connected with a user in order to keep track of their online status. Alternatively, do not specify an object_id to be notified on all events that are related to conversations you're in, groups you're a member of, or users you are in conversations with. You may only have one webhook for each object_id/event. The webhook URI must reside on your own server. Webhooks do not expire when the access token used to create them expires. However, they will temporarily cease to function if the user who created them deauthorizes access to the application (effectively no longer existing within the bubble), unless/until the user reauthorizes the application using OAuth.
     * @param {module:model/String} event 
     * @param {String} name 
     * @param {String} uri 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [bubbled = false)] 
     * @param {Number} [objectId] 
     * @param {module:api/WebhooksApi~webhooksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostWebhooks}
     */
    webhooksPost(event, name, uri, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling webhooksPost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webhooksPost");
      }
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling webhooksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'bubbled': opts['bubbled'],
        'event': event,
        'name': name,
        'object_id': opts['objectId'],
        'uri': uri
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostWebhooks;
      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
