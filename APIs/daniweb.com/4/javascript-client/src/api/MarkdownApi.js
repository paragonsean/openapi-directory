/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointGetMarkdownEmoticons from '../model/EndpointGetMarkdownEmoticons';
import EndpointPostMarkdown from '../model/EndpointPostMarkdown';

/**
* Markdown service.
* @module api/MarkdownApi
* @version 4
*/
export default class MarkdownApi {

    /**
    * Constructs a new MarkdownApi. 
    * @alias module:api/MarkdownApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the markdownEmoticonsGet operation.
     * @callback module:api/MarkdownApi~markdownEmoticonsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetMarkdownEmoticons} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MarkdownApi~markdownEmoticonsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetMarkdownEmoticons}
     */
    markdownEmoticonsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetMarkdownEmoticons;
      return this.apiClient.callApi(
        '/markdown/emoticons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markdownPost operation.
     * @callback module:api/MarkdownApi~markdownPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostMarkdown} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} textRaw 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [textEmoticons = false)] 
     * @param {module:api/MarkdownApi~markdownPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostMarkdown}
     */
    markdownPost(textRaw, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'textRaw' is set
      if (textRaw === undefined || textRaw === null) {
        throw new Error("Missing the required parameter 'textRaw' when calling markdownPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'text_emoticons': opts['textEmoticons'],
        'text_raw': textRaw
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostMarkdown;
      return this.apiClient.callApi(
        '/markdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
