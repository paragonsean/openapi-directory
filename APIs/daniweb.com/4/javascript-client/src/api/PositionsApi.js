/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointDeletePositionsID from '../model/EndpointDeletePositionsID';
import EndpointPatchPositionsID from '../model/EndpointPatchPositionsID';
import EndpointPostPositions from '../model/EndpointPostPositions';

/**
* Positions service.
* @module api/PositionsApi
* @version 4
*/
export default class PositionsApi {

    /**
    * Constructs a new PositionsApi. 
    * @alias module:api/PositionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the positionsIDDelete operation.
     * @callback module:api/PositionsApi~positionsIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointDeletePositionsID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an item from the OAuth'ed end user's Curriculum Vitae.
     * @param {Number} ID 
     * @param {module:api/PositionsApi~positionsIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointDeletePositionsID}
     */
    positionsIDDelete(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling positionsIDDelete");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointDeletePositionsID;
      return this.apiClient.callApi(
        '/positions/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the positionsIDPatch operation.
     * @callback module:api/PositionsApi~positionsIDPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPatchPositionsID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the OAuth'ed end user's Curriculum Vitae by modifying an existing position.
     * @param {Number} ID 
     * @param {module:model/String} category 
     * @param {String} organization 
     * @param {String} role 
     * @param {String} startDate 
     * @param {Object} opts Optional parameters
     * @param {String} [endDate] 
     * @param {module:model/String} [organizationSize] 
     * @param {module:model/String} [position] 
     * @param {String} [summary] 
     * @param {String} [url] 
     * @param {module:api/PositionsApi~positionsIDPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPatchPositionsID}
     */
    positionsIDPatch(ID, category, organization, role, startDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling positionsIDPatch");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling positionsIDPatch");
      }
      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling positionsIDPatch");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling positionsIDPatch");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling positionsIDPatch");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'category': category,
        'end_date': opts['endDate'],
        'organization': organization,
        'organization_size': opts['organizationSize'],
        'position': opts['position'],
        'role': role,
        'start_date': startDate,
        'summary': opts['summary'],
        'url': opts['url']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPatchPositionsID;
      return this.apiClient.callApi(
        '/positions/{ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the positionsPost operation.
     * @callback module:api/PositionsApi~positionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostPositions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the OAuth'ed end user's Curriculum Vitae by adding a position.
     * @param {module:model/String} category 
     * @param {String} organization 
     * @param {String} role 
     * @param {String} startDate 
     * @param {Object} opts Optional parameters
     * @param {String} [endDate] 
     * @param {module:model/String} [organizationSize] 
     * @param {module:model/String} [position] 
     * @param {String} [summary] 
     * @param {String} [url] 
     * @param {module:api/PositionsApi~positionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostPositions}
     */
    positionsPost(category, organization, role, startDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling positionsPost");
      }
      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling positionsPost");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling positionsPost");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling positionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'category': category,
        'end_date': opts['endDate'],
        'organization': organization,
        'organization_size': opts['organizationSize'],
        'position': opts['position'],
        'role': role,
        'start_date': startDate,
        'summary': opts['summary'],
        'url': opts['url']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostPositions;
      return this.apiClient.callApi(
        '/positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
