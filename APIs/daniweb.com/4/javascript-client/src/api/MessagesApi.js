/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointGetMessagesID from '../model/EndpointGetMessagesID';
import EndpointGetMessagesIDMetadata from '../model/EndpointGetMessagesIDMetadata';
import EndpointGetMessagesIDMetadataCollections from '../model/EndpointGetMessagesIDMetadataCollections';
import EndpointPostMessagesIDMetadata from '../model/EndpointPostMessagesIDMetadata';
import EndpointPostMessagesMetadataFilters from '../model/EndpointPostMessagesMetadataFilters';

/**
* Messages service.
* @module api/MessagesApi
* @version 4
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the messagesIDGet operation.
     * @callback module:api/MessagesApi~messagesIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetMessagesID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an array of messages. You can only retrieve messages authored by you or by users who exist within the current access token's bubble.
     * @param {Array.<Number>} ID 
     * @param {module:api/MessagesApi~messagesIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetMessagesID}
     */
    messagesIDGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling messagesIDGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetMessagesID;
      return this.apiClient.callApi(
        '/messages/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesIDMetadataCollectionsGet operation.
     * @callback module:api/MessagesApi~messagesIDMetadataCollectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetMessagesIDMetadataCollections} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who authored the message exists within the current access token's bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble. Metadata will be grouped by key.
     * @param {Number} ID 
     * @param {module:api/MessagesApi~messagesIDMetadataCollectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetMessagesIDMetadataCollections}
     */
    messagesIDMetadataCollectionsGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling messagesIDMetadataCollectionsGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetMessagesIDMetadataCollections;
      return this.apiClient.callApi(
        '/messages/{ID}/metadata/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesIDMetadataGet operation.
     * @callback module:api/MessagesApi~messagesIDMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetMessagesIDMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who authored the message exists within the current access token's bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble.
     * @param {Number} ID 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 50)] 
     * @param {module:api/MessagesApi~messagesIDMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetMessagesIDMetadata}
     */
    messagesIDMetadataGet(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling messagesIDMetadataGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetMessagesIDMetadata;
      return this.apiClient.callApi(
        '/messages/{ID}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesIDMetadataPost operation.
     * @callback module:api/MessagesApi~messagesIDMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostMessagesIDMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach one-to-many key/value pairs of metadata to a message, so long as the user who authored the message exists within the current access token's bubble. A key is unique for each author/bubble combination. Attaching metadata with an existing key that was previously created by you, from within the same bubble, overwrites the key with the new value or set of values. The privacy setting allows you to specify who will have access to the metadata: Public metadata by you or the other user in the message's conversation, using an access token which grants you access to the user who authored the message, if it wasn't you; Bubbled metadata by you or the other user in the message's conversation, using an access token existing within the current bubble; User metadata by you, so long as you are using an access token which grants you access to the user who authored the message, if it wasn't you; Private metadata by you, so long as you are using an access token existing within the current bubble.
     * @param {Number} ID 
     * @param {Object} opts Optional parameters
     * @param {String} [metadata0Key] 
     * @param {module:model/String} [metadata0Privacy] 
     * @param {Array.<String>} [metadata0Values] 
     * @param {String} [metadata1Key] 
     * @param {module:model/String} [metadata1Privacy] 
     * @param {Array.<String>} [metadata1Values] 
     * @param {String} [metadata2Key] 
     * @param {module:model/String} [metadata2Privacy] 
     * @param {Array.<String>} [metadata2Values] 
     * @param {module:api/MessagesApi~messagesIDMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostMessagesIDMetadata}
     */
    messagesIDMetadataPost(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling messagesIDMetadataPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'metadata_0_key': opts['metadata0Key'],
        'metadata_0_privacy': opts['metadata0Privacy'],
        'metadata_0_values[]': this.apiClient.buildCollectionParam(opts['metadata0Values'], 'csv'),
        'metadata_1_key': opts['metadata1Key'],
        'metadata_1_privacy': opts['metadata1Privacy'],
        'metadata_1_values[]': this.apiClient.buildCollectionParam(opts['metadata1Values'], 'csv'),
        'metadata_2_key': opts['metadata2Key'],
        'metadata_2_privacy': opts['metadata2Privacy'],
        'metadata_2_values[]': this.apiClient.buildCollectionParam(opts['metadata2Values'], 'csv')
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostMessagesIDMetadata;
      return this.apiClient.callApi(
        '/messages/{ID}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesMetadataFiltersPost operation.
     * @callback module:api/MessagesApi~messagesMetadataFiltersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostMessagesMetadataFilters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated listing of messages filtered by arbitrary metadata criteria. Messages must match on all key/value pairs passed in. Messages may only match on one value of an array passed in. However, messages are sorted based on how many distinct values they match on (most matches first).
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 50)] 
     * @param {String} [metadata0Key] 
     * @param {Array.<String>} [metadata0Values] 
     * @param {String} [metadata1Key] 
     * @param {Array.<String>} [metadata1Values] 
     * @param {String} [metadata2Key] 
     * @param {Array.<String>} [metadata2Values] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/MessagesApi~messagesMetadataFiltersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostMessagesMetadataFilters}
     */
    messagesMetadataFiltersPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'limit': opts['limit'],
        'metadata_0_key': opts['metadata0Key'],
        'metadata_0_values[]': this.apiClient.buildCollectionParam(opts['metadata0Values'], 'csv'),
        'metadata_1_key': opts['metadata1Key'],
        'metadata_1_values[]': this.apiClient.buildCollectionParam(opts['metadata1Values'], 'csv'),
        'metadata_2_key': opts['metadata2Key'],
        'metadata_2_values[]': this.apiClient.buildCollectionParam(opts['metadata2Values'], 'csv'),
        'offset': opts['offset']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostMessagesMetadataFilters;
      return this.apiClient.callApi(
        '/messages/metadata/filters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
