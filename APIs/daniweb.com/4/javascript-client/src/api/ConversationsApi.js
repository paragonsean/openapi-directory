/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointGetConversationsID from '../model/EndpointGetConversationsID';
import EndpointGetConversationsIDMessages from '../model/EndpointGetConversationsIDMessages';
import EndpointGetConversationsIDStatuses from '../model/EndpointGetConversationsIDStatuses';
import EndpointGetConversationsStatuses from '../model/EndpointGetConversationsStatuses';
import EndpointPatchConversationsIDStatuses from '../model/EndpointPatchConversationsIDStatuses';
import EndpointPostConversationsIDMessages from '../model/EndpointPostConversationsIDMessages';
import EndpointPostConversationsIDSchedules from '../model/EndpointPostConversationsIDSchedules';
import EndpointPostConversationsIDSearches from '../model/EndpointPostConversationsIDSearches';
import EndpointPostConversationsSchedules from '../model/EndpointPostConversationsSchedules';
import EndpointPostConversationsSearches from '../model/EndpointPostConversationsSearches';

/**
* Conversations service.
* @module api/ConversationsApi
* @version 4
*/
export default class ConversationsApi {

    /**
    * Constructs a new ConversationsApi. 
    * @alias module:api/ConversationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the conversationsIDGet operation.
     * @callback module:api/ConversationsApi~conversationsIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetConversationsID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an array of conversations. You can only retrieve conversations with users who exist within the current access token's bubble.
     * @param {Array.<Number>} ID 
     * @param {module:api/ConversationsApi~conversationsIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetConversationsID}
     */
    conversationsIDGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling conversationsIDGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetConversationsID;
      return this.apiClient.callApi(
        '/conversations/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsIDMessagesGet operation.
     * @callback module:api/ConversationsApi~conversationsIDMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetConversationsIDMessages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the last {limit} messages in the conversation, provided the conversations exist within the current access token's bubble. If a timeout is 0 or greater, the batch is sorted oldest first. Otherwise, if timeout is a negative number, the transcript is paginated and sorted newest first. Specify a timeout for long polling (which delays the server sending back results for up to n seconds or until results are available, whichever comes first), or default to 0 for immediate results. Optionally record your status as online along with sharing the latest message you've seen with the other conversation participant. Optionally specify a gt_message_id to retrieve only messages with an ID greater than that specified (such as greater than the latest message ID received in the last poll). Optionally only poll for messages authored by the other person in the conversation, and echo messages authored by you when sending, for a perceived increase in performance. Optionally only retrieve messages that were posted from within the current access token's bubble. Optionally specify a date formatted as YYYY-MM-DD to retrieve a transcript of messages from a single day. When record_seen is set to true, the new message count for the conversation is reset to zero.
     * @param {Number} ID 
     * @param {Object} opts Optional parameters
     * @param {Number} [gtMessageId] 
     * @param {Boolean} [excludeSelf = false)] 
     * @param {String} [date] 
     * @param {Boolean} [bubbled = false)] 
     * @param {Boolean} [recordSeen = false)] 
     * @param {Number} [timeout = 0)] 
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 50)] 
     * @param {module:api/ConversationsApi~conversationsIDMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetConversationsIDMessages}
     */
    conversationsIDMessagesGet(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling conversationsIDMessagesGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'gt_message_id': opts['gtMessageId'],
        'exclude_self': opts['excludeSelf'],
        'date': opts['date'],
        'bubbled': opts['bubbled'],
        'record_seen': opts['recordSeen'],
        'timeout': opts['timeout'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetConversationsIDMessages;
      return this.apiClient.callApi(
        '/conversations/{ID}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsIDMessagesPost operation.
     * @callback module:api/ConversationsApi~conversationsIDMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostConversationsIDMessages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a message to a conversation that is with a user who exists within the current access token's bubble. Optionally specify whether emoticons should be parsed into smiley images. Optionally specify whether the message should be bubbled within the app. Additionally, optionally attach a single metadata key/value pair to the message upon submission.
     * @param {Number} ID 
     * @param {String} textRaw 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [bubbled = false)] 
     * @param {String} [metadata0Key] 
     * @param {module:model/String} [metadata0Privacy] 
     * @param {Array.<String>} [metadata0Values] 
     * @param {String} [metadata1Key] 
     * @param {module:model/String} [metadata1Privacy] 
     * @param {Array.<String>} [metadata1Values] 
     * @param {String} [metadata2Key] 
     * @param {module:model/String} [metadata2Privacy] 
     * @param {Array.<String>} [metadata2Values] 
     * @param {Boolean} [textEmoticons = false)] 
     * @param {module:api/ConversationsApi~conversationsIDMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostConversationsIDMessages}
     */
    conversationsIDMessagesPost(ID, textRaw, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling conversationsIDMessagesPost");
      }
      // verify the required parameter 'textRaw' is set
      if (textRaw === undefined || textRaw === null) {
        throw new Error("Missing the required parameter 'textRaw' when calling conversationsIDMessagesPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'bubbled': opts['bubbled'],
        'metadata_0_key': opts['metadata0Key'],
        'metadata_0_privacy': opts['metadata0Privacy'],
        'metadata_0_values[]': this.apiClient.buildCollectionParam(opts['metadata0Values'], 'csv'),
        'metadata_1_key': opts['metadata1Key'],
        'metadata_1_privacy': opts['metadata1Privacy'],
        'metadata_1_values[]': this.apiClient.buildCollectionParam(opts['metadata1Values'], 'csv'),
        'metadata_2_key': opts['metadata2Key'],
        'metadata_2_privacy': opts['metadata2Privacy'],
        'metadata_2_values[]': this.apiClient.buildCollectionParam(opts['metadata2Values'], 'csv'),
        'text_emoticons': opts['textEmoticons'],
        'text_raw': textRaw
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostConversationsIDMessages;
      return this.apiClient.callApi(
        '/conversations/{ID}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsIDSchedulesPost operation.
     * @callback module:api/ConversationsApi~conversationsIDSchedulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostConversationsIDSchedules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated report of information about messages contributed by conversation and date. Only conversations that exist within the current access token's bubble are considered in the calculations. Optionally roll up all conversations to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages within the conversation(s).
     * @param {Array.<Number>} ID 
     * @param {Object} opts Optional parameters
     * @param {String} [date] 
     * @param {Number} [limit = 50)] 
     * @param {Number} [offset = 0)] 
     * @param {Boolean} [rollUp = false)] 
     * @param {module:model/String} [sort = 'desc')] 
     * @param {module:api/ConversationsApi~conversationsIDSchedulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostConversationsIDSchedules}
     */
    conversationsIDSchedulesPost(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling conversationsIDSchedulesPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'date': opts['date'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'roll_up': opts['rollUp'],
        'sort': opts['sort']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostConversationsIDSchedules;
      return this.apiClient.callApi(
        '/conversations/{ID}/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsIDSearchesPost operation.
     * @callback module:api/ConversationsApi~conversationsIDSearchesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostConversationsIDSearches} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch messages authored from within specified conversations that match a query string passed in as a search parameter along with their relevancy score.
     * @param {Array.<Number>} ID 
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {String} [date] 
     * @param {Number} [gtMessageId] 
     * @param {Number} [limit = 50)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/ConversationsApi~conversationsIDSearchesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostConversationsIDSearches}
     */
    conversationsIDSearchesPost(ID, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling conversationsIDSearchesPost");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling conversationsIDSearchesPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'date': opts['date'],
        'gt_message_id': opts['gtMessageId'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'query': query
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostConversationsIDSearches;
      return this.apiClient.callApi(
        '/conversations/{ID}/searches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsIDStatusesGet operation.
     * @callback module:api/ConversationsApi~conversationsIDStatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetConversationsIDStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status information about your current relationship with one or more conversations you participating in, provided the conversations exist within the current access token's bubble.
     * @param {Array.<Number>} ID 
     * @param {module:api/ConversationsApi~conversationsIDStatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetConversationsIDStatuses}
     */
    conversationsIDStatusesGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling conversationsIDStatusesGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetConversationsIDStatuses;
      return this.apiClient.callApi(
        '/conversations/{ID}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsIDStatusesPatch operation.
     * @callback module:api/ConversationsApi~conversationsIDStatusesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPatchConversationsIDStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive or unarchive a conversation that is with a user who exists within the same bubble.
     * @param {Number} ID 
     * @param {Boolean} archivedStatus 
     * @param {module:api/ConversationsApi~conversationsIDStatusesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPatchConversationsIDStatuses}
     */
    conversationsIDStatusesPatch(ID, archivedStatus, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling conversationsIDStatusesPatch");
      }
      // verify the required parameter 'archivedStatus' is set
      if (archivedStatus === undefined || archivedStatus === null) {
        throw new Error("Missing the required parameter 'archivedStatus' when calling conversationsIDStatusesPatch");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'archived_status': archivedStatus
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPatchConversationsIDStatuses;
      return this.apiClient.callApi(
        '/conversations/{ID}/statuses', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsSchedulesPost operation.
     * @callback module:api/ConversationsApi~conversationsSchedulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostConversationsSchedules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated report of information about messages contributed by conversation and date. Only conversations that exist within the current access token's bubble are considered in the calculations. Optionally roll up all conversations to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages.
     * @param {Object} opts Optional parameters
     * @param {String} [date] 
     * @param {Number} [limit = 50)] 
     * @param {Number} [offset = 0)] 
     * @param {Boolean} [rollUp = false)] 
     * @param {module:model/String} [sort = 'desc')] 
     * @param {module:api/ConversationsApi~conversationsSchedulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostConversationsSchedules}
     */
    conversationsSchedulesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'date': opts['date'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'roll_up': opts['rollUp'],
        'sort': opts['sort']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostConversationsSchedules;
      return this.apiClient.callApi(
        '/conversations/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsSearchesPost operation.
     * @callback module:api/ConversationsApi~conversationsSearchesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostConversationsSearches} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch messages authored from within the current bubble that match a query string passed in as a search parameter along with their relevancy score.
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {String} [date] 
     * @param {Number} [gtMessageId] 
     * @param {Number} [limit = 50)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/ConversationsApi~conversationsSearchesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostConversationsSearches}
     */
    conversationsSearchesPost(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling conversationsSearchesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'date': opts['date'],
        'gt_message_id': opts['gtMessageId'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'query': query
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostConversationsSearches;
      return this.apiClient.callApi(
        '/conversations/searches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsStatusesGet operation.
     * @callback module:api/ConversationsApi~conversationsStatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetConversationsStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve conversations that you are participating in with users who exists within the same bubble, along with your current relationship with the conversations. The user_a / user_b properties of the conversation are populated with as much data as is available if the user is not you. If the user is you, only the id field is populated. There is a separate status endpoint to retrieve relationship information for individual conversations. Optionally filter: 'new' to only show conversations with messages you haven't yet seen; 'introductions' to only show conversations where users have introduced themselves to you but nothing more; 'unreplied' to only show conversations where you have introduced yourself to other users but nothing more; 'notifications' to show all conversations where the other user was the last person to message. Optionally only show conversations engaging within the existing access token's bubble. This report is limited to your ~500-1000 most recently active conversations you've engaged in within current the access token's bubble.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter] 
     * @param {Boolean} [includeArchived = false)] 
     * @param {Boolean} [bubbled = false)] 
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 50)] 
     * @param {module:api/ConversationsApi~conversationsStatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetConversationsStatuses}
     */
    conversationsStatusesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'include_archived': opts['includeArchived'],
        'bubbled': opts['bubbled'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetConversationsStatuses;
      return this.apiClient.callApi(
        '/conversations/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
