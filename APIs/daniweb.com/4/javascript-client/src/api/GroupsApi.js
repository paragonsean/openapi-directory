/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointDeleteGroupsIDMemberships from '../model/EndpointDeleteGroupsIDMemberships';
import EndpointDeleteGroupsMessagesID from '../model/EndpointDeleteGroupsMessagesID';
import EndpointGetGroups from '../model/EndpointGetGroups';
import EndpointGetGroupsID from '../model/EndpointGetGroupsID';
import EndpointGetGroupsIDMemberships from '../model/EndpointGetGroupsIDMemberships';
import EndpointGetGroupsIDMessages from '../model/EndpointGetGroupsIDMessages';
import EndpointGetGroupsIDStatuses from '../model/EndpointGetGroupsIDStatuses';
import EndpointGetGroupsMessagesID from '../model/EndpointGetGroupsMessagesID';
import EndpointGetGroupsMessagesIDMetadata from '../model/EndpointGetGroupsMessagesIDMetadata';
import EndpointGetGroupsMessagesIDMetadataCollections from '../model/EndpointGetGroupsMessagesIDMetadataCollections';
import EndpointGetGroupsStatuses from '../model/EndpointGetGroupsStatuses';
import EndpointPatchGroupsID from '../model/EndpointPatchGroupsID';
import EndpointPatchGroupsIDMemberships from '../model/EndpointPatchGroupsIDMemberships';
import EndpointPostGroups from '../model/EndpointPostGroups';
import EndpointPostGroupsIDMemberships from '../model/EndpointPostGroupsIDMemberships';
import EndpointPostGroupsIDMessages from '../model/EndpointPostGroupsIDMessages';
import EndpointPostGroupsIDSchedules from '../model/EndpointPostGroupsIDSchedules';
import EndpointPostGroupsMessagesIDMetadata from '../model/EndpointPostGroupsMessagesIDMetadata';
import EndpointPostGroupsMessagesMetadataFilters from '../model/EndpointPostGroupsMessagesMetadataFilters';
import EndpointPostGroupsSchedules from '../model/EndpointPostGroupsSchedules';

/**
* Groups service.
* @module api/GroupsApi
* @version 4
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the groupsGet operation.
     * @callback module:api/GroupsApi~groupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an array of all groups that were created by users existing within the current access token's bubble. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 50)] 
     * @param {module:api/GroupsApi~groupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroups}
     */
    groupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroups;
      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDGet operation.
     * @callback module:api/GroupsApi~groupsIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroupsID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an array of groups. You can only retrieve groups created by users existing within the current access token's bubble.
     * @param {Array.<Number>} ID 
     * @param {module:api/GroupsApi~groupsIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroupsID}
     */
    groupsIDGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroupsID;
      return this.apiClient.callApi(
        '/groups/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDMembershipsDelete operation.
     * @callback module:api/GroupsApi~groupsIDMembershipsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointDeleteGroupsIDMemberships} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave a group that you are a member of and that was created by a user who exists within the current access token's bubble.
     * @param {Number} ID 
     * @param {module:api/GroupsApi~groupsIDMembershipsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointDeleteGroupsIDMemberships}
     */
    groupsIDMembershipsDelete(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDMembershipsDelete");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointDeleteGroupsIDMemberships;
      return this.apiClient.callApi(
        '/groups/{ID}/memberships', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDMembershipsGet operation.
     * @callback module:api/GroupsApi~groupsIDMembershipsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroupsIDMemberships} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an array of users who are members of specific groups that you are also a member of. You can only retrieve users existing within the current access token's bubble.
     * @param {Array.<Number>} ID 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [moderatorsOnly = false)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/GroupsApi~groupsIDMembershipsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroupsIDMemberships}
     */
    groupsIDMembershipsGet(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDMembershipsGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'moderators_only': opts['moderatorsOnly'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroupsIDMemberships;
      return this.apiClient.callApi(
        '/groups/{ID}/memberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDMembershipsPatch operation.
     * @callback module:api/GroupsApi~groupsIDMembershipsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPatchGroupsIDMemberships} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote or demote a member's privileges within a group that you created. The user must exist within the current access token's bubble and be an existing member of the group.
     * @param {Number} ID 
     * @param {Number} userId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [moderator = false)] 
     * @param {module:api/GroupsApi~groupsIDMembershipsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPatchGroupsIDMemberships}
     */
    groupsIDMembershipsPatch(ID, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDMembershipsPatch");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling groupsIDMembershipsPatch");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'moderator': opts['moderator'],
        'user_id': userId
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPatchGroupsIDMemberships;
      return this.apiClient.callApi(
        '/groups/{ID}/memberships', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDMembershipsPost operation.
     * @callback module:api/GroupsApi~groupsIDMembershipsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostGroupsIDMemberships} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join a group that was created by a user who exists within the current access token's bubble, or join other users into a group that you created. If you are the group owner, you can pass in a user_id to create membership records for a user you are in a conversation with. The user must exist within the current access token's bubble. If the group is private, you must successfully pass in its passphrase in order to join. You can obtain the passphrase from the group's owner.
     * @param {Number} ID 
     * @param {Object} opts Optional parameters
     * @param {String} [passphrase] 
     * @param {Number} [userId] 
     * @param {module:api/GroupsApi~groupsIDMembershipsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostGroupsIDMemberships}
     */
    groupsIDMembershipsPost(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDMembershipsPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'passphrase': opts['passphrase'],
        'user_id': opts['userId']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostGroupsIDMemberships;
      return this.apiClient.callApi(
        '/groups/{ID}/memberships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDMessagesGet operation.
     * @callback module:api/GroupsApi~groupsIDMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroupsIDMessages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the last {limit} messages in the group, for messages authored by users within the current access token's bubble. If a timeout is 0 or greater, the batch is sorted oldest first. Otherwise, if timeout is a negative number, the transcript is paginated and sorted newest first. Specify a timeout for long polling (which delays the server sending back results for up to n seconds or until results are available, whichever comes first), or default to 0 for immediate results. Optionally record your status as online along with sharing the latest message you've seen with other group members. Optionally specify a gt_message_id to retrieve only messages with an ID greater than that specified (such as greater than the latest message ID received in the last poll). Optionally only poll for messages authored by other members of the group, and echo messages authored by you when sending, for a perceived increase in performance. Optionally only retrieve messages that were posted from within the current access token's bubble. Optionally specify a date formatted as YYYY-MM-DD to retrieve a transcript of messages from a single day. When record_seen is set to true, the new message count for the group is reset to zero.
     * @param {Number} ID 
     * @param {Object} opts Optional parameters
     * @param {Number} [gtMessageId] 
     * @param {Boolean} [excludeSelf = false)] 
     * @param {Boolean} [includeDeleted = false)] 
     * @param {String} [date] 
     * @param {Boolean} [bubbled = false)] 
     * @param {Boolean} [recordSeen = false)] 
     * @param {Number} [timeout = 0)] 
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 50)] 
     * @param {module:api/GroupsApi~groupsIDMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroupsIDMessages}
     */
    groupsIDMessagesGet(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDMessagesGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'gt_message_id': opts['gtMessageId'],
        'exclude_self': opts['excludeSelf'],
        'include_deleted': opts['includeDeleted'],
        'date': opts['date'],
        'bubbled': opts['bubbled'],
        'record_seen': opts['recordSeen'],
        'timeout': opts['timeout'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroupsIDMessages;
      return this.apiClient.callApi(
        '/groups/{ID}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDMessagesPost operation.
     * @callback module:api/GroupsApi~groupsIDMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostGroupsIDMessages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a message to a group that you are a member of and that was created by a user who exists within the current access token's bubble. Optionally specify whether emoticons should be parsed into smiley images. Additionally, optionally attach a single metadata key/value pair to the group message upon submission.
     * @param {Number} ID 
     * @param {String} textRaw 
     * @param {Object} opts Optional parameters
     * @param {String} [metadata0Key] 
     * @param {module:model/String} [metadata0Privacy] 
     * @param {Array.<String>} [metadata0Values] 
     * @param {String} [metadata1Key] 
     * @param {module:model/String} [metadata1Privacy] 
     * @param {Array.<String>} [metadata1Values] 
     * @param {String} [metadata2Key] 
     * @param {module:model/String} [metadata2Privacy] 
     * @param {Array.<String>} [metadata2Values] 
     * @param {Boolean} [textEmoticons = false)] 
     * @param {module:api/GroupsApi~groupsIDMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostGroupsIDMessages}
     */
    groupsIDMessagesPost(ID, textRaw, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDMessagesPost");
      }
      // verify the required parameter 'textRaw' is set
      if (textRaw === undefined || textRaw === null) {
        throw new Error("Missing the required parameter 'textRaw' when calling groupsIDMessagesPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'metadata_0_key': opts['metadata0Key'],
        'metadata_0_privacy': opts['metadata0Privacy'],
        'metadata_0_values[]': this.apiClient.buildCollectionParam(opts['metadata0Values'], 'csv'),
        'metadata_1_key': opts['metadata1Key'],
        'metadata_1_privacy': opts['metadata1Privacy'],
        'metadata_1_values[]': this.apiClient.buildCollectionParam(opts['metadata1Values'], 'csv'),
        'metadata_2_key': opts['metadata2Key'],
        'metadata_2_privacy': opts['metadata2Privacy'],
        'metadata_2_values[]': this.apiClient.buildCollectionParam(opts['metadata2Values'], 'csv'),
        'text_emoticons': opts['textEmoticons'],
        'text_raw': textRaw
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostGroupsIDMessages;
      return this.apiClient.callApi(
        '/groups/{ID}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDPatch operation.
     * @callback module:api/GroupsApi~groupsIDPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPatchGroupsID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a group you previously created.
     * @param {Number} ID 
     * @param {Object} opts Optional parameters
     * @param {String} [description] 
     * @param {String} [name] 
     * @param {String} [passphrase] 
     * @param {module:model/String} [privacy] 
     * @param {String} [slug] 
     * @param {module:api/GroupsApi~groupsIDPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPatchGroupsID}
     */
    groupsIDPatch(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDPatch");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'description': opts['description'],
        'name': opts['name'],
        'passphrase': opts['passphrase'],
        'privacy': opts['privacy'],
        'slug': opts['slug']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPatchGroupsID;
      return this.apiClient.callApi(
        '/groups/{ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDSchedulesPost operation.
     * @callback module:api/GroupsApi~groupsIDSchedulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostGroupsIDSchedules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated report of information about group messages contributed by conversation and date. Only groups you're a member of and group messages authored by users existing within the current access token's bubble are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages within the group discussion(s).
     * @param {Array.<Number>} ID 
     * @param {Object} opts Optional parameters
     * @param {String} [date] 
     * @param {Number} [limit = 50)] 
     * @param {Number} [offset = 0)] 
     * @param {Boolean} [rollUp = false)] 
     * @param {module:model/String} [sort = 'desc')] 
     * @param {module:api/GroupsApi~groupsIDSchedulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostGroupsIDSchedules}
     */
    groupsIDSchedulesPost(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDSchedulesPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'date': opts['date'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'roll_up': opts['rollUp'],
        'sort': opts['sort']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostGroupsIDSchedules;
      return this.apiClient.callApi(
        '/groups/{ID}/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIDStatusesGet operation.
     * @callback module:api/GroupsApi~groupsIDStatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroupsIDStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status information about your current relationship with one or more groups you are a member of, provided the users who created the groups exist within the current access token's bubble.
     * @param {Array.<Number>} ID 
     * @param {module:api/GroupsApi~groupsIDStatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroupsIDStatuses}
     */
    groupsIDStatusesGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsIDStatusesGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroupsIDStatuses;
      return this.apiClient.callApi(
        '/groups/{ID}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsMessagesIDDelete operation.
     * @callback module:api/GroupsApi~groupsMessagesIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointDeleteGroupsMessagesID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an array of group messages. You must be the owner or moderator of the group.
     * @param {Array.<Number>} ID 
     * @param {module:api/GroupsApi~groupsMessagesIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointDeleteGroupsMessagesID}
     */
    groupsMessagesIDDelete(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsMessagesIDDelete");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointDeleteGroupsMessagesID;
      return this.apiClient.callApi(
        '/groups/messages/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsMessagesIDGet operation.
     * @callback module:api/GroupsApi~groupsMessagesIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroupsMessagesID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an array of group messages. You can only retrieve messages authored by you or by users existing within the current access token's bubble.
     * @param {Array.<Number>} ID 
     * @param {module:api/GroupsApi~groupsMessagesIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroupsMessagesID}
     */
    groupsMessagesIDGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsMessagesIDGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroupsMessagesID;
      return this.apiClient.callApi(
        '/groups/messages/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsMessagesIDMetadataCollectionsGet operation.
     * @callback module:api/GroupsApi~groupsMessagesIDMetadataCollectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroupsMessagesIDMetadataCollections} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token's bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble. Metadata will be grouped by key.
     * @param {Number} ID 
     * @param {module:api/GroupsApi~groupsMessagesIDMetadataCollectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroupsMessagesIDMetadataCollections}
     */
    groupsMessagesIDMetadataCollectionsGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsMessagesIDMetadataCollectionsGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroupsMessagesIDMetadataCollections;
      return this.apiClient.callApi(
        '/groups/messages/{ID}/metadata/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsMessagesIDMetadataGet operation.
     * @callback module:api/GroupsApi~groupsMessagesIDMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroupsMessagesIDMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token's bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble.
     * @param {Number} ID 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 50)] 
     * @param {module:api/GroupsApi~groupsMessagesIDMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroupsMessagesIDMetadata}
     */
    groupsMessagesIDMetadataGet(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsMessagesIDMetadataGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroupsMessagesIDMetadata;
      return this.apiClient.callApi(
        '/groups/messages/{ID}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsMessagesIDMetadataPost operation.
     * @callback module:api/GroupsApi~groupsMessagesIDMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostGroupsMessagesIDMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach one-to-many key/value pairs of metadata to a group message, so long as the user who authored the message exists within the current access token's bubble and you are a member of their group. A key is unique for each author/bubble combination. Attaching metadata with an existing key that was previously created by you, from within the same bubble, overwrites the key with the new value or set of values. The privacy setting allows you to specify who will have access to the metadata: Public metadata by anyone using an access token which grants them access to the user who authored the message and who is also a member of the group the message belongs to; Bubbled metadata by anyone using an access token existing within the current bubble who is also a member of the group the message belongs to; User metadata by you, so long as you are using an access token which grants you access to the user who authored the message and you remain a member of the group; Private metadata by you, so long as you are using an access token existing within the current bubble and you remain a member of the group.
     * @param {Number} ID 
     * @param {Object} opts Optional parameters
     * @param {String} [metadata0Key] 
     * @param {module:model/String} [metadata0Privacy] 
     * @param {Array.<String>} [metadata0Values] 
     * @param {String} [metadata1Key] 
     * @param {module:model/String} [metadata1Privacy] 
     * @param {Array.<String>} [metadata1Values] 
     * @param {String} [metadata2Key] 
     * @param {module:model/String} [metadata2Privacy] 
     * @param {Array.<String>} [metadata2Values] 
     * @param {module:api/GroupsApi~groupsMessagesIDMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostGroupsMessagesIDMetadata}
     */
    groupsMessagesIDMetadataPost(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling groupsMessagesIDMetadataPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'metadata_0_key': opts['metadata0Key'],
        'metadata_0_privacy': opts['metadata0Privacy'],
        'metadata_0_values[]': this.apiClient.buildCollectionParam(opts['metadata0Values'], 'csv'),
        'metadata_1_key': opts['metadata1Key'],
        'metadata_1_privacy': opts['metadata1Privacy'],
        'metadata_1_values[]': this.apiClient.buildCollectionParam(opts['metadata1Values'], 'csv'),
        'metadata_2_key': opts['metadata2Key'],
        'metadata_2_privacy': opts['metadata2Privacy'],
        'metadata_2_values[]': this.apiClient.buildCollectionParam(opts['metadata2Values'], 'csv')
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostGroupsMessagesIDMetadata;
      return this.apiClient.callApi(
        '/groups/messages/{ID}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsMessagesMetadataFiltersPost operation.
     * @callback module:api/GroupsApi~groupsMessagesMetadataFiltersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostGroupsMessagesMetadataFilters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated listing of messages filtered by arbitrary metadata criteria. Messages must match on all key/value pairs passed in. Messages may only match on one value of an array passed in. However, messages are sorted based on how many distinct values they match on (most matches first).
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 50)] 
     * @param {String} [metadata0Key] 
     * @param {Array.<String>} [metadata0Values] 
     * @param {String} [metadata1Key] 
     * @param {Array.<String>} [metadata1Values] 
     * @param {String} [metadata2Key] 
     * @param {Array.<String>} [metadata2Values] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/GroupsApi~groupsMessagesMetadataFiltersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostGroupsMessagesMetadataFilters}
     */
    groupsMessagesMetadataFiltersPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'limit': opts['limit'],
        'metadata_0_key': opts['metadata0Key'],
        'metadata_0_values[]': this.apiClient.buildCollectionParam(opts['metadata0Values'], 'csv'),
        'metadata_1_key': opts['metadata1Key'],
        'metadata_1_values[]': this.apiClient.buildCollectionParam(opts['metadata1Values'], 'csv'),
        'metadata_2_key': opts['metadata2Key'],
        'metadata_2_values[]': this.apiClient.buildCollectionParam(opts['metadata2Values'], 'csv'),
        'offset': opts['offset']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostGroupsMessagesMetadataFilters;
      return this.apiClient.callApi(
        '/groups/messages/metadata/filters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPost operation.
     * @callback module:api/GroupsApi~groupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new group for other members to join. Any user who is using an access token whose bubble you exist in can join your group provided it is not a private group. Private groups can only be joined by members who know its passphrase. Unlisted groups can be joined by anybody as long as they know the Group ID, but they are not referenced anywhere to non-members. Public groups can be joined by anybody, are discoverable, and anyone can see the public groups a user is a member of, provided the group owner exists in their access token's bubble. Groups each have their own discussions, transcripts, schedules, and ability to list and search their members.
     * @param {String} description 
     * @param {String} name 
     * @param {module:model/String} privacy 
     * @param {String} slug 
     * @param {Object} opts Optional parameters
     * @param {String} [passphrase] 
     * @param {module:api/GroupsApi~groupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostGroups}
     */
    groupsPost(description, name, privacy, slug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling groupsPost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling groupsPost");
      }
      // verify the required parameter 'privacy' is set
      if (privacy === undefined || privacy === null) {
        throw new Error("Missing the required parameter 'privacy' when calling groupsPost");
      }
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling groupsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'description': description,
        'name': name,
        'passphrase': opts['passphrase'],
        'privacy': privacy,
        'slug': slug
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostGroups;
      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsSchedulesPost operation.
     * @callback module:api/GroupsApi~groupsSchedulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostGroupsSchedules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated report of information about messages contributed by group and date. Only groups you're a member of and group messages authored by users the current access token has access to are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages.
     * @param {Object} opts Optional parameters
     * @param {String} [date] 
     * @param {Number} [limit = 50)] 
     * @param {Number} [offset = 0)] 
     * @param {Boolean} [rollUp = false)] 
     * @param {module:model/String} [sort = 'desc')] 
     * @param {module:api/GroupsApi~groupsSchedulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostGroupsSchedules}
     */
    groupsSchedulesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'date': opts['date'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'roll_up': opts['rollUp'],
        'sort': opts['sort']
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EndpointPostGroupsSchedules;
      return this.apiClient.callApi(
        '/groups/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsStatusesGet operation.
     * @callback module:api/GroupsApi~groupsStatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetGroupsStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve groups that were created by users within the current access token's bubble, along with your current relationship with the groups. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed. Optionally only retrieve groups that you are a member of.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [existingMembership = false)] 
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 50)] 
     * @param {module:api/GroupsApi~groupsStatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetGroupsStatuses}
     */
    groupsStatusesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'existing_membership': opts['existingMembership'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetGroupsStatuses;
      return this.apiClient.callApi(
        '/groups/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
