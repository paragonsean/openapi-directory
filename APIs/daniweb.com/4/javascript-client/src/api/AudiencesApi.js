/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointGetAudiences from '../model/EndpointGetAudiences';
import EndpointGetAudiencesID from '../model/EndpointGetAudiencesID';
import EndpointPostAudiencesIDMemberships from '../model/EndpointPostAudiencesIDMemberships';

/**
* Audiences service.
* @module api/AudiencesApi
* @version 4
*/
export default class AudiencesApi {

    /**
    * Constructs a new AudiencesApi. 
    * @alias module:api/AudiencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the audiencesGet operation.
     * @callback module:api/AudiencesApi~audiencesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetAudiences} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all Daniapp audience segments that comprise the current access token's bubble.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 50)] 
     * @param {module:api/AudiencesApi~audiencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetAudiences}
     */
    audiencesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetAudiences;
      return this.apiClient.callApi(
        '/audiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the audiencesIDGet operation.
     * @callback module:api/AudiencesApi~audiencesIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointGetAudiencesID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an array of Daniapp audience segments that comprise the current access token's bubble.
     * @param {Array.<Number>} ID 
     * @param {module:api/AudiencesApi~audiencesIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointGetAudiencesID}
     */
    audiencesIDGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling audiencesIDGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointGetAudiencesID;
      return this.apiClient.callApi(
        '/audiences/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the audiencesIDMembershipsPost operation.
     * @callback module:api/AudiencesApi~audiencesIDMembershipsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointPostAudiencesIDMemberships} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a membership record for the OAuth'ed end-user based on the current audience segment/bubble combination.
     * @param {Number} ID 
     * @param {module:api/AudiencesApi~audiencesIDMembershipsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointPostAudiencesIDMemberships}
     */
    audiencesIDMembershipsPost(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling audiencesIDMembershipsPost");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['implicit_flow', 'explicit_flow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointPostAudiencesIDMemberships;
      return this.apiClient.callApi(
        '/audiences/{ID}/memberships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
