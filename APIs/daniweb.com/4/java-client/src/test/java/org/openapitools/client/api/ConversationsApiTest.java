/*
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EndpointGetConversationsID;
import org.openapitools.client.model.EndpointGetConversationsIDMessages;
import org.openapitools.client.model.EndpointGetConversationsIDStatuses;
import org.openapitools.client.model.EndpointGetConversationsStatuses;
import org.openapitools.client.model.EndpointPatchConversationsIDStatuses;
import org.openapitools.client.model.EndpointPostConversationsIDMessages;
import org.openapitools.client.model.EndpointPostConversationsIDSchedules;
import org.openapitools.client.model.EndpointPostConversationsIDSearches;
import org.openapitools.client.model.EndpointPostConversationsSchedules;
import org.openapitools.client.model.EndpointPostConversationsSearches;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsApi
 */
@Disabled
public class ConversationsApiTest {

    private final ConversationsApi api = new ConversationsApi();

    /**
     * Fetch an array of conversations. You can only retrieve conversations with users who exist within the current access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsIDGetTest() throws ApiException {
        List<Integer> ID = null;
        EndpointGetConversationsID response = api.conversationsIDGet(ID);
        // TODO: test validations
    }

    /**
     * Retrieve the last {limit} messages in the conversation, provided the conversations exist within the current access token&#39;s bubble. If a timeout is 0 or greater, the batch is sorted oldest first. Otherwise, if timeout is a negative number, the transcript is paginated and sorted newest first. Specify a timeout for long polling (which delays the server sending back results for up to n seconds or until results are available, whichever comes first), or default to 0 for immediate results. Optionally record your status as online along with sharing the latest message you&#39;ve seen with the other conversation participant. Optionally specify a gt_message_id to retrieve only messages with an ID greater than that specified (such as greater than the latest message ID received in the last poll). Optionally only poll for messages authored by the other person in the conversation, and echo messages authored by you when sending, for a perceived increase in performance. Optionally only retrieve messages that were posted from within the current access token&#39;s bubble. Optionally specify a date formatted as YYYY-MM-DD to retrieve a transcript of messages from a single day. When record_seen is set to true, the new message count for the conversation is reset to zero.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsIDMessagesGetTest() throws ApiException {
        Integer ID = null;
        Integer gtMessageId = null;
        Boolean excludeSelf = null;
        String date = null;
        Boolean bubbled = null;
        Boolean recordSeen = null;
        Integer timeout = null;
        Integer offset = null;
        Integer limit = null;
        EndpointGetConversationsIDMessages response = api.conversationsIDMessagesGet(ID, gtMessageId, excludeSelf, date, bubbled, recordSeen, timeout, offset, limit);
        // TODO: test validations
    }

    /**
     * Post a message to a conversation that is with a user who exists within the current access token&#39;s bubble. Optionally specify whether emoticons should be parsed into smiley images. Optionally specify whether the message should be bubbled within the app. Additionally, optionally attach a single metadata key/value pair to the message upon submission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsIDMessagesPostTest() throws ApiException {
        Integer ID = null;
        String textRaw = null;
        Boolean bubbled = null;
        String metadata0Key = null;
        String metadata0Privacy = null;
        List<String> metadata0Values = null;
        String metadata1Key = null;
        String metadata1Privacy = null;
        List<String> metadata1Values = null;
        String metadata2Key = null;
        String metadata2Privacy = null;
        List<String> metadata2Values = null;
        Boolean textEmoticons = null;
        EndpointPostConversationsIDMessages response = api.conversationsIDMessagesPost(ID, textRaw, bubbled, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, textEmoticons);
        // TODO: test validations
    }

    /**
     * Paginated report of information about messages contributed by conversation and date. Only conversations that exist within the current access token&#39;s bubble are considered in the calculations. Optionally roll up all conversations to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages within the conversation(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsIDSchedulesPostTest() throws ApiException {
        List<Integer> ID = null;
        String date = null;
        Integer limit = null;
        Integer offset = null;
        Boolean rollUp = null;
        String sort = null;
        EndpointPostConversationsIDSchedules response = api.conversationsIDSchedulesPost(ID, date, limit, offset, rollUp, sort);
        // TODO: test validations
    }

    /**
     * Fetch messages authored from within specified conversations that match a query string passed in as a search parameter along with their relevancy score.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsIDSearchesPostTest() throws ApiException {
        List<Integer> ID = null;
        String query = null;
        String date = null;
        Integer gtMessageId = null;
        Integer limit = null;
        Integer offset = null;
        EndpointPostConversationsIDSearches response = api.conversationsIDSearchesPost(ID, query, date, gtMessageId, limit, offset);
        // TODO: test validations
    }

    /**
     * Status information about your current relationship with one or more conversations you participating in, provided the conversations exist within the current access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsIDStatusesGetTest() throws ApiException {
        List<Integer> ID = null;
        EndpointGetConversationsIDStatuses response = api.conversationsIDStatusesGet(ID);
        // TODO: test validations
    }

    /**
     * Archive or unarchive a conversation that is with a user who exists within the same bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsIDStatusesPatchTest() throws ApiException {
        Integer ID = null;
        Boolean archivedStatus = null;
        EndpointPatchConversationsIDStatuses response = api.conversationsIDStatusesPatch(ID, archivedStatus);
        // TODO: test validations
    }

    /**
     * Paginated report of information about messages contributed by conversation and date. Only conversations that exist within the current access token&#39;s bubble are considered in the calculations. Optionally roll up all conversations to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsSchedulesPostTest() throws ApiException {
        String date = null;
        Integer limit = null;
        Integer offset = null;
        Boolean rollUp = null;
        String sort = null;
        EndpointPostConversationsSchedules response = api.conversationsSchedulesPost(date, limit, offset, rollUp, sort);
        // TODO: test validations
    }

    /**
     * Fetch messages authored from within the current bubble that match a query string passed in as a search parameter along with their relevancy score.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsSearchesPostTest() throws ApiException {
        String query = null;
        String date = null;
        Integer gtMessageId = null;
        Integer limit = null;
        Integer offset = null;
        EndpointPostConversationsSearches response = api.conversationsSearchesPost(query, date, gtMessageId, limit, offset);
        // TODO: test validations
    }

    /**
     * Retrieve conversations that you are participating in with users who exists within the same bubble, along with your current relationship with the conversations. The user_a / user_b properties of the conversation are populated with as much data as is available if the user is not you. If the user is you, only the id field is populated. There is a separate status endpoint to retrieve relationship information for individual conversations. Optionally filter: &#39;new&#39; to only show conversations with messages you haven&#39;t yet seen; &#39;introductions&#39; to only show conversations where users have introduced themselves to you but nothing more; &#39;unreplied&#39; to only show conversations where you have introduced yourself to other users but nothing more; &#39;notifications&#39; to show all conversations where the other user was the last person to message. Optionally only show conversations engaging within the existing access token&#39;s bubble. This report is limited to your ~500-1000 most recently active conversations you&#39;ve engaged in within current the access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversationsStatusesGetTest() throws ApiException {
        String filter = null;
        Boolean includeArchived = null;
        Boolean bubbled = null;
        Integer offset = null;
        Integer limit = null;
        EndpointGetConversationsStatuses response = api.conversationsStatusesGet(filter, includeArchived, bubbled, offset, limit);
        // TODO: test validations
    }

}
