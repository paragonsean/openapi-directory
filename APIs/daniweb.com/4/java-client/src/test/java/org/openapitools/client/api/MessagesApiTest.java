/*
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EndpointGetMessagesID;
import org.openapitools.client.model.EndpointGetMessagesIDMetadata;
import org.openapitools.client.model.EndpointGetMessagesIDMetadataCollections;
import org.openapitools.client.model.EndpointPostMessagesIDMetadata;
import org.openapitools.client.model.EndpointPostMessagesMetadataFilters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApi
 */
@Disabled
public class MessagesApiTest {

    private final MessagesApi api = new MessagesApi();

    /**
     * Fetch an array of messages. You can only retrieve messages authored by you or by users who exist within the current access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesIDGetTest() throws ApiException {
        List<Integer> ID = null;
        EndpointGetMessagesID response = api.messagesIDGet(ID);
        // TODO: test validations
    }

    /**
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who authored the message exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble. Metadata will be grouped by key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesIDMetadataCollectionsGetTest() throws ApiException {
        Integer ID = null;
        EndpointGetMessagesIDMetadataCollections response = api.messagesIDMetadataCollectionsGet(ID);
        // TODO: test validations
    }

    /**
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who authored the message exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesIDMetadataGetTest() throws ApiException {
        Integer ID = null;
        Integer offset = null;
        Integer limit = null;
        EndpointGetMessagesIDMetadata response = api.messagesIDMetadataGet(ID, offset, limit);
        // TODO: test validations
    }

    /**
     * Attach one-to-many key/value pairs of metadata to a message, so long as the user who authored the message exists within the current access token&#39;s bubble. A key is unique for each author/bubble combination. Attaching metadata with an existing key that was previously created by you, from within the same bubble, overwrites the key with the new value or set of values. The privacy setting allows you to specify who will have access to the metadata: Public metadata by you or the other user in the message&#39;s conversation, using an access token which grants you access to the user who authored the message, if it wasn&#39;t you; Bubbled metadata by you or the other user in the message&#39;s conversation, using an access token existing within the current bubble; User metadata by you, so long as you are using an access token which grants you access to the user who authored the message, if it wasn&#39;t you; Private metadata by you, so long as you are using an access token existing within the current bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesIDMetadataPostTest() throws ApiException {
        Integer ID = null;
        String metadata0Key = null;
        String metadata0Privacy = null;
        List<String> metadata0Values = null;
        String metadata1Key = null;
        String metadata1Privacy = null;
        List<String> metadata1Values = null;
        String metadata2Key = null;
        String metadata2Privacy = null;
        List<String> metadata2Values = null;
        EndpointPostMessagesIDMetadata response = api.messagesIDMetadataPost(ID, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values);
        // TODO: test validations
    }

    /**
     * Paginated listing of messages filtered by arbitrary metadata criteria. Messages must match on all key/value pairs passed in. Messages may only match on one value of an array passed in. However, messages are sorted based on how many distinct values they match on (most matches first).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesMetadataFiltersPostTest() throws ApiException {
        Integer limit = null;
        String metadata0Key = null;
        List<String> metadata0Values = null;
        String metadata1Key = null;
        List<String> metadata1Values = null;
        String metadata2Key = null;
        List<String> metadata2Values = null;
        Integer offset = null;
        EndpointPostMessagesMetadataFilters response = api.messagesMetadataFiltersPost(limit, metadata0Key, metadata0Values, metadata1Key, metadata1Values, metadata2Key, metadata2Values, offset);
        // TODO: test validations
    }

}
