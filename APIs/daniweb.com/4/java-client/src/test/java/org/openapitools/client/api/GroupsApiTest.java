/*
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EndpointDeleteGroupsIDMemberships;
import org.openapitools.client.model.EndpointDeleteGroupsMessagesID;
import org.openapitools.client.model.EndpointGetGroups;
import org.openapitools.client.model.EndpointGetGroupsID;
import org.openapitools.client.model.EndpointGetGroupsIDMemberships;
import org.openapitools.client.model.EndpointGetGroupsIDMessages;
import org.openapitools.client.model.EndpointGetGroupsIDStatuses;
import org.openapitools.client.model.EndpointGetGroupsMessagesID;
import org.openapitools.client.model.EndpointGetGroupsMessagesIDMetadata;
import org.openapitools.client.model.EndpointGetGroupsMessagesIDMetadataCollections;
import org.openapitools.client.model.EndpointGetGroupsStatuses;
import org.openapitools.client.model.EndpointPatchGroupsID;
import org.openapitools.client.model.EndpointPatchGroupsIDMemberships;
import org.openapitools.client.model.EndpointPostGroups;
import org.openapitools.client.model.EndpointPostGroupsIDMemberships;
import org.openapitools.client.model.EndpointPostGroupsIDMessages;
import org.openapitools.client.model.EndpointPostGroupsIDSchedules;
import org.openapitools.client.model.EndpointPostGroupsMessagesIDMetadata;
import org.openapitools.client.model.EndpointPostGroupsMessagesMetadataFilters;
import org.openapitools.client.model.EndpointPostGroupsSchedules;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Disabled
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    /**
     * Fetch an array of all groups that were created by users existing within the current access token&#39;s bubble. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        EndpointGetGroups response = api.groupsGet(offset, limit);
        // TODO: test validations
    }

    /**
     * Fetch an array of groups. You can only retrieve groups created by users existing within the current access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDGetTest() throws ApiException {
        List<Integer> ID = null;
        EndpointGetGroupsID response = api.groupsIDGet(ID);
        // TODO: test validations
    }

    /**
     * Leave a group that you are a member of and that was created by a user who exists within the current access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDMembershipsDeleteTest() throws ApiException {
        Integer ID = null;
        EndpointDeleteGroupsIDMemberships response = api.groupsIDMembershipsDelete(ID);
        // TODO: test validations
    }

    /**
     * Fetch an array of users who are members of specific groups that you are also a member of. You can only retrieve users existing within the current access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDMembershipsGetTest() throws ApiException {
        List<Integer> ID = null;
        Boolean moderatorsOnly = null;
        Integer offset = null;
        EndpointGetGroupsIDMemberships response = api.groupsIDMembershipsGet(ID, moderatorsOnly, offset);
        // TODO: test validations
    }

    /**
     * Promote or demote a member&#39;s privileges within a group that you created. The user must exist within the current access token&#39;s bubble and be an existing member of the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDMembershipsPatchTest() throws ApiException {
        Integer ID = null;
        Integer userId = null;
        Boolean moderator = null;
        EndpointPatchGroupsIDMemberships response = api.groupsIDMembershipsPatch(ID, userId, moderator);
        // TODO: test validations
    }

    /**
     * Join a group that was created by a user who exists within the current access token&#39;s bubble, or join other users into a group that you created. If you are the group owner, you can pass in a user_id to create membership records for a user you are in a conversation with. The user must exist within the current access token&#39;s bubble. If the group is private, you must successfully pass in its passphrase in order to join. You can obtain the passphrase from the group&#39;s owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDMembershipsPostTest() throws ApiException {
        Integer ID = null;
        String passphrase = null;
        Integer userId = null;
        EndpointPostGroupsIDMemberships response = api.groupsIDMembershipsPost(ID, passphrase, userId);
        // TODO: test validations
    }

    /**
     * Retrieve the last {limit} messages in the group, for messages authored by users within the current access token&#39;s bubble. If a timeout is 0 or greater, the batch is sorted oldest first. Otherwise, if timeout is a negative number, the transcript is paginated and sorted newest first. Specify a timeout for long polling (which delays the server sending back results for up to n seconds or until results are available, whichever comes first), or default to 0 for immediate results. Optionally record your status as online along with sharing the latest message you&#39;ve seen with other group members. Optionally specify a gt_message_id to retrieve only messages with an ID greater than that specified (such as greater than the latest message ID received in the last poll). Optionally only poll for messages authored by other members of the group, and echo messages authored by you when sending, for a perceived increase in performance. Optionally only retrieve messages that were posted from within the current access token&#39;s bubble. Optionally specify a date formatted as YYYY-MM-DD to retrieve a transcript of messages from a single day. When record_seen is set to true, the new message count for the group is reset to zero.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDMessagesGetTest() throws ApiException {
        Integer ID = null;
        Integer gtMessageId = null;
        Boolean excludeSelf = null;
        Boolean includeDeleted = null;
        String date = null;
        Boolean bubbled = null;
        Boolean recordSeen = null;
        Integer timeout = null;
        Integer offset = null;
        Integer limit = null;
        EndpointGetGroupsIDMessages response = api.groupsIDMessagesGet(ID, gtMessageId, excludeSelf, includeDeleted, date, bubbled, recordSeen, timeout, offset, limit);
        // TODO: test validations
    }

    /**
     * Post a message to a group that you are a member of and that was created by a user who exists within the current access token&#39;s bubble. Optionally specify whether emoticons should be parsed into smiley images. Additionally, optionally attach a single metadata key/value pair to the group message upon submission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDMessagesPostTest() throws ApiException {
        Integer ID = null;
        String textRaw = null;
        String metadata0Key = null;
        String metadata0Privacy = null;
        List<String> metadata0Values = null;
        String metadata1Key = null;
        String metadata1Privacy = null;
        List<String> metadata1Values = null;
        String metadata2Key = null;
        String metadata2Privacy = null;
        List<String> metadata2Values = null;
        Boolean textEmoticons = null;
        EndpointPostGroupsIDMessages response = api.groupsIDMessagesPost(ID, textRaw, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, textEmoticons);
        // TODO: test validations
    }

    /**
     * Modify a group you previously created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDPatchTest() throws ApiException {
        Integer ID = null;
        String description = null;
        String name = null;
        String passphrase = null;
        String privacy = null;
        String slug = null;
        EndpointPatchGroupsID response = api.groupsIDPatch(ID, description, name, passphrase, privacy, slug);
        // TODO: test validations
    }

    /**
     * Paginated report of information about group messages contributed by conversation and date. Only groups you&#39;re a member of and group messages authored by users existing within the current access token&#39;s bubble are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages within the group discussion(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDSchedulesPostTest() throws ApiException {
        List<Integer> ID = null;
        String date = null;
        Integer limit = null;
        Integer offset = null;
        Boolean rollUp = null;
        String sort = null;
        EndpointPostGroupsIDSchedules response = api.groupsIDSchedulesPost(ID, date, limit, offset, rollUp, sort);
        // TODO: test validations
    }

    /**
     * Status information about your current relationship with one or more groups you are a member of, provided the users who created the groups exist within the current access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIDStatusesGetTest() throws ApiException {
        List<Integer> ID = null;
        EndpointGetGroupsIDStatuses response = api.groupsIDStatusesGet(ID);
        // TODO: test validations
    }

    /**
     * Delete an array of group messages. You must be the owner or moderator of the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsMessagesIDDeleteTest() throws ApiException {
        List<Integer> ID = null;
        EndpointDeleteGroupsMessagesID response = api.groupsMessagesIDDelete(ID);
        // TODO: test validations
    }

    /**
     * Fetch an array of group messages. You can only retrieve messages authored by you or by users existing within the current access token&#39;s bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsMessagesIDGetTest() throws ApiException {
        List<Integer> ID = null;
        EndpointGetGroupsMessagesID response = api.groupsMessagesIDGet(ID);
        // TODO: test validations
    }

    /**
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble. Metadata will be grouped by key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsMessagesIDMetadataCollectionsGetTest() throws ApiException {
        Integer ID = null;
        EndpointGetGroupsMessagesIDMetadataCollections response = api.groupsMessagesIDMetadataCollectionsGet(ID);
        // TODO: test validations
    }

    /**
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsMessagesIDMetadataGetTest() throws ApiException {
        Integer ID = null;
        Integer offset = null;
        Integer limit = null;
        EndpointGetGroupsMessagesIDMetadata response = api.groupsMessagesIDMetadataGet(ID, offset, limit);
        // TODO: test validations
    }

    /**
     * Attach one-to-many key/value pairs of metadata to a group message, so long as the user who authored the message exists within the current access token&#39;s bubble and you are a member of their group. A key is unique for each author/bubble combination. Attaching metadata with an existing key that was previously created by you, from within the same bubble, overwrites the key with the new value or set of values. The privacy setting allows you to specify who will have access to the metadata: Public metadata by anyone using an access token which grants them access to the user who authored the message and who is also a member of the group the message belongs to; Bubbled metadata by anyone using an access token existing within the current bubble who is also a member of the group the message belongs to; User metadata by you, so long as you are using an access token which grants you access to the user who authored the message and you remain a member of the group; Private metadata by you, so long as you are using an access token existing within the current bubble and you remain a member of the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsMessagesIDMetadataPostTest() throws ApiException {
        Integer ID = null;
        String metadata0Key = null;
        String metadata0Privacy = null;
        List<String> metadata0Values = null;
        String metadata1Key = null;
        String metadata1Privacy = null;
        List<String> metadata1Values = null;
        String metadata2Key = null;
        String metadata2Privacy = null;
        List<String> metadata2Values = null;
        EndpointPostGroupsMessagesIDMetadata response = api.groupsMessagesIDMetadataPost(ID, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values);
        // TODO: test validations
    }

    /**
     * Paginated listing of messages filtered by arbitrary metadata criteria. Messages must match on all key/value pairs passed in. Messages may only match on one value of an array passed in. However, messages are sorted based on how many distinct values they match on (most matches first).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsMessagesMetadataFiltersPostTest() throws ApiException {
        Integer limit = null;
        String metadata0Key = null;
        List<String> metadata0Values = null;
        String metadata1Key = null;
        List<String> metadata1Values = null;
        String metadata2Key = null;
        List<String> metadata2Values = null;
        Integer offset = null;
        EndpointPostGroupsMessagesMetadataFilters response = api.groupsMessagesMetadataFiltersPost(limit, metadata0Key, metadata0Values, metadata1Key, metadata1Values, metadata2Key, metadata2Values, offset);
        // TODO: test validations
    }

    /**
     * Create a new group for other members to join. Any user who is using an access token whose bubble you exist in can join your group provided it is not a private group. Private groups can only be joined by members who know its passphrase. Unlisted groups can be joined by anybody as long as they know the Group ID, but they are not referenced anywhere to non-members. Public groups can be joined by anybody, are discoverable, and anyone can see the public groups a user is a member of, provided the group owner exists in their access token&#39;s bubble. Groups each have their own discussions, transcripts, schedules, and ability to list and search their members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsPostTest() throws ApiException {
        String description = null;
        String name = null;
        String privacy = null;
        String slug = null;
        String passphrase = null;
        EndpointPostGroups response = api.groupsPost(description, name, privacy, slug, passphrase);
        // TODO: test validations
    }

    /**
     * Paginated report of information about messages contributed by group and date. Only groups you&#39;re a member of and group messages authored by users the current access token has access to are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsSchedulesPostTest() throws ApiException {
        String date = null;
        Integer limit = null;
        Integer offset = null;
        Boolean rollUp = null;
        String sort = null;
        EndpointPostGroupsSchedules response = api.groupsSchedulesPost(date, limit, offset, rollUp, sort);
        // TODO: test validations
    }

    /**
     * Retrieve groups that were created by users within the current access token&#39;s bubble, along with your current relationship with the groups. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed. Optionally only retrieve groups that you are a member of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsStatusesGetTest() throws ApiException {
        Boolean existingMembership = null;
        Integer offset = null;
        Integer limit = null;
        EndpointGetGroupsStatuses response = api.groupsStatusesGet(existingMembership, offset, limit);
        // TODO: test validations
    }

}
