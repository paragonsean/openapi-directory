/*
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MeBusinessCardWebsite;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MeBusinessCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:21.899808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeBusinessCard {
  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPANY_SIZE = "company_size";
  @SerializedName(SERIALIZED_NAME_COMPANY_SIZE)
  private String companySize;

  public static final String SERIALIZED_NAME_HEADLINE = "headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_INTEREST_TAGS = "interest_tags";
  @SerializedName(SERIALIZED_NAME_INTEREST_TAGS)
  private List<String> interestTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_POSITION = "job_position";
  @SerializedName(SERIALIZED_NAME_JOB_POSITION)
  private String jobPosition;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private MeBusinessCardWebsite website;

  public MeBusinessCard() {
  }

  public MeBusinessCard companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public MeBusinessCard companySize(String companySize) {
    this.companySize = companySize;
    return this;
  }

  /**
   * Get companySize
   * @return companySize
   */
  @javax.annotation.Nullable
  public String getCompanySize() {
    return companySize;
  }

  public void setCompanySize(String companySize) {
    this.companySize = companySize;
  }


  public MeBusinessCard headline(String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * Get headline
   * @return headline
   */
  @javax.annotation.Nullable
  public String getHeadline() {
    return headline;
  }

  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public MeBusinessCard industry(String industry) {
    this.industry = industry;
    return this;
  }

  /**
   * Get industry
   * @return industry
   */
  @javax.annotation.Nullable
  public String getIndustry() {
    return industry;
  }

  public void setIndustry(String industry) {
    this.industry = industry;
  }


  public MeBusinessCard interestTags(List<String> interestTags) {
    this.interestTags = interestTags;
    return this;
  }

  public MeBusinessCard addInterestTagsItem(String interestTagsItem) {
    if (this.interestTags == null) {
      this.interestTags = new ArrayList<>();
    }
    this.interestTags.add(interestTagsItem);
    return this;
  }

  /**
   * Get interestTags
   * @return interestTags
   */
  @javax.annotation.Nullable
  public List<String> getInterestTags() {
    return interestTags;
  }

  public void setInterestTags(List<String> interestTags) {
    this.interestTags = interestTags;
  }


  public MeBusinessCard jobPosition(String jobPosition) {
    this.jobPosition = jobPosition;
    return this;
  }

  /**
   * Get jobPosition
   * @return jobPosition
   */
  @javax.annotation.Nullable
  public String getJobPosition() {
    return jobPosition;
  }

  public void setJobPosition(String jobPosition) {
    this.jobPosition = jobPosition;
  }


  public MeBusinessCard summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public MeBusinessCard website(MeBusinessCardWebsite website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public MeBusinessCardWebsite getWebsite() {
    return website;
  }

  public void setWebsite(MeBusinessCardWebsite website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeBusinessCard meBusinessCard = (MeBusinessCard) o;
    return Objects.equals(this.companyName, meBusinessCard.companyName) &&
        Objects.equals(this.companySize, meBusinessCard.companySize) &&
        Objects.equals(this.headline, meBusinessCard.headline) &&
        Objects.equals(this.industry, meBusinessCard.industry) &&
        Objects.equals(this.interestTags, meBusinessCard.interestTags) &&
        Objects.equals(this.jobPosition, meBusinessCard.jobPosition) &&
        Objects.equals(this.summary, meBusinessCard.summary) &&
        Objects.equals(this.website, meBusinessCard.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyName, companySize, headline, industry, interestTags, jobPosition, summary, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeBusinessCard {\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    companySize: ").append(toIndentedString(companySize)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    interestTags: ").append(toIndentedString(interestTags)).append("\n");
    sb.append("    jobPosition: ").append(toIndentedString(jobPosition)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("company_name");
    openapiFields.add("company_size");
    openapiFields.add("headline");
    openapiFields.add("industry");
    openapiFields.add("interest_tags");
    openapiFields.add("job_position");
    openapiFields.add("summary");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeBusinessCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeBusinessCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeBusinessCard is not found in the empty JSON string", MeBusinessCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeBusinessCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeBusinessCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("company_size") != null && !jsonObj.get("company_size").isJsonNull()) && !jsonObj.get("company_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_size").toString()));
      }
      if ((jsonObj.get("headline") != null && !jsonObj.get("headline").isJsonNull()) && !jsonObj.get("headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headline").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("interest_tags") != null && !jsonObj.get("interest_tags").isJsonNull() && !jsonObj.get("interest_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `interest_tags` to be an array in the JSON string but got `%s`", jsonObj.get("interest_tags").toString()));
      }
      if ((jsonObj.get("job_position") != null && !jsonObj.get("job_position").isJsonNull()) && !jsonObj.get("job_position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_position").toString()));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      // validate the optional field `website`
      if (jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) {
        MeBusinessCardWebsite.validateJsonElement(jsonObj.get("website"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeBusinessCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeBusinessCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeBusinessCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeBusinessCard.class));

       return (TypeAdapter<T>) new TypeAdapter<MeBusinessCard>() {
           @Override
           public void write(JsonWriter out, MeBusinessCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeBusinessCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeBusinessCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeBusinessCard
   * @throws IOException if the JSON string is invalid with respect to MeBusinessCard
   */
  public static MeBusinessCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeBusinessCard.class);
  }

  /**
   * Convert an instance of MeBusinessCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

