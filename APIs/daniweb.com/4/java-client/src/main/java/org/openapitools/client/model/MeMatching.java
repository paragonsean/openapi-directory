/*
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MeMatching
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:21.899808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeMatching {
  public static final String SERIALIZED_NAME_GOALS = "goals";
  @SerializedName(SERIALIZED_NAME_GOALS)
  private List<String> goals = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTEREST_TAGS = "interest_tags";
  @SerializedName(SERIALIZED_NAME_INTEREST_TAGS)
  private List<String> interestTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_IMPORTANCE = "location_importance";
  @SerializedName(SERIALIZED_NAME_LOCATION_IMPORTANCE)
  private String locationImportance;

  public static final String SERIALIZED_NAME_TARGETED_INDUSTRY = "targeted_industry";
  @SerializedName(SERIALIZED_NAME_TARGETED_INDUSTRY)
  private String targetedIndustry;

  public MeMatching() {
  }

  public MeMatching goals(List<String> goals) {
    this.goals = goals;
    return this;
  }

  public MeMatching addGoalsItem(String goalsItem) {
    if (this.goals == null) {
      this.goals = new ArrayList<>();
    }
    this.goals.add(goalsItem);
    return this;
  }

  /**
   * Get goals
   * @return goals
   */
  @javax.annotation.Nullable
  public List<String> getGoals() {
    return goals;
  }

  public void setGoals(List<String> goals) {
    this.goals = goals;
  }


  public MeMatching interestTags(List<String> interestTags) {
    this.interestTags = interestTags;
    return this;
  }

  public MeMatching addInterestTagsItem(String interestTagsItem) {
    if (this.interestTags == null) {
      this.interestTags = new ArrayList<>();
    }
    this.interestTags.add(interestTagsItem);
    return this;
  }

  /**
   * Get interestTags
   * @return interestTags
   */
  @javax.annotation.Nullable
  public List<String> getInterestTags() {
    return interestTags;
  }

  public void setInterestTags(List<String> interestTags) {
    this.interestTags = interestTags;
  }


  public MeMatching locationImportance(String locationImportance) {
    this.locationImportance = locationImportance;
    return this;
  }

  /**
   * Get locationImportance
   * @return locationImportance
   */
  @javax.annotation.Nullable
  public String getLocationImportance() {
    return locationImportance;
  }

  public void setLocationImportance(String locationImportance) {
    this.locationImportance = locationImportance;
  }


  public MeMatching targetedIndustry(String targetedIndustry) {
    this.targetedIndustry = targetedIndustry;
    return this;
  }

  /**
   * Get targetedIndustry
   * @return targetedIndustry
   */
  @javax.annotation.Nullable
  public String getTargetedIndustry() {
    return targetedIndustry;
  }

  public void setTargetedIndustry(String targetedIndustry) {
    this.targetedIndustry = targetedIndustry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeMatching meMatching = (MeMatching) o;
    return Objects.equals(this.goals, meMatching.goals) &&
        Objects.equals(this.interestTags, meMatching.interestTags) &&
        Objects.equals(this.locationImportance, meMatching.locationImportance) &&
        Objects.equals(this.targetedIndustry, meMatching.targetedIndustry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(goals, interestTags, locationImportance, targetedIndustry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeMatching {\n");
    sb.append("    goals: ").append(toIndentedString(goals)).append("\n");
    sb.append("    interestTags: ").append(toIndentedString(interestTags)).append("\n");
    sb.append("    locationImportance: ").append(toIndentedString(locationImportance)).append("\n");
    sb.append("    targetedIndustry: ").append(toIndentedString(targetedIndustry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("goals");
    openapiFields.add("interest_tags");
    openapiFields.add("location_importance");
    openapiFields.add("targeted_industry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeMatching
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeMatching.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeMatching is not found in the empty JSON string", MeMatching.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeMatching.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeMatching` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("goals") != null && !jsonObj.get("goals").isJsonNull() && !jsonObj.get("goals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `goals` to be an array in the JSON string but got `%s`", jsonObj.get("goals").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("interest_tags") != null && !jsonObj.get("interest_tags").isJsonNull() && !jsonObj.get("interest_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `interest_tags` to be an array in the JSON string but got `%s`", jsonObj.get("interest_tags").toString()));
      }
      if ((jsonObj.get("location_importance") != null && !jsonObj.get("location_importance").isJsonNull()) && !jsonObj.get("location_importance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_importance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_importance").toString()));
      }
      if ((jsonObj.get("targeted_industry") != null && !jsonObj.get("targeted_industry").isJsonNull()) && !jsonObj.get("targeted_industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targeted_industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targeted_industry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeMatching.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeMatching' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeMatching> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeMatching.class));

       return (TypeAdapter<T>) new TypeAdapter<MeMatching>() {
           @Override
           public void write(JsonWriter out, MeMatching value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeMatching read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeMatching given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeMatching
   * @throws IOException if the JSON string is invalid with respect to MeMatching
   */
  public static MeMatching fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeMatching.class);
  }

  /**
   * Convert an instance of MeMatching to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

