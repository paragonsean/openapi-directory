/*
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EndpointPostUsersInvitesDataDiscovered;
import org.openapitools.client.model.EndpointPostUsersInvitesDataEmailed;
import org.openapitools.client.model.EndpointPostUsersInvitesDataExisting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndpointPostUsersInvitesData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:21.899808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointPostUsersInvitesData {
  public static final String SERIALIZED_NAME_DISCOVERED = "discovered";
  @SerializedName(SERIALIZED_NAME_DISCOVERED)
  private EndpointPostUsersInvitesDataDiscovered discovered;

  public static final String SERIALIZED_NAME_EMAILED = "emailed";
  @SerializedName(SERIALIZED_NAME_EMAILED)
  private EndpointPostUsersInvitesDataEmailed emailed;

  public static final String SERIALIZED_NAME_EXISTING = "existing";
  @SerializedName(SERIALIZED_NAME_EXISTING)
  private EndpointPostUsersInvitesDataExisting existing;

  public static final String SERIALIZED_NAME_INVALID = "invalid";
  @SerializedName(SERIALIZED_NAME_INVALID)
  private EndpointPostUsersInvitesDataEmailed invalid;

  public EndpointPostUsersInvitesData() {
  }

  public EndpointPostUsersInvitesData discovered(EndpointPostUsersInvitesDataDiscovered discovered) {
    this.discovered = discovered;
    return this;
  }

  /**
   * Get discovered
   * @return discovered
   */
  @javax.annotation.Nullable
  public EndpointPostUsersInvitesDataDiscovered getDiscovered() {
    return discovered;
  }

  public void setDiscovered(EndpointPostUsersInvitesDataDiscovered discovered) {
    this.discovered = discovered;
  }


  public EndpointPostUsersInvitesData emailed(EndpointPostUsersInvitesDataEmailed emailed) {
    this.emailed = emailed;
    return this;
  }

  /**
   * Get emailed
   * @return emailed
   */
  @javax.annotation.Nullable
  public EndpointPostUsersInvitesDataEmailed getEmailed() {
    return emailed;
  }

  public void setEmailed(EndpointPostUsersInvitesDataEmailed emailed) {
    this.emailed = emailed;
  }


  public EndpointPostUsersInvitesData existing(EndpointPostUsersInvitesDataExisting existing) {
    this.existing = existing;
    return this;
  }

  /**
   * Get existing
   * @return existing
   */
  @javax.annotation.Nullable
  public EndpointPostUsersInvitesDataExisting getExisting() {
    return existing;
  }

  public void setExisting(EndpointPostUsersInvitesDataExisting existing) {
    this.existing = existing;
  }


  public EndpointPostUsersInvitesData invalid(EndpointPostUsersInvitesDataEmailed invalid) {
    this.invalid = invalid;
    return this;
  }

  /**
   * Get invalid
   * @return invalid
   */
  @javax.annotation.Nullable
  public EndpointPostUsersInvitesDataEmailed getInvalid() {
    return invalid;
  }

  public void setInvalid(EndpointPostUsersInvitesDataEmailed invalid) {
    this.invalid = invalid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointPostUsersInvitesData endpointPostUsersInvitesData = (EndpointPostUsersInvitesData) o;
    return Objects.equals(this.discovered, endpointPostUsersInvitesData.discovered) &&
        Objects.equals(this.emailed, endpointPostUsersInvitesData.emailed) &&
        Objects.equals(this.existing, endpointPostUsersInvitesData.existing) &&
        Objects.equals(this.invalid, endpointPostUsersInvitesData.invalid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discovered, emailed, existing, invalid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointPostUsersInvitesData {\n");
    sb.append("    discovered: ").append(toIndentedString(discovered)).append("\n");
    sb.append("    emailed: ").append(toIndentedString(emailed)).append("\n");
    sb.append("    existing: ").append(toIndentedString(existing)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discovered");
    openapiFields.add("emailed");
    openapiFields.add("existing");
    openapiFields.add("invalid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointPostUsersInvitesData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointPostUsersInvitesData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointPostUsersInvitesData is not found in the empty JSON string", EndpointPostUsersInvitesData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointPostUsersInvitesData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointPostUsersInvitesData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `discovered`
      if (jsonObj.get("discovered") != null && !jsonObj.get("discovered").isJsonNull()) {
        EndpointPostUsersInvitesDataDiscovered.validateJsonElement(jsonObj.get("discovered"));
      }
      // validate the optional field `emailed`
      if (jsonObj.get("emailed") != null && !jsonObj.get("emailed").isJsonNull()) {
        EndpointPostUsersInvitesDataEmailed.validateJsonElement(jsonObj.get("emailed"));
      }
      // validate the optional field `existing`
      if (jsonObj.get("existing") != null && !jsonObj.get("existing").isJsonNull()) {
        EndpointPostUsersInvitesDataExisting.validateJsonElement(jsonObj.get("existing"));
      }
      // validate the optional field `invalid`
      if (jsonObj.get("invalid") != null && !jsonObj.get("invalid").isJsonNull()) {
        EndpointPostUsersInvitesDataEmailed.validateJsonElement(jsonObj.get("invalid"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointPostUsersInvitesData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointPostUsersInvitesData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointPostUsersInvitesData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointPostUsersInvitesData.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointPostUsersInvitesData>() {
           @Override
           public void write(JsonWriter out, EndpointPostUsersInvitesData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointPostUsersInvitesData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointPostUsersInvitesData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointPostUsersInvitesData
   * @throws IOException if the JSON string is invalid with respect to EndpointPostUsersInvitesData
   */
  public static EndpointPostUsersInvitesData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointPostUsersInvitesData.class);
  }

  /**
   * Convert an instance of EndpointPostUsersInvitesData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

