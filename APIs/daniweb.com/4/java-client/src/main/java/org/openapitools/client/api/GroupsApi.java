/*
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EndpointDeleteGroupsIDMemberships;
import org.openapitools.client.model.EndpointDeleteGroupsMessagesID;
import org.openapitools.client.model.EndpointGetGroups;
import org.openapitools.client.model.EndpointGetGroupsID;
import org.openapitools.client.model.EndpointGetGroupsIDMemberships;
import org.openapitools.client.model.EndpointGetGroupsIDMessages;
import org.openapitools.client.model.EndpointGetGroupsIDStatuses;
import org.openapitools.client.model.EndpointGetGroupsMessagesID;
import org.openapitools.client.model.EndpointGetGroupsMessagesIDMetadata;
import org.openapitools.client.model.EndpointGetGroupsMessagesIDMetadataCollections;
import org.openapitools.client.model.EndpointGetGroupsStatuses;
import org.openapitools.client.model.EndpointPatchGroupsID;
import org.openapitools.client.model.EndpointPatchGroupsIDMemberships;
import org.openapitools.client.model.EndpointPostGroups;
import org.openapitools.client.model.EndpointPostGroupsIDMemberships;
import org.openapitools.client.model.EndpointPostGroupsIDMessages;
import org.openapitools.client.model.EndpointPostGroupsIDSchedules;
import org.openapitools.client.model.EndpointPostGroupsMessagesIDMetadata;
import org.openapitools.client.model.EndpointPostGroupsMessagesMetadataFilters;
import org.openapitools.client.model.EndpointPostGroupsSchedules;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groupsGet
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return groupsGetCall(offset, limit, _callback);

    }

    /**
     * 
     * Fetch an array of all groups that were created by users existing within the current access token&#39;s bubble. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed.
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @return EndpointGetGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroups groupsGet(Integer offset, Integer limit) throws ApiException {
        ApiResponse<EndpointGetGroups> localVarResp = groupsGetWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an array of all groups that were created by users existing within the current access token&#39;s bubble. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed.
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @return ApiResponse&lt;EndpointGetGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroups> groupsGetWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an array of all groups that were created by users existing within the current access token&#39;s bubble. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed.
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetAsync(Integer offset, Integer limit, final ApiCallback<EndpointGetGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDGet
     * @param ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDGetCall(List<Integer> ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ID)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDGetValidateBeforeCall(List<Integer> ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDGet(Async)");
        }

        return groupsIDGetCall(ID, _callback);

    }

    /**
     * 
     * Fetch an array of groups. You can only retrieve groups created by users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @return EndpointGetGroupsID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroupsID groupsIDGet(List<Integer> ID) throws ApiException {
        ApiResponse<EndpointGetGroupsID> localVarResp = groupsIDGetWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an array of groups. You can only retrieve groups created by users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @return ApiResponse&lt;EndpointGetGroupsID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroupsID> groupsIDGetWithHttpInfo(List<Integer> ID) throws ApiException {
        okhttp3.Call localVarCall = groupsIDGetValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an array of groups. You can only retrieve groups created by users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDGetAsync(List<Integer> ID, final ApiCallback<EndpointGetGroupsID> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDGetValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDMembershipsDelete
     * @param ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMembershipsDeleteCall(Integer ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}/memberships"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDMembershipsDeleteValidateBeforeCall(Integer ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDMembershipsDelete(Async)");
        }

        return groupsIDMembershipsDeleteCall(ID, _callback);

    }

    /**
     * 
     * Leave a group that you are a member of and that was created by a user who exists within the current access token&#39;s bubble.
     * @param ID  (required)
     * @return EndpointDeleteGroupsIDMemberships
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointDeleteGroupsIDMemberships groupsIDMembershipsDelete(Integer ID) throws ApiException {
        ApiResponse<EndpointDeleteGroupsIDMemberships> localVarResp = groupsIDMembershipsDeleteWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * 
     * Leave a group that you are a member of and that was created by a user who exists within the current access token&#39;s bubble.
     * @param ID  (required)
     * @return ApiResponse&lt;EndpointDeleteGroupsIDMemberships&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointDeleteGroupsIDMemberships> groupsIDMembershipsDeleteWithHttpInfo(Integer ID) throws ApiException {
        okhttp3.Call localVarCall = groupsIDMembershipsDeleteValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<EndpointDeleteGroupsIDMemberships>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Leave a group that you are a member of and that was created by a user who exists within the current access token&#39;s bubble.
     * @param ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMembershipsDeleteAsync(Integer ID, final ApiCallback<EndpointDeleteGroupsIDMemberships> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDMembershipsDeleteValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<EndpointDeleteGroupsIDMemberships>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDMembershipsGet
     * @param ID  (required)
     * @param moderatorsOnly  (optional, default to false)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMembershipsGetCall(List<Integer> ID, Boolean moderatorsOnly, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}/memberships"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ID)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moderatorsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moderators_only", moderatorsOnly));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDMembershipsGetValidateBeforeCall(List<Integer> ID, Boolean moderatorsOnly, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDMembershipsGet(Async)");
        }

        return groupsIDMembershipsGetCall(ID, moderatorsOnly, offset, _callback);

    }

    /**
     * 
     * Fetch an array of users who are members of specific groups that you are also a member of. You can only retrieve users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @param moderatorsOnly  (optional, default to false)
     * @param offset  (optional, default to 0)
     * @return EndpointGetGroupsIDMemberships
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroupsIDMemberships groupsIDMembershipsGet(List<Integer> ID, Boolean moderatorsOnly, Integer offset) throws ApiException {
        ApiResponse<EndpointGetGroupsIDMemberships> localVarResp = groupsIDMembershipsGetWithHttpInfo(ID, moderatorsOnly, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an array of users who are members of specific groups that you are also a member of. You can only retrieve users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @param moderatorsOnly  (optional, default to false)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;EndpointGetGroupsIDMemberships&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroupsIDMemberships> groupsIDMembershipsGetWithHttpInfo(List<Integer> ID, Boolean moderatorsOnly, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = groupsIDMembershipsGetValidateBeforeCall(ID, moderatorsOnly, offset, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsIDMemberships>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an array of users who are members of specific groups that you are also a member of. You can only retrieve users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @param moderatorsOnly  (optional, default to false)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMembershipsGetAsync(List<Integer> ID, Boolean moderatorsOnly, Integer offset, final ApiCallback<EndpointGetGroupsIDMemberships> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDMembershipsGetValidateBeforeCall(ID, moderatorsOnly, offset, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsIDMemberships>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDMembershipsPatch
     * @param ID  (required)
     * @param userId  (required)
     * @param moderator  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMembershipsPatchCall(Integer ID, Integer userId, Boolean moderator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}/memberships"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moderator != null) {
            localVarFormParams.put("moderator", moderator);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDMembershipsPatchValidateBeforeCall(Integer ID, Integer userId, Boolean moderator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDMembershipsPatch(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling groupsIDMembershipsPatch(Async)");
        }

        return groupsIDMembershipsPatchCall(ID, userId, moderator, _callback);

    }

    /**
     * 
     * Promote or demote a member&#39;s privileges within a group that you created. The user must exist within the current access token&#39;s bubble and be an existing member of the group.
     * @param ID  (required)
     * @param userId  (required)
     * @param moderator  (optional, default to false)
     * @return EndpointPatchGroupsIDMemberships
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPatchGroupsIDMemberships groupsIDMembershipsPatch(Integer ID, Integer userId, Boolean moderator) throws ApiException {
        ApiResponse<EndpointPatchGroupsIDMemberships> localVarResp = groupsIDMembershipsPatchWithHttpInfo(ID, userId, moderator);
        return localVarResp.getData();
    }

    /**
     * 
     * Promote or demote a member&#39;s privileges within a group that you created. The user must exist within the current access token&#39;s bubble and be an existing member of the group.
     * @param ID  (required)
     * @param userId  (required)
     * @param moderator  (optional, default to false)
     * @return ApiResponse&lt;EndpointPatchGroupsIDMemberships&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPatchGroupsIDMemberships> groupsIDMembershipsPatchWithHttpInfo(Integer ID, Integer userId, Boolean moderator) throws ApiException {
        okhttp3.Call localVarCall = groupsIDMembershipsPatchValidateBeforeCall(ID, userId, moderator, null);
        Type localVarReturnType = new TypeToken<EndpointPatchGroupsIDMemberships>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Promote or demote a member&#39;s privileges within a group that you created. The user must exist within the current access token&#39;s bubble and be an existing member of the group.
     * @param ID  (required)
     * @param userId  (required)
     * @param moderator  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMembershipsPatchAsync(Integer ID, Integer userId, Boolean moderator, final ApiCallback<EndpointPatchGroupsIDMemberships> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDMembershipsPatchValidateBeforeCall(ID, userId, moderator, _callback);
        Type localVarReturnType = new TypeToken<EndpointPatchGroupsIDMemberships>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDMembershipsPost
     * @param ID  (required)
     * @param passphrase  (optional)
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMembershipsPostCall(Integer ID, String passphrase, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}/memberships"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (passphrase != null) {
            localVarFormParams.put("passphrase", passphrase);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDMembershipsPostValidateBeforeCall(Integer ID, String passphrase, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDMembershipsPost(Async)");
        }

        return groupsIDMembershipsPostCall(ID, passphrase, userId, _callback);

    }

    /**
     * 
     * Join a group that was created by a user who exists within the current access token&#39;s bubble, or join other users into a group that you created. If you are the group owner, you can pass in a user_id to create membership records for a user you are in a conversation with. The user must exist within the current access token&#39;s bubble. If the group is private, you must successfully pass in its passphrase in order to join. You can obtain the passphrase from the group&#39;s owner.
     * @param ID  (required)
     * @param passphrase  (optional)
     * @param userId  (optional)
     * @return EndpointPostGroupsIDMemberships
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPostGroupsIDMemberships groupsIDMembershipsPost(Integer ID, String passphrase, Integer userId) throws ApiException {
        ApiResponse<EndpointPostGroupsIDMemberships> localVarResp = groupsIDMembershipsPostWithHttpInfo(ID, passphrase, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Join a group that was created by a user who exists within the current access token&#39;s bubble, or join other users into a group that you created. If you are the group owner, you can pass in a user_id to create membership records for a user you are in a conversation with. The user must exist within the current access token&#39;s bubble. If the group is private, you must successfully pass in its passphrase in order to join. You can obtain the passphrase from the group&#39;s owner.
     * @param ID  (required)
     * @param passphrase  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;EndpointPostGroupsIDMemberships&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPostGroupsIDMemberships> groupsIDMembershipsPostWithHttpInfo(Integer ID, String passphrase, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = groupsIDMembershipsPostValidateBeforeCall(ID, passphrase, userId, null);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsIDMemberships>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Join a group that was created by a user who exists within the current access token&#39;s bubble, or join other users into a group that you created. If you are the group owner, you can pass in a user_id to create membership records for a user you are in a conversation with. The user must exist within the current access token&#39;s bubble. If the group is private, you must successfully pass in its passphrase in order to join. You can obtain the passphrase from the group&#39;s owner.
     * @param ID  (required)
     * @param passphrase  (optional)
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMembershipsPostAsync(Integer ID, String passphrase, Integer userId, final ApiCallback<EndpointPostGroupsIDMemberships> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDMembershipsPostValidateBeforeCall(ID, passphrase, userId, _callback);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsIDMemberships>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDMessagesGet
     * @param ID  (required)
     * @param gtMessageId  (optional)
     * @param excludeSelf  (optional, default to false)
     * @param includeDeleted  (optional, default to false)
     * @param date  (optional)
     * @param bubbled  (optional, default to false)
     * @param recordSeen  (optional, default to false)
     * @param timeout  (optional, default to 0)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMessagesGetCall(Integer ID, Integer gtMessageId, Boolean excludeSelf, Boolean includeDeleted, String date, Boolean bubbled, Boolean recordSeen, Integer timeout, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}/messages"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gtMessageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gt_message_id", gtMessageId));
        }

        if (excludeSelf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_self", excludeSelf));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_deleted", includeDeleted));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (bubbled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bubbled", bubbled));
        }

        if (recordSeen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("record_seen", recordSeen));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDMessagesGetValidateBeforeCall(Integer ID, Integer gtMessageId, Boolean excludeSelf, Boolean includeDeleted, String date, Boolean bubbled, Boolean recordSeen, Integer timeout, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDMessagesGet(Async)");
        }

        return groupsIDMessagesGetCall(ID, gtMessageId, excludeSelf, includeDeleted, date, bubbled, recordSeen, timeout, offset, limit, _callback);

    }

    /**
     * 
     * Retrieve the last {limit} messages in the group, for messages authored by users within the current access token&#39;s bubble. If a timeout is 0 or greater, the batch is sorted oldest first. Otherwise, if timeout is a negative number, the transcript is paginated and sorted newest first. Specify a timeout for long polling (which delays the server sending back results for up to n seconds or until results are available, whichever comes first), or default to 0 for immediate results. Optionally record your status as online along with sharing the latest message you&#39;ve seen with other group members. Optionally specify a gt_message_id to retrieve only messages with an ID greater than that specified (such as greater than the latest message ID received in the last poll). Optionally only poll for messages authored by other members of the group, and echo messages authored by you when sending, for a perceived increase in performance. Optionally only retrieve messages that were posted from within the current access token&#39;s bubble. Optionally specify a date formatted as YYYY-MM-DD to retrieve a transcript of messages from a single day. When record_seen is set to true, the new message count for the group is reset to zero.
     * @param ID  (required)
     * @param gtMessageId  (optional)
     * @param excludeSelf  (optional, default to false)
     * @param includeDeleted  (optional, default to false)
     * @param date  (optional)
     * @param bubbled  (optional, default to false)
     * @param recordSeen  (optional, default to false)
     * @param timeout  (optional, default to 0)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @return EndpointGetGroupsIDMessages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroupsIDMessages groupsIDMessagesGet(Integer ID, Integer gtMessageId, Boolean excludeSelf, Boolean includeDeleted, String date, Boolean bubbled, Boolean recordSeen, Integer timeout, Integer offset, Integer limit) throws ApiException {
        ApiResponse<EndpointGetGroupsIDMessages> localVarResp = groupsIDMessagesGetWithHttpInfo(ID, gtMessageId, excludeSelf, includeDeleted, date, bubbled, recordSeen, timeout, offset, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve the last {limit} messages in the group, for messages authored by users within the current access token&#39;s bubble. If a timeout is 0 or greater, the batch is sorted oldest first. Otherwise, if timeout is a negative number, the transcript is paginated and sorted newest first. Specify a timeout for long polling (which delays the server sending back results for up to n seconds or until results are available, whichever comes first), or default to 0 for immediate results. Optionally record your status as online along with sharing the latest message you&#39;ve seen with other group members. Optionally specify a gt_message_id to retrieve only messages with an ID greater than that specified (such as greater than the latest message ID received in the last poll). Optionally only poll for messages authored by other members of the group, and echo messages authored by you when sending, for a perceived increase in performance. Optionally only retrieve messages that were posted from within the current access token&#39;s bubble. Optionally specify a date formatted as YYYY-MM-DD to retrieve a transcript of messages from a single day. When record_seen is set to true, the new message count for the group is reset to zero.
     * @param ID  (required)
     * @param gtMessageId  (optional)
     * @param excludeSelf  (optional, default to false)
     * @param includeDeleted  (optional, default to false)
     * @param date  (optional)
     * @param bubbled  (optional, default to false)
     * @param recordSeen  (optional, default to false)
     * @param timeout  (optional, default to 0)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @return ApiResponse&lt;EndpointGetGroupsIDMessages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroupsIDMessages> groupsIDMessagesGetWithHttpInfo(Integer ID, Integer gtMessageId, Boolean excludeSelf, Boolean includeDeleted, String date, Boolean bubbled, Boolean recordSeen, Integer timeout, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = groupsIDMessagesGetValidateBeforeCall(ID, gtMessageId, excludeSelf, includeDeleted, date, bubbled, recordSeen, timeout, offset, limit, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsIDMessages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the last {limit} messages in the group, for messages authored by users within the current access token&#39;s bubble. If a timeout is 0 or greater, the batch is sorted oldest first. Otherwise, if timeout is a negative number, the transcript is paginated and sorted newest first. Specify a timeout for long polling (which delays the server sending back results for up to n seconds or until results are available, whichever comes first), or default to 0 for immediate results. Optionally record your status as online along with sharing the latest message you&#39;ve seen with other group members. Optionally specify a gt_message_id to retrieve only messages with an ID greater than that specified (such as greater than the latest message ID received in the last poll). Optionally only poll for messages authored by other members of the group, and echo messages authored by you when sending, for a perceived increase in performance. Optionally only retrieve messages that were posted from within the current access token&#39;s bubble. Optionally specify a date formatted as YYYY-MM-DD to retrieve a transcript of messages from a single day. When record_seen is set to true, the new message count for the group is reset to zero.
     * @param ID  (required)
     * @param gtMessageId  (optional)
     * @param excludeSelf  (optional, default to false)
     * @param includeDeleted  (optional, default to false)
     * @param date  (optional)
     * @param bubbled  (optional, default to false)
     * @param recordSeen  (optional, default to false)
     * @param timeout  (optional, default to 0)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMessagesGetAsync(Integer ID, Integer gtMessageId, Boolean excludeSelf, Boolean includeDeleted, String date, Boolean bubbled, Boolean recordSeen, Integer timeout, Integer offset, Integer limit, final ApiCallback<EndpointGetGroupsIDMessages> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDMessagesGetValidateBeforeCall(ID, gtMessageId, excludeSelf, includeDeleted, date, bubbled, recordSeen, timeout, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsIDMessages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDMessagesPost
     * @param ID  (required)
     * @param textRaw  (required)
     * @param metadata0Key  (optional)
     * @param metadata0Privacy  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Privacy  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Privacy  (optional)
     * @param metadata2Values  (optional)
     * @param textEmoticons  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMessagesPostCall(Integer ID, String textRaw, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values, Boolean textEmoticons, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}/messages"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadata0Key != null) {
            localVarFormParams.put("metadata_0_key", metadata0Key);
        }

        if (metadata0Privacy != null) {
            localVarFormParams.put("metadata_0_privacy", metadata0Privacy);
        }

        if (metadata0Values != null) {
            localVarFormParams.put("metadata_0_values[]", metadata0Values);
        }

        if (metadata1Key != null) {
            localVarFormParams.put("metadata_1_key", metadata1Key);
        }

        if (metadata1Privacy != null) {
            localVarFormParams.put("metadata_1_privacy", metadata1Privacy);
        }

        if (metadata1Values != null) {
            localVarFormParams.put("metadata_1_values[]", metadata1Values);
        }

        if (metadata2Key != null) {
            localVarFormParams.put("metadata_2_key", metadata2Key);
        }

        if (metadata2Privacy != null) {
            localVarFormParams.put("metadata_2_privacy", metadata2Privacy);
        }

        if (metadata2Values != null) {
            localVarFormParams.put("metadata_2_values[]", metadata2Values);
        }

        if (textEmoticons != null) {
            localVarFormParams.put("text_emoticons", textEmoticons);
        }

        if (textRaw != null) {
            localVarFormParams.put("text_raw", textRaw);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDMessagesPostValidateBeforeCall(Integer ID, String textRaw, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values, Boolean textEmoticons, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDMessagesPost(Async)");
        }

        // verify the required parameter 'textRaw' is set
        if (textRaw == null) {
            throw new ApiException("Missing the required parameter 'textRaw' when calling groupsIDMessagesPost(Async)");
        }

        return groupsIDMessagesPostCall(ID, textRaw, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, textEmoticons, _callback);

    }

    /**
     * 
     * Post a message to a group that you are a member of and that was created by a user who exists within the current access token&#39;s bubble. Optionally specify whether emoticons should be parsed into smiley images. Additionally, optionally attach a single metadata key/value pair to the group message upon submission.
     * @param ID  (required)
     * @param textRaw  (required)
     * @param metadata0Key  (optional)
     * @param metadata0Privacy  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Privacy  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Privacy  (optional)
     * @param metadata2Values  (optional)
     * @param textEmoticons  (optional, default to false)
     * @return EndpointPostGroupsIDMessages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPostGroupsIDMessages groupsIDMessagesPost(Integer ID, String textRaw, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values, Boolean textEmoticons) throws ApiException {
        ApiResponse<EndpointPostGroupsIDMessages> localVarResp = groupsIDMessagesPostWithHttpInfo(ID, textRaw, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, textEmoticons);
        return localVarResp.getData();
    }

    /**
     * 
     * Post a message to a group that you are a member of and that was created by a user who exists within the current access token&#39;s bubble. Optionally specify whether emoticons should be parsed into smiley images. Additionally, optionally attach a single metadata key/value pair to the group message upon submission.
     * @param ID  (required)
     * @param textRaw  (required)
     * @param metadata0Key  (optional)
     * @param metadata0Privacy  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Privacy  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Privacy  (optional)
     * @param metadata2Values  (optional)
     * @param textEmoticons  (optional, default to false)
     * @return ApiResponse&lt;EndpointPostGroupsIDMessages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPostGroupsIDMessages> groupsIDMessagesPostWithHttpInfo(Integer ID, String textRaw, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values, Boolean textEmoticons) throws ApiException {
        okhttp3.Call localVarCall = groupsIDMessagesPostValidateBeforeCall(ID, textRaw, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, textEmoticons, null);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsIDMessages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Post a message to a group that you are a member of and that was created by a user who exists within the current access token&#39;s bubble. Optionally specify whether emoticons should be parsed into smiley images. Additionally, optionally attach a single metadata key/value pair to the group message upon submission.
     * @param ID  (required)
     * @param textRaw  (required)
     * @param metadata0Key  (optional)
     * @param metadata0Privacy  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Privacy  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Privacy  (optional)
     * @param metadata2Values  (optional)
     * @param textEmoticons  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDMessagesPostAsync(Integer ID, String textRaw, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values, Boolean textEmoticons, final ApiCallback<EndpointPostGroupsIDMessages> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDMessagesPostValidateBeforeCall(ID, textRaw, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, textEmoticons, _callback);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsIDMessages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDPatch
     * @param ID  (required)
     * @param description  (optional)
     * @param name  (optional)
     * @param passphrase  (optional)
     * @param privacy  (optional)
     * @param slug  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDPatchCall(Integer ID, String description, String name, String passphrase, String privacy, String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (passphrase != null) {
            localVarFormParams.put("passphrase", passphrase);
        }

        if (privacy != null) {
            localVarFormParams.put("privacy", privacy);
        }

        if (slug != null) {
            localVarFormParams.put("slug", slug);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDPatchValidateBeforeCall(Integer ID, String description, String name, String passphrase, String privacy, String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDPatch(Async)");
        }

        return groupsIDPatchCall(ID, description, name, passphrase, privacy, slug, _callback);

    }

    /**
     * 
     * Modify a group you previously created.
     * @param ID  (required)
     * @param description  (optional)
     * @param name  (optional)
     * @param passphrase  (optional)
     * @param privacy  (optional)
     * @param slug  (optional)
     * @return EndpointPatchGroupsID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPatchGroupsID groupsIDPatch(Integer ID, String description, String name, String passphrase, String privacy, String slug) throws ApiException {
        ApiResponse<EndpointPatchGroupsID> localVarResp = groupsIDPatchWithHttpInfo(ID, description, name, passphrase, privacy, slug);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify a group you previously created.
     * @param ID  (required)
     * @param description  (optional)
     * @param name  (optional)
     * @param passphrase  (optional)
     * @param privacy  (optional)
     * @param slug  (optional)
     * @return ApiResponse&lt;EndpointPatchGroupsID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPatchGroupsID> groupsIDPatchWithHttpInfo(Integer ID, String description, String name, String passphrase, String privacy, String slug) throws ApiException {
        okhttp3.Call localVarCall = groupsIDPatchValidateBeforeCall(ID, description, name, passphrase, privacy, slug, null);
        Type localVarReturnType = new TypeToken<EndpointPatchGroupsID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify a group you previously created.
     * @param ID  (required)
     * @param description  (optional)
     * @param name  (optional)
     * @param passphrase  (optional)
     * @param privacy  (optional)
     * @param slug  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDPatchAsync(Integer ID, String description, String name, String passphrase, String privacy, String slug, final ApiCallback<EndpointPatchGroupsID> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDPatchValidateBeforeCall(ID, description, name, passphrase, privacy, slug, _callback);
        Type localVarReturnType = new TypeToken<EndpointPatchGroupsID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDSchedulesPost
     * @param ID  (required)
     * @param date  (optional)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param rollUp  (optional, default to false)
     * @param sort  (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDSchedulesPostCall(List<Integer> ID, String date, Integer limit, Integer offset, Boolean rollUp, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}/schedules"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ID)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarFormParams.put("date", date);
        }

        if (limit != null) {
            localVarFormParams.put("limit", limit);
        }

        if (offset != null) {
            localVarFormParams.put("offset", offset);
        }

        if (rollUp != null) {
            localVarFormParams.put("roll_up", rollUp);
        }

        if (sort != null) {
            localVarFormParams.put("sort", sort);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDSchedulesPostValidateBeforeCall(List<Integer> ID, String date, Integer limit, Integer offset, Boolean rollUp, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDSchedulesPost(Async)");
        }

        return groupsIDSchedulesPostCall(ID, date, limit, offset, rollUp, sort, _callback);

    }

    /**
     * 
     * Paginated report of information about group messages contributed by conversation and date. Only groups you&#39;re a member of and group messages authored by users existing within the current access token&#39;s bubble are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages within the group discussion(s).
     * @param ID  (required)
     * @param date  (optional)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param rollUp  (optional, default to false)
     * @param sort  (optional, default to desc)
     * @return EndpointPostGroupsIDSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPostGroupsIDSchedules groupsIDSchedulesPost(List<Integer> ID, String date, Integer limit, Integer offset, Boolean rollUp, String sort) throws ApiException {
        ApiResponse<EndpointPostGroupsIDSchedules> localVarResp = groupsIDSchedulesPostWithHttpInfo(ID, date, limit, offset, rollUp, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Paginated report of information about group messages contributed by conversation and date. Only groups you&#39;re a member of and group messages authored by users existing within the current access token&#39;s bubble are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages within the group discussion(s).
     * @param ID  (required)
     * @param date  (optional)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param rollUp  (optional, default to false)
     * @param sort  (optional, default to desc)
     * @return ApiResponse&lt;EndpointPostGroupsIDSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPostGroupsIDSchedules> groupsIDSchedulesPostWithHttpInfo(List<Integer> ID, String date, Integer limit, Integer offset, Boolean rollUp, String sort) throws ApiException {
        okhttp3.Call localVarCall = groupsIDSchedulesPostValidateBeforeCall(ID, date, limit, offset, rollUp, sort, null);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsIDSchedules>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Paginated report of information about group messages contributed by conversation and date. Only groups you&#39;re a member of and group messages authored by users existing within the current access token&#39;s bubble are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages within the group discussion(s).
     * @param ID  (required)
     * @param date  (optional)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param rollUp  (optional, default to false)
     * @param sort  (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDSchedulesPostAsync(List<Integer> ID, String date, Integer limit, Integer offset, Boolean rollUp, String sort, final ApiCallback<EndpointPostGroupsIDSchedules> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDSchedulesPostValidateBeforeCall(ID, date, limit, offset, rollUp, sort, _callback);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsIDSchedules>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIDStatusesGet
     * @param ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDStatusesGetCall(List<Integer> ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{ID}/statuses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ID)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIDStatusesGetValidateBeforeCall(List<Integer> ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsIDStatusesGet(Async)");
        }

        return groupsIDStatusesGetCall(ID, _callback);

    }

    /**
     * 
     * Status information about your current relationship with one or more groups you are a member of, provided the users who created the groups exist within the current access token&#39;s bubble.
     * @param ID  (required)
     * @return EndpointGetGroupsIDStatuses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroupsIDStatuses groupsIDStatusesGet(List<Integer> ID) throws ApiException {
        ApiResponse<EndpointGetGroupsIDStatuses> localVarResp = groupsIDStatusesGetWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * 
     * Status information about your current relationship with one or more groups you are a member of, provided the users who created the groups exist within the current access token&#39;s bubble.
     * @param ID  (required)
     * @return ApiResponse&lt;EndpointGetGroupsIDStatuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroupsIDStatuses> groupsIDStatusesGetWithHttpInfo(List<Integer> ID) throws ApiException {
        okhttp3.Call localVarCall = groupsIDStatusesGetValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsIDStatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Status information about your current relationship with one or more groups you are a member of, provided the users who created the groups exist within the current access token&#39;s bubble.
     * @param ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIDStatusesGetAsync(List<Integer> ID, final ApiCallback<EndpointGetGroupsIDStatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIDStatusesGetValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsIDStatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsMessagesIDDelete
     * @param ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDDeleteCall(List<Integer> ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/messages/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ID)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsMessagesIDDeleteValidateBeforeCall(List<Integer> ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsMessagesIDDelete(Async)");
        }

        return groupsMessagesIDDeleteCall(ID, _callback);

    }

    /**
     * 
     * Delete an array of group messages. You must be the owner or moderator of the group.
     * @param ID  (required)
     * @return EndpointDeleteGroupsMessagesID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointDeleteGroupsMessagesID groupsMessagesIDDelete(List<Integer> ID) throws ApiException {
        ApiResponse<EndpointDeleteGroupsMessagesID> localVarResp = groupsMessagesIDDeleteWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete an array of group messages. You must be the owner or moderator of the group.
     * @param ID  (required)
     * @return ApiResponse&lt;EndpointDeleteGroupsMessagesID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointDeleteGroupsMessagesID> groupsMessagesIDDeleteWithHttpInfo(List<Integer> ID) throws ApiException {
        okhttp3.Call localVarCall = groupsMessagesIDDeleteValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<EndpointDeleteGroupsMessagesID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete an array of group messages. You must be the owner or moderator of the group.
     * @param ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDDeleteAsync(List<Integer> ID, final ApiCallback<EndpointDeleteGroupsMessagesID> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsMessagesIDDeleteValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<EndpointDeleteGroupsMessagesID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsMessagesIDGet
     * @param ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDGetCall(List<Integer> ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/messages/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ID)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsMessagesIDGetValidateBeforeCall(List<Integer> ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsMessagesIDGet(Async)");
        }

        return groupsMessagesIDGetCall(ID, _callback);

    }

    /**
     * 
     * Fetch an array of group messages. You can only retrieve messages authored by you or by users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @return EndpointGetGroupsMessagesID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroupsMessagesID groupsMessagesIDGet(List<Integer> ID) throws ApiException {
        ApiResponse<EndpointGetGroupsMessagesID> localVarResp = groupsMessagesIDGetWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an array of group messages. You can only retrieve messages authored by you or by users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @return ApiResponse&lt;EndpointGetGroupsMessagesID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroupsMessagesID> groupsMessagesIDGetWithHttpInfo(List<Integer> ID) throws ApiException {
        okhttp3.Call localVarCall = groupsMessagesIDGetValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsMessagesID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an array of group messages. You can only retrieve messages authored by you or by users existing within the current access token&#39;s bubble.
     * @param ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDGetAsync(List<Integer> ID, final ApiCallback<EndpointGetGroupsMessagesID> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsMessagesIDGetValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsMessagesID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsMessagesIDMetadataCollectionsGet
     * @param ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDMetadataCollectionsGetCall(Integer ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/messages/{ID}/metadata/collections"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsMessagesIDMetadataCollectionsGetValidateBeforeCall(Integer ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsMessagesIDMetadataCollectionsGet(Async)");
        }

        return groupsMessagesIDMetadataCollectionsGetCall(ID, _callback);

    }

    /**
     * 
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble. Metadata will be grouped by key.
     * @param ID  (required)
     * @return EndpointGetGroupsMessagesIDMetadataCollections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroupsMessagesIDMetadataCollections groupsMessagesIDMetadataCollectionsGet(Integer ID) throws ApiException {
        ApiResponse<EndpointGetGroupsMessagesIDMetadataCollections> localVarResp = groupsMessagesIDMetadataCollectionsGetWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble. Metadata will be grouped by key.
     * @param ID  (required)
     * @return ApiResponse&lt;EndpointGetGroupsMessagesIDMetadataCollections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroupsMessagesIDMetadataCollections> groupsMessagesIDMetadataCollectionsGetWithHttpInfo(Integer ID) throws ApiException {
        okhttp3.Call localVarCall = groupsMessagesIDMetadataCollectionsGetValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsMessagesIDMetadataCollections>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble. Metadata will be grouped by key.
     * @param ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDMetadataCollectionsGetAsync(Integer ID, final ApiCallback<EndpointGetGroupsMessagesIDMetadataCollections> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsMessagesIDMetadataCollectionsGetValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsMessagesIDMetadataCollections>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsMessagesIDMetadataGet
     * @param ID  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDMetadataGetCall(Integer ID, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/messages/{ID}/metadata"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsMessagesIDMetadataGetValidateBeforeCall(Integer ID, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsMessagesIDMetadataGet(Async)");
        }

        return groupsMessagesIDMetadataGetCall(ID, offset, limit, _callback);

    }

    /**
     * 
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble.
     * @param ID  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @return EndpointGetGroupsMessagesIDMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroupsMessagesIDMetadata groupsMessagesIDMetadataGet(Integer ID, Integer offset, Integer limit) throws ApiException {
        ApiResponse<EndpointGetGroupsMessagesIDMetadata> localVarResp = groupsMessagesIDMetadataGetWithHttpInfo(ID, offset, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble.
     * @param ID  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @return ApiResponse&lt;EndpointGetGroupsMessagesIDMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroupsMessagesIDMetadata> groupsMessagesIDMetadataGetWithHttpInfo(Integer ID, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = groupsMessagesIDMetadataGetValidateBeforeCall(ID, offset, limit, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsMessagesIDMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all key/value pairs attached to the current message that you have access to, so long as the user who created the group exists within the current access token&#39;s bubble. This includes all public metadata, bubbled metadata that was created by an access token existing within the current bubble, user metadata that was created by you, or private metadata created by you from an access token existing within the current bubble.
     * @param ID  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDMetadataGetAsync(Integer ID, Integer offset, Integer limit, final ApiCallback<EndpointGetGroupsMessagesIDMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsMessagesIDMetadataGetValidateBeforeCall(ID, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsMessagesIDMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsMessagesIDMetadataPost
     * @param ID  (required)
     * @param metadata0Key  (optional)
     * @param metadata0Privacy  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Privacy  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Privacy  (optional)
     * @param metadata2Values  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDMetadataPostCall(Integer ID, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/messages/{ID}/metadata"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadata0Key != null) {
            localVarFormParams.put("metadata_0_key", metadata0Key);
        }

        if (metadata0Privacy != null) {
            localVarFormParams.put("metadata_0_privacy", metadata0Privacy);
        }

        if (metadata0Values != null) {
            localVarFormParams.put("metadata_0_values[]", metadata0Values);
        }

        if (metadata1Key != null) {
            localVarFormParams.put("metadata_1_key", metadata1Key);
        }

        if (metadata1Privacy != null) {
            localVarFormParams.put("metadata_1_privacy", metadata1Privacy);
        }

        if (metadata1Values != null) {
            localVarFormParams.put("metadata_1_values[]", metadata1Values);
        }

        if (metadata2Key != null) {
            localVarFormParams.put("metadata_2_key", metadata2Key);
        }

        if (metadata2Privacy != null) {
            localVarFormParams.put("metadata_2_privacy", metadata2Privacy);
        }

        if (metadata2Values != null) {
            localVarFormParams.put("metadata_2_values[]", metadata2Values);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsMessagesIDMetadataPostValidateBeforeCall(Integer ID, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling groupsMessagesIDMetadataPost(Async)");
        }

        return groupsMessagesIDMetadataPostCall(ID, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, _callback);

    }

    /**
     * 
     * Attach one-to-many key/value pairs of metadata to a group message, so long as the user who authored the message exists within the current access token&#39;s bubble and you are a member of their group. A key is unique for each author/bubble combination. Attaching metadata with an existing key that was previously created by you, from within the same bubble, overwrites the key with the new value or set of values. The privacy setting allows you to specify who will have access to the metadata: Public metadata by anyone using an access token which grants them access to the user who authored the message and who is also a member of the group the message belongs to; Bubbled metadata by anyone using an access token existing within the current bubble who is also a member of the group the message belongs to; User metadata by you, so long as you are using an access token which grants you access to the user who authored the message and you remain a member of the group; Private metadata by you, so long as you are using an access token existing within the current bubble and you remain a member of the group.
     * @param ID  (required)
     * @param metadata0Key  (optional)
     * @param metadata0Privacy  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Privacy  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Privacy  (optional)
     * @param metadata2Values  (optional)
     * @return EndpointPostGroupsMessagesIDMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPostGroupsMessagesIDMetadata groupsMessagesIDMetadataPost(Integer ID, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values) throws ApiException {
        ApiResponse<EndpointPostGroupsMessagesIDMetadata> localVarResp = groupsMessagesIDMetadataPostWithHttpInfo(ID, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values);
        return localVarResp.getData();
    }

    /**
     * 
     * Attach one-to-many key/value pairs of metadata to a group message, so long as the user who authored the message exists within the current access token&#39;s bubble and you are a member of their group. A key is unique for each author/bubble combination. Attaching metadata with an existing key that was previously created by you, from within the same bubble, overwrites the key with the new value or set of values. The privacy setting allows you to specify who will have access to the metadata: Public metadata by anyone using an access token which grants them access to the user who authored the message and who is also a member of the group the message belongs to; Bubbled metadata by anyone using an access token existing within the current bubble who is also a member of the group the message belongs to; User metadata by you, so long as you are using an access token which grants you access to the user who authored the message and you remain a member of the group; Private metadata by you, so long as you are using an access token existing within the current bubble and you remain a member of the group.
     * @param ID  (required)
     * @param metadata0Key  (optional)
     * @param metadata0Privacy  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Privacy  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Privacy  (optional)
     * @param metadata2Values  (optional)
     * @return ApiResponse&lt;EndpointPostGroupsMessagesIDMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPostGroupsMessagesIDMetadata> groupsMessagesIDMetadataPostWithHttpInfo(Integer ID, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values) throws ApiException {
        okhttp3.Call localVarCall = groupsMessagesIDMetadataPostValidateBeforeCall(ID, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, null);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsMessagesIDMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attach one-to-many key/value pairs of metadata to a group message, so long as the user who authored the message exists within the current access token&#39;s bubble and you are a member of their group. A key is unique for each author/bubble combination. Attaching metadata with an existing key that was previously created by you, from within the same bubble, overwrites the key with the new value or set of values. The privacy setting allows you to specify who will have access to the metadata: Public metadata by anyone using an access token which grants them access to the user who authored the message and who is also a member of the group the message belongs to; Bubbled metadata by anyone using an access token existing within the current bubble who is also a member of the group the message belongs to; User metadata by you, so long as you are using an access token which grants you access to the user who authored the message and you remain a member of the group; Private metadata by you, so long as you are using an access token existing within the current bubble and you remain a member of the group.
     * @param ID  (required)
     * @param metadata0Key  (optional)
     * @param metadata0Privacy  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Privacy  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Privacy  (optional)
     * @param metadata2Values  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesIDMetadataPostAsync(Integer ID, String metadata0Key, String metadata0Privacy, List<String> metadata0Values, String metadata1Key, String metadata1Privacy, List<String> metadata1Values, String metadata2Key, String metadata2Privacy, List<String> metadata2Values, final ApiCallback<EndpointPostGroupsMessagesIDMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsMessagesIDMetadataPostValidateBeforeCall(ID, metadata0Key, metadata0Privacy, metadata0Values, metadata1Key, metadata1Privacy, metadata1Values, metadata2Key, metadata2Privacy, metadata2Values, _callback);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsMessagesIDMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsMessagesMetadataFiltersPost
     * @param limit  (optional, default to 50)
     * @param metadata0Key  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Values  (optional)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesMetadataFiltersPostCall(Integer limit, String metadata0Key, List<String> metadata0Values, String metadata1Key, List<String> metadata1Values, String metadata2Key, List<String> metadata2Values, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/messages/metadata/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarFormParams.put("limit", limit);
        }

        if (metadata0Key != null) {
            localVarFormParams.put("metadata_0_key", metadata0Key);
        }

        if (metadata0Values != null) {
            localVarFormParams.put("metadata_0_values[]", metadata0Values);
        }

        if (metadata1Key != null) {
            localVarFormParams.put("metadata_1_key", metadata1Key);
        }

        if (metadata1Values != null) {
            localVarFormParams.put("metadata_1_values[]", metadata1Values);
        }

        if (metadata2Key != null) {
            localVarFormParams.put("metadata_2_key", metadata2Key);
        }

        if (metadata2Values != null) {
            localVarFormParams.put("metadata_2_values[]", metadata2Values);
        }

        if (offset != null) {
            localVarFormParams.put("offset", offset);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsMessagesMetadataFiltersPostValidateBeforeCall(Integer limit, String metadata0Key, List<String> metadata0Values, String metadata1Key, List<String> metadata1Values, String metadata2Key, List<String> metadata2Values, Integer offset, final ApiCallback _callback) throws ApiException {
        return groupsMessagesMetadataFiltersPostCall(limit, metadata0Key, metadata0Values, metadata1Key, metadata1Values, metadata2Key, metadata2Values, offset, _callback);

    }

    /**
     * 
     * Paginated listing of messages filtered by arbitrary metadata criteria. Messages must match on all key/value pairs passed in. Messages may only match on one value of an array passed in. However, messages are sorted based on how many distinct values they match on (most matches first).
     * @param limit  (optional, default to 50)
     * @param metadata0Key  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Values  (optional)
     * @param offset  (optional, default to 0)
     * @return EndpointPostGroupsMessagesMetadataFilters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPostGroupsMessagesMetadataFilters groupsMessagesMetadataFiltersPost(Integer limit, String metadata0Key, List<String> metadata0Values, String metadata1Key, List<String> metadata1Values, String metadata2Key, List<String> metadata2Values, Integer offset) throws ApiException {
        ApiResponse<EndpointPostGroupsMessagesMetadataFilters> localVarResp = groupsMessagesMetadataFiltersPostWithHttpInfo(limit, metadata0Key, metadata0Values, metadata1Key, metadata1Values, metadata2Key, metadata2Values, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Paginated listing of messages filtered by arbitrary metadata criteria. Messages must match on all key/value pairs passed in. Messages may only match on one value of an array passed in. However, messages are sorted based on how many distinct values they match on (most matches first).
     * @param limit  (optional, default to 50)
     * @param metadata0Key  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Values  (optional)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;EndpointPostGroupsMessagesMetadataFilters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPostGroupsMessagesMetadataFilters> groupsMessagesMetadataFiltersPostWithHttpInfo(Integer limit, String metadata0Key, List<String> metadata0Values, String metadata1Key, List<String> metadata1Values, String metadata2Key, List<String> metadata2Values, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = groupsMessagesMetadataFiltersPostValidateBeforeCall(limit, metadata0Key, metadata0Values, metadata1Key, metadata1Values, metadata2Key, metadata2Values, offset, null);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsMessagesMetadataFilters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Paginated listing of messages filtered by arbitrary metadata criteria. Messages must match on all key/value pairs passed in. Messages may only match on one value of an array passed in. However, messages are sorted based on how many distinct values they match on (most matches first).
     * @param limit  (optional, default to 50)
     * @param metadata0Key  (optional)
     * @param metadata0Values  (optional)
     * @param metadata1Key  (optional)
     * @param metadata1Values  (optional)
     * @param metadata2Key  (optional)
     * @param metadata2Values  (optional)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsMessagesMetadataFiltersPostAsync(Integer limit, String metadata0Key, List<String> metadata0Values, String metadata1Key, List<String> metadata1Values, String metadata2Key, List<String> metadata2Values, Integer offset, final ApiCallback<EndpointPostGroupsMessagesMetadataFilters> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsMessagesMetadataFiltersPostValidateBeforeCall(limit, metadata0Key, metadata0Values, metadata1Key, metadata1Values, metadata2Key, metadata2Values, offset, _callback);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsMessagesMetadataFilters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsPost
     * @param description  (required)
     * @param name  (required)
     * @param privacy  (required)
     * @param slug  (required)
     * @param passphrase  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPostCall(String description, String name, String privacy, String slug, String passphrase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (passphrase != null) {
            localVarFormParams.put("passphrase", passphrase);
        }

        if (privacy != null) {
            localVarFormParams.put("privacy", privacy);
        }

        if (slug != null) {
            localVarFormParams.put("slug", slug);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsPostValidateBeforeCall(String description, String name, String privacy, String slug, String passphrase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling groupsPost(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling groupsPost(Async)");
        }

        // verify the required parameter 'privacy' is set
        if (privacy == null) {
            throw new ApiException("Missing the required parameter 'privacy' when calling groupsPost(Async)");
        }

        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling groupsPost(Async)");
        }

        return groupsPostCall(description, name, privacy, slug, passphrase, _callback);

    }

    /**
     * 
     * Create a new group for other members to join. Any user who is using an access token whose bubble you exist in can join your group provided it is not a private group. Private groups can only be joined by members who know its passphrase. Unlisted groups can be joined by anybody as long as they know the Group ID, but they are not referenced anywhere to non-members. Public groups can be joined by anybody, are discoverable, and anyone can see the public groups a user is a member of, provided the group owner exists in their access token&#39;s bubble. Groups each have their own discussions, transcripts, schedules, and ability to list and search their members.
     * @param description  (required)
     * @param name  (required)
     * @param privacy  (required)
     * @param slug  (required)
     * @param passphrase  (optional)
     * @return EndpointPostGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPostGroups groupsPost(String description, String name, String privacy, String slug, String passphrase) throws ApiException {
        ApiResponse<EndpointPostGroups> localVarResp = groupsPostWithHttpInfo(description, name, privacy, slug, passphrase);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new group for other members to join. Any user who is using an access token whose bubble you exist in can join your group provided it is not a private group. Private groups can only be joined by members who know its passphrase. Unlisted groups can be joined by anybody as long as they know the Group ID, but they are not referenced anywhere to non-members. Public groups can be joined by anybody, are discoverable, and anyone can see the public groups a user is a member of, provided the group owner exists in their access token&#39;s bubble. Groups each have their own discussions, transcripts, schedules, and ability to list and search their members.
     * @param description  (required)
     * @param name  (required)
     * @param privacy  (required)
     * @param slug  (required)
     * @param passphrase  (optional)
     * @return ApiResponse&lt;EndpointPostGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPostGroups> groupsPostWithHttpInfo(String description, String name, String privacy, String slug, String passphrase) throws ApiException {
        okhttp3.Call localVarCall = groupsPostValidateBeforeCall(description, name, privacy, slug, passphrase, null);
        Type localVarReturnType = new TypeToken<EndpointPostGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new group for other members to join. Any user who is using an access token whose bubble you exist in can join your group provided it is not a private group. Private groups can only be joined by members who know its passphrase. Unlisted groups can be joined by anybody as long as they know the Group ID, but they are not referenced anywhere to non-members. Public groups can be joined by anybody, are discoverable, and anyone can see the public groups a user is a member of, provided the group owner exists in their access token&#39;s bubble. Groups each have their own discussions, transcripts, schedules, and ability to list and search their members.
     * @param description  (required)
     * @param name  (required)
     * @param privacy  (required)
     * @param slug  (required)
     * @param passphrase  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPostAsync(String description, String name, String privacy, String slug, String passphrase, final ApiCallback<EndpointPostGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsPostValidateBeforeCall(description, name, privacy, slug, passphrase, _callback);
        Type localVarReturnType = new TypeToken<EndpointPostGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsSchedulesPost
     * @param date  (optional)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param rollUp  (optional, default to false)
     * @param sort  (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsSchedulesPostCall(String date, Integer limit, Integer offset, Boolean rollUp, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarFormParams.put("date", date);
        }

        if (limit != null) {
            localVarFormParams.put("limit", limit);
        }

        if (offset != null) {
            localVarFormParams.put("offset", offset);
        }

        if (rollUp != null) {
            localVarFormParams.put("roll_up", rollUp);
        }

        if (sort != null) {
            localVarFormParams.put("sort", sort);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsSchedulesPostValidateBeforeCall(String date, Integer limit, Integer offset, Boolean rollUp, String sort, final ApiCallback _callback) throws ApiException {
        return groupsSchedulesPostCall(date, limit, offset, rollUp, sort, _callback);

    }

    /**
     * 
     * Paginated report of information about messages contributed by group and date. Only groups you&#39;re a member of and group messages authored by users the current access token has access to are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages.
     * @param date  (optional)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param rollUp  (optional, default to false)
     * @param sort  (optional, default to desc)
     * @return EndpointPostGroupsSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPostGroupsSchedules groupsSchedulesPost(String date, Integer limit, Integer offset, Boolean rollUp, String sort) throws ApiException {
        ApiResponse<EndpointPostGroupsSchedules> localVarResp = groupsSchedulesPostWithHttpInfo(date, limit, offset, rollUp, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Paginated report of information about messages contributed by group and date. Only groups you&#39;re a member of and group messages authored by users the current access token has access to are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages.
     * @param date  (optional)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param rollUp  (optional, default to false)
     * @param sort  (optional, default to desc)
     * @return ApiResponse&lt;EndpointPostGroupsSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPostGroupsSchedules> groupsSchedulesPostWithHttpInfo(String date, Integer limit, Integer offset, Boolean rollUp, String sort) throws ApiException {
        okhttp3.Call localVarCall = groupsSchedulesPostValidateBeforeCall(date, limit, offset, rollUp, sort, null);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsSchedules>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Paginated report of information about messages contributed by group and date. Only groups you&#39;re a member of and group messages authored by users the current access token has access to are considered in the calculations. Optionally roll up all groups to retrieve one record per date. Optionally specify a date formatted as YYYY-MM-DD to retrieve information just from the single date, along with additional navigational information, which is useful when generating a transcript for a single day and wanting to reference the previous and next days there were messages.
     * @param date  (optional)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param rollUp  (optional, default to false)
     * @param sort  (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsSchedulesPostAsync(String date, Integer limit, Integer offset, Boolean rollUp, String sort, final ApiCallback<EndpointPostGroupsSchedules> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsSchedulesPostValidateBeforeCall(date, limit, offset, rollUp, sort, _callback);
        Type localVarReturnType = new TypeToken<EndpointPostGroupsSchedules>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsStatusesGet
     * @param existingMembership  (optional, default to false)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsStatusesGetCall(Boolean existingMembership, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (existingMembership != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("existing_membership", existingMembership));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsStatusesGetValidateBeforeCall(Boolean existingMembership, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return groupsStatusesGetCall(existingMembership, offset, limit, _callback);

    }

    /**
     * 
     * Retrieve groups that were created by users within the current access token&#39;s bubble, along with your current relationship with the groups. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed. Optionally only retrieve groups that you are a member of.
     * @param existingMembership  (optional, default to false)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @return EndpointGetGroupsStatuses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointGetGroupsStatuses groupsStatusesGet(Boolean existingMembership, Integer offset, Integer limit) throws ApiException {
        ApiResponse<EndpointGetGroupsStatuses> localVarResp = groupsStatusesGetWithHttpInfo(existingMembership, offset, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve groups that were created by users within the current access token&#39;s bubble, along with your current relationship with the groups. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed. Optionally only retrieve groups that you are a member of.
     * @param existingMembership  (optional, default to false)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @return ApiResponse&lt;EndpointGetGroupsStatuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointGetGroupsStatuses> groupsStatusesGetWithHttpInfo(Boolean existingMembership, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = groupsStatusesGetValidateBeforeCall(existingMembership, offset, limit, null);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsStatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve groups that were created by users within the current access token&#39;s bubble, along with your current relationship with the groups. The groups must be either Public or you must be a member of them. Unlisted and Private groups that you are not a member of are not listed. Optionally only retrieve groups that you are a member of.
     * @param existingMembership  (optional, default to false)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsStatusesGetAsync(Boolean existingMembership, Integer offset, Integer limit, final ApiCallback<EndpointGetGroupsStatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsStatusesGetValidateBeforeCall(existingMembership, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<EndpointGetGroupsStatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
