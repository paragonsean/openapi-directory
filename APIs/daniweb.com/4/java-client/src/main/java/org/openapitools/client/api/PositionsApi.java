/*
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EndpointDeletePositionsID;
import org.openapitools.client.model.EndpointPatchPositionsID;
import org.openapitools.client.model.EndpointPostPositions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PositionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PositionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PositionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for positionsIDDelete
     * @param ID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call positionsIDDeleteCall(Integer ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/positions/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call positionsIDDeleteValidateBeforeCall(Integer ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling positionsIDDelete(Async)");
        }

        return positionsIDDeleteCall(ID, _callback);

    }

    /**
     * 
     * Remove an item from the OAuth&#39;ed end user&#39;s Curriculum Vitae.
     * @param ID  (required)
     * @return EndpointDeletePositionsID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointDeletePositionsID positionsIDDelete(Integer ID) throws ApiException {
        ApiResponse<EndpointDeletePositionsID> localVarResp = positionsIDDeleteWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove an item from the OAuth&#39;ed end user&#39;s Curriculum Vitae.
     * @param ID  (required)
     * @return ApiResponse&lt;EndpointDeletePositionsID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointDeletePositionsID> positionsIDDeleteWithHttpInfo(Integer ID) throws ApiException {
        okhttp3.Call localVarCall = positionsIDDeleteValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<EndpointDeletePositionsID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove an item from the OAuth&#39;ed end user&#39;s Curriculum Vitae.
     * @param ID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call positionsIDDeleteAsync(Integer ID, final ApiCallback<EndpointDeletePositionsID> _callback) throws ApiException {

        okhttp3.Call localVarCall = positionsIDDeleteValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<EndpointDeletePositionsID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for positionsIDPatch
     * @param ID  (required)
     * @param category  (required)
     * @param organization  (required)
     * @param role  (required)
     * @param startDate  (required)
     * @param endDate  (optional)
     * @param organizationSize  (optional)
     * @param position  (optional)
     * @param summary  (optional)
     * @param url  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call positionsIDPatchCall(Integer ID, String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/positions/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarFormParams.put("category", category);
        }

        if (endDate != null) {
            localVarFormParams.put("end_date", endDate);
        }

        if (organization != null) {
            localVarFormParams.put("organization", organization);
        }

        if (organizationSize != null) {
            localVarFormParams.put("organization_size", organizationSize);
        }

        if (position != null) {
            localVarFormParams.put("position", position);
        }

        if (role != null) {
            localVarFormParams.put("role", role);
        }

        if (startDate != null) {
            localVarFormParams.put("start_date", startDate);
        }

        if (summary != null) {
            localVarFormParams.put("summary", summary);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call positionsIDPatchValidateBeforeCall(Integer ID, String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling positionsIDPatch(Async)");
        }

        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling positionsIDPatch(Async)");
        }

        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling positionsIDPatch(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling positionsIDPatch(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling positionsIDPatch(Async)");
        }

        return positionsIDPatchCall(ID, category, organization, role, startDate, endDate, organizationSize, position, summary, url, _callback);

    }

    /**
     * 
     * Update the OAuth&#39;ed end user&#39;s Curriculum Vitae by modifying an existing position.
     * @param ID  (required)
     * @param category  (required)
     * @param organization  (required)
     * @param role  (required)
     * @param startDate  (required)
     * @param endDate  (optional)
     * @param organizationSize  (optional)
     * @param position  (optional)
     * @param summary  (optional)
     * @param url  (optional)
     * @return EndpointPatchPositionsID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPatchPositionsID positionsIDPatch(Integer ID, String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url) throws ApiException {
        ApiResponse<EndpointPatchPositionsID> localVarResp = positionsIDPatchWithHttpInfo(ID, category, organization, role, startDate, endDate, organizationSize, position, summary, url);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the OAuth&#39;ed end user&#39;s Curriculum Vitae by modifying an existing position.
     * @param ID  (required)
     * @param category  (required)
     * @param organization  (required)
     * @param role  (required)
     * @param startDate  (required)
     * @param endDate  (optional)
     * @param organizationSize  (optional)
     * @param position  (optional)
     * @param summary  (optional)
     * @param url  (optional)
     * @return ApiResponse&lt;EndpointPatchPositionsID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPatchPositionsID> positionsIDPatchWithHttpInfo(Integer ID, String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url) throws ApiException {
        okhttp3.Call localVarCall = positionsIDPatchValidateBeforeCall(ID, category, organization, role, startDate, endDate, organizationSize, position, summary, url, null);
        Type localVarReturnType = new TypeToken<EndpointPatchPositionsID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the OAuth&#39;ed end user&#39;s Curriculum Vitae by modifying an existing position.
     * @param ID  (required)
     * @param category  (required)
     * @param organization  (required)
     * @param role  (required)
     * @param startDate  (required)
     * @param endDate  (optional)
     * @param organizationSize  (optional)
     * @param position  (optional)
     * @param summary  (optional)
     * @param url  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call positionsIDPatchAsync(Integer ID, String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url, final ApiCallback<EndpointPatchPositionsID> _callback) throws ApiException {

        okhttp3.Call localVarCall = positionsIDPatchValidateBeforeCall(ID, category, organization, role, startDate, endDate, organizationSize, position, summary, url, _callback);
        Type localVarReturnType = new TypeToken<EndpointPatchPositionsID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for positionsPost
     * @param category  (required)
     * @param organization  (required)
     * @param role  (required)
     * @param startDate  (required)
     * @param endDate  (optional)
     * @param organizationSize  (optional)
     * @param position  (optional)
     * @param summary  (optional)
     * @param url  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call positionsPostCall(String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/positions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarFormParams.put("category", category);
        }

        if (endDate != null) {
            localVarFormParams.put("end_date", endDate);
        }

        if (organization != null) {
            localVarFormParams.put("organization", organization);
        }

        if (organizationSize != null) {
            localVarFormParams.put("organization_size", organizationSize);
        }

        if (position != null) {
            localVarFormParams.put("position", position);
        }

        if (role != null) {
            localVarFormParams.put("role", role);
        }

        if (startDate != null) {
            localVarFormParams.put("start_date", startDate);
        }

        if (summary != null) {
            localVarFormParams.put("summary", summary);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "implicit_flow", "explicit_flow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call positionsPostValidateBeforeCall(String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling positionsPost(Async)");
        }

        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling positionsPost(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling positionsPost(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling positionsPost(Async)");
        }

        return positionsPostCall(category, organization, role, startDate, endDate, organizationSize, position, summary, url, _callback);

    }

    /**
     * 
     * Update the OAuth&#39;ed end user&#39;s Curriculum Vitae by adding a position.
     * @param category  (required)
     * @param organization  (required)
     * @param role  (required)
     * @param startDate  (required)
     * @param endDate  (optional)
     * @param organizationSize  (optional)
     * @param position  (optional)
     * @param summary  (optional)
     * @param url  (optional)
     * @return EndpointPostPositions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public EndpointPostPositions positionsPost(String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url) throws ApiException {
        ApiResponse<EndpointPostPositions> localVarResp = positionsPostWithHttpInfo(category, organization, role, startDate, endDate, organizationSize, position, summary, url);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the OAuth&#39;ed end user&#39;s Curriculum Vitae by adding a position.
     * @param category  (required)
     * @param organization  (required)
     * @param role  (required)
     * @param startDate  (required)
     * @param endDate  (optional)
     * @param organizationSize  (optional)
     * @param position  (optional)
     * @param summary  (optional)
     * @param url  (optional)
     * @return ApiResponse&lt;EndpointPostPositions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointPostPositions> positionsPostWithHttpInfo(String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url) throws ApiException {
        okhttp3.Call localVarCall = positionsPostValidateBeforeCall(category, organization, role, startDate, endDate, organizationSize, position, summary, url, null);
        Type localVarReturnType = new TypeToken<EndpointPostPositions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the OAuth&#39;ed end user&#39;s Curriculum Vitae by adding a position.
     * @param category  (required)
     * @param organization  (required)
     * @param role  (required)
     * @param startDate  (required)
     * @param endDate  (optional)
     * @param organizationSize  (optional)
     * @param position  (optional)
     * @param summary  (optional)
     * @param url  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call positionsPostAsync(String category, String organization, String role, String startDate, String endDate, String organizationSize, String position, String summary, String url, final ApiCallback<EndpointPostPositions> _callback) throws ApiException {

        okhttp3.Call localVarCall = positionsPostValidateBeforeCall(category, organization, role, startDate, endDate, organizationSize, position, summary, url, _callback);
        Type localVarReturnType = new TypeToken<EndpointPostPositions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
