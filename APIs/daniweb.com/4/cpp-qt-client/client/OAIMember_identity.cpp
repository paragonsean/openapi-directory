/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember_identity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember_identity::OAIMember_identity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember_identity::OAIMember_identity() {
    this->initializeModel();
}

OAIMember_identity::~OAIMember_identity() {}

void OAIMember_identity::initializeModel() {

    m_avatar_uri_isSet = false;
    m_avatar_uri_isValid = false;

    m_badge_isSet = false;
    m_badge_isValid = false;

    m_profile_url_isSet = false;
    m_profile_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIMember_identity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember_identity::fromJsonObject(QJsonObject json) {

    m_avatar_uri_isValid = ::OpenAPI::fromJsonValue(m_avatar_uri, json[QString("avatar_uri")]);
    m_avatar_uri_isSet = !json[QString("avatar_uri")].isNull() && m_avatar_uri_isValid;

    m_badge_isValid = ::OpenAPI::fromJsonValue(m_badge, json[QString("badge")]);
    m_badge_isSet = !json[QString("badge")].isNull() && m_badge_isValid;

    m_profile_url_isValid = ::OpenAPI::fromJsonValue(m_profile_url, json[QString("profile_url")]);
    m_profile_url_isSet = !json[QString("profile_url")].isNull() && m_profile_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIMember_identity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember_identity::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_uri_isSet) {
        obj.insert(QString("avatar_uri"), ::OpenAPI::toJsonValue(m_avatar_uri));
    }
    if (m_badge_isSet) {
        obj.insert(QString("badge"), ::OpenAPI::toJsonValue(m_badge));
    }
    if (m_profile_url_isSet) {
        obj.insert(QString("profile_url"), ::OpenAPI::toJsonValue(m_profile_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIMember_identity::getAvatarUri() const {
    return m_avatar_uri;
}
void OAIMember_identity::setAvatarUri(const QString &avatar_uri) {
    m_avatar_uri = avatar_uri;
    m_avatar_uri_isSet = true;
}

bool OAIMember_identity::is_avatar_uri_Set() const{
    return m_avatar_uri_isSet;
}

bool OAIMember_identity::is_avatar_uri_Valid() const{
    return m_avatar_uri_isValid;
}

QString OAIMember_identity::getBadge() const {
    return m_badge;
}
void OAIMember_identity::setBadge(const QString &badge) {
    m_badge = badge;
    m_badge_isSet = true;
}

bool OAIMember_identity::is_badge_Set() const{
    return m_badge_isSet;
}

bool OAIMember_identity::is_badge_Valid() const{
    return m_badge_isValid;
}

QString OAIMember_identity::getProfileUrl() const {
    return m_profile_url;
}
void OAIMember_identity::setProfileUrl(const QString &profile_url) {
    m_profile_url = profile_url;
    m_profile_url_isSet = true;
}

bool OAIMember_identity::is_profile_url_Set() const{
    return m_profile_url_isSet;
}

bool OAIMember_identity::is_profile_url_Valid() const{
    return m_profile_url_isValid;
}

QString OAIMember_identity::getUsername() const {
    return m_username;
}
void OAIMember_identity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIMember_identity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIMember_identity::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIMember_identity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember_identity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
