/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook::OAIWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook::OAIWebhook() {
    this->initializeModel();
}

OAIWebhook::~OAIWebhook() {}

void OAIWebhook::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_event.isSet()) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIApp OAIWebhook::getApp() const {
    return m_app;
}
void OAIWebhook::setApp(const OAIApp &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIWebhook::is_app_Set() const{
    return m_app_isSet;
}

bool OAIWebhook::is_app_Valid() const{
    return m_app_isValid;
}

OAIWebhook_event OAIWebhook::getEvent() const {
    return m_event;
}
void OAIWebhook::setEvent(const OAIWebhook_event &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIWebhook::is_event_Set() const{
    return m_event_isSet;
}

bool OAIWebhook::is_event_Valid() const{
    return m_event_isValid;
}

double OAIWebhook::getId() const {
    return m_id;
}
void OAIWebhook::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhook::getName() const {
    return m_name;
}
void OAIWebhook::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhook::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhook::is_name_Valid() const{
    return m_name_isValid;
}

OAIWebhook_object OAIWebhook::getObject() const {
    return m_object;
}
void OAIWebhook::setObject(const OAIWebhook_object &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIWebhook::is_object_Set() const{
    return m_object_isSet;
}

bool OAIWebhook::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIWebhook::getUri() const {
    return m_uri;
}
void OAIWebhook::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIWebhook::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIWebhook::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIWebhook::getUser() const {
    return m_user;
}
void OAIWebhook::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIWebhook::is_user_Set() const{
    return m_user_isSet;
}

bool OAIWebhook::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
