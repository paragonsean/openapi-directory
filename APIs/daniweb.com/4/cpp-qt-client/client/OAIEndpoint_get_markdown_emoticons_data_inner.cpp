/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint_get_markdown_emoticons_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint_get_markdown_emoticons_data_inner::OAIEndpoint_get_markdown_emoticons_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint_get_markdown_emoticons_data_inner::OAIEndpoint_get_markdown_emoticons_data_inner() {
    this->initializeModel();
}

OAIEndpoint_get_markdown_emoticons_data_inner::~OAIEndpoint_get_markdown_emoticons_data_inner() {}

void OAIEndpoint_get_markdown_emoticons_data_inner::initializeModel() {

    m_alt_isSet = false;
    m_alt_isValid = false;

    m_emoticon_isSet = false;
    m_emoticon_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;
}

void OAIEndpoint_get_markdown_emoticons_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint_get_markdown_emoticons_data_inner::fromJsonObject(QJsonObject json) {

    m_alt_isValid = ::OpenAPI::fromJsonValue(m_alt, json[QString("alt")]);
    m_alt_isSet = !json[QString("alt")].isNull() && m_alt_isValid;

    m_emoticon_isValid = ::OpenAPI::fromJsonValue(m_emoticon, json[QString("emoticon")]);
    m_emoticon_isSet = !json[QString("emoticon")].isNull() && m_emoticon_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;
}

QString OAIEndpoint_get_markdown_emoticons_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint_get_markdown_emoticons_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_isSet) {
        obj.insert(QString("alt"), ::OpenAPI::toJsonValue(m_alt));
    }
    if (m_emoticon_isSet) {
        obj.insert(QString("emoticon"), ::OpenAPI::toJsonValue(m_emoticon));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    return obj;
}

QString OAIEndpoint_get_markdown_emoticons_data_inner::getAlt() const {
    return m_alt;
}
void OAIEndpoint_get_markdown_emoticons_data_inner::setAlt(const QString &alt) {
    m_alt = alt;
    m_alt_isSet = true;
}

bool OAIEndpoint_get_markdown_emoticons_data_inner::is_alt_Set() const{
    return m_alt_isSet;
}

bool OAIEndpoint_get_markdown_emoticons_data_inner::is_alt_Valid() const{
    return m_alt_isValid;
}

QString OAIEndpoint_get_markdown_emoticons_data_inner::getEmoticon() const {
    return m_emoticon;
}
void OAIEndpoint_get_markdown_emoticons_data_inner::setEmoticon(const QString &emoticon) {
    m_emoticon = emoticon;
    m_emoticon_isSet = true;
}

bool OAIEndpoint_get_markdown_emoticons_data_inner::is_emoticon_Set() const{
    return m_emoticon_isSet;
}

bool OAIEndpoint_get_markdown_emoticons_data_inner::is_emoticon_Valid() const{
    return m_emoticon_isValid;
}

QString OAIEndpoint_get_markdown_emoticons_data_inner::getImage() const {
    return m_image;
}
void OAIEndpoint_get_markdown_emoticons_data_inner::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIEndpoint_get_markdown_emoticons_data_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAIEndpoint_get_markdown_emoticons_data_inner::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIEndpoint_get_markdown_emoticons_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emoticon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint_get_markdown_emoticons_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
