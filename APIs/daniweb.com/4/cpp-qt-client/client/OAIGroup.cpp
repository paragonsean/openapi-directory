/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_first_message_isSet = false;
    m_first_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_message_isSet = false;
    m_latest_message_isValid = false;

    m_member_count_isSet = false;
    m_member_count_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_first_message_isValid = ::OpenAPI::fromJsonValue(m_first_message, json[QString("first_message")]);
    m_first_message_isSet = !json[QString("first_message")].isNull() && m_first_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_message_isValid = ::OpenAPI::fromJsonValue(m_latest_message, json[QString("latest_message")]);
    m_latest_message_isSet = !json[QString("latest_message")].isNull() && m_latest_message_isValid;

    m_member_count_isValid = ::OpenAPI::fromJsonValue(m_member_count, json[QString("member_count")]);
    m_member_count_isSet = !json[QString("member_count")].isNull() && m_member_count_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_first_message.isSet()) {
        obj.insert(QString("first_message"), ::OpenAPI::toJsonValue(m_first_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_message.isSet()) {
        obj.insert(QString("latest_message"), ::OpenAPI::toJsonValue(m_latest_message));
    }
    if (m_member_count_isSet) {
        obj.insert(QString("member_count"), ::OpenAPI::toJsonValue(m_member_count));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAIGroup_first_message OAIGroup::getFirstMessage() const {
    return m_first_message;
}
void OAIGroup::setFirstMessage(const OAIGroup_first_message &first_message) {
    m_first_message = first_message;
    m_first_message_isSet = true;
}

bool OAIGroup::is_first_message_Set() const{
    return m_first_message_isSet;
}

bool OAIGroup::is_first_message_Valid() const{
    return m_first_message_isValid;
}

double OAIGroup::getId() const {
    return m_id;
}
void OAIGroup::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroup::is_id_Valid() const{
    return m_id_isValid;
}

OAIGroup_message OAIGroup::getLatestMessage() const {
    return m_latest_message;
}
void OAIGroup::setLatestMessage(const OAIGroup_message &latest_message) {
    m_latest_message = latest_message;
    m_latest_message_isSet = true;
}

bool OAIGroup::is_latest_message_Set() const{
    return m_latest_message_isSet;
}

bool OAIGroup::is_latest_message_Valid() const{
    return m_latest_message_isValid;
}

double OAIGroup::getMemberCount() const {
    return m_member_count;
}
void OAIGroup::setMemberCount(const double &member_count) {
    m_member_count = member_count;
    m_member_count_isSet = true;
}

bool OAIGroup::is_member_count_Set() const{
    return m_member_count_isSet;
}

bool OAIGroup::is_member_count_Valid() const{
    return m_member_count_isValid;
}

OAIUser OAIGroup::getOwner() const {
    return m_owner;
}
void OAIGroup::setOwner(const OAIUser &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGroup::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGroup::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIGroup_properties OAIGroup::getProperties() const {
    return m_properties;
}
void OAIGroup::setProperties(const OAIGroup_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGroup::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGroup::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
