/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint_get_users_ID_synergies_data_inner_match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint_get_users_ID_synergies_data_inner_match::OAIEndpoint_get_users_ID_synergies_data_inner_match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint_get_users_ID_synergies_data_inner_match::OAIEndpoint_get_users_ID_synergies_data_inner_match() {
    this->initializeModel();
}

OAIEndpoint_get_users_ID_synergies_data_inner_match::~OAIEndpoint_get_users_ID_synergies_data_inner_match() {}

void OAIEndpoint_get_users_ID_synergies_data_inner_match::initializeModel() {

    m_algorithmic_match_isSet = false;
    m_algorithmic_match_isValid = false;

    m_complementary_goals_isSet = false;
    m_complementary_goals_isValid = false;

    m_distance_away_isSet = false;
    m_distance_away_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_mutual_connections_isSet = false;
    m_mutual_connections_isValid = false;

    m_recommendation_strength_isSet = false;
    m_recommendation_strength_isValid = false;
}

void OAIEndpoint_get_users_ID_synergies_data_inner_match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint_get_users_ID_synergies_data_inner_match::fromJsonObject(QJsonObject json) {

    m_algorithmic_match_isValid = ::OpenAPI::fromJsonValue(m_algorithmic_match, json[QString("algorithmic_match")]);
    m_algorithmic_match_isSet = !json[QString("algorithmic_match")].isNull() && m_algorithmic_match_isValid;

    m_complementary_goals_isValid = ::OpenAPI::fromJsonValue(m_complementary_goals, json[QString("complementary_goals")]);
    m_complementary_goals_isSet = !json[QString("complementary_goals")].isNull() && m_complementary_goals_isValid;

    m_distance_away_isValid = ::OpenAPI::fromJsonValue(m_distance_away, json[QString("distance_away")]);
    m_distance_away_isSet = !json[QString("distance_away")].isNull() && m_distance_away_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_mutual_connections_isValid = ::OpenAPI::fromJsonValue(m_mutual_connections, json[QString("mutual_connections")]);
    m_mutual_connections_isSet = !json[QString("mutual_connections")].isNull() && m_mutual_connections_isValid;

    m_recommendation_strength_isValid = ::OpenAPI::fromJsonValue(m_recommendation_strength, json[QString("recommendation_strength")]);
    m_recommendation_strength_isSet = !json[QString("recommendation_strength")].isNull() && m_recommendation_strength_isValid;
}

QString OAIEndpoint_get_users_ID_synergies_data_inner_match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint_get_users_ID_synergies_data_inner_match::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithmic_match_isSet) {
        obj.insert(QString("algorithmic_match"), ::OpenAPI::toJsonValue(m_algorithmic_match));
    }
    if (m_complementary_goals.size() > 0) {
        obj.insert(QString("complementary_goals"), ::OpenAPI::toJsonValue(m_complementary_goals));
    }
    if (m_distance_away.isSet()) {
        obj.insert(QString("distance_away"), ::OpenAPI::toJsonValue(m_distance_away));
    }
    if (m_industry.isSet()) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_mutual_connections.isSet()) {
        obj.insert(QString("mutual_connections"), ::OpenAPI::toJsonValue(m_mutual_connections));
    }
    if (m_recommendation_strength_isSet) {
        obj.insert(QString("recommendation_strength"), ::OpenAPI::toJsonValue(m_recommendation_strength));
    }
    return obj;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::isAlgorithmicMatch() const {
    return m_algorithmic_match;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match::setAlgorithmicMatch(const bool &algorithmic_match) {
    m_algorithmic_match = algorithmic_match;
    m_algorithmic_match_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_algorithmic_match_Set() const{
    return m_algorithmic_match_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_algorithmic_match_Valid() const{
    return m_algorithmic_match_isValid;
}

QList<QString> OAIEndpoint_get_users_ID_synergies_data_inner_match::getComplementaryGoals() const {
    return m_complementary_goals;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match::setComplementaryGoals(const QList<QString> &complementary_goals) {
    m_complementary_goals = complementary_goals;
    m_complementary_goals_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_complementary_goals_Set() const{
    return m_complementary_goals_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_complementary_goals_Valid() const{
    return m_complementary_goals_isValid;
}

OAIEndpoint_get_users_ID_synergies_data_inner_match_distance_away OAIEndpoint_get_users_ID_synergies_data_inner_match::getDistanceAway() const {
    return m_distance_away;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match::setDistanceAway(const OAIEndpoint_get_users_ID_synergies_data_inner_match_distance_away &distance_away) {
    m_distance_away = distance_away;
    m_distance_away_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_distance_away_Set() const{
    return m_distance_away_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_distance_away_Valid() const{
    return m_distance_away_isValid;
}

OAIEndpoint_get_users_ID_synergies_data_inner_match_industry OAIEndpoint_get_users_ID_synergies_data_inner_match::getIndustry() const {
    return m_industry;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match::setIndustry(const OAIEndpoint_get_users_ID_synergies_data_inner_match_industry &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_industry_Valid() const{
    return m_industry_isValid;
}

OAIEndpoint_get_users_ID_synergies_data_inner_match_mutual_connections OAIEndpoint_get_users_ID_synergies_data_inner_match::getMutualConnections() const {
    return m_mutual_connections;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match::setMutualConnections(const OAIEndpoint_get_users_ID_synergies_data_inner_match_mutual_connections &mutual_connections) {
    m_mutual_connections = mutual_connections;
    m_mutual_connections_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_mutual_connections_Set() const{
    return m_mutual_connections_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_mutual_connections_Valid() const{
    return m_mutual_connections_isValid;
}

float OAIEndpoint_get_users_ID_synergies_data_inner_match::getRecommendationStrength() const {
    return m_recommendation_strength;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match::setRecommendationStrength(const float &recommendation_strength) {
    m_recommendation_strength = recommendation_strength;
    m_recommendation_strength_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_recommendation_strength_Set() const{
    return m_recommendation_strength_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::is_recommendation_strength_Valid() const{
    return m_recommendation_strength_isValid;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithmic_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complementary_goals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_away.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutual_connections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_strength_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
