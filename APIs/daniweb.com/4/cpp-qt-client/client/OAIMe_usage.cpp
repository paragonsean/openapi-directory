/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMe_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMe_usage::OAIMe_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMe_usage::OAIMe_usage() {
    this->initializeModel();
}

OAIMe_usage::~OAIMe_usage() {}

void OAIMe_usage::initializeModel() {

    m_available_status_isSet = false;
    m_available_status_isValid = false;

    m_joined_timestamp_isSet = false;
    m_joined_timestamp_isValid = false;

    m_last_activity_timestamp_isSet = false;
    m_last_activity_timestamp_isValid = false;

    m_online_status_isSet = false;
    m_online_status_isValid = false;
}

void OAIMe_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMe_usage::fromJsonObject(QJsonObject json) {

    m_available_status_isValid = ::OpenAPI::fromJsonValue(m_available_status, json[QString("available_status")]);
    m_available_status_isSet = !json[QString("available_status")].isNull() && m_available_status_isValid;

    m_joined_timestamp_isValid = ::OpenAPI::fromJsonValue(m_joined_timestamp, json[QString("joined_timestamp")]);
    m_joined_timestamp_isSet = !json[QString("joined_timestamp")].isNull() && m_joined_timestamp_isValid;

    m_last_activity_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_activity_timestamp, json[QString("last_activity_timestamp")]);
    m_last_activity_timestamp_isSet = !json[QString("last_activity_timestamp")].isNull() && m_last_activity_timestamp_isValid;

    m_online_status_isValid = ::OpenAPI::fromJsonValue(m_online_status, json[QString("online_status")]);
    m_online_status_isSet = !json[QString("online_status")].isNull() && m_online_status_isValid;
}

QString OAIMe_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMe_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_available_status_isSet) {
        obj.insert(QString("available_status"), ::OpenAPI::toJsonValue(m_available_status));
    }
    if (m_joined_timestamp_isSet) {
        obj.insert(QString("joined_timestamp"), ::OpenAPI::toJsonValue(m_joined_timestamp));
    }
    if (m_last_activity_timestamp_isSet) {
        obj.insert(QString("last_activity_timestamp"), ::OpenAPI::toJsonValue(m_last_activity_timestamp));
    }
    if (m_online_status_isSet) {
        obj.insert(QString("online_status"), ::OpenAPI::toJsonValue(m_online_status));
    }
    return obj;
}

bool OAIMe_usage::isAvailableStatus() const {
    return m_available_status;
}
void OAIMe_usage::setAvailableStatus(const bool &available_status) {
    m_available_status = available_status;
    m_available_status_isSet = true;
}

bool OAIMe_usage::is_available_status_Set() const{
    return m_available_status_isSet;
}

bool OAIMe_usage::is_available_status_Valid() const{
    return m_available_status_isValid;
}

QDateTime OAIMe_usage::getJoinedTimestamp() const {
    return m_joined_timestamp;
}
void OAIMe_usage::setJoinedTimestamp(const QDateTime &joined_timestamp) {
    m_joined_timestamp = joined_timestamp;
    m_joined_timestamp_isSet = true;
}

bool OAIMe_usage::is_joined_timestamp_Set() const{
    return m_joined_timestamp_isSet;
}

bool OAIMe_usage::is_joined_timestamp_Valid() const{
    return m_joined_timestamp_isValid;
}

QDateTime OAIMe_usage::getLastActivityTimestamp() const {
    return m_last_activity_timestamp;
}
void OAIMe_usage::setLastActivityTimestamp(const QDateTime &last_activity_timestamp) {
    m_last_activity_timestamp = last_activity_timestamp;
    m_last_activity_timestamp_isSet = true;
}

bool OAIMe_usage::is_last_activity_timestamp_Set() const{
    return m_last_activity_timestamp_isSet;
}

bool OAIMe_usage::is_last_activity_timestamp_Valid() const{
    return m_last_activity_timestamp_isValid;
}

bool OAIMe_usage::isOnlineStatus() const {
    return m_online_status;
}
void OAIMe_usage::setOnlineStatus(const bool &online_status) {
    m_online_status = online_status;
    m_online_status_isSet = true;
}

bool OAIMe_usage::is_online_status_Set() const{
    return m_online_status_isSet;
}

bool OAIMe_usage::is_online_status_Valid() const{
    return m_online_status_isValid;
}

bool OAIMe_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMe_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
