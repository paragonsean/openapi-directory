/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_conversation_isSet = false;
    m_conversation_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_conversation_isValid = ::OpenAPI::fromJsonValue(m_conversation, json[QString("conversation")]);
    m_conversation_isSet = !json[QString("conversation")].isNull() && m_conversation_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("last_seen")]);
    m_last_seen_isSet = !json[QString("last_seen")].isNull() && m_last_seen_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_conversation.isSet()) {
        obj.insert(QString("conversation"), ::OpenAPI::toJsonValue(m_conversation));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_seen.isSet()) {
        obj.insert(QString("last_seen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIUser OAIMessage::getAuthor() const {
    return m_author;
}
void OAIMessage::setAuthor(const OAIUser &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIMessage::is_author_Set() const{
    return m_author_isSet;
}

bool OAIMessage::is_author_Valid() const{
    return m_author_isValid;
}

OAIConversation OAIMessage::getConversation() const {
    return m_conversation;
}
void OAIMessage::setConversation(const OAIConversation &conversation) {
    m_conversation = conversation;
    m_conversation_isSet = true;
}

bool OAIMessage::is_conversation_Set() const{
    return m_conversation_isSet;
}

bool OAIMessage::is_conversation_Valid() const{
    return m_conversation_isValid;
}

double OAIMessage::getId() const {
    return m_id;
}
void OAIMessage::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessage::is_id_Valid() const{
    return m_id_isValid;
}

OAIGroup_message_last_seen OAIMessage::getLastSeen() const {
    return m_last_seen;
}
void OAIMessage::setLastSeen(const OAIGroup_message_last_seen &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAIMessage::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAIMessage::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

OAIGroup_message_text OAIMessage::getText() const {
    return m_text;
}
void OAIMessage::setText(const OAIGroup_message_text &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessage::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessage::is_text_Valid() const{
    return m_text_isValid;
}

QDateTime OAIMessage::getTimestamp() const {
    return m_timestamp;
}
void OAIMessage::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMessage::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMessage::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
