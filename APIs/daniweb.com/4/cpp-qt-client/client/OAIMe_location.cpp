/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMe_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMe_location::OAIMe_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMe_location::OAIMe_location() {
    this->initializeModel();
}

OAIMe_location::~OAIMe_location() {}

void OAIMe_location::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIMe_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMe_location::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIMe_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMe_location::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIMe_location::getCity() const {
    return m_city;
}
void OAIMe_location::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIMe_location::is_city_Set() const{
    return m_city_isSet;
}

bool OAIMe_location::is_city_Valid() const{
    return m_city_isValid;
}

double OAIMe_location::getCountry() const {
    return m_country;
}
void OAIMe_location::setCountry(const double &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIMe_location::is_country_Set() const{
    return m_country_isSet;
}

bool OAIMe_location::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIMe_location::getIpAddress() const {
    return m_ip_address;
}
void OAIMe_location::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIMe_location::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIMe_location::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIMe_location::getLatitude() const {
    return m_latitude;
}
void OAIMe_location::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIMe_location::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIMe_location::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIMe_location::getLongitude() const {
    return m_longitude;
}
void OAIMe_location::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIMe_location::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIMe_location::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIMe_location::getRegion() const {
    return m_region;
}
void OAIMe_location::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIMe_location::is_region_Set() const{
    return m_region_isSet;
}

bool OAIMe_location::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIMe_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMe_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
