/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_message_last_seen.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_message_last_seen::OAIGroup_message_last_seen(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_message_last_seen::OAIGroup_message_last_seen() {
    this->initializeModel();
}

OAIGroup_message_last_seen::~OAIGroup_message_last_seen() {}

void OAIGroup_message_last_seen::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIGroup_message_last_seen::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_message_last_seen::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIGroup_message_last_seen::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_message_last_seen::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIGroup_message_last_seen::getTimestamp() const {
    return m_timestamp;
}
void OAIGroup_message_last_seen::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIGroup_message_last_seen::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIGroup_message_last_seen::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIUser OAIGroup_message_last_seen::getUser() const {
    return m_user;
}
void OAIGroup_message_last_seen::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGroup_message_last_seen::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGroup_message_last_seen::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGroup_message_last_seen::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_message_last_seen::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
