/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint_post_users_invites_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint_post_users_invites_data::OAIEndpoint_post_users_invites_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint_post_users_invites_data::OAIEndpoint_post_users_invites_data() {
    this->initializeModel();
}

OAIEndpoint_post_users_invites_data::~OAIEndpoint_post_users_invites_data() {}

void OAIEndpoint_post_users_invites_data::initializeModel() {

    m_discovered_isSet = false;
    m_discovered_isValid = false;

    m_emailed_isSet = false;
    m_emailed_isValid = false;

    m_existing_isSet = false;
    m_existing_isValid = false;

    m_invalid_isSet = false;
    m_invalid_isValid = false;
}

void OAIEndpoint_post_users_invites_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint_post_users_invites_data::fromJsonObject(QJsonObject json) {

    m_discovered_isValid = ::OpenAPI::fromJsonValue(m_discovered, json[QString("discovered")]);
    m_discovered_isSet = !json[QString("discovered")].isNull() && m_discovered_isValid;

    m_emailed_isValid = ::OpenAPI::fromJsonValue(m_emailed, json[QString("emailed")]);
    m_emailed_isSet = !json[QString("emailed")].isNull() && m_emailed_isValid;

    m_existing_isValid = ::OpenAPI::fromJsonValue(m_existing, json[QString("existing")]);
    m_existing_isSet = !json[QString("existing")].isNull() && m_existing_isValid;

    m_invalid_isValid = ::OpenAPI::fromJsonValue(m_invalid, json[QString("invalid")]);
    m_invalid_isSet = !json[QString("invalid")].isNull() && m_invalid_isValid;
}

QString OAIEndpoint_post_users_invites_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint_post_users_invites_data::asJsonObject() const {
    QJsonObject obj;
    if (m_discovered.isSet()) {
        obj.insert(QString("discovered"), ::OpenAPI::toJsonValue(m_discovered));
    }
    if (m_emailed.isSet()) {
        obj.insert(QString("emailed"), ::OpenAPI::toJsonValue(m_emailed));
    }
    if (m_existing.isSet()) {
        obj.insert(QString("existing"), ::OpenAPI::toJsonValue(m_existing));
    }
    if (m_invalid.isSet()) {
        obj.insert(QString("invalid"), ::OpenAPI::toJsonValue(m_invalid));
    }
    return obj;
}

OAIEndpoint_post_users_invites_data_discovered OAIEndpoint_post_users_invites_data::getDiscovered() const {
    return m_discovered;
}
void OAIEndpoint_post_users_invites_data::setDiscovered(const OAIEndpoint_post_users_invites_data_discovered &discovered) {
    m_discovered = discovered;
    m_discovered_isSet = true;
}

bool OAIEndpoint_post_users_invites_data::is_discovered_Set() const{
    return m_discovered_isSet;
}

bool OAIEndpoint_post_users_invites_data::is_discovered_Valid() const{
    return m_discovered_isValid;
}

OAIEndpoint_post_users_invites_data_emailed OAIEndpoint_post_users_invites_data::getEmailed() const {
    return m_emailed;
}
void OAIEndpoint_post_users_invites_data::setEmailed(const OAIEndpoint_post_users_invites_data_emailed &emailed) {
    m_emailed = emailed;
    m_emailed_isSet = true;
}

bool OAIEndpoint_post_users_invites_data::is_emailed_Set() const{
    return m_emailed_isSet;
}

bool OAIEndpoint_post_users_invites_data::is_emailed_Valid() const{
    return m_emailed_isValid;
}

OAIEndpoint_post_users_invites_data_existing OAIEndpoint_post_users_invites_data::getExisting() const {
    return m_existing;
}
void OAIEndpoint_post_users_invites_data::setExisting(const OAIEndpoint_post_users_invites_data_existing &existing) {
    m_existing = existing;
    m_existing_isSet = true;
}

bool OAIEndpoint_post_users_invites_data::is_existing_Set() const{
    return m_existing_isSet;
}

bool OAIEndpoint_post_users_invites_data::is_existing_Valid() const{
    return m_existing_isValid;
}

OAIEndpoint_post_users_invites_data_emailed OAIEndpoint_post_users_invites_data::getInvalid() const {
    return m_invalid;
}
void OAIEndpoint_post_users_invites_data::setInvalid(const OAIEndpoint_post_users_invites_data_emailed &invalid) {
    m_invalid = invalid;
    m_invalid_isSet = true;
}

bool OAIEndpoint_post_users_invites_data::is_invalid_Set() const{
    return m_invalid_isSet;
}

bool OAIEndpoint_post_users_invites_data::is_invalid_Valid() const{
    return m_invalid_isValid;
}

bool OAIEndpoint_post_users_invites_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discovered.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emailed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_existing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint_post_users_invites_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
