/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosition::OAIPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosition::OAIPosition() {
    this->initializeModel();
}

OAIPosition::~OAIPosition() {}

void OAIPosition::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosition::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIApp OAIPosition::getApp() const {
    return m_app;
}
void OAIPosition::setApp(const OAIApp &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIPosition::is_app_Set() const{
    return m_app_isSet;
}

bool OAIPosition::is_app_Valid() const{
    return m_app_isValid;
}

QString OAIPosition::getCategory() const {
    return m_category;
}
void OAIPosition::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPosition::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPosition::is_category_Valid() const{
    return m_category_isValid;
}

double OAIPosition::getId() const {
    return m_id;
}
void OAIPosition::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPosition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPosition::is_id_Valid() const{
    return m_id_isValid;
}

OAIPosition_organization OAIPosition::getOrganization() const {
    return m_organization;
}
void OAIPosition::setOrganization(const OAIPosition_organization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIPosition::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIPosition::is_organization_Valid() const{
    return m_organization_isValid;
}

OAIPosition_role OAIPosition::getRole() const {
    return m_role;
}
void OAIPosition::setRole(const OAIPosition_role &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPosition::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPosition::is_role_Valid() const{
    return m_role_isValid;
}

OAIUser OAIPosition::getUser() const {
    return m_user;
}
void OAIPosition::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPosition::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPosition::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
