/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMe_matching.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMe_matching::OAIMe_matching(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMe_matching::OAIMe_matching() {
    this->initializeModel();
}

OAIMe_matching::~OAIMe_matching() {}

void OAIMe_matching::initializeModel() {

    m_goals_isSet = false;
    m_goals_isValid = false;

    m_interest_tags_isSet = false;
    m_interest_tags_isValid = false;

    m_location_importance_isSet = false;
    m_location_importance_isValid = false;

    m_targeted_industry_isSet = false;
    m_targeted_industry_isValid = false;
}

void OAIMe_matching::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMe_matching::fromJsonObject(QJsonObject json) {

    m_goals_isValid = ::OpenAPI::fromJsonValue(m_goals, json[QString("goals")]);
    m_goals_isSet = !json[QString("goals")].isNull() && m_goals_isValid;

    m_interest_tags_isValid = ::OpenAPI::fromJsonValue(m_interest_tags, json[QString("interest_tags")]);
    m_interest_tags_isSet = !json[QString("interest_tags")].isNull() && m_interest_tags_isValid;

    m_location_importance_isValid = ::OpenAPI::fromJsonValue(m_location_importance, json[QString("location_importance")]);
    m_location_importance_isSet = !json[QString("location_importance")].isNull() && m_location_importance_isValid;

    m_targeted_industry_isValid = ::OpenAPI::fromJsonValue(m_targeted_industry, json[QString("targeted_industry")]);
    m_targeted_industry_isSet = !json[QString("targeted_industry")].isNull() && m_targeted_industry_isValid;
}

QString OAIMe_matching::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMe_matching::asJsonObject() const {
    QJsonObject obj;
    if (m_goals.size() > 0) {
        obj.insert(QString("goals"), ::OpenAPI::toJsonValue(m_goals));
    }
    if (m_interest_tags.size() > 0) {
        obj.insert(QString("interest_tags"), ::OpenAPI::toJsonValue(m_interest_tags));
    }
    if (m_location_importance_isSet) {
        obj.insert(QString("location_importance"), ::OpenAPI::toJsonValue(m_location_importance));
    }
    if (m_targeted_industry_isSet) {
        obj.insert(QString("targeted_industry"), ::OpenAPI::toJsonValue(m_targeted_industry));
    }
    return obj;
}

QList<QString> OAIMe_matching::getGoals() const {
    return m_goals;
}
void OAIMe_matching::setGoals(const QList<QString> &goals) {
    m_goals = goals;
    m_goals_isSet = true;
}

bool OAIMe_matching::is_goals_Set() const{
    return m_goals_isSet;
}

bool OAIMe_matching::is_goals_Valid() const{
    return m_goals_isValid;
}

QList<QString> OAIMe_matching::getInterestTags() const {
    return m_interest_tags;
}
void OAIMe_matching::setInterestTags(const QList<QString> &interest_tags) {
    m_interest_tags = interest_tags;
    m_interest_tags_isSet = true;
}

bool OAIMe_matching::is_interest_tags_Set() const{
    return m_interest_tags_isSet;
}

bool OAIMe_matching::is_interest_tags_Valid() const{
    return m_interest_tags_isValid;
}

QString OAIMe_matching::getLocationImportance() const {
    return m_location_importance;
}
void OAIMe_matching::setLocationImportance(const QString &location_importance) {
    m_location_importance = location_importance;
    m_location_importance_isSet = true;
}

bool OAIMe_matching::is_location_importance_Set() const{
    return m_location_importance_isSet;
}

bool OAIMe_matching::is_location_importance_Valid() const{
    return m_location_importance_isValid;
}

QString OAIMe_matching::getTargetedIndustry() const {
    return m_targeted_industry;
}
void OAIMe_matching::setTargetedIndustry(const QString &targeted_industry) {
    m_targeted_industry = targeted_industry;
    m_targeted_industry_isSet = true;
}

bool OAIMe_matching::is_targeted_industry_Set() const{
    return m_targeted_industry_isSet;
}

bool OAIMe_matching::is_targeted_industry_Valid() const{
    return m_targeted_industry_isValid;
}

bool OAIMe_matching::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_goals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_importance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeted_industry_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMe_matching::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
