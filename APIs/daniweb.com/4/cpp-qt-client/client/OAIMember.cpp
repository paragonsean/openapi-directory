/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember::OAIMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember::OAIMember() {
    this->initializeModel();
}

OAIMember::~OAIMember() {}

void OAIMember::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_personal_isSet = false;
    m_personal_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_personal_isValid = ::OpenAPI::fromJsonValue(m_personal, json[QString("personal")]);
    m_personal_isSet = !json[QString("personal")].isNull() && m_personal_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identity.isSet()) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_personal.isSet()) {
        obj.insert(QString("personal"), ::OpenAPI::toJsonValue(m_personal));
    }
    if (m_signature.isSet()) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

double OAIMember::getId() const {
    return m_id;
}
void OAIMember::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMember::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMember::is_id_Valid() const{
    return m_id_isValid;
}

OAIMember_identity OAIMember::getIdentity() const {
    return m_identity;
}
void OAIMember::setIdentity(const OAIMember_identity &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIMember::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIMember::is_identity_Valid() const{
    return m_identity_isValid;
}

OAIMember_location OAIMember::getLocation() const {
    return m_location;
}
void OAIMember::setLocation(const OAIMember_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMember::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMember::is_location_Valid() const{
    return m_location_isValid;
}

OAIMember_personal OAIMember::getPersonal() const {
    return m_personal;
}
void OAIMember::setPersonal(const OAIMember_personal &personal) {
    m_personal = personal;
    m_personal_isSet = true;
}

bool OAIMember::is_personal_Set() const{
    return m_personal_isSet;
}

bool OAIMember::is_personal_Valid() const{
    return m_personal_isValid;
}

OAIEndpoint_post_markdown_data OAIMember::getSignature() const {
    return m_signature;
}
void OAIMember::setSignature(const OAIEndpoint_post_markdown_data &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIMember::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIMember::is_signature_Valid() const{
    return m_signature_isValid;
}

OAIMember_stats OAIMember::getStats() const {
    return m_stats;
}
void OAIMember::setStats(const OAIMember_stats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIMember::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIMember::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
