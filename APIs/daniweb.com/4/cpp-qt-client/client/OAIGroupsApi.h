/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndpoint_delete_groups_ID_memberships.h"
#include "OAIEndpoint_delete_groups_messages_ID.h"
#include "OAIEndpoint_get_groups.h"
#include "OAIEndpoint_get_groups_ID.h"
#include "OAIEndpoint_get_groups_ID_memberships.h"
#include "OAIEndpoint_get_groups_ID_messages.h"
#include "OAIEndpoint_get_groups_ID_statuses.h"
#include "OAIEndpoint_get_groups_messages_ID.h"
#include "OAIEndpoint_get_groups_messages_ID_metadata.h"
#include "OAIEndpoint_get_groups_messages_ID_metadata_collections.h"
#include "OAIEndpoint_get_groups_statuses.h"
#include "OAIEndpoint_patch_groups_ID.h"
#include "OAIEndpoint_patch_groups_ID_memberships.h"
#include "OAIEndpoint_post_groups.h"
#include "OAIEndpoint_post_groups_ID_memberships.h"
#include "OAIEndpoint_post_groups_ID_messages.h"
#include "OAIEndpoint_post_groups_ID_schedules.h"
#include "OAIEndpoint_post_groups_messages_ID_metadata.h"
#include "OAIEndpoint_post_groups_messages_metadata_filters.h"
#include "OAIEndpoint_post_groups_schedules.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void groupsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QList<qint32> [required]
    */
    virtual void groupsIDGet(const QList<qint32> &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void groupsIDMembershipsDelete(const qint32 &id);

    /**
    * @param[in]  id QList<qint32> [required]
    * @param[in]  moderators_only bool [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void groupsIDMembershipsGet(const QList<qint32> &id, const ::OpenAPI::OptionalParam<bool> &moderators_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  moderator bool [optional]
    */
    virtual void groupsIDMembershipsPatch(const qint32 &id, const qint32 &user_id, const ::OpenAPI::OptionalParam<bool> &moderator = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  passphrase QString [optional]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void groupsIDMembershipsPost(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &passphrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  gt_message_id qint32 [optional]
    * @param[in]  exclude_self bool [optional]
    * @param[in]  include_deleted bool [optional]
    * @param[in]  date QString [optional]
    * @param[in]  bubbled bool [optional]
    * @param[in]  record_seen bool [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void groupsIDMessagesGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &gt_message_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_self = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &bubbled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &record_seen = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  text_raw QString [required]
    * @param[in]  metadata_0_key QString [optional]
    * @param[in]  metadata_0_privacy QString [optional]
    * @param[in]  metadata_0_values QList<QString> [optional]
    * @param[in]  metadata_1_key QString [optional]
    * @param[in]  metadata_1_privacy QString [optional]
    * @param[in]  metadata_1_values QList<QString> [optional]
    * @param[in]  metadata_2_key QString [optional]
    * @param[in]  metadata_2_privacy QString [optional]
    * @param[in]  metadata_2_values QList<QString> [optional]
    * @param[in]  text_emoticons bool [optional]
    */
    virtual void groupsIDMessagesPost(const qint32 &id, const QString &text_raw, const ::OpenAPI::OptionalParam<QString> &metadata_0_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &text_emoticons = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  description QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  passphrase QString [optional]
    * @param[in]  privacy QString [optional]
    * @param[in]  slug QString [optional]
    */
    virtual void groupsIDPatch(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &passphrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QList<qint32> [required]
    * @param[in]  date QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  roll_up bool [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void groupsIDSchedulesPost(const QList<qint32> &id, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &roll_up = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QList<qint32> [required]
    */
    virtual void groupsIDStatusesGet(const QList<qint32> &id);

    /**
    * @param[in]  id QList<qint32> [required]
    */
    virtual void groupsMessagesIDDelete(const QList<qint32> &id);

    /**
    * @param[in]  id QList<qint32> [required]
    */
    virtual void groupsMessagesIDGet(const QList<qint32> &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void groupsMessagesIDMetadataCollectionsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void groupsMessagesIDMetadataGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  metadata_0_key QString [optional]
    * @param[in]  metadata_0_privacy QString [optional]
    * @param[in]  metadata_0_values QList<QString> [optional]
    * @param[in]  metadata_1_key QString [optional]
    * @param[in]  metadata_1_privacy QString [optional]
    * @param[in]  metadata_1_values QList<QString> [optional]
    * @param[in]  metadata_2_key QString [optional]
    * @param[in]  metadata_2_privacy QString [optional]
    * @param[in]  metadata_2_values QList<QString> [optional]
    */
    virtual void groupsMessagesIDMetadataPost(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &metadata_0_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  metadata_0_key QString [optional]
    * @param[in]  metadata_0_values QList<QString> [optional]
    * @param[in]  metadata_1_key QString [optional]
    * @param[in]  metadata_1_values QList<QString> [optional]
    * @param[in]  metadata_2_key QString [optional]
    * @param[in]  metadata_2_values QList<QString> [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void groupsMessagesMetadataFiltersPost(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  description QString [required]
    * @param[in]  name QString [required]
    * @param[in]  privacy QString [required]
    * @param[in]  slug QString [required]
    * @param[in]  passphrase QString [optional]
    */
    virtual void groupsPost(const QString &description, const QString &name, const QString &privacy, const QString &slug, const ::OpenAPI::OptionalParam<QString> &passphrase = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  date QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  roll_up bool [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void groupsSchedulesPost(const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &roll_up = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  existing_membership bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void groupsStatusesGet(const ::OpenAPI::OptionalParam<bool> &existing_membership = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void groupsGetCallback(OAIHttpRequestWorker *worker);
    void groupsIDGetCallback(OAIHttpRequestWorker *worker);
    void groupsIDMembershipsDeleteCallback(OAIHttpRequestWorker *worker);
    void groupsIDMembershipsGetCallback(OAIHttpRequestWorker *worker);
    void groupsIDMembershipsPatchCallback(OAIHttpRequestWorker *worker);
    void groupsIDMembershipsPostCallback(OAIHttpRequestWorker *worker);
    void groupsIDMessagesGetCallback(OAIHttpRequestWorker *worker);
    void groupsIDMessagesPostCallback(OAIHttpRequestWorker *worker);
    void groupsIDPatchCallback(OAIHttpRequestWorker *worker);
    void groupsIDSchedulesPostCallback(OAIHttpRequestWorker *worker);
    void groupsIDStatusesGetCallback(OAIHttpRequestWorker *worker);
    void groupsMessagesIDDeleteCallback(OAIHttpRequestWorker *worker);
    void groupsMessagesIDGetCallback(OAIHttpRequestWorker *worker);
    void groupsMessagesIDMetadataCollectionsGetCallback(OAIHttpRequestWorker *worker);
    void groupsMessagesIDMetadataGetCallback(OAIHttpRequestWorker *worker);
    void groupsMessagesIDMetadataPostCallback(OAIHttpRequestWorker *worker);
    void groupsMessagesMetadataFiltersPostCallback(OAIHttpRequestWorker *worker);
    void groupsPostCallback(OAIHttpRequestWorker *worker);
    void groupsSchedulesPostCallback(OAIHttpRequestWorker *worker);
    void groupsStatusesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void groupsGetSignal(OAIEndpoint_get_groups summary);
    void groupsIDGetSignal(OAIEndpoint_get_groups_ID summary);
    void groupsIDMembershipsDeleteSignal(OAIEndpoint_delete_groups_ID_memberships summary);
    void groupsIDMembershipsGetSignal(OAIEndpoint_get_groups_ID_memberships summary);
    void groupsIDMembershipsPatchSignal(OAIEndpoint_patch_groups_ID_memberships summary);
    void groupsIDMembershipsPostSignal(OAIEndpoint_post_groups_ID_memberships summary);
    void groupsIDMessagesGetSignal(OAIEndpoint_get_groups_ID_messages summary);
    void groupsIDMessagesPostSignal(OAIEndpoint_post_groups_ID_messages summary);
    void groupsIDPatchSignal(OAIEndpoint_patch_groups_ID summary);
    void groupsIDSchedulesPostSignal(OAIEndpoint_post_groups_ID_schedules summary);
    void groupsIDStatusesGetSignal(OAIEndpoint_get_groups_ID_statuses summary);
    void groupsMessagesIDDeleteSignal(OAIEndpoint_delete_groups_messages_ID summary);
    void groupsMessagesIDGetSignal(OAIEndpoint_get_groups_messages_ID summary);
    void groupsMessagesIDMetadataCollectionsGetSignal(OAIEndpoint_get_groups_messages_ID_metadata_collections summary);
    void groupsMessagesIDMetadataGetSignal(OAIEndpoint_get_groups_messages_ID_metadata summary);
    void groupsMessagesIDMetadataPostSignal(OAIEndpoint_post_groups_messages_ID_metadata summary);
    void groupsMessagesMetadataFiltersPostSignal(OAIEndpoint_post_groups_messages_metadata_filters summary);
    void groupsPostSignal(OAIEndpoint_post_groups summary);
    void groupsSchedulesPostSignal(OAIEndpoint_post_groups_schedules summary);
    void groupsStatusesGetSignal(OAIEndpoint_get_groups_statuses summary);


    void groupsGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups summary);
    void groupsIDGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups_ID summary);
    void groupsIDMembershipsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_delete_groups_ID_memberships summary);
    void groupsIDMembershipsGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups_ID_memberships summary);
    void groupsIDMembershipsPatchSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_patch_groups_ID_memberships summary);
    void groupsIDMembershipsPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_groups_ID_memberships summary);
    void groupsIDMessagesGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups_ID_messages summary);
    void groupsIDMessagesPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_groups_ID_messages summary);
    void groupsIDPatchSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_patch_groups_ID summary);
    void groupsIDSchedulesPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_groups_ID_schedules summary);
    void groupsIDStatusesGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups_ID_statuses summary);
    void groupsMessagesIDDeleteSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_delete_groups_messages_ID summary);
    void groupsMessagesIDGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups_messages_ID summary);
    void groupsMessagesIDMetadataCollectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups_messages_ID_metadata_collections summary);
    void groupsMessagesIDMetadataGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups_messages_ID_metadata summary);
    void groupsMessagesIDMetadataPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_groups_messages_ID_metadata summary);
    void groupsMessagesMetadataFiltersPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_groups_messages_metadata_filters summary);
    void groupsPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_groups summary);
    void groupsSchedulesPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_groups_schedules summary);
    void groupsStatusesGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_groups_statuses summary);

    Q_DECL_DEPRECATED_X("Use groupsGetSignalError() instead")
    void groupsGetSignalE(OAIEndpoint_get_groups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalError(OAIEndpoint_get_groups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDGetSignalError() instead")
    void groupsIDGetSignalE(OAIEndpoint_get_groups_ID summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDGetSignalError(OAIEndpoint_get_groups_ID summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMembershipsDeleteSignalError() instead")
    void groupsIDMembershipsDeleteSignalE(OAIEndpoint_delete_groups_ID_memberships summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMembershipsDeleteSignalError(OAIEndpoint_delete_groups_ID_memberships summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMembershipsGetSignalError() instead")
    void groupsIDMembershipsGetSignalE(OAIEndpoint_get_groups_ID_memberships summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMembershipsGetSignalError(OAIEndpoint_get_groups_ID_memberships summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMembershipsPatchSignalError() instead")
    void groupsIDMembershipsPatchSignalE(OAIEndpoint_patch_groups_ID_memberships summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMembershipsPatchSignalError(OAIEndpoint_patch_groups_ID_memberships summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMembershipsPostSignalError() instead")
    void groupsIDMembershipsPostSignalE(OAIEndpoint_post_groups_ID_memberships summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMembershipsPostSignalError(OAIEndpoint_post_groups_ID_memberships summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMessagesGetSignalError() instead")
    void groupsIDMessagesGetSignalE(OAIEndpoint_get_groups_ID_messages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMessagesGetSignalError(OAIEndpoint_get_groups_ID_messages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMessagesPostSignalError() instead")
    void groupsIDMessagesPostSignalE(OAIEndpoint_post_groups_ID_messages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMessagesPostSignalError(OAIEndpoint_post_groups_ID_messages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDPatchSignalError() instead")
    void groupsIDPatchSignalE(OAIEndpoint_patch_groups_ID summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDPatchSignalError(OAIEndpoint_patch_groups_ID summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDSchedulesPostSignalError() instead")
    void groupsIDSchedulesPostSignalE(OAIEndpoint_post_groups_ID_schedules summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDSchedulesPostSignalError(OAIEndpoint_post_groups_ID_schedules summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDStatusesGetSignalError() instead")
    void groupsIDStatusesGetSignalE(OAIEndpoint_get_groups_ID_statuses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDStatusesGetSignalError(OAIEndpoint_get_groups_ID_statuses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDDeleteSignalError() instead")
    void groupsMessagesIDDeleteSignalE(OAIEndpoint_delete_groups_messages_ID summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDDeleteSignalError(OAIEndpoint_delete_groups_messages_ID summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDGetSignalError() instead")
    void groupsMessagesIDGetSignalE(OAIEndpoint_get_groups_messages_ID summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDGetSignalError(OAIEndpoint_get_groups_messages_ID summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDMetadataCollectionsGetSignalError() instead")
    void groupsMessagesIDMetadataCollectionsGetSignalE(OAIEndpoint_get_groups_messages_ID_metadata_collections summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDMetadataCollectionsGetSignalError(OAIEndpoint_get_groups_messages_ID_metadata_collections summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDMetadataGetSignalError() instead")
    void groupsMessagesIDMetadataGetSignalE(OAIEndpoint_get_groups_messages_ID_metadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDMetadataGetSignalError(OAIEndpoint_get_groups_messages_ID_metadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDMetadataPostSignalError() instead")
    void groupsMessagesIDMetadataPostSignalE(OAIEndpoint_post_groups_messages_ID_metadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDMetadataPostSignalError(OAIEndpoint_post_groups_messages_ID_metadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesMetadataFiltersPostSignalError() instead")
    void groupsMessagesMetadataFiltersPostSignalE(OAIEndpoint_post_groups_messages_metadata_filters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesMetadataFiltersPostSignalError(OAIEndpoint_post_groups_messages_metadata_filters summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPostSignalError() instead")
    void groupsPostSignalE(OAIEndpoint_post_groups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPostSignalError(OAIEndpoint_post_groups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsSchedulesPostSignalError() instead")
    void groupsSchedulesPostSignalE(OAIEndpoint_post_groups_schedules summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsSchedulesPostSignalError(OAIEndpoint_post_groups_schedules summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsStatusesGetSignalError() instead")
    void groupsStatusesGetSignalE(OAIEndpoint_get_groups_statuses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsStatusesGetSignalError(OAIEndpoint_get_groups_statuses summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use groupsGetSignalErrorFull() instead")
    void groupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDGetSignalErrorFull() instead")
    void groupsIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMembershipsDeleteSignalErrorFull() instead")
    void groupsIDMembershipsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMembershipsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMembershipsGetSignalErrorFull() instead")
    void groupsIDMembershipsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMembershipsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMembershipsPatchSignalErrorFull() instead")
    void groupsIDMembershipsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMembershipsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMembershipsPostSignalErrorFull() instead")
    void groupsIDMembershipsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMembershipsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMessagesGetSignalErrorFull() instead")
    void groupsIDMessagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMessagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDMessagesPostSignalErrorFull() instead")
    void groupsIDMessagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDMessagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDPatchSignalErrorFull() instead")
    void groupsIDPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDSchedulesPostSignalErrorFull() instead")
    void groupsIDSchedulesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDSchedulesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIDStatusesGetSignalErrorFull() instead")
    void groupsIDStatusesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIDStatusesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDDeleteSignalErrorFull() instead")
    void groupsMessagesIDDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDGetSignalErrorFull() instead")
    void groupsMessagesIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDMetadataCollectionsGetSignalErrorFull() instead")
    void groupsMessagesIDMetadataCollectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDMetadataCollectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDMetadataGetSignalErrorFull() instead")
    void groupsMessagesIDMetadataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDMetadataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesIDMetadataPostSignalErrorFull() instead")
    void groupsMessagesIDMetadataPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesIDMetadataPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsMessagesMetadataFiltersPostSignalErrorFull() instead")
    void groupsMessagesMetadataFiltersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsMessagesMetadataFiltersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPostSignalErrorFull() instead")
    void groupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsSchedulesPostSignalErrorFull() instead")
    void groupsSchedulesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsSchedulesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsStatusesGetSignalErrorFull() instead")
    void groupsStatusesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsStatusesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
