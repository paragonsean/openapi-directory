/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversation_first_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversation_first_message::OAIConversation_first_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversation_first_message::OAIConversation_first_message() {
    this->initializeModel();
}

OAIConversation_first_message::~OAIConversation_first_message() {}

void OAIConversation_first_message::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIConversation_first_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversation_first_message::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIConversation_first_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversation_first_message::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIUser OAIConversation_first_message::getAuthor() const {
    return m_author;
}
void OAIConversation_first_message::setAuthor(const OAIUser &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIConversation_first_message::is_author_Set() const{
    return m_author_isSet;
}

bool OAIConversation_first_message::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIConversation_first_message::getTimestamp() const {
    return m_timestamp;
}
void OAIConversation_first_message::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIConversation_first_message::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIConversation_first_message::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIConversation_first_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversation_first_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
