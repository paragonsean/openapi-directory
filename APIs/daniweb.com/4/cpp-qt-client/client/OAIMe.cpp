/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMe::OAIMe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMe::OAIMe() {
    this->initializeModel();
}

OAIMe::~OAIMe() {}

void OAIMe::initializeModel() {

    m_business_card_isSet = false;
    m_business_card_isValid = false;

    m_community_persona_isSet = false;
    m_community_persona_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_matching_isSet = false;
    m_matching_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIMe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMe::fromJsonObject(QJsonObject json) {

    m_business_card_isValid = ::OpenAPI::fromJsonValue(m_business_card, json[QString("business_card")]);
    m_business_card_isSet = !json[QString("business_card")].isNull() && m_business_card_isValid;

    m_community_persona_isValid = ::OpenAPI::fromJsonValue(m_community_persona, json[QString("community_persona")]);
    m_community_persona_isSet = !json[QString("community_persona")].isNull() && m_community_persona_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_matching_isValid = ::OpenAPI::fromJsonValue(m_matching, json[QString("matching")]);
    m_matching_isSet = !json[QString("matching")].isNull() && m_matching_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIMe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMe::asJsonObject() const {
    QJsonObject obj;
    if (m_business_card.isSet()) {
        obj.insert(QString("business_card"), ::OpenAPI::toJsonValue(m_business_card));
    }
    if (m_community_persona.isSet()) {
        obj.insert(QString("community_persona"), ::OpenAPI::toJsonValue(m_community_persona));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_matching.isSet()) {
        obj.insert(QString("matching"), ::OpenAPI::toJsonValue(m_matching));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

OAIMe_business_card OAIMe::getBusinessCard() const {
    return m_business_card;
}
void OAIMe::setBusinessCard(const OAIMe_business_card &business_card) {
    m_business_card = business_card;
    m_business_card_isSet = true;
}

bool OAIMe::is_business_card_Set() const{
    return m_business_card_isSet;
}

bool OAIMe::is_business_card_Valid() const{
    return m_business_card_isValid;
}

OAIMember OAIMe::getCommunityPersona() const {
    return m_community_persona;
}
void OAIMe::setCommunityPersona(const OAIMember &community_persona) {
    m_community_persona = community_persona;
    m_community_persona_isSet = true;
}

bool OAIMe::is_community_persona_Set() const{
    return m_community_persona_isSet;
}

bool OAIMe::is_community_persona_Valid() const{
    return m_community_persona_isValid;
}

double OAIMe::getId() const {
    return m_id;
}
void OAIMe::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMe::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMe::is_id_Valid() const{
    return m_id_isValid;
}

OAIMe_location OAIMe::getLocation() const {
    return m_location;
}
void OAIMe::setLocation(const OAIMe_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMe::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMe::is_location_Valid() const{
    return m_location_isValid;
}

OAIMe_matching OAIMe::getMatching() const {
    return m_matching;
}
void OAIMe::setMatching(const OAIMe_matching &matching) {
    m_matching = matching;
    m_matching_isSet = true;
}

bool OAIMe::is_matching_Set() const{
    return m_matching_isSet;
}

bool OAIMe::is_matching_Valid() const{
    return m_matching_isValid;
}

OAIMe_profile OAIMe::getProfile() const {
    return m_profile;
}
void OAIMe::setProfile(const OAIMe_profile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIMe::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIMe::is_profile_Valid() const{
    return m_profile_isValid;
}

OAIMe_settings OAIMe::getSettings() const {
    return m_settings;
}
void OAIMe::setSettings(const OAIMe_settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIMe::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIMe::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIMe_usage OAIMe::getUsage() const {
    return m_usage;
}
void OAIMe::setUsage(const OAIMe_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIMe::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIMe::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIMe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_persona.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMe::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
