/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember_stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember_stats::OAIMember_stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember_stats::OAIMember_stats() {
    this->initializeModel();
}

OAIMember_stats::~OAIMember_stats() {}

void OAIMember_stats::initializeModel() {

    m_answered_count_isSet = false;
    m_answered_count_isValid = false;

    m_endorsements_count_isSet = false;
    m_endorsements_count_isValid = false;

    m_posts_count_isSet = false;
    m_posts_count_isValid = false;

    m_reputation_count_isSet = false;
    m_reputation_count_isValid = false;
}

void OAIMember_stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember_stats::fromJsonObject(QJsonObject json) {

    m_answered_count_isValid = ::OpenAPI::fromJsonValue(m_answered_count, json[QString("answered_count")]);
    m_answered_count_isSet = !json[QString("answered_count")].isNull() && m_answered_count_isValid;

    m_endorsements_count_isValid = ::OpenAPI::fromJsonValue(m_endorsements_count, json[QString("endorsements_count")]);
    m_endorsements_count_isSet = !json[QString("endorsements_count")].isNull() && m_endorsements_count_isValid;

    m_posts_count_isValid = ::OpenAPI::fromJsonValue(m_posts_count, json[QString("posts_count")]);
    m_posts_count_isSet = !json[QString("posts_count")].isNull() && m_posts_count_isValid;

    m_reputation_count_isValid = ::OpenAPI::fromJsonValue(m_reputation_count, json[QString("reputation_count")]);
    m_reputation_count_isSet = !json[QString("reputation_count")].isNull() && m_reputation_count_isValid;
}

QString OAIMember_stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember_stats::asJsonObject() const {
    QJsonObject obj;
    if (m_answered_count_isSet) {
        obj.insert(QString("answered_count"), ::OpenAPI::toJsonValue(m_answered_count));
    }
    if (m_endorsements_count_isSet) {
        obj.insert(QString("endorsements_count"), ::OpenAPI::toJsonValue(m_endorsements_count));
    }
    if (m_posts_count_isSet) {
        obj.insert(QString("posts_count"), ::OpenAPI::toJsonValue(m_posts_count));
    }
    if (m_reputation_count_isSet) {
        obj.insert(QString("reputation_count"), ::OpenAPI::toJsonValue(m_reputation_count));
    }
    return obj;
}

double OAIMember_stats::getAnsweredCount() const {
    return m_answered_count;
}
void OAIMember_stats::setAnsweredCount(const double &answered_count) {
    m_answered_count = answered_count;
    m_answered_count_isSet = true;
}

bool OAIMember_stats::is_answered_count_Set() const{
    return m_answered_count_isSet;
}

bool OAIMember_stats::is_answered_count_Valid() const{
    return m_answered_count_isValid;
}

double OAIMember_stats::getEndorsementsCount() const {
    return m_endorsements_count;
}
void OAIMember_stats::setEndorsementsCount(const double &endorsements_count) {
    m_endorsements_count = endorsements_count;
    m_endorsements_count_isSet = true;
}

bool OAIMember_stats::is_endorsements_count_Set() const{
    return m_endorsements_count_isSet;
}

bool OAIMember_stats::is_endorsements_count_Valid() const{
    return m_endorsements_count_isValid;
}

double OAIMember_stats::getPostsCount() const {
    return m_posts_count;
}
void OAIMember_stats::setPostsCount(const double &posts_count) {
    m_posts_count = posts_count;
    m_posts_count_isSet = true;
}

bool OAIMember_stats::is_posts_count_Set() const{
    return m_posts_count_isSet;
}

bool OAIMember_stats::is_posts_count_Valid() const{
    return m_posts_count_isValid;
}

double OAIMember_stats::getReputationCount() const {
    return m_reputation_count;
}
void OAIMember_stats::setReputationCount(const double &reputation_count) {
    m_reputation_count = reputation_count;
    m_reputation_count_isSet = true;
}

bool OAIMember_stats::is_reputation_count_Set() const{
    return m_reputation_count_isSet;
}

bool OAIMember_stats::is_reputation_count_Valid() const{
    return m_reputation_count_isValid;
}

bool OAIMember_stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answered_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endorsements_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posts_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember_stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
