/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsersApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIUsersApi::OAIUsersApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIUsersApi::~OAIUsersApi() {
}

void OAIUsersApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.daniweb.com/connect/api/v4"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("usersGet", defaultConf);
    _serverIndices.insert("usersGet", 0);
    _serverConfigs.insert("usersGet_1", defaultConf);
    _serverIndices.insert("usersGet_1", 0);
    _serverConfigs.insert("usersIDGet", defaultConf);
    _serverIndices.insert("usersIDGet", 0);
    _serverConfigs.insert("usersIDGroupsGet", defaultConf);
    _serverIndices.insert("usersIDGroupsGet", 0);
    _serverConfigs.insert("usersIDGroupsMessagesGet", defaultConf);
    _serverIndices.insert("usersIDGroupsMessagesGet", 0);
    _serverConfigs.insert("usersIDMessagesPost", defaultConf);
    _serverIndices.insert("usersIDMessagesPost", 0);
    _serverConfigs.insert("usersIDMetadataCollectionsGet", defaultConf);
    _serverIndices.insert("usersIDMetadataCollectionsGet", 0);
    _serverConfigs.insert("usersIDMetadataGet", defaultConf);
    _serverIndices.insert("usersIDMetadataGet", 0);
    _serverConfigs.insert("usersIDMetadataPost", defaultConf);
    _serverIndices.insert("usersIDMetadataPost", 0);
    _serverConfigs.insert("usersIDPositionsGet", defaultConf);
    _serverIndices.insert("usersIDPositionsGet", 0);
    _serverConfigs.insert("usersIDSynergiesGet", defaultConf);
    _serverIndices.insert("usersIDSynergiesGet", 0);
    _serverConfigs.insert("usersIDSynergiesPatch", defaultConf);
    _serverIndices.insert("usersIDSynergiesPatch", 0);
    _serverConfigs.insert("usersInvitesPost", defaultConf);
    _serverIndices.insert("usersInvitesPost", 0);
    _serverConfigs.insert("usersMetadataFiltersPost", defaultConf);
    _serverIndices.insert("usersMetadataFiltersPost", 0);
    _serverConfigs.insert("usersNearbyGet", defaultConf);
    _serverIndices.insert("usersNearbyGet", 0);
    _serverConfigs.insert("usersPatch", defaultConf);
    _serverIndices.insert("usersPatch", 0);
    _serverConfigs.insert("usersSearchesPost", defaultConf);
    _serverIndices.insert("usersSearchesPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIUsersApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIUsersApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIUsersApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIUsersApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIUsersApi::setUsername(const QString &username) {
    _username = username;
}

void OAIUsersApi::setPassword(const QString &password) {
    _password = password;
}


void OAIUsersApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIUsersApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIUsersApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIUsersApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIUsersApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIUsersApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIUsersApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIUsersApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIUsersApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIUsersApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIUsersApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIUsersApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIUsersApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIUsersApi::usersGet(const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &order_by, const ::OpenAPI::OptionalParam<bool> &bubbled, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["usersGet"][_serverIndices.value("usersGet")].URL()+"/users");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (order_by.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "order_by", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("order_by")).append(querySuffix).append(QUrl::toPercentEncoding(order_by.stringValue()));
    }
    if (bubbled.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "bubbled", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("bubbled")).append(querySuffix).append(QUrl::toPercentEncoding(bubbled.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("profile_read");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("profile_read");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersGetSignal(output);
        Q_EMIT usersGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersGetSignalE(output, error_type, error_str);
        Q_EMIT usersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersGetSignalError(output, error_type, error_str);
        Q_EMIT usersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersGet_1() {
    QString fullPath = QString(_serverConfigs["usersGet_1"][_serverIndices.value("usersGet_1")].URL()+"/users/~");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersGet_1Callback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("profile_read");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersGet_1Callback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("profile_read");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersGet_1Callback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersGet_1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users__ output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersGet_1Signal(output);
        Q_EMIT usersGet_1SignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersGet_1SignalE(output, error_type, error_str);
        Q_EMIT usersGet_1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersGet_1SignalError(output, error_type, error_str);
        Q_EMIT usersGet_1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDGet(const QList<qint32> &id) {
    QString fullPath = QString(_serverConfigs["usersIDGet"][_serverIndices.value("usersIDGet")].URL()+"/users/{ID}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        if (id.size() > 0) {
            QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
            qint32 count = 0;
            for (qint32 t : id) {
                if (count > 0) {
                    fullPath.append(pathDelimiter);
                }
                fullPath.append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(t)));
                count++;
            }
            fullPath.replace(idPathParam, paramString);
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("basic");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("basic");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users_ID output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDGetSignal(output);
        Q_EMIT usersIDGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDGetSignalE(output, error_type, error_str);
        Q_EMIT usersIDGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDGetSignalError(output, error_type, error_str);
        Q_EMIT usersIDGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDGroupsGet(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["usersIDGroupsGet"][_serverIndices.value("usersIDGroupsGet")].URL()+"/users/{ID}/groups");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGroupsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("basic");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGroupsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("basic");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGroupsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDGroupsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users_ID_groups output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDGroupsGetSignal(output);
        Q_EMIT usersIDGroupsGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDGroupsGetSignalE(output, error_type, error_str);
        Q_EMIT usersIDGroupsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDGroupsGetSignalError(output, error_type, error_str);
        Q_EMIT usersIDGroupsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDGroupsMessagesGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["usersIDGroupsMessagesGet"][_serverIndices.value("usersIDGroupsMessagesGet")].URL()+"/users/{ID}/groups/messages");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGroupsMessagesGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("groups_read");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGroupsMessagesGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("groups_read");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDGroupsMessagesGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDGroupsMessagesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users_ID_groups_messages output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDGroupsMessagesGetSignal(output);
        Q_EMIT usersIDGroupsMessagesGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("groups_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("groups_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDGroupsMessagesGetSignalE(output, error_type, error_str);
        Q_EMIT usersIDGroupsMessagesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDGroupsMessagesGetSignalError(output, error_type, error_str);
        Q_EMIT usersIDGroupsMessagesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDMessagesPost(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &bubbled, const ::OpenAPI::OptionalParam<QString> &metadata_0_key, const ::OpenAPI::OptionalParam<QString> &metadata_0_privacy, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values, const ::OpenAPI::OptionalParam<QString> &metadata_1_key, const ::OpenAPI::OptionalParam<QString> &metadata_1_privacy, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values, const ::OpenAPI::OptionalParam<QString> &metadata_2_key, const ::OpenAPI::OptionalParam<QString> &metadata_2_privacy, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values, const ::OpenAPI::OptionalParam<bool> &text_emoticons, const ::OpenAPI::OptionalParam<QString> &text_raw) {
    QString fullPath = QString(_serverConfigs["usersIDMessagesPost"][_serverIndices.value("usersIDMessagesPost")].URL()+"/users/{ID}/messages");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (bubbled.hasValue())
    {
        input.add_var("bubbled", ::OpenAPI::toStringValue(bubbled.value()));
    }
    if (metadata_0_key.hasValue())
    {
        input.add_var("metadata_0_key", ::OpenAPI::toStringValue(metadata_0_key.value()));
    }
    if (metadata_0_privacy.hasValue())
    {
        input.add_var("metadata_0_privacy", ::OpenAPI::toStringValue(metadata_0_privacy.value()));
    }
    if (metadata_0_values.hasValue())
    {
        input.add_var("metadata_0_values[]", ::OpenAPI::toStringValue(metadata_0_values.value()));
    }
    if (metadata_1_key.hasValue())
    {
        input.add_var("metadata_1_key", ::OpenAPI::toStringValue(metadata_1_key.value()));
    }
    if (metadata_1_privacy.hasValue())
    {
        input.add_var("metadata_1_privacy", ::OpenAPI::toStringValue(metadata_1_privacy.value()));
    }
    if (metadata_1_values.hasValue())
    {
        input.add_var("metadata_1_values[]", ::OpenAPI::toStringValue(metadata_1_values.value()));
    }
    if (metadata_2_key.hasValue())
    {
        input.add_var("metadata_2_key", ::OpenAPI::toStringValue(metadata_2_key.value()));
    }
    if (metadata_2_privacy.hasValue())
    {
        input.add_var("metadata_2_privacy", ::OpenAPI::toStringValue(metadata_2_privacy.value()));
    }
    if (metadata_2_values.hasValue())
    {
        input.add_var("metadata_2_values[]", ::OpenAPI::toStringValue(metadata_2_values.value()));
    }
    if (text_emoticons.hasValue())
    {
        input.add_var("text_emoticons", ::OpenAPI::toStringValue(text_emoticons.value()));
    }
    if (text_raw.hasValue())
    {
        input.add_var("text_raw", ::OpenAPI::toStringValue(text_raw.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMessagesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("profile_read");
    scope.append("conversations_write");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMessagesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("profile_read");
    scope.append("conversations_write");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMessagesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDMessagesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_post_users_ID_messages output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDMessagesPostSignal(output);
        Q_EMIT usersIDMessagesPostSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        scope.append("conversations_write");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        scope.append("conversations_write");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDMessagesPostSignalE(output, error_type, error_str);
        Q_EMIT usersIDMessagesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDMessagesPostSignalError(output, error_type, error_str);
        Q_EMIT usersIDMessagesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDMetadataCollectionsGet(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["usersIDMetadataCollectionsGet"][_serverIndices.value("usersIDMetadataCollectionsGet")].URL()+"/users/{ID}/metadata/collections");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataCollectionsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("basic");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataCollectionsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("basic");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataCollectionsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDMetadataCollectionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users_ID_metadata_collections output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDMetadataCollectionsGetSignal(output);
        Q_EMIT usersIDMetadataCollectionsGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDMetadataCollectionsGetSignalE(output, error_type, error_str);
        Q_EMIT usersIDMetadataCollectionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDMetadataCollectionsGetSignalError(output, error_type, error_str);
        Q_EMIT usersIDMetadataCollectionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDMetadataGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["usersIDMetadataGet"][_serverIndices.value("usersIDMetadataGet")].URL()+"/users/{ID}/metadata");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("basic");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("basic");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDMetadataGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users_ID_metadata output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDMetadataGetSignal(output);
        Q_EMIT usersIDMetadataGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDMetadataGetSignalE(output, error_type, error_str);
        Q_EMIT usersIDMetadataGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDMetadataGetSignalError(output, error_type, error_str);
        Q_EMIT usersIDMetadataGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDMetadataPost(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &metadata_0_key, const ::OpenAPI::OptionalParam<QString> &metadata_0_privacy, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values, const ::OpenAPI::OptionalParam<QString> &metadata_1_key, const ::OpenAPI::OptionalParam<QString> &metadata_1_privacy, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values, const ::OpenAPI::OptionalParam<QString> &metadata_2_key, const ::OpenAPI::OptionalParam<QString> &metadata_2_privacy, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values) {
    QString fullPath = QString(_serverConfigs["usersIDMetadataPost"][_serverIndices.value("usersIDMetadataPost")].URL()+"/users/{ID}/metadata");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (metadata_0_key.hasValue())
    {
        input.add_var("metadata_0_key", ::OpenAPI::toStringValue(metadata_0_key.value()));
    }
    if (metadata_0_privacy.hasValue())
    {
        input.add_var("metadata_0_privacy", ::OpenAPI::toStringValue(metadata_0_privacy.value()));
    }
    if (metadata_0_values.hasValue())
    {
        input.add_var("metadata_0_values[]", ::OpenAPI::toStringValue(metadata_0_values.value()));
    }
    if (metadata_1_key.hasValue())
    {
        input.add_var("metadata_1_key", ::OpenAPI::toStringValue(metadata_1_key.value()));
    }
    if (metadata_1_privacy.hasValue())
    {
        input.add_var("metadata_1_privacy", ::OpenAPI::toStringValue(metadata_1_privacy.value()));
    }
    if (metadata_1_values.hasValue())
    {
        input.add_var("metadata_1_values[]", ::OpenAPI::toStringValue(metadata_1_values.value()));
    }
    if (metadata_2_key.hasValue())
    {
        input.add_var("metadata_2_key", ::OpenAPI::toStringValue(metadata_2_key.value()));
    }
    if (metadata_2_privacy.hasValue())
    {
        input.add_var("metadata_2_privacy", ::OpenAPI::toStringValue(metadata_2_privacy.value()));
    }
    if (metadata_2_values.hasValue())
    {
        input.add_var("metadata_2_values[]", ::OpenAPI::toStringValue(metadata_2_values.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("basic");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("basic");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDMetadataPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDMetadataPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_post_users_ID_metadata output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDMetadataPostSignal(output);
        Q_EMIT usersIDMetadataPostSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDMetadataPostSignalE(output, error_type, error_str);
        Q_EMIT usersIDMetadataPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDMetadataPostSignalError(output, error_type, error_str);
        Q_EMIT usersIDMetadataPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDPositionsGet(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &bubbled) {
    QString fullPath = QString(_serverConfigs["usersIDPositionsGet"][_serverIndices.value("usersIDPositionsGet")].URL()+"/users/{ID}/positions");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (bubbled.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "bubbled", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("bubbled")).append(querySuffix).append(QUrl::toPercentEncoding(bubbled.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDPositionsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("profile_read");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDPositionsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("profile_read");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDPositionsGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDPositionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users_ID_positions output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDPositionsGetSignal(output);
        Q_EMIT usersIDPositionsGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDPositionsGetSignalE(output, error_type, error_str);
        Q_EMIT usersIDPositionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDPositionsGetSignalError(output, error_type, error_str);
        Q_EMIT usersIDPositionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDSynergiesGet(const QList<qint32> &id) {
    QString fullPath = QString(_serverConfigs["usersIDSynergiesGet"][_serverIndices.value("usersIDSynergiesGet")].URL()+"/users/{ID}/synergies");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        if (id.size() > 0) {
            QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
            qint32 count = 0;
            for (qint32 t : id) {
                if (count > 0) {
                    fullPath.append(pathDelimiter);
                }
                fullPath.append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(t)));
                count++;
            }
            fullPath.replace(idPathParam, paramString);
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDSynergiesGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("profile_read");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDSynergiesGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("profile_read");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDSynergiesGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDSynergiesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users_ID_synergies output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDSynergiesGetSignal(output);
        Q_EMIT usersIDSynergiesGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDSynergiesGetSignalE(output, error_type, error_str);
        Q_EMIT usersIDSynergiesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDSynergiesGetSignalError(output, error_type, error_str);
        Q_EMIT usersIDSynergiesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersIDSynergiesPatch(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &relationship_muted, const ::OpenAPI::OptionalParam<bool> &relationship_skipped) {
    QString fullPath = QString(_serverConfigs["usersIDSynergiesPatch"][_serverIndices.value("usersIDSynergiesPatch")].URL()+"/users/{ID}/synergies");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (relationship_muted.hasValue())
    {
        input.add_var("relationship_muted", ::OpenAPI::toStringValue(relationship_muted.value()));
    }
    if (relationship_skipped.hasValue())
    {
        input.add_var("relationship_skipped", ::OpenAPI::toStringValue(relationship_skipped.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDSynergiesPatchCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("basic");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDSynergiesPatchCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("basic");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersIDSynergiesPatchCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersIDSynergiesPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_patch_users_ID_synergies output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersIDSynergiesPatchSignal(output);
        Q_EMIT usersIDSynergiesPatchSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersIDSynergiesPatchSignalE(output, error_type, error_str);
        Q_EMIT usersIDSynergiesPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersIDSynergiesPatchSignalError(output, error_type, error_str);
        Q_EMIT usersIDSynergiesPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersInvitesPost(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &csv, const ::OpenAPI::OptionalParam<QList<QString>> &emails) {
    QString fullPath = QString(_serverConfigs["usersInvitesPost"][_serverIndices.value("usersInvitesPost")].URL()+"/users/invites");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (csv.hasValue())
    {
        input.add_file("csv", csv.value().local_filename, csv.value().request_filename, csv.value().mime_type);
    }
    if (emails.hasValue())
    {
        input.add_var("emails[]", ::OpenAPI::toStringValue(emails.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersInvitesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("profile_read");
    scope.append("conversations_write");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersInvitesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("profile_read");
    scope.append("conversations_write");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersInvitesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersInvitesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_post_users_invites output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersInvitesPostSignal(output);
        Q_EMIT usersInvitesPostSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        scope.append("conversations_write");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        scope.append("conversations_write");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersInvitesPostSignalE(output, error_type, error_str);
        Q_EMIT usersInvitesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersInvitesPostSignalError(output, error_type, error_str);
        Q_EMIT usersInvitesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersMetadataFiltersPost(const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<QString> &metadata_0_key, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values, const ::OpenAPI::OptionalParam<QString> &metadata_1_key, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values, const ::OpenAPI::OptionalParam<QString> &metadata_2_key, const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values, const ::OpenAPI::OptionalParam<qint32> &offset) {
    QString fullPath = QString(_serverConfigs["usersMetadataFiltersPost"][_serverIndices.value("usersMetadataFiltersPost")].URL()+"/users/metadata/filters");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (limit.hasValue())
    {
        input.add_var("limit", ::OpenAPI::toStringValue(limit.value()));
    }
    if (metadata_0_key.hasValue())
    {
        input.add_var("metadata_0_key", ::OpenAPI::toStringValue(metadata_0_key.value()));
    }
    if (metadata_0_values.hasValue())
    {
        input.add_var("metadata_0_values[]", ::OpenAPI::toStringValue(metadata_0_values.value()));
    }
    if (metadata_1_key.hasValue())
    {
        input.add_var("metadata_1_key", ::OpenAPI::toStringValue(metadata_1_key.value()));
    }
    if (metadata_1_values.hasValue())
    {
        input.add_var("metadata_1_values[]", ::OpenAPI::toStringValue(metadata_1_values.value()));
    }
    if (metadata_2_key.hasValue())
    {
        input.add_var("metadata_2_key", ::OpenAPI::toStringValue(metadata_2_key.value()));
    }
    if (metadata_2_values.hasValue())
    {
        input.add_var("metadata_2_values[]", ::OpenAPI::toStringValue(metadata_2_values.value()));
    }
    if (offset.hasValue())
    {
        input.add_var("offset", ::OpenAPI::toStringValue(offset.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersMetadataFiltersPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("basic");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersMetadataFiltersPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("basic");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersMetadataFiltersPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersMetadataFiltersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_post_users_metadata_filters output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersMetadataFiltersPostSignal(output);
        Q_EMIT usersMetadataFiltersPostSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersMetadataFiltersPostSignalE(output, error_type, error_str);
        Q_EMIT usersMetadataFiltersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersMetadataFiltersPostSignalError(output, error_type, error_str);
        Q_EMIT usersMetadataFiltersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersNearbyGet(const ::OpenAPI::OptionalParam<float> &latitude, const ::OpenAPI::OptionalParam<float> &longitude, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["usersNearbyGet"][_serverIndices.value("usersNearbyGet")].URL()+"/users/nearby");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (latitude.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "latitude", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("latitude")).append(querySuffix).append(QUrl::toPercentEncoding(latitude.stringValue()));
    }
    if (longitude.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "longitude", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("longitude")).append(querySuffix).append(QUrl::toPercentEncoding(longitude.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersNearbyGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("profile_read");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersNearbyGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("profile_read");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersNearbyGetCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersNearbyGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_get_users_nearby output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersNearbyGetSignal(output);
        Q_EMIT usersNearbyGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersNearbyGetSignalE(output, error_type, error_str);
        Q_EMIT usersNearbyGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersNearbyGetSignalError(output, error_type, error_str);
        Q_EMIT usersNearbyGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersPatch(const ::OpenAPI::OptionalParam<QString> &company, const ::OpenAPI::OptionalParam<QString> &company_size, const ::OpenAPI::OptionalParam<QString> &first_name, const ::OpenAPI::OptionalParam<QList<QString>> &goals, const ::OpenAPI::OptionalParam<QString> &headline, const ::OpenAPI::OptionalParam<QString> &industry, const ::OpenAPI::OptionalParam<QString> &introduction, const ::OpenAPI::OptionalParam<QString> &job_position, const ::OpenAPI::OptionalParam<QString> &last_name, const ::OpenAPI::OptionalParam<QString> &location_importance, const ::OpenAPI::OptionalParam<QList<QString>> &match_tags, const ::OpenAPI::OptionalParam<QString> &pitch, const ::OpenAPI::OptionalParam<QList<QString>> &tags, const ::OpenAPI::OptionalParam<QString> &targeted_industry, const ::OpenAPI::OptionalParam<QString> &url) {
    QString fullPath = QString(_serverConfigs["usersPatch"][_serverIndices.value("usersPatch")].URL()+"/users/~");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (company.hasValue())
    {
        input.add_var("company", ::OpenAPI::toStringValue(company.value()));
    }
    if (company_size.hasValue())
    {
        input.add_var("company_size", ::OpenAPI::toStringValue(company_size.value()));
    }
    if (first_name.hasValue())
    {
        input.add_var("first_name", ::OpenAPI::toStringValue(first_name.value()));
    }
    if (goals.hasValue())
    {
        input.add_var("goals[]", ::OpenAPI::toStringValue(goals.value()));
    }
    if (headline.hasValue())
    {
        input.add_var("headline", ::OpenAPI::toStringValue(headline.value()));
    }
    if (industry.hasValue())
    {
        input.add_var("industry", ::OpenAPI::toStringValue(industry.value()));
    }
    if (introduction.hasValue())
    {
        input.add_var("introduction", ::OpenAPI::toStringValue(introduction.value()));
    }
    if (job_position.hasValue())
    {
        input.add_var("job_position", ::OpenAPI::toStringValue(job_position.value()));
    }
    if (last_name.hasValue())
    {
        input.add_var("last_name", ::OpenAPI::toStringValue(last_name.value()));
    }
    if (location_importance.hasValue())
    {
        input.add_var("location_importance", ::OpenAPI::toStringValue(location_importance.value()));
    }
    if (match_tags.hasValue())
    {
        input.add_var("match_tags[]", ::OpenAPI::toStringValue(match_tags.value()));
    }
    if (pitch.hasValue())
    {
        input.add_var("pitch", ::OpenAPI::toStringValue(pitch.value()));
    }
    if (tags.hasValue())
    {
        input.add_var("tags[]", ::OpenAPI::toStringValue(tags.value()));
    }
    if (targeted_industry.hasValue())
    {
        input.add_var("targeted_industry", ::OpenAPI::toStringValue(targeted_industry.value()));
    }
    if (url.hasValue())
    {
        input.add_var("url", ::OpenAPI::toStringValue(url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersPatchCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("profile_read");
    scope.append("profile_write");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersPatchCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("profile_read");
    scope.append("profile_write");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersPatchCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_patch_users__ output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersPatchSignal(output);
        Q_EMIT usersPatchSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        scope.append("profile_write");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("profile_read");
        scope.append("profile_write");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersPatchSignalE(output, error_type, error_str);
        Q_EMIT usersPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersPatchSignalError(output, error_type, error_str);
        Q_EMIT usersPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::usersSearchesPost(const ::OpenAPI::OptionalParam<qint32> &active_within_x_days, const ::OpenAPI::OptionalParam<QList<qint32>> &audience_ids, const ::OpenAPI::OptionalParam<bool> &bubbled, const ::OpenAPI::OptionalParam<bool> &exclude_connections, const ::OpenAPI::OptionalParam<bool> &exclude_matches, const ::OpenAPI::OptionalParam<bool> &exclude_muted, const ::OpenAPI::OptionalParam<bool> &exclude_skipped, const ::OpenAPI::OptionalParam<float> &geo_latitude, const ::OpenAPI::OptionalParam<float> &geo_longitude, const ::OpenAPI::OptionalParam<float> &geo_miles_away, const ::OpenAPI::OptionalParam<qint32> &group_id, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<QString> &location_city_query, const ::OpenAPI::OptionalParam<qint32> &location_city_weight, const ::OpenAPI::OptionalParam<QString> &location_country_query, const ::OpenAPI::OptionalParam<qint32> &location_country_weight, const ::OpenAPI::OptionalParam<QString> &location_region_query, const ::OpenAPI::OptionalParam<qint32> &location_region_weight, const ::OpenAPI::OptionalParam<QString> &metadata_0_key, const ::OpenAPI::OptionalParam<QString> &metadata_0_query, const ::OpenAPI::OptionalParam<qint32> &metadata_0_weight, const ::OpenAPI::OptionalParam<QString> &metadata_1_key, const ::OpenAPI::OptionalParam<QString> &metadata_1_query, const ::OpenAPI::OptionalParam<qint32> &metadata_1_weight, const ::OpenAPI::OptionalParam<QString> &metadata_2_key, const ::OpenAPI::OptionalParam<QString> &metadata_2_query, const ::OpenAPI::OptionalParam<qint32> &metadata_2_weight, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<QString> &position_organization_query, const ::OpenAPI::OptionalParam<qint32> &position_organization_weight, const ::OpenAPI::OptionalParam<QString> &position_role_query, const ::OpenAPI::OptionalParam<qint32> &position_role_weight, const ::OpenAPI::OptionalParam<QString> &position_summary_query, const ::OpenAPI::OptionalParam<qint32> &position_summary_weight, const ::OpenAPI::OptionalParam<QString> &profile_first_name_query, const ::OpenAPI::OptionalParam<qint32> &profile_first_name_weight, const ::OpenAPI::OptionalParam<QString> &profile_goals_query, const ::OpenAPI::OptionalParam<QString> &profile_goals_weight, const ::OpenAPI::OptionalParam<QString> &profile_headline_query, const ::OpenAPI::OptionalParam<qint32> &profile_headline_weight, const ::OpenAPI::OptionalParam<QString> &profile_industry_query, const ::OpenAPI::OptionalParam<qint32> &profile_industry_weight, const ::OpenAPI::OptionalParam<QString> &profile_last_name_query, const ::OpenAPI::OptionalParam<qint32> &profile_last_name_weight, const ::OpenAPI::OptionalParam<QString> &profile_pitch_query, const ::OpenAPI::OptionalParam<qint32> &profile_pitch_weight) {
    QString fullPath = QString(_serverConfigs["usersSearchesPost"][_serverIndices.value("usersSearchesPost")].URL()+"/users/searches");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (active_within_x_days.hasValue())
    {
        input.add_var("active_within_x_days", ::OpenAPI::toStringValue(active_within_x_days.value()));
    }
    if (audience_ids.hasValue())
    {
        input.add_var("audience_ids[]", ::OpenAPI::toStringValue(audience_ids.value()));
    }
    if (bubbled.hasValue())
    {
        input.add_var("bubbled", ::OpenAPI::toStringValue(bubbled.value()));
    }
    if (exclude_connections.hasValue())
    {
        input.add_var("exclude_connections", ::OpenAPI::toStringValue(exclude_connections.value()));
    }
    if (exclude_matches.hasValue())
    {
        input.add_var("exclude_matches", ::OpenAPI::toStringValue(exclude_matches.value()));
    }
    if (exclude_muted.hasValue())
    {
        input.add_var("exclude_muted", ::OpenAPI::toStringValue(exclude_muted.value()));
    }
    if (exclude_skipped.hasValue())
    {
        input.add_var("exclude_skipped", ::OpenAPI::toStringValue(exclude_skipped.value()));
    }
    if (geo_latitude.hasValue())
    {
        input.add_var("geo_latitude", ::OpenAPI::toStringValue(geo_latitude.value()));
    }
    if (geo_longitude.hasValue())
    {
        input.add_var("geo_longitude", ::OpenAPI::toStringValue(geo_longitude.value()));
    }
    if (geo_miles_away.hasValue())
    {
        input.add_var("geo_miles_away", ::OpenAPI::toStringValue(geo_miles_away.value()));
    }
    if (group_id.hasValue())
    {
        input.add_var("group_id", ::OpenAPI::toStringValue(group_id.value()));
    }
    if (limit.hasValue())
    {
        input.add_var("limit", ::OpenAPI::toStringValue(limit.value()));
    }
    if (location_city_query.hasValue())
    {
        input.add_var("location_city_query", ::OpenAPI::toStringValue(location_city_query.value()));
    }
    if (location_city_weight.hasValue())
    {
        input.add_var("location_city_weight", ::OpenAPI::toStringValue(location_city_weight.value()));
    }
    if (location_country_query.hasValue())
    {
        input.add_var("location_country_query", ::OpenAPI::toStringValue(location_country_query.value()));
    }
    if (location_country_weight.hasValue())
    {
        input.add_var("location_country_weight", ::OpenAPI::toStringValue(location_country_weight.value()));
    }
    if (location_region_query.hasValue())
    {
        input.add_var("location_region_query", ::OpenAPI::toStringValue(location_region_query.value()));
    }
    if (location_region_weight.hasValue())
    {
        input.add_var("location_region_weight", ::OpenAPI::toStringValue(location_region_weight.value()));
    }
    if (metadata_0_key.hasValue())
    {
        input.add_var("metadata_0_key", ::OpenAPI::toStringValue(metadata_0_key.value()));
    }
    if (metadata_0_query.hasValue())
    {
        input.add_var("metadata_0_query", ::OpenAPI::toStringValue(metadata_0_query.value()));
    }
    if (metadata_0_weight.hasValue())
    {
        input.add_var("metadata_0_weight", ::OpenAPI::toStringValue(metadata_0_weight.value()));
    }
    if (metadata_1_key.hasValue())
    {
        input.add_var("metadata_1_key", ::OpenAPI::toStringValue(metadata_1_key.value()));
    }
    if (metadata_1_query.hasValue())
    {
        input.add_var("metadata_1_query", ::OpenAPI::toStringValue(metadata_1_query.value()));
    }
    if (metadata_1_weight.hasValue())
    {
        input.add_var("metadata_1_weight", ::OpenAPI::toStringValue(metadata_1_weight.value()));
    }
    if (metadata_2_key.hasValue())
    {
        input.add_var("metadata_2_key", ::OpenAPI::toStringValue(metadata_2_key.value()));
    }
    if (metadata_2_query.hasValue())
    {
        input.add_var("metadata_2_query", ::OpenAPI::toStringValue(metadata_2_query.value()));
    }
    if (metadata_2_weight.hasValue())
    {
        input.add_var("metadata_2_weight", ::OpenAPI::toStringValue(metadata_2_weight.value()));
    }
    if (offset.hasValue())
    {
        input.add_var("offset", ::OpenAPI::toStringValue(offset.value()));
    }
    if (position_organization_query.hasValue())
    {
        input.add_var("position_organization_query", ::OpenAPI::toStringValue(position_organization_query.value()));
    }
    if (position_organization_weight.hasValue())
    {
        input.add_var("position_organization_weight", ::OpenAPI::toStringValue(position_organization_weight.value()));
    }
    if (position_role_query.hasValue())
    {
        input.add_var("position_role_query", ::OpenAPI::toStringValue(position_role_query.value()));
    }
    if (position_role_weight.hasValue())
    {
        input.add_var("position_role_weight", ::OpenAPI::toStringValue(position_role_weight.value()));
    }
    if (position_summary_query.hasValue())
    {
        input.add_var("position_summary_query", ::OpenAPI::toStringValue(position_summary_query.value()));
    }
    if (position_summary_weight.hasValue())
    {
        input.add_var("position_summary_weight", ::OpenAPI::toStringValue(position_summary_weight.value()));
    }
    if (profile_first_name_query.hasValue())
    {
        input.add_var("profile_first_name_query", ::OpenAPI::toStringValue(profile_first_name_query.value()));
    }
    if (profile_first_name_weight.hasValue())
    {
        input.add_var("profile_first_name_weight", ::OpenAPI::toStringValue(profile_first_name_weight.value()));
    }
    if (profile_goals_query.hasValue())
    {
        input.add_var("profile_goals_query", ::OpenAPI::toStringValue(profile_goals_query.value()));
    }
    if (profile_goals_weight.hasValue())
    {
        input.add_var("profile_goals_weight", ::OpenAPI::toStringValue(profile_goals_weight.value()));
    }
    if (profile_headline_query.hasValue())
    {
        input.add_var("profile_headline_query", ::OpenAPI::toStringValue(profile_headline_query.value()));
    }
    if (profile_headline_weight.hasValue())
    {
        input.add_var("profile_headline_weight", ::OpenAPI::toStringValue(profile_headline_weight.value()));
    }
    if (profile_industry_query.hasValue())
    {
        input.add_var("profile_industry_query", ::OpenAPI::toStringValue(profile_industry_query.value()));
    }
    if (profile_industry_weight.hasValue())
    {
        input.add_var("profile_industry_weight", ::OpenAPI::toStringValue(profile_industry_weight.value()));
    }
    if (profile_last_name_query.hasValue())
    {
        input.add_var("profile_last_name_query", ::OpenAPI::toStringValue(profile_last_name_query.value()));
    }
    if (profile_last_name_weight.hasValue())
    {
        input.add_var("profile_last_name_weight", ::OpenAPI::toStringValue(profile_last_name_weight.value()));
    }
    if (profile_pitch_query.hasValue())
    {
        input.add_var("profile_pitch_query", ::OpenAPI::toStringValue(profile_pitch_query.value()));
    }
    if (profile_pitch_weight.hasValue())
    {
        input.add_var("profile_pitch_weight", ::OpenAPI::toStringValue(profile_pitch_weight.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersSearchesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("basic");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersSearchesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("basic");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::usersSearchesPostCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUsersApi::usersSearchesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpoint_post_users_searches output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usersSearchesPostSignal(output);
        Q_EMIT usersSearchesPostSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("basic");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.daniweb.com/connect/oauth/auth");
        QString tokenUrl("https://www.daniweb.com/connect/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usersSearchesPostSignalE(output, error_type, error_str);
        Q_EMIT usersSearchesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usersSearchesPostSignalError(output, error_type, error_str);
        Q_EMIT usersSearchesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
