/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversation::OAIConversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversation::OAIConversation() {
    this->initializeModel();
}

OAIConversation::~OAIConversation() {}

void OAIConversation::initializeModel() {

    m_first_message_isSet = false;
    m_first_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_message_isSet = false;
    m_latest_message_isValid = false;

    m_user_a_isSet = false;
    m_user_a_isValid = false;

    m_user_b_isSet = false;
    m_user_b_isValid = false;
}

void OAIConversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversation::fromJsonObject(QJsonObject json) {

    m_first_message_isValid = ::OpenAPI::fromJsonValue(m_first_message, json[QString("first_message")]);
    m_first_message_isSet = !json[QString("first_message")].isNull() && m_first_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_message_isValid = ::OpenAPI::fromJsonValue(m_latest_message, json[QString("latest_message")]);
    m_latest_message_isSet = !json[QString("latest_message")].isNull() && m_latest_message_isValid;

    m_user_a_isValid = ::OpenAPI::fromJsonValue(m_user_a, json[QString("user_a")]);
    m_user_a_isSet = !json[QString("user_a")].isNull() && m_user_a_isValid;

    m_user_b_isValid = ::OpenAPI::fromJsonValue(m_user_b, json[QString("user_b")]);
    m_user_b_isSet = !json[QString("user_b")].isNull() && m_user_b_isValid;
}

QString OAIConversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversation::asJsonObject() const {
    QJsonObject obj;
    if (m_first_message.isSet()) {
        obj.insert(QString("first_message"), ::OpenAPI::toJsonValue(m_first_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_message.isSet()) {
        obj.insert(QString("latest_message"), ::OpenAPI::toJsonValue(m_latest_message));
    }
    if (m_user_a.isSet()) {
        obj.insert(QString("user_a"), ::OpenAPI::toJsonValue(m_user_a));
    }
    if (m_user_b.isSet()) {
        obj.insert(QString("user_b"), ::OpenAPI::toJsonValue(m_user_b));
    }
    return obj;
}

OAIConversation_first_message OAIConversation::getFirstMessage() const {
    return m_first_message;
}
void OAIConversation::setFirstMessage(const OAIConversation_first_message &first_message) {
    m_first_message = first_message;
    m_first_message_isSet = true;
}

bool OAIConversation::is_first_message_Set() const{
    return m_first_message_isSet;
}

bool OAIConversation::is_first_message_Valid() const{
    return m_first_message_isValid;
}

double OAIConversation::getId() const {
    return m_id;
}
void OAIConversation::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConversation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConversation::is_id_Valid() const{
    return m_id_isValid;
}

OAIMessage OAIConversation::getLatestMessage() const {
    return m_latest_message;
}
void OAIConversation::setLatestMessage(const OAIMessage &latest_message) {
    m_latest_message = latest_message;
    m_latest_message_isSet = true;
}

bool OAIConversation::is_latest_message_Set() const{
    return m_latest_message_isSet;
}

bool OAIConversation::is_latest_message_Valid() const{
    return m_latest_message_isValid;
}

OAIUser OAIConversation::getUserA() const {
    return m_user_a;
}
void OAIConversation::setUserA(const OAIUser &user_a) {
    m_user_a = user_a;
    m_user_a_isSet = true;
}

bool OAIConversation::is_user_a_Set() const{
    return m_user_a_isSet;
}

bool OAIConversation::is_user_a_Valid() const{
    return m_user_a_isValid;
}

OAIUser OAIConversation::getUserB() const {
    return m_user_b;
}
void OAIConversation::setUserB(const OAIUser &user_b) {
    m_user_b = user_b;
    m_user_b_isSet = true;
}

bool OAIConversation::is_user_b_Set() const{
    return m_user_b_isSet;
}

bool OAIConversation::is_user_b_Valid() const{
    return m_user_b_isValid;
}

bool OAIConversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_a.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_b.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
