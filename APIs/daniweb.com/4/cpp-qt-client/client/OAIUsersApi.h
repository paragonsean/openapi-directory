/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndpoint_get_users.h"
#include "OAIEndpoint_get_users_ID.h"
#include "OAIEndpoint_get_users_ID_groups.h"
#include "OAIEndpoint_get_users_ID_groups_messages.h"
#include "OAIEndpoint_get_users_ID_metadata.h"
#include "OAIEndpoint_get_users_ID_metadata_collections.h"
#include "OAIEndpoint_get_users_ID_positions.h"
#include "OAIEndpoint_get_users_ID_synergies.h"
#include "OAIEndpoint_get_users__.h"
#include "OAIEndpoint_get_users_nearby.h"
#include "OAIEndpoint_patch_users_ID_synergies.h"
#include "OAIEndpoint_patch_users__.h"
#include "OAIEndpoint_post_users_ID_messages.h"
#include "OAIEndpoint_post_users_ID_metadata.h"
#include "OAIEndpoint_post_users_invites.h"
#include "OAIEndpoint_post_users_metadata_filters.h"
#include "OAIEndpoint_post_users_searches.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  bubbled bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void usersGet(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &bubbled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


    virtual void usersGet_1();

    /**
    * @param[in]  id QList<qint32> [required]
    */
    virtual void usersIDGet(const QList<qint32> &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersIDGroupsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void usersIDGroupsMessagesGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  bubbled bool [optional]
    * @param[in]  metadata_0_key QString [optional]
    * @param[in]  metadata_0_privacy QString [optional]
    * @param[in]  metadata_0_values QList<QString> [optional]
    * @param[in]  metadata_1_key QString [optional]
    * @param[in]  metadata_1_privacy QString [optional]
    * @param[in]  metadata_1_values QList<QString> [optional]
    * @param[in]  metadata_2_key QString [optional]
    * @param[in]  metadata_2_privacy QString [optional]
    * @param[in]  metadata_2_values QList<QString> [optional]
    * @param[in]  text_emoticons bool [optional]
    * @param[in]  text_raw QString [optional]
    */
    virtual void usersIDMessagesPost(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &bubbled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &text_emoticons = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &text_raw = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersIDMetadataCollectionsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void usersIDMetadataGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  metadata_0_key QString [optional]
    * @param[in]  metadata_0_privacy QString [optional]
    * @param[in]  metadata_0_values QList<QString> [optional]
    * @param[in]  metadata_1_key QString [optional]
    * @param[in]  metadata_1_privacy QString [optional]
    * @param[in]  metadata_1_values QList<QString> [optional]
    * @param[in]  metadata_2_key QString [optional]
    * @param[in]  metadata_2_privacy QString [optional]
    * @param[in]  metadata_2_values QList<QString> [optional]
    */
    virtual void usersIDMetadataPost(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &metadata_0_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  bubbled bool [optional]
    */
    virtual void usersIDPositionsGet(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &bubbled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QList<qint32> [required]
    */
    virtual void usersIDSynergiesGet(const QList<qint32> &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  relationship_muted bool [optional]
    * @param[in]  relationship_skipped bool [optional]
    */
    virtual void usersIDSynergiesPatch(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &relationship_muted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &relationship_skipped = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  csv OAIHttpFileElement [optional]
    * @param[in]  emails QList<QString> [optional]
    */
    virtual void usersInvitesPost(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &csv = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QList<QString>> &emails = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  metadata_0_key QString [optional]
    * @param[in]  metadata_0_values QList<QString> [optional]
    * @param[in]  metadata_1_key QString [optional]
    * @param[in]  metadata_1_values QList<QString> [optional]
    * @param[in]  metadata_2_key QString [optional]
    * @param[in]  metadata_2_values QList<QString> [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void usersMetadataFiltersPost(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_0_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_1_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata_2_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  latitude float [optional]
    * @param[in]  longitude float [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void usersNearbyGet(const ::OpenAPI::OptionalParam<float> &latitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &longitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  company QString [optional]
    * @param[in]  company_size QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  goals QList<QString> [optional]
    * @param[in]  headline QString [optional]
    * @param[in]  industry QString [optional]
    * @param[in]  introduction QString [optional]
    * @param[in]  job_position QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  location_importance QString [optional]
    * @param[in]  match_tags QList<QString> [optional]
    * @param[in]  pitch QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  targeted_industry QString [optional]
    * @param[in]  url QString [optional]
    */
    virtual void usersPatch(const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &goals = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &headline = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &industry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &introduction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job_position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_importance = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &match_tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &pitch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &targeted_industry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  active_within_x_days qint32 [optional]
    * @param[in]  audience_ids QList<qint32> [optional]
    * @param[in]  bubbled bool [optional]
    * @param[in]  exclude_connections bool [optional]
    * @param[in]  exclude_matches bool [optional]
    * @param[in]  exclude_muted bool [optional]
    * @param[in]  exclude_skipped bool [optional]
    * @param[in]  geo_latitude float [optional]
    * @param[in]  geo_longitude float [optional]
    * @param[in]  geo_miles_away float [optional]
    * @param[in]  group_id qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  location_city_query QString [optional]
    * @param[in]  location_city_weight qint32 [optional]
    * @param[in]  location_country_query QString [optional]
    * @param[in]  location_country_weight qint32 [optional]
    * @param[in]  location_region_query QString [optional]
    * @param[in]  location_region_weight qint32 [optional]
    * @param[in]  metadata_0_key QString [optional]
    * @param[in]  metadata_0_query QString [optional]
    * @param[in]  metadata_0_weight qint32 [optional]
    * @param[in]  metadata_1_key QString [optional]
    * @param[in]  metadata_1_query QString [optional]
    * @param[in]  metadata_1_weight qint32 [optional]
    * @param[in]  metadata_2_key QString [optional]
    * @param[in]  metadata_2_query QString [optional]
    * @param[in]  metadata_2_weight qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  position_organization_query QString [optional]
    * @param[in]  position_organization_weight qint32 [optional]
    * @param[in]  position_role_query QString [optional]
    * @param[in]  position_role_weight qint32 [optional]
    * @param[in]  position_summary_query QString [optional]
    * @param[in]  position_summary_weight qint32 [optional]
    * @param[in]  profile_first_name_query QString [optional]
    * @param[in]  profile_first_name_weight qint32 [optional]
    * @param[in]  profile_goals_query QString [optional]
    * @param[in]  profile_goals_weight QString [optional]
    * @param[in]  profile_headline_query QString [optional]
    * @param[in]  profile_headline_weight qint32 [optional]
    * @param[in]  profile_industry_query QString [optional]
    * @param[in]  profile_industry_weight qint32 [optional]
    * @param[in]  profile_last_name_query QString [optional]
    * @param[in]  profile_last_name_weight qint32 [optional]
    * @param[in]  profile_pitch_query QString [optional]
    * @param[in]  profile_pitch_weight qint32 [optional]
    */
    virtual void usersSearchesPost(const ::OpenAPI::OptionalParam<qint32> &active_within_x_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &audience_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &bubbled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_connections = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_matches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_muted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_skipped = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<float> &geo_latitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &geo_longitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &geo_miles_away = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_city_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &location_city_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_country_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &location_country_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_region_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &location_region_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_0_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &metadata_0_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_1_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &metadata_1_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_2_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &metadata_2_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &position_organization_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &position_organization_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &position_role_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &position_role_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &position_summary_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &position_summary_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile_first_name_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &profile_first_name_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile_goals_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile_goals_weight = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile_headline_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &profile_headline_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile_industry_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &profile_industry_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile_last_name_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &profile_last_name_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile_pitch_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &profile_pitch_weight = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersGet_1Callback(OAIHttpRequestWorker *worker);
    void usersIDGetCallback(OAIHttpRequestWorker *worker);
    void usersIDGroupsGetCallback(OAIHttpRequestWorker *worker);
    void usersIDGroupsMessagesGetCallback(OAIHttpRequestWorker *worker);
    void usersIDMessagesPostCallback(OAIHttpRequestWorker *worker);
    void usersIDMetadataCollectionsGetCallback(OAIHttpRequestWorker *worker);
    void usersIDMetadataGetCallback(OAIHttpRequestWorker *worker);
    void usersIDMetadataPostCallback(OAIHttpRequestWorker *worker);
    void usersIDPositionsGetCallback(OAIHttpRequestWorker *worker);
    void usersIDSynergiesGetCallback(OAIHttpRequestWorker *worker);
    void usersIDSynergiesPatchCallback(OAIHttpRequestWorker *worker);
    void usersInvitesPostCallback(OAIHttpRequestWorker *worker);
    void usersMetadataFiltersPostCallback(OAIHttpRequestWorker *worker);
    void usersNearbyGetCallback(OAIHttpRequestWorker *worker);
    void usersPatchCallback(OAIHttpRequestWorker *worker);
    void usersSearchesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersGetSignal(OAIEndpoint_get_users summary);
    void usersGet_1Signal(OAIEndpoint_get_users__ summary);
    void usersIDGetSignal(OAIEndpoint_get_users_ID summary);
    void usersIDGroupsGetSignal(OAIEndpoint_get_users_ID_groups summary);
    void usersIDGroupsMessagesGetSignal(OAIEndpoint_get_users_ID_groups_messages summary);
    void usersIDMessagesPostSignal(OAIEndpoint_post_users_ID_messages summary);
    void usersIDMetadataCollectionsGetSignal(OAIEndpoint_get_users_ID_metadata_collections summary);
    void usersIDMetadataGetSignal(OAIEndpoint_get_users_ID_metadata summary);
    void usersIDMetadataPostSignal(OAIEndpoint_post_users_ID_metadata summary);
    void usersIDPositionsGetSignal(OAIEndpoint_get_users_ID_positions summary);
    void usersIDSynergiesGetSignal(OAIEndpoint_get_users_ID_synergies summary);
    void usersIDSynergiesPatchSignal(OAIEndpoint_patch_users_ID_synergies summary);
    void usersInvitesPostSignal(OAIEndpoint_post_users_invites summary);
    void usersMetadataFiltersPostSignal(OAIEndpoint_post_users_metadata_filters summary);
    void usersNearbyGetSignal(OAIEndpoint_get_users_nearby summary);
    void usersPatchSignal(OAIEndpoint_patch_users__ summary);
    void usersSearchesPostSignal(OAIEndpoint_post_users_searches summary);


    void usersGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users summary);
    void usersGet_1SignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users__ summary);
    void usersIDGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users_ID summary);
    void usersIDGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users_ID_groups summary);
    void usersIDGroupsMessagesGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users_ID_groups_messages summary);
    void usersIDMessagesPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_users_ID_messages summary);
    void usersIDMetadataCollectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users_ID_metadata_collections summary);
    void usersIDMetadataGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users_ID_metadata summary);
    void usersIDMetadataPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_users_ID_metadata summary);
    void usersIDPositionsGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users_ID_positions summary);
    void usersIDSynergiesGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users_ID_synergies summary);
    void usersIDSynergiesPatchSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_patch_users_ID_synergies summary);
    void usersInvitesPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_users_invites summary);
    void usersMetadataFiltersPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_users_metadata_filters summary);
    void usersNearbyGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_get_users_nearby summary);
    void usersPatchSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_patch_users__ summary);
    void usersSearchesPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint_post_users_searches summary);

    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(OAIEndpoint_get_users summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(OAIEndpoint_get_users summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGet_1SignalError() instead")
    void usersGet_1SignalE(OAIEndpoint_get_users__ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGet_1SignalError(OAIEndpoint_get_users__ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDGetSignalError() instead")
    void usersIDGetSignalE(OAIEndpoint_get_users_ID summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDGetSignalError(OAIEndpoint_get_users_ID summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDGroupsGetSignalError() instead")
    void usersIDGroupsGetSignalE(OAIEndpoint_get_users_ID_groups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDGroupsGetSignalError(OAIEndpoint_get_users_ID_groups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDGroupsMessagesGetSignalError() instead")
    void usersIDGroupsMessagesGetSignalE(OAIEndpoint_get_users_ID_groups_messages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDGroupsMessagesGetSignalError(OAIEndpoint_get_users_ID_groups_messages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDMessagesPostSignalError() instead")
    void usersIDMessagesPostSignalE(OAIEndpoint_post_users_ID_messages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDMessagesPostSignalError(OAIEndpoint_post_users_ID_messages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDMetadataCollectionsGetSignalError() instead")
    void usersIDMetadataCollectionsGetSignalE(OAIEndpoint_get_users_ID_metadata_collections summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDMetadataCollectionsGetSignalError(OAIEndpoint_get_users_ID_metadata_collections summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDMetadataGetSignalError() instead")
    void usersIDMetadataGetSignalE(OAIEndpoint_get_users_ID_metadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDMetadataGetSignalError(OAIEndpoint_get_users_ID_metadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDMetadataPostSignalError() instead")
    void usersIDMetadataPostSignalE(OAIEndpoint_post_users_ID_metadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDMetadataPostSignalError(OAIEndpoint_post_users_ID_metadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDPositionsGetSignalError() instead")
    void usersIDPositionsGetSignalE(OAIEndpoint_get_users_ID_positions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDPositionsGetSignalError(OAIEndpoint_get_users_ID_positions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDSynergiesGetSignalError() instead")
    void usersIDSynergiesGetSignalE(OAIEndpoint_get_users_ID_synergies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDSynergiesGetSignalError(OAIEndpoint_get_users_ID_synergies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDSynergiesPatchSignalError() instead")
    void usersIDSynergiesPatchSignalE(OAIEndpoint_patch_users_ID_synergies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDSynergiesPatchSignalError(OAIEndpoint_patch_users_ID_synergies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInvitesPostSignalError() instead")
    void usersInvitesPostSignalE(OAIEndpoint_post_users_invites summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInvitesPostSignalError(OAIEndpoint_post_users_invites summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersMetadataFiltersPostSignalError() instead")
    void usersMetadataFiltersPostSignalE(OAIEndpoint_post_users_metadata_filters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersMetadataFiltersPostSignalError(OAIEndpoint_post_users_metadata_filters summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersNearbyGetSignalError() instead")
    void usersNearbyGetSignalE(OAIEndpoint_get_users_nearby summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersNearbyGetSignalError(OAIEndpoint_get_users_nearby summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPatchSignalError() instead")
    void usersPatchSignalE(OAIEndpoint_patch_users__ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPatchSignalError(OAIEndpoint_patch_users__ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSearchesPostSignalError() instead")
    void usersSearchesPostSignalE(OAIEndpoint_post_users_searches summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSearchesPostSignalError(OAIEndpoint_post_users_searches summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGet_1SignalErrorFull() instead")
    void usersGet_1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGet_1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDGetSignalErrorFull() instead")
    void usersIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDGroupsGetSignalErrorFull() instead")
    void usersIDGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDGroupsMessagesGetSignalErrorFull() instead")
    void usersIDGroupsMessagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDGroupsMessagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDMessagesPostSignalErrorFull() instead")
    void usersIDMessagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDMessagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDMetadataCollectionsGetSignalErrorFull() instead")
    void usersIDMetadataCollectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDMetadataCollectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDMetadataGetSignalErrorFull() instead")
    void usersIDMetadataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDMetadataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDMetadataPostSignalErrorFull() instead")
    void usersIDMetadataPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDMetadataPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDPositionsGetSignalErrorFull() instead")
    void usersIDPositionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDPositionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDSynergiesGetSignalErrorFull() instead")
    void usersIDSynergiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDSynergiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIDSynergiesPatchSignalErrorFull() instead")
    void usersIDSynergiesPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIDSynergiesPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInvitesPostSignalErrorFull() instead")
    void usersInvitesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInvitesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersMetadataFiltersPostSignalErrorFull() instead")
    void usersMetadataFiltersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersMetadataFiltersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersNearbyGetSignalErrorFull() instead")
    void usersNearbyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersNearbyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPatchSignalErrorFull() instead")
    void usersPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSearchesPostSignalErrorFull() instead")
    void usersSearchesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSearchesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
