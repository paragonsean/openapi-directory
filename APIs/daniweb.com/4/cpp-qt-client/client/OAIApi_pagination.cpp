/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_pagination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_pagination::OAIApi_pagination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_pagination::OAIApi_pagination() {
    this->initializeModel();
}

OAIApi_pagination::~OAIApi_pagination() {}

void OAIApi_pagination::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_total_records_isSet = false;
    m_total_records_isValid = false;
}

void OAIApi_pagination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_pagination::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_total_records_isValid = ::OpenAPI::fromJsonValue(m_total_records, json[QString("total_records")]);
    m_total_records_isSet = !json[QString("total_records")].isNull() && m_total_records_isValid;
}

QString OAIApi_pagination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_pagination::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_total_records_isSet) {
        obj.insert(QString("total_records"), ::OpenAPI::toJsonValue(m_total_records));
    }
    return obj;
}

double OAIApi_pagination::getLimit() const {
    return m_limit;
}
void OAIApi_pagination::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIApi_pagination::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIApi_pagination::is_limit_Valid() const{
    return m_limit_isValid;
}

double OAIApi_pagination::getOffset() const {
    return m_offset;
}
void OAIApi_pagination::setOffset(const double &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIApi_pagination::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIApi_pagination::is_offset_Valid() const{
    return m_offset_isValid;
}

double OAIApi_pagination::getTotalRecords() const {
    return m_total_records;
}
void OAIApi_pagination::setTotalRecords(const double &total_records) {
    m_total_records = total_records;
    m_total_records_isSet = true;
}

bool OAIApi_pagination::is_total_records_Set() const{
    return m_total_records_isSet;
}

bool OAIApi_pagination::is_total_records_Valid() const{
    return m_total_records_isValid;
}

bool OAIApi_pagination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_records_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_pagination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
