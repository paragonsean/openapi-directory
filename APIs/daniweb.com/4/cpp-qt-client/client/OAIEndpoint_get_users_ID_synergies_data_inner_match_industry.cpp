/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint_get_users_ID_synergies_data_inner_match_industry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::OAIEndpoint_get_users_ID_synergies_data_inner_match_industry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::OAIEndpoint_get_users_ID_synergies_data_inner_match_industry() {
    this->initializeModel();
}

OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::~OAIEndpoint_get_users_ID_synergies_data_inner_match_industry() {}

void OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::initializeModel() {

    m_complementary_isSet = false;
    m_complementary_isValid = false;

    m_mutual_match_isSet = false;
    m_mutual_match_isValid = false;

    m_similar_isSet = false;
    m_similar_isValid = false;
}

void OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::fromJsonObject(QJsonObject json) {

    m_complementary_isValid = ::OpenAPI::fromJsonValue(m_complementary, json[QString("complementary")]);
    m_complementary_isSet = !json[QString("complementary")].isNull() && m_complementary_isValid;

    m_mutual_match_isValid = ::OpenAPI::fromJsonValue(m_mutual_match, json[QString("mutual_match")]);
    m_mutual_match_isSet = !json[QString("mutual_match")].isNull() && m_mutual_match_isValid;

    m_similar_isValid = ::OpenAPI::fromJsonValue(m_similar, json[QString("similar")]);
    m_similar_isSet = !json[QString("similar")].isNull() && m_similar_isValid;
}

QString OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::asJsonObject() const {
    QJsonObject obj;
    if (m_complementary_isSet) {
        obj.insert(QString("complementary"), ::OpenAPI::toJsonValue(m_complementary));
    }
    if (m_mutual_match_isSet) {
        obj.insert(QString("mutual_match"), ::OpenAPI::toJsonValue(m_mutual_match));
    }
    if (m_similar_isSet) {
        obj.insert(QString("similar"), ::OpenAPI::toJsonValue(m_similar));
    }
    return obj;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::isComplementary() const {
    return m_complementary;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::setComplementary(const bool &complementary) {
    m_complementary = complementary;
    m_complementary_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::is_complementary_Set() const{
    return m_complementary_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::is_complementary_Valid() const{
    return m_complementary_isValid;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::isMutualMatch() const {
    return m_mutual_match;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::setMutualMatch(const bool &mutual_match) {
    m_mutual_match = mutual_match;
    m_mutual_match_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::is_mutual_match_Set() const{
    return m_mutual_match_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::is_mutual_match_Valid() const{
    return m_mutual_match_isValid;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::isSimilar() const {
    return m_similar;
}
void OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::setSimilar(const bool &similar) {
    m_similar = similar;
    m_similar_isSet = true;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::is_similar_Set() const{
    return m_similar_isSet;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::is_similar_Valid() const{
    return m_similar_isValid;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complementary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutual_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_similar_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint_get_users_ID_synergies_data_inner_match_industry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
