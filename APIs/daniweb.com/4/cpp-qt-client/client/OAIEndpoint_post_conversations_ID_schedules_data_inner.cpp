/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint_post_conversations_ID_schedules_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint_post_conversations_ID_schedules_data_inner::OAIEndpoint_post_conversations_ID_schedules_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint_post_conversations_ID_schedules_data_inner::OAIEndpoint_post_conversations_ID_schedules_data_inner() {
    this->initializeModel();
}

OAIEndpoint_post_conversations_ID_schedules_data_inner::~OAIEndpoint_post_conversations_ID_schedules_data_inner() {}

void OAIEndpoint_post_conversations_ID_schedules_data_inner::initializeModel() {

    m_author_count_isSet = false;
    m_author_count_isValid = false;

    m_conversation_count_isSet = false;
    m_conversation_count_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_first_message_isSet = false;
    m_first_message_isValid = false;

    m_last_message_isSet = false;
    m_last_message_isValid = false;

    m_message_count_isSet = false;
    m_message_count_isValid = false;

    m_my_message_count_isSet = false;
    m_my_message_count_isValid = false;

    m_navigation_isSet = false;
    m_navigation_isValid = false;
}

void OAIEndpoint_post_conversations_ID_schedules_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint_post_conversations_ID_schedules_data_inner::fromJsonObject(QJsonObject json) {

    m_author_count_isValid = ::OpenAPI::fromJsonValue(m_author_count, json[QString("author_count")]);
    m_author_count_isSet = !json[QString("author_count")].isNull() && m_author_count_isValid;

    m_conversation_count_isValid = ::OpenAPI::fromJsonValue(m_conversation_count, json[QString("conversation_count")]);
    m_conversation_count_isSet = !json[QString("conversation_count")].isNull() && m_conversation_count_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversation_id")]);
    m_conversation_id_isSet = !json[QString("conversation_id")].isNull() && m_conversation_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_first_message_isValid = ::OpenAPI::fromJsonValue(m_first_message, json[QString("first_message")]);
    m_first_message_isSet = !json[QString("first_message")].isNull() && m_first_message_isValid;

    m_last_message_isValid = ::OpenAPI::fromJsonValue(m_last_message, json[QString("last_message")]);
    m_last_message_isSet = !json[QString("last_message")].isNull() && m_last_message_isValid;

    m_message_count_isValid = ::OpenAPI::fromJsonValue(m_message_count, json[QString("message_count")]);
    m_message_count_isSet = !json[QString("message_count")].isNull() && m_message_count_isValid;

    m_my_message_count_isValid = ::OpenAPI::fromJsonValue(m_my_message_count, json[QString("my_message_count")]);
    m_my_message_count_isSet = !json[QString("my_message_count")].isNull() && m_my_message_count_isValid;

    m_navigation_isValid = ::OpenAPI::fromJsonValue(m_navigation, json[QString("navigation")]);
    m_navigation_isSet = !json[QString("navigation")].isNull() && m_navigation_isValid;
}

QString OAIEndpoint_post_conversations_ID_schedules_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint_post_conversations_ID_schedules_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_author_count_isSet) {
        obj.insert(QString("author_count"), ::OpenAPI::toJsonValue(m_author_count));
    }
    if (m_conversation_count_isSet) {
        obj.insert(QString("conversation_count"), ::OpenAPI::toJsonValue(m_conversation_count));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversation_id"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_first_message.isSet()) {
        obj.insert(QString("first_message"), ::OpenAPI::toJsonValue(m_first_message));
    }
    if (m_last_message.isSet()) {
        obj.insert(QString("last_message"), ::OpenAPI::toJsonValue(m_last_message));
    }
    if (m_message_count_isSet) {
        obj.insert(QString("message_count"), ::OpenAPI::toJsonValue(m_message_count));
    }
    if (m_my_message_count_isSet) {
        obj.insert(QString("my_message_count"), ::OpenAPI::toJsonValue(m_my_message_count));
    }
    if (m_navigation.isSet()) {
        obj.insert(QString("navigation"), ::OpenAPI::toJsonValue(m_navigation));
    }
    return obj;
}

double OAIEndpoint_post_conversations_ID_schedules_data_inner::getAuthorCount() const {
    return m_author_count;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setAuthorCount(const double &author_count) {
    m_author_count = author_count;
    m_author_count_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_author_count_Set() const{
    return m_author_count_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_author_count_Valid() const{
    return m_author_count_isValid;
}

double OAIEndpoint_post_conversations_ID_schedules_data_inner::getConversationCount() const {
    return m_conversation_count;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setConversationCount(const double &conversation_count) {
    m_conversation_count = conversation_count;
    m_conversation_count_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_conversation_count_Set() const{
    return m_conversation_count_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_conversation_count_Valid() const{
    return m_conversation_count_isValid;
}

double OAIEndpoint_post_conversations_ID_schedules_data_inner::getConversationId() const {
    return m_conversation_id;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setConversationId(const double &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QDate OAIEndpoint_post_conversations_ID_schedules_data_inner::getDate() const {
    return m_date;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_date_Valid() const{
    return m_date_isValid;
}

OAIMessage OAIEndpoint_post_conversations_ID_schedules_data_inner::getFirstMessage() const {
    return m_first_message;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setFirstMessage(const OAIMessage &first_message) {
    m_first_message = first_message;
    m_first_message_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_first_message_Set() const{
    return m_first_message_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_first_message_Valid() const{
    return m_first_message_isValid;
}

OAIMessage OAIEndpoint_post_conversations_ID_schedules_data_inner::getLastMessage() const {
    return m_last_message;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setLastMessage(const OAIMessage &last_message) {
    m_last_message = last_message;
    m_last_message_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_last_message_Set() const{
    return m_last_message_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_last_message_Valid() const{
    return m_last_message_isValid;
}

double OAIEndpoint_post_conversations_ID_schedules_data_inner::getMessageCount() const {
    return m_message_count;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setMessageCount(const double &message_count) {
    m_message_count = message_count;
    m_message_count_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_message_count_Set() const{
    return m_message_count_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_message_count_Valid() const{
    return m_message_count_isValid;
}

double OAIEndpoint_post_conversations_ID_schedules_data_inner::getMyMessageCount() const {
    return m_my_message_count;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setMyMessageCount(const double &my_message_count) {
    m_my_message_count = my_message_count;
    m_my_message_count_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_my_message_count_Set() const{
    return m_my_message_count_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_my_message_count_Valid() const{
    return m_my_message_count_isValid;
}

OAIEndpoint_post_conversations_ID_schedules_data_inner_navigation OAIEndpoint_post_conversations_ID_schedules_data_inner::getNavigation() const {
    return m_navigation;
}
void OAIEndpoint_post_conversations_ID_schedules_data_inner::setNavigation(const OAIEndpoint_post_conversations_ID_schedules_data_inner_navigation &navigation) {
    m_navigation = navigation;
    m_navigation_isSet = true;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_navigation_Set() const{
    return m_navigation_isSet;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::is_navigation_Valid() const{
    return m_navigation_isValid;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint_post_conversations_ID_schedules_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
