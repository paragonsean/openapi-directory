/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosition_organization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosition_organization::OAIPosition_organization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosition_organization::OAIPosition_organization() {
    this->initializeModel();
}

OAIPosition_organization::~OAIPosition_organization() {}

void OAIPosition_organization::initializeModel() {

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPosition_organization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosition_organization::fromJsonObject(QJsonObject json) {

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(m_ticker, json[QString("ticker")]);
    m_ticker_isSet = !json[QString("ticker")].isNull() && m_ticker_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPosition_organization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosition_organization::asJsonObject() const {
    QJsonObject obj;
    if (m_industry_isSet) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("ticker"), ::OpenAPI::toJsonValue(m_ticker));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPosition_organization::getIndustry() const {
    return m_industry;
}
void OAIPosition_organization::setIndustry(const QString &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIPosition_organization::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIPosition_organization::is_industry_Valid() const{
    return m_industry_isValid;
}

QString OAIPosition_organization::getName() const {
    return m_name;
}
void OAIPosition_organization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPosition_organization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPosition_organization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPosition_organization::getSize() const {
    return m_size;
}
void OAIPosition_organization::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPosition_organization::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPosition_organization::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIPosition_organization::getTicker() const {
    return m_ticker;
}
void OAIPosition_organization::setTicker(const QString &ticker) {
    m_ticker = ticker;
    m_ticker_isSet = true;
}

bool OAIPosition_organization::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool OAIPosition_organization::is_ticker_Valid() const{
    return m_ticker_isValid;
}

QString OAIPosition_organization::getType() const {
    return m_type;
}
void OAIPosition_organization::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPosition_organization::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPosition_organization::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPosition_organization::getUrl() const {
    return m_url;
}
void OAIPosition_organization::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPosition_organization::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPosition_organization::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPosition_organization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_industry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosition_organization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
