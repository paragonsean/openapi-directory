/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint_get_users_ID_metadata_collections.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint_get_users_ID_metadata_collections::OAIEndpoint_get_users_ID_metadata_collections(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint_get_users_ID_metadata_collections::OAIEndpoint_get_users_ID_metadata_collections() {
    this->initializeModel();
}

OAIEndpoint_get_users_ID_metadata_collections::~OAIEndpoint_get_users_ID_metadata_collections() {}

void OAIEndpoint_get_users_ID_metadata_collections::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIEndpoint_get_users_ID_metadata_collections::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint_get_users_ID_metadata_collections::fromJsonObject(QJsonObject json) {

    if(json["data"].isObject()){
        auto varmap = json["data"].toObject().toVariantMap();
        m_data_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_data_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_data_isSet &= !jval.isNull() && m_data_isValid;
                m_data.insert(m_data.end(), val, item);
            }
        }
    }
}

QString OAIEndpoint_get_users_ID_metadata_collections::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint_get_users_ID_metadata_collections::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        
        obj.insert(QString("data"), toJsonValue(m_data));
    }
    return obj;
}

QMap<QString, QList<QString>> OAIEndpoint_get_users_ID_metadata_collections::getData() const {
    return m_data;
}
void OAIEndpoint_get_users_ID_metadata_collections::setData(const QMap<QString, QList<QString>> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEndpoint_get_users_ID_metadata_collections::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEndpoint_get_users_ID_metadata_collections::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIEndpoint_get_users_ID_metadata_collections::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint_get_users_ID_metadata_collections::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
