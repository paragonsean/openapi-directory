/**
 * DaniWeb Connect API
 * User Recommendation Engine and Chat Network
 *
 * The version of the OpenAPI document: 4
 * Contact: dani@daniwebmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_message_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_message_data::OAIGroup_message_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_message_data::OAIGroup_message_data() {
    this->initializeModel();
}

OAIGroup_message_data::~OAIGroup_message_data() {}

void OAIGroup_message_data::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGroup_message_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_message_data::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGroup_message_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_message_data::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIApp OAIGroup_message_data::getApp() const {
    return m_app;
}
void OAIGroup_message_data::setApp(const OAIApp &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIGroup_message_data::is_app_Set() const{
    return m_app_isSet;
}

bool OAIGroup_message_data::is_app_Valid() const{
    return m_app_isValid;
}

OAIGroup_message_data_content OAIGroup_message_data::getContent() const {
    return m_content;
}
void OAIGroup_message_data::setContent(const OAIGroup_message_data_content &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGroup_message_data::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGroup_message_data::is_content_Valid() const{
    return m_content_isValid;
}

double OAIGroup_message_data::getId() const {
    return m_id;
}
void OAIGroup_message_data::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroup_message_data::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroup_message_data::is_id_Valid() const{
    return m_id_isValid;
}

OAIGroup_message OAIGroup_message_data::getMessage() const {
    return m_message;
}
void OAIGroup_message_data::setMessage(const OAIGroup_message &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGroup_message_data::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGroup_message_data::is_message_Valid() const{
    return m_message_isValid;
}

OAIUser OAIGroup_message_data::getOwner() const {
    return m_owner;
}
void OAIGroup_message_data::setOwner(const OAIUser &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGroup_message_data::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGroup_message_data::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIGroup_message_data_settings OAIGroup_message_data::getSettings() const {
    return m_settings;
}
void OAIGroup_message_data::setSettings(const OAIGroup_message_data_settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIGroup_message_data::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIGroup_message_data::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIGroup_message_data_status OAIGroup_message_data::getStatus() const {
    return m_status;
}
void OAIGroup_message_data::setStatus(const OAIGroup_message_data_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGroup_message_data::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGroup_message_data::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGroup_message_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_message_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
