/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Email from './Email';
import Messenger from './Messenger';
import Phone from './Phone';
import Relation from './Relation';
import Website from './Website';

/**
 * The ContactEntity model module.
 * @module model/ContactEntity
 * @version 1
 */
class ContactEntity {
    /**
     * Constructs a new <code>ContactEntity</code>.
     * @alias module:model/ContactEntity
     */
    constructor() { 
        
        ContactEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactEntity} obj Optional instance to populate.
     * @return {module:model/ContactEntity} The populated <code>ContactEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactEntity();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], [Address]);
            }
            if (data.hasOwnProperty('birth_date')) {
                obj['birth_date'] = ApiClient.convertToType(data['birth_date'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('do_not_call')) {
                obj['do_not_call'] = ApiClient.convertToType(data['do_not_call'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], [Email]);
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('lead_source')) {
                obj['lead_source'] = ApiClient.convertToType(data['lead_source'], 'String');
            }
            if (data.hasOwnProperty('messenger')) {
                obj['messenger'] = ApiClient.convertToType(data['messenger'], [Messenger]);
            }
            if (data.hasOwnProperty('middle_name')) {
                obj['middle_name'] = ApiClient.convertToType(data['middle_name'], 'String');
            }
            if (data.hasOwnProperty('name_suffix')) {
                obj['name_suffix'] = ApiClient.convertToType(data['name_suffix'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], [Phone]);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('relation')) {
                obj['relation'] = Relation.constructFromObject(data['relation']);
            }
            if (data.hasOwnProperty('salutation')) {
                obj['salutation'] = ApiClient.convertToType(data['salutation'], 'String');
            }
            if (data.hasOwnProperty('sync_to_outlook')) {
                obj['sync_to_outlook'] = ApiClient.convertToType(data['sync_to_outlook'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], [Website]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactEntity</code>.
     */
    static validateJSON(data) {
        if (data['address']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['address'])) {
                throw new Error("Expected the field `address` to be an array in the JSON data but got " + data['address']);
            }
            // validate the optional field `address` (array)
            for (const item of data['address']) {
                Address.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['department'] && !(typeof data['department'] === 'string' || data['department'] instanceof String)) {
            throw new Error("Expected the field `department` to be a primitive type in the JSON string but got " + data['department']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['email']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['email'])) {
                throw new Error("Expected the field `email` to be an array in the JSON data but got " + data['email']);
            }
            // validate the optional field `email` (array)
            for (const item of data['email']) {
                Email.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['lead_source'] && !(typeof data['lead_source'] === 'string' || data['lead_source'] instanceof String)) {
            throw new Error("Expected the field `lead_source` to be a primitive type in the JSON string but got " + data['lead_source']);
        }
        if (data['messenger']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messenger'])) {
                throw new Error("Expected the field `messenger` to be an array in the JSON data but got " + data['messenger']);
            }
            // validate the optional field `messenger` (array)
            for (const item of data['messenger']) {
                Messenger.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['middle_name'] && !(typeof data['middle_name'] === 'string' || data['middle_name'] instanceof String)) {
            throw new Error("Expected the field `middle_name` to be a primitive type in the JSON string but got " + data['middle_name']);
        }
        // ensure the json data is a string
        if (data['name_suffix'] && !(typeof data['name_suffix'] === 'string' || data['name_suffix'] instanceof String)) {
            throw new Error("Expected the field `name_suffix` to be a primitive type in the JSON string but got " + data['name_suffix']);
        }
        if (data['phone']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phone'])) {
                throw new Error("Expected the field `phone` to be an array in the JSON data but got " + data['phone']);
            }
            // validate the optional field `phone` (array)
            for (const item of data['phone']) {
                Phone.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // validate the optional field `relation`
        if (data['relation']) { // data not null
          Relation.validateJSON(data['relation']);
        }
        // ensure the json data is a string
        if (data['salutation'] && !(typeof data['salutation'] === 'string' || data['salutation'] instanceof String)) {
            throw new Error("Expected the field `salutation` to be a primitive type in the JSON string but got " + data['salutation']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['website']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['website'])) {
                throw new Error("Expected the field `website` to be an array in the JSON data but got " + data['website']);
            }
            // validate the optional field `website` (array)
            for (const item of data['website']) {
                Website.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Address
 * @member {Array.<module:model/Address>} address
 */
ContactEntity.prototype['address'] = undefined;

/**
 * Birth Date
 * @member {Date} birth_date
 */
ContactEntity.prototype['birth_date'] = undefined;

/**
 * Created At
 * @member {Date} created_at
 */
ContactEntity.prototype['created_at'] = undefined;

/**
 * Department
 * @member {String} department
 */
ContactEntity.prototype['department'] = undefined;

/**
 * Description
 * @member {String} description
 */
ContactEntity.prototype['description'] = undefined;

/**
 * Do Not Call
 * @member {Boolean} do_not_call
 */
ContactEntity.prototype['do_not_call'] = undefined;

/**
 * Email
 * @member {Array.<module:model/Email>} email
 */
ContactEntity.prototype['email'] = undefined;

/**
 * First Name
 * @member {String} first_name
 */
ContactEntity.prototype['first_name'] = undefined;

/**
 * Contact Identifier
 * @member {String} id
 */
ContactEntity.prototype['id'] = undefined;

/**
 * Last Name
 * @member {String} last_name
 */
ContactEntity.prototype['last_name'] = undefined;

/**
 * Lead Source
 * @member {String} lead_source
 */
ContactEntity.prototype['lead_source'] = undefined;

/**
 * Messenger
 * @member {Array.<module:model/Messenger>} messenger
 */
ContactEntity.prototype['messenger'] = undefined;

/**
 * Middle Name
 * @member {String} middle_name
 */
ContactEntity.prototype['middle_name'] = undefined;

/**
 * Name Suffix
 * @member {String} name_suffix
 */
ContactEntity.prototype['name_suffix'] = undefined;

/**
 * Phone
 * @member {Array.<module:model/Phone>} phone
 */
ContactEntity.prototype['phone'] = undefined;

/**
 * Position (job)
 * @member {String} position
 */
ContactEntity.prototype['position'] = undefined;

/**
 * @member {module:model/Relation} relation
 */
ContactEntity.prototype['relation'] = undefined;

/**
 * Salutation
 * @member {String} salutation
 */
ContactEntity.prototype['salutation'] = undefined;

/**
 * Sync To Outlook
 * @member {Boolean} sync_to_outlook
 */
ContactEntity.prototype['sync_to_outlook'] = undefined;

/**
 * Type
 * @member {String} type
 */
ContactEntity.prototype['type'] = undefined;

/**
 * Updated At
 * @member {Date} updated_at
 */
ContactEntity.prototype['updated_at'] = undefined;

/**
 * Website
 * @member {Array.<module:model/Website>} website
 */
ContactEntity.prototype['website'] = undefined;






export default ContactEntity;

