/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountRelation from './AccountRelation';
import AttachmentRelation from './AttachmentRelation';
import CallRelation from './CallRelation';
import CampaignRelation from './CampaignRelation';
import CaseRelation from './CaseRelation';
import CommentRelation from './CommentRelation';
import ContactRelation from './ContactRelation';
import EmailRelation from './EmailRelation';
import EventRelation from './EventRelation';
import InvoiceItemRelation from './InvoiceItemRelation';
import InvoiceRelation from './InvoiceRelation';
import LeadRelation from './LeadRelation';
import MeetingRelation from './MeetingRelation';
import NoteRelation from './NoteRelation';
import OpportunityProductRelation from './OpportunityProductRelation';
import OpportunityRelation from './OpportunityRelation';
import PostRelation from './PostRelation';
import PriceBookItemRelation from './PriceBookItemRelation';
import PriceBookRelation from './PriceBookRelation';
import ProductRelation from './ProductRelation';
import ProjectRelation from './ProjectRelation';
import QuoteItemRelation from './QuoteItemRelation';
import QuoteRelation from './QuoteRelation';
import TagRelation from './TagRelation';
import TaskRelation from './TaskRelation';
import TicketRelation from './TicketRelation';
import UserRelation from './UserRelation';

/**
 * The Relation model module.
 * @module model/Relation
 * @version 1
 */
class Relation {
    /**
     * Constructs a new <code>Relation</code>.
     * @alias module:model/Relation
     */
    constructor() { 
        
        Relation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relation} obj Optional instance to populate.
     * @return {module:model/Relation} The populated <code>Relation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relation();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], [AccountRelation]);
            }
            if (data.hasOwnProperty('attachment')) {
                obj['attachment'] = ApiClient.convertToType(data['attachment'], [AttachmentRelation]);
            }
            if (data.hasOwnProperty('call')) {
                obj['call'] = ApiClient.convertToType(data['call'], [CallRelation]);
            }
            if (data.hasOwnProperty('campaign')) {
                obj['campaign'] = ApiClient.convertToType(data['campaign'], [CampaignRelation]);
            }
            if (data.hasOwnProperty('case')) {
                obj['case'] = ApiClient.convertToType(data['case'], [CaseRelation]);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], [CommentRelation]);
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], [ContactRelation]);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], [EmailRelation]);
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], [EventRelation]);
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = ApiClient.convertToType(data['invoice'], [InvoiceRelation]);
            }
            if (data.hasOwnProperty('invoiceItem')) {
                obj['invoiceItem'] = ApiClient.convertToType(data['invoiceItem'], [InvoiceItemRelation]);
            }
            if (data.hasOwnProperty('lead')) {
                obj['lead'] = ApiClient.convertToType(data['lead'], [LeadRelation]);
            }
            if (data.hasOwnProperty('meeting')) {
                obj['meeting'] = ApiClient.convertToType(data['meeting'], [MeetingRelation]);
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], [NoteRelation]);
            }
            if (data.hasOwnProperty('opportunity')) {
                obj['opportunity'] = ApiClient.convertToType(data['opportunity'], [OpportunityRelation]);
            }
            if (data.hasOwnProperty('opportunityProduct')) {
                obj['opportunityProduct'] = ApiClient.convertToType(data['opportunityProduct'], [OpportunityProductRelation]);
            }
            if (data.hasOwnProperty('post')) {
                obj['post'] = ApiClient.convertToType(data['post'], [PostRelation]);
            }
            if (data.hasOwnProperty('priceBook')) {
                obj['priceBook'] = ApiClient.convertToType(data['priceBook'], [PriceBookRelation]);
            }
            if (data.hasOwnProperty('priceBookItem')) {
                obj['priceBookItem'] = ApiClient.convertToType(data['priceBookItem'], [PriceBookItemRelation]);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], [ProductRelation]);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], [ProjectRelation]);
            }
            if (data.hasOwnProperty('quote')) {
                obj['quote'] = ApiClient.convertToType(data['quote'], [QuoteRelation]);
            }
            if (data.hasOwnProperty('quoteItem')) {
                obj['quoteItem'] = ApiClient.convertToType(data['quoteItem'], [QuoteItemRelation]);
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], [TagRelation]);
            }
            if (data.hasOwnProperty('task')) {
                obj['task'] = ApiClient.convertToType(data['task'], [TaskRelation]);
            }
            if (data.hasOwnProperty('ticket')) {
                obj['ticket'] = ApiClient.convertToType(data['ticket'], [TicketRelation]);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], [UserRelation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relation</code>.
     */
    static validateJSON(data) {
        if (data['account']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['account'])) {
                throw new Error("Expected the field `account` to be an array in the JSON data but got " + data['account']);
            }
            // validate the optional field `account` (array)
            for (const item of data['account']) {
                AccountRelation.validateJSON(item);
            };
        }
        if (data['attachment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachment'])) {
                throw new Error("Expected the field `attachment` to be an array in the JSON data but got " + data['attachment']);
            }
            // validate the optional field `attachment` (array)
            for (const item of data['attachment']) {
                AttachmentRelation.validateJSON(item);
            };
        }
        if (data['call']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['call'])) {
                throw new Error("Expected the field `call` to be an array in the JSON data but got " + data['call']);
            }
            // validate the optional field `call` (array)
            for (const item of data['call']) {
                CallRelation.validateJSON(item);
            };
        }
        if (data['campaign']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['campaign'])) {
                throw new Error("Expected the field `campaign` to be an array in the JSON data but got " + data['campaign']);
            }
            // validate the optional field `campaign` (array)
            for (const item of data['campaign']) {
                CampaignRelation.validateJSON(item);
            };
        }
        if (data['case']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['case'])) {
                throw new Error("Expected the field `case` to be an array in the JSON data but got " + data['case']);
            }
            // validate the optional field `case` (array)
            for (const item of data['case']) {
                CaseRelation.validateJSON(item);
            };
        }
        if (data['comment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comment'])) {
                throw new Error("Expected the field `comment` to be an array in the JSON data but got " + data['comment']);
            }
            // validate the optional field `comment` (array)
            for (const item of data['comment']) {
                CommentRelation.validateJSON(item);
            };
        }
        if (data['contact']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contact'])) {
                throw new Error("Expected the field `contact` to be an array in the JSON data but got " + data['contact']);
            }
            // validate the optional field `contact` (array)
            for (const item of data['contact']) {
                ContactRelation.validateJSON(item);
            };
        }
        if (data['email']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['email'])) {
                throw new Error("Expected the field `email` to be an array in the JSON data but got " + data['email']);
            }
            // validate the optional field `email` (array)
            for (const item of data['email']) {
                EmailRelation.validateJSON(item);
            };
        }
        if (data['event']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['event'])) {
                throw new Error("Expected the field `event` to be an array in the JSON data but got " + data['event']);
            }
            // validate the optional field `event` (array)
            for (const item of data['event']) {
                EventRelation.validateJSON(item);
            };
        }
        if (data['invoice']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invoice'])) {
                throw new Error("Expected the field `invoice` to be an array in the JSON data but got " + data['invoice']);
            }
            // validate the optional field `invoice` (array)
            for (const item of data['invoice']) {
                InvoiceRelation.validateJSON(item);
            };
        }
        if (data['invoiceItem']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invoiceItem'])) {
                throw new Error("Expected the field `invoiceItem` to be an array in the JSON data but got " + data['invoiceItem']);
            }
            // validate the optional field `invoiceItem` (array)
            for (const item of data['invoiceItem']) {
                InvoiceItemRelation.validateJSON(item);
            };
        }
        if (data['lead']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lead'])) {
                throw new Error("Expected the field `lead` to be an array in the JSON data but got " + data['lead']);
            }
            // validate the optional field `lead` (array)
            for (const item of data['lead']) {
                LeadRelation.validateJSON(item);
            };
        }
        if (data['meeting']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['meeting'])) {
                throw new Error("Expected the field `meeting` to be an array in the JSON data but got " + data['meeting']);
            }
            // validate the optional field `meeting` (array)
            for (const item of data['meeting']) {
                MeetingRelation.validateJSON(item);
            };
        }
        if (data['note']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['note'])) {
                throw new Error("Expected the field `note` to be an array in the JSON data but got " + data['note']);
            }
            // validate the optional field `note` (array)
            for (const item of data['note']) {
                NoteRelation.validateJSON(item);
            };
        }
        if (data['opportunity']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['opportunity'])) {
                throw new Error("Expected the field `opportunity` to be an array in the JSON data but got " + data['opportunity']);
            }
            // validate the optional field `opportunity` (array)
            for (const item of data['opportunity']) {
                OpportunityRelation.validateJSON(item);
            };
        }
        if (data['opportunityProduct']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['opportunityProduct'])) {
                throw new Error("Expected the field `opportunityProduct` to be an array in the JSON data but got " + data['opportunityProduct']);
            }
            // validate the optional field `opportunityProduct` (array)
            for (const item of data['opportunityProduct']) {
                OpportunityProductRelation.validateJSON(item);
            };
        }
        if (data['post']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['post'])) {
                throw new Error("Expected the field `post` to be an array in the JSON data but got " + data['post']);
            }
            // validate the optional field `post` (array)
            for (const item of data['post']) {
                PostRelation.validateJSON(item);
            };
        }
        if (data['priceBook']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['priceBook'])) {
                throw new Error("Expected the field `priceBook` to be an array in the JSON data but got " + data['priceBook']);
            }
            // validate the optional field `priceBook` (array)
            for (const item of data['priceBook']) {
                PriceBookRelation.validateJSON(item);
            };
        }
        if (data['priceBookItem']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['priceBookItem'])) {
                throw new Error("Expected the field `priceBookItem` to be an array in the JSON data but got " + data['priceBookItem']);
            }
            // validate the optional field `priceBookItem` (array)
            for (const item of data['priceBookItem']) {
                PriceBookItemRelation.validateJSON(item);
            };
        }
        if (data['product']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['product'])) {
                throw new Error("Expected the field `product` to be an array in the JSON data but got " + data['product']);
            }
            // validate the optional field `product` (array)
            for (const item of data['product']) {
                ProductRelation.validateJSON(item);
            };
        }
        if (data['project']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['project'])) {
                throw new Error("Expected the field `project` to be an array in the JSON data but got " + data['project']);
            }
            // validate the optional field `project` (array)
            for (const item of data['project']) {
                ProjectRelation.validateJSON(item);
            };
        }
        if (data['quote']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['quote'])) {
                throw new Error("Expected the field `quote` to be an array in the JSON data but got " + data['quote']);
            }
            // validate the optional field `quote` (array)
            for (const item of data['quote']) {
                QuoteRelation.validateJSON(item);
            };
        }
        if (data['quoteItem']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['quoteItem'])) {
                throw new Error("Expected the field `quoteItem` to be an array in the JSON data but got " + data['quoteItem']);
            }
            // validate the optional field `quoteItem` (array)
            for (const item of data['quoteItem']) {
                QuoteItemRelation.validateJSON(item);
            };
        }
        if (data['tag']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tag'])) {
                throw new Error("Expected the field `tag` to be an array in the JSON data but got " + data['tag']);
            }
            // validate the optional field `tag` (array)
            for (const item of data['tag']) {
                TagRelation.validateJSON(item);
            };
        }
        if (data['task']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['task'])) {
                throw new Error("Expected the field `task` to be an array in the JSON data but got " + data['task']);
            }
            // validate the optional field `task` (array)
            for (const item of data['task']) {
                TaskRelation.validateJSON(item);
            };
        }
        if (data['ticket']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ticket'])) {
                throw new Error("Expected the field `ticket` to be an array in the JSON data but got " + data['ticket']);
            }
            // validate the optional field `ticket` (array)
            for (const item of data['ticket']) {
                TicketRelation.validateJSON(item);
            };
        }
        if (data['user']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['user'])) {
                throw new Error("Expected the field `user` to be an array in the JSON data but got " + data['user']);
            }
            // validate the optional field `user` (array)
            for (const item of data['user']) {
                UserRelation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Account
 * @member {Array.<module:model/AccountRelation>} account
 */
Relation.prototype['account'] = undefined;

/**
 * Attachment
 * @member {Array.<module:model/AttachmentRelation>} attachment
 */
Relation.prototype['attachment'] = undefined;

/**
 * Call
 * @member {Array.<module:model/CallRelation>} call
 */
Relation.prototype['call'] = undefined;

/**
 * Campaign
 * @member {Array.<module:model/CampaignRelation>} campaign
 */
Relation.prototype['campaign'] = undefined;

/**
 * Case
 * @member {Array.<module:model/CaseRelation>} case
 */
Relation.prototype['case'] = undefined;

/**
 * Comment
 * @member {Array.<module:model/CommentRelation>} comment
 */
Relation.prototype['comment'] = undefined;

/**
 * Contact
 * @member {Array.<module:model/ContactRelation>} contact
 */
Relation.prototype['contact'] = undefined;

/**
 * Email
 * @member {Array.<module:model/EmailRelation>} email
 */
Relation.prototype['email'] = undefined;

/**
 * Event
 * @member {Array.<module:model/EventRelation>} event
 */
Relation.prototype['event'] = undefined;

/**
 * Invoice
 * @member {Array.<module:model/InvoiceRelation>} invoice
 */
Relation.prototype['invoice'] = undefined;

/**
 * Invoice Item
 * @member {Array.<module:model/InvoiceItemRelation>} invoiceItem
 */
Relation.prototype['invoiceItem'] = undefined;

/**
 * Lead
 * @member {Array.<module:model/LeadRelation>} lead
 */
Relation.prototype['lead'] = undefined;

/**
 * Meeting
 * @member {Array.<module:model/MeetingRelation>} meeting
 */
Relation.prototype['meeting'] = undefined;

/**
 * Note
 * @member {Array.<module:model/NoteRelation>} note
 */
Relation.prototype['note'] = undefined;

/**
 * Opportunity
 * @member {Array.<module:model/OpportunityRelation>} opportunity
 */
Relation.prototype['opportunity'] = undefined;

/**
 * Opportunity Product
 * @member {Array.<module:model/OpportunityProductRelation>} opportunityProduct
 */
Relation.prototype['opportunityProduct'] = undefined;

/**
 * Post
 * @member {Array.<module:model/PostRelation>} post
 */
Relation.prototype['post'] = undefined;

/**
 * Price Book
 * @member {Array.<module:model/PriceBookRelation>} priceBook
 */
Relation.prototype['priceBook'] = undefined;

/**
 * Price Book Item
 * @member {Array.<module:model/PriceBookItemRelation>} priceBookItem
 */
Relation.prototype['priceBookItem'] = undefined;

/**
 * Product
 * @member {Array.<module:model/ProductRelation>} product
 */
Relation.prototype['product'] = undefined;

/**
 * Project
 * @member {Array.<module:model/ProjectRelation>} project
 */
Relation.prototype['project'] = undefined;

/**
 * Quote
 * @member {Array.<module:model/QuoteRelation>} quote
 */
Relation.prototype['quote'] = undefined;

/**
 * Quote Item
 * @member {Array.<module:model/QuoteItemRelation>} quoteItem
 */
Relation.prototype['quoteItem'] = undefined;

/**
 * Tag
 * @member {Array.<module:model/TagRelation>} tag
 */
Relation.prototype['tag'] = undefined;

/**
 * Task
 * @member {Array.<module:model/TaskRelation>} task
 */
Relation.prototype['task'] = undefined;

/**
 * Ticket
 * @member {Array.<module:model/TicketRelation>} ticket
 */
Relation.prototype['ticket'] = undefined;

/**
 * User
 * @member {Array.<module:model/UserRelation>} user
 */
Relation.prototype['user'] = undefined;






export default Relation;

