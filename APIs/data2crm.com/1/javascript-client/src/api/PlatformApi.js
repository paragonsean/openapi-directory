/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlatformEntity from '../model/PlatformEntity';

/**
* Platform service.
* @module api/PlatformApi
* @version 1
*/
export default class PlatformApi {

    /**
    * Constructs a new PlatformApi. 
    * @alias module:api/PlatformApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPlatformCollection operation.
     * @callback module:api/PlatformApi~getPlatformCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlatformEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for platform
     * Returns all platforms from the system
     * @param {String} xAPI2CRMUSERKEY API2CRM user key
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] Amount of results (default: 25)
     * @param {Number} [page] Page to show (default: 1)
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {String} [sort] Specifies ascending or descending sort on existing fields
     * @param {module:api/PlatformApi~getPlatformCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlatformEntity>}
     */
    getPlatformCollection(xAPI2CRMUSERKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getPlatformCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'fields': opts['fields'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlatformEntity];
      return this.apiClient.callApi(
        '/platform/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlatformEntity operation.
     * @callback module:api/PlatformApi~getPlatformEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlatformEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for platform
     * Return platform information
     * @param {String} xAPI2CRMUSERKEY API2CRM user key
     * @param {String} type Platform type
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/PlatformApi~getPlatformEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlatformEntity}
     */
    getPlatformEntity(xAPI2CRMUSERKEY, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getPlatformEntity");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPlatformEntity");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlatformEntity;
      return this.apiClient.callApi(
        '/platform/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
