/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Aggregate from '../model/Aggregate';
import BulkEntity from '../model/BulkEntity';
import BulkEntityRelation from '../model/BulkEntityRelation';
import Count from '../model/Count';
import LeadDescribe from '../model/LeadDescribe';
import LeadEntity from '../model/LeadEntity';
import LeadEntityRelation from '../model/LeadEntityRelation';

/**
* Lead service.
* @module api/LeadApi
* @version 1
*/
export default class LeadApi {

    /**
    * Constructs a new LeadApi. 
    * @alias module:api/LeadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLeadEntity operation.
     * @callback module:api/LeadApi~createLeadEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeadEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST for lead
     * Add lead into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/LeadEntity} body Add lead into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/LeadApi~createLeadEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeadEntityRelation}
     */
    createLeadEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createLeadEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createLeadEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLeadEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/lead', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLeadEntityBulk operation.
     * @callback module:api/LeadApi~createLeadEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST bulk  for lead
     * Add lead into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body Add lead into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/LeadApi~createLeadEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    createLeadEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createLeadEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createLeadEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLeadEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/lead/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLeadCollectionBulk operation.
     * @callback module:api/LeadApi~deleteLeadCollectionBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE bulk  for lead
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {module:api/LeadApi~deleteLeadCollectionBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntity}
     */
    deleteLeadCollectionBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteLeadCollectionBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteLeadCollectionBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteLeadCollectionBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntity;
      return this.apiClient.callApi(
        '/application/entity/lead/bulk', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLeadEntity operation.
     * @callback module:api/LeadApi~deleteLeadEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE for lead
     * Delete lead information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} leadId Lead Identifier
     * @param {module:api/LeadApi~deleteLeadEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLeadEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, leadId, callback) {
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteLeadEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteLeadEntity");
      }
      // verify the required parameter 'leadId' is set
      if (leadId === undefined || leadId === null) {
        throw new Error("Missing the required parameter 'leadId' when calling deleteLeadEntity");
      }

      let pathParams = {
        'lead_id': leadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/entity/lead/{lead_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeadAggregate operation.
     * @callback module:api/LeadApi~getLeadAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AGGREGATE for lead
     * Returns aggregate for leads
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [filter] Filter
     * @param {String} [pipeline] Pipeline
     * @param {module:api/LeadApi~getLeadAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    getLeadAggregate(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getLeadAggregate");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getLeadAggregate");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'pipeline': opts['pipeline']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/application/entity/lead/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeadCollection operation.
     * @callback module:api/LeadApi~getLeadCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LeadEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for lead
     * Returns all leads from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {Number} [pageSize] Amount of results (default: 25)
     * @param {Number} [page] Page to show (default: 1)
     * @param {String} [filter] Filter
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {String} [sort] Specifies ascending or descending sort on existing fields
     * @param {module:model/String} [unique] Find all unique values for selected field
     * @param {module:api/LeadApi~getLeadCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LeadEntity>}
     */
    getLeadCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getLeadCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getLeadCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'expand': opts['expand'],
        'fields': opts['fields'],
        'sort': opts['sort'],
        'unique': opts['unique']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LeadEntity];
      return this.apiClient.callApi(
        '/application/entity/lead/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeadCountCollection operation.
     * @callback module:api/LeadApi~getLeadCountCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Count} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * COUNT for lead
     * Count all leads from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [filter] Filter
     * @param {module:api/LeadApi~getLeadCountCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Count}
     */
    getLeadCountCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getLeadCountCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getLeadCountCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Count;
      return this.apiClient.callApi(
        '/application/entity/lead/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeadDescribe operation.
     * @callback module:api/LeadApi~getLeadDescribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeadDescribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DESCRIBE for lead
     * Returns describe for leads
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/LeadApi~getLeadDescribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeadDescribe}
     */
    getLeadDescribe(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getLeadDescribe");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getLeadDescribe");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeadDescribe;
      return this.apiClient.callApi(
        '/application/entity/lead/describe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeadEntity operation.
     * @callback module:api/LeadApi~getLeadEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeadEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for lead
     * Return lead information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} leadId Lead Identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/LeadApi~getLeadEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeadEntity}
     */
    getLeadEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, leadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getLeadEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getLeadEntity");
      }
      // verify the required parameter 'leadId' is set
      if (leadId === undefined || leadId === null) {
        throw new Error("Missing the required parameter 'leadId' when calling getLeadEntity");
      }

      let pathParams = {
        'lead_id': leadId
      };
      let queryParams = {
        'expand': opts['expand'],
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeadEntity;
      return this.apiClient.callApi(
        '/application/entity/lead/{lead_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLeadEntity operation.
     * @callback module:api/LeadApi~updateLeadEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeadEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT for lead
     * Update lead information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} leadId Lead Identifier
     * @param {module:model/LeadEntity} body Update lead information
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/LeadApi~updateLeadEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeadEntityRelation}
     */
    updateLeadEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, leadId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateLeadEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateLeadEntity");
      }
      // verify the required parameter 'leadId' is set
      if (leadId === undefined || leadId === null) {
        throw new Error("Missing the required parameter 'leadId' when calling updateLeadEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLeadEntity");
      }

      let pathParams = {
        'lead_id': leadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/lead/{lead_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLeadEntityBulk operation.
     * @callback module:api/LeadApi~updateLeadEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT bulk  for lead
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/LeadApi~updateLeadEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    updateLeadEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateLeadEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateLeadEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLeadEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/lead/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
