/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationEntity from '../model/ApplicationEntity';
import ApplicationEntityList from '../model/ApplicationEntityList';
import ApplicationEntityRelation from '../model/ApplicationEntityRelation';
import ApplicationEntityWrite from '../model/ApplicationEntityWrite';
import Count from '../model/Count';

/**
* Application service.
* @module api/ApplicationApi
* @version 1
*/
export default class ApplicationApi {

    /**
    * Constructs a new ApplicationApi. 
    * @alias module:api/ApplicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApplicationEntity operation.
     * @callback module:api/ApplicationApi~createApplicationEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST for application
     * Add application into the system
     * @param {String} xAPI2CRMUSERKEY API2CRM user key
     * @param {module:model/ApplicationEntityWrite} body Add application into the system
     * @param {module:api/ApplicationApi~createApplicationEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationEntityRelation}
     */
    createApplicationEntity(xAPI2CRMUSERKEY, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createApplicationEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createApplicationEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationEntityRelation;
      return this.apiClient.callApi(
        '/application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationEntity operation.
     * @callback module:api/ApplicationApi~deleteApplicationEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE for application
     * Delete application information
     * @param {String} xAPI2CRMUSERKEY API2CRM user key
     * @param {String} key Application key
     * @param {module:api/ApplicationApi~deleteApplicationEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApplicationEntity(xAPI2CRMUSERKEY, key, callback) {
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteApplicationEntity");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteApplicationEntity");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationCollection operation.
     * @callback module:api/ApplicationApi~getApplicationCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationEntityList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for application
     * Returns all applications from the system
     * @param {String} xAPI2CRMUSERKEY API2CRM user key
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] Amount of results (default: 25)
     * @param {Number} [page] Page to show (default: 1)
     * @param {String} [filter] Filter
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {String} [sort] Specifies ascending or descending sort on existing fields
     * @param {module:api/ApplicationApi~getApplicationCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationEntityList>}
     */
    getApplicationCollection(xAPI2CRMUSERKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getApplicationCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApplicationEntityList];
      return this.apiClient.callApi(
        '/application/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationCountCollection operation.
     * @callback module:api/ApplicationApi~getApplicationCountCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Count} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * COUNT for application
     * Count all applications from the system
     * @param {String} xAPI2CRMUSERKEY API2CRM user key
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter
     * @param {module:api/ApplicationApi~getApplicationCountCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Count}
     */
    getApplicationCountCollection(xAPI2CRMUSERKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getApplicationCountCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Count;
      return this.apiClient.callApi(
        '/application/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationEntity operation.
     * @callback module:api/ApplicationApi~getApplicationEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for application
     * Return application information
     * @param {String} xAPI2CRMUSERKEY API2CRM user key
     * @param {String} key Application key
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/ApplicationApi~getApplicationEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationEntity}
     */
    getApplicationEntity(xAPI2CRMUSERKEY, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getApplicationEntity");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getApplicationEntity");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationEntity;
      return this.apiClient.callApi(
        '/application/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplicationEntity operation.
     * @callback module:api/ApplicationApi~updateApplicationEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT for application
     * Update application information
     * @param {String} xAPI2CRMUSERKEY API2CRM user key
     * @param {String} key Application key
     * @param {module:model/ApplicationEntityWrite} body Update application information
     * @param {module:api/ApplicationApi~updateApplicationEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationEntityRelation}
     */
    updateApplicationEntity(xAPI2CRMUSERKEY, key, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateApplicationEntity");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateApplicationEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApplicationEntity");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationEntityRelation;
      return this.apiClient.callApi(
        '/application/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
