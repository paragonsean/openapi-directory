/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Count from '../model/Count';
import FieldItemDescribe from '../model/FieldItemDescribe';
import FieldItemEntity from '../model/FieldItemEntity';
import FieldItemEntityRelation from '../model/FieldItemEntityRelation';

/**
* FieldItem service.
* @module api/FieldItemApi
* @version 1
*/
export default class FieldItemApi {

    /**
    * Constructs a new FieldItemApi. 
    * @alias module:api/FieldItemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFieldItemEntity operation.
     * @callback module:api/FieldItemApi~createFieldItemEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FieldItemEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST for fieldItem
     * Add field item into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} fieldId Field Identifier
     * @param {module:model/FieldItemEntity} body Add field item into the system
     * @param {Object} opts Optional parameters
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/FieldItemApi~createFieldItemEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FieldItemEntityRelation}
     */
    createFieldItemEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, fieldId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createFieldItemEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createFieldItemEntity");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling createFieldItemEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFieldItemEntity");
      }

      let pathParams = {
        'field_id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FieldItemEntityRelation;
      return this.apiClient.callApi(
        '/application/field/{field_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldItemEntity operation.
     * @callback module:api/FieldItemApi~deleteFieldItemEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE for fieldItem
     * Delete field item information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} fieldId Field Identifier
     * @param {String} fieldItemId Field Item Identifier
     * @param {module:api/FieldItemApi~deleteFieldItemEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFieldItemEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, fieldId, fieldItemId, callback) {
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteFieldItemEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteFieldItemEntity");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteFieldItemEntity");
      }
      // verify the required parameter 'fieldItemId' is set
      if (fieldItemId === undefined || fieldItemId === null) {
        throw new Error("Missing the required parameter 'fieldItemId' when calling deleteFieldItemEntity");
      }

      let pathParams = {
        'field_id': fieldId,
        'field_item_id': fieldItemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/field/{field_id}/{field_item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldItemCollection operation.
     * @callback module:api/FieldItemApi~getFieldItemCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FieldItemEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for fieldItem
     * Returns all fields from the system items
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} fieldId Field Identifier
     * @param {Object} opts Optional parameters
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {Number} [pageSize] Amount of results (default: 25)
     * @param {Number} [page] Page to show (default: 1)
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/FieldItemApi~getFieldItemCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FieldItemEntity>}
     */
    getFieldItemCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getFieldItemCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getFieldItemCollection");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getFieldItemCollection");
      }

      let pathParams = {
        'field_id': fieldId
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FieldItemEntity];
      return this.apiClient.callApi(
        '/application/field/{field_id}/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldItemCountCollection operation.
     * @callback module:api/FieldItemApi~getFieldItemCountCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Count} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * COUNT for fieldItem
     * Count all field items from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} fieldId Field Identifier
     * @param {module:api/FieldItemApi~getFieldItemCountCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Count}
     */
    getFieldItemCountCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getFieldItemCountCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getFieldItemCountCollection");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getFieldItemCountCollection");
      }

      let pathParams = {
        'field_id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Count;
      return this.apiClient.callApi(
        '/application/field/{field_id}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldItemDescribe operation.
     * @callback module:api/FieldItemApi~getFieldItemDescribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FieldItemDescribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DESCRIBE for fieldItem
     * Returns describe for field items
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} fieldId Field Identifier
     * @param {Object} opts Optional parameters
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/FieldItemApi~getFieldItemDescribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FieldItemDescribe}
     */
    getFieldItemDescribe(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getFieldItemDescribe");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getFieldItemDescribe");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getFieldItemDescribe");
      }

      let pathParams = {
        'field_id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FieldItemDescribe;
      return this.apiClient.callApi(
        '/application/field/{field_id}/describe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldItemEntity operation.
     * @callback module:api/FieldItemApi~getFieldItemEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FieldItemEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for fieldItem
     * Return field item information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} fieldId Field Identifier
     * @param {String} fieldItemId Field Item Identifier
     * @param {Object} opts Optional parameters
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/FieldItemApi~getFieldItemEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FieldItemEntity}
     */
    getFieldItemEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, fieldId, fieldItemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getFieldItemEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getFieldItemEntity");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getFieldItemEntity");
      }
      // verify the required parameter 'fieldItemId' is set
      if (fieldItemId === undefined || fieldItemId === null) {
        throw new Error("Missing the required parameter 'fieldItemId' when calling getFieldItemEntity");
      }

      let pathParams = {
        'field_id': fieldId,
        'field_item_id': fieldItemId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FieldItemEntity;
      return this.apiClient.callApi(
        '/application/field/{field_id}/{field_item_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldItemEntity operation.
     * @callback module:api/FieldItemApi~updateFieldItemEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FieldItemEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT for fieldItem
     * Update field item information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} fieldId Field Identifier
     * @param {String} fieldItemId Field Item Identifier
     * @param {module:model/FieldItemEntity} body Update field item information
     * @param {Object} opts Optional parameters
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/FieldItemApi~updateFieldItemEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FieldItemEntityRelation}
     */
    updateFieldItemEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, fieldId, fieldItemId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateFieldItemEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateFieldItemEntity");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateFieldItemEntity");
      }
      // verify the required parameter 'fieldItemId' is set
      if (fieldItemId === undefined || fieldItemId === null) {
        throw new Error("Missing the required parameter 'fieldItemId' when calling updateFieldItemEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFieldItemEntity");
      }

      let pathParams = {
        'field_id': fieldId,
        'field_item_id': fieldItemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FieldItemEntityRelation;
      return this.apiClient.callApi(
        '/application/field/{field_id}/{field_item_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
