/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Aggregate from '../model/Aggregate';
import BulkEntity from '../model/BulkEntity';
import BulkEntityRelation from '../model/BulkEntityRelation';
import CommentDescribe from '../model/CommentDescribe';
import CommentEntity from '../model/CommentEntity';
import CommentEntityRelation from '../model/CommentEntityRelation';
import Count from '../model/Count';

/**
* Comment service.
* @module api/CommentApi
* @version 1
*/
export default class CommentApi {

    /**
    * Constructs a new CommentApi. 
    * @alias module:api/CommentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCommentEntity operation.
     * @callback module:api/CommentApi~createCommentEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST for comment
     * Add comment into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/CommentEntity} body Add comment into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CommentApi~createCommentEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEntityRelation}
     */
    createCommentEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createCommentEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createCommentEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCommentEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCommentEntityBulk operation.
     * @callback module:api/CommentApi~createCommentEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST bulk  for comment
     * Add comment into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body Add comment into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CommentApi~createCommentEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    createCommentEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createCommentEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createCommentEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCommentEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/comment/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCommentCollectionBulk operation.
     * @callback module:api/CommentApi~deleteCommentCollectionBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE bulk  for comment
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {module:api/CommentApi~deleteCommentCollectionBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntity}
     */
    deleteCommentCollectionBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteCommentCollectionBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteCommentCollectionBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteCommentCollectionBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntity;
      return this.apiClient.callApi(
        '/application/entity/comment/bulk', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCommentEntity operation.
     * @callback module:api/CommentApi~deleteCommentEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE for comment
     * Delete comment information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} commentId Comment Identifier
     * @param {module:api/CommentApi~deleteCommentEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCommentEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteCommentEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteCommentEntity");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteCommentEntity");
      }

      let pathParams = {
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/entity/comment/{comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentAggregate operation.
     * @callback module:api/CommentApi~getCommentAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AGGREGATE for comment
     * Returns aggregate for comments
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [filter] Filter
     * @param {String} [pipeline] Pipeline
     * @param {module:api/CommentApi~getCommentAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    getCommentAggregate(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCommentAggregate");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCommentAggregate");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'pipeline': opts['pipeline']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/application/entity/comment/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentCollection operation.
     * @callback module:api/CommentApi~getCommentCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for comment
     * Returns all comments from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {Number} [pageSize] Amount of results (default: 25)
     * @param {Number} [page] Page to show (default: 1)
     * @param {String} [filter] Filter
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {String} [sort] Specifies ascending or descending sort on existing fields
     * @param {module:model/String} [unique] Find all unique values for selected field
     * @param {module:api/CommentApi~getCommentCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentEntity>}
     */
    getCommentCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCommentCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCommentCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'expand': opts['expand'],
        'fields': opts['fields'],
        'sort': opts['sort'],
        'unique': opts['unique']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CommentEntity];
      return this.apiClient.callApi(
        '/application/entity/comment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentCountCollection operation.
     * @callback module:api/CommentApi~getCommentCountCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Count} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * COUNT for comment
     * Count all comments from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [filter] Filter
     * @param {module:api/CommentApi~getCommentCountCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Count}
     */
    getCommentCountCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCommentCountCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCommentCountCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Count;
      return this.apiClient.callApi(
        '/application/entity/comment/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentDescribe operation.
     * @callback module:api/CommentApi~getCommentDescribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentDescribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DESCRIBE for comment
     * Returns describe for comments
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CommentApi~getCommentDescribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentDescribe}
     */
    getCommentDescribe(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCommentDescribe");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCommentDescribe");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentDescribe;
      return this.apiClient.callApi(
        '/application/entity/comment/describe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentEntity operation.
     * @callback module:api/CommentApi~getCommentEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for comment
     * Return comment information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} commentId Comment Identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/CommentApi~getCommentEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEntity}
     */
    getCommentEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCommentEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCommentEntity");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling getCommentEntity");
      }

      let pathParams = {
        'comment_id': commentId
      };
      let queryParams = {
        'expand': opts['expand'],
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentEntity;
      return this.apiClient.callApi(
        '/application/entity/comment/{comment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCommentEntity operation.
     * @callback module:api/CommentApi~updateCommentEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT for comment
     * Update comment information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} commentId Comment Identifier
     * @param {module:model/CommentEntity} body Update comment information
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CommentApi~updateCommentEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEntityRelation}
     */
    updateCommentEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, commentId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateCommentEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateCommentEntity");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updateCommentEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCommentEntity");
      }

      let pathParams = {
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/comment/{comment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCommentEntityBulk operation.
     * @callback module:api/CommentApi~updateCommentEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT bulk  for comment
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CommentApi~updateCommentEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    updateCommentEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateCommentEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateCommentEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCommentEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/comment/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
