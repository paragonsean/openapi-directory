/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Aggregate from '../model/Aggregate';
import BulkEntity from '../model/BulkEntity';
import BulkEntityRelation from '../model/BulkEntityRelation';
import CaseDescribe from '../model/CaseDescribe';
import CasesEntity from '../model/CasesEntity';
import CasesEntityRelation from '../model/CasesEntityRelation';
import Count from '../model/Count';

/**
* Case service.
* @module api/CaseApi
* @version 1
*/
export default class CaseApi {

    /**
    * Constructs a new CaseApi. 
    * @alias module:api/CaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCaseEntity operation.
     * @callback module:api/CaseApi~createCaseEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CasesEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST for case
     * Add case into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/CasesEntity} body Add case into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CaseApi~createCaseEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CasesEntityRelation}
     */
    createCaseEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createCaseEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createCaseEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCaseEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CasesEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/case', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCaseEntityBulk operation.
     * @callback module:api/CaseApi~createCaseEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST bulk  for case
     * Add case into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body Add case into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CaseApi~createCaseEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    createCaseEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createCaseEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createCaseEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCaseEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/case/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCaseCollectionBulk operation.
     * @callback module:api/CaseApi~deleteCaseCollectionBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE bulk  for case
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {module:api/CaseApi~deleteCaseCollectionBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntity}
     */
    deleteCaseCollectionBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteCaseCollectionBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteCaseCollectionBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteCaseCollectionBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntity;
      return this.apiClient.callApi(
        '/application/entity/case/bulk', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCaseEntity operation.
     * @callback module:api/CaseApi~deleteCaseEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE for case
     * Delete case information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} caseId Case Identifier
     * @param {module:api/CaseApi~deleteCaseEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCaseEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, caseId, callback) {
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteCaseEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteCaseEntity");
      }
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling deleteCaseEntity");
      }

      let pathParams = {
        'case_id': caseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/entity/case/{case_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseAggregate operation.
     * @callback module:api/CaseApi~getCaseAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AGGREGATE for case
     * Returns aggregate for cases
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [filter] Filter
     * @param {String} [pipeline] Pipeline
     * @param {module:api/CaseApi~getCaseAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    getCaseAggregate(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCaseAggregate");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCaseAggregate");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'pipeline': opts['pipeline']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/application/entity/case/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseCollection operation.
     * @callback module:api/CaseApi~getCaseCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CasesEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for case
     * Returns all cases from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {Number} [pageSize] Amount of results (default: 25)
     * @param {Number} [page] Page to show (default: 1)
     * @param {String} [filter] Filter
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {String} [sort] Specifies ascending or descending sort on existing fields
     * @param {module:model/String} [unique] Find all unique values for selected field
     * @param {module:api/CaseApi~getCaseCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CasesEntity>}
     */
    getCaseCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCaseCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCaseCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'expand': opts['expand'],
        'fields': opts['fields'],
        'sort': opts['sort'],
        'unique': opts['unique']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CasesEntity];
      return this.apiClient.callApi(
        '/application/entity/case/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseCountCollection operation.
     * @callback module:api/CaseApi~getCaseCountCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Count} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * COUNT for case
     * Count all cases from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [filter] Filter
     * @param {module:api/CaseApi~getCaseCountCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Count}
     */
    getCaseCountCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCaseCountCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCaseCountCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Count;
      return this.apiClient.callApi(
        '/application/entity/case/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseDescribe operation.
     * @callback module:api/CaseApi~getCaseDescribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseDescribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DESCRIBE for case
     * Returns describe for cases
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CaseApi~getCaseDescribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaseDescribe}
     */
    getCaseDescribe(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCaseDescribe");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCaseDescribe");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CaseDescribe;
      return this.apiClient.callApi(
        '/application/entity/case/describe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaseEntity operation.
     * @callback module:api/CaseApi~getCaseEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CasesEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for case
     * Return case information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} caseId Case Identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/CaseApi~getCaseEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CasesEntity}
     */
    getCaseEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, caseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getCaseEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getCaseEntity");
      }
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling getCaseEntity");
      }

      let pathParams = {
        'case_id': caseId
      };
      let queryParams = {
        'expand': opts['expand'],
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CasesEntity;
      return this.apiClient.callApi(
        '/application/entity/case/{case_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCaseEntity operation.
     * @callback module:api/CaseApi~updateCaseEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CasesEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT for case
     * Update case information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} caseId Case Identifier
     * @param {module:model/CasesEntity} body Update case information
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CaseApi~updateCaseEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CasesEntityRelation}
     */
    updateCaseEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, caseId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateCaseEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateCaseEntity");
      }
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling updateCaseEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCaseEntity");
      }

      let pathParams = {
        'case_id': caseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CasesEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/case/{case_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCaseEntityBulk operation.
     * @callback module:api/CaseApi~updateCaseEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT bulk  for case
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/CaseApi~updateCaseEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    updateCaseEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateCaseEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateCaseEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCaseEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/case/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
