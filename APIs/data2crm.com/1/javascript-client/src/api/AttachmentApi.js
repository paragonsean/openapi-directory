/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Aggregate from '../model/Aggregate';
import AttachmentDescribe from '../model/AttachmentDescribe';
import AttachmentEntity from '../model/AttachmentEntity';
import AttachmentEntityList from '../model/AttachmentEntityList';
import AttachmentEntityRelation from '../model/AttachmentEntityRelation';
import AttachmentEntityWrite from '../model/AttachmentEntityWrite';
import BulkEntity from '../model/BulkEntity';
import BulkEntityRelation from '../model/BulkEntityRelation';
import Count from '../model/Count';

/**
* Attachment service.
* @module api/AttachmentApi
* @version 1
*/
export default class AttachmentApi {

    /**
    * Constructs a new AttachmentApi. 
    * @alias module:api/AttachmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAttachmentEntity operation.
     * @callback module:api/AttachmentApi~createAttachmentEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST for attachment
     * Add attachment into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/AttachmentEntityWrite} body Add attachment into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/AttachmentApi~createAttachmentEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentEntityRelation}
     */
    createAttachmentEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createAttachmentEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createAttachmentEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAttachmentEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AttachmentEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/attachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAttachmentEntityBulk operation.
     * @callback module:api/AttachmentApi~createAttachmentEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST bulk  for attachment
     * Add attachment into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body Add attachment into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/AttachmentApi~createAttachmentEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    createAttachmentEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createAttachmentEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createAttachmentEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAttachmentEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/attachment/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAttachmentCollectionBulk operation.
     * @callback module:api/AttachmentApi~deleteAttachmentCollectionBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE bulk  for attachment
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {module:api/AttachmentApi~deleteAttachmentCollectionBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntity}
     */
    deleteAttachmentCollectionBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteAttachmentCollectionBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteAttachmentCollectionBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAttachmentCollectionBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntity;
      return this.apiClient.callApi(
        '/application/entity/attachment/bulk', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAttachmentEntity operation.
     * @callback module:api/AttachmentApi~deleteAttachmentEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE for attachment
     * Delete attachment information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} attachmentId Attachment Identifier
     * @param {module:api/AttachmentApi~deleteAttachmentEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAttachmentEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteAttachmentEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteAttachmentEntity");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling deleteAttachmentEntity");
      }

      let pathParams = {
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/entity/attachment/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachmentAggregate operation.
     * @callback module:api/AttachmentApi~getAttachmentAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AGGREGATE for attachment
     * Returns aggregate for attachments
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [filter] Filter
     * @param {String} [pipeline] Pipeline
     * @param {module:api/AttachmentApi~getAttachmentAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    getAttachmentAggregate(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getAttachmentAggregate");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getAttachmentAggregate");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'pipeline': opts['pipeline']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/application/entity/attachment/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachmentCollection operation.
     * @callback module:api/AttachmentApi~getAttachmentCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AttachmentEntityList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for attachment
     * Returns all attachments from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {Number} [pageSize] Amount of results (default: 25)
     * @param {Number} [page] Page to show (default: 1)
     * @param {String} [filter] Filter
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {String} [sort] Specifies ascending or descending sort on existing fields
     * @param {module:model/String} [unique] Find all unique values for selected field
     * @param {module:api/AttachmentApi~getAttachmentCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AttachmentEntityList>}
     */
    getAttachmentCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getAttachmentCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getAttachmentCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'expand': opts['expand'],
        'fields': opts['fields'],
        'sort': opts['sort'],
        'unique': opts['unique']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AttachmentEntityList];
      return this.apiClient.callApi(
        '/application/entity/attachment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachmentCountCollection operation.
     * @callback module:api/AttachmentApi~getAttachmentCountCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Count} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * COUNT for attachment
     * Count all attachments from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [filter] Filter
     * @param {module:api/AttachmentApi~getAttachmentCountCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Count}
     */
    getAttachmentCountCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getAttachmentCountCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getAttachmentCountCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Count;
      return this.apiClient.callApi(
        '/application/entity/attachment/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachmentDescribe operation.
     * @callback module:api/AttachmentApi~getAttachmentDescribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentDescribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DESCRIBE for attachment
     * Returns describe for attachments
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/AttachmentApi~getAttachmentDescribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentDescribe}
     */
    getAttachmentDescribe(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getAttachmentDescribe");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getAttachmentDescribe");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentDescribe;
      return this.apiClient.callApi(
        '/application/entity/attachment/describe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachmentEntity operation.
     * @callback module:api/AttachmentApi~getAttachmentEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for attachment
     * Return attachment information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} attachmentId Attachment Identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/AttachmentApi~getAttachmentEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentEntity}
     */
    getAttachmentEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getAttachmentEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getAttachmentEntity");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling getAttachmentEntity");
      }

      let pathParams = {
        'attachment_id': attachmentId
      };
      let queryParams = {
        'expand': opts['expand'],
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentEntity;
      return this.apiClient.callApi(
        '/application/entity/attachment/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAttachmentEntity operation.
     * @callback module:api/AttachmentApi~updateAttachmentEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT for attachment
     * Update attachment information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} attachmentId Attachment Identifier
     * @param {module:model/AttachmentEntityWrite} body Update attachment information
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/AttachmentApi~updateAttachmentEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentEntityRelation}
     */
    updateAttachmentEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, attachmentId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateAttachmentEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateAttachmentEntity");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling updateAttachmentEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAttachmentEntity");
      }

      let pathParams = {
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AttachmentEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/attachment/{attachment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAttachmentEntityBulk operation.
     * @callback module:api/AttachmentApi~updateAttachmentEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT bulk  for attachment
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/AttachmentApi~updateAttachmentEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    updateAttachmentEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateAttachmentEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateAttachmentEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAttachmentEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/attachment/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
