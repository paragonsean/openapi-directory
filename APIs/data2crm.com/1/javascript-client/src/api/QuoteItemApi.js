/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Aggregate from '../model/Aggregate';
import BulkEntity from '../model/BulkEntity';
import BulkEntityRelation from '../model/BulkEntityRelation';
import Count from '../model/Count';
import QuoteItemDescribe from '../model/QuoteItemDescribe';
import QuoteItemEntity from '../model/QuoteItemEntity';
import QuoteItemEntityRelation from '../model/QuoteItemEntityRelation';

/**
* QuoteItem service.
* @module api/QuoteItemApi
* @version 1
*/
export default class QuoteItemApi {

    /**
    * Constructs a new QuoteItemApi. 
    * @alias module:api/QuoteItemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createQuoteItemEntity operation.
     * @callback module:api/QuoteItemApi~createQuoteItemEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteItemEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST for quoteItem
     * Add quoteItem into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/QuoteItemEntity} body Add quoteItem into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/QuoteItemApi~createQuoteItemEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteItemEntityRelation}
     */
    createQuoteItemEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createQuoteItemEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createQuoteItemEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createQuoteItemEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuoteItemEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/quoteItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQuoteItemEntityBulk operation.
     * @callback module:api/QuoteItemApi~createQuoteItemEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST bulk  for quoteItem
     * Add quoteItem into the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body Add quoteItem into the system
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/QuoteItemApi~createQuoteItemEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    createQuoteItemEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling createQuoteItemEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling createQuoteItemEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createQuoteItemEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuoteItemCollectionBulk operation.
     * @callback module:api/QuoteItemApi~deleteQuoteItemCollectionBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE bulk  for quoteItem
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {module:api/QuoteItemApi~deleteQuoteItemCollectionBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntity}
     */
    deleteQuoteItemCollectionBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteQuoteItemCollectionBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteQuoteItemCollectionBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteQuoteItemCollectionBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntity;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/bulk', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuoteItemEntity operation.
     * @callback module:api/QuoteItemApi~deleteQuoteItemEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE for quoteItem
     * Delete quoteItem information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} quoteItemId Quote Item Identifier
     * @param {module:api/QuoteItemApi~deleteQuoteItemEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteQuoteItemEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, quoteItemId, callback) {
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling deleteQuoteItemEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling deleteQuoteItemEntity");
      }
      // verify the required parameter 'quoteItemId' is set
      if (quoteItemId === undefined || quoteItemId === null) {
        throw new Error("Missing the required parameter 'quoteItemId' when calling deleteQuoteItemEntity");
      }

      let pathParams = {
        'quoteItem_id': quoteItemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/{quoteItem_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteItemAggregate operation.
     * @callback module:api/QuoteItemApi~getQuoteItemAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AGGREGATE for quoteItem
     * Returns aggregate for quoteItems
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [filter] Filter
     * @param {String} [pipeline] Pipeline
     * @param {module:api/QuoteItemApi~getQuoteItemAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    getQuoteItemAggregate(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getQuoteItemAggregate");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getQuoteItemAggregate");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'pipeline': opts['pipeline']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteItemCollection operation.
     * @callback module:api/QuoteItemApi~getQuoteItemCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuoteItemEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for quoteItem
     * Returns all quoteItems from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {Number} [pageSize] Amount of results (default: 25)
     * @param {Number} [page] Page to show (default: 1)
     * @param {String} [filter] Filter
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {String} [sort] Specifies ascending or descending sort on existing fields
     * @param {module:model/String} [unique] Find all unique values for selected field
     * @param {module:api/QuoteItemApi~getQuoteItemCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuoteItemEntity>}
     */
    getQuoteItemCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getQuoteItemCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getQuoteItemCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'expand': opts['expand'],
        'fields': opts['fields'],
        'sort': opts['sort'],
        'unique': opts['unique']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [QuoteItemEntity];
      return this.apiClient.callApi(
        '/application/entity/quoteItem/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteItemCountCollection operation.
     * @callback module:api/QuoteItemApi~getQuoteItemCountCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Count} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * COUNT for quoteItem
     * Count all quoteItems from the system
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [filter] Filter
     * @param {module:api/QuoteItemApi~getQuoteItemCountCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Count}
     */
    getQuoteItemCountCollection(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getQuoteItemCountCollection");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getQuoteItemCountCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Count;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteItemDescribe operation.
     * @callback module:api/QuoteItemApi~getQuoteItemDescribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteItemDescribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DESCRIBE for quoteItem
     * Returns describe for quoteItems
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/QuoteItemApi~getQuoteItemDescribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteItemDescribe}
     */
    getQuoteItemDescribe(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getQuoteItemDescribe");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getQuoteItemDescribe");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuoteItemDescribe;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/describe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteItemEntity operation.
     * @callback module:api/QuoteItemApi~getQuoteItemEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteItemEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET for quoteItem
     * Return quoteItem information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} quoteItemId Quote Item Identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {module:model/String} [xAPI2CRMDATAENABLE] Data Enable
     * @param {module:model/String} [xAPI2CRMDATABUILD] Data Build
     * @param {module:model/String} [xAPI2CRMDATAISFINAL] Data Is Final
     * @param {module:model/String} [xAPI2CRMDATASTRATEGY] Data Strategy
     * @param {String} [xAPI2CRMDATACOHERENTENTITIES] Coherent Entities
     * @param {module:model/String} [xAPI2CRMDATAALWAYSACTUAL] Data Is Actual
     * @param {Date} [xAPI2CRMDATAACTUALAT] Data Actual At
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {String} [expand] Expand relations
     * @param {String} [fields] Comma-separated list of fields to include in the response
     * @param {module:api/QuoteItemApi~getQuoteItemEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteItemEntity}
     */
    getQuoteItemEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, quoteItemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling getQuoteItemEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling getQuoteItemEntity");
      }
      // verify the required parameter 'quoteItemId' is set
      if (quoteItemId === undefined || quoteItemId === null) {
        throw new Error("Missing the required parameter 'quoteItemId' when calling getQuoteItemEntity");
      }

      let pathParams = {
        'quoteItem_id': quoteItemId
      };
      let queryParams = {
        'expand': opts['expand'],
        'fields': opts['fields']
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DATA-ENABLE': opts['xAPI2CRMDATAENABLE'],
        'X-API2CRM-DATA-BUILD': opts['xAPI2CRMDATABUILD'],
        'X-API2CRM-DATA-IS-FINAL': opts['xAPI2CRMDATAISFINAL'],
        'X-API2CRM-DATA-STRATEGY': opts['xAPI2CRMDATASTRATEGY'],
        'X-API2CRM-DATA-COHERENT-ENTITIES': opts['xAPI2CRMDATACOHERENTENTITIES'],
        'X-API2CRM-DATA-ALWAYS-ACTUAL': opts['xAPI2CRMDATAALWAYSACTUAL'],
        'X-API2CRM-DATA-ACTUAL-AT': opts['xAPI2CRMDATAACTUALAT'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuoteItemEntity;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/{quoteItem_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuoteItemEntity operation.
     * @callback module:api/QuoteItemApi~updateQuoteItemEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteItemEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT for quoteItem
     * Update quoteItem information
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {String} quoteItemId Quote Item Identifier
     * @param {module:model/QuoteItemEntity} body Update quoteItem information
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/QuoteItemApi~updateQuoteItemEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteItemEntityRelation}
     */
    updateQuoteItemEntity(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, quoteItemId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateQuoteItemEntity");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateQuoteItemEntity");
      }
      // verify the required parameter 'quoteItemId' is set
      if (quoteItemId === undefined || quoteItemId === null) {
        throw new Error("Missing the required parameter 'quoteItemId' when calling updateQuoteItemEntity");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateQuoteItemEntity");
      }

      let pathParams = {
        'quoteItem_id': quoteItemId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuoteItemEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/{quoteItem_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuoteItemEntityBulk operation.
     * @callback module:api/QuoteItemApi~updateQuoteItemEntityBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT bulk  for quoteItem
     * @param {String} xAPI2CRMUSERKEY User Key
     * @param {String} xAPI2CRMAPPLICATIONKEY Application Key
     * @param {module:model/BulkEntity} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xAPI2CRMNATIVEENABLE] Return native response
     * @param {String} [xAPI2CRMDESCRIBELIFETIME] Describe lifetime
     * @param {module:api/QuoteItemApi~updateQuoteItemEntityBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEntityRelation}
     */
    updateQuoteItemEntityBulk(xAPI2CRMUSERKEY, xAPI2CRMAPPLICATIONKEY, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAPI2CRMUSERKEY' is set
      if (xAPI2CRMUSERKEY === undefined || xAPI2CRMUSERKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMUSERKEY' when calling updateQuoteItemEntityBulk");
      }
      // verify the required parameter 'xAPI2CRMAPPLICATIONKEY' is set
      if (xAPI2CRMAPPLICATIONKEY === undefined || xAPI2CRMAPPLICATIONKEY === null) {
        throw new Error("Missing the required parameter 'xAPI2CRMAPPLICATIONKEY' when calling updateQuoteItemEntityBulk");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateQuoteItemEntityBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API2CRM-USER-KEY': xAPI2CRMUSERKEY,
        'X-API2CRM-APPLICATION-KEY': xAPI2CRMAPPLICATIONKEY,
        'X-API2CRM-NATIVE-ENABLE': opts['xAPI2CRMNATIVEENABLE'],
        'X-API2CRM-DESCRIBE-LIFETIME': opts['xAPI2CRMDESCRIBELIFETIME']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEntityRelation;
      return this.apiClient.callApi(
        '/application/entity/quoteItem/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
