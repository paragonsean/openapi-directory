/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.OpportunityProductApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OpportunityProductApi', function() {
    describe('createOpportunityProductEntity', function() {
      it('should call createOpportunityProductEntity successfully', function(done) {
        //uncomment below and update the code to test createOpportunityProductEntity
        //instance.createOpportunityProductEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOpportunityProductEntityBulk', function() {
      it('should call createOpportunityProductEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createOpportunityProductEntityBulk
        //instance.createOpportunityProductEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOpportunityProductCollectionBulk', function() {
      it('should call deleteOpportunityProductCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteOpportunityProductCollectionBulk
        //instance.deleteOpportunityProductCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOpportunityProductEntity', function() {
      it('should call deleteOpportunityProductEntity successfully', function(done) {
        //uncomment below and update the code to test deleteOpportunityProductEntity
        //instance.deleteOpportunityProductEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOpportunityProductAggregate', function() {
      it('should call getOpportunityProductAggregate successfully', function(done) {
        //uncomment below and update the code to test getOpportunityProductAggregate
        //instance.getOpportunityProductAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOpportunityProductCollection', function() {
      it('should call getOpportunityProductCollection successfully', function(done) {
        //uncomment below and update the code to test getOpportunityProductCollection
        //instance.getOpportunityProductCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOpportunityProductCountCollection', function() {
      it('should call getOpportunityProductCountCollection successfully', function(done) {
        //uncomment below and update the code to test getOpportunityProductCountCollection
        //instance.getOpportunityProductCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOpportunityProductDescribe', function() {
      it('should call getOpportunityProductDescribe successfully', function(done) {
        //uncomment below and update the code to test getOpportunityProductDescribe
        //instance.getOpportunityProductDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOpportunityProductEntity', function() {
      it('should call getOpportunityProductEntity successfully', function(done) {
        //uncomment below and update the code to test getOpportunityProductEntity
        //instance.getOpportunityProductEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOpportunityProductEntity', function() {
      it('should call updateOpportunityProductEntity successfully', function(done) {
        //uncomment below and update the code to test updateOpportunityProductEntity
        //instance.updateOpportunityProductEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOpportunityProductEntityBulk', function() {
      it('should call updateOpportunityProductEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateOpportunityProductEntityBulk
        //instance.updateOpportunityProductEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
