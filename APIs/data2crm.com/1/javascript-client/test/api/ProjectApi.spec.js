/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.ProjectApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectApi', function() {
    describe('createProjectEntity', function() {
      it('should call createProjectEntity successfully', function(done) {
        //uncomment below and update the code to test createProjectEntity
        //instance.createProjectEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProjectEntityBulk', function() {
      it('should call createProjectEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createProjectEntityBulk
        //instance.createProjectEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProjectCollectionBulk', function() {
      it('should call deleteProjectCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteProjectCollectionBulk
        //instance.deleteProjectCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProjectEntity', function() {
      it('should call deleteProjectEntity successfully', function(done) {
        //uncomment below and update the code to test deleteProjectEntity
        //instance.deleteProjectEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectAggregate', function() {
      it('should call getProjectAggregate successfully', function(done) {
        //uncomment below and update the code to test getProjectAggregate
        //instance.getProjectAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectCollection', function() {
      it('should call getProjectCollection successfully', function(done) {
        //uncomment below and update the code to test getProjectCollection
        //instance.getProjectCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectCountCollection', function() {
      it('should call getProjectCountCollection successfully', function(done) {
        //uncomment below and update the code to test getProjectCountCollection
        //instance.getProjectCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectDescribe', function() {
      it('should call getProjectDescribe successfully', function(done) {
        //uncomment below and update the code to test getProjectDescribe
        //instance.getProjectDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectEntity', function() {
      it('should call getProjectEntity successfully', function(done) {
        //uncomment below and update the code to test getProjectEntity
        //instance.getProjectEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectEntity', function() {
      it('should call updateProjectEntity successfully', function(done) {
        //uncomment below and update the code to test updateProjectEntity
        //instance.updateProjectEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectEntityBulk', function() {
      it('should call updateProjectEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateProjectEntityBulk
        //instance.updateProjectEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
