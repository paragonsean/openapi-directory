/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.CommentApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CommentApi', function() {
    describe('createCommentEntity', function() {
      it('should call createCommentEntity successfully', function(done) {
        //uncomment below and update the code to test createCommentEntity
        //instance.createCommentEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCommentEntityBulk', function() {
      it('should call createCommentEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createCommentEntityBulk
        //instance.createCommentEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCommentCollectionBulk', function() {
      it('should call deleteCommentCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteCommentCollectionBulk
        //instance.deleteCommentCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCommentEntity', function() {
      it('should call deleteCommentEntity successfully', function(done) {
        //uncomment below and update the code to test deleteCommentEntity
        //instance.deleteCommentEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCommentAggregate', function() {
      it('should call getCommentAggregate successfully', function(done) {
        //uncomment below and update the code to test getCommentAggregate
        //instance.getCommentAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCommentCollection', function() {
      it('should call getCommentCollection successfully', function(done) {
        //uncomment below and update the code to test getCommentCollection
        //instance.getCommentCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCommentCountCollection', function() {
      it('should call getCommentCountCollection successfully', function(done) {
        //uncomment below and update the code to test getCommentCountCollection
        //instance.getCommentCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCommentDescribe', function() {
      it('should call getCommentDescribe successfully', function(done) {
        //uncomment below and update the code to test getCommentDescribe
        //instance.getCommentDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCommentEntity', function() {
      it('should call getCommentEntity successfully', function(done) {
        //uncomment below and update the code to test getCommentEntity
        //instance.getCommentEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCommentEntity', function() {
      it('should call updateCommentEntity successfully', function(done) {
        //uncomment below and update the code to test updateCommentEntity
        //instance.updateCommentEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCommentEntityBulk', function() {
      it('should call updateCommentEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateCommentEntityBulk
        //instance.updateCommentEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
