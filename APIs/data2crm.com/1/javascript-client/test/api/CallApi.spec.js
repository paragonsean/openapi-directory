/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.CallApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CallApi', function() {
    describe('createCallEntity', function() {
      it('should call createCallEntity successfully', function(done) {
        //uncomment below and update the code to test createCallEntity
        //instance.createCallEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCallEntityBulk', function() {
      it('should call createCallEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createCallEntityBulk
        //instance.createCallEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCallCollectionBulk', function() {
      it('should call deleteCallCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteCallCollectionBulk
        //instance.deleteCallCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCallEntity', function() {
      it('should call deleteCallEntity successfully', function(done) {
        //uncomment below and update the code to test deleteCallEntity
        //instance.deleteCallEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCallAggregate', function() {
      it('should call getCallAggregate successfully', function(done) {
        //uncomment below and update the code to test getCallAggregate
        //instance.getCallAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCallCollection', function() {
      it('should call getCallCollection successfully', function(done) {
        //uncomment below and update the code to test getCallCollection
        //instance.getCallCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCallCountCollection', function() {
      it('should call getCallCountCollection successfully', function(done) {
        //uncomment below and update the code to test getCallCountCollection
        //instance.getCallCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCallDescribe', function() {
      it('should call getCallDescribe successfully', function(done) {
        //uncomment below and update the code to test getCallDescribe
        //instance.getCallDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCallEntity', function() {
      it('should call getCallEntity successfully', function(done) {
        //uncomment below and update the code to test getCallEntity
        //instance.getCallEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCallEntity', function() {
      it('should call updateCallEntity successfully', function(done) {
        //uncomment below and update the code to test updateCallEntity
        //instance.updateCallEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCallEntityBulk', function() {
      it('should call updateCallEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateCallEntityBulk
        //instance.updateCallEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
