/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.CaseApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CaseApi', function() {
    describe('createCaseEntity', function() {
      it('should call createCaseEntity successfully', function(done) {
        //uncomment below and update the code to test createCaseEntity
        //instance.createCaseEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCaseEntityBulk', function() {
      it('should call createCaseEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createCaseEntityBulk
        //instance.createCaseEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCaseCollectionBulk', function() {
      it('should call deleteCaseCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteCaseCollectionBulk
        //instance.deleteCaseCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCaseEntity', function() {
      it('should call deleteCaseEntity successfully', function(done) {
        //uncomment below and update the code to test deleteCaseEntity
        //instance.deleteCaseEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCaseAggregate', function() {
      it('should call getCaseAggregate successfully', function(done) {
        //uncomment below and update the code to test getCaseAggregate
        //instance.getCaseAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCaseCollection', function() {
      it('should call getCaseCollection successfully', function(done) {
        //uncomment below and update the code to test getCaseCollection
        //instance.getCaseCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCaseCountCollection', function() {
      it('should call getCaseCountCollection successfully', function(done) {
        //uncomment below and update the code to test getCaseCountCollection
        //instance.getCaseCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCaseDescribe', function() {
      it('should call getCaseDescribe successfully', function(done) {
        //uncomment below and update the code to test getCaseDescribe
        //instance.getCaseDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCaseEntity', function() {
      it('should call getCaseEntity successfully', function(done) {
        //uncomment below and update the code to test getCaseEntity
        //instance.getCaseEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCaseEntity', function() {
      it('should call updateCaseEntity successfully', function(done) {
        //uncomment below and update the code to test updateCaseEntity
        //instance.updateCaseEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCaseEntityBulk', function() {
      it('should call updateCaseEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateCaseEntityBulk
        //instance.updateCaseEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
