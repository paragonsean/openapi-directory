/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.LeadApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LeadApi', function() {
    describe('createLeadEntity', function() {
      it('should call createLeadEntity successfully', function(done) {
        //uncomment below and update the code to test createLeadEntity
        //instance.createLeadEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLeadEntityBulk', function() {
      it('should call createLeadEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createLeadEntityBulk
        //instance.createLeadEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLeadCollectionBulk', function() {
      it('should call deleteLeadCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteLeadCollectionBulk
        //instance.deleteLeadCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLeadEntity', function() {
      it('should call deleteLeadEntity successfully', function(done) {
        //uncomment below and update the code to test deleteLeadEntity
        //instance.deleteLeadEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLeadAggregate', function() {
      it('should call getLeadAggregate successfully', function(done) {
        //uncomment below and update the code to test getLeadAggregate
        //instance.getLeadAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLeadCollection', function() {
      it('should call getLeadCollection successfully', function(done) {
        //uncomment below and update the code to test getLeadCollection
        //instance.getLeadCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLeadCountCollection', function() {
      it('should call getLeadCountCollection successfully', function(done) {
        //uncomment below and update the code to test getLeadCountCollection
        //instance.getLeadCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLeadDescribe', function() {
      it('should call getLeadDescribe successfully', function(done) {
        //uncomment below and update the code to test getLeadDescribe
        //instance.getLeadDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLeadEntity', function() {
      it('should call getLeadEntity successfully', function(done) {
        //uncomment below and update the code to test getLeadEntity
        //instance.getLeadEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLeadEntity', function() {
      it('should call updateLeadEntity successfully', function(done) {
        //uncomment below and update the code to test updateLeadEntity
        //instance.updateLeadEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLeadEntityBulk', function() {
      it('should call updateLeadEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateLeadEntityBulk
        //instance.updateLeadEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
