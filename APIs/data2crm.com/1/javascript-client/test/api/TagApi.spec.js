/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.TagApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TagApi', function() {
    describe('createTagEntity', function() {
      it('should call createTagEntity successfully', function(done) {
        //uncomment below and update the code to test createTagEntity
        //instance.createTagEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTagEntityBulk', function() {
      it('should call createTagEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createTagEntityBulk
        //instance.createTagEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTagCollectionBulk', function() {
      it('should call deleteTagCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteTagCollectionBulk
        //instance.deleteTagCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTagEntity', function() {
      it('should call deleteTagEntity successfully', function(done) {
        //uncomment below and update the code to test deleteTagEntity
        //instance.deleteTagEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagAggregate', function() {
      it('should call getTagAggregate successfully', function(done) {
        //uncomment below and update the code to test getTagAggregate
        //instance.getTagAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagCollection', function() {
      it('should call getTagCollection successfully', function(done) {
        //uncomment below and update the code to test getTagCollection
        //instance.getTagCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagCountCollection', function() {
      it('should call getTagCountCollection successfully', function(done) {
        //uncomment below and update the code to test getTagCountCollection
        //instance.getTagCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagDescribe', function() {
      it('should call getTagDescribe successfully', function(done) {
        //uncomment below and update the code to test getTagDescribe
        //instance.getTagDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTagEntity', function() {
      it('should call getTagEntity successfully', function(done) {
        //uncomment below and update the code to test getTagEntity
        //instance.getTagEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTagEntity', function() {
      it('should call updateTagEntity successfully', function(done) {
        //uncomment below and update the code to test updateTagEntity
        //instance.updateTagEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTagEntityBulk', function() {
      it('should call updateTagEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateTagEntityBulk
        //instance.updateTagEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
