/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.NoteApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NoteApi', function() {
    describe('createNoteEntity', function() {
      it('should call createNoteEntity successfully', function(done) {
        //uncomment below and update the code to test createNoteEntity
        //instance.createNoteEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNoteEntityBulk', function() {
      it('should call createNoteEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createNoteEntityBulk
        //instance.createNoteEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNoteCollectionBulk', function() {
      it('should call deleteNoteCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteNoteCollectionBulk
        //instance.deleteNoteCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNoteEntity', function() {
      it('should call deleteNoteEntity successfully', function(done) {
        //uncomment below and update the code to test deleteNoteEntity
        //instance.deleteNoteEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNoteAggregate', function() {
      it('should call getNoteAggregate successfully', function(done) {
        //uncomment below and update the code to test getNoteAggregate
        //instance.getNoteAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNoteCollection', function() {
      it('should call getNoteCollection successfully', function(done) {
        //uncomment below and update the code to test getNoteCollection
        //instance.getNoteCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNoteCountCollection', function() {
      it('should call getNoteCountCollection successfully', function(done) {
        //uncomment below and update the code to test getNoteCountCollection
        //instance.getNoteCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNoteDescribe', function() {
      it('should call getNoteDescribe successfully', function(done) {
        //uncomment below and update the code to test getNoteDescribe
        //instance.getNoteDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNoteEntity', function() {
      it('should call getNoteEntity successfully', function(done) {
        //uncomment below and update the code to test getNoteEntity
        //instance.getNoteEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNoteEntity', function() {
      it('should call updateNoteEntity successfully', function(done) {
        //uncomment below and update the code to test updateNoteEntity
        //instance.updateNoteEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNoteEntityBulk', function() {
      it('should call updateNoteEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateNoteEntityBulk
        //instance.updateNoteEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
