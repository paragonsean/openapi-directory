/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.EmailApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EmailApi', function() {
    describe('createEmailEntity', function() {
      it('should call createEmailEntity successfully', function(done) {
        //uncomment below and update the code to test createEmailEntity
        //instance.createEmailEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEmailEntityBulk', function() {
      it('should call createEmailEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createEmailEntityBulk
        //instance.createEmailEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEmailCollectionBulk', function() {
      it('should call deleteEmailCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteEmailCollectionBulk
        //instance.deleteEmailCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEmailEntity', function() {
      it('should call deleteEmailEntity successfully', function(done) {
        //uncomment below and update the code to test deleteEmailEntity
        //instance.deleteEmailEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmailAggregate', function() {
      it('should call getEmailAggregate successfully', function(done) {
        //uncomment below and update the code to test getEmailAggregate
        //instance.getEmailAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmailCollection', function() {
      it('should call getEmailCollection successfully', function(done) {
        //uncomment below and update the code to test getEmailCollection
        //instance.getEmailCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmailCountCollection', function() {
      it('should call getEmailCountCollection successfully', function(done) {
        //uncomment below and update the code to test getEmailCountCollection
        //instance.getEmailCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmailDescribe', function() {
      it('should call getEmailDescribe successfully', function(done) {
        //uncomment below and update the code to test getEmailDescribe
        //instance.getEmailDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmailEntity', function() {
      it('should call getEmailEntity successfully', function(done) {
        //uncomment below and update the code to test getEmailEntity
        //instance.getEmailEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEmailEntity', function() {
      it('should call updateEmailEntity successfully', function(done) {
        //uncomment below and update the code to test updateEmailEntity
        //instance.updateEmailEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEmailEntityBulk', function() {
      it('should call updateEmailEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateEmailEntityBulk
        //instance.updateEmailEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
