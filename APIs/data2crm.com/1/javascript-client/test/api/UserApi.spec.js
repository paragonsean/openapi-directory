/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.UserApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserApi', function() {
    describe('createUserEntity', function() {
      it('should call createUserEntity successfully', function(done) {
        //uncomment below and update the code to test createUserEntity
        //instance.createUserEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUserEntityBulk', function() {
      it('should call createUserEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createUserEntityBulk
        //instance.createUserEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUserCollectionBulk', function() {
      it('should call deleteUserCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteUserCollectionBulk
        //instance.deleteUserCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUserEntity', function() {
      it('should call deleteUserEntity successfully', function(done) {
        //uncomment below and update the code to test deleteUserEntity
        //instance.deleteUserEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserAggregate', function() {
      it('should call getUserAggregate successfully', function(done) {
        //uncomment below and update the code to test getUserAggregate
        //instance.getUserAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserCollection', function() {
      it('should call getUserCollection successfully', function(done) {
        //uncomment below and update the code to test getUserCollection
        //instance.getUserCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserCountCollection', function() {
      it('should call getUserCountCollection successfully', function(done) {
        //uncomment below and update the code to test getUserCountCollection
        //instance.getUserCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserDescribe', function() {
      it('should call getUserDescribe successfully', function(done) {
        //uncomment below and update the code to test getUserDescribe
        //instance.getUserDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserEntity', function() {
      it('should call getUserEntity successfully', function(done) {
        //uncomment below and update the code to test getUserEntity
        //instance.getUserEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserEntity', function() {
      it('should call updateUserEntity successfully', function(done) {
        //uncomment below and update the code to test updateUserEntity
        //instance.updateUserEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserEntityBulk', function() {
      it('should call updateUserEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateUserEntityBulk
        //instance.updateUserEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
