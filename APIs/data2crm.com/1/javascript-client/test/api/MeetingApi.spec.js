/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Data2CrmApi);
  }
}(this, function(expect, Data2CrmApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Data2CrmApi.MeetingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MeetingApi', function() {
    describe('createMeetingEntity', function() {
      it('should call createMeetingEntity successfully', function(done) {
        //uncomment below and update the code to test createMeetingEntity
        //instance.createMeetingEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMeetingEntityBulk', function() {
      it('should call createMeetingEntityBulk successfully', function(done) {
        //uncomment below and update the code to test createMeetingEntityBulk
        //instance.createMeetingEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMeetingCollectionBulk', function() {
      it('should call deleteMeetingCollectionBulk successfully', function(done) {
        //uncomment below and update the code to test deleteMeetingCollectionBulk
        //instance.deleteMeetingCollectionBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMeetingEntity', function() {
      it('should call deleteMeetingEntity successfully', function(done) {
        //uncomment below and update the code to test deleteMeetingEntity
        //instance.deleteMeetingEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingAggregate', function() {
      it('should call getMeetingAggregate successfully', function(done) {
        //uncomment below and update the code to test getMeetingAggregate
        //instance.getMeetingAggregate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingCollection', function() {
      it('should call getMeetingCollection successfully', function(done) {
        //uncomment below and update the code to test getMeetingCollection
        //instance.getMeetingCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingCountCollection', function() {
      it('should call getMeetingCountCollection successfully', function(done) {
        //uncomment below and update the code to test getMeetingCountCollection
        //instance.getMeetingCountCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingDescribe', function() {
      it('should call getMeetingDescribe successfully', function(done) {
        //uncomment below and update the code to test getMeetingDescribe
        //instance.getMeetingDescribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingEntity', function() {
      it('should call getMeetingEntity successfully', function(done) {
        //uncomment below and update the code to test getMeetingEntity
        //instance.getMeetingEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeetingEntity', function() {
      it('should call updateMeetingEntity successfully', function(done) {
        //uncomment below and update the code to test updateMeetingEntity
        //instance.updateMeetingEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeetingEntityBulk', function() {
      it('should call updateMeetingEntityBulk successfully', function(done) {
        //uncomment below and update the code to test updateMeetingEntityBulk
        //instance.updateMeetingEntityBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
