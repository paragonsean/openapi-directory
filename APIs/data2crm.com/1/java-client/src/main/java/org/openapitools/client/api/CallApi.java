/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Aggregate;
import org.openapitools.client.model.BulkEntity;
import org.openapitools.client.model.BulkEntityRelation;
import org.openapitools.client.model.CallDescribe;
import org.openapitools.client.model.CallEntity;
import org.openapitools.client.model.CallEntityRelation;
import org.openapitools.client.model.Count;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCallEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add call into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCallEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/call";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCallEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createCallEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createCallEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCallEntity(Async)");
        }

        return createCallEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST for call
     * Add call into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add call into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return CallEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CallEntityRelation createCallEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<CallEntityRelation> localVarResp = createCallEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST for call
     * Add call into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add call into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;CallEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallEntityRelation> createCallEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createCallEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<CallEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST for call (asynchronously)
     * Add call into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add call into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCallEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<CallEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCallEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<CallEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCallEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add call into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCallEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/call/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCallEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createCallEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createCallEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCallEntityBulk(Async)");
        }

        return createCallEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST bulk  for call
     * Add call into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add call into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation createCallEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = createCallEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST bulk  for call
     * Add call into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add call into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> createCallEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createCallEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST bulk  for call (asynchronously)
     * Add call into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add call into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCallEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCallEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCallCollectionBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCallCollectionBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/call/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCallCollectionBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteCallCollectionBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteCallCollectionBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteCallCollectionBulk(Async)");
        }

        return deleteCallCollectionBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);

    }

    /**
     * DELETE bulk  for call
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return BulkEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntity deleteCallCollectionBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        ApiResponse<BulkEntity> localVarResp = deleteCallCollectionBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body);
        return localVarResp.getData();
    }

    /**
     * DELETE bulk  for call
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;BulkEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntity> deleteCallCollectionBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        okhttp3.Call localVarCall = deleteCallCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, null);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DELETE bulk  for call (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCallCollectionBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback<BulkEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCallCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCallEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCallEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/call/{call_id}"
            .replace("{" + "call_id" + "}", localVarApiClient.escapeString(callId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCallEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteCallEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteCallEntity(Async)");
        }

        // verify the required parameter 'callId' is set
        if (callId == null) {
            throw new ApiException("Missing the required parameter 'callId' when calling deleteCallEntity(Async)");
        }

        return deleteCallEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, _callback);

    }

    /**
     * DELETE for call
     * Delete call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCallEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId) throws ApiException {
        deleteCallEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId);
    }

    /**
     * DELETE for call
     * Delete call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCallEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId) throws ApiException {
        okhttp3.Call localVarCall = deleteCallEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * DELETE for call (asynchronously)
     * Delete call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCallEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCallEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCallAggregate
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallAggregateCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/call/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pipeline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pipeline", pipeline));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallAggregateValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getCallAggregate(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getCallAggregate(Async)");
        }

        return getCallAggregateCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);

    }

    /**
     * AGGREGATE for call
     * Returns aggregate for calls
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate getCallAggregate(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        ApiResponse<Aggregate> localVarResp = getCallAggregateWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline);
        return localVarResp.getData();
    }

    /**
     * AGGREGATE for call
     * Returns aggregate for calls
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> getCallAggregateWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getCallAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AGGREGATE for call (asynchronously)
     * Returns aggregate for calls
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallAggregateAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCallCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/call/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unique", unique));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getCallCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getCallCollection(Async)");
        }

        return getCallCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);

    }

    /**
     * GET for call
     * Returns all calls from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return List&lt;CallEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<CallEntity> getCallCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        ApiResponse<List<CallEntity>> localVarResp = getCallCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique);
        return localVarResp.getData();
    }

    /**
     * GET for call
     * Returns all calls from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return ApiResponse&lt;List&lt;CallEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CallEntity>> getCallCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        okhttp3.Call localVarCall = getCallCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, null);
        Type localVarReturnType = new TypeToken<List<CallEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for call (asynchronously)
     * Returns all calls from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback<List<CallEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);
        Type localVarReturnType = new TypeToken<List<CallEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCallCountCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallCountCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/call/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallCountCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getCallCountCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getCallCountCollection(Async)");
        }

        return getCallCountCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);

    }

    /**
     * COUNT for call
     * Count all calls from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return Count
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Count getCallCountCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        ApiResponse<Count> localVarResp = getCallCountCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter);
        return localVarResp.getData();
    }

    /**
     * COUNT for call
     * Count all calls from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;Count&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Count> getCallCountCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCallCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, null);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * COUNT for call (asynchronously)
     * Count all calls from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallCountCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback<Count> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCallDescribe
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallDescribeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/call/describe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallDescribeValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getCallDescribe(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getCallDescribe(Async)");
        }

        return getCallDescribeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * DESCRIBE for call
     * Returns describe for calls
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return CallDescribe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CallDescribe getCallDescribe(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<CallDescribe> localVarResp = getCallDescribeWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * DESCRIBE for call
     * Returns describe for calls
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;CallDescribe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallDescribe> getCallDescribeWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = getCallDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<CallDescribe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DESCRIBE for call (asynchronously)
     * Returns describe for calls
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallDescribeAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<CallDescribe> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<CallDescribe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCallEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/call/{call_id}"
            .replace("{" + "call_id" + "}", localVarApiClient.escapeString(callId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getCallEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getCallEntity(Async)");
        }

        // verify the required parameter 'callId' is set
        if (callId == null) {
            throw new ApiException("Missing the required parameter 'callId' when calling getCallEntity(Async)");
        }

        return getCallEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);

    }

    /**
     * GET for call
     * Return call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return CallEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CallEntity getCallEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        ApiResponse<CallEntity> localVarResp = getCallEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields);
        return localVarResp.getData();
    }

    /**
     * GET for call
     * Return call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return ApiResponse&lt;CallEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallEntity> getCallEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCallEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, null);
        Type localVarReturnType = new TypeToken<CallEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for call (asynchronously)
     * Return call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback<CallEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);
        Type localVarReturnType = new TypeToken<CallEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCallEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param body Update call information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/call/{call_id}"
            .replace("{" + "call_id" + "}", localVarApiClient.escapeString(callId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCallEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateCallEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateCallEntity(Async)");
        }

        // verify the required parameter 'callId' is set
        if (callId == null) {
            throw new ApiException("Missing the required parameter 'callId' when calling updateCallEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCallEntity(Async)");
        }

        return updateCallEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT for call
     * Update call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param body Update call information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return CallEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CallEntityRelation updateCallEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<CallEntityRelation> localVarResp = updateCallEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT for call
     * Update call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param body Update call information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;CallEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallEntityRelation> updateCallEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateCallEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<CallEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT for call (asynchronously)
     * Update call information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param callId Call Identifier (required)
     * @param body Update call information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String callId, CallEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<CallEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCallEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, callId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<CallEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCallEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/call/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCallEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateCallEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateCallEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCallEntityBulk(Async)");
        }

        return updateCallEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT bulk  for call
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation updateCallEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = updateCallEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT bulk  for call
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> updateCallEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateCallEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT bulk  for call (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCallEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
