/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Aggregate;
import org.openapitools.client.model.AttachmentDescribe;
import org.openapitools.client.model.AttachmentEntity;
import org.openapitools.client.model.AttachmentEntityList;
import org.openapitools.client.model.AttachmentEntityRelation;
import org.openapitools.client.model.AttachmentEntityWrite;
import org.openapitools.client.model.BulkEntity;
import org.openapitools.client.model.BulkEntityRelation;
import org.openapitools.client.model.Count;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttachmentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttachmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttachmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAttachmentEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add attachment into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAttachmentEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAttachmentEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createAttachmentEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createAttachmentEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAttachmentEntity(Async)");
        }

        return createAttachmentEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST for attachment
     * Add attachment into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add attachment into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return AttachmentEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public AttachmentEntityRelation createAttachmentEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<AttachmentEntityRelation> localVarResp = createAttachmentEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST for attachment
     * Add attachment into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add attachment into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;AttachmentEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachmentEntityRelation> createAttachmentEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createAttachmentEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<AttachmentEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST for attachment (asynchronously)
     * Add attachment into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add attachment into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAttachmentEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<AttachmentEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAttachmentEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<AttachmentEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAttachmentEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add attachment into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAttachmentEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAttachmentEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createAttachmentEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createAttachmentEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAttachmentEntityBulk(Async)");
        }

        return createAttachmentEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST bulk  for attachment
     * Add attachment into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add attachment into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation createAttachmentEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = createAttachmentEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST bulk  for attachment
     * Add attachment into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add attachment into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> createAttachmentEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createAttachmentEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST bulk  for attachment (asynchronously)
     * Add attachment into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add attachment into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAttachmentEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAttachmentEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttachmentCollectionBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttachmentCollectionBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttachmentCollectionBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteAttachmentCollectionBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteAttachmentCollectionBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteAttachmentCollectionBulk(Async)");
        }

        return deleteAttachmentCollectionBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);

    }

    /**
     * DELETE bulk  for attachment
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return BulkEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntity deleteAttachmentCollectionBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        ApiResponse<BulkEntity> localVarResp = deleteAttachmentCollectionBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body);
        return localVarResp.getData();
    }

    /**
     * DELETE bulk  for attachment
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;BulkEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntity> deleteAttachmentCollectionBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        okhttp3.Call localVarCall = deleteAttachmentCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, null);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DELETE bulk  for attachment (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttachmentCollectionBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback<BulkEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttachmentCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttachmentEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttachmentEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/{attachment_id}"
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttachmentEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteAttachmentEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteAttachmentEntity(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling deleteAttachmentEntity(Async)");
        }

        return deleteAttachmentEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, _callback);

    }

    /**
     * DELETE for attachment
     * Delete attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAttachmentEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId) throws ApiException {
        deleteAttachmentEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId);
    }

    /**
     * DELETE for attachment
     * Delete attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAttachmentEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteAttachmentEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * DELETE for attachment (asynchronously)
     * Delete attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttachmentEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttachmentEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentAggregate
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentAggregateCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pipeline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pipeline", pipeline));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentAggregateValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getAttachmentAggregate(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getAttachmentAggregate(Async)");
        }

        return getAttachmentAggregateCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);

    }

    /**
     * AGGREGATE for attachment
     * Returns aggregate for attachments
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate getAttachmentAggregate(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        ApiResponse<Aggregate> localVarResp = getAttachmentAggregateWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline);
        return localVarResp.getData();
    }

    /**
     * AGGREGATE for attachment
     * Returns aggregate for attachments
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> getAttachmentAggregateWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AGGREGATE for attachment (asynchronously)
     * Returns aggregate for attachments
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentAggregateAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unique", unique));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getAttachmentCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getAttachmentCollection(Async)");
        }

        return getAttachmentCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);

    }

    /**
     * GET for attachment
     * Returns all attachments from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return List&lt;AttachmentEntityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<AttachmentEntityList> getAttachmentCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        ApiResponse<List<AttachmentEntityList>> localVarResp = getAttachmentCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique);
        return localVarResp.getData();
    }

    /**
     * GET for attachment
     * Returns all attachments from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return ApiResponse&lt;List&lt;AttachmentEntityList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttachmentEntityList>> getAttachmentCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, null);
        Type localVarReturnType = new TypeToken<List<AttachmentEntityList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for attachment (asynchronously)
     * Returns all attachments from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback<List<AttachmentEntityList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);
        Type localVarReturnType = new TypeToken<List<AttachmentEntityList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentCountCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentCountCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentCountCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getAttachmentCountCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getAttachmentCountCollection(Async)");
        }

        return getAttachmentCountCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);

    }

    /**
     * COUNT for attachment
     * Count all attachments from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return Count
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Count getAttachmentCountCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        ApiResponse<Count> localVarResp = getAttachmentCountCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter);
        return localVarResp.getData();
    }

    /**
     * COUNT for attachment
     * Count all attachments from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;Count&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Count> getAttachmentCountCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, null);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * COUNT for attachment (asynchronously)
     * Count all attachments from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentCountCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback<Count> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentDescribe
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentDescribeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/describe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentDescribeValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getAttachmentDescribe(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getAttachmentDescribe(Async)");
        }

        return getAttachmentDescribeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * DESCRIBE for attachment
     * Returns describe for attachments
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return AttachmentDescribe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AttachmentDescribe getAttachmentDescribe(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<AttachmentDescribe> localVarResp = getAttachmentDescribeWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * DESCRIBE for attachment
     * Returns describe for attachments
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;AttachmentDescribe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachmentDescribe> getAttachmentDescribeWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<AttachmentDescribe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DESCRIBE for attachment (asynchronously)
     * Returns describe for attachments
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentDescribeAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<AttachmentDescribe> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<AttachmentDescribe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/{attachment_id}"
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getAttachmentEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getAttachmentEntity(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getAttachmentEntity(Async)");
        }

        return getAttachmentEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);

    }

    /**
     * GET for attachment
     * Return attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return AttachmentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AttachmentEntity getAttachmentEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        ApiResponse<AttachmentEntity> localVarResp = getAttachmentEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields);
        return localVarResp.getData();
    }

    /**
     * GET for attachment
     * Return attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return ApiResponse&lt;AttachmentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachmentEntity> getAttachmentEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, null);
        Type localVarReturnType = new TypeToken<AttachmentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for attachment (asynchronously)
     * Return attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback<AttachmentEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);
        Type localVarReturnType = new TypeToken<AttachmentEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAttachmentEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param body Update attachment information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttachmentEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/{attachment_id}"
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttachmentEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateAttachmentEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateAttachmentEntity(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling updateAttachmentEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAttachmentEntity(Async)");
        }

        return updateAttachmentEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT for attachment
     * Update attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param body Update attachment information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return AttachmentEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public AttachmentEntityRelation updateAttachmentEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<AttachmentEntityRelation> localVarResp = updateAttachmentEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT for attachment
     * Update attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param body Update attachment information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;AttachmentEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachmentEntityRelation> updateAttachmentEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateAttachmentEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<AttachmentEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT for attachment (asynchronously)
     * Update attachment information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param attachmentId Attachment Identifier (required)
     * @param body Update attachment information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttachmentEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String attachmentId, AttachmentEntityWrite body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<AttachmentEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttachmentEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, attachmentId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<AttachmentEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAttachmentEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttachmentEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/attachment/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttachmentEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateAttachmentEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateAttachmentEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAttachmentEntityBulk(Async)");
        }

        return updateAttachmentEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT bulk  for attachment
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation updateAttachmentEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = updateAttachmentEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT bulk  for attachment
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> updateAttachmentEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateAttachmentEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT bulk  for attachment (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttachmentEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttachmentEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
