/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Cost;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.Relation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductEntity {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<String> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private List<Cost> cost = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private List<Image> image = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_TAXABLE = "is_taxable";
  @SerializedName(SERIALIZED_NAME_IS_TAXABLE)
  private Boolean isTaxable;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private List<Price> price = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUANTITY_IN_DEMAND = "quantity_in_demand";
  @SerializedName(SERIALIZED_NAME_QUANTITY_IN_DEMAND)
  private Float quantityInDemand;

  public static final String SERIALIZED_NAME_QUANTITY_IN_STOCK = "quantity_in_stock";
  @SerializedName(SERIALIZED_NAME_QUANTITY_IN_STOCK)
  private Float quantityInStock;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_REORDER_LEVEL = "reorder_level";
  @SerializedName(SERIALIZED_NAME_REORDER_LEVEL)
  private Float reorderLevel;

  public static final String SERIALIZED_NAME_SALES_ENDED_AT = "sales_ended_at";
  @SerializedName(SERIALIZED_NAME_SALES_ENDED_AT)
  private OffsetDateTime salesEndedAt;

  public static final String SERIALIZED_NAME_SALES_STARTED_AT = "sales_started_at";
  @SerializedName(SERIALIZED_NAME_SALES_STARTED_AT)
  private OffsetDateTime salesStartedAt;

  public static final String SERIALIZED_NAME_SUPPORT_ENDED_AT = "support_ended_at";
  @SerializedName(SERIALIZED_NAME_SUPPORT_ENDED_AT)
  private OffsetDateTime supportEndedAt;

  public static final String SERIALIZED_NAME_SUPPORT_STARTED_AT = "support_started_at";
  @SerializedName(SERIALIZED_NAME_SUPPORT_STARTED_AT)
  private OffsetDateTime supportStartedAt;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public ProductEntity() {
  }

  public ProductEntity category(List<String> category) {
    this.category = category;
    return this;
  }

  public ProductEntity addCategoryItem(String categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Category
   * @return category
   */
  @javax.annotation.Nullable
  public List<String> getCategory() {
    return category;
  }

  public void setCategory(List<String> category) {
    this.category = category;
  }


  public ProductEntity code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ProductEntity cost(List<Cost> cost) {
    this.cost = cost;
    return this;
  }

  public ProductEntity addCostItem(Cost costItem) {
    if (this.cost == null) {
      this.cost = new ArrayList<>();
    }
    this.cost.add(costItem);
    return this;
  }

  /**
   * Cost
   * @return cost
   */
  @javax.annotation.Nullable
  public List<Cost> getCost() {
    return cost;
  }

  public void setCost(List<Cost> cost) {
    this.cost = cost;
  }


  public ProductEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ProductEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProductEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Product Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProductEntity image(List<Image> image) {
    this.image = image;
    return this;
  }

  public ProductEntity addImageItem(Image imageItem) {
    if (this.image == null) {
      this.image = new ArrayList<>();
    }
    this.image.add(imageItem);
    return this;
  }

  /**
   * Image
   * @return image
   */
  @javax.annotation.Nullable
  public List<Image> getImage() {
    return image;
  }

  public void setImage(List<Image> image) {
    this.image = image;
  }


  public ProductEntity isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Is active
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ProductEntity isTaxable(Boolean isTaxable) {
    this.isTaxable = isTaxable;
    return this;
  }

  /**
   * Is taxable
   * @return isTaxable
   */
  @javax.annotation.Nullable
  public Boolean getIsTaxable() {
    return isTaxable;
  }

  public void setIsTaxable(Boolean isTaxable) {
    this.isTaxable = isTaxable;
  }


  public ProductEntity manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public ProductEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProductEntity price(List<Price> price) {
    this.price = price;
    return this;
  }

  public ProductEntity addPriceItem(Price priceItem) {
    if (this.price == null) {
      this.price = new ArrayList<>();
    }
    this.price.add(priceItem);
    return this;
  }

  /**
   * Price
   * @return price
   */
  @javax.annotation.Nullable
  public List<Price> getPrice() {
    return price;
  }

  public void setPrice(List<Price> price) {
    this.price = price;
  }


  public ProductEntity quantityInDemand(Float quantityInDemand) {
    this.quantityInDemand = quantityInDemand;
    return this;
  }

  /**
   * Quantity In Demand
   * @return quantityInDemand
   */
  @javax.annotation.Nullable
  public Float getQuantityInDemand() {
    return quantityInDemand;
  }

  public void setQuantityInDemand(Float quantityInDemand) {
    this.quantityInDemand = quantityInDemand;
  }


  public ProductEntity quantityInStock(Float quantityInStock) {
    this.quantityInStock = quantityInStock;
    return this;
  }

  /**
   * Quantity In Stock
   * @return quantityInStock
   */
  @javax.annotation.Nullable
  public Float getQuantityInStock() {
    return quantityInStock;
  }

  public void setQuantityInStock(Float quantityInStock) {
    this.quantityInStock = quantityInStock;
  }


  public ProductEntity relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public ProductEntity reorderLevel(Float reorderLevel) {
    this.reorderLevel = reorderLevel;
    return this;
  }

  /**
   * Reorder Level
   * @return reorderLevel
   */
  @javax.annotation.Nullable
  public Float getReorderLevel() {
    return reorderLevel;
  }

  public void setReorderLevel(Float reorderLevel) {
    this.reorderLevel = reorderLevel;
  }


  public ProductEntity salesEndedAt(OffsetDateTime salesEndedAt) {
    this.salesEndedAt = salesEndedAt;
    return this;
  }

  /**
   * Sales Ended At
   * @return salesEndedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSalesEndedAt() {
    return salesEndedAt;
  }

  public void setSalesEndedAt(OffsetDateTime salesEndedAt) {
    this.salesEndedAt = salesEndedAt;
  }


  public ProductEntity salesStartedAt(OffsetDateTime salesStartedAt) {
    this.salesStartedAt = salesStartedAt;
    return this;
  }

  /**
   * Sales Started At
   * @return salesStartedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSalesStartedAt() {
    return salesStartedAt;
  }

  public void setSalesStartedAt(OffsetDateTime salesStartedAt) {
    this.salesStartedAt = salesStartedAt;
  }


  public ProductEntity supportEndedAt(OffsetDateTime supportEndedAt) {
    this.supportEndedAt = supportEndedAt;
    return this;
  }

  /**
   * Support Ended At
   * @return supportEndedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSupportEndedAt() {
    return supportEndedAt;
  }

  public void setSupportEndedAt(OffsetDateTime supportEndedAt) {
    this.supportEndedAt = supportEndedAt;
  }


  public ProductEntity supportStartedAt(OffsetDateTime supportStartedAt) {
    this.supportStartedAt = supportStartedAt;
    return this;
  }

  /**
   * Support Started At
   * @return supportStartedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSupportStartedAt() {
    return supportStartedAt;
  }

  public void setSupportStartedAt(OffsetDateTime supportStartedAt) {
    this.supportStartedAt = supportStartedAt;
  }


  public ProductEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ProductEntity unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public ProductEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ProductEntity url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ProductEntity vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * Vendor
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductEntity productEntity = (ProductEntity) o;
    return Objects.equals(this.category, productEntity.category) &&
        Objects.equals(this.code, productEntity.code) &&
        Objects.equals(this.cost, productEntity.cost) &&
        Objects.equals(this.createdAt, productEntity.createdAt) &&
        Objects.equals(this.description, productEntity.description) &&
        Objects.equals(this.id, productEntity.id) &&
        Objects.equals(this.image, productEntity.image) &&
        Objects.equals(this.isActive, productEntity.isActive) &&
        Objects.equals(this.isTaxable, productEntity.isTaxable) &&
        Objects.equals(this.manufacturer, productEntity.manufacturer) &&
        Objects.equals(this.name, productEntity.name) &&
        Objects.equals(this.price, productEntity.price) &&
        Objects.equals(this.quantityInDemand, productEntity.quantityInDemand) &&
        Objects.equals(this.quantityInStock, productEntity.quantityInStock) &&
        Objects.equals(this.relation, productEntity.relation) &&
        Objects.equals(this.reorderLevel, productEntity.reorderLevel) &&
        Objects.equals(this.salesEndedAt, productEntity.salesEndedAt) &&
        Objects.equals(this.salesStartedAt, productEntity.salesStartedAt) &&
        Objects.equals(this.supportEndedAt, productEntity.supportEndedAt) &&
        Objects.equals(this.supportStartedAt, productEntity.supportStartedAt) &&
        Objects.equals(this.type, productEntity.type) &&
        Objects.equals(this.unit, productEntity.unit) &&
        Objects.equals(this.updatedAt, productEntity.updatedAt) &&
        Objects.equals(this.url, productEntity.url) &&
        Objects.equals(this.vendor, productEntity.vendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, code, cost, createdAt, description, id, image, isActive, isTaxable, manufacturer, name, price, quantityInDemand, quantityInStock, relation, reorderLevel, salesEndedAt, salesStartedAt, supportEndedAt, supportStartedAt, type, unit, updatedAt, url, vendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductEntity {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isTaxable: ").append(toIndentedString(isTaxable)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantityInDemand: ").append(toIndentedString(quantityInDemand)).append("\n");
    sb.append("    quantityInStock: ").append(toIndentedString(quantityInStock)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    reorderLevel: ").append(toIndentedString(reorderLevel)).append("\n");
    sb.append("    salesEndedAt: ").append(toIndentedString(salesEndedAt)).append("\n");
    sb.append("    salesStartedAt: ").append(toIndentedString(salesStartedAt)).append("\n");
    sb.append("    supportEndedAt: ").append(toIndentedString(supportEndedAt)).append("\n");
    sb.append("    supportStartedAt: ").append(toIndentedString(supportStartedAt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("code");
    openapiFields.add("cost");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("is_active");
    openapiFields.add("is_taxable");
    openapiFields.add("manufacturer");
    openapiFields.add("name");
    openapiFields.add("price");
    openapiFields.add("quantity_in_demand");
    openapiFields.add("quantity_in_stock");
    openapiFields.add("relation");
    openapiFields.add("reorder_level");
    openapiFields.add("sales_ended_at");
    openapiFields.add("sales_started_at");
    openapiFields.add("support_ended_at");
    openapiFields.add("support_started_at");
    openapiFields.add("type");
    openapiFields.add("unit");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductEntity is not found in the empty JSON string", ProductEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull() && !jsonObj.get("category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) {
        JsonArray jsonArraycost = jsonObj.getAsJsonArray("cost");
        if (jsonArraycost != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cost").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cost` to be an array in the JSON string but got `%s`", jsonObj.get("cost").toString()));
          }

          // validate the optional field `cost` (array)
          for (int i = 0; i < jsonArraycost.size(); i++) {
            Cost.validateJsonElement(jsonArraycost.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        JsonArray jsonArrayimage = jsonObj.getAsJsonArray("image");
        if (jsonArrayimage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("image").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `image` to be an array in the JSON string but got `%s`", jsonObj.get("image").toString()));
          }

          // validate the optional field `image` (array)
          for (int i = 0; i < jsonArrayimage.size(); i++) {
            Image.validateJsonElement(jsonArrayimage.get(i));
          };
        }
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        JsonArray jsonArrayprice = jsonObj.getAsJsonArray("price");
        if (jsonArrayprice != null) {
          // ensure the json data is an array
          if (!jsonObj.get("price").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `price` to be an array in the JSON string but got `%s`", jsonObj.get("price").toString()));
          }

          // validate the optional field `price` (array)
          for (int i = 0; i < jsonArrayprice.size(); i++) {
            Price.validateJsonElement(jsonArrayprice.get(i));
          };
        }
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductEntity>() {
           @Override
           public void write(JsonWriter out, ProductEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductEntity
   * @throws IOException if the JSON string is invalid with respect to ProductEntity
   */
  public static ProductEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductEntity.class);
  }

  /**
   * Convert an instance of ProductEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

