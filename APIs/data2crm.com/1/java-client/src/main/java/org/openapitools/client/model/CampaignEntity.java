/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.Relation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CampaignEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CampaignEntity {
  public static final String SERIALIZED_NAME_ACTUAL_COST = "actual_cost";
  @SerializedName(SERIALIZED_NAME_ACTUAL_COST)
  private Float actualCost;

  public static final String SERIALIZED_NAME_BUDGETED_COST = "budgeted_cost";
  @SerializedName(SERIALIZED_NAME_BUDGETED_COST)
  private Float budgetedCost;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDED_AT = "ended_at";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private OffsetDateTime endedAt;

  public static final String SERIALIZED_NAME_EXPECTED_END_AT = "expected_end_at";
  @SerializedName(SERIALIZED_NAME_EXPECTED_END_AT)
  private OffsetDateTime expectedEndAt;

  public static final String SERIALIZED_NAME_EXPECTED_RESPONSE = "expected_response";
  @SerializedName(SERIALIZED_NAME_EXPECTED_RESPONSE)
  private Float expectedResponse;

  public static final String SERIALIZED_NAME_EXPECTED_REVENUE = "expected_revenue";
  @SerializedName(SERIALIZED_NAME_EXPECTED_REVENUE)
  private Float expectedRevenue;

  public static final String SERIALIZED_NAME_EXPECTED_START_AT = "expected_start_at";
  @SerializedName(SERIALIZED_NAME_EXPECTED_START_AT)
  private OffsetDateTime expectedStartAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBERS_SENT = "numbers_sent";
  @SerializedName(SERIALIZED_NAME_NUMBERS_SENT)
  private Integer numbersSent;

  public static final String SERIALIZED_NAME_OBJECTIVE = "objective";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE)
  private String objective;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public CampaignEntity() {
  }

  public CampaignEntity actualCost(Float actualCost) {
    this.actualCost = actualCost;
    return this;
  }

  /**
   * Actual Cost
   * @return actualCost
   */
  @javax.annotation.Nullable
  public Float getActualCost() {
    return actualCost;
  }

  public void setActualCost(Float actualCost) {
    this.actualCost = actualCost;
  }


  public CampaignEntity budgetedCost(Float budgetedCost) {
    this.budgetedCost = budgetedCost;
    return this;
  }

  /**
   * Budgeted Cost
   * @return budgetedCost
   */
  @javax.annotation.Nullable
  public Float getBudgetedCost() {
    return budgetedCost;
  }

  public void setBudgetedCost(Float budgetedCost) {
    this.budgetedCost = budgetedCost;
  }


  public CampaignEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CampaignEntity currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public CampaignEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CampaignEntity endedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * Ended At
   * @return endedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
  }


  public CampaignEntity expectedEndAt(OffsetDateTime expectedEndAt) {
    this.expectedEndAt = expectedEndAt;
    return this;
  }

  /**
   * Expected End At
   * @return expectedEndAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedEndAt() {
    return expectedEndAt;
  }

  public void setExpectedEndAt(OffsetDateTime expectedEndAt) {
    this.expectedEndAt = expectedEndAt;
  }


  public CampaignEntity expectedResponse(Float expectedResponse) {
    this.expectedResponse = expectedResponse;
    return this;
  }

  /**
   * Expected Response
   * @return expectedResponse
   */
  @javax.annotation.Nullable
  public Float getExpectedResponse() {
    return expectedResponse;
  }

  public void setExpectedResponse(Float expectedResponse) {
    this.expectedResponse = expectedResponse;
  }


  public CampaignEntity expectedRevenue(Float expectedRevenue) {
    this.expectedRevenue = expectedRevenue;
    return this;
  }

  /**
   * Expected Revenue
   * @return expectedRevenue
   */
  @javax.annotation.Nullable
  public Float getExpectedRevenue() {
    return expectedRevenue;
  }

  public void setExpectedRevenue(Float expectedRevenue) {
    this.expectedRevenue = expectedRevenue;
  }


  public CampaignEntity expectedStartAt(OffsetDateTime expectedStartAt) {
    this.expectedStartAt = expectedStartAt;
    return this;
  }

  /**
   * Expected Start At
   * @return expectedStartAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedStartAt() {
    return expectedStartAt;
  }

  public void setExpectedStartAt(OffsetDateTime expectedStartAt) {
    this.expectedStartAt = expectedStartAt;
  }


  public CampaignEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Campaign Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CampaignEntity isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Is Active
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CampaignEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CampaignEntity numbersSent(Integer numbersSent) {
    this.numbersSent = numbersSent;
    return this;
  }

  /**
   * Numbers Sent
   * @return numbersSent
   */
  @javax.annotation.Nullable
  public Integer getNumbersSent() {
    return numbersSent;
  }

  public void setNumbersSent(Integer numbersSent) {
    this.numbersSent = numbersSent;
  }


  public CampaignEntity objective(String objective) {
    this.objective = objective;
    return this;
  }

  /**
   * Objective
   * @return objective
   */
  @javax.annotation.Nullable
  public String getObjective() {
    return objective;
  }

  public void setObjective(String objective) {
    this.objective = objective;
  }


  public CampaignEntity relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public CampaignEntity startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Started At
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public CampaignEntity status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public CampaignEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CampaignEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignEntity campaignEntity = (CampaignEntity) o;
    return Objects.equals(this.actualCost, campaignEntity.actualCost) &&
        Objects.equals(this.budgetedCost, campaignEntity.budgetedCost) &&
        Objects.equals(this.createdAt, campaignEntity.createdAt) &&
        Objects.equals(this.currency, campaignEntity.currency) &&
        Objects.equals(this.description, campaignEntity.description) &&
        Objects.equals(this.endedAt, campaignEntity.endedAt) &&
        Objects.equals(this.expectedEndAt, campaignEntity.expectedEndAt) &&
        Objects.equals(this.expectedResponse, campaignEntity.expectedResponse) &&
        Objects.equals(this.expectedRevenue, campaignEntity.expectedRevenue) &&
        Objects.equals(this.expectedStartAt, campaignEntity.expectedStartAt) &&
        Objects.equals(this.id, campaignEntity.id) &&
        Objects.equals(this.isActive, campaignEntity.isActive) &&
        Objects.equals(this.name, campaignEntity.name) &&
        Objects.equals(this.numbersSent, campaignEntity.numbersSent) &&
        Objects.equals(this.objective, campaignEntity.objective) &&
        Objects.equals(this.relation, campaignEntity.relation) &&
        Objects.equals(this.startedAt, campaignEntity.startedAt) &&
        Objects.equals(this.status, campaignEntity.status) &&
        Objects.equals(this.type, campaignEntity.type) &&
        Objects.equals(this.updatedAt, campaignEntity.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualCost, budgetedCost, createdAt, currency, description, endedAt, expectedEndAt, expectedResponse, expectedRevenue, expectedStartAt, id, isActive, name, numbersSent, objective, relation, startedAt, status, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignEntity {\n");
    sb.append("    actualCost: ").append(toIndentedString(actualCost)).append("\n");
    sb.append("    budgetedCost: ").append(toIndentedString(budgetedCost)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    expectedEndAt: ").append(toIndentedString(expectedEndAt)).append("\n");
    sb.append("    expectedResponse: ").append(toIndentedString(expectedResponse)).append("\n");
    sb.append("    expectedRevenue: ").append(toIndentedString(expectedRevenue)).append("\n");
    sb.append("    expectedStartAt: ").append(toIndentedString(expectedStartAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numbersSent: ").append(toIndentedString(numbersSent)).append("\n");
    sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actual_cost");
    openapiFields.add("budgeted_cost");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("ended_at");
    openapiFields.add("expected_end_at");
    openapiFields.add("expected_response");
    openapiFields.add("expected_revenue");
    openapiFields.add("expected_start_at");
    openapiFields.add("id");
    openapiFields.add("is_active");
    openapiFields.add("name");
    openapiFields.add("numbers_sent");
    openapiFields.add("objective");
    openapiFields.add("relation");
    openapiFields.add("started_at");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignEntity is not found in the empty JSON string", CampaignEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("objective") != null && !jsonObj.get("objective").isJsonNull()) && !jsonObj.get("objective").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objective` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objective").toString()));
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignEntity>() {
           @Override
           public void write(JsonWriter out, CampaignEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignEntity
   * @throws IOException if the JSON string is invalid with respect to CampaignEntity
   */
  public static CampaignEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignEntity.class);
  }

  /**
   * Convert an instance of CampaignEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

