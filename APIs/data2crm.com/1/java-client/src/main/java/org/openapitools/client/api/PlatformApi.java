/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PlatformEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlatformApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlatformApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlatformApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPlatformCollection
     * @param X_API2CRM_USER_KEY API2CRM user key (required)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlatformCollectionCall(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String fields, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlatformCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String fields, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getPlatformCollection(Async)");
        }

        return getPlatformCollectionCall(X_API2CRM_USER_KEY, pageSize, page, fields, sort, _callback);

    }

    /**
     * GET for platform
     * Returns all platforms from the system
     * @param X_API2CRM_USER_KEY API2CRM user key (required)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @return List&lt;PlatformEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<PlatformEntity> getPlatformCollection(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String fields, String sort) throws ApiException {
        ApiResponse<List<PlatformEntity>> localVarResp = getPlatformCollectionWithHttpInfo(X_API2CRM_USER_KEY, pageSize, page, fields, sort);
        return localVarResp.getData();
    }

    /**
     * GET for platform
     * Returns all platforms from the system
     * @param X_API2CRM_USER_KEY API2CRM user key (required)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @return ApiResponse&lt;List&lt;PlatformEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlatformEntity>> getPlatformCollectionWithHttpInfo(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String fields, String sort) throws ApiException {
        okhttp3.Call localVarCall = getPlatformCollectionValidateBeforeCall(X_API2CRM_USER_KEY, pageSize, page, fields, sort, null);
        Type localVarReturnType = new TypeToken<List<PlatformEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for platform (asynchronously)
     * Returns all platforms from the system
     * @param X_API2CRM_USER_KEY API2CRM user key (required)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlatformCollectionAsync(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String fields, String sort, final ApiCallback<List<PlatformEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlatformCollectionValidateBeforeCall(X_API2CRM_USER_KEY, pageSize, page, fields, sort, _callback);
        Type localVarReturnType = new TypeToken<List<PlatformEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlatformEntity
     * @param X_API2CRM_USER_KEY API2CRM user key (required)
     * @param type Platform type (required)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlatformEntityCall(String X_API2CRM_USER_KEY, String type, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlatformEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String type, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getPlatformEntity(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPlatformEntity(Async)");
        }

        return getPlatformEntityCall(X_API2CRM_USER_KEY, type, fields, _callback);

    }

    /**
     * GET for platform
     * Return platform information
     * @param X_API2CRM_USER_KEY API2CRM user key (required)
     * @param type Platform type (required)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return PlatformEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PlatformEntity getPlatformEntity(String X_API2CRM_USER_KEY, String type, String fields) throws ApiException {
        ApiResponse<PlatformEntity> localVarResp = getPlatformEntityWithHttpInfo(X_API2CRM_USER_KEY, type, fields);
        return localVarResp.getData();
    }

    /**
     * GET for platform
     * Return platform information
     * @param X_API2CRM_USER_KEY API2CRM user key (required)
     * @param type Platform type (required)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return ApiResponse&lt;PlatformEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformEntity> getPlatformEntityWithHttpInfo(String X_API2CRM_USER_KEY, String type, String fields) throws ApiException {
        okhttp3.Call localVarCall = getPlatformEntityValidateBeforeCall(X_API2CRM_USER_KEY, type, fields, null);
        Type localVarReturnType = new TypeToken<PlatformEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for platform (asynchronously)
     * Return platform information
     * @param X_API2CRM_USER_KEY API2CRM user key (required)
     * @param type Platform type (required)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlatformEntityAsync(String X_API2CRM_USER_KEY, String type, String fields, final ApiCallback<PlatformEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlatformEntityValidateBeforeCall(X_API2CRM_USER_KEY, type, fields, _callback);
        Type localVarReturnType = new TypeToken<PlatformEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
