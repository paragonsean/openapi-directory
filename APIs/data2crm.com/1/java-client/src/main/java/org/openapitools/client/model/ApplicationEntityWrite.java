/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationEntityWrite
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationEntityWrite {
  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private String authorization;

  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  private Object credential;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Application platform type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BITRIX24("Bitrix24"),
    
    MICROSOFT_DYNAMICS("MicrosoftDynamics"),
    
    VTIGER("Vtiger"),
    
    ZOHO_CRM("ZohoCRM"),
    
    SALESFORCE("Salesforce"),
    
    SALESFORCE_SANDBOX("SalesforceSandbox"),
    
    SOLVE360("Solve360"),
    
    HIGHRISE("Highrise"),
    
    INSIGHTLY("Insightly"),
    
    HUB_SPOT("HubSpot"),
    
    PIPELINE_DEALS("PipelineDeals"),
    
    SUGAR_CRM("SugarCRM"),
    
    SUITE_CRM("SuiteCRM"),
    
    CAPSULE_CRM("CapsuleCRM"),
    
    PIPEDRIVE("Pipedrive"),
    
    INFUSIONSOFT("Infusionsoft"),
    
    CLOSE_IO("CloseIO"),
    
    BASE_CRM("BaseCRM"),
    
    ACT("Act"),
    
    AGILE_CRM("AgileCRM"),
    
    PROSPER_WORKS("ProsperWorks"),
    
    FRESH_SALES("FreshSales"),
    
    ODOO("Odoo"),
    
    G_SUITE("GSuite"),
    
    ACT_PREMIUM_WEB("ActPremiumWeb"),
    
    MARKETO("Marketo"),
    
    AMO_CRM("AmoCRM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ApplicationEntityWrite() {
  }

  public ApplicationEntityWrite authorization(String authorization) {
    this.authorization = authorization;
    return this;
  }

  /**
   * Application authorization
   * @return authorization
   */
  @javax.annotation.Nullable
  public String getAuthorization() {
    return authorization;
  }

  public void setAuthorization(String authorization) {
    this.authorization = authorization;
  }


  public ApplicationEntityWrite credential(Object credential) {
    this.credential = credential;
    return this;
  }

  /**
   * Get credential
   * @return credential
   */
  @javax.annotation.Nullable
  public Object getCredential() {
    return credential;
  }

  public void setCredential(Object credential) {
    this.credential = credential;
  }


  public ApplicationEntityWrite description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Application description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationEntityWrite type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Application platform type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationEntityWrite applicationEntityWrite = (ApplicationEntityWrite) o;
    return Objects.equals(this.authorization, applicationEntityWrite.authorization) &&
        Objects.equals(this.credential, applicationEntityWrite.credential) &&
        Objects.equals(this.description, applicationEntityWrite.description) &&
        Objects.equals(this.type, applicationEntityWrite.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorization, credential, description, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationEntityWrite {\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization");
    openapiFields.add("credential");
    openapiFields.add("description");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationEntityWrite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationEntityWrite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationEntityWrite is not found in the empty JSON string", ApplicationEntityWrite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationEntityWrite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationEntityWrite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) && !jsonObj.get("authorization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationEntityWrite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationEntityWrite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationEntityWrite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationEntityWrite.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationEntityWrite>() {
           @Override
           public void write(JsonWriter out, ApplicationEntityWrite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationEntityWrite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationEntityWrite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationEntityWrite
   * @throws IOException if the JSON string is invalid with respect to ApplicationEntityWrite
   */
  public static ApplicationEntityWrite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationEntityWrite.class);
  }

  /**
   * Convert an instance of ApplicationEntityWrite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

