/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Messenger;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.Relation;
import org.openapitools.client.model.Website;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountEntity {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<Address> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANNUAL_REVENUE = "annual_revenue";
  @SerializedName(SERIALIZED_NAME_ANNUAL_REVENUE)
  private String annualRevenue;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private List<Email> email = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMPLOYEES = "employees";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES)
  private String employees;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private List<String> industry = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSENGER = "messenger";
  @SerializedName(SERIALIZED_NAME_MESSENGER)
  private List<Messenger> messenger = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNERSHIP = "ownership";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP)
  private String ownership;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private List<Phone> phone = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private String rating;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_SIC_CODE = "sic_code";
  @SerializedName(SERIALIZED_NAME_SIC_CODE)
  private String sicCode;

  public static final String SERIALIZED_NAME_TICKER_SYMBOL = "ticker_symbol";
  @SerializedName(SERIALIZED_NAME_TICKER_SYMBOL)
  private String tickerSymbol;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private List<Website> website = new ArrayList<>();

  public AccountEntity() {
  }

  public AccountEntity address(List<Address> address) {
    this.address = address;
    return this;
  }

  public AccountEntity addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

  /**
   * Address
   * @return address
   */
  @javax.annotation.Nullable
  public List<Address> getAddress() {
    return address;
  }

  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public AccountEntity annualRevenue(String annualRevenue) {
    this.annualRevenue = annualRevenue;
    return this;
  }

  /**
   * Annual Revenue
   * @return annualRevenue
   */
  @javax.annotation.Nullable
  public String getAnnualRevenue() {
    return annualRevenue;
  }

  public void setAnnualRevenue(String annualRevenue) {
    this.annualRevenue = annualRevenue;
  }


  public AccountEntity category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public AccountEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AccountEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AccountEntity email(List<Email> email) {
    this.email = email;
    return this;
  }

  public AccountEntity addEmailItem(Email emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

  /**
   * Email
   * @return email
   */
  @javax.annotation.Nullable
  public List<Email> getEmail() {
    return email;
  }

  public void setEmail(List<Email> email) {
    this.email = email;
  }


  public AccountEntity employees(String employees) {
    this.employees = employees;
    return this;
  }

  /**
   * Employees
   * @return employees
   */
  @javax.annotation.Nullable
  public String getEmployees() {
    return employees;
  }

  public void setEmployees(String employees) {
    this.employees = employees;
  }


  public AccountEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Account Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountEntity industry(List<String> industry) {
    this.industry = industry;
    return this;
  }

  public AccountEntity addIndustryItem(String industryItem) {
    if (this.industry == null) {
      this.industry = new ArrayList<>();
    }
    this.industry.add(industryItem);
    return this;
  }

  /**
   * Industry
   * @return industry
   */
  @javax.annotation.Nullable
  public List<String> getIndustry() {
    return industry;
  }

  public void setIndustry(List<String> industry) {
    this.industry = industry;
  }


  public AccountEntity messenger(List<Messenger> messenger) {
    this.messenger = messenger;
    return this;
  }

  public AccountEntity addMessengerItem(Messenger messengerItem) {
    if (this.messenger == null) {
      this.messenger = new ArrayList<>();
    }
    this.messenger.add(messengerItem);
    return this;
  }

  /**
   * Messenger
   * @return messenger
   */
  @javax.annotation.Nullable
  public List<Messenger> getMessenger() {
    return messenger;
  }

  public void setMessenger(List<Messenger> messenger) {
    this.messenger = messenger;
  }


  public AccountEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountEntity ownership(String ownership) {
    this.ownership = ownership;
    return this;
  }

  /**
   * Ownership
   * @return ownership
   */
  @javax.annotation.Nullable
  public String getOwnership() {
    return ownership;
  }

  public void setOwnership(String ownership) {
    this.ownership = ownership;
  }


  public AccountEntity phone(List<Phone> phone) {
    this.phone = phone;
    return this;
  }

  public AccountEntity addPhoneItem(Phone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<>();
    }
    this.phone.add(phoneItem);
    return this;
  }

  /**
   * Phone
   * @return phone
   */
  @javax.annotation.Nullable
  public List<Phone> getPhone() {
    return phone;
  }

  public void setPhone(List<Phone> phone) {
    this.phone = phone;
  }


  public AccountEntity rating(String rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Rating
   * @return rating
   */
  @javax.annotation.Nullable
  public String getRating() {
    return rating;
  }

  public void setRating(String rating) {
    this.rating = rating;
  }


  public AccountEntity relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public AccountEntity sicCode(String sicCode) {
    this.sicCode = sicCode;
    return this;
  }

  /**
   * SIC Code
   * @return sicCode
   */
  @javax.annotation.Nullable
  public String getSicCode() {
    return sicCode;
  }

  public void setSicCode(String sicCode) {
    this.sicCode = sicCode;
  }


  public AccountEntity tickerSymbol(String tickerSymbol) {
    this.tickerSymbol = tickerSymbol;
    return this;
  }

  /**
   * Ticker Symbol
   * @return tickerSymbol
   */
  @javax.annotation.Nullable
  public String getTickerSymbol() {
    return tickerSymbol;
  }

  public void setTickerSymbol(String tickerSymbol) {
    this.tickerSymbol = tickerSymbol;
  }


  public AccountEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AccountEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public AccountEntity website(List<Website> website) {
    this.website = website;
    return this;
  }

  public AccountEntity addWebsiteItem(Website websiteItem) {
    if (this.website == null) {
      this.website = new ArrayList<>();
    }
    this.website.add(websiteItem);
    return this;
  }

  /**
   * Website
   * @return website
   */
  @javax.annotation.Nullable
  public List<Website> getWebsite() {
    return website;
  }

  public void setWebsite(List<Website> website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountEntity accountEntity = (AccountEntity) o;
    return Objects.equals(this.address, accountEntity.address) &&
        Objects.equals(this.annualRevenue, accountEntity.annualRevenue) &&
        Objects.equals(this.category, accountEntity.category) &&
        Objects.equals(this.createdAt, accountEntity.createdAt) &&
        Objects.equals(this.description, accountEntity.description) &&
        Objects.equals(this.email, accountEntity.email) &&
        Objects.equals(this.employees, accountEntity.employees) &&
        Objects.equals(this.id, accountEntity.id) &&
        Objects.equals(this.industry, accountEntity.industry) &&
        Objects.equals(this.messenger, accountEntity.messenger) &&
        Objects.equals(this.name, accountEntity.name) &&
        Objects.equals(this.ownership, accountEntity.ownership) &&
        Objects.equals(this.phone, accountEntity.phone) &&
        Objects.equals(this.rating, accountEntity.rating) &&
        Objects.equals(this.relation, accountEntity.relation) &&
        Objects.equals(this.sicCode, accountEntity.sicCode) &&
        Objects.equals(this.tickerSymbol, accountEntity.tickerSymbol) &&
        Objects.equals(this.type, accountEntity.type) &&
        Objects.equals(this.updatedAt, accountEntity.updatedAt) &&
        Objects.equals(this.website, accountEntity.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, annualRevenue, category, createdAt, description, email, employees, id, industry, messenger, name, ownership, phone, rating, relation, sicCode, tickerSymbol, type, updatedAt, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountEntity {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    annualRevenue: ").append(toIndentedString(annualRevenue)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    employees: ").append(toIndentedString(employees)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    messenger: ").append(toIndentedString(messenger)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownership: ").append(toIndentedString(ownership)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    sicCode: ").append(toIndentedString(sicCode)).append("\n");
    sb.append("    tickerSymbol: ").append(toIndentedString(tickerSymbol)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("annual_revenue");
    openapiFields.add("category");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("email");
    openapiFields.add("employees");
    openapiFields.add("id");
    openapiFields.add("industry");
    openapiFields.add("messenger");
    openapiFields.add("name");
    openapiFields.add("ownership");
    openapiFields.add("phone");
    openapiFields.add("rating");
    openapiFields.add("relation");
    openapiFields.add("sic_code");
    openapiFields.add("ticker_symbol");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountEntity is not found in the empty JSON string", AccountEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            Address.validateJsonElement(jsonArrayaddress.get(i));
          };
        }
      }
      if ((jsonObj.get("annual_revenue") != null && !jsonObj.get("annual_revenue").isJsonNull()) && !jsonObj.get("annual_revenue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annual_revenue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annual_revenue").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        JsonArray jsonArrayemail = jsonObj.getAsJsonArray("email");
        if (jsonArrayemail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("email").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
          }

          // validate the optional field `email` (array)
          for (int i = 0; i < jsonArrayemail.size(); i++) {
            Email.validateJsonElement(jsonArrayemail.get(i));
          };
        }
      }
      if ((jsonObj.get("employees") != null && !jsonObj.get("employees").isJsonNull()) && !jsonObj.get("employees").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employees` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employees").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull() && !jsonObj.get("industry").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be an array in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if (jsonObj.get("messenger") != null && !jsonObj.get("messenger").isJsonNull()) {
        JsonArray jsonArraymessenger = jsonObj.getAsJsonArray("messenger");
        if (jsonArraymessenger != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messenger").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messenger` to be an array in the JSON string but got `%s`", jsonObj.get("messenger").toString()));
          }

          // validate the optional field `messenger` (array)
          for (int i = 0; i < jsonArraymessenger.size(); i++) {
            Messenger.validateJsonElement(jsonArraymessenger.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownership") != null && !jsonObj.get("ownership").isJsonNull()) && !jsonObj.get("ownership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownership").toString()));
      }
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        JsonArray jsonArrayphone = jsonObj.getAsJsonArray("phone");
        if (jsonArrayphone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phone` to be an array in the JSON string but got `%s`", jsonObj.get("phone").toString()));
          }

          // validate the optional field `phone` (array)
          for (int i = 0; i < jsonArrayphone.size(); i++) {
            Phone.validateJsonElement(jsonArrayphone.get(i));
          };
        }
      }
      if ((jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) && !jsonObj.get("rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rating").toString()));
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      if ((jsonObj.get("sic_code") != null && !jsonObj.get("sic_code").isJsonNull()) && !jsonObj.get("sic_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sic_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sic_code").toString()));
      }
      if ((jsonObj.get("ticker_symbol") != null && !jsonObj.get("ticker_symbol").isJsonNull()) && !jsonObj.get("ticker_symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker_symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker_symbol").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) {
        JsonArray jsonArraywebsite = jsonObj.getAsJsonArray("website");
        if (jsonArraywebsite != null) {
          // ensure the json data is an array
          if (!jsonObj.get("website").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `website` to be an array in the JSON string but got `%s`", jsonObj.get("website").toString()));
          }

          // validate the optional field `website` (array)
          for (int i = 0; i < jsonArraywebsite.size(); i++) {
            Website.validateJsonElement(jsonArraywebsite.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountEntity>() {
           @Override
           public void write(JsonWriter out, AccountEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountEntity
   * @throws IOException if the JSON string is invalid with respect to AccountEntity
   */
  public static AccountEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountEntity.class);
  }

  /**
   * Convert an instance of AccountEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

