/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Messenger;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.Relation;
import org.openapitools.client.model.Website;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LeadEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LeadEntity {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<Address> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANNUAL_REVENUE = "annual_revenue";
  @SerializedName(SERIALIZED_NAME_ANNUAL_REVENUE)
  private String annualRevenue;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birth_date";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private LocalDate birthDate;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DO_NOT_CALL = "do_not_call";
  @SerializedName(SERIALIZED_NAME_DO_NOT_CALL)
  private Boolean doNotCall;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private List<Email> email = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private List<String> industry = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MESSENGER = "messenger";
  @SerializedName(SERIALIZED_NAME_MESSENGER)
  private List<Messenger> messenger = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middle_name";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_NAME_SUFFIX = "name_suffix";
  @SerializedName(SERIALIZED_NAME_NAME_SUFFIX)
  private String nameSuffix;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private List<Phone> phone = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private String rating;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_SALUTATION = "salutation";
  @SerializedName(SERIALIZED_NAME_SALUTATION)
  private String salutation;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_DESCRIPTION = "source_description";
  @SerializedName(SERIALIZED_NAME_SOURCE_DESCRIPTION)
  private String sourceDescription;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "status_description";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private List<Website> website = new ArrayList<>();

  public LeadEntity() {
  }

  public LeadEntity address(List<Address> address) {
    this.address = address;
    return this;
  }

  public LeadEntity addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

  /**
   * Address
   * @return address
   */
  @javax.annotation.Nullable
  public List<Address> getAddress() {
    return address;
  }

  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public LeadEntity annualRevenue(String annualRevenue) {
    this.annualRevenue = annualRevenue;
    return this;
  }

  /**
   * Annual Revenue
   * @return annualRevenue
   */
  @javax.annotation.Nullable
  public String getAnnualRevenue() {
    return annualRevenue;
  }

  public void setAnnualRevenue(String annualRevenue) {
    this.annualRevenue = annualRevenue;
  }


  public LeadEntity birthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Birth Date
   * @return birthDate
   */
  @javax.annotation.Nullable
  public LocalDate getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
  }


  public LeadEntity company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public LeadEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public LeadEntity department(String department) {
    this.department = department;
    return this;
  }

  /**
   * Department
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public LeadEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LeadEntity doNotCall(Boolean doNotCall) {
    this.doNotCall = doNotCall;
    return this;
  }

  /**
   * Do Not Call
   * @return doNotCall
   */
  @javax.annotation.Nullable
  public Boolean getDoNotCall() {
    return doNotCall;
  }

  public void setDoNotCall(Boolean doNotCall) {
    this.doNotCall = doNotCall;
  }


  public LeadEntity email(List<Email> email) {
    this.email = email;
    return this;
  }

  public LeadEntity addEmailItem(Email emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

  /**
   * Email
   * @return email
   */
  @javax.annotation.Nullable
  public List<Email> getEmail() {
    return email;
  }

  public void setEmail(List<Email> email) {
    this.email = email;
  }


  public LeadEntity firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First Name
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public LeadEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Lead Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LeadEntity industry(List<String> industry) {
    this.industry = industry;
    return this;
  }

  public LeadEntity addIndustryItem(String industryItem) {
    if (this.industry == null) {
      this.industry = new ArrayList<>();
    }
    this.industry.add(industryItem);
    return this;
  }

  /**
   * Industry
   * @return industry
   */
  @javax.annotation.Nullable
  public List<String> getIndustry() {
    return industry;
  }

  public void setIndustry(List<String> industry) {
    this.industry = industry;
  }


  public LeadEntity lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last Name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public LeadEntity messenger(List<Messenger> messenger) {
    this.messenger = messenger;
    return this;
  }

  public LeadEntity addMessengerItem(Messenger messengerItem) {
    if (this.messenger == null) {
      this.messenger = new ArrayList<>();
    }
    this.messenger.add(messengerItem);
    return this;
  }

  /**
   * Messenger
   * @return messenger
   */
  @javax.annotation.Nullable
  public List<Messenger> getMessenger() {
    return messenger;
  }

  public void setMessenger(List<Messenger> messenger) {
    this.messenger = messenger;
  }


  public LeadEntity middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Middle Name
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public LeadEntity nameSuffix(String nameSuffix) {
    this.nameSuffix = nameSuffix;
    return this;
  }

  /**
   * Name Suffix
   * @return nameSuffix
   */
  @javax.annotation.Nullable
  public String getNameSuffix() {
    return nameSuffix;
  }

  public void setNameSuffix(String nameSuffix) {
    this.nameSuffix = nameSuffix;
  }


  public LeadEntity phone(List<Phone> phone) {
    this.phone = phone;
    return this;
  }

  public LeadEntity addPhoneItem(Phone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<>();
    }
    this.phone.add(phoneItem);
    return this;
  }

  /**
   * Phone
   * @return phone
   */
  @javax.annotation.Nullable
  public List<Phone> getPhone() {
    return phone;
  }

  public void setPhone(List<Phone> phone) {
    this.phone = phone;
  }


  public LeadEntity position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Position (job)
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public LeadEntity rating(String rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Rating
   * @return rating
   */
  @javax.annotation.Nullable
  public String getRating() {
    return rating;
  }

  public void setRating(String rating) {
    this.rating = rating;
  }


  public LeadEntity relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public LeadEntity salutation(String salutation) {
    this.salutation = salutation;
    return this;
  }

  /**
   * Salutation
   * @return salutation
   */
  @javax.annotation.Nullable
  public String getSalutation() {
    return salutation;
  }

  public void setSalutation(String salutation) {
    this.salutation = salutation;
  }


  public LeadEntity source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Lead Source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public LeadEntity sourceDescription(String sourceDescription) {
    this.sourceDescription = sourceDescription;
    return this;
  }

  /**
   * Lead Source Description
   * @return sourceDescription
   */
  @javax.annotation.Nullable
  public String getSourceDescription() {
    return sourceDescription;
  }

  public void setSourceDescription(String sourceDescription) {
    this.sourceDescription = sourceDescription;
  }


  public LeadEntity status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public LeadEntity statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

  /**
   * Status Description
   * @return statusDescription
   */
  @javax.annotation.Nullable
  public String getStatusDescription() {
    return statusDescription;
  }

  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public LeadEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public LeadEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public LeadEntity website(List<Website> website) {
    this.website = website;
    return this;
  }

  public LeadEntity addWebsiteItem(Website websiteItem) {
    if (this.website == null) {
      this.website = new ArrayList<>();
    }
    this.website.add(websiteItem);
    return this;
  }

  /**
   * Website
   * @return website
   */
  @javax.annotation.Nullable
  public List<Website> getWebsite() {
    return website;
  }

  public void setWebsite(List<Website> website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeadEntity leadEntity = (LeadEntity) o;
    return Objects.equals(this.address, leadEntity.address) &&
        Objects.equals(this.annualRevenue, leadEntity.annualRevenue) &&
        Objects.equals(this.birthDate, leadEntity.birthDate) &&
        Objects.equals(this.company, leadEntity.company) &&
        Objects.equals(this.createdAt, leadEntity.createdAt) &&
        Objects.equals(this.department, leadEntity.department) &&
        Objects.equals(this.description, leadEntity.description) &&
        Objects.equals(this.doNotCall, leadEntity.doNotCall) &&
        Objects.equals(this.email, leadEntity.email) &&
        Objects.equals(this.firstName, leadEntity.firstName) &&
        Objects.equals(this.id, leadEntity.id) &&
        Objects.equals(this.industry, leadEntity.industry) &&
        Objects.equals(this.lastName, leadEntity.lastName) &&
        Objects.equals(this.messenger, leadEntity.messenger) &&
        Objects.equals(this.middleName, leadEntity.middleName) &&
        Objects.equals(this.nameSuffix, leadEntity.nameSuffix) &&
        Objects.equals(this.phone, leadEntity.phone) &&
        Objects.equals(this.position, leadEntity.position) &&
        Objects.equals(this.rating, leadEntity.rating) &&
        Objects.equals(this.relation, leadEntity.relation) &&
        Objects.equals(this.salutation, leadEntity.salutation) &&
        Objects.equals(this.source, leadEntity.source) &&
        Objects.equals(this.sourceDescription, leadEntity.sourceDescription) &&
        Objects.equals(this.status, leadEntity.status) &&
        Objects.equals(this.statusDescription, leadEntity.statusDescription) &&
        Objects.equals(this.type, leadEntity.type) &&
        Objects.equals(this.updatedAt, leadEntity.updatedAt) &&
        Objects.equals(this.website, leadEntity.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, annualRevenue, birthDate, company, createdAt, department, description, doNotCall, email, firstName, id, industry, lastName, messenger, middleName, nameSuffix, phone, position, rating, relation, salutation, source, sourceDescription, status, statusDescription, type, updatedAt, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeadEntity {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    annualRevenue: ").append(toIndentedString(annualRevenue)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    doNotCall: ").append(toIndentedString(doNotCall)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    messenger: ").append(toIndentedString(messenger)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    nameSuffix: ").append(toIndentedString(nameSuffix)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    salutation: ").append(toIndentedString(salutation)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceDescription: ").append(toIndentedString(sourceDescription)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("annual_revenue");
    openapiFields.add("birth_date");
    openapiFields.add("company");
    openapiFields.add("created_at");
    openapiFields.add("department");
    openapiFields.add("description");
    openapiFields.add("do_not_call");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("id");
    openapiFields.add("industry");
    openapiFields.add("last_name");
    openapiFields.add("messenger");
    openapiFields.add("middle_name");
    openapiFields.add("name_suffix");
    openapiFields.add("phone");
    openapiFields.add("position");
    openapiFields.add("rating");
    openapiFields.add("relation");
    openapiFields.add("salutation");
    openapiFields.add("source");
    openapiFields.add("source_description");
    openapiFields.add("status");
    openapiFields.add("status_description");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeadEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeadEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeadEntity is not found in the empty JSON string", LeadEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeadEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeadEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            Address.validateJsonElement(jsonArrayaddress.get(i));
          };
        }
      }
      if ((jsonObj.get("annual_revenue") != null && !jsonObj.get("annual_revenue").isJsonNull()) && !jsonObj.get("annual_revenue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annual_revenue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annual_revenue").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        JsonArray jsonArrayemail = jsonObj.getAsJsonArray("email");
        if (jsonArrayemail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("email").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
          }

          // validate the optional field `email` (array)
          for (int i = 0; i < jsonArrayemail.size(); i++) {
            Email.validateJsonElement(jsonArrayemail.get(i));
          };
        }
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull() && !jsonObj.get("industry").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be an array in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (jsonObj.get("messenger") != null && !jsonObj.get("messenger").isJsonNull()) {
        JsonArray jsonArraymessenger = jsonObj.getAsJsonArray("messenger");
        if (jsonArraymessenger != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messenger").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messenger` to be an array in the JSON string but got `%s`", jsonObj.get("messenger").toString()));
          }

          // validate the optional field `messenger` (array)
          for (int i = 0; i < jsonArraymessenger.size(); i++) {
            Messenger.validateJsonElement(jsonArraymessenger.get(i));
          };
        }
      }
      if ((jsonObj.get("middle_name") != null && !jsonObj.get("middle_name").isJsonNull()) && !jsonObj.get("middle_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middle_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middle_name").toString()));
      }
      if ((jsonObj.get("name_suffix") != null && !jsonObj.get("name_suffix").isJsonNull()) && !jsonObj.get("name_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_suffix").toString()));
      }
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        JsonArray jsonArrayphone = jsonObj.getAsJsonArray("phone");
        if (jsonArrayphone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phone` to be an array in the JSON string but got `%s`", jsonObj.get("phone").toString()));
          }

          // validate the optional field `phone` (array)
          for (int i = 0; i < jsonArrayphone.size(); i++) {
            Phone.validateJsonElement(jsonArrayphone.get(i));
          };
        }
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) && !jsonObj.get("rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rating").toString()));
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      if ((jsonObj.get("salutation") != null && !jsonObj.get("salutation").isJsonNull()) && !jsonObj.get("salutation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salutation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salutation").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("source_description") != null && !jsonObj.get("source_description").isJsonNull()) && !jsonObj.get("source_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_description").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("status_description") != null && !jsonObj.get("status_description").isJsonNull()) && !jsonObj.get("status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_description").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) {
        JsonArray jsonArraywebsite = jsonObj.getAsJsonArray("website");
        if (jsonArraywebsite != null) {
          // ensure the json data is an array
          if (!jsonObj.get("website").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `website` to be an array in the JSON string but got `%s`", jsonObj.get("website").toString()));
          }

          // validate the optional field `website` (array)
          for (int i = 0; i < jsonArraywebsite.size(); i++) {
            Website.validateJsonElement(jsonArraywebsite.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeadEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeadEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeadEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeadEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<LeadEntity>() {
           @Override
           public void write(JsonWriter out, LeadEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeadEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeadEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeadEntity
   * @throws IOException if the JSON string is invalid with respect to LeadEntity
   */
  public static LeadEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeadEntity.class);
  }

  /**
   * Convert an instance of LeadEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

