/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SchemaDescribe
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaDescribe {
  public static final String SERIALIZED_NAME_CREATE = "create";
  @SerializedName(SERIALIZED_NAME_CREATE)
  private Object create;

  public static final String SERIALIZED_NAME_FETCH = "fetch";
  @SerializedName(SERIALIZED_NAME_FETCH)
  private Object fetch;

  public static final String SERIALIZED_NAME_FETCH_ALL = "fetchAll";
  @SerializedName(SERIALIZED_NAME_FETCH_ALL)
  private Object fetchAll;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private Object update;

  public SchemaDescribe() {
  }

  public SchemaDescribe create(Object create) {
    this.create = create;
    return this;
  }

  /**
   * Get create
   * @return create
   */
  @javax.annotation.Nullable
  public Object getCreate() {
    return create;
  }

  public void setCreate(Object create) {
    this.create = create;
  }


  public SchemaDescribe fetch(Object fetch) {
    this.fetch = fetch;
    return this;
  }

  /**
   * Get fetch
   * @return fetch
   */
  @javax.annotation.Nullable
  public Object getFetch() {
    return fetch;
  }

  public void setFetch(Object fetch) {
    this.fetch = fetch;
  }


  public SchemaDescribe fetchAll(Object fetchAll) {
    this.fetchAll = fetchAll;
    return this;
  }

  /**
   * Get fetchAll
   * @return fetchAll
   */
  @javax.annotation.Nullable
  public Object getFetchAll() {
    return fetchAll;
  }

  public void setFetchAll(Object fetchAll) {
    this.fetchAll = fetchAll;
  }


  public SchemaDescribe update(Object update) {
    this.update = update;
    return this;
  }

  /**
   * Get update
   * @return update
   */
  @javax.annotation.Nullable
  public Object getUpdate() {
    return update;
  }

  public void setUpdate(Object update) {
    this.update = update;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaDescribe schemaDescribe = (SchemaDescribe) o;
    return Objects.equals(this.create, schemaDescribe.create) &&
        Objects.equals(this.fetch, schemaDescribe.fetch) &&
        Objects.equals(this.fetchAll, schemaDescribe.fetchAll) &&
        Objects.equals(this.update, schemaDescribe.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(create, fetch, fetchAll, update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaDescribe {\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    fetch: ").append(toIndentedString(fetch)).append("\n");
    sb.append("    fetchAll: ").append(toIndentedString(fetchAll)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("create");
    openapiFields.add("fetch");
    openapiFields.add("fetchAll");
    openapiFields.add("update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaDescribe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaDescribe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaDescribe is not found in the empty JSON string", SchemaDescribe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaDescribe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaDescribe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaDescribe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaDescribe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaDescribe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaDescribe.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaDescribe>() {
           @Override
           public void write(JsonWriter out, SchemaDescribe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaDescribe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaDescribe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaDescribe
   * @throws IOException if the JSON string is invalid with respect to SchemaDescribe
   */
  public static SchemaDescribe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaDescribe.class);
  }

  /**
   * Convert an instance of SchemaDescribe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

