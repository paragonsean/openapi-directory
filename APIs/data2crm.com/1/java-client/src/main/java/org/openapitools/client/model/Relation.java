/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountRelation;
import org.openapitools.client.model.AttachmentRelation;
import org.openapitools.client.model.CallRelation;
import org.openapitools.client.model.CampaignRelation;
import org.openapitools.client.model.CaseRelation;
import org.openapitools.client.model.CommentRelation;
import org.openapitools.client.model.ContactRelation;
import org.openapitools.client.model.EmailRelation;
import org.openapitools.client.model.EventRelation;
import org.openapitools.client.model.InvoiceItemRelation;
import org.openapitools.client.model.InvoiceRelation;
import org.openapitools.client.model.LeadRelation;
import org.openapitools.client.model.MeetingRelation;
import org.openapitools.client.model.NoteRelation;
import org.openapitools.client.model.OpportunityProductRelation;
import org.openapitools.client.model.OpportunityRelation;
import org.openapitools.client.model.PostRelation;
import org.openapitools.client.model.PriceBookItemRelation;
import org.openapitools.client.model.PriceBookRelation;
import org.openapitools.client.model.ProductRelation;
import org.openapitools.client.model.ProjectRelation;
import org.openapitools.client.model.QuoteItemRelation;
import org.openapitools.client.model.QuoteRelation;
import org.openapitools.client.model.TagRelation;
import org.openapitools.client.model.TaskRelation;
import org.openapitools.client.model.TicketRelation;
import org.openapitools.client.model.UserRelation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Relation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Relation {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private List<AccountRelation> account = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private List<AttachmentRelation> attachment = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALL = "call";
  @SerializedName(SERIALIZED_NAME_CALL)
  private List<CallRelation> call = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGN = "campaign";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN)
  private List<CampaignRelation> campaign = new ArrayList<>();

  public static final String SERIALIZED_NAME_CASE = "case";
  @SerializedName(SERIALIZED_NAME_CASE)
  private List<CaseRelation> _case = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private List<CommentRelation> comment = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private List<ContactRelation> contact = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private List<EmailRelation> email = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private List<EventRelation> event = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private List<InvoiceRelation> invoice = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVOICE_ITEM = "invoiceItem";
  @SerializedName(SERIALIZED_NAME_INVOICE_ITEM)
  private List<InvoiceItemRelation> invoiceItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAD = "lead";
  @SerializedName(SERIALIZED_NAME_LEAD)
  private List<LeadRelation> lead = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEETING = "meeting";
  @SerializedName(SERIALIZED_NAME_MEETING)
  private List<MeetingRelation> meeting = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private List<NoteRelation> note = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPPORTUNITY = "opportunity";
  @SerializedName(SERIALIZED_NAME_OPPORTUNITY)
  private List<OpportunityRelation> opportunity = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPPORTUNITY_PRODUCT = "opportunityProduct";
  @SerializedName(SERIALIZED_NAME_OPPORTUNITY_PRODUCT)
  private List<OpportunityProductRelation> opportunityProduct = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST = "post";
  @SerializedName(SERIALIZED_NAME_POST)
  private List<PostRelation> post = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_BOOK = "priceBook";
  @SerializedName(SERIALIZED_NAME_PRICE_BOOK)
  private List<PriceBookRelation> priceBook = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_BOOK_ITEM = "priceBookItem";
  @SerializedName(SERIALIZED_NAME_PRICE_BOOK_ITEM)
  private List<PriceBookItemRelation> priceBookItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private List<ProductRelation> product = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private List<ProjectRelation> project = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private List<QuoteRelation> quote = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTE_ITEM = "quoteItem";
  @SerializedName(SERIALIZED_NAME_QUOTE_ITEM)
  private List<QuoteItemRelation> quoteItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private List<TagRelation> tag = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private List<TaskRelation> task = new ArrayList<>();

  public static final String SERIALIZED_NAME_TICKET = "ticket";
  @SerializedName(SERIALIZED_NAME_TICKET)
  private List<TicketRelation> ticket = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private List<UserRelation> user = new ArrayList<>();

  public Relation() {
  }

  public Relation account(List<AccountRelation> account) {
    this.account = account;
    return this;
  }

  public Relation addAccountItem(AccountRelation accountItem) {
    if (this.account == null) {
      this.account = new ArrayList<>();
    }
    this.account.add(accountItem);
    return this;
  }

  /**
   * Account
   * @return account
   */
  @javax.annotation.Nullable
  public List<AccountRelation> getAccount() {
    return account;
  }

  public void setAccount(List<AccountRelation> account) {
    this.account = account;
  }


  public Relation attachment(List<AttachmentRelation> attachment) {
    this.attachment = attachment;
    return this;
  }

  public Relation addAttachmentItem(AttachmentRelation attachmentItem) {
    if (this.attachment == null) {
      this.attachment = new ArrayList<>();
    }
    this.attachment.add(attachmentItem);
    return this;
  }

  /**
   * Attachment
   * @return attachment
   */
  @javax.annotation.Nullable
  public List<AttachmentRelation> getAttachment() {
    return attachment;
  }

  public void setAttachment(List<AttachmentRelation> attachment) {
    this.attachment = attachment;
  }


  public Relation call(List<CallRelation> call) {
    this.call = call;
    return this;
  }

  public Relation addCallItem(CallRelation callItem) {
    if (this.call == null) {
      this.call = new ArrayList<>();
    }
    this.call.add(callItem);
    return this;
  }

  /**
   * Call
   * @return call
   */
  @javax.annotation.Nullable
  public List<CallRelation> getCall() {
    return call;
  }

  public void setCall(List<CallRelation> call) {
    this.call = call;
  }


  public Relation campaign(List<CampaignRelation> campaign) {
    this.campaign = campaign;
    return this;
  }

  public Relation addCampaignItem(CampaignRelation campaignItem) {
    if (this.campaign == null) {
      this.campaign = new ArrayList<>();
    }
    this.campaign.add(campaignItem);
    return this;
  }

  /**
   * Campaign
   * @return campaign
   */
  @javax.annotation.Nullable
  public List<CampaignRelation> getCampaign() {
    return campaign;
  }

  public void setCampaign(List<CampaignRelation> campaign) {
    this.campaign = campaign;
  }


  public Relation _case(List<CaseRelation> _case) {
    this._case = _case;
    return this;
  }

  public Relation addCaseItem(CaseRelation _caseItem) {
    if (this._case == null) {
      this._case = new ArrayList<>();
    }
    this._case.add(_caseItem);
    return this;
  }

  /**
   * Case
   * @return _case
   */
  @javax.annotation.Nullable
  public List<CaseRelation> getCase() {
    return _case;
  }

  public void setCase(List<CaseRelation> _case) {
    this._case = _case;
  }


  public Relation comment(List<CommentRelation> comment) {
    this.comment = comment;
    return this;
  }

  public Relation addCommentItem(CommentRelation commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

  /**
   * Comment
   * @return comment
   */
  @javax.annotation.Nullable
  public List<CommentRelation> getComment() {
    return comment;
  }

  public void setComment(List<CommentRelation> comment) {
    this.comment = comment;
  }


  public Relation contact(List<ContactRelation> contact) {
    this.contact = contact;
    return this;
  }

  public Relation addContactItem(ContactRelation contactItem) {
    if (this.contact == null) {
      this.contact = new ArrayList<>();
    }
    this.contact.add(contactItem);
    return this;
  }

  /**
   * Contact
   * @return contact
   */
  @javax.annotation.Nullable
  public List<ContactRelation> getContact() {
    return contact;
  }

  public void setContact(List<ContactRelation> contact) {
    this.contact = contact;
  }


  public Relation email(List<EmailRelation> email) {
    this.email = email;
    return this;
  }

  public Relation addEmailItem(EmailRelation emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

  /**
   * Email
   * @return email
   */
  @javax.annotation.Nullable
  public List<EmailRelation> getEmail() {
    return email;
  }

  public void setEmail(List<EmailRelation> email) {
    this.email = email;
  }


  public Relation event(List<EventRelation> event) {
    this.event = event;
    return this;
  }

  public Relation addEventItem(EventRelation eventItem) {
    if (this.event == null) {
      this.event = new ArrayList<>();
    }
    this.event.add(eventItem);
    return this;
  }

  /**
   * Event
   * @return event
   */
  @javax.annotation.Nullable
  public List<EventRelation> getEvent() {
    return event;
  }

  public void setEvent(List<EventRelation> event) {
    this.event = event;
  }


  public Relation invoice(List<InvoiceRelation> invoice) {
    this.invoice = invoice;
    return this;
  }

  public Relation addInvoiceItem(InvoiceRelation invoiceItem) {
    if (this.invoice == null) {
      this.invoice = new ArrayList<>();
    }
    this.invoice.add(invoiceItem);
    return this;
  }

  /**
   * Invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public List<InvoiceRelation> getInvoice() {
    return invoice;
  }

  public void setInvoice(List<InvoiceRelation> invoice) {
    this.invoice = invoice;
  }


  public Relation invoiceItem(List<InvoiceItemRelation> invoiceItem) {
    this.invoiceItem = invoiceItem;
    return this;
  }

  public Relation addInvoiceItemItem(InvoiceItemRelation invoiceItemItem) {
    if (this.invoiceItem == null) {
      this.invoiceItem = new ArrayList<>();
    }
    this.invoiceItem.add(invoiceItemItem);
    return this;
  }

  /**
   * Invoice Item
   * @return invoiceItem
   */
  @javax.annotation.Nullable
  public List<InvoiceItemRelation> getInvoiceItem() {
    return invoiceItem;
  }

  public void setInvoiceItem(List<InvoiceItemRelation> invoiceItem) {
    this.invoiceItem = invoiceItem;
  }


  public Relation lead(List<LeadRelation> lead) {
    this.lead = lead;
    return this;
  }

  public Relation addLeadItem(LeadRelation leadItem) {
    if (this.lead == null) {
      this.lead = new ArrayList<>();
    }
    this.lead.add(leadItem);
    return this;
  }

  /**
   * Lead
   * @return lead
   */
  @javax.annotation.Nullable
  public List<LeadRelation> getLead() {
    return lead;
  }

  public void setLead(List<LeadRelation> lead) {
    this.lead = lead;
  }


  public Relation meeting(List<MeetingRelation> meeting) {
    this.meeting = meeting;
    return this;
  }

  public Relation addMeetingItem(MeetingRelation meetingItem) {
    if (this.meeting == null) {
      this.meeting = new ArrayList<>();
    }
    this.meeting.add(meetingItem);
    return this;
  }

  /**
   * Meeting
   * @return meeting
   */
  @javax.annotation.Nullable
  public List<MeetingRelation> getMeeting() {
    return meeting;
  }

  public void setMeeting(List<MeetingRelation> meeting) {
    this.meeting = meeting;
  }


  public Relation note(List<NoteRelation> note) {
    this.note = note;
    return this;
  }

  public Relation addNoteItem(NoteRelation noteItem) {
    if (this.note == null) {
      this.note = new ArrayList<>();
    }
    this.note.add(noteItem);
    return this;
  }

  /**
   * Note
   * @return note
   */
  @javax.annotation.Nullable
  public List<NoteRelation> getNote() {
    return note;
  }

  public void setNote(List<NoteRelation> note) {
    this.note = note;
  }


  public Relation opportunity(List<OpportunityRelation> opportunity) {
    this.opportunity = opportunity;
    return this;
  }

  public Relation addOpportunityItem(OpportunityRelation opportunityItem) {
    if (this.opportunity == null) {
      this.opportunity = new ArrayList<>();
    }
    this.opportunity.add(opportunityItem);
    return this;
  }

  /**
   * Opportunity
   * @return opportunity
   */
  @javax.annotation.Nullable
  public List<OpportunityRelation> getOpportunity() {
    return opportunity;
  }

  public void setOpportunity(List<OpportunityRelation> opportunity) {
    this.opportunity = opportunity;
  }


  public Relation opportunityProduct(List<OpportunityProductRelation> opportunityProduct) {
    this.opportunityProduct = opportunityProduct;
    return this;
  }

  public Relation addOpportunityProductItem(OpportunityProductRelation opportunityProductItem) {
    if (this.opportunityProduct == null) {
      this.opportunityProduct = new ArrayList<>();
    }
    this.opportunityProduct.add(opportunityProductItem);
    return this;
  }

  /**
   * Opportunity Product
   * @return opportunityProduct
   */
  @javax.annotation.Nullable
  public List<OpportunityProductRelation> getOpportunityProduct() {
    return opportunityProduct;
  }

  public void setOpportunityProduct(List<OpportunityProductRelation> opportunityProduct) {
    this.opportunityProduct = opportunityProduct;
  }


  public Relation post(List<PostRelation> post) {
    this.post = post;
    return this;
  }

  public Relation addPostItem(PostRelation postItem) {
    if (this.post == null) {
      this.post = new ArrayList<>();
    }
    this.post.add(postItem);
    return this;
  }

  /**
   * Post
   * @return post
   */
  @javax.annotation.Nullable
  public List<PostRelation> getPost() {
    return post;
  }

  public void setPost(List<PostRelation> post) {
    this.post = post;
  }


  public Relation priceBook(List<PriceBookRelation> priceBook) {
    this.priceBook = priceBook;
    return this;
  }

  public Relation addPriceBookItem(PriceBookRelation priceBookItem) {
    if (this.priceBook == null) {
      this.priceBook = new ArrayList<>();
    }
    this.priceBook.add(priceBookItem);
    return this;
  }

  /**
   * Price Book
   * @return priceBook
   */
  @javax.annotation.Nullable
  public List<PriceBookRelation> getPriceBook() {
    return priceBook;
  }

  public void setPriceBook(List<PriceBookRelation> priceBook) {
    this.priceBook = priceBook;
  }


  public Relation priceBookItem(List<PriceBookItemRelation> priceBookItem) {
    this.priceBookItem = priceBookItem;
    return this;
  }

  public Relation addPriceBookItemItem(PriceBookItemRelation priceBookItemItem) {
    if (this.priceBookItem == null) {
      this.priceBookItem = new ArrayList<>();
    }
    this.priceBookItem.add(priceBookItemItem);
    return this;
  }

  /**
   * Price Book Item
   * @return priceBookItem
   */
  @javax.annotation.Nullable
  public List<PriceBookItemRelation> getPriceBookItem() {
    return priceBookItem;
  }

  public void setPriceBookItem(List<PriceBookItemRelation> priceBookItem) {
    this.priceBookItem = priceBookItem;
  }


  public Relation product(List<ProductRelation> product) {
    this.product = product;
    return this;
  }

  public Relation addProductItem(ProductRelation productItem) {
    if (this.product == null) {
      this.product = new ArrayList<>();
    }
    this.product.add(productItem);
    return this;
  }

  /**
   * Product
   * @return product
   */
  @javax.annotation.Nullable
  public List<ProductRelation> getProduct() {
    return product;
  }

  public void setProduct(List<ProductRelation> product) {
    this.product = product;
  }


  public Relation project(List<ProjectRelation> project) {
    this.project = project;
    return this;
  }

  public Relation addProjectItem(ProjectRelation projectItem) {
    if (this.project == null) {
      this.project = new ArrayList<>();
    }
    this.project.add(projectItem);
    return this;
  }

  /**
   * Project
   * @return project
   */
  @javax.annotation.Nullable
  public List<ProjectRelation> getProject() {
    return project;
  }

  public void setProject(List<ProjectRelation> project) {
    this.project = project;
  }


  public Relation quote(List<QuoteRelation> quote) {
    this.quote = quote;
    return this;
  }

  public Relation addQuoteItem(QuoteRelation quoteItem) {
    if (this.quote == null) {
      this.quote = new ArrayList<>();
    }
    this.quote.add(quoteItem);
    return this;
  }

  /**
   * Quote
   * @return quote
   */
  @javax.annotation.Nullable
  public List<QuoteRelation> getQuote() {
    return quote;
  }

  public void setQuote(List<QuoteRelation> quote) {
    this.quote = quote;
  }


  public Relation quoteItem(List<QuoteItemRelation> quoteItem) {
    this.quoteItem = quoteItem;
    return this;
  }

  public Relation addQuoteItemItem(QuoteItemRelation quoteItemItem) {
    if (this.quoteItem == null) {
      this.quoteItem = new ArrayList<>();
    }
    this.quoteItem.add(quoteItemItem);
    return this;
  }

  /**
   * Quote Item
   * @return quoteItem
   */
  @javax.annotation.Nullable
  public List<QuoteItemRelation> getQuoteItem() {
    return quoteItem;
  }

  public void setQuoteItem(List<QuoteItemRelation> quoteItem) {
    this.quoteItem = quoteItem;
  }


  public Relation tag(List<TagRelation> tag) {
    this.tag = tag;
    return this;
  }

  public Relation addTagItem(TagRelation tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

  /**
   * Tag
   * @return tag
   */
  @javax.annotation.Nullable
  public List<TagRelation> getTag() {
    return tag;
  }

  public void setTag(List<TagRelation> tag) {
    this.tag = tag;
  }


  public Relation task(List<TaskRelation> task) {
    this.task = task;
    return this;
  }

  public Relation addTaskItem(TaskRelation taskItem) {
    if (this.task == null) {
      this.task = new ArrayList<>();
    }
    this.task.add(taskItem);
    return this;
  }

  /**
   * Task
   * @return task
   */
  @javax.annotation.Nullable
  public List<TaskRelation> getTask() {
    return task;
  }

  public void setTask(List<TaskRelation> task) {
    this.task = task;
  }


  public Relation ticket(List<TicketRelation> ticket) {
    this.ticket = ticket;
    return this;
  }

  public Relation addTicketItem(TicketRelation ticketItem) {
    if (this.ticket == null) {
      this.ticket = new ArrayList<>();
    }
    this.ticket.add(ticketItem);
    return this;
  }

  /**
   * Ticket
   * @return ticket
   */
  @javax.annotation.Nullable
  public List<TicketRelation> getTicket() {
    return ticket;
  }

  public void setTicket(List<TicketRelation> ticket) {
    this.ticket = ticket;
  }


  public Relation user(List<UserRelation> user) {
    this.user = user;
    return this;
  }

  public Relation addUserItem(UserRelation userItem) {
    if (this.user == null) {
      this.user = new ArrayList<>();
    }
    this.user.add(userItem);
    return this;
  }

  /**
   * User
   * @return user
   */
  @javax.annotation.Nullable
  public List<UserRelation> getUser() {
    return user;
  }

  public void setUser(List<UserRelation> user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relation relation = (Relation) o;
    return Objects.equals(this.account, relation.account) &&
        Objects.equals(this.attachment, relation.attachment) &&
        Objects.equals(this.call, relation.call) &&
        Objects.equals(this.campaign, relation.campaign) &&
        Objects.equals(this._case, relation._case) &&
        Objects.equals(this.comment, relation.comment) &&
        Objects.equals(this.contact, relation.contact) &&
        Objects.equals(this.email, relation.email) &&
        Objects.equals(this.event, relation.event) &&
        Objects.equals(this.invoice, relation.invoice) &&
        Objects.equals(this.invoiceItem, relation.invoiceItem) &&
        Objects.equals(this.lead, relation.lead) &&
        Objects.equals(this.meeting, relation.meeting) &&
        Objects.equals(this.note, relation.note) &&
        Objects.equals(this.opportunity, relation.opportunity) &&
        Objects.equals(this.opportunityProduct, relation.opportunityProduct) &&
        Objects.equals(this.post, relation.post) &&
        Objects.equals(this.priceBook, relation.priceBook) &&
        Objects.equals(this.priceBookItem, relation.priceBookItem) &&
        Objects.equals(this.product, relation.product) &&
        Objects.equals(this.project, relation.project) &&
        Objects.equals(this.quote, relation.quote) &&
        Objects.equals(this.quoteItem, relation.quoteItem) &&
        Objects.equals(this.tag, relation.tag) &&
        Objects.equals(this.task, relation.task) &&
        Objects.equals(this.ticket, relation.ticket) &&
        Objects.equals(this.user, relation.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, attachment, call, campaign, _case, comment, contact, email, event, invoice, invoiceItem, lead, meeting, note, opportunity, opportunityProduct, post, priceBook, priceBookItem, product, project, quote, quoteItem, tag, task, ticket, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relation {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    call: ").append(toIndentedString(call)).append("\n");
    sb.append("    campaign: ").append(toIndentedString(campaign)).append("\n");
    sb.append("    _case: ").append(toIndentedString(_case)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceItem: ").append(toIndentedString(invoiceItem)).append("\n");
    sb.append("    lead: ").append(toIndentedString(lead)).append("\n");
    sb.append("    meeting: ").append(toIndentedString(meeting)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    opportunity: ").append(toIndentedString(opportunity)).append("\n");
    sb.append("    opportunityProduct: ").append(toIndentedString(opportunityProduct)).append("\n");
    sb.append("    post: ").append(toIndentedString(post)).append("\n");
    sb.append("    priceBook: ").append(toIndentedString(priceBook)).append("\n");
    sb.append("    priceBookItem: ").append(toIndentedString(priceBookItem)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    quoteItem: ").append(toIndentedString(quoteItem)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    ticket: ").append(toIndentedString(ticket)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("attachment");
    openapiFields.add("call");
    openapiFields.add("campaign");
    openapiFields.add("case");
    openapiFields.add("comment");
    openapiFields.add("contact");
    openapiFields.add("email");
    openapiFields.add("event");
    openapiFields.add("invoice");
    openapiFields.add("invoiceItem");
    openapiFields.add("lead");
    openapiFields.add("meeting");
    openapiFields.add("note");
    openapiFields.add("opportunity");
    openapiFields.add("opportunityProduct");
    openapiFields.add("post");
    openapiFields.add("priceBook");
    openapiFields.add("priceBookItem");
    openapiFields.add("product");
    openapiFields.add("project");
    openapiFields.add("quote");
    openapiFields.add("quoteItem");
    openapiFields.add("tag");
    openapiFields.add("task");
    openapiFields.add("ticket");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Relation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Relation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Relation is not found in the empty JSON string", Relation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Relation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Relation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        JsonArray jsonArrayaccount = jsonObj.getAsJsonArray("account");
        if (jsonArrayaccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("account").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `account` to be an array in the JSON string but got `%s`", jsonObj.get("account").toString()));
          }

          // validate the optional field `account` (array)
          for (int i = 0; i < jsonArrayaccount.size(); i++) {
            AccountRelation.validateJsonElement(jsonArrayaccount.get(i));
          };
        }
      }
      if (jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) {
        JsonArray jsonArrayattachment = jsonObj.getAsJsonArray("attachment");
        if (jsonArrayattachment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachment` to be an array in the JSON string but got `%s`", jsonObj.get("attachment").toString()));
          }

          // validate the optional field `attachment` (array)
          for (int i = 0; i < jsonArrayattachment.size(); i++) {
            AttachmentRelation.validateJsonElement(jsonArrayattachment.get(i));
          };
        }
      }
      if (jsonObj.get("call") != null && !jsonObj.get("call").isJsonNull()) {
        JsonArray jsonArraycall = jsonObj.getAsJsonArray("call");
        if (jsonArraycall != null) {
          // ensure the json data is an array
          if (!jsonObj.get("call").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `call` to be an array in the JSON string but got `%s`", jsonObj.get("call").toString()));
          }

          // validate the optional field `call` (array)
          for (int i = 0; i < jsonArraycall.size(); i++) {
            CallRelation.validateJsonElement(jsonArraycall.get(i));
          };
        }
      }
      if (jsonObj.get("campaign") != null && !jsonObj.get("campaign").isJsonNull()) {
        JsonArray jsonArraycampaign = jsonObj.getAsJsonArray("campaign");
        if (jsonArraycampaign != null) {
          // ensure the json data is an array
          if (!jsonObj.get("campaign").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `campaign` to be an array in the JSON string but got `%s`", jsonObj.get("campaign").toString()));
          }

          // validate the optional field `campaign` (array)
          for (int i = 0; i < jsonArraycampaign.size(); i++) {
            CampaignRelation.validateJsonElement(jsonArraycampaign.get(i));
          };
        }
      }
      if (jsonObj.get("case") != null && !jsonObj.get("case").isJsonNull()) {
        JsonArray jsonArray_case = jsonObj.getAsJsonArray("case");
        if (jsonArray_case != null) {
          // ensure the json data is an array
          if (!jsonObj.get("case").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `case` to be an array in the JSON string but got `%s`", jsonObj.get("case").toString()));
          }

          // validate the optional field `case` (array)
          for (int i = 0; i < jsonArray_case.size(); i++) {
            CaseRelation.validateJsonElement(jsonArray_case.get(i));
          };
        }
      }
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        JsonArray jsonArraycomment = jsonObj.getAsJsonArray("comment");
        if (jsonArraycomment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("comment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `comment` to be an array in the JSON string but got `%s`", jsonObj.get("comment").toString()));
          }

          // validate the optional field `comment` (array)
          for (int i = 0; i < jsonArraycomment.size(); i++) {
            CommentRelation.validateJsonElement(jsonArraycomment.get(i));
          };
        }
      }
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        JsonArray jsonArraycontact = jsonObj.getAsJsonArray("contact");
        if (jsonArraycontact != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contact").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contact` to be an array in the JSON string but got `%s`", jsonObj.get("contact").toString()));
          }

          // validate the optional field `contact` (array)
          for (int i = 0; i < jsonArraycontact.size(); i++) {
            ContactRelation.validateJsonElement(jsonArraycontact.get(i));
          };
        }
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        JsonArray jsonArrayemail = jsonObj.getAsJsonArray("email");
        if (jsonArrayemail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("email").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
          }

          // validate the optional field `email` (array)
          for (int i = 0; i < jsonArrayemail.size(); i++) {
            EmailRelation.validateJsonElement(jsonArrayemail.get(i));
          };
        }
      }
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        JsonArray jsonArrayevent = jsonObj.getAsJsonArray("event");
        if (jsonArrayevent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("event").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `event` to be an array in the JSON string but got `%s`", jsonObj.get("event").toString()));
          }

          // validate the optional field `event` (array)
          for (int i = 0; i < jsonArrayevent.size(); i++) {
            EventRelation.validateJsonElement(jsonArrayevent.get(i));
          };
        }
      }
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        JsonArray jsonArrayinvoice = jsonObj.getAsJsonArray("invoice");
        if (jsonArrayinvoice != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoice").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoice` to be an array in the JSON string but got `%s`", jsonObj.get("invoice").toString()));
          }

          // validate the optional field `invoice` (array)
          for (int i = 0; i < jsonArrayinvoice.size(); i++) {
            InvoiceRelation.validateJsonElement(jsonArrayinvoice.get(i));
          };
        }
      }
      if (jsonObj.get("invoiceItem") != null && !jsonObj.get("invoiceItem").isJsonNull()) {
        JsonArray jsonArrayinvoiceItem = jsonObj.getAsJsonArray("invoiceItem");
        if (jsonArrayinvoiceItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoiceItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoiceItem` to be an array in the JSON string but got `%s`", jsonObj.get("invoiceItem").toString()));
          }

          // validate the optional field `invoiceItem` (array)
          for (int i = 0; i < jsonArrayinvoiceItem.size(); i++) {
            InvoiceItemRelation.validateJsonElement(jsonArrayinvoiceItem.get(i));
          };
        }
      }
      if (jsonObj.get("lead") != null && !jsonObj.get("lead").isJsonNull()) {
        JsonArray jsonArraylead = jsonObj.getAsJsonArray("lead");
        if (jsonArraylead != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lead").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lead` to be an array in the JSON string but got `%s`", jsonObj.get("lead").toString()));
          }

          // validate the optional field `lead` (array)
          for (int i = 0; i < jsonArraylead.size(); i++) {
            LeadRelation.validateJsonElement(jsonArraylead.get(i));
          };
        }
      }
      if (jsonObj.get("meeting") != null && !jsonObj.get("meeting").isJsonNull()) {
        JsonArray jsonArraymeeting = jsonObj.getAsJsonArray("meeting");
        if (jsonArraymeeting != null) {
          // ensure the json data is an array
          if (!jsonObj.get("meeting").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `meeting` to be an array in the JSON string but got `%s`", jsonObj.get("meeting").toString()));
          }

          // validate the optional field `meeting` (array)
          for (int i = 0; i < jsonArraymeeting.size(); i++) {
            MeetingRelation.validateJsonElement(jsonArraymeeting.get(i));
          };
        }
      }
      if (jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) {
        JsonArray jsonArraynote = jsonObj.getAsJsonArray("note");
        if (jsonArraynote != null) {
          // ensure the json data is an array
          if (!jsonObj.get("note").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `note` to be an array in the JSON string but got `%s`", jsonObj.get("note").toString()));
          }

          // validate the optional field `note` (array)
          for (int i = 0; i < jsonArraynote.size(); i++) {
            NoteRelation.validateJsonElement(jsonArraynote.get(i));
          };
        }
      }
      if (jsonObj.get("opportunity") != null && !jsonObj.get("opportunity").isJsonNull()) {
        JsonArray jsonArrayopportunity = jsonObj.getAsJsonArray("opportunity");
        if (jsonArrayopportunity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("opportunity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `opportunity` to be an array in the JSON string but got `%s`", jsonObj.get("opportunity").toString()));
          }

          // validate the optional field `opportunity` (array)
          for (int i = 0; i < jsonArrayopportunity.size(); i++) {
            OpportunityRelation.validateJsonElement(jsonArrayopportunity.get(i));
          };
        }
      }
      if (jsonObj.get("opportunityProduct") != null && !jsonObj.get("opportunityProduct").isJsonNull()) {
        JsonArray jsonArrayopportunityProduct = jsonObj.getAsJsonArray("opportunityProduct");
        if (jsonArrayopportunityProduct != null) {
          // ensure the json data is an array
          if (!jsonObj.get("opportunityProduct").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `opportunityProduct` to be an array in the JSON string but got `%s`", jsonObj.get("opportunityProduct").toString()));
          }

          // validate the optional field `opportunityProduct` (array)
          for (int i = 0; i < jsonArrayopportunityProduct.size(); i++) {
            OpportunityProductRelation.validateJsonElement(jsonArrayopportunityProduct.get(i));
          };
        }
      }
      if (jsonObj.get("post") != null && !jsonObj.get("post").isJsonNull()) {
        JsonArray jsonArraypost = jsonObj.getAsJsonArray("post");
        if (jsonArraypost != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post` to be an array in the JSON string but got `%s`", jsonObj.get("post").toString()));
          }

          // validate the optional field `post` (array)
          for (int i = 0; i < jsonArraypost.size(); i++) {
            PostRelation.validateJsonElement(jsonArraypost.get(i));
          };
        }
      }
      if (jsonObj.get("priceBook") != null && !jsonObj.get("priceBook").isJsonNull()) {
        JsonArray jsonArraypriceBook = jsonObj.getAsJsonArray("priceBook");
        if (jsonArraypriceBook != null) {
          // ensure the json data is an array
          if (!jsonObj.get("priceBook").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `priceBook` to be an array in the JSON string but got `%s`", jsonObj.get("priceBook").toString()));
          }

          // validate the optional field `priceBook` (array)
          for (int i = 0; i < jsonArraypriceBook.size(); i++) {
            PriceBookRelation.validateJsonElement(jsonArraypriceBook.get(i));
          };
        }
      }
      if (jsonObj.get("priceBookItem") != null && !jsonObj.get("priceBookItem").isJsonNull()) {
        JsonArray jsonArraypriceBookItem = jsonObj.getAsJsonArray("priceBookItem");
        if (jsonArraypriceBookItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("priceBookItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `priceBookItem` to be an array in the JSON string but got `%s`", jsonObj.get("priceBookItem").toString()));
          }

          // validate the optional field `priceBookItem` (array)
          for (int i = 0; i < jsonArraypriceBookItem.size(); i++) {
            PriceBookItemRelation.validateJsonElement(jsonArraypriceBookItem.get(i));
          };
        }
      }
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        JsonArray jsonArrayproduct = jsonObj.getAsJsonArray("product");
        if (jsonArrayproduct != null) {
          // ensure the json data is an array
          if (!jsonObj.get("product").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product` to be an array in the JSON string but got `%s`", jsonObj.get("product").toString()));
          }

          // validate the optional field `product` (array)
          for (int i = 0; i < jsonArrayproduct.size(); i++) {
            ProductRelation.validateJsonElement(jsonArrayproduct.get(i));
          };
        }
      }
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        JsonArray jsonArrayproject = jsonObj.getAsJsonArray("project");
        if (jsonArrayproject != null) {
          // ensure the json data is an array
          if (!jsonObj.get("project").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `project` to be an array in the JSON string but got `%s`", jsonObj.get("project").toString()));
          }

          // validate the optional field `project` (array)
          for (int i = 0; i < jsonArrayproject.size(); i++) {
            ProjectRelation.validateJsonElement(jsonArrayproject.get(i));
          };
        }
      }
      if (jsonObj.get("quote") != null && !jsonObj.get("quote").isJsonNull()) {
        JsonArray jsonArrayquote = jsonObj.getAsJsonArray("quote");
        if (jsonArrayquote != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quote").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quote` to be an array in the JSON string but got `%s`", jsonObj.get("quote").toString()));
          }

          // validate the optional field `quote` (array)
          for (int i = 0; i < jsonArrayquote.size(); i++) {
            QuoteRelation.validateJsonElement(jsonArrayquote.get(i));
          };
        }
      }
      if (jsonObj.get("quoteItem") != null && !jsonObj.get("quoteItem").isJsonNull()) {
        JsonArray jsonArrayquoteItem = jsonObj.getAsJsonArray("quoteItem");
        if (jsonArrayquoteItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quoteItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quoteItem` to be an array in the JSON string but got `%s`", jsonObj.get("quoteItem").toString()));
          }

          // validate the optional field `quoteItem` (array)
          for (int i = 0; i < jsonArrayquoteItem.size(); i++) {
            QuoteItemRelation.validateJsonElement(jsonArrayquoteItem.get(i));
          };
        }
      }
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        JsonArray jsonArraytag = jsonObj.getAsJsonArray("tag");
        if (jsonArraytag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
          }

          // validate the optional field `tag` (array)
          for (int i = 0; i < jsonArraytag.size(); i++) {
            TagRelation.validateJsonElement(jsonArraytag.get(i));
          };
        }
      }
      if (jsonObj.get("task") != null && !jsonObj.get("task").isJsonNull()) {
        JsonArray jsonArraytask = jsonObj.getAsJsonArray("task");
        if (jsonArraytask != null) {
          // ensure the json data is an array
          if (!jsonObj.get("task").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `task` to be an array in the JSON string but got `%s`", jsonObj.get("task").toString()));
          }

          // validate the optional field `task` (array)
          for (int i = 0; i < jsonArraytask.size(); i++) {
            TaskRelation.validateJsonElement(jsonArraytask.get(i));
          };
        }
      }
      if (jsonObj.get("ticket") != null && !jsonObj.get("ticket").isJsonNull()) {
        JsonArray jsonArrayticket = jsonObj.getAsJsonArray("ticket");
        if (jsonArrayticket != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ticket").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ticket` to be an array in the JSON string but got `%s`", jsonObj.get("ticket").toString()));
          }

          // validate the optional field `ticket` (array)
          for (int i = 0; i < jsonArrayticket.size(); i++) {
            TicketRelation.validateJsonElement(jsonArrayticket.get(i));
          };
        }
      }
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        JsonArray jsonArrayuser = jsonObj.getAsJsonArray("user");
        if (jsonArrayuser != null) {
          // ensure the json data is an array
          if (!jsonObj.get("user").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `user` to be an array in the JSON string but got `%s`", jsonObj.get("user").toString()));
          }

          // validate the optional field `user` (array)
          for (int i = 0; i < jsonArrayuser.size(); i++) {
            UserRelation.validateJsonElement(jsonArrayuser.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Relation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Relation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Relation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Relation.class));

       return (TypeAdapter<T>) new TypeAdapter<Relation>() {
           @Override
           public void write(JsonWriter out, Relation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Relation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Relation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Relation
   * @throws IOException if the JSON string is invalid with respect to Relation
   */
  public static Relation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Relation.class);
  }

  /**
   * Convert an instance of Relation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

