/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RequestsLimit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestsLimit {
  public static final String SERIALIZED_NAME_IS_EXCEEDED = "is_exceeded";
  @SerializedName(SERIALIZED_NAME_IS_EXCEEDED)
  private Boolean isExceeded;

  public static final String SERIALIZED_NAME_RETRY_AFTER = "retry_after";
  @SerializedName(SERIALIZED_NAME_RETRY_AFTER)
  private OffsetDateTime retryAfter;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<Type> type = new ArrayList<>();

  public RequestsLimit() {
  }

  public RequestsLimit isExceeded(Boolean isExceeded) {
    this.isExceeded = isExceeded;
    return this;
  }

  /**
   * Is Exceeded
   * @return isExceeded
   */
  @javax.annotation.Nullable
  public Boolean getIsExceeded() {
    return isExceeded;
  }

  public void setIsExceeded(Boolean isExceeded) {
    this.isExceeded = isExceeded;
  }


  public RequestsLimit retryAfter(OffsetDateTime retryAfter) {
    this.retryAfter = retryAfter;
    return this;
  }

  /**
   * Retry After
   * @return retryAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRetryAfter() {
    return retryAfter;
  }

  public void setRetryAfter(OffsetDateTime retryAfter) {
    this.retryAfter = retryAfter;
  }


  public RequestsLimit type(List<Type> type) {
    this.type = type;
    return this;
  }

  public RequestsLimit addTypeItem(Type typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public List<Type> getType() {
    return type;
  }

  public void setType(List<Type> type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestsLimit requestsLimit = (RequestsLimit) o;
    return Objects.equals(this.isExceeded, requestsLimit.isExceeded) &&
        Objects.equals(this.retryAfter, requestsLimit.retryAfter) &&
        Objects.equals(this.type, requestsLimit.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isExceeded, retryAfter, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestsLimit {\n");
    sb.append("    isExceeded: ").append(toIndentedString(isExceeded)).append("\n");
    sb.append("    retryAfter: ").append(toIndentedString(retryAfter)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_exceeded");
    openapiFields.add("retry_after");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestsLimit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestsLimit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestsLimit is not found in the empty JSON string", RequestsLimit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestsLimit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestsLimit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        JsonArray jsonArraytype = jsonObj.getAsJsonArray("type");
        if (jsonArraytype != null) {
          // ensure the json data is an array
          if (!jsonObj.get("type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
          }

          // validate the optional field `type` (array)
          for (int i = 0; i < jsonArraytype.size(); i++) {
            Type.validateJsonElement(jsonArraytype.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestsLimit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestsLimit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestsLimit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestsLimit.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestsLimit>() {
           @Override
           public void write(JsonWriter out, RequestsLimit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestsLimit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestsLimit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestsLimit
   * @throws IOException if the JSON string is invalid with respect to RequestsLimit
   */
  public static RequestsLimit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestsLimit.class);
  }

  /**
   * Convert an instance of RequestsLimit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

