/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntityEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityEntity {
  /**
   * Category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    BASIC("basic"),
    
    ASSET("asset"),
    
    ADDITIONAL("additional");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private String collection;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD = "customField";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD)
  private Object customField;

  public static final String SERIALIZED_NAME_DATA_CACHE = "dataCache";
  @SerializedName(SERIALIZED_NAME_DATA_CACHE)
  private Object dataCache;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private String entity;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Internal Type
   */
  @JsonAdapter(InternalTypeEnum.Adapter.class)
  public enum InternalTypeEnum {
    NOT_UNIFIED("not_unified"),
    
    UNIFIED("unified");

    private String value;

    InternalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InternalTypeEnum fromValue(String value) {
      for (InternalTypeEnum b : InternalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InternalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InternalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InternalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InternalTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InternalTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERNAL_TYPE = "internalType";
  @SerializedName(SERIALIZED_NAME_INTERNAL_TYPE)
  private InternalTypeEnum internalType;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_METHODS = "methods";
  @SerializedName(SERIALIZED_NAME_METHODS)
  private Object methods;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIMILAR_TO = "similarTo";
  @SerializedName(SERIALIZED_NAME_SIMILAR_TO)
  private List<String> similarTo = new ArrayList<>();

  /**
   * Type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STANDARD("standard"),
    
    CUSTOM("custom");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public EntityEntity() {
  }

  public EntityEntity category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Category
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public EntityEntity collection(String collection) {
    this.collection = collection;
    return this;
  }

  /**
   * Collection
   * @return collection
   */
  @javax.annotation.Nullable
  public String getCollection() {
    return collection;
  }

  public void setCollection(String collection) {
    this.collection = collection;
  }


  public EntityEntity customField(Object customField) {
    this.customField = customField;
    return this;
  }

  /**
   * Get customField
   * @return customField
   */
  @javax.annotation.Nullable
  public Object getCustomField() {
    return customField;
  }

  public void setCustomField(Object customField) {
    this.customField = customField;
  }


  public EntityEntity dataCache(Object dataCache) {
    this.dataCache = dataCache;
    return this;
  }

  /**
   * Get dataCache
   * @return dataCache
   */
  @javax.annotation.Nullable
  public Object getDataCache() {
    return dataCache;
  }

  public void setDataCache(Object dataCache) {
    this.dataCache = dataCache;
  }


  public EntityEntity entity(String entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Entity
   * @return entity
   */
  @javax.annotation.Nullable
  public String getEntity() {
    return entity;
  }

  public void setEntity(String entity) {
    this.entity = entity;
  }


  public EntityEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Entity Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EntityEntity internalType(InternalTypeEnum internalType) {
    this.internalType = internalType;
    return this;
  }

  /**
   * Internal Type
   * @return internalType
   */
  @javax.annotation.Nullable
  public InternalTypeEnum getInternalType() {
    return internalType;
  }

  public void setInternalType(InternalTypeEnum internalType) {
    this.internalType = internalType;
  }


  public EntityEntity limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public EntityEntity methods(Object methods) {
    this.methods = methods;
    return this;
  }

  /**
   * Get methods
   * @return methods
   */
  @javax.annotation.Nullable
  public Object getMethods() {
    return methods;
  }

  public void setMethods(Object methods) {
    this.methods = methods;
  }


  public EntityEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EntityEntity similarTo(List<String> similarTo) {
    this.similarTo = similarTo;
    return this;
  }

  public EntityEntity addSimilarToItem(String similarToItem) {
    if (this.similarTo == null) {
      this.similarTo = new ArrayList<>();
    }
    this.similarTo.add(similarToItem);
    return this;
  }

  /**
   * Percentage to unified entity
   * @return similarTo
   */
  @javax.annotation.Nullable
  public List<String> getSimilarTo() {
    return similarTo;
  }

  public void setSimilarTo(List<String> similarTo) {
    this.similarTo = similarTo;
  }


  public EntityEntity type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityEntity entityEntity = (EntityEntity) o;
    return Objects.equals(this.category, entityEntity.category) &&
        Objects.equals(this.collection, entityEntity.collection) &&
        Objects.equals(this.customField, entityEntity.customField) &&
        Objects.equals(this.dataCache, entityEntity.dataCache) &&
        Objects.equals(this.entity, entityEntity.entity) &&
        Objects.equals(this.id, entityEntity.id) &&
        Objects.equals(this.internalType, entityEntity.internalType) &&
        Objects.equals(this.limit, entityEntity.limit) &&
        Objects.equals(this.methods, entityEntity.methods) &&
        Objects.equals(this.name, entityEntity.name) &&
        Objects.equals(this.similarTo, entityEntity.similarTo) &&
        Objects.equals(this.type, entityEntity.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, collection, customField, dataCache, entity, id, internalType, limit, methods, name, similarTo, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityEntity {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    customField: ").append(toIndentedString(customField)).append("\n");
    sb.append("    dataCache: ").append(toIndentedString(dataCache)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalType: ").append(toIndentedString(internalType)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    similarTo: ").append(toIndentedString(similarTo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("collection");
    openapiFields.add("customField");
    openapiFields.add("dataCache");
    openapiFields.add("entity");
    openapiFields.add("id");
    openapiFields.add("internalType");
    openapiFields.add("limit");
    openapiFields.add("methods");
    openapiFields.add("name");
    openapiFields.add("similarTo");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityEntity is not found in the empty JSON string", EntityEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("collection") != null && !jsonObj.get("collection").isJsonNull()) && !jsonObj.get("collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection").toString()));
      }
      if ((jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) && !jsonObj.get("entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("internalType") != null && !jsonObj.get("internalType").isJsonNull()) && !jsonObj.get("internalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalType").toString()));
      }
      // validate the optional field `internalType`
      if (jsonObj.get("internalType") != null && !jsonObj.get("internalType").isJsonNull()) {
        InternalTypeEnum.validateJsonElement(jsonObj.get("internalType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("similarTo") != null && !jsonObj.get("similarTo").isJsonNull() && !jsonObj.get("similarTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `similarTo` to be an array in the JSON string but got `%s`", jsonObj.get("similarTo").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityEntity>() {
           @Override
           public void write(JsonWriter out, EntityEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityEntity
   * @throws IOException if the JSON string is invalid with respect to EntityEntity
   */
  public static EntityEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityEntity.class);
  }

  /**
   * Convert an instance of EntityEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

