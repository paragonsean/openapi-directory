/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.Discount;
import org.openapitools.client.model.Relation;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceEntity {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<Address> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADJUSTMENT = "adjustment";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT)
  private Float adjustment;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Float balance;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private List<Discount> discount = new ArrayList<>();

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private LocalDate dueDate;

  public static final String SERIALIZED_NAME_EXCISE_DUTY = "excise_duty";
  @SerializedName(SERIALIZED_NAME_EXCISE_DUTY)
  private Float exciseDuty;

  public static final String SERIALIZED_NAME_GRAND_TOTAL = "grand_total";
  @SerializedName(SERIALIZED_NAME_GRAND_TOTAL)
  private Float grandTotal;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private LocalDate invoiceDate;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchase_order";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private String purchaseOrder;

  public static final String SERIALIZED_NAME_RECEIVED = "received";
  @SerializedName(SERIALIZED_NAME_RECEIVED)
  private Float received;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_SALES_COMMISSION = "sales_commission";
  @SerializedName(SERIALIZED_NAME_SALES_COMMISSION)
  private Float salesCommission;

  public static final String SERIALIZED_NAME_SHIPPING_AND_HANDLING = "shipping_and_handling";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AND_HANDLING)
  private Float shippingAndHandling;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Float subtotal;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private List<Tax> tax = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERMS_AND_CONDITIONS = "terms_and_conditions";
  @SerializedName(SERIALIZED_NAME_TERMS_AND_CONDITIONS)
  private String termsAndConditions;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private Float totalPrice;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public InvoiceEntity() {
  }

  public InvoiceEntity address(List<Address> address) {
    this.address = address;
    return this;
  }

  public InvoiceEntity addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

  /**
   * Address
   * @return address
   */
  @javax.annotation.Nullable
  public List<Address> getAddress() {
    return address;
  }

  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public InvoiceEntity adjustment(Float adjustment) {
    this.adjustment = adjustment;
    return this;
  }

  /**
   * Adjustment
   * @return adjustment
   */
  @javax.annotation.Nullable
  public Float getAdjustment() {
    return adjustment;
  }

  public void setAdjustment(Float adjustment) {
    this.adjustment = adjustment;
  }


  public InvoiceEntity balance(Float balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Balance
   * @return balance
   */
  @javax.annotation.Nullable
  public Float getBalance() {
    return balance;
  }

  public void setBalance(Float balance) {
    this.balance = balance;
  }


  public InvoiceEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InvoiceEntity currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public InvoiceEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InvoiceEntity discount(List<Discount> discount) {
    this.discount = discount;
    return this;
  }

  public InvoiceEntity addDiscountItem(Discount discountItem) {
    if (this.discount == null) {
      this.discount = new ArrayList<>();
    }
    this.discount.add(discountItem);
    return this;
  }

  /**
   * Discount
   * @return discount
   */
  @javax.annotation.Nullable
  public List<Discount> getDiscount() {
    return discount;
  }

  public void setDiscount(List<Discount> discount) {
    this.discount = discount;
  }


  public InvoiceEntity dueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Due Date
   * @return dueDate
   */
  @javax.annotation.Nullable
  public LocalDate getDueDate() {
    return dueDate;
  }

  public void setDueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
  }


  public InvoiceEntity exciseDuty(Float exciseDuty) {
    this.exciseDuty = exciseDuty;
    return this;
  }

  /**
   * Excise Duty
   * @return exciseDuty
   */
  @javax.annotation.Nullable
  public Float getExciseDuty() {
    return exciseDuty;
  }

  public void setExciseDuty(Float exciseDuty) {
    this.exciseDuty = exciseDuty;
  }


  public InvoiceEntity grandTotal(Float grandTotal) {
    this.grandTotal = grandTotal;
    return this;
  }

  /**
   * Grand Total
   * @return grandTotal
   */
  @javax.annotation.Nullable
  public Float getGrandTotal() {
    return grandTotal;
  }

  public void setGrandTotal(Float grandTotal) {
    this.grandTotal = grandTotal;
  }


  public InvoiceEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Invoice Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InvoiceEntity invoiceDate(LocalDate invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Invoice Date
   * @return invoiceDate
   */
  @javax.annotation.Nullable
  public LocalDate getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(LocalDate invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public InvoiceEntity number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Number
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public InvoiceEntity purchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
    return this;
  }

  /**
   * Purchase Order
   * @return purchaseOrder
   */
  @javax.annotation.Nullable
  public String getPurchaseOrder() {
    return purchaseOrder;
  }

  public void setPurchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public InvoiceEntity received(Float received) {
    this.received = received;
    return this;
  }

  /**
   * Received
   * @return received
   */
  @javax.annotation.Nullable
  public Float getReceived() {
    return received;
  }

  public void setReceived(Float received) {
    this.received = received;
  }


  public InvoiceEntity relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public InvoiceEntity salesCommission(Float salesCommission) {
    this.salesCommission = salesCommission;
    return this;
  }

  /**
   * Sales Commission
   * @return salesCommission
   */
  @javax.annotation.Nullable
  public Float getSalesCommission() {
    return salesCommission;
  }

  public void setSalesCommission(Float salesCommission) {
    this.salesCommission = salesCommission;
  }


  public InvoiceEntity shippingAndHandling(Float shippingAndHandling) {
    this.shippingAndHandling = shippingAndHandling;
    return this;
  }

  /**
   * Shipping And Handling
   * @return shippingAndHandling
   */
  @javax.annotation.Nullable
  public Float getShippingAndHandling() {
    return shippingAndHandling;
  }

  public void setShippingAndHandling(Float shippingAndHandling) {
    this.shippingAndHandling = shippingAndHandling;
  }


  public InvoiceEntity status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public InvoiceEntity subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public InvoiceEntity subtotal(Float subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Subtotal
   * @return subtotal
   */
  @javax.annotation.Nullable
  public Float getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(Float subtotal) {
    this.subtotal = subtotal;
  }


  public InvoiceEntity tax(List<Tax> tax) {
    this.tax = tax;
    return this;
  }

  public InvoiceEntity addTaxItem(Tax taxItem) {
    if (this.tax == null) {
      this.tax = new ArrayList<>();
    }
    this.tax.add(taxItem);
    return this;
  }

  /**
   * Tax
   * @return tax
   */
  @javax.annotation.Nullable
  public List<Tax> getTax() {
    return tax;
  }

  public void setTax(List<Tax> tax) {
    this.tax = tax;
  }


  public InvoiceEntity termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

  /**
   * Terms And Conditions
   * @return termsAndConditions
   */
  @javax.annotation.Nullable
  public String getTermsAndConditions() {
    return termsAndConditions;
  }

  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }


  public InvoiceEntity totalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  /**
   * Total Price
   * @return totalPrice
   */
  @javax.annotation.Nullable
  public Float getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
  }


  public InvoiceEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceEntity invoiceEntity = (InvoiceEntity) o;
    return Objects.equals(this.address, invoiceEntity.address) &&
        Objects.equals(this.adjustment, invoiceEntity.adjustment) &&
        Objects.equals(this.balance, invoiceEntity.balance) &&
        Objects.equals(this.createdAt, invoiceEntity.createdAt) &&
        Objects.equals(this.currency, invoiceEntity.currency) &&
        Objects.equals(this.description, invoiceEntity.description) &&
        Objects.equals(this.discount, invoiceEntity.discount) &&
        Objects.equals(this.dueDate, invoiceEntity.dueDate) &&
        Objects.equals(this.exciseDuty, invoiceEntity.exciseDuty) &&
        Objects.equals(this.grandTotal, invoiceEntity.grandTotal) &&
        Objects.equals(this.id, invoiceEntity.id) &&
        Objects.equals(this.invoiceDate, invoiceEntity.invoiceDate) &&
        Objects.equals(this.number, invoiceEntity.number) &&
        Objects.equals(this.purchaseOrder, invoiceEntity.purchaseOrder) &&
        Objects.equals(this.received, invoiceEntity.received) &&
        Objects.equals(this.relation, invoiceEntity.relation) &&
        Objects.equals(this.salesCommission, invoiceEntity.salesCommission) &&
        Objects.equals(this.shippingAndHandling, invoiceEntity.shippingAndHandling) &&
        Objects.equals(this.status, invoiceEntity.status) &&
        Objects.equals(this.subject, invoiceEntity.subject) &&
        Objects.equals(this.subtotal, invoiceEntity.subtotal) &&
        Objects.equals(this.tax, invoiceEntity.tax) &&
        Objects.equals(this.termsAndConditions, invoiceEntity.termsAndConditions) &&
        Objects.equals(this.totalPrice, invoiceEntity.totalPrice) &&
        Objects.equals(this.updatedAt, invoiceEntity.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, adjustment, balance, createdAt, currency, description, discount, dueDate, exciseDuty, grandTotal, id, invoiceDate, number, purchaseOrder, received, relation, salesCommission, shippingAndHandling, status, subject, subtotal, tax, termsAndConditions, totalPrice, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceEntity {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    adjustment: ").append(toIndentedString(adjustment)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    exciseDuty: ").append(toIndentedString(exciseDuty)).append("\n");
    sb.append("    grandTotal: ").append(toIndentedString(grandTotal)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    salesCommission: ").append(toIndentedString(salesCommission)).append("\n");
    sb.append("    shippingAndHandling: ").append(toIndentedString(shippingAndHandling)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("adjustment");
    openapiFields.add("balance");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("discount");
    openapiFields.add("due_date");
    openapiFields.add("excise_duty");
    openapiFields.add("grand_total");
    openapiFields.add("id");
    openapiFields.add("invoice_date");
    openapiFields.add("number");
    openapiFields.add("purchase_order");
    openapiFields.add("received");
    openapiFields.add("relation");
    openapiFields.add("sales_commission");
    openapiFields.add("shipping_and_handling");
    openapiFields.add("status");
    openapiFields.add("subject");
    openapiFields.add("subtotal");
    openapiFields.add("tax");
    openapiFields.add("terms_and_conditions");
    openapiFields.add("total_price");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceEntity is not found in the empty JSON string", InvoiceEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            Address.validateJsonElement(jsonArrayaddress.get(i));
          };
        }
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
        JsonArray jsonArraydiscount = jsonObj.getAsJsonArray("discount");
        if (jsonArraydiscount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discount").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discount` to be an array in the JSON string but got `%s`", jsonObj.get("discount").toString()));
          }

          // validate the optional field `discount` (array)
          for (int i = 0; i < jsonArraydiscount.size(); i++) {
            Discount.validateJsonElement(jsonArraydiscount.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("purchase_order") != null && !jsonObj.get("purchase_order").isJsonNull()) && !jsonObj.get("purchase_order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_order").toString()));
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        JsonArray jsonArraytax = jsonObj.getAsJsonArray("tax");
        if (jsonArraytax != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tax").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tax` to be an array in the JSON string but got `%s`", jsonObj.get("tax").toString()));
          }

          // validate the optional field `tax` (array)
          for (int i = 0; i < jsonArraytax.size(); i++) {
            Tax.validateJsonElement(jsonArraytax.get(i));
          };
        }
      }
      if ((jsonObj.get("terms_and_conditions") != null && !jsonObj.get("terms_and_conditions").isJsonNull()) && !jsonObj.get("terms_and_conditions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terms_and_conditions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terms_and_conditions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceEntity>() {
           @Override
           public void write(JsonWriter out, InvoiceEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceEntity
   * @throws IOException if the JSON string is invalid with respect to InvoiceEntity
   */
  public static InvoiceEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceEntity.class);
  }

  /**
   * Convert an instance of InvoiceEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

