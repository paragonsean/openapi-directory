/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FieldEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldEntity {
  public static final String SERIALIZED_NAME_ARRAY_ITEM = "arrayItem";
  @SerializedName(SERIALIZED_NAME_ARRAY_ITEM)
  private String arrayItem;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private List<String> entity = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ENUM = "isEnum";
  @SerializedName(SERIALIZED_NAME_IS_ENUM)
  private Boolean isEnum;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_METHODS = "methods";
  @SerializedName(SERIALIZED_NAME_METHODS)
  private Object methods;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private List<String> relation = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public FieldEntity() {
  }

  public FieldEntity arrayItem(String arrayItem) {
    this.arrayItem = arrayItem;
    return this;
  }

  /**
   * Array Item
   * @return arrayItem
   */
  @javax.annotation.Nullable
  public String getArrayItem() {
    return arrayItem;
  }

  public void setArrayItem(String arrayItem) {
    this.arrayItem = arrayItem;
  }


  public FieldEntity entity(List<String> entity) {
    this.entity = entity;
    return this;
  }

  public FieldEntity addEntityItem(String entityItem) {
    if (this.entity == null) {
      this.entity = new ArrayList<>();
    }
    this.entity.add(entityItem);
    return this;
  }

  /**
   * Entity
   * @return entity
   */
  @javax.annotation.Nullable
  public List<String> getEntity() {
    return entity;
  }

  public void setEntity(List<String> entity) {
    this.entity = entity;
  }


  public FieldEntity format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public FieldEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Field Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FieldEntity isEnum(Boolean isEnum) {
    this.isEnum = isEnum;
    return this;
  }

  /**
   * Is Enum
   * @return isEnum
   */
  @javax.annotation.Nullable
  public Boolean getIsEnum() {
    return isEnum;
  }

  public void setIsEnum(Boolean isEnum) {
    this.isEnum = isEnum;
  }


  public FieldEntity label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public FieldEntity limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public FieldEntity methods(Object methods) {
    this.methods = methods;
    return this;
  }

  /**
   * Get methods
   * @return methods
   */
  @javax.annotation.Nullable
  public Object getMethods() {
    return methods;
  }

  public void setMethods(Object methods) {
    this.methods = methods;
  }


  public FieldEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FieldEntity relation(List<String> relation) {
    this.relation = relation;
    return this;
  }

  public FieldEntity addRelationItem(String relationItem) {
    if (this.relation == null) {
      this.relation = new ArrayList<>();
    }
    this.relation.add(relationItem);
    return this;
  }

  /**
   * Relation
   * @return relation
   */
  @javax.annotation.Nullable
  public List<String> getRelation() {
    return relation;
  }

  public void setRelation(List<String> relation) {
    this.relation = relation;
  }


  public FieldEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldEntity fieldEntity = (FieldEntity) o;
    return Objects.equals(this.arrayItem, fieldEntity.arrayItem) &&
        Objects.equals(this.entity, fieldEntity.entity) &&
        Objects.equals(this.format, fieldEntity.format) &&
        Objects.equals(this.id, fieldEntity.id) &&
        Objects.equals(this.isEnum, fieldEntity.isEnum) &&
        Objects.equals(this.label, fieldEntity.label) &&
        Objects.equals(this.limit, fieldEntity.limit) &&
        Objects.equals(this.methods, fieldEntity.methods) &&
        Objects.equals(this.name, fieldEntity.name) &&
        Objects.equals(this.relation, fieldEntity.relation) &&
        Objects.equals(this.type, fieldEntity.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayItem, entity, format, id, isEnum, label, limit, methods, name, relation, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldEntity {\n");
    sb.append("    arrayItem: ").append(toIndentedString(arrayItem)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isEnum: ").append(toIndentedString(isEnum)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayItem");
    openapiFields.add("entity");
    openapiFields.add("format");
    openapiFields.add("id");
    openapiFields.add("isEnum");
    openapiFields.add("label");
    openapiFields.add("limit");
    openapiFields.add("methods");
    openapiFields.add("name");
    openapiFields.add("relation");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldEntity is not found in the empty JSON string", FieldEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("arrayItem") != null && !jsonObj.get("arrayItem").isJsonNull()) && !jsonObj.get("arrayItem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arrayItem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arrayItem").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull() && !jsonObj.get("entity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity` to be an array in the JSON string but got `%s`", jsonObj.get("entity").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull() && !jsonObj.get("relation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relation` to be an array in the JSON string but got `%s`", jsonObj.get("relation").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldEntity>() {
           @Override
           public void write(JsonWriter out, FieldEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldEntity
   * @throws IOException if the JSON string is invalid with respect to FieldEntity
   */
  public static FieldEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldEntity.class);
  }

  /**
   * Convert an instance of FieldEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

