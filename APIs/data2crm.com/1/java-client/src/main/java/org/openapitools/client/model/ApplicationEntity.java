/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.RequestsLimit;
import org.openapitools.client.model.UserEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationEntity {
  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private String authorization;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private Company company;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_AUTHORIZED = "is_authorized";
  @SerializedName(SERIALIZED_NAME_IS_AUTHORIZED)
  private Boolean isAuthorized;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LAST_USED_AT = "last_used_at";
  @SerializedName(SERIALIZED_NAME_LAST_USED_AT)
  private OffsetDateTime lastUsedAt;

  public static final String SERIALIZED_NAME_ME = "me";
  @SerializedName(SERIALIZED_NAME_ME)
  private UserEntity me;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_REQUESTS_LIMIT = "requests_limit";
  @SerializedName(SERIALIZED_NAME_REQUESTS_LIMIT)
  private RequestsLimit requestsLimit;

  /**
   * Application platform type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BITRIX24("Bitrix24"),
    
    MICROSOFT_DYNAMICS("MicrosoftDynamics"),
    
    VTIGER("Vtiger"),
    
    ZOHO_CRM("ZohoCRM"),
    
    SALESFORCE("Salesforce"),
    
    SALESFORCE_SANDBOX("SalesforceSandbox"),
    
    SOLVE360("Solve360"),
    
    HIGHRISE("Highrise"),
    
    INSIGHTLY("Insightly"),
    
    HUB_SPOT("HubSpot"),
    
    PIPELINE_DEALS("PipelineDeals"),
    
    SUGAR_CRM("SugarCRM"),
    
    SUITE_CRM("SuiteCRM"),
    
    CAPSULE_CRM("CapsuleCRM"),
    
    PIPEDRIVE("Pipedrive"),
    
    INFUSIONSOFT("Infusionsoft"),
    
    CLOSE_IO("CloseIO"),
    
    BASE_CRM("BaseCRM"),
    
    ACT("Act"),
    
    AGILE_CRM("AgileCRM"),
    
    PROSPER_WORKS("ProsperWorks"),
    
    FRESH_SALES("FreshSales"),
    
    ODOO("Odoo"),
    
    G_SUITE("GSuite"),
    
    ACT_PREMIUM_WEB("ActPremiumWeb"),
    
    MARKETO("Marketo"),
    
    AMO_CRM("AmoCRM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USER_KEY = "user_key";
  @SerializedName(SERIALIZED_NAME_USER_KEY)
  private String userKey;

  public ApplicationEntity() {
  }

  public ApplicationEntity authorization(String authorization) {
    this.authorization = authorization;
    return this;
  }

  /**
   * Application authorization
   * @return authorization
   */
  @javax.annotation.Nullable
  public String getAuthorization() {
    return authorization;
  }

  public void setAuthorization(String authorization) {
    this.authorization = authorization;
  }


  public ApplicationEntity company(Company company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public Company getCompany() {
    return company;
  }

  public void setCompany(Company company) {
    this.company = company;
  }


  public ApplicationEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ApplicationEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Application description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationEntity isAuthorized(Boolean isAuthorized) {
    this.isAuthorized = isAuthorized;
    return this;
  }

  /**
   * Is Authorized
   * @return isAuthorized
   */
  @javax.annotation.Nullable
  public Boolean getIsAuthorized() {
    return isAuthorized;
  }

  public void setIsAuthorized(Boolean isAuthorized) {
    this.isAuthorized = isAuthorized;
  }


  public ApplicationEntity key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Application key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public ApplicationEntity lastUsedAt(OffsetDateTime lastUsedAt) {
    this.lastUsedAt = lastUsedAt;
    return this;
  }

  /**
   * Last Used At
   * @return lastUsedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUsedAt() {
    return lastUsedAt;
  }

  public void setLastUsedAt(OffsetDateTime lastUsedAt) {
    this.lastUsedAt = lastUsedAt;
  }


  public ApplicationEntity me(UserEntity me) {
    this.me = me;
    return this;
  }

  /**
   * Get me
   * @return me
   */
  @javax.annotation.Nullable
  public UserEntity getMe() {
    return me;
  }

  public void setMe(UserEntity me) {
    this.me = me;
  }


  public ApplicationEntity plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Application Plan
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public ApplicationEntity requestsLimit(RequestsLimit requestsLimit) {
    this.requestsLimit = requestsLimit;
    return this;
  }

  /**
   * Get requestsLimit
   * @return requestsLimit
   */
  @javax.annotation.Nullable
  public RequestsLimit getRequestsLimit() {
    return requestsLimit;
  }

  public void setRequestsLimit(RequestsLimit requestsLimit) {
    this.requestsLimit = requestsLimit;
  }


  public ApplicationEntity type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Application platform type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ApplicationEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ApplicationEntity url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Application URL
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ApplicationEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public ApplicationEntity userKey(String userKey) {
    this.userKey = userKey;
    return this;
  }

  /**
   * User Key
   * @return userKey
   */
  @javax.annotation.Nullable
  public String getUserKey() {
    return userKey;
  }

  public void setUserKey(String userKey) {
    this.userKey = userKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationEntity applicationEntity = (ApplicationEntity) o;
    return Objects.equals(this.authorization, applicationEntity.authorization) &&
        Objects.equals(this.company, applicationEntity.company) &&
        Objects.equals(this.createdAt, applicationEntity.createdAt) &&
        Objects.equals(this.description, applicationEntity.description) &&
        Objects.equals(this.isAuthorized, applicationEntity.isAuthorized) &&
        Objects.equals(this.key, applicationEntity.key) &&
        Objects.equals(this.lastUsedAt, applicationEntity.lastUsedAt) &&
        Objects.equals(this.me, applicationEntity.me) &&
        Objects.equals(this.plan, applicationEntity.plan) &&
        Objects.equals(this.requestsLimit, applicationEntity.requestsLimit) &&
        Objects.equals(this.type, applicationEntity.type) &&
        Objects.equals(this.updatedAt, applicationEntity.updatedAt) &&
        Objects.equals(this.url, applicationEntity.url) &&
        Objects.equals(this.userId, applicationEntity.userId) &&
        Objects.equals(this.userKey, applicationEntity.userKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorization, company, createdAt, description, isAuthorized, key, lastUsedAt, me, plan, requestsLimit, type, updatedAt, url, userId, userKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationEntity {\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isAuthorized: ").append(toIndentedString(isAuthorized)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastUsedAt: ").append(toIndentedString(lastUsedAt)).append("\n");
    sb.append("    me: ").append(toIndentedString(me)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    requestsLimit: ").append(toIndentedString(requestsLimit)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userKey: ").append(toIndentedString(userKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization");
    openapiFields.add("company");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("is_authorized");
    openapiFields.add("key");
    openapiFields.add("last_used_at");
    openapiFields.add("me");
    openapiFields.add("plan");
    openapiFields.add("requests_limit");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user_id");
    openapiFields.add("user_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationEntity is not found in the empty JSON string", ApplicationEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) && !jsonObj.get("authorization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization").toString()));
      }
      // validate the optional field `company`
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) {
        Company.validateJsonElement(jsonObj.get("company"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `me`
      if (jsonObj.get("me") != null && !jsonObj.get("me").isJsonNull()) {
        UserEntity.validateJsonElement(jsonObj.get("me"));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      // validate the optional field `requests_limit`
      if (jsonObj.get("requests_limit") != null && !jsonObj.get("requests_limit").isJsonNull()) {
        RequestsLimit.validateJsonElement(jsonObj.get("requests_limit"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("user_key") != null && !jsonObj.get("user_key").isJsonNull()) && !jsonObj.get("user_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationEntity>() {
           @Override
           public void write(JsonWriter out, ApplicationEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationEntity
   * @throws IOException if the JSON string is invalid with respect to ApplicationEntity
   */
  public static ApplicationEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationEntity.class);
  }

  /**
   * Convert an instance of ApplicationEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

