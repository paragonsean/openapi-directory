/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Aggregate;
import org.openapitools.client.model.BulkEntity;
import org.openapitools.client.model.BulkEntityRelation;
import org.openapitools.client.model.Count;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UserDescribe;
import org.openapitools.client.model.UserEntity;
import org.openapitools.client.model.UserEntityRelation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUserEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add user into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createUserEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createUserEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUserEntity(Async)");
        }

        return createUserEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST for user
     * Add user into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add user into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return UserEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public UserEntityRelation createUserEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<UserEntityRelation> localVarResp = createUserEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST for user
     * Add user into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add user into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;UserEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEntityRelation> createUserEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<UserEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST for user (asynchronously)
     * Add user into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add user into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<UserEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<UserEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUserEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add user into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/user/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createUserEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createUserEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUserEntityBulk(Async)");
        }

        return createUserEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST bulk  for user
     * Add user into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add user into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation createUserEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = createUserEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST bulk  for user
     * Add user into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add user into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> createUserEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createUserEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST bulk  for user (asynchronously)
     * Add user into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add user into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserCollectionBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCollectionBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/user/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserCollectionBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteUserCollectionBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteUserCollectionBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteUserCollectionBulk(Async)");
        }

        return deleteUserCollectionBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);

    }

    /**
     * DELETE bulk  for user
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return BulkEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntity deleteUserCollectionBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        ApiResponse<BulkEntity> localVarResp = deleteUserCollectionBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body);
        return localVarResp.getData();
    }

    /**
     * DELETE bulk  for user
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;BulkEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntity> deleteUserCollectionBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        okhttp3.Call localVarCall = deleteUserCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, null);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DELETE bulk  for user (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCollectionBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback<BulkEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/user/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteUserEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteUserEntity(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserEntity(Async)");
        }

        return deleteUserEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, _callback);

    }

    /**
     * DELETE for user
     * Delete user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId) throws ApiException {
        deleteUserEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId);
    }

    /**
     * DELETE for user
     * Delete user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * DELETE for user (asynchronously)
     * Delete user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserAggregate
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAggregateCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/user/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pipeline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pipeline", pipeline));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAggregateValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getUserAggregate(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getUserAggregate(Async)");
        }

        return getUserAggregateCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);

    }

    /**
     * AGGREGATE for user
     * Returns aggregate for users
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate getUserAggregate(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        ApiResponse<Aggregate> localVarResp = getUserAggregateWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline);
        return localVarResp.getData();
    }

    /**
     * AGGREGATE for user
     * Returns aggregate for users
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> getUserAggregateWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getUserAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AGGREGATE for user (asynchronously)
     * Returns aggregate for users
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAggregateAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/user/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unique", unique));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getUserCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getUserCollection(Async)");
        }

        return getUserCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);

    }

    /**
     * GET for user
     * Returns all users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return List&lt;UserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<UserEntity> getUserCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        ApiResponse<List<UserEntity>> localVarResp = getUserCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique);
        return localVarResp.getData();
    }

    /**
     * GET for user
     * Returns all users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return ApiResponse&lt;List&lt;UserEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserEntity>> getUserCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        okhttp3.Call localVarCall = getUserCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, null);
        Type localVarReturnType = new TypeToken<List<UserEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for user (asynchronously)
     * Returns all users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback<List<UserEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);
        Type localVarReturnType = new TypeToken<List<UserEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserCountCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCountCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/user/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserCountCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getUserCountCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getUserCountCollection(Async)");
        }

        return getUserCountCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);

    }

    /**
     * COUNT for user
     * Count all users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return Count
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Count getUserCountCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        ApiResponse<Count> localVarResp = getUserCountCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter);
        return localVarResp.getData();
    }

    /**
     * COUNT for user
     * Count all users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;Count&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Count> getUserCountCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        okhttp3.Call localVarCall = getUserCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, null);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * COUNT for user (asynchronously)
     * Count all users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCountCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback<Count> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserDescribe
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserDescribeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/user/describe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserDescribeValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getUserDescribe(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getUserDescribe(Async)");
        }

        return getUserDescribeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * DESCRIBE for user
     * Returns describe for users
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return UserDescribe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserDescribe getUserDescribe(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<UserDescribe> localVarResp = getUserDescribeWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * DESCRIBE for user
     * Returns describe for users
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;UserDescribe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDescribe> getUserDescribeWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = getUserDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<UserDescribe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DESCRIBE for user (asynchronously)
     * Returns describe for users
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserDescribeAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<UserDescribe> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<UserDescribe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/user/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getUserEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getUserEntity(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserEntity(Async)");
        }

        return getUserEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);

    }

    /**
     * GET for user
     * Return user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return UserEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserEntity getUserEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        ApiResponse<UserEntity> localVarResp = getUserEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields);
        return localVarResp.getData();
    }

    /**
     * GET for user
     * Return user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return ApiResponse&lt;UserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEntity> getUserEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        okhttp3.Call localVarCall = getUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, null);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for user (asynchronously)
     * Return user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback<UserEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param body Update user information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/user/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateUserEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateUserEntity(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserEntity(Async)");
        }

        return updateUserEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT for user
     * Update user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param body Update user information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return UserEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public UserEntityRelation updateUserEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<UserEntityRelation> localVarResp = updateUserEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT for user
     * Update user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param body Update user information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;UserEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEntityRelation> updateUserEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<UserEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT for user (asynchronously)
     * Update user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param userId User Identifier (required)
     * @param body Update user information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String userId, UserEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<UserEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, userId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<UserEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/user/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateUserEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateUserEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserEntityBulk(Async)");
        }

        return updateUserEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT bulk  for user
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation updateUserEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = updateUserEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT bulk  for user
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> updateUserEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateUserEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT bulk  for user (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
