/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.Relation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OpportunityEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OpportunityEntity {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDED_AT = "ended_at";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private OffsetDateTime endedAt;

  public static final String SERIALIZED_NAME_EXPECTED_AMOUNT = "expected_amount";
  @SerializedName(SERIALIZED_NAME_EXPECTED_AMOUNT)
  private Float expectedAmount;

  public static final String SERIALIZED_NAME_EXPECTED_END_AT = "expected_end_at";
  @SerializedName(SERIALIZED_NAME_EXPECTED_END_AT)
  private OffsetDateTime expectedEndAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LEAD_SOURCE = "lead_source";
  @SerializedName(SERIALIZED_NAME_LEAD_SOURCE)
  private String leadSource;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_STEP = "next_step";
  @SerializedName(SERIALIZED_NAME_NEXT_STEP)
  private String nextStep;

  public static final String SERIALIZED_NAME_PIPELINE_WITH_STAGE = "pipeline_with_stage";
  @SerializedName(SERIALIZED_NAME_PIPELINE_WITH_STAGE)
  private String pipelineWithStage;

  public static final String SERIALIZED_NAME_PROBABILITY = "probability";
  @SerializedName(SERIALIZED_NAME_PROBABILITY)
  private Integer probability;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public OpportunityEntity() {
  }

  public OpportunityEntity amount(Float amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Float getAmount() {
    return amount;
  }

  public void setAmount(Float amount) {
    this.amount = amount;
  }


  public OpportunityEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OpportunityEntity currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public OpportunityEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OpportunityEntity endedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * Closed At
   * @return endedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
  }


  public OpportunityEntity expectedAmount(Float expectedAmount) {
    this.expectedAmount = expectedAmount;
    return this;
  }

  /**
   * Expected Amount
   * @return expectedAmount
   */
  @javax.annotation.Nullable
  public Float getExpectedAmount() {
    return expectedAmount;
  }

  public void setExpectedAmount(Float expectedAmount) {
    this.expectedAmount = expectedAmount;
  }


  public OpportunityEntity expectedEndAt(OffsetDateTime expectedEndAt) {
    this.expectedEndAt = expectedEndAt;
    return this;
  }

  /**
   * Expected End At
   * @return expectedEndAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedEndAt() {
    return expectedEndAt;
  }

  public void setExpectedEndAt(OffsetDateTime expectedEndAt) {
    this.expectedEndAt = expectedEndAt;
  }


  public OpportunityEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Opportunity Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OpportunityEntity leadSource(String leadSource) {
    this.leadSource = leadSource;
    return this;
  }

  /**
   * Lead Source
   * @return leadSource
   */
  @javax.annotation.Nullable
  public String getLeadSource() {
    return leadSource;
  }

  public void setLeadSource(String leadSource) {
    this.leadSource = leadSource;
  }


  public OpportunityEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OpportunityEntity nextStep(String nextStep) {
    this.nextStep = nextStep;
    return this;
  }

  /**
   * Next Step
   * @return nextStep
   */
  @javax.annotation.Nullable
  public String getNextStep() {
    return nextStep;
  }

  public void setNextStep(String nextStep) {
    this.nextStep = nextStep;
  }


  public OpportunityEntity pipelineWithStage(String pipelineWithStage) {
    this.pipelineWithStage = pipelineWithStage;
    return this;
  }

  /**
   * Pipeline With Stage
   * @return pipelineWithStage
   */
  @javax.annotation.Nullable
  public String getPipelineWithStage() {
    return pipelineWithStage;
  }

  public void setPipelineWithStage(String pipelineWithStage) {
    this.pipelineWithStage = pipelineWithStage;
  }


  public OpportunityEntity probability(Integer probability) {
    this.probability = probability;
    return this;
  }

  /**
   * Probability
   * @return probability
   */
  @javax.annotation.Nullable
  public Integer getProbability() {
    return probability;
  }

  public void setProbability(Integer probability) {
    this.probability = probability;
  }


  public OpportunityEntity relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public OpportunityEntity state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public OpportunityEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public OpportunityEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpportunityEntity opportunityEntity = (OpportunityEntity) o;
    return Objects.equals(this.amount, opportunityEntity.amount) &&
        Objects.equals(this.createdAt, opportunityEntity.createdAt) &&
        Objects.equals(this.currency, opportunityEntity.currency) &&
        Objects.equals(this.description, opportunityEntity.description) &&
        Objects.equals(this.endedAt, opportunityEntity.endedAt) &&
        Objects.equals(this.expectedAmount, opportunityEntity.expectedAmount) &&
        Objects.equals(this.expectedEndAt, opportunityEntity.expectedEndAt) &&
        Objects.equals(this.id, opportunityEntity.id) &&
        Objects.equals(this.leadSource, opportunityEntity.leadSource) &&
        Objects.equals(this.name, opportunityEntity.name) &&
        Objects.equals(this.nextStep, opportunityEntity.nextStep) &&
        Objects.equals(this.pipelineWithStage, opportunityEntity.pipelineWithStage) &&
        Objects.equals(this.probability, opportunityEntity.probability) &&
        Objects.equals(this.relation, opportunityEntity.relation) &&
        Objects.equals(this.state, opportunityEntity.state) &&
        Objects.equals(this.type, opportunityEntity.type) &&
        Objects.equals(this.updatedAt, opportunityEntity.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, createdAt, currency, description, endedAt, expectedAmount, expectedEndAt, id, leadSource, name, nextStep, pipelineWithStage, probability, relation, state, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpportunityEntity {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    expectedAmount: ").append(toIndentedString(expectedAmount)).append("\n");
    sb.append("    expectedEndAt: ").append(toIndentedString(expectedEndAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    leadSource: ").append(toIndentedString(leadSource)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextStep: ").append(toIndentedString(nextStep)).append("\n");
    sb.append("    pipelineWithStage: ").append(toIndentedString(pipelineWithStage)).append("\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("ended_at");
    openapiFields.add("expected_amount");
    openapiFields.add("expected_end_at");
    openapiFields.add("id");
    openapiFields.add("lead_source");
    openapiFields.add("name");
    openapiFields.add("next_step");
    openapiFields.add("pipeline_with_stage");
    openapiFields.add("probability");
    openapiFields.add("relation");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpportunityEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpportunityEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpportunityEntity is not found in the empty JSON string", OpportunityEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpportunityEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpportunityEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lead_source") != null && !jsonObj.get("lead_source").isJsonNull()) && !jsonObj.get("lead_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lead_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lead_source").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("next_step") != null && !jsonObj.get("next_step").isJsonNull()) && !jsonObj.get("next_step").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_step` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_step").toString()));
      }
      if ((jsonObj.get("pipeline_with_stage") != null && !jsonObj.get("pipeline_with_stage").isJsonNull()) && !jsonObj.get("pipeline_with_stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipeline_with_stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipeline_with_stage").toString()));
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpportunityEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpportunityEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpportunityEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpportunityEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<OpportunityEntity>() {
           @Override
           public void write(JsonWriter out, OpportunityEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpportunityEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpportunityEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpportunityEntity
   * @throws IOException if the JSON string is invalid with respect to OpportunityEntity
   */
  public static OpportunityEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpportunityEntity.class);
  }

  /**
   * Convert an instance of OpportunityEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

