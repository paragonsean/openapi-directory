/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Relation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CasesEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CasesEntity {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDED_AT = "ended_at";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private OffsetDateTime endedAt;

  public static final String SERIALIZED_NAME_EXPECTED_END_AT = "expected_end_at";
  @SerializedName(SERIALIZED_NAME_EXPECTED_END_AT)
  private OffsetDateTime expectedEndAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERNAL_COMMENTS = "internal_comments";
  @SerializedName(SERIALIZED_NAME_INTERNAL_COMMENTS)
  private String internalComments;

  public static final String SERIALIZED_NAME_IS_CLOSED = "is_closed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_IS_ESCALATED = "is_escalated";
  @SerializedName(SERIALIZED_NAME_IS_ESCALATED)
  private Boolean isEscalated;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_PIPELINE_WITH_STAGE = "pipeline_with_stage";
  @SerializedName(SERIALIZED_NAME_PIPELINE_WITH_STAGE)
  private String pipelineWithStage;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private String resolution;

  public static final String SERIALIZED_NAME_RESOLUTION_COMMENTS = "resolution_comments";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_COMMENTS)
  private String resolutionComments;

  public static final String SERIALIZED_NAME_SATISFACTION = "satisfaction";
  @SerializedName(SERIALIZED_NAME_SATISFACTION)
  private String satisfaction;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public CasesEntity() {
  }

  public CasesEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CasesEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CasesEntity endedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * Ended At
   * @return endedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
  }


  public CasesEntity expectedEndAt(OffsetDateTime expectedEndAt) {
    this.expectedEndAt = expectedEndAt;
    return this;
  }

  /**
   * Expected End At
   * @return expectedEndAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedEndAt() {
    return expectedEndAt;
  }

  public void setExpectedEndAt(OffsetDateTime expectedEndAt) {
    this.expectedEndAt = expectedEndAt;
  }


  public CasesEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Case Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CasesEntity internalComments(String internalComments) {
    this.internalComments = internalComments;
    return this;
  }

  /**
   * Internal Comments
   * @return internalComments
   */
  @javax.annotation.Nullable
  public String getInternalComments() {
    return internalComments;
  }

  public void setInternalComments(String internalComments) {
    this.internalComments = internalComments;
  }


  public CasesEntity isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Is Closed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public CasesEntity isEscalated(Boolean isEscalated) {
    this.isEscalated = isEscalated;
    return this;
  }

  /**
   * Is Escalated
   * @return isEscalated
   */
  @javax.annotation.Nullable
  public Boolean getIsEscalated() {
    return isEscalated;
  }

  public void setIsEscalated(Boolean isEscalated) {
    this.isEscalated = isEscalated;
  }


  public CasesEntity number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Number
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public CasesEntity origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Origin
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public CasesEntity pipelineWithStage(String pipelineWithStage) {
    this.pipelineWithStage = pipelineWithStage;
    return this;
  }

  /**
   * Pipeline With Stage
   * @return pipelineWithStage
   */
  @javax.annotation.Nullable
  public String getPipelineWithStage() {
    return pipelineWithStage;
  }

  public void setPipelineWithStage(String pipelineWithStage) {
    this.pipelineWithStage = pipelineWithStage;
  }


  public CasesEntity priority(String priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority
   * @return priority
   */
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }


  public CasesEntity reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public CasesEntity relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public CasesEntity resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  public String getResolution() {
    return resolution;
  }

  public void setResolution(String resolution) {
    this.resolution = resolution;
  }


  public CasesEntity resolutionComments(String resolutionComments) {
    this.resolutionComments = resolutionComments;
    return this;
  }

  /**
   * Resolution Comments
   * @return resolutionComments
   */
  @javax.annotation.Nullable
  public String getResolutionComments() {
    return resolutionComments;
  }

  public void setResolutionComments(String resolutionComments) {
    this.resolutionComments = resolutionComments;
  }


  public CasesEntity satisfaction(String satisfaction) {
    this.satisfaction = satisfaction;
    return this;
  }

  /**
   * Satisfaction
   * @return satisfaction
   */
  @javax.annotation.Nullable
  public String getSatisfaction() {
    return satisfaction;
  }

  public void setSatisfaction(String satisfaction) {
    this.satisfaction = satisfaction;
  }


  public CasesEntity status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public CasesEntity subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CasesEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CasesEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CasesEntity casesEntity = (CasesEntity) o;
    return Objects.equals(this.createdAt, casesEntity.createdAt) &&
        Objects.equals(this.description, casesEntity.description) &&
        Objects.equals(this.endedAt, casesEntity.endedAt) &&
        Objects.equals(this.expectedEndAt, casesEntity.expectedEndAt) &&
        Objects.equals(this.id, casesEntity.id) &&
        Objects.equals(this.internalComments, casesEntity.internalComments) &&
        Objects.equals(this.isClosed, casesEntity.isClosed) &&
        Objects.equals(this.isEscalated, casesEntity.isEscalated) &&
        Objects.equals(this.number, casesEntity.number) &&
        Objects.equals(this.origin, casesEntity.origin) &&
        Objects.equals(this.pipelineWithStage, casesEntity.pipelineWithStage) &&
        Objects.equals(this.priority, casesEntity.priority) &&
        Objects.equals(this.reason, casesEntity.reason) &&
        Objects.equals(this.relation, casesEntity.relation) &&
        Objects.equals(this.resolution, casesEntity.resolution) &&
        Objects.equals(this.resolutionComments, casesEntity.resolutionComments) &&
        Objects.equals(this.satisfaction, casesEntity.satisfaction) &&
        Objects.equals(this.status, casesEntity.status) &&
        Objects.equals(this.subject, casesEntity.subject) &&
        Objects.equals(this.type, casesEntity.type) &&
        Objects.equals(this.updatedAt, casesEntity.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, description, endedAt, expectedEndAt, id, internalComments, isClosed, isEscalated, number, origin, pipelineWithStage, priority, reason, relation, resolution, resolutionComments, satisfaction, status, subject, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CasesEntity {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    expectedEndAt: ").append(toIndentedString(expectedEndAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalComments: ").append(toIndentedString(internalComments)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    isEscalated: ").append(toIndentedString(isEscalated)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    pipelineWithStage: ").append(toIndentedString(pipelineWithStage)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    resolutionComments: ").append(toIndentedString(resolutionComments)).append("\n");
    sb.append("    satisfaction: ").append(toIndentedString(satisfaction)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("ended_at");
    openapiFields.add("expected_end_at");
    openapiFields.add("id");
    openapiFields.add("internal_comments");
    openapiFields.add("is_closed");
    openapiFields.add("is_escalated");
    openapiFields.add("number");
    openapiFields.add("origin");
    openapiFields.add("pipeline_with_stage");
    openapiFields.add("priority");
    openapiFields.add("reason");
    openapiFields.add("relation");
    openapiFields.add("resolution");
    openapiFields.add("resolution_comments");
    openapiFields.add("satisfaction");
    openapiFields.add("status");
    openapiFields.add("subject");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CasesEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CasesEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CasesEntity is not found in the empty JSON string", CasesEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CasesEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CasesEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("internal_comments") != null && !jsonObj.get("internal_comments").isJsonNull()) && !jsonObj.get("internal_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internal_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internal_comments").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("pipeline_with_stage") != null && !jsonObj.get("pipeline_with_stage").isJsonNull()) && !jsonObj.get("pipeline_with_stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipeline_with_stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipeline_with_stage").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      if ((jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) && !jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      if ((jsonObj.get("resolution_comments") != null && !jsonObj.get("resolution_comments").isJsonNull()) && !jsonObj.get("resolution_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution_comments").toString()));
      }
      if ((jsonObj.get("satisfaction") != null && !jsonObj.get("satisfaction").isJsonNull()) && !jsonObj.get("satisfaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `satisfaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("satisfaction").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CasesEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CasesEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CasesEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CasesEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<CasesEntity>() {
           @Override
           public void write(JsonWriter out, CasesEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CasesEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CasesEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CasesEntity
   * @throws IOException if the JSON string is invalid with respect to CasesEntity
   */
  public static CasesEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CasesEntity.class);
  }

  /**
   * Convert an instance of CasesEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

