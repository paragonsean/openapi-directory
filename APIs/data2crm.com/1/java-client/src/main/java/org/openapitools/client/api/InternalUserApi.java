/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Count;
import org.openapitools.client.model.InternalUserEntity;
import org.openapitools.client.model.InternalUserEntityRelation;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InternalUserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InternalUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InternalUserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createInternalUserEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInternalUserEntityCall(String X_API2CRM_USER_KEY, InternalUserEntity body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInternalUserEntityValidateBeforeCall(String X_API2CRM_USER_KEY, InternalUserEntity body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createInternalUserEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createInternalUserEntity(Async)");
        }

        return createInternalUserEntityCall(X_API2CRM_USER_KEY, body, _callback);

    }

    /**
     * POST for internalUser
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param body  (required)
     * @return InternalUserEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public InternalUserEntityRelation createInternalUserEntity(String X_API2CRM_USER_KEY, InternalUserEntity body) throws ApiException {
        ApiResponse<InternalUserEntityRelation> localVarResp = createInternalUserEntityWithHttpInfo(X_API2CRM_USER_KEY, body);
        return localVarResp.getData();
    }

    /**
     * POST for internalUser
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;InternalUserEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InternalUserEntityRelation> createInternalUserEntityWithHttpInfo(String X_API2CRM_USER_KEY, InternalUserEntity body) throws ApiException {
        okhttp3.Call localVarCall = createInternalUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, body, null);
        Type localVarReturnType = new TypeToken<InternalUserEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST for internalUser (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInternalUserEntityAsync(String X_API2CRM_USER_KEY, InternalUserEntity body, final ApiCallback<InternalUserEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInternalUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, body, _callback);
        Type localVarReturnType = new TypeToken<InternalUserEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteInternalUserEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInternalUserEntityCall(String X_API2CRM_USER_KEY, String internalUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{internal_user_id}"
            .replace("{" + "internal_user_id" + "}", localVarApiClient.escapeString(internalUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInternalUserEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String internalUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteInternalUserEntity(Async)");
        }

        // verify the required parameter 'internalUserId' is set
        if (internalUserId == null) {
            throw new ApiException("Missing the required parameter 'internalUserId' when calling deleteInternalUserEntity(Async)");
        }

        return deleteInternalUserEntityCall(X_API2CRM_USER_KEY, internalUserId, _callback);

    }

    /**
     * DELETE for internalUser
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteInternalUserEntity(String X_API2CRM_USER_KEY, String internalUserId) throws ApiException {
        deleteInternalUserEntityWithHttpInfo(X_API2CRM_USER_KEY, internalUserId);
    }

    /**
     * DELETE for internalUser
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteInternalUserEntityWithHttpInfo(String X_API2CRM_USER_KEY, String internalUserId) throws ApiException {
        okhttp3.Call localVarCall = deleteInternalUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, internalUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * DELETE for internalUser (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInternalUserEntityAsync(String X_API2CRM_USER_KEY, String internalUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInternalUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, internalUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInternalUserCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param applicationRequestStart All Application Requests from this date (optional)
     * @param applicationRequestEnd All Application Requests until this date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInternalUserCollectionCall(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String filter, String fields, String sort, LocalDate applicationRequestStart, LocalDate applicationRequestEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (applicationRequestStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_request_start", applicationRequestStart));
        }

        if (applicationRequestEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_request_end", applicationRequestEnd));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInternalUserCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String filter, String fields, String sort, LocalDate applicationRequestStart, LocalDate applicationRequestEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getInternalUserCollection(Async)");
        }

        return getInternalUserCollectionCall(X_API2CRM_USER_KEY, pageSize, page, filter, fields, sort, applicationRequestStart, applicationRequestEnd, _callback);

    }

    /**
     * GET for internalUser
     * Returns all internal users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param applicationRequestStart All Application Requests from this date (optional)
     * @param applicationRequestEnd All Application Requests until this date (optional)
     * @return List&lt;InternalUserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<InternalUserEntity> getInternalUserCollection(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String filter, String fields, String sort, LocalDate applicationRequestStart, LocalDate applicationRequestEnd) throws ApiException {
        ApiResponse<List<InternalUserEntity>> localVarResp = getInternalUserCollectionWithHttpInfo(X_API2CRM_USER_KEY, pageSize, page, filter, fields, sort, applicationRequestStart, applicationRequestEnd);
        return localVarResp.getData();
    }

    /**
     * GET for internalUser
     * Returns all internal users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param applicationRequestStart All Application Requests from this date (optional)
     * @param applicationRequestEnd All Application Requests until this date (optional)
     * @return ApiResponse&lt;List&lt;InternalUserEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InternalUserEntity>> getInternalUserCollectionWithHttpInfo(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String filter, String fields, String sort, LocalDate applicationRequestStart, LocalDate applicationRequestEnd) throws ApiException {
        okhttp3.Call localVarCall = getInternalUserCollectionValidateBeforeCall(X_API2CRM_USER_KEY, pageSize, page, filter, fields, sort, applicationRequestStart, applicationRequestEnd, null);
        Type localVarReturnType = new TypeToken<List<InternalUserEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for internalUser (asynchronously)
     * Returns all internal users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param applicationRequestStart All Application Requests from this date (optional)
     * @param applicationRequestEnd All Application Requests until this date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInternalUserCollectionAsync(String X_API2CRM_USER_KEY, Integer pageSize, Integer page, String filter, String fields, String sort, LocalDate applicationRequestStart, LocalDate applicationRequestEnd, final ApiCallback<List<InternalUserEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInternalUserCollectionValidateBeforeCall(X_API2CRM_USER_KEY, pageSize, page, filter, fields, sort, applicationRequestStart, applicationRequestEnd, _callback);
        Type localVarReturnType = new TypeToken<List<InternalUserEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInternalUserCountCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param filter Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInternalUserCountCollectionCall(String X_API2CRM_USER_KEY, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInternalUserCountCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getInternalUserCountCollection(Async)");
        }

        return getInternalUserCountCollectionCall(X_API2CRM_USER_KEY, filter, _callback);

    }

    /**
     * COUNT for internalUser
     * Count all internal users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param filter Filter (optional)
     * @return Count
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Count getInternalUserCountCollection(String X_API2CRM_USER_KEY, String filter) throws ApiException {
        ApiResponse<Count> localVarResp = getInternalUserCountCollectionWithHttpInfo(X_API2CRM_USER_KEY, filter);
        return localVarResp.getData();
    }

    /**
     * COUNT for internalUser
     * Count all internal users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;Count&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Count> getInternalUserCountCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String filter) throws ApiException {
        okhttp3.Call localVarCall = getInternalUserCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, filter, null);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * COUNT for internalUser (asynchronously)
     * Count all internal users from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param filter Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInternalUserCountCollectionAsync(String X_API2CRM_USER_KEY, String filter, final ApiCallback<Count> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInternalUserCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, filter, _callback);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInternalUserEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param applicationRequestStart All Application Requests from this date (optional)
     * @param applicationRequestEnd All Application Requests until this date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInternalUserEntityCall(String X_API2CRM_USER_KEY, String internalUserId, String fields, LocalDate applicationRequestStart, LocalDate applicationRequestEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{internal_user_id}"
            .replace("{" + "internal_user_id" + "}", localVarApiClient.escapeString(internalUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (applicationRequestStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_request_start", applicationRequestStart));
        }

        if (applicationRequestEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_request_end", applicationRequestEnd));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInternalUserEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String internalUserId, String fields, LocalDate applicationRequestStart, LocalDate applicationRequestEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getInternalUserEntity(Async)");
        }

        // verify the required parameter 'internalUserId' is set
        if (internalUserId == null) {
            throw new ApiException("Missing the required parameter 'internalUserId' when calling getInternalUserEntity(Async)");
        }

        return getInternalUserEntityCall(X_API2CRM_USER_KEY, internalUserId, fields, applicationRequestStart, applicationRequestEnd, _callback);

    }

    /**
     * GET for internalUser
     * Return internal user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param applicationRequestStart All Application Requests from this date (optional)
     * @param applicationRequestEnd All Application Requests until this date (optional)
     * @return InternalUserEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public InternalUserEntity getInternalUserEntity(String X_API2CRM_USER_KEY, String internalUserId, String fields, LocalDate applicationRequestStart, LocalDate applicationRequestEnd) throws ApiException {
        ApiResponse<InternalUserEntity> localVarResp = getInternalUserEntityWithHttpInfo(X_API2CRM_USER_KEY, internalUserId, fields, applicationRequestStart, applicationRequestEnd);
        return localVarResp.getData();
    }

    /**
     * GET for internalUser
     * Return internal user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param applicationRequestStart All Application Requests from this date (optional)
     * @param applicationRequestEnd All Application Requests until this date (optional)
     * @return ApiResponse&lt;InternalUserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InternalUserEntity> getInternalUserEntityWithHttpInfo(String X_API2CRM_USER_KEY, String internalUserId, String fields, LocalDate applicationRequestStart, LocalDate applicationRequestEnd) throws ApiException {
        okhttp3.Call localVarCall = getInternalUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, internalUserId, fields, applicationRequestStart, applicationRequestEnd, null);
        Type localVarReturnType = new TypeToken<InternalUserEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for internalUser (asynchronously)
     * Return internal user information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param applicationRequestStart All Application Requests from this date (optional)
     * @param applicationRequestEnd All Application Requests until this date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInternalUserEntityAsync(String X_API2CRM_USER_KEY, String internalUserId, String fields, LocalDate applicationRequestStart, LocalDate applicationRequestEnd, final ApiCallback<InternalUserEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInternalUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, internalUserId, fields, applicationRequestStart, applicationRequestEnd, _callback);
        Type localVarReturnType = new TypeToken<InternalUserEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInternalUserEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInternalUserEntityCall(String X_API2CRM_USER_KEY, String internalUserId, InternalUserEntity body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/{internal_user_id}"
            .replace("{" + "internal_user_id" + "}", localVarApiClient.escapeString(internalUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInternalUserEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String internalUserId, InternalUserEntity body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateInternalUserEntity(Async)");
        }

        // verify the required parameter 'internalUserId' is set
        if (internalUserId == null) {
            throw new ApiException("Missing the required parameter 'internalUserId' when calling updateInternalUserEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInternalUserEntity(Async)");
        }

        return updateInternalUserEntityCall(X_API2CRM_USER_KEY, internalUserId, body, _callback);

    }

    /**
     * PUT for internalUser
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param body  (required)
     * @return InternalUserEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public InternalUserEntityRelation updateInternalUserEntity(String X_API2CRM_USER_KEY, String internalUserId, InternalUserEntity body) throws ApiException {
        ApiResponse<InternalUserEntityRelation> localVarResp = updateInternalUserEntityWithHttpInfo(X_API2CRM_USER_KEY, internalUserId, body);
        return localVarResp.getData();
    }

    /**
     * PUT for internalUser
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;InternalUserEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InternalUserEntityRelation> updateInternalUserEntityWithHttpInfo(String X_API2CRM_USER_KEY, String internalUserId, InternalUserEntity body) throws ApiException {
        okhttp3.Call localVarCall = updateInternalUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, internalUserId, body, null);
        Type localVarReturnType = new TypeToken<InternalUserEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT for internalUser (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param internalUserId Internal User Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInternalUserEntityAsync(String X_API2CRM_USER_KEY, String internalUserId, InternalUserEntity body, final ApiCallback<InternalUserEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInternalUserEntityValidateBeforeCall(X_API2CRM_USER_KEY, internalUserId, body, _callback);
        Type localVarReturnType = new TypeToken<InternalUserEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
