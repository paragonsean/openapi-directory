/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Aggregate;
import org.openapitools.client.model.BulkEntity;
import org.openapitools.client.model.BulkEntityRelation;
import org.openapitools.client.model.Count;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProjectDescribe;
import org.openapitools.client.model.ProjectEntity;
import org.openapitools.client.model.ProjectEntityRelation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProjectEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add project into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createProjectEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createProjectEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createProjectEntity(Async)");
        }

        return createProjectEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST for project
     * Add project into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add project into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ProjectEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ProjectEntityRelation createProjectEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<ProjectEntityRelation> localVarResp = createProjectEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST for project
     * Add project into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add project into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;ProjectEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectEntityRelation> createProjectEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createProjectEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<ProjectEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST for project (asynchronously)
     * Add project into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add project into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<ProjectEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<ProjectEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add project into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/project/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createProjectEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createProjectEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createProjectEntityBulk(Async)");
        }

        return createProjectEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST bulk  for project
     * Add project into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add project into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation createProjectEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = createProjectEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST bulk  for project
     * Add project into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add project into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> createProjectEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createProjectEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST bulk  for project (asynchronously)
     * Add project into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add project into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectCollectionBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCollectionBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/project/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectCollectionBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteProjectCollectionBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteProjectCollectionBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteProjectCollectionBulk(Async)");
        }

        return deleteProjectCollectionBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);

    }

    /**
     * DELETE bulk  for project
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return BulkEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntity deleteProjectCollectionBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        ApiResponse<BulkEntity> localVarResp = deleteProjectCollectionBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body);
        return localVarResp.getData();
    }

    /**
     * DELETE bulk  for project
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;BulkEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntity> deleteProjectCollectionBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, null);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DELETE bulk  for project (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCollectionBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback<BulkEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/project/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteProjectEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteProjectEntity(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectEntity(Async)");
        }

        return deleteProjectEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, _callback);

    }

    /**
     * DELETE for project
     * Delete project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId) throws ApiException {
        deleteProjectEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId);
    }

    /**
     * DELETE for project
     * Delete project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * DELETE for project (asynchronously)
     * Delete project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectAggregate
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAggregateCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/project/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pipeline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pipeline", pipeline));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectAggregateValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getProjectAggregate(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getProjectAggregate(Async)");
        }

        return getProjectAggregateCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);

    }

    /**
     * AGGREGATE for project
     * Returns aggregate for projects
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate getProjectAggregate(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        ApiResponse<Aggregate> localVarResp = getProjectAggregateWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline);
        return localVarResp.getData();
    }

    /**
     * AGGREGATE for project
     * Returns aggregate for projects
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> getProjectAggregateWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getProjectAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AGGREGATE for project (asynchronously)
     * Returns aggregate for projects
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAggregateAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/project/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unique", unique));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getProjectCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getProjectCollection(Async)");
        }

        return getProjectCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);

    }

    /**
     * GET for project
     * Returns all projects from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return List&lt;ProjectEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectEntity> getProjectCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        ApiResponse<List<ProjectEntity>> localVarResp = getProjectCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique);
        return localVarResp.getData();
    }

    /**
     * GET for project
     * Returns all projects from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return ApiResponse&lt;List&lt;ProjectEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectEntity>> getProjectCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        okhttp3.Call localVarCall = getProjectCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, null);
        Type localVarReturnType = new TypeToken<List<ProjectEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for project (asynchronously)
     * Returns all projects from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback<List<ProjectEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectCountCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCountCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/project/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectCountCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getProjectCountCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getProjectCountCollection(Async)");
        }

        return getProjectCountCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);

    }

    /**
     * COUNT for project
     * Count all projects from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return Count
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Count getProjectCountCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        ApiResponse<Count> localVarResp = getProjectCountCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter);
        return localVarResp.getData();
    }

    /**
     * COUNT for project
     * Count all projects from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;Count&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Count> getProjectCountCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        okhttp3.Call localVarCall = getProjectCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, null);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * COUNT for project (asynchronously)
     * Count all projects from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCountCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback<Count> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectDescribe
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectDescribeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/project/describe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectDescribeValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getProjectDescribe(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getProjectDescribe(Async)");
        }

        return getProjectDescribeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * DESCRIBE for project
     * Returns describe for projects
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ProjectDescribe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDescribe getProjectDescribe(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<ProjectDescribe> localVarResp = getProjectDescribeWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * DESCRIBE for project
     * Returns describe for projects
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;ProjectDescribe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDescribe> getProjectDescribeWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = getProjectDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<ProjectDescribe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DESCRIBE for project (asynchronously)
     * Returns describe for projects
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectDescribeAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<ProjectDescribe> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<ProjectDescribe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/project/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getProjectEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getProjectEntity(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectEntity(Async)");
        }

        return getProjectEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);

    }

    /**
     * GET for project
     * Return project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return ProjectEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProjectEntity getProjectEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        ApiResponse<ProjectEntity> localVarResp = getProjectEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields);
        return localVarResp.getData();
    }

    /**
     * GET for project
     * Return project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return ApiResponse&lt;ProjectEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectEntity> getProjectEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        okhttp3.Call localVarCall = getProjectEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, null);
        Type localVarReturnType = new TypeToken<ProjectEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for project (asynchronously)
     * Return project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback<ProjectEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);
        Type localVarReturnType = new TypeToken<ProjectEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param body Update project information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/project/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateProjectEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateProjectEntity(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateProjectEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProjectEntity(Async)");
        }

        return updateProjectEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT for project
     * Update project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param body Update project information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ProjectEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ProjectEntityRelation updateProjectEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<ProjectEntityRelation> localVarResp = updateProjectEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT for project
     * Update project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param body Update project information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;ProjectEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectEntityRelation> updateProjectEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateProjectEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<ProjectEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT for project (asynchronously)
     * Update project information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param projectId Project Identifier (required)
     * @param body Update project information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String projectId, ProjectEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<ProjectEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, projectId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<ProjectEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/project/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateProjectEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateProjectEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProjectEntityBulk(Async)");
        }

        return updateProjectEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT bulk  for project
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation updateProjectEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = updateProjectEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT bulk  for project
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> updateProjectEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateProjectEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT bulk  for project (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
