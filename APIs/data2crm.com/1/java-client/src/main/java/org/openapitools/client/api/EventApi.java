/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Aggregate;
import org.openapitools.client.model.BulkEntity;
import org.openapitools.client.model.BulkEntityRelation;
import org.openapitools.client.model.Count;
import org.openapitools.client.model.EventDescribe;
import org.openapitools.client.model.EventEntity;
import org.openapitools.client.model.EventEntityRelation;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createEventEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add event into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createEventEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createEventEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createEventEntity(Async)");
        }

        return createEventEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST for event
     * Add event into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add event into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return EventEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public EventEntityRelation createEventEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<EventEntityRelation> localVarResp = createEventEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST for event
     * Add event into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add event into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;EventEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventEntityRelation> createEventEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createEventEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<EventEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST for event (asynchronously)
     * Add event into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add event into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<EventEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<EventEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEventEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add event into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/event/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling createEventEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling createEventEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createEventEntityBulk(Async)");
        }

        return createEventEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * POST bulk  for event
     * Add event into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add event into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation createEventEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = createEventEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * POST bulk  for event
     * Add event into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add event into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> createEventEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = createEventEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST bulk  for event (asynchronously)
     * Add event into the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body Add event into the system (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEventCollectionBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventCollectionBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/event/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventCollectionBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteEventCollectionBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteEventCollectionBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteEventCollectionBulk(Async)");
        }

        return deleteEventCollectionBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);

    }

    /**
     * DELETE bulk  for event
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return BulkEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntity deleteEventCollectionBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        ApiResponse<BulkEntity> localVarResp = deleteEventCollectionBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body);
        return localVarResp.getData();
    }

    /**
     * DELETE bulk  for event
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @return ApiResponse&lt;BulkEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntity> deleteEventCollectionBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body) throws ApiException {
        okhttp3.Call localVarCall = deleteEventCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, null);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DELETE bulk  for event (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventCollectionBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, final ApiCallback<BulkEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventCollectionBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, _callback);
        Type localVarReturnType = new TypeToken<BulkEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEventEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/event/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling deleteEventEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling deleteEventEntity(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling deleteEventEntity(Async)");
        }

        return deleteEventEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, _callback);

    }

    /**
     * DELETE for event
     * Delete event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEventEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId) throws ApiException {
        deleteEventEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId);
    }

    /**
     * DELETE for event
     * Delete event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEventEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId) throws ApiException {
        okhttp3.Call localVarCall = deleteEventEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * DELETE for event (asynchronously)
     * Delete event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventAggregate
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventAggregateCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/event/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pipeline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pipeline", pipeline));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventAggregateValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getEventAggregate(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getEventAggregate(Async)");
        }

        return getEventAggregateCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);

    }

    /**
     * AGGREGATE for event
     * Returns aggregate for events
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return Aggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Aggregate getEventAggregate(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        ApiResponse<Aggregate> localVarResp = getEventAggregateWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline);
        return localVarResp.getData();
    }

    /**
     * AGGREGATE for event
     * Returns aggregate for events
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @return ApiResponse&lt;Aggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Aggregate> getEventAggregateWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getEventAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, null);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AGGREGATE for event (asynchronously)
     * Returns aggregate for events
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param filter Filter (optional)
     * @param pipeline Pipeline (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventAggregateAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String filter, String pipeline, final ApiCallback<Aggregate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventAggregateValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/event/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unique", unique));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getEventCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getEventCollection(Async)");
        }

        return getEventCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);

    }

    /**
     * GET for event
     * Returns all events from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return List&lt;EventEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<EventEntity> getEventCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        ApiResponse<List<EventEntity>> localVarResp = getEventCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique);
        return localVarResp.getData();
    }

    /**
     * GET for event
     * Returns all events from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @return ApiResponse&lt;List&lt;EventEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EventEntity>> getEventCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique) throws ApiException {
        okhttp3.Call localVarCall = getEventCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, null);
        Type localVarReturnType = new TypeToken<List<EventEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for event (asynchronously)
     * Returns all events from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param pageSize Amount of results (default: 25) (optional)
     * @param page Page to show (default: 1) (optional)
     * @param filter Filter (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param sort Specifies ascending or descending sort on existing fields (optional)
     * @param unique Find all unique values for selected field (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, Integer pageSize, Integer page, String filter, String expand, String fields, String sort, String unique, final ApiCallback<List<EventEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique, _callback);
        Type localVarReturnType = new TypeToken<List<EventEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventCountCollection
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCountCollectionCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/event/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventCountCollectionValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getEventCountCollection(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getEventCountCollection(Async)");
        }

        return getEventCountCollectionCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);

    }

    /**
     * COUNT for event
     * Count all events from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return Count
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Count getEventCountCollection(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        ApiResponse<Count> localVarResp = getEventCountCollectionWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter);
        return localVarResp.getData();
    }

    /**
     * COUNT for event
     * Count all events from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;Count&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Count> getEventCountCollectionWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter) throws ApiException {
        okhttp3.Call localVarCall = getEventCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, null);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * COUNT for event (asynchronously)
     * Count all events from the system
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param filter Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCountCollectionAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String filter, final ApiCallback<Count> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventCountCollectionValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter, _callback);
        Type localVarReturnType = new TypeToken<Count>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventDescribe
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventDescribeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/event/describe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventDescribeValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getEventDescribe(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getEventDescribe(Async)");
        }

        return getEventDescribeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * DESCRIBE for event
     * Returns describe for events
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return EventDescribe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EventDescribe getEventDescribe(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<EventDescribe> localVarResp = getEventDescribeWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * DESCRIBE for event
     * Returns describe for events
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;EventDescribe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventDescribe> getEventDescribeWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = getEventDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<EventDescribe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DESCRIBE for event (asynchronously)
     * Returns describe for events
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventDescribeAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<EventDescribe> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventDescribeValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<EventDescribe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/entity/event/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DATA_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ENABLE", localVarApiClient.parameterToString(X_API2CRM_DATA_ENABLE));
        }

        if (X_API2CRM_DATA_BUILD != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-BUILD", localVarApiClient.parameterToString(X_API2CRM_DATA_BUILD));
        }

        if (X_API2CRM_DATA_IS_FINAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-IS-FINAL", localVarApiClient.parameterToString(X_API2CRM_DATA_IS_FINAL));
        }

        if (X_API2CRM_DATA_STRATEGY != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-STRATEGY", localVarApiClient.parameterToString(X_API2CRM_DATA_STRATEGY));
        }

        if (X_API2CRM_DATA_COHERENT_ENTITIES != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-COHERENT-ENTITIES", localVarApiClient.parameterToString(X_API2CRM_DATA_COHERENT_ENTITIES));
        }

        if (X_API2CRM_DATA_ALWAYS_ACTUAL != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ALWAYS-ACTUAL", localVarApiClient.parameterToString(X_API2CRM_DATA_ALWAYS_ACTUAL));
        }

        if (X_API2CRM_DATA_ACTUAL_AT != null) {
            localVarHeaderParams.put("X-API2CRM-DATA-ACTUAL-AT", localVarApiClient.parameterToString(X_API2CRM_DATA_ACTUAL_AT));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling getEventEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling getEventEntity(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventEntity(Async)");
        }

        return getEventEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);

    }

    /**
     * GET for event
     * Return event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return EventEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EventEntity getEventEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        ApiResponse<EventEntity> localVarResp = getEventEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields);
        return localVarResp.getData();
    }

    /**
     * GET for event
     * Return event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @return ApiResponse&lt;EventEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventEntity> getEventEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields) throws ApiException {
        okhttp3.Call localVarCall = getEventEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, null);
        Type localVarReturnType = new TypeToken<EventEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET for event (asynchronously)
     * Return event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DATA_ENABLE Data Enable (optional)
     * @param X_API2CRM_DATA_BUILD Data Build (optional)
     * @param X_API2CRM_DATA_IS_FINAL Data Is Final (optional)
     * @param X_API2CRM_DATA_STRATEGY Data Strategy (optional)
     * @param X_API2CRM_DATA_COHERENT_ENTITIES Coherent Entities (optional)
     * @param X_API2CRM_DATA_ALWAYS_ACTUAL Data Is Actual (optional)
     * @param X_API2CRM_DATA_ACTUAL_AT Data Actual At (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param expand Expand relations (optional)
     * @param fields Comma-separated list of fields to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DATA_ENABLE, String X_API2CRM_DATA_BUILD, String X_API2CRM_DATA_IS_FINAL, String X_API2CRM_DATA_STRATEGY, String X_API2CRM_DATA_COHERENT_ENTITIES, String X_API2CRM_DATA_ALWAYS_ACTUAL, OffsetDateTime X_API2CRM_DATA_ACTUAL_AT, String X_API2CRM_DESCRIBE_LIFETIME, String expand, String fields, final ApiCallback<EventEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields, _callback);
        Type localVarReturnType = new TypeToken<EventEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEventEntity
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param body Update event information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventEntityCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/event/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventEntityValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateEventEntity(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateEventEntity(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling updateEventEntity(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEventEntity(Async)");
        }

        return updateEventEntityCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT for event
     * Update event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param body Update event information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return EventEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public EventEntityRelation updateEventEntity(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<EventEntityRelation> localVarResp = updateEventEntityWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT for event
     * Update event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param body Update event information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;EventEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventEntityRelation> updateEventEntityWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateEventEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<EventEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT for event (asynchronously)
     * Update event information
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param eventId Event Identifier (required)
     * @param body Update event information (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventEntityAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, String eventId, EventEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<EventEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventEntityValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, eventId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<EventEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEventEntityBulk
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventEntityBulkCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/application/entity/event/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_API2CRM_USER_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-USER-KEY", localVarApiClient.parameterToString(X_API2CRM_USER_KEY));
        }

        if (X_API2CRM_APPLICATION_KEY != null) {
            localVarHeaderParams.put("X-API2CRM-APPLICATION-KEY", localVarApiClient.parameterToString(X_API2CRM_APPLICATION_KEY));
        }

        if (X_API2CRM_NATIVE_ENABLE != null) {
            localVarHeaderParams.put("X-API2CRM-NATIVE-ENABLE", localVarApiClient.parameterToString(X_API2CRM_NATIVE_ENABLE));
        }

        if (X_API2CRM_DESCRIBE_LIFETIME != null) {
            localVarHeaderParams.put("X-API2CRM-DESCRIBE-LIFETIME", localVarApiClient.parameterToString(X_API2CRM_DESCRIBE_LIFETIME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventEntityBulkValidateBeforeCall(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API2CRM_USER_KEY' is set
        if (X_API2CRM_USER_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_USER_KEY' when calling updateEventEntityBulk(Async)");
        }

        // verify the required parameter 'X_API2CRM_APPLICATION_KEY' is set
        if (X_API2CRM_APPLICATION_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API2CRM_APPLICATION_KEY' when calling updateEventEntityBulk(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEventEntityBulk(Async)");
        }

        return updateEventEntityBulkCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);

    }

    /**
     * PUT bulk  for event
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return BulkEntityRelation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BulkEntityRelation updateEventEntityBulk(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        ApiResponse<BulkEntityRelation> localVarResp = updateEventEntityBulkWithHttpInfo(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        return localVarResp.getData();
    }

    /**
     * PUT bulk  for event
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @return ApiResponse&lt;BulkEntityRelation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkEntityRelation> updateEventEntityBulkWithHttpInfo(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME) throws ApiException {
        okhttp3.Call localVarCall = updateEventEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, null);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PUT bulk  for event (asynchronously)
     * 
     * @param X_API2CRM_USER_KEY User Key (required)
     * @param X_API2CRM_APPLICATION_KEY Application Key (required)
     * @param body  (required)
     * @param X_API2CRM_NATIVE_ENABLE Return native response (optional)
     * @param X_API2CRM_DESCRIBE_LIFETIME Describe lifetime (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventEntityBulkAsync(String X_API2CRM_USER_KEY, String X_API2CRM_APPLICATION_KEY, BulkEntity body, String X_API2CRM_NATIVE_ENABLE, String X_API2CRM_DESCRIBE_LIFETIME, final ApiCallback<BulkEntityRelation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventEntityBulkValidateBeforeCall(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME, _callback);
        Type localVarReturnType = new TypeToken<BulkEntityRelation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
