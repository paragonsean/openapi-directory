/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Discount;
import org.openapitools.client.model.Relation;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceItemEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:25.927241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceItemEntity {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private List<Discount> discount = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LIST_PRICE = "list_price";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private Float listPrice;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Float quantity;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_SALES_PRICE = "sales_price";
  @SerializedName(SERIALIZED_NAME_SALES_PRICE)
  private Float salesPrice;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Float subtotal;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private List<Tax> tax = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private Float totalPrice;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public InvoiceItemEntity() {
  }

  public InvoiceItemEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InvoiceItemEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InvoiceItemEntity discount(List<Discount> discount) {
    this.discount = discount;
    return this;
  }

  public InvoiceItemEntity addDiscountItem(Discount discountItem) {
    if (this.discount == null) {
      this.discount = new ArrayList<>();
    }
    this.discount.add(discountItem);
    return this;
  }

  /**
   * Discount
   * @return discount
   */
  @javax.annotation.Nullable
  public List<Discount> getDiscount() {
    return discount;
  }

  public void setDiscount(List<Discount> discount) {
    this.discount = discount;
  }


  public InvoiceItemEntity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * InvoiceItem Identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InvoiceItemEntity listPrice(Float listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * List Price
   * @return listPrice
   */
  @javax.annotation.Nullable
  public Float getListPrice() {
    return listPrice;
  }

  public void setListPrice(Float listPrice) {
    this.listPrice = listPrice;
  }


  public InvoiceItemEntity number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Number
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public InvoiceItemEntity quantity(Float quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Float getQuantity() {
    return quantity;
  }

  public void setQuantity(Float quantity) {
    this.quantity = quantity;
  }


  public InvoiceItemEntity relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public InvoiceItemEntity salesPrice(Float salesPrice) {
    this.salesPrice = salesPrice;
    return this;
  }

  /**
   * Sales Price
   * @return salesPrice
   */
  @javax.annotation.Nullable
  public Float getSalesPrice() {
    return salesPrice;
  }

  public void setSalesPrice(Float salesPrice) {
    this.salesPrice = salesPrice;
  }


  public InvoiceItemEntity subtotal(Float subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Subtotal
   * @return subtotal
   */
  @javax.annotation.Nullable
  public Float getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(Float subtotal) {
    this.subtotal = subtotal;
  }


  public InvoiceItemEntity tax(List<Tax> tax) {
    this.tax = tax;
    return this;
  }

  public InvoiceItemEntity addTaxItem(Tax taxItem) {
    if (this.tax == null) {
      this.tax = new ArrayList<>();
    }
    this.tax.add(taxItem);
    return this;
  }

  /**
   * Tax
   * @return tax
   */
  @javax.annotation.Nullable
  public List<Tax> getTax() {
    return tax;
  }

  public void setTax(List<Tax> tax) {
    this.tax = tax;
  }


  public InvoiceItemEntity totalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  /**
   * Total Price
   * @return totalPrice
   */
  @javax.annotation.Nullable
  public Float getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
  }


  public InvoiceItemEntity unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public InvoiceItemEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceItemEntity invoiceItemEntity = (InvoiceItemEntity) o;
    return Objects.equals(this.createdAt, invoiceItemEntity.createdAt) &&
        Objects.equals(this.description, invoiceItemEntity.description) &&
        Objects.equals(this.discount, invoiceItemEntity.discount) &&
        Objects.equals(this.id, invoiceItemEntity.id) &&
        Objects.equals(this.listPrice, invoiceItemEntity.listPrice) &&
        Objects.equals(this.number, invoiceItemEntity.number) &&
        Objects.equals(this.quantity, invoiceItemEntity.quantity) &&
        Objects.equals(this.relation, invoiceItemEntity.relation) &&
        Objects.equals(this.salesPrice, invoiceItemEntity.salesPrice) &&
        Objects.equals(this.subtotal, invoiceItemEntity.subtotal) &&
        Objects.equals(this.tax, invoiceItemEntity.tax) &&
        Objects.equals(this.totalPrice, invoiceItemEntity.totalPrice) &&
        Objects.equals(this.unit, invoiceItemEntity.unit) &&
        Objects.equals(this.updatedAt, invoiceItemEntity.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, description, discount, id, listPrice, number, quantity, relation, salesPrice, subtotal, tax, totalPrice, unit, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceItemEntity {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    salesPrice: ").append(toIndentedString(salesPrice)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("discount");
    openapiFields.add("id");
    openapiFields.add("list_price");
    openapiFields.add("number");
    openapiFields.add("quantity");
    openapiFields.add("relation");
    openapiFields.add("sales_price");
    openapiFields.add("subtotal");
    openapiFields.add("tax");
    openapiFields.add("total_price");
    openapiFields.add("unit");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceItemEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceItemEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceItemEntity is not found in the empty JSON string", InvoiceItemEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceItemEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceItemEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
        JsonArray jsonArraydiscount = jsonObj.getAsJsonArray("discount");
        if (jsonArraydiscount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discount").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discount` to be an array in the JSON string but got `%s`", jsonObj.get("discount").toString()));
          }

          // validate the optional field `discount` (array)
          for (int i = 0; i < jsonArraydiscount.size(); i++) {
            Discount.validateJsonElement(jsonArraydiscount.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        JsonArray jsonArraytax = jsonObj.getAsJsonArray("tax");
        if (jsonArraytax != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tax").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tax` to be an array in the JSON string but got `%s`", jsonObj.get("tax").toString()));
          }

          // validate the optional field `tax` (array)
          for (int i = 0; i < jsonArraytax.size(); i++) {
            Tax.validateJsonElement(jsonArraytax.get(i));
          };
        }
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceItemEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceItemEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceItemEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceItemEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceItemEntity>() {
           @Override
           public void write(JsonWriter out, InvoiceItemEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceItemEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceItemEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceItemEntity
   * @throws IOException if the JSON string is invalid with respect to InvoiceItemEntity
   */
  public static InvoiceItemEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceItemEntity.class);
  }

  /**
   * Convert an instance of InvoiceItemEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

