/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Aggregate;
import org.openapitools.client.model.BulkEntity;
import org.openapitools.client.model.BulkEntityRelation;
import org.openapitools.client.model.Count;
import org.openapitools.client.model.EntityItemDescribe;
import org.openapitools.client.model.EntityItemEntity;
import org.openapitools.client.model.EntityItemEntityRelation;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntityItemApi
 */
@Disabled
public class EntityItemApiTest {

    private final EntityItemApi api = new EntityItemApi();

    /**
     * POST for entityItem
     *
     * Add entity item into the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEntityItemEntityTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        EntityItemEntity body = null;
        String X_API2CRM_NATIVE_ENABLE = null;
        String X_API2CRM_DESCRIBE_LIFETIME = null;
        EntityItemEntityRelation response = api.createEntityItemEntity(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        // TODO: test validations
    }

    /**
     * POST bulk  for entityItem
     *
     * Add entity item into the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEntityItemEntityBulkTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        BulkEntity body = null;
        String X_API2CRM_NATIVE_ENABLE = null;
        String X_API2CRM_DESCRIBE_LIFETIME = null;
        BulkEntityRelation response = api.createEntityItemEntityBulk(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        // TODO: test validations
    }

    /**
     * DELETE bulk  for entityItem
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEntityItemCollectionBulkTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        BulkEntity body = null;
        BulkEntity response = api.deleteEntityItemCollectionBulk(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, body);
        // TODO: test validations
    }

    /**
     * DELETE for entityItem
     *
     * Delete entity item information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEntityItemEntityTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        String entityItemId = null;
        api.deleteEntityItemEntity(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, entityItemId);
        // TODO: test validations
    }

    /**
     * AGGREGATE for entityItem
     *
     * Returns aggregate for entity items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityItemAggregateTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        String X_API2CRM_NATIVE_ENABLE = null;
        String X_API2CRM_DATA_ENABLE = null;
        String X_API2CRM_DATA_BUILD = null;
        String X_API2CRM_DATA_IS_FINAL = null;
        String X_API2CRM_DATA_STRATEGY = null;
        String X_API2CRM_DATA_COHERENT_ENTITIES = null;
        String X_API2CRM_DATA_ALWAYS_ACTUAL = null;
        OffsetDateTime X_API2CRM_DATA_ACTUAL_AT = null;
        String X_API2CRM_DESCRIBE_LIFETIME = null;
        String filter = null;
        String pipeline = null;
        Aggregate response = api.getEntityItemAggregate(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, filter, pipeline);
        // TODO: test validations
    }

    /**
     * GET for entityItem
     *
     * Returns all entity items from the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityItemCollectionTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        String X_API2CRM_NATIVE_ENABLE = null;
        String X_API2CRM_DATA_ENABLE = null;
        String X_API2CRM_DATA_BUILD = null;
        String X_API2CRM_DATA_IS_FINAL = null;
        String X_API2CRM_DATA_STRATEGY = null;
        String X_API2CRM_DATA_COHERENT_ENTITIES = null;
        String X_API2CRM_DATA_ALWAYS_ACTUAL = null;
        OffsetDateTime X_API2CRM_DATA_ACTUAL_AT = null;
        String X_API2CRM_DESCRIBE_LIFETIME = null;
        Integer pageSize = null;
        Integer page = null;
        String filter = null;
        String expand = null;
        String fields = null;
        String sort = null;
        String unique = null;
        List<EntityItemEntity> response = api.getEntityItemCollection(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, pageSize, page, filter, expand, fields, sort, unique);
        // TODO: test validations
    }

    /**
     * COUNT for entityItem
     *
     * Count all entity items from the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityItemCountCollectionTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        String X_API2CRM_DATA_ENABLE = null;
        String X_API2CRM_DATA_BUILD = null;
        String X_API2CRM_DATA_IS_FINAL = null;
        String X_API2CRM_DATA_STRATEGY = null;
        String X_API2CRM_DATA_COHERENT_ENTITIES = null;
        String X_API2CRM_DATA_ALWAYS_ACTUAL = null;
        OffsetDateTime X_API2CRM_DATA_ACTUAL_AT = null;
        String filter = null;
        Count response = api.getEntityItemCountCollection(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, filter);
        // TODO: test validations
    }

    /**
     * DESCRIBE for entityItem
     *
     * Returns describe for entity items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityItemDescribeTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        String X_API2CRM_DATA_ENABLE = null;
        String X_API2CRM_DATA_BUILD = null;
        String X_API2CRM_DATA_IS_FINAL = null;
        String X_API2CRM_DATA_STRATEGY = null;
        String X_API2CRM_DATA_COHERENT_ENTITIES = null;
        String X_API2CRM_DATA_ALWAYS_ACTUAL = null;
        OffsetDateTime X_API2CRM_DATA_ACTUAL_AT = null;
        String X_API2CRM_DESCRIBE_LIFETIME = null;
        EntityItemDescribe response = api.getEntityItemDescribe(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME);
        // TODO: test validations
    }

    /**
     * GET for entityItem
     *
     * Return entity item information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityItemEntityTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        String entityItemId = null;
        String X_API2CRM_NATIVE_ENABLE = null;
        String X_API2CRM_DATA_ENABLE = null;
        String X_API2CRM_DATA_BUILD = null;
        String X_API2CRM_DATA_IS_FINAL = null;
        String X_API2CRM_DATA_STRATEGY = null;
        String X_API2CRM_DATA_COHERENT_ENTITIES = null;
        String X_API2CRM_DATA_ALWAYS_ACTUAL = null;
        OffsetDateTime X_API2CRM_DATA_ACTUAL_AT = null;
        String X_API2CRM_DESCRIBE_LIFETIME = null;
        String expand = null;
        String fields = null;
        EntityItemEntity response = api.getEntityItemEntity(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, entityItemId, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DATA_ENABLE, X_API2CRM_DATA_BUILD, X_API2CRM_DATA_IS_FINAL, X_API2CRM_DATA_STRATEGY, X_API2CRM_DATA_COHERENT_ENTITIES, X_API2CRM_DATA_ALWAYS_ACTUAL, X_API2CRM_DATA_ACTUAL_AT, X_API2CRM_DESCRIBE_LIFETIME, expand, fields);
        // TODO: test validations
    }

    /**
     * PUT for entityItem
     *
     * Update entity item information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEntityItemEntityTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        String entityItemId = null;
        EntityItemEntity body = null;
        String X_API2CRM_NATIVE_ENABLE = null;
        String X_API2CRM_DESCRIBE_LIFETIME = null;
        EntityItemEntityRelation response = api.updateEntityItemEntity(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, entityItemId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        // TODO: test validations
    }

    /**
     * PUT bulk  for entityItem
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEntityItemEntityBulkTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String X_API2CRM_APPLICATION_KEY = null;
        String entityId = null;
        BulkEntity body = null;
        String X_API2CRM_NATIVE_ENABLE = null;
        String X_API2CRM_DESCRIBE_LIFETIME = null;
        BulkEntityRelation response = api.updateEntityItemEntityBulk(X_API2CRM_USER_KEY, X_API2CRM_APPLICATION_KEY, entityId, body, X_API2CRM_NATIVE_ENABLE, X_API2CRM_DESCRIBE_LIFETIME);
        // TODO: test validations
    }

}
