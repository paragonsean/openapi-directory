/*
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationEntity;
import org.openapitools.client.model.ApplicationEntityList;
import org.openapitools.client.model.ApplicationEntityRelation;
import org.openapitools.client.model.ApplicationEntityWrite;
import org.openapitools.client.model.Count;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Disabled
public class ApplicationApiTest {

    private final ApplicationApi api = new ApplicationApi();

    /**
     * POST for application
     *
     * Add application into the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationEntityTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        ApplicationEntityWrite body = null;
        ApplicationEntityRelation response = api.createApplicationEntity(X_API2CRM_USER_KEY, body);
        // TODO: test validations
    }

    /**
     * DELETE for application
     *
     * Delete application information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationEntityTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String key = null;
        api.deleteApplicationEntity(X_API2CRM_USER_KEY, key);
        // TODO: test validations
    }

    /**
     * GET for application
     *
     * Returns all applications from the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationCollectionTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        Integer pageSize = null;
        Integer page = null;
        String filter = null;
        String fields = null;
        String sort = null;
        List<ApplicationEntityList> response = api.getApplicationCollection(X_API2CRM_USER_KEY, pageSize, page, filter, fields, sort);
        // TODO: test validations
    }

    /**
     * COUNT for application
     *
     * Count all applications from the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationCountCollectionTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String filter = null;
        Count response = api.getApplicationCountCollection(X_API2CRM_USER_KEY, filter);
        // TODO: test validations
    }

    /**
     * GET for application
     *
     * Return application information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationEntityTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String key = null;
        String fields = null;
        ApplicationEntity response = api.getApplicationEntity(X_API2CRM_USER_KEY, key, fields);
        // TODO: test validations
    }

    /**
     * PUT for application
     *
     * Update application information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationEntityTest() throws ApiException {
        String X_API2CRM_USER_KEY = null;
        String key = null;
        ApplicationEntityWrite body = null;
        ApplicationEntityRelation response = api.updateApplicationEntity(X_API2CRM_USER_KEY, key, body);
        // TODO: test validations
    }

}
