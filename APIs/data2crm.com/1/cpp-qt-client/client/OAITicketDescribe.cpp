/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketDescribe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketDescribe::OAITicketDescribe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketDescribe::OAITicketDescribe() {
    this->initializeModel();
}

OAITicketDescribe::~OAITicketDescribe() {}

void OAITicketDescribe::initializeModel() {

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAITicketDescribe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketDescribe::fromJsonObject(QJsonObject json) {

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAITicketDescribe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketDescribe::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QString OAITicketDescribe::getEntity() const {
    return m_entity;
}
void OAITicketDescribe::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAITicketDescribe::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAITicketDescribe::is_entity_Valid() const{
    return m_entity_isValid;
}

OAISchemaDescribe OAITicketDescribe::getSchema() const {
    return m_schema;
}
void OAITicketDescribe::setSchema(const OAISchemaDescribe &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAITicketDescribe::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAITicketDescribe::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAITicketDescribe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketDescribe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
