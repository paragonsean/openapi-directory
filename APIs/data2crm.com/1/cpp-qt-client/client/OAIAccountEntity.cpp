/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountEntity::OAIAccountEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountEntity::OAIAccountEntity() {
    this->initializeModel();
}

OAIAccountEntity::~OAIAccountEntity() {}

void OAIAccountEntity::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_annual_revenue_isSet = false;
    m_annual_revenue_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_employees_isSet = false;
    m_employees_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_messenger_isSet = false;
    m_messenger_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ownership_isSet = false;
    m_ownership_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_sic_code_isSet = false;
    m_sic_code_isValid = false;

    m_ticker_symbol_isSet = false;
    m_ticker_symbol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIAccountEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountEntity::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_annual_revenue_isValid = ::OpenAPI::fromJsonValue(m_annual_revenue, json[QString("annual_revenue")]);
    m_annual_revenue_isSet = !json[QString("annual_revenue")].isNull() && m_annual_revenue_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_employees_isValid = ::OpenAPI::fromJsonValue(m_employees, json[QString("employees")]);
    m_employees_isSet = !json[QString("employees")].isNull() && m_employees_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_messenger_isValid = ::OpenAPI::fromJsonValue(m_messenger, json[QString("messenger")]);
    m_messenger_isSet = !json[QString("messenger")].isNull() && m_messenger_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ownership_isValid = ::OpenAPI::fromJsonValue(m_ownership, json[QString("ownership")]);
    m_ownership_isSet = !json[QString("ownership")].isNull() && m_ownership_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_sic_code_isValid = ::OpenAPI::fromJsonValue(m_sic_code, json[QString("sic_code")]);
    m_sic_code_isSet = !json[QString("sic_code")].isNull() && m_sic_code_isValid;

    m_ticker_symbol_isValid = ::OpenAPI::fromJsonValue(m_ticker_symbol, json[QString("ticker_symbol")]);
    m_ticker_symbol_isSet = !json[QString("ticker_symbol")].isNull() && m_ticker_symbol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIAccountEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_annual_revenue_isSet) {
        obj.insert(QString("annual_revenue"), ::OpenAPI::toJsonValue(m_annual_revenue));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email.size() > 0) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_employees_isSet) {
        obj.insert(QString("employees"), ::OpenAPI::toJsonValue(m_employees));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_industry.size() > 0) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_messenger.size() > 0) {
        obj.insert(QString("messenger"), ::OpenAPI::toJsonValue(m_messenger));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ownership_isSet) {
        obj.insert(QString("ownership"), ::OpenAPI::toJsonValue(m_ownership));
    }
    if (m_phone.size() > 0) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_sic_code_isSet) {
        obj.insert(QString("sic_code"), ::OpenAPI::toJsonValue(m_sic_code));
    }
    if (m_ticker_symbol_isSet) {
        obj.insert(QString("ticker_symbol"), ::OpenAPI::toJsonValue(m_ticker_symbol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_website.size() > 0) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QList<OAIAddress> OAIAccountEntity::getAddress() const {
    return m_address;
}
void OAIAccountEntity::setAddress(const QList<OAIAddress> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccountEntity::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccountEntity::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIAccountEntity::getAnnualRevenue() const {
    return m_annual_revenue;
}
void OAIAccountEntity::setAnnualRevenue(const QString &annual_revenue) {
    m_annual_revenue = annual_revenue;
    m_annual_revenue_isSet = true;
}

bool OAIAccountEntity::is_annual_revenue_Set() const{
    return m_annual_revenue_isSet;
}

bool OAIAccountEntity::is_annual_revenue_Valid() const{
    return m_annual_revenue_isValid;
}

QString OAIAccountEntity::getCategory() const {
    return m_category;
}
void OAIAccountEntity::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAccountEntity::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAccountEntity::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIAccountEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIAccountEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccountEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccountEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAccountEntity::getDescription() const {
    return m_description;
}
void OAIAccountEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountEntity::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEmail> OAIAccountEntity::getEmail() const {
    return m_email;
}
void OAIAccountEntity::setEmail(const QList<OAIEmail> &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAccountEntity::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccountEntity::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAccountEntity::getEmployees() const {
    return m_employees;
}
void OAIAccountEntity::setEmployees(const QString &employees) {
    m_employees = employees;
    m_employees_isSet = true;
}

bool OAIAccountEntity::is_employees_Set() const{
    return m_employees_isSet;
}

bool OAIAccountEntity::is_employees_Valid() const{
    return m_employees_isValid;
}

QString OAIAccountEntity::getId() const {
    return m_id;
}
void OAIAccountEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountEntity::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIAccountEntity::getIndustry() const {
    return m_industry;
}
void OAIAccountEntity::setIndustry(const QList<QString> &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIAccountEntity::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIAccountEntity::is_industry_Valid() const{
    return m_industry_isValid;
}

QList<OAIMessenger> OAIAccountEntity::getMessenger() const {
    return m_messenger;
}
void OAIAccountEntity::setMessenger(const QList<OAIMessenger> &messenger) {
    m_messenger = messenger;
    m_messenger_isSet = true;
}

bool OAIAccountEntity::is_messenger_Set() const{
    return m_messenger_isSet;
}

bool OAIAccountEntity::is_messenger_Valid() const{
    return m_messenger_isValid;
}

QString OAIAccountEntity::getName() const {
    return m_name;
}
void OAIAccountEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccountEntity::getOwnership() const {
    return m_ownership;
}
void OAIAccountEntity::setOwnership(const QString &ownership) {
    m_ownership = ownership;
    m_ownership_isSet = true;
}

bool OAIAccountEntity::is_ownership_Set() const{
    return m_ownership_isSet;
}

bool OAIAccountEntity::is_ownership_Valid() const{
    return m_ownership_isValid;
}

QList<OAIPhone> OAIAccountEntity::getPhone() const {
    return m_phone;
}
void OAIAccountEntity::setPhone(const QList<OAIPhone> &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIAccountEntity::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIAccountEntity::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIAccountEntity::getRating() const {
    return m_rating;
}
void OAIAccountEntity::setRating(const QString &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIAccountEntity::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIAccountEntity::is_rating_Valid() const{
    return m_rating_isValid;
}

OAIRelation OAIAccountEntity::getRelation() const {
    return m_relation;
}
void OAIAccountEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIAccountEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIAccountEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAIAccountEntity::getSicCode() const {
    return m_sic_code;
}
void OAIAccountEntity::setSicCode(const QString &sic_code) {
    m_sic_code = sic_code;
    m_sic_code_isSet = true;
}

bool OAIAccountEntity::is_sic_code_Set() const{
    return m_sic_code_isSet;
}

bool OAIAccountEntity::is_sic_code_Valid() const{
    return m_sic_code_isValid;
}

QString OAIAccountEntity::getTickerSymbol() const {
    return m_ticker_symbol;
}
void OAIAccountEntity::setTickerSymbol(const QString &ticker_symbol) {
    m_ticker_symbol = ticker_symbol;
    m_ticker_symbol_isSet = true;
}

bool OAIAccountEntity::is_ticker_symbol_Set() const{
    return m_ticker_symbol_isSet;
}

bool OAIAccountEntity::is_ticker_symbol_Valid() const{
    return m_ticker_symbol_isValid;
}

QString OAIAccountEntity::getType() const {
    return m_type;
}
void OAIAccountEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccountEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccountEntity::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIAccountEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAccountEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAccountEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAccountEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<OAIWebsite> OAIAccountEntity::getWebsite() const {
    return m_website;
}
void OAIAccountEntity::setWebsite(const QList<OAIWebsite> &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIAccountEntity::is_website_Set() const{
    return m_website_isSet;
}

bool OAIAccountEntity::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIAccountEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_annual_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_employees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messenger.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sic_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
