/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuoteItemEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuoteItemEntity::OAIQuoteItemEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuoteItemEntity::OAIQuoteItemEntity() {
    this->initializeModel();
}

OAIQuoteItemEntity::~OAIQuoteItemEntity() {}

void OAIQuoteItemEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_sales_price_isSet = false;
    m_sales_price_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIQuoteItemEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuoteItemEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("list_price")]);
    m_list_price_isSet = !json[QString("list_price")].isNull() && m_list_price_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_sales_price_isValid = ::OpenAPI::fromJsonValue(m_sales_price, json[QString("sales_price")]);
    m_sales_price_isSet = !json[QString("sales_price")].isNull() && m_sales_price_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIQuoteItemEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuoteItemEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount.size() > 0) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("list_price"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_sales_price_isSet) {
        obj.insert(QString("sales_price"), ::OpenAPI::toJsonValue(m_sales_price));
    }
    if (m_subtotal_isSet) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_tax.size() > 0) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIQuoteItemEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIQuoteItemEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIQuoteItemEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIQuoteItemEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIQuoteItemEntity::getDescription() const {
    return m_description;
}
void OAIQuoteItemEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIQuoteItemEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIQuoteItemEntity::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDiscount> OAIQuoteItemEntity::getDiscount() const {
    return m_discount;
}
void OAIQuoteItemEntity::setDiscount(const QList<OAIDiscount> &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIQuoteItemEntity::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIQuoteItemEntity::is_discount_Valid() const{
    return m_discount_isValid;
}

QString OAIQuoteItemEntity::getId() const {
    return m_id;
}
void OAIQuoteItemEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQuoteItemEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQuoteItemEntity::is_id_Valid() const{
    return m_id_isValid;
}

float OAIQuoteItemEntity::getListPrice() const {
    return m_list_price;
}
void OAIQuoteItemEntity::setListPrice(const float &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAIQuoteItemEntity::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAIQuoteItemEntity::is_list_price_Valid() const{
    return m_list_price_isValid;
}

QString OAIQuoteItemEntity::getNumber() const {
    return m_number;
}
void OAIQuoteItemEntity::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIQuoteItemEntity::is_number_Set() const{
    return m_number_isSet;
}

bool OAIQuoteItemEntity::is_number_Valid() const{
    return m_number_isValid;
}

float OAIQuoteItemEntity::getQuantity() const {
    return m_quantity;
}
void OAIQuoteItemEntity::setQuantity(const float &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIQuoteItemEntity::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIQuoteItemEntity::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIRelation OAIQuoteItemEntity::getRelation() const {
    return m_relation;
}
void OAIQuoteItemEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIQuoteItemEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIQuoteItemEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

float OAIQuoteItemEntity::getSalesPrice() const {
    return m_sales_price;
}
void OAIQuoteItemEntity::setSalesPrice(const float &sales_price) {
    m_sales_price = sales_price;
    m_sales_price_isSet = true;
}

bool OAIQuoteItemEntity::is_sales_price_Set() const{
    return m_sales_price_isSet;
}

bool OAIQuoteItemEntity::is_sales_price_Valid() const{
    return m_sales_price_isValid;
}

float OAIQuoteItemEntity::getSubtotal() const {
    return m_subtotal;
}
void OAIQuoteItemEntity::setSubtotal(const float &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAIQuoteItemEntity::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAIQuoteItemEntity::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

QList<OAITax> OAIQuoteItemEntity::getTax() const {
    return m_tax;
}
void OAIQuoteItemEntity::setTax(const QList<OAITax> &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIQuoteItemEntity::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIQuoteItemEntity::is_tax_Valid() const{
    return m_tax_isValid;
}

float OAIQuoteItemEntity::getTotalPrice() const {
    return m_total_price;
}
void OAIQuoteItemEntity::setTotalPrice(const float &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAIQuoteItemEntity::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAIQuoteItemEntity::is_total_price_Valid() const{
    return m_total_price_isValid;
}

QString OAIQuoteItemEntity::getUnit() const {
    return m_unit;
}
void OAIQuoteItemEntity::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIQuoteItemEntity::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIQuoteItemEntity::is_unit_Valid() const{
    return m_unit_isValid;
}

QDateTime OAIQuoteItemEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIQuoteItemEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIQuoteItemEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIQuoteItemEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIQuoteItemEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuoteItemEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
