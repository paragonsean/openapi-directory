/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITax::OAITax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITax::OAITax() {
    this->initializeModel();
}

OAITax::~OAITax() {}

void OAITax::initializeModel() {

    m_percent_value_isSet = false;
    m_percent_value_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITax::fromJsonObject(QJsonObject json) {

    m_percent_value_isValid = ::OpenAPI::fromJsonValue(m_percent_value, json[QString("percent_value")]);
    m_percent_value_isSet = !json[QString("percent_value")].isNull() && m_percent_value_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITax::asJsonObject() const {
    QJsonObject obj;
    if (m_percent_value_isSet) {
        obj.insert(QString("percent_value"), ::OpenAPI::toJsonValue(m_percent_value));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

float OAITax::getPercentValue() const {
    return m_percent_value;
}
void OAITax::setPercentValue(const float &percent_value) {
    m_percent_value = percent_value;
    m_percent_value_isSet = true;
}

bool OAITax::is_percent_value_Set() const{
    return m_percent_value_isSet;
}

bool OAITax::is_percent_value_Valid() const{
    return m_percent_value_isValid;
}

QString OAITax::getType() const {
    return m_type;
}
void OAITax::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITax::is_type_Set() const{
    return m_type_isSet;
}

bool OAITax::is_type_Valid() const{
    return m_type_isValid;
}

float OAITax::getValue() const {
    return m_value;
}
void OAITax::setValue(const float &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITax::is_value_Set() const{
    return m_value_isSet;
}

bool OAITax::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percent_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
