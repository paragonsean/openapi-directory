/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityItemEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityItemEntity::OAIEntityItemEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityItemEntity::OAIEntityItemEntity() {
    this->initializeModel();
}

OAIEntityItemEntity::~OAIEntityItemEntity() {}

void OAIEntityItemEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIEntityItemEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityItemEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIEntityItemEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityItemEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIEntityItemEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIEntityItemEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEntityItemEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEntityItemEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEntityItemEntity::getId() const {
    return m_id;
}
void OAIEntityItemEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEntityItemEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEntityItemEntity::is_id_Valid() const{
    return m_id_isValid;
}

OAIRelation OAIEntityItemEntity::getRelation() const {
    return m_relation;
}
void OAIEntityItemEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIEntityItemEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIEntityItemEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QDateTime OAIEntityItemEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEntityItemEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEntityItemEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEntityItemEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIEntityItemEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityItemEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
