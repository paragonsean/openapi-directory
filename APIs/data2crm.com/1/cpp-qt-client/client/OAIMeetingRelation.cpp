/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeetingRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeetingRelation::OAIMeetingRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeetingRelation::OAIMeetingRelation() {
    this->initializeModel();
}

OAIMeetingRelation::~OAIMeetingRelation() {}

void OAIMeetingRelation::initializeModel() {

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMeetingRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeetingRelation::fromJsonObject(QJsonObject json) {

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMeetingRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeetingRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_entity.isSet()) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIMeetingEntityRelation OAIMeetingRelation::getEntity() const {
    return m_entity;
}
void OAIMeetingRelation::setEntity(const OAIMeetingEntityRelation &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIMeetingRelation::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIMeetingRelation::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIMeetingRelation::getType() const {
    return m_type;
}
void OAIMeetingRelation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMeetingRelation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMeetingRelation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMeetingRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeetingRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
