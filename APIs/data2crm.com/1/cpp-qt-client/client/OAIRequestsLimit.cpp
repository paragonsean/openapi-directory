/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestsLimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestsLimit::OAIRequestsLimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestsLimit::OAIRequestsLimit() {
    this->initializeModel();
}

OAIRequestsLimit::~OAIRequestsLimit() {}

void OAIRequestsLimit::initializeModel() {

    m_is_exceeded_isSet = false;
    m_is_exceeded_isValid = false;

    m_retry_after_isSet = false;
    m_retry_after_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRequestsLimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestsLimit::fromJsonObject(QJsonObject json) {

    m_is_exceeded_isValid = ::OpenAPI::fromJsonValue(m_is_exceeded, json[QString("is_exceeded")]);
    m_is_exceeded_isSet = !json[QString("is_exceeded")].isNull() && m_is_exceeded_isValid;

    m_retry_after_isValid = ::OpenAPI::fromJsonValue(m_retry_after, json[QString("retry_after")]);
    m_retry_after_isSet = !json[QString("retry_after")].isNull() && m_retry_after_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRequestsLimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestsLimit::asJsonObject() const {
    QJsonObject obj;
    if (m_is_exceeded_isSet) {
        obj.insert(QString("is_exceeded"), ::OpenAPI::toJsonValue(m_is_exceeded));
    }
    if (m_retry_after_isSet) {
        obj.insert(QString("retry_after"), ::OpenAPI::toJsonValue(m_retry_after));
    }
    if (m_type.size() > 0) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIRequestsLimit::isIsExceeded() const {
    return m_is_exceeded;
}
void OAIRequestsLimit::setIsExceeded(const bool &is_exceeded) {
    m_is_exceeded = is_exceeded;
    m_is_exceeded_isSet = true;
}

bool OAIRequestsLimit::is_is_exceeded_Set() const{
    return m_is_exceeded_isSet;
}

bool OAIRequestsLimit::is_is_exceeded_Valid() const{
    return m_is_exceeded_isValid;
}

QDateTime OAIRequestsLimit::getRetryAfter() const {
    return m_retry_after;
}
void OAIRequestsLimit::setRetryAfter(const QDateTime &retry_after) {
    m_retry_after = retry_after;
    m_retry_after_isSet = true;
}

bool OAIRequestsLimit::is_retry_after_Set() const{
    return m_retry_after_isSet;
}

bool OAIRequestsLimit::is_retry_after_Valid() const{
    return m_retry_after_isValid;
}

QList<OAIType> OAIRequestsLimit::getType() const {
    return m_type;
}
void OAIRequestsLimit::setType(const QList<OAIType> &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRequestsLimit::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRequestsLimit::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRequestsLimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_exceeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestsLimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
