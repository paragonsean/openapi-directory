/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectEntity::OAIProjectEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectEntity::OAIProjectEntity() {
    this->initializeModel();
}

OAIProjectEntity::~OAIProjectEntity() {}

void OAIProjectEntity::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pipeline_with_stage_isSet = false;
    m_pipeline_with_stage_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIProjectEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectEntity::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pipeline_with_stage_isValid = ::OpenAPI::fromJsonValue(m_pipeline_with_stage, json[QString("pipeline_with_stage")]);
    m_pipeline_with_stage_isSet = !json[QString("pipeline_with_stage")].isNull() && m_pipeline_with_stage_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIProjectEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pipeline_with_stage_isSet) {
        obj.insert(QString("pipeline_with_stage"), ::OpenAPI::toJsonValue(m_pipeline_with_stage));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIProjectEntity::getCategory() const {
    return m_category;
}
void OAIProjectEntity::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIProjectEntity::is_category_Set() const{
    return m_category_isSet;
}

bool OAIProjectEntity::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIProjectEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIProjectEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProjectEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProjectEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIProjectEntity::getDescription() const {
    return m_description;
}
void OAIProjectEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectEntity::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIProjectEntity::getEndedAt() const {
    return m_ended_at;
}
void OAIProjectEntity::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIProjectEntity::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIProjectEntity::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QString OAIProjectEntity::getId() const {
    return m_id;
}
void OAIProjectEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectEntity::getName() const {
    return m_name;
}
void OAIProjectEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProjectEntity::getPipelineWithStage() const {
    return m_pipeline_with_stage;
}
void OAIProjectEntity::setPipelineWithStage(const QString &pipeline_with_stage) {
    m_pipeline_with_stage = pipeline_with_stage;
    m_pipeline_with_stage_isSet = true;
}

bool OAIProjectEntity::is_pipeline_with_stage_Set() const{
    return m_pipeline_with_stage_isSet;
}

bool OAIProjectEntity::is_pipeline_with_stage_Valid() const{
    return m_pipeline_with_stage_isValid;
}

QString OAIProjectEntity::getPriority() const {
    return m_priority;
}
void OAIProjectEntity::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIProjectEntity::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIProjectEntity::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIRelation OAIProjectEntity::getRelation() const {
    return m_relation;
}
void OAIProjectEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIProjectEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIProjectEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QDateTime OAIProjectEntity::getStartedAt() const {
    return m_started_at;
}
void OAIProjectEntity::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIProjectEntity::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIProjectEntity::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIProjectEntity::getStatus() const {
    return m_status;
}
void OAIProjectEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectEntity::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIProjectEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIProjectEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIProjectEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIProjectEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIProjectEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_with_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
