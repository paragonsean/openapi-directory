/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallEntity::OAICallEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallEntity::OAICallEntity() {
    this->initializeModel();
}

OAICallEntity::~OAICallEntity() {}

void OAICallEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICallEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAICallEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAICallEntity::getCreatedAt() const {
    return m_created_at;
}
void OAICallEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICallEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICallEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICallEntity::getDescription() const {
    return m_description;
}
void OAICallEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICallEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAICallEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICallEntity::getDirection() const {
    return m_direction;
}
void OAICallEntity::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICallEntity::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICallEntity::is_direction_Valid() const{
    return m_direction_isValid;
}

QDateTime OAICallEntity::getEndedAt() const {
    return m_ended_at;
}
void OAICallEntity::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAICallEntity::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAICallEntity::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QString OAICallEntity::getId() const {
    return m_id;
}
void OAICallEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICallEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAICallEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICallEntity::getPurpose() const {
    return m_purpose;
}
void OAICallEntity::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAICallEntity::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAICallEntity::is_purpose_Valid() const{
    return m_purpose_isValid;
}

OAIRelation OAICallEntity::getRelation() const {
    return m_relation;
}
void OAICallEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAICallEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAICallEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAICallEntity::getResult() const {
    return m_result;
}
void OAICallEntity::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAICallEntity::is_result_Set() const{
    return m_result_isSet;
}

bool OAICallEntity::is_result_Valid() const{
    return m_result_isValid;
}

QDateTime OAICallEntity::getStartedAt() const {
    return m_started_at;
}
void OAICallEntity::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAICallEntity::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAICallEntity::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAICallEntity::getStatus() const {
    return m_status;
}
void OAICallEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICallEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAICallEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICallEntity::getSubject() const {
    return m_subject;
}
void OAICallEntity::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICallEntity::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICallEntity::is_subject_Valid() const{
    return m_subject_isValid;
}

QDateTime OAICallEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAICallEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICallEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICallEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICallEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
