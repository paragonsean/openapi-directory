/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceEntity::OAIInvoiceEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceEntity::OAIInvoiceEntity() {
    this->initializeModel();
}

OAIInvoiceEntity::~OAIInvoiceEntity() {}

void OAIInvoiceEntity::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_adjustment_isSet = false;
    m_adjustment_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_excise_duty_isSet = false;
    m_excise_duty_isValid = false;

    m_grand_total_isSet = false;
    m_grand_total_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_date_isSet = false;
    m_invoice_date_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_purchase_order_isSet = false;
    m_purchase_order_isValid = false;

    m_received_isSet = false;
    m_received_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_sales_commission_isSet = false;
    m_sales_commission_isValid = false;

    m_shipping_and_handling_isSet = false;
    m_shipping_and_handling_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_terms_and_conditions_isSet = false;
    m_terms_and_conditions_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIInvoiceEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceEntity::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_adjustment_isValid = ::OpenAPI::fromJsonValue(m_adjustment, json[QString("adjustment")]);
    m_adjustment_isSet = !json[QString("adjustment")].isNull() && m_adjustment_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_excise_duty_isValid = ::OpenAPI::fromJsonValue(m_excise_duty, json[QString("excise_duty")]);
    m_excise_duty_isSet = !json[QString("excise_duty")].isNull() && m_excise_duty_isValid;

    m_grand_total_isValid = ::OpenAPI::fromJsonValue(m_grand_total, json[QString("grand_total")]);
    m_grand_total_isSet = !json[QString("grand_total")].isNull() && m_grand_total_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_invoice_date, json[QString("invoice_date")]);
    m_invoice_date_isSet = !json[QString("invoice_date")].isNull() && m_invoice_date_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_purchase_order_isValid = ::OpenAPI::fromJsonValue(m_purchase_order, json[QString("purchase_order")]);
    m_purchase_order_isSet = !json[QString("purchase_order")].isNull() && m_purchase_order_isValid;

    m_received_isValid = ::OpenAPI::fromJsonValue(m_received, json[QString("received")]);
    m_received_isSet = !json[QString("received")].isNull() && m_received_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_sales_commission_isValid = ::OpenAPI::fromJsonValue(m_sales_commission, json[QString("sales_commission")]);
    m_sales_commission_isSet = !json[QString("sales_commission")].isNull() && m_sales_commission_isValid;

    m_shipping_and_handling_isValid = ::OpenAPI::fromJsonValue(m_shipping_and_handling, json[QString("shipping_and_handling")]);
    m_shipping_and_handling_isSet = !json[QString("shipping_and_handling")].isNull() && m_shipping_and_handling_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_terms_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions, json[QString("terms_and_conditions")]);
    m_terms_and_conditions_isSet = !json[QString("terms_and_conditions")].isNull() && m_terms_and_conditions_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIInvoiceEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_adjustment_isSet) {
        obj.insert(QString("adjustment"), ::OpenAPI::toJsonValue(m_adjustment));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount.size() > 0) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_excise_duty_isSet) {
        obj.insert(QString("excise_duty"), ::OpenAPI::toJsonValue(m_excise_duty));
    }
    if (m_grand_total_isSet) {
        obj.insert(QString("grand_total"), ::OpenAPI::toJsonValue(m_grand_total));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_date_isSet) {
        obj.insert(QString("invoice_date"), ::OpenAPI::toJsonValue(m_invoice_date));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_purchase_order_isSet) {
        obj.insert(QString("purchase_order"), ::OpenAPI::toJsonValue(m_purchase_order));
    }
    if (m_received_isSet) {
        obj.insert(QString("received"), ::OpenAPI::toJsonValue(m_received));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_sales_commission_isSet) {
        obj.insert(QString("sales_commission"), ::OpenAPI::toJsonValue(m_sales_commission));
    }
    if (m_shipping_and_handling_isSet) {
        obj.insert(QString("shipping_and_handling"), ::OpenAPI::toJsonValue(m_shipping_and_handling));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_subtotal_isSet) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_tax.size() > 0) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_terms_and_conditions_isSet) {
        obj.insert(QString("terms_and_conditions"), ::OpenAPI::toJsonValue(m_terms_and_conditions));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<OAIAddress> OAIInvoiceEntity::getAddress() const {
    return m_address;
}
void OAIInvoiceEntity::setAddress(const QList<OAIAddress> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIInvoiceEntity::is_address_Set() const{
    return m_address_isSet;
}

bool OAIInvoiceEntity::is_address_Valid() const{
    return m_address_isValid;
}

float OAIInvoiceEntity::getAdjustment() const {
    return m_adjustment;
}
void OAIInvoiceEntity::setAdjustment(const float &adjustment) {
    m_adjustment = adjustment;
    m_adjustment_isSet = true;
}

bool OAIInvoiceEntity::is_adjustment_Set() const{
    return m_adjustment_isSet;
}

bool OAIInvoiceEntity::is_adjustment_Valid() const{
    return m_adjustment_isValid;
}

float OAIInvoiceEntity::getBalance() const {
    return m_balance;
}
void OAIInvoiceEntity::setBalance(const float &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIInvoiceEntity::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIInvoiceEntity::is_balance_Valid() const{
    return m_balance_isValid;
}

QDateTime OAIInvoiceEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIInvoiceEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIInvoiceEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIInvoiceEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICurrency OAIInvoiceEntity::getCurrency() const {
    return m_currency;
}
void OAIInvoiceEntity::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIInvoiceEntity::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIInvoiceEntity::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIInvoiceEntity::getDescription() const {
    return m_description;
}
void OAIInvoiceEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInvoiceEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInvoiceEntity::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDiscount> OAIInvoiceEntity::getDiscount() const {
    return m_discount;
}
void OAIInvoiceEntity::setDiscount(const QList<OAIDiscount> &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIInvoiceEntity::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIInvoiceEntity::is_discount_Valid() const{
    return m_discount_isValid;
}

QDate OAIInvoiceEntity::getDueDate() const {
    return m_due_date;
}
void OAIInvoiceEntity::setDueDate(const QDate &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIInvoiceEntity::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIInvoiceEntity::is_due_date_Valid() const{
    return m_due_date_isValid;
}

float OAIInvoiceEntity::getExciseDuty() const {
    return m_excise_duty;
}
void OAIInvoiceEntity::setExciseDuty(const float &excise_duty) {
    m_excise_duty = excise_duty;
    m_excise_duty_isSet = true;
}

bool OAIInvoiceEntity::is_excise_duty_Set() const{
    return m_excise_duty_isSet;
}

bool OAIInvoiceEntity::is_excise_duty_Valid() const{
    return m_excise_duty_isValid;
}

float OAIInvoiceEntity::getGrandTotal() const {
    return m_grand_total;
}
void OAIInvoiceEntity::setGrandTotal(const float &grand_total) {
    m_grand_total = grand_total;
    m_grand_total_isSet = true;
}

bool OAIInvoiceEntity::is_grand_total_Set() const{
    return m_grand_total_isSet;
}

bool OAIInvoiceEntity::is_grand_total_Valid() const{
    return m_grand_total_isValid;
}

QString OAIInvoiceEntity::getId() const {
    return m_id;
}
void OAIInvoiceEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInvoiceEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInvoiceEntity::is_id_Valid() const{
    return m_id_isValid;
}

QDate OAIInvoiceEntity::getInvoiceDate() const {
    return m_invoice_date;
}
void OAIInvoiceEntity::setInvoiceDate(const QDate &invoice_date) {
    m_invoice_date = invoice_date;
    m_invoice_date_isSet = true;
}

bool OAIInvoiceEntity::is_invoice_date_Set() const{
    return m_invoice_date_isSet;
}

bool OAIInvoiceEntity::is_invoice_date_Valid() const{
    return m_invoice_date_isValid;
}

QString OAIInvoiceEntity::getNumber() const {
    return m_number;
}
void OAIInvoiceEntity::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIInvoiceEntity::is_number_Set() const{
    return m_number_isSet;
}

bool OAIInvoiceEntity::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIInvoiceEntity::getPurchaseOrder() const {
    return m_purchase_order;
}
void OAIInvoiceEntity::setPurchaseOrder(const QString &purchase_order) {
    m_purchase_order = purchase_order;
    m_purchase_order_isSet = true;
}

bool OAIInvoiceEntity::is_purchase_order_Set() const{
    return m_purchase_order_isSet;
}

bool OAIInvoiceEntity::is_purchase_order_Valid() const{
    return m_purchase_order_isValid;
}

float OAIInvoiceEntity::getReceived() const {
    return m_received;
}
void OAIInvoiceEntity::setReceived(const float &received) {
    m_received = received;
    m_received_isSet = true;
}

bool OAIInvoiceEntity::is_received_Set() const{
    return m_received_isSet;
}

bool OAIInvoiceEntity::is_received_Valid() const{
    return m_received_isValid;
}

OAIRelation OAIInvoiceEntity::getRelation() const {
    return m_relation;
}
void OAIInvoiceEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIInvoiceEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIInvoiceEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

float OAIInvoiceEntity::getSalesCommission() const {
    return m_sales_commission;
}
void OAIInvoiceEntity::setSalesCommission(const float &sales_commission) {
    m_sales_commission = sales_commission;
    m_sales_commission_isSet = true;
}

bool OAIInvoiceEntity::is_sales_commission_Set() const{
    return m_sales_commission_isSet;
}

bool OAIInvoiceEntity::is_sales_commission_Valid() const{
    return m_sales_commission_isValid;
}

float OAIInvoiceEntity::getShippingAndHandling() const {
    return m_shipping_and_handling;
}
void OAIInvoiceEntity::setShippingAndHandling(const float &shipping_and_handling) {
    m_shipping_and_handling = shipping_and_handling;
    m_shipping_and_handling_isSet = true;
}

bool OAIInvoiceEntity::is_shipping_and_handling_Set() const{
    return m_shipping_and_handling_isSet;
}

bool OAIInvoiceEntity::is_shipping_and_handling_Valid() const{
    return m_shipping_and_handling_isValid;
}

QString OAIInvoiceEntity::getStatus() const {
    return m_status;
}
void OAIInvoiceEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInvoiceEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInvoiceEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInvoiceEntity::getSubject() const {
    return m_subject;
}
void OAIInvoiceEntity::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIInvoiceEntity::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIInvoiceEntity::is_subject_Valid() const{
    return m_subject_isValid;
}

float OAIInvoiceEntity::getSubtotal() const {
    return m_subtotal;
}
void OAIInvoiceEntity::setSubtotal(const float &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAIInvoiceEntity::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAIInvoiceEntity::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

QList<OAITax> OAIInvoiceEntity::getTax() const {
    return m_tax;
}
void OAIInvoiceEntity::setTax(const QList<OAITax> &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIInvoiceEntity::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIInvoiceEntity::is_tax_Valid() const{
    return m_tax_isValid;
}

QString OAIInvoiceEntity::getTermsAndConditions() const {
    return m_terms_and_conditions;
}
void OAIInvoiceEntity::setTermsAndConditions(const QString &terms_and_conditions) {
    m_terms_and_conditions = terms_and_conditions;
    m_terms_and_conditions_isSet = true;
}

bool OAIInvoiceEntity::is_terms_and_conditions_Set() const{
    return m_terms_and_conditions_isSet;
}

bool OAIInvoiceEntity::is_terms_and_conditions_Valid() const{
    return m_terms_and_conditions_isValid;
}

float OAIInvoiceEntity::getTotalPrice() const {
    return m_total_price;
}
void OAIInvoiceEntity::setTotalPrice(const float &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAIInvoiceEntity::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAIInvoiceEntity::is_total_price_Valid() const{
    return m_total_price_isValid;
}

QDateTime OAIInvoiceEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIInvoiceEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIInvoiceEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIInvoiceEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIInvoiceEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjustment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excise_duty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_and_handling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
