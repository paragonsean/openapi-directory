/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaDescribe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaDescribe::OAISchemaDescribe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaDescribe::OAISchemaDescribe() {
    this->initializeModel();
}

OAISchemaDescribe::~OAISchemaDescribe() {}

void OAISchemaDescribe::initializeModel() {

    m_create_isSet = false;
    m_create_isValid = false;

    m_fetch_isSet = false;
    m_fetch_isValid = false;

    m_fetch_all_isSet = false;
    m_fetch_all_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;
}

void OAISchemaDescribe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaDescribe::fromJsonObject(QJsonObject json) {

    m_create_isValid = ::OpenAPI::fromJsonValue(m_create, json[QString("create")]);
    m_create_isSet = !json[QString("create")].isNull() && m_create_isValid;

    m_fetch_isValid = ::OpenAPI::fromJsonValue(m_fetch, json[QString("fetch")]);
    m_fetch_isSet = !json[QString("fetch")].isNull() && m_fetch_isValid;

    m_fetch_all_isValid = ::OpenAPI::fromJsonValue(m_fetch_all, json[QString("fetchAll")]);
    m_fetch_all_isSet = !json[QString("fetchAll")].isNull() && m_fetch_all_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("update")]);
    m_update_isSet = !json[QString("update")].isNull() && m_update_isValid;
}

QString OAISchemaDescribe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaDescribe::asJsonObject() const {
    QJsonObject obj;
    if (m_create_isSet) {
        obj.insert(QString("create"), ::OpenAPI::toJsonValue(m_create));
    }
    if (m_fetch_isSet) {
        obj.insert(QString("fetch"), ::OpenAPI::toJsonValue(m_fetch));
    }
    if (m_fetch_all_isSet) {
        obj.insert(QString("fetchAll"), ::OpenAPI::toJsonValue(m_fetch_all));
    }
    if (m_update_isSet) {
        obj.insert(QString("update"), ::OpenAPI::toJsonValue(m_update));
    }
    return obj;
}

OAIObject OAISchemaDescribe::getCreate() const {
    return m_create;
}
void OAISchemaDescribe::setCreate(const OAIObject &create) {
    m_create = create;
    m_create_isSet = true;
}

bool OAISchemaDescribe::is_create_Set() const{
    return m_create_isSet;
}

bool OAISchemaDescribe::is_create_Valid() const{
    return m_create_isValid;
}

OAIObject OAISchemaDescribe::getFetch() const {
    return m_fetch;
}
void OAISchemaDescribe::setFetch(const OAIObject &fetch) {
    m_fetch = fetch;
    m_fetch_isSet = true;
}

bool OAISchemaDescribe::is_fetch_Set() const{
    return m_fetch_isSet;
}

bool OAISchemaDescribe::is_fetch_Valid() const{
    return m_fetch_isValid;
}

OAIObject OAISchemaDescribe::getFetchAll() const {
    return m_fetch_all;
}
void OAISchemaDescribe::setFetchAll(const OAIObject &fetch_all) {
    m_fetch_all = fetch_all;
    m_fetch_all_isSet = true;
}

bool OAISchemaDescribe::is_fetch_all_Set() const{
    return m_fetch_all_isSet;
}

bool OAISchemaDescribe::is_fetch_all_Valid() const{
    return m_fetch_all_isValid;
}

OAIObject OAISchemaDescribe::getUpdate() const {
    return m_update;
}
void OAISchemaDescribe::setUpdate(const OAIObject &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAISchemaDescribe::is_update_Set() const{
    return m_update_isSet;
}

bool OAISchemaDescribe::is_update_Valid() const{
    return m_update_isValid;
}

bool OAISchemaDescribe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaDescribe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
