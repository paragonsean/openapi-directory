/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketEntity::OAITicketEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketEntity::OAITicketEntity() {
    this->initializeModel();
}

OAITicketEntity::~OAITicketEntity() {}

void OAITicketEntity::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_due_at_isSet = false;
    m_due_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_pipeline_with_stage_isSet = false;
    m_pipeline_with_stage_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITicketEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketEntity::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_due_at_isValid = ::OpenAPI::fromJsonValue(m_due_at, json[QString("due_at")]);
    m_due_at_isSet = !json[QString("due_at")].isNull() && m_due_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_pipeline_with_stage_isValid = ::OpenAPI::fromJsonValue(m_pipeline_with_stage, json[QString("pipeline_with_stage")]);
    m_pipeline_with_stage_isSet = !json[QString("pipeline_with_stage")].isNull() && m_pipeline_with_stage_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITicketEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_due_at_isSet) {
        obj.insert(QString("due_at"), ::OpenAPI::toJsonValue(m_due_at));
    }
    if (m_email.size() > 0) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_pipeline_with_stage_isSet) {
        obj.insert(QString("pipeline_with_stage"), ::OpenAPI::toJsonValue(m_pipeline_with_stage));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<QString> OAITicketEntity::getCategory() const {
    return m_category;
}
void OAITicketEntity::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITicketEntity::is_category_Set() const{
    return m_category_isSet;
}

bool OAITicketEntity::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAITicketEntity::getClosedAt() const {
    return m_closed_at;
}
void OAITicketEntity::setClosedAt(const QDateTime &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAITicketEntity::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAITicketEntity::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

QDateTime OAITicketEntity::getCreatedAt() const {
    return m_created_at;
}
void OAITicketEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITicketEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITicketEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITicketEntity::getDescription() const {
    return m_description;
}
void OAITicketEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITicketEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAITicketEntity::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAITicketEntity::getDueAt() const {
    return m_due_at;
}
void OAITicketEntity::setDueAt(const QDateTime &due_at) {
    m_due_at = due_at;
    m_due_at_isSet = true;
}

bool OAITicketEntity::is_due_at_Set() const{
    return m_due_at_isSet;
}

bool OAITicketEntity::is_due_at_Valid() const{
    return m_due_at_isValid;
}

QList<OAIEmail> OAITicketEntity::getEmail() const {
    return m_email;
}
void OAITicketEntity::setEmail(const QList<OAIEmail> &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAITicketEntity::is_email_Set() const{
    return m_email_isSet;
}

bool OAITicketEntity::is_email_Valid() const{
    return m_email_isValid;
}

QString OAITicketEntity::getId() const {
    return m_id;
}
void OAITicketEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITicketEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAITicketEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITicketEntity::getNumber() const {
    return m_number;
}
void OAITicketEntity::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAITicketEntity::is_number_Set() const{
    return m_number_isSet;
}

bool OAITicketEntity::is_number_Valid() const{
    return m_number_isValid;
}

QString OAITicketEntity::getPipelineWithStage() const {
    return m_pipeline_with_stage;
}
void OAITicketEntity::setPipelineWithStage(const QString &pipeline_with_stage) {
    m_pipeline_with_stage = pipeline_with_stage;
    m_pipeline_with_stage_isSet = true;
}

bool OAITicketEntity::is_pipeline_with_stage_Set() const{
    return m_pipeline_with_stage_isSet;
}

bool OAITicketEntity::is_pipeline_with_stage_Valid() const{
    return m_pipeline_with_stage_isValid;
}

QString OAITicketEntity::getPriority() const {
    return m_priority;
}
void OAITicketEntity::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITicketEntity::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITicketEntity::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIRelation OAITicketEntity::getRelation() const {
    return m_relation;
}
void OAITicketEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAITicketEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAITicketEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAITicketEntity::getResolution() const {
    return m_resolution;
}
void OAITicketEntity::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAITicketEntity::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAITicketEntity::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAITicketEntity::getSource() const {
    return m_source;
}
void OAITicketEntity::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITicketEntity::is_source_Set() const{
    return m_source_isSet;
}

bool OAITicketEntity::is_source_Valid() const{
    return m_source_isValid;
}

QString OAITicketEntity::getSubject() const {
    return m_subject;
}
void OAITicketEntity::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAITicketEntity::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAITicketEntity::is_subject_Valid() const{
    return m_subject_isValid;
}

QDateTime OAITicketEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAITicketEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITicketEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITicketEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITicketEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_with_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
