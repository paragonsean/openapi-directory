/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceBookEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceBookEntity::OAIPriceBookEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceBookEntity::OAIPriceBookEntity() {
    this->initializeModel();
}

OAIPriceBookEntity::~OAIPriceBookEntity() {}

void OAIPriceBookEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_standard_isSet = false;
    m_is_standard_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIPriceBookEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceBookEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_standard_isValid = ::OpenAPI::fromJsonValue(m_is_standard, json[QString("is_standard")]);
    m_is_standard_isSet = !json[QString("is_standard")].isNull() && m_is_standard_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIPriceBookEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceBookEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_standard_isSet) {
        obj.insert(QString("is_standard"), ::OpenAPI::toJsonValue(m_is_standard));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIPriceBookEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIPriceBookEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPriceBookEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPriceBookEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICurrency OAIPriceBookEntity::getCurrency() const {
    return m_currency;
}
void OAIPriceBookEntity::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPriceBookEntity::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPriceBookEntity::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPriceBookEntity::getDescription() const {
    return m_description;
}
void OAIPriceBookEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPriceBookEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPriceBookEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPriceBookEntity::getId() const {
    return m_id;
}
void OAIPriceBookEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPriceBookEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPriceBookEntity::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPriceBookEntity::isIsActive() const {
    return m_is_active;
}
void OAIPriceBookEntity::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIPriceBookEntity::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIPriceBookEntity::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIPriceBookEntity::isIsStandard() const {
    return m_is_standard;
}
void OAIPriceBookEntity::setIsStandard(const bool &is_standard) {
    m_is_standard = is_standard;
    m_is_standard_isSet = true;
}

bool OAIPriceBookEntity::is_is_standard_Set() const{
    return m_is_standard_isSet;
}

bool OAIPriceBookEntity::is_is_standard_Valid() const{
    return m_is_standard_isValid;
}

QString OAIPriceBookEntity::getName() const {
    return m_name;
}
void OAIPriceBookEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPriceBookEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPriceBookEntity::is_name_Valid() const{
    return m_name_isValid;
}

OAIRelation OAIPriceBookEntity::getRelation() const {
    return m_relation;
}
void OAIPriceBookEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIPriceBookEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIPriceBookEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAIPriceBookEntity::getType() const {
    return m_type;
}
void OAIPriceBookEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPriceBookEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPriceBookEntity::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIPriceBookEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPriceBookEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPriceBookEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPriceBookEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIPriceBookEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_standard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceBookEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
