/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeadEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeadEntity::OAILeadEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeadEntity::OAILeadEntity() {
    this->initializeModel();
}

OAILeadEntity::~OAILeadEntity() {}

void OAILeadEntity::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_annual_revenue_isSet = false;
    m_annual_revenue_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_do_not_call_isSet = false;
    m_do_not_call_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_messenger_isSet = false;
    m_messenger_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_name_suffix_isSet = false;
    m_name_suffix_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_salutation_isSet = false;
    m_salutation_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_description_isSet = false;
    m_source_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAILeadEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeadEntity::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_annual_revenue_isValid = ::OpenAPI::fromJsonValue(m_annual_revenue, json[QString("annual_revenue")]);
    m_annual_revenue_isSet = !json[QString("annual_revenue")].isNull() && m_annual_revenue_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("birth_date")]);
    m_birth_date_isSet = !json[QString("birth_date")].isNull() && m_birth_date_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_do_not_call_isValid = ::OpenAPI::fromJsonValue(m_do_not_call, json[QString("do_not_call")]);
    m_do_not_call_isSet = !json[QString("do_not_call")].isNull() && m_do_not_call_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_messenger_isValid = ::OpenAPI::fromJsonValue(m_messenger, json[QString("messenger")]);
    m_messenger_isSet = !json[QString("messenger")].isNull() && m_messenger_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("middle_name")]);
    m_middle_name_isSet = !json[QString("middle_name")].isNull() && m_middle_name_isValid;

    m_name_suffix_isValid = ::OpenAPI::fromJsonValue(m_name_suffix, json[QString("name_suffix")]);
    m_name_suffix_isSet = !json[QString("name_suffix")].isNull() && m_name_suffix_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_salutation_isValid = ::OpenAPI::fromJsonValue(m_salutation, json[QString("salutation")]);
    m_salutation_isSet = !json[QString("salutation")].isNull() && m_salutation_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_description_isValid = ::OpenAPI::fromJsonValue(m_source_description, json[QString("source_description")]);
    m_source_description_isSet = !json[QString("source_description")].isNull() && m_source_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("status_description")]);
    m_status_description_isSet = !json[QString("status_description")].isNull() && m_status_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAILeadEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeadEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_annual_revenue_isSet) {
        obj.insert(QString("annual_revenue"), ::OpenAPI::toJsonValue(m_annual_revenue));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("birth_date"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_do_not_call_isSet) {
        obj.insert(QString("do_not_call"), ::OpenAPI::toJsonValue(m_do_not_call));
    }
    if (m_email.size() > 0) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_industry.size() > 0) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_messenger.size() > 0) {
        obj.insert(QString("messenger"), ::OpenAPI::toJsonValue(m_messenger));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("middle_name"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_name_suffix_isSet) {
        obj.insert(QString("name_suffix"), ::OpenAPI::toJsonValue(m_name_suffix));
    }
    if (m_phone.size() > 0) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_salutation_isSet) {
        obj.insert(QString("salutation"), ::OpenAPI::toJsonValue(m_salutation));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_description_isSet) {
        obj.insert(QString("source_description"), ::OpenAPI::toJsonValue(m_source_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("status_description"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_website.size() > 0) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QList<OAIAddress> OAILeadEntity::getAddress() const {
    return m_address;
}
void OAILeadEntity::setAddress(const QList<OAIAddress> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILeadEntity::is_address_Set() const{
    return m_address_isSet;
}

bool OAILeadEntity::is_address_Valid() const{
    return m_address_isValid;
}

QString OAILeadEntity::getAnnualRevenue() const {
    return m_annual_revenue;
}
void OAILeadEntity::setAnnualRevenue(const QString &annual_revenue) {
    m_annual_revenue = annual_revenue;
    m_annual_revenue_isSet = true;
}

bool OAILeadEntity::is_annual_revenue_Set() const{
    return m_annual_revenue_isSet;
}

bool OAILeadEntity::is_annual_revenue_Valid() const{
    return m_annual_revenue_isValid;
}

QDate OAILeadEntity::getBirthDate() const {
    return m_birth_date;
}
void OAILeadEntity::setBirthDate(const QDate &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAILeadEntity::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAILeadEntity::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAILeadEntity::getCompany() const {
    return m_company;
}
void OAILeadEntity::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAILeadEntity::is_company_Set() const{
    return m_company_isSet;
}

bool OAILeadEntity::is_company_Valid() const{
    return m_company_isValid;
}

QDateTime OAILeadEntity::getCreatedAt() const {
    return m_created_at;
}
void OAILeadEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILeadEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILeadEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAILeadEntity::getDepartment() const {
    return m_department;
}
void OAILeadEntity::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAILeadEntity::is_department_Set() const{
    return m_department_isSet;
}

bool OAILeadEntity::is_department_Valid() const{
    return m_department_isValid;
}

QString OAILeadEntity::getDescription() const {
    return m_description;
}
void OAILeadEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILeadEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAILeadEntity::is_description_Valid() const{
    return m_description_isValid;
}

bool OAILeadEntity::isDoNotCall() const {
    return m_do_not_call;
}
void OAILeadEntity::setDoNotCall(const bool &do_not_call) {
    m_do_not_call = do_not_call;
    m_do_not_call_isSet = true;
}

bool OAILeadEntity::is_do_not_call_Set() const{
    return m_do_not_call_isSet;
}

bool OAILeadEntity::is_do_not_call_Valid() const{
    return m_do_not_call_isValid;
}

QList<OAIEmail> OAILeadEntity::getEmail() const {
    return m_email;
}
void OAILeadEntity::setEmail(const QList<OAIEmail> &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAILeadEntity::is_email_Set() const{
    return m_email_isSet;
}

bool OAILeadEntity::is_email_Valid() const{
    return m_email_isValid;
}

QString OAILeadEntity::getFirstName() const {
    return m_first_name;
}
void OAILeadEntity::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAILeadEntity::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAILeadEntity::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAILeadEntity::getId() const {
    return m_id;
}
void OAILeadEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILeadEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAILeadEntity::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAILeadEntity::getIndustry() const {
    return m_industry;
}
void OAILeadEntity::setIndustry(const QList<QString> &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAILeadEntity::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAILeadEntity::is_industry_Valid() const{
    return m_industry_isValid;
}

QString OAILeadEntity::getLastName() const {
    return m_last_name;
}
void OAILeadEntity::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAILeadEntity::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAILeadEntity::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<OAIMessenger> OAILeadEntity::getMessenger() const {
    return m_messenger;
}
void OAILeadEntity::setMessenger(const QList<OAIMessenger> &messenger) {
    m_messenger = messenger;
    m_messenger_isSet = true;
}

bool OAILeadEntity::is_messenger_Set() const{
    return m_messenger_isSet;
}

bool OAILeadEntity::is_messenger_Valid() const{
    return m_messenger_isValid;
}

QString OAILeadEntity::getMiddleName() const {
    return m_middle_name;
}
void OAILeadEntity::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAILeadEntity::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAILeadEntity::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QString OAILeadEntity::getNameSuffix() const {
    return m_name_suffix;
}
void OAILeadEntity::setNameSuffix(const QString &name_suffix) {
    m_name_suffix = name_suffix;
    m_name_suffix_isSet = true;
}

bool OAILeadEntity::is_name_suffix_Set() const{
    return m_name_suffix_isSet;
}

bool OAILeadEntity::is_name_suffix_Valid() const{
    return m_name_suffix_isValid;
}

QList<OAIPhone> OAILeadEntity::getPhone() const {
    return m_phone;
}
void OAILeadEntity::setPhone(const QList<OAIPhone> &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAILeadEntity::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAILeadEntity::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAILeadEntity::getPosition() const {
    return m_position;
}
void OAILeadEntity::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAILeadEntity::is_position_Set() const{
    return m_position_isSet;
}

bool OAILeadEntity::is_position_Valid() const{
    return m_position_isValid;
}

QString OAILeadEntity::getRating() const {
    return m_rating;
}
void OAILeadEntity::setRating(const QString &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAILeadEntity::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAILeadEntity::is_rating_Valid() const{
    return m_rating_isValid;
}

OAIRelation OAILeadEntity::getRelation() const {
    return m_relation;
}
void OAILeadEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAILeadEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAILeadEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAILeadEntity::getSalutation() const {
    return m_salutation;
}
void OAILeadEntity::setSalutation(const QString &salutation) {
    m_salutation = salutation;
    m_salutation_isSet = true;
}

bool OAILeadEntity::is_salutation_Set() const{
    return m_salutation_isSet;
}

bool OAILeadEntity::is_salutation_Valid() const{
    return m_salutation_isValid;
}

QString OAILeadEntity::getSource() const {
    return m_source;
}
void OAILeadEntity::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILeadEntity::is_source_Set() const{
    return m_source_isSet;
}

bool OAILeadEntity::is_source_Valid() const{
    return m_source_isValid;
}

QString OAILeadEntity::getSourceDescription() const {
    return m_source_description;
}
void OAILeadEntity::setSourceDescription(const QString &source_description) {
    m_source_description = source_description;
    m_source_description_isSet = true;
}

bool OAILeadEntity::is_source_description_Set() const{
    return m_source_description_isSet;
}

bool OAILeadEntity::is_source_description_Valid() const{
    return m_source_description_isValid;
}

QString OAILeadEntity::getStatus() const {
    return m_status;
}
void OAILeadEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILeadEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAILeadEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILeadEntity::getStatusDescription() const {
    return m_status_description;
}
void OAILeadEntity::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAILeadEntity::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAILeadEntity::is_status_description_Valid() const{
    return m_status_description_isValid;
}

QString OAILeadEntity::getType() const {
    return m_type;
}
void OAILeadEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILeadEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAILeadEntity::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAILeadEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAILeadEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAILeadEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAILeadEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<OAIWebsite> OAILeadEntity::getWebsite() const {
    return m_website;
}
void OAILeadEntity::setWebsite(const QList<OAIWebsite> &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAILeadEntity::is_website_Set() const{
    return m_website_isSet;
}

bool OAILeadEntity::is_website_Valid() const{
    return m_website_isValid;
}

bool OAILeadEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_annual_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messenger.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salutation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeadEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
