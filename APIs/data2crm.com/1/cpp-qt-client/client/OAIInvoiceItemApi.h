/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInvoiceItemApi_H
#define OAI_OAIInvoiceItemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregate.h"
#include "OAIBulkEntity.h"
#include "OAIBulkEntityRelation.h"
#include "OAICount.h"
#include "OAIInvoiceItemDescribe.h"
#include "OAIInvoiceItemEntity.h"
#include "OAIInvoiceItemEntityRelation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInvoiceItemApi : public QObject {
    Q_OBJECT

public:
    OAIInvoiceItemApi(const int timeOut = 0);
    ~OAIInvoiceItemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIInvoiceItemEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createInvoiceItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIInvoiceItemEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createInvoiceItemEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    */
    virtual void deleteInvoiceItemCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  invoice_item_id QString [required]
    */
    virtual void deleteInvoiceItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &invoice_item_id);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  pipeline QString [optional]
    */
    virtual void getInvoiceItemAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pipeline = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  unique QString [optional]
    */
    virtual void getInvoiceItemCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void getInvoiceItemCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void getInvoiceItemDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  invoice_item_id QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getInvoiceItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &invoice_item_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  invoice_item_id QString [required]
    * @param[in]  body OAIInvoiceItemEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateInvoiceItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &invoice_item_id, const OAIInvoiceItemEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateInvoiceItemEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createInvoiceItemEntityCallback(OAIHttpRequestWorker *worker);
    void createInvoiceItemEntityBulkCallback(OAIHttpRequestWorker *worker);
    void deleteInvoiceItemCollectionBulkCallback(OAIHttpRequestWorker *worker);
    void deleteInvoiceItemEntityCallback(OAIHttpRequestWorker *worker);
    void getInvoiceItemAggregateCallback(OAIHttpRequestWorker *worker);
    void getInvoiceItemCollectionCallback(OAIHttpRequestWorker *worker);
    void getInvoiceItemCountCollectionCallback(OAIHttpRequestWorker *worker);
    void getInvoiceItemDescribeCallback(OAIHttpRequestWorker *worker);
    void getInvoiceItemEntityCallback(OAIHttpRequestWorker *worker);
    void updateInvoiceItemEntityCallback(OAIHttpRequestWorker *worker);
    void updateInvoiceItemEntityBulkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createInvoiceItemEntitySignal(OAIInvoiceItemEntityRelation summary);
    void createInvoiceItemEntityBulkSignal(OAIBulkEntityRelation summary);
    void deleteInvoiceItemCollectionBulkSignal(OAIBulkEntity summary);
    void deleteInvoiceItemEntitySignal();
    void getInvoiceItemAggregateSignal(OAIAggregate summary);
    void getInvoiceItemCollectionSignal(QList<OAIInvoiceItemEntity> summary);
    void getInvoiceItemCountCollectionSignal(OAICount summary);
    void getInvoiceItemDescribeSignal(OAIInvoiceItemDescribe summary);
    void getInvoiceItemEntitySignal(OAIInvoiceItemEntity summary);
    void updateInvoiceItemEntitySignal(OAIInvoiceItemEntityRelation summary);
    void updateInvoiceItemEntityBulkSignal(OAIBulkEntityRelation summary);


    void createInvoiceItemEntitySignalFull(OAIHttpRequestWorker *worker, OAIInvoiceItemEntityRelation summary);
    void createInvoiceItemEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);
    void deleteInvoiceItemCollectionBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntity summary);
    void deleteInvoiceItemEntitySignalFull(OAIHttpRequestWorker *worker);
    void getInvoiceItemAggregateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void getInvoiceItemCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvoiceItemEntity> summary);
    void getInvoiceItemCountCollectionSignalFull(OAIHttpRequestWorker *worker, OAICount summary);
    void getInvoiceItemDescribeSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceItemDescribe summary);
    void getInvoiceItemEntitySignalFull(OAIHttpRequestWorker *worker, OAIInvoiceItemEntity summary);
    void updateInvoiceItemEntitySignalFull(OAIHttpRequestWorker *worker, OAIInvoiceItemEntityRelation summary);
    void updateInvoiceItemEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);

    Q_DECL_DEPRECATED_X("Use createInvoiceItemEntitySignalError() instead")
    void createInvoiceItemEntitySignalE(OAIInvoiceItemEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceItemEntitySignalError(OAIInvoiceItemEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceItemEntityBulkSignalError() instead")
    void createInvoiceItemEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceItemEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInvoiceItemCollectionBulkSignalError() instead")
    void deleteInvoiceItemCollectionBulkSignalE(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInvoiceItemCollectionBulkSignalError(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInvoiceItemEntitySignalError() instead")
    void deleteInvoiceItemEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInvoiceItemEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemAggregateSignalError() instead")
    void getInvoiceItemAggregateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemAggregateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemCollectionSignalError() instead")
    void getInvoiceItemCollectionSignalE(QList<OAIInvoiceItemEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemCollectionSignalError(QList<OAIInvoiceItemEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemCountCollectionSignalError() instead")
    void getInvoiceItemCountCollectionSignalE(OAICount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemCountCollectionSignalError(OAICount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemDescribeSignalError() instead")
    void getInvoiceItemDescribeSignalE(OAIInvoiceItemDescribe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemDescribeSignalError(OAIInvoiceItemDescribe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemEntitySignalError() instead")
    void getInvoiceItemEntitySignalE(OAIInvoiceItemEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemEntitySignalError(OAIInvoiceItemEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceItemEntitySignalError() instead")
    void updateInvoiceItemEntitySignalE(OAIInvoiceItemEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceItemEntitySignalError(OAIInvoiceItemEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceItemEntityBulkSignalError() instead")
    void updateInvoiceItemEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceItemEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createInvoiceItemEntitySignalErrorFull() instead")
    void createInvoiceItemEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceItemEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceItemEntityBulkSignalErrorFull() instead")
    void createInvoiceItemEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceItemEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInvoiceItemCollectionBulkSignalErrorFull() instead")
    void deleteInvoiceItemCollectionBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInvoiceItemCollectionBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInvoiceItemEntitySignalErrorFull() instead")
    void deleteInvoiceItemEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInvoiceItemEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemAggregateSignalErrorFull() instead")
    void getInvoiceItemAggregateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemAggregateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemCollectionSignalErrorFull() instead")
    void getInvoiceItemCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemCountCollectionSignalErrorFull() instead")
    void getInvoiceItemCountCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemCountCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemDescribeSignalErrorFull() instead")
    void getInvoiceItemDescribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemDescribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceItemEntitySignalErrorFull() instead")
    void getInvoiceItemEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceItemEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceItemEntitySignalErrorFull() instead")
    void updateInvoiceItemEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceItemEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceItemEntityBulkSignalErrorFull() instead")
    void updateInvoiceItemEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceItemEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
