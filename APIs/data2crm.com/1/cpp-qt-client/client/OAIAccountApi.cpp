/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAccountApi::OAIAccountApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAccountApi::~OAIAccountApi() {
}

void OAIAccountApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api-2445581398133.apicast.io:443/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createAccountEntity", defaultConf);
    _serverIndices.insert("createAccountEntity", 0);
    _serverConfigs.insert("createAccountEntityBulk", defaultConf);
    _serverIndices.insert("createAccountEntityBulk", 0);
    _serverConfigs.insert("deleteAccountCollectionBulk", defaultConf);
    _serverIndices.insert("deleteAccountCollectionBulk", 0);
    _serverConfigs.insert("deleteAccountEntity", defaultConf);
    _serverIndices.insert("deleteAccountEntity", 0);
    _serverConfigs.insert("getAccountAggregate", defaultConf);
    _serverIndices.insert("getAccountAggregate", 0);
    _serverConfigs.insert("getAccountCollection", defaultConf);
    _serverIndices.insert("getAccountCollection", 0);
    _serverConfigs.insert("getAccountCountCollection", defaultConf);
    _serverIndices.insert("getAccountCountCollection", 0);
    _serverConfigs.insert("getAccountDescribe", defaultConf);
    _serverIndices.insert("getAccountDescribe", 0);
    _serverConfigs.insert("getAccountEntity", defaultConf);
    _serverIndices.insert("getAccountEntity", 0);
    _serverConfigs.insert("updateAccountEntity", defaultConf);
    _serverIndices.insert("updateAccountEntity", 0);
    _serverConfigs.insert("updateAccountEntityBulk", defaultConf);
    _serverIndices.insert("updateAccountEntityBulk", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAccountApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAccountApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAccountApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAccountApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAccountApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAccountApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAccountApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAccountApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAccountApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAccountApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAccountApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAccountApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAccountApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAccountApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAccountApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAccountApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAccountApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAccountApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAccountApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAccountApi::createAccountEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIAccountEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createAccountEntity"][_serverIndices.value("createAccountEntity")].URL()+"/application/entity/account");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::createAccountEntityCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::createAccountEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccountEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createAccountEntitySignal(output);
        Q_EMIT createAccountEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createAccountEntitySignalE(output, error_type, error_str);
        Q_EMIT createAccountEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createAccountEntitySignalError(output, error_type, error_str);
        Q_EMIT createAccountEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::createAccountEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createAccountEntityBulk"][_serverIndices.value("createAccountEntityBulk")].URL()+"/application/entity/account/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::createAccountEntityBulkCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::createAccountEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createAccountEntityBulkSignal(output);
        Q_EMIT createAccountEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createAccountEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT createAccountEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createAccountEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT createAccountEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::deleteAccountCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body) {
    QString fullPath = QString(_serverConfigs["deleteAccountCollectionBulk"][_serverIndices.value("deleteAccountCollectionBulk")].URL()+"/application/entity/account/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::deleteAccountCollectionBulkCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::deleteAccountCollectionBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteAccountCollectionBulkSignal(output);
        Q_EMIT deleteAccountCollectionBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteAccountCollectionBulkSignalE(output, error_type, error_str);
        Q_EMIT deleteAccountCollectionBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteAccountCollectionBulkSignalError(output, error_type, error_str);
        Q_EMIT deleteAccountCollectionBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::deleteAccountEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &account_id) {
    QString fullPath = QString(_serverConfigs["deleteAccountEntity"][_serverIndices.value("deleteAccountEntity")].URL()+"/application/entity/account/{account_id}");
    
    
    {
        QString account_idPathParam("{");
        account_idPathParam.append("account_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account_id"+pathSuffix : pathPrefix;
        fullPath.replace(account_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::deleteAccountEntityCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::deleteAccountEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteAccountEntitySignal();
        Q_EMIT deleteAccountEntitySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteAccountEntitySignalE(error_type, error_str);
        Q_EMIT deleteAccountEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteAccountEntitySignalError(error_type, error_str);
        Q_EMIT deleteAccountEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::getAccountAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &pipeline) {
    QString fullPath = QString(_serverConfigs["getAccountAggregate"][_serverIndices.value("getAccountAggregate")].URL()+"/application/entity/account/aggregate");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (pipeline.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pipeline", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pipeline")).append(querySuffix).append(QUrl::toPercentEncoding(pipeline.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::getAccountAggregateCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::getAccountAggregateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAggregate output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccountAggregateSignal(output);
        Q_EMIT getAccountAggregateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccountAggregateSignalE(output, error_type, error_str);
        Q_EMIT getAccountAggregateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccountAggregateSignalError(output, error_type, error_str);
        Q_EMIT getAccountAggregateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::getAccountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &unique) {
    QString fullPath = QString(_serverConfigs["getAccountCollection"][_serverIndices.value("getAccountCollection")].URL()+"/application/entity/account/list");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page_size", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page_size")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    if (unique.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "unique", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("unique")).append(querySuffix).append(QUrl::toPercentEncoding(unique.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::getAccountCollectionCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::getAccountCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAccountEntity> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAccountEntity val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccountCollectionSignal(output);
        Q_EMIT getAccountCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccountCollectionSignalE(output, error_type, error_str);
        Q_EMIT getAccountCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccountCollectionSignalError(output, error_type, error_str);
        Q_EMIT getAccountCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::getAccountCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &filter) {
    QString fullPath = QString(_serverConfigs["getAccountCountCollection"][_serverIndices.value("getAccountCountCollection")].URL()+"/application/entity/account/count");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::getAccountCountCollectionCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::getAccountCountCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccountCountCollectionSignal(output);
        Q_EMIT getAccountCountCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccountCountCollectionSignalE(output, error_type, error_str);
        Q_EMIT getAccountCountCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccountCountCollectionSignalError(output, error_type, error_str);
        Q_EMIT getAccountCountCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::getAccountDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["getAccountDescribe"][_serverIndices.value("getAccountDescribe")].URL()+"/application/entity/account/describe");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::getAccountDescribeCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::getAccountDescribeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccountDescribe output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccountDescribeSignal(output);
        Q_EMIT getAccountDescribeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccountDescribeSignalE(output, error_type, error_str);
        Q_EMIT getAccountDescribeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccountDescribeSignalError(output, error_type, error_str);
        Q_EMIT getAccountDescribeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::getAccountEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &account_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields) {
    QString fullPath = QString(_serverConfigs["getAccountEntity"][_serverIndices.value("getAccountEntity")].URL()+"/application/entity/account/{account_id}");
    
    
    {
        QString account_idPathParam("{");
        account_idPathParam.append("account_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account_id"+pathSuffix : pathPrefix;
        fullPath.replace(account_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::getAccountEntityCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::getAccountEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccountEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccountEntitySignal(output);
        Q_EMIT getAccountEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccountEntitySignalE(output, error_type, error_str);
        Q_EMIT getAccountEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccountEntitySignalError(output, error_type, error_str);
        Q_EMIT getAccountEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::updateAccountEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &account_id, const OAIAccountEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateAccountEntity"][_serverIndices.value("updateAccountEntity")].URL()+"/application/entity/account/{account_id}");
    
    
    {
        QString account_idPathParam("{");
        account_idPathParam.append("account_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account_id"+pathSuffix : pathPrefix;
        fullPath.replace(account_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::updateAccountEntityCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::updateAccountEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccountEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateAccountEntitySignal(output);
        Q_EMIT updateAccountEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateAccountEntitySignalE(output, error_type, error_str);
        Q_EMIT updateAccountEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateAccountEntitySignalError(output, error_type, error_str);
        Q_EMIT updateAccountEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::updateAccountEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateAccountEntityBulk"][_serverIndices.value("updateAccountEntityBulk")].URL()+"/application/entity/account/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountApi::updateAccountEntityBulkCallback);
    connect(this, &OAIAccountApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountApi::updateAccountEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateAccountEntityBulkSignal(output);
        Q_EMIT updateAccountEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateAccountEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT updateAccountEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateAccountEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT updateAccountEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
