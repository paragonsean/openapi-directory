/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationEntityList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationEntityList::OAIApplicationEntityList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationEntityList::OAIApplicationEntityList() {
    this->initializeModel();
}

OAIApplicationEntityList::~OAIApplicationEntityList() {}

void OAIApplicationEntityList::initializeModel() {

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_used_at_isSet = false;
    m_last_used_at_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_key_isSet = false;
    m_user_key_isValid = false;
}

void OAIApplicationEntityList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationEntityList::fromJsonObject(QJsonObject json) {

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_used_at_isValid = ::OpenAPI::fromJsonValue(m_last_used_at, json[QString("last_used_at")]);
    m_last_used_at_isSet = !json[QString("last_used_at")].isNull() && m_last_used_at_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_key_isValid = ::OpenAPI::fromJsonValue(m_user_key, json[QString("user_key")]);
    m_user_key_isSet = !json[QString("user_key")].isNull() && m_user_key_isValid;
}

QString OAIApplicationEntityList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationEntityList::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_isSet) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_used_at_isSet) {
        obj.insert(QString("last_used_at"), ::OpenAPI::toJsonValue(m_last_used_at));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_key_isSet) {
        obj.insert(QString("user_key"), ::OpenAPI::toJsonValue(m_user_key));
    }
    return obj;
}

QString OAIApplicationEntityList::getAuthorization() const {
    return m_authorization;
}
void OAIApplicationEntityList::setAuthorization(const QString &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIApplicationEntityList::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIApplicationEntityList::is_authorization_Valid() const{
    return m_authorization_isValid;
}

OAICompany OAIApplicationEntityList::getCompany() const {
    return m_company;
}
void OAIApplicationEntityList::setCompany(const OAICompany &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIApplicationEntityList::is_company_Set() const{
    return m_company_isSet;
}

bool OAIApplicationEntityList::is_company_Valid() const{
    return m_company_isValid;
}

QDateTime OAIApplicationEntityList::getCreatedAt() const {
    return m_created_at;
}
void OAIApplicationEntityList::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIApplicationEntityList::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIApplicationEntityList::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIApplicationEntityList::getDescription() const {
    return m_description;
}
void OAIApplicationEntityList::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationEntityList::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationEntityList::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplicationEntityList::getKey() const {
    return m_key;
}
void OAIApplicationEntityList::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIApplicationEntityList::is_key_Set() const{
    return m_key_isSet;
}

bool OAIApplicationEntityList::is_key_Valid() const{
    return m_key_isValid;
}

QDateTime OAIApplicationEntityList::getLastUsedAt() const {
    return m_last_used_at;
}
void OAIApplicationEntityList::setLastUsedAt(const QDateTime &last_used_at) {
    m_last_used_at = last_used_at;
    m_last_used_at_isSet = true;
}

bool OAIApplicationEntityList::is_last_used_at_Set() const{
    return m_last_used_at_isSet;
}

bool OAIApplicationEntityList::is_last_used_at_Valid() const{
    return m_last_used_at_isValid;
}

QString OAIApplicationEntityList::getType() const {
    return m_type;
}
void OAIApplicationEntityList::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApplicationEntityList::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApplicationEntityList::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIApplicationEntityList::getUpdatedAt() const {
    return m_updated_at;
}
void OAIApplicationEntityList::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIApplicationEntityList::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIApplicationEntityList::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIApplicationEntityList::getUrl() const {
    return m_url;
}
void OAIApplicationEntityList::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIApplicationEntityList::is_url_Set() const{
    return m_url_isSet;
}

bool OAIApplicationEntityList::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIApplicationEntityList::getUserId() const {
    return m_user_id;
}
void OAIApplicationEntityList::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIApplicationEntityList::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIApplicationEntityList::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIApplicationEntityList::getUserKey() const {
    return m_user_key;
}
void OAIApplicationEntityList::setUserKey(const QString &user_key) {
    m_user_key = user_key;
    m_user_key_isSet = true;
}

bool OAIApplicationEntityList::is_user_key_Set() const{
    return m_user_key_isSet;
}

bool OAIApplicationEntityList::is_user_key_Valid() const{
    return m_user_key_isValid;
}

bool OAIApplicationEntityList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationEntityList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
