/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityItemApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEntityItemApi::OAIEntityItemApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEntityItemApi::~OAIEntityItemApi() {
}

void OAIEntityItemApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api-2445581398133.apicast.io:443/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createEntityItemEntity", defaultConf);
    _serverIndices.insert("createEntityItemEntity", 0);
    _serverConfigs.insert("createEntityItemEntityBulk", defaultConf);
    _serverIndices.insert("createEntityItemEntityBulk", 0);
    _serverConfigs.insert("deleteEntityItemCollectionBulk", defaultConf);
    _serverIndices.insert("deleteEntityItemCollectionBulk", 0);
    _serverConfigs.insert("deleteEntityItemEntity", defaultConf);
    _serverIndices.insert("deleteEntityItemEntity", 0);
    _serverConfigs.insert("getEntityItemAggregate", defaultConf);
    _serverIndices.insert("getEntityItemAggregate", 0);
    _serverConfigs.insert("getEntityItemCollection", defaultConf);
    _serverIndices.insert("getEntityItemCollection", 0);
    _serverConfigs.insert("getEntityItemCountCollection", defaultConf);
    _serverIndices.insert("getEntityItemCountCollection", 0);
    _serverConfigs.insert("getEntityItemDescribe", defaultConf);
    _serverIndices.insert("getEntityItemDescribe", 0);
    _serverConfigs.insert("getEntityItemEntity", defaultConf);
    _serverIndices.insert("getEntityItemEntity", 0);
    _serverConfigs.insert("updateEntityItemEntity", defaultConf);
    _serverIndices.insert("updateEntityItemEntity", 0);
    _serverConfigs.insert("updateEntityItemEntityBulk", defaultConf);
    _serverIndices.insert("updateEntityItemEntityBulk", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEntityItemApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEntityItemApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEntityItemApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEntityItemApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEntityItemApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEntityItemApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEntityItemApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEntityItemApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEntityItemApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEntityItemApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEntityItemApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEntityItemApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEntityItemApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEntityItemApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEntityItemApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEntityItemApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEntityItemApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEntityItemApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEntityItemApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEntityItemApi::createEntityItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const OAIEntityItemEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createEntityItemEntity"][_serverIndices.value("createEntityItemEntity")].URL()+"/application/entity/{entity_id}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::createEntityItemEntityCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::createEntityItemEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityItemEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createEntityItemEntitySignal(output);
        Q_EMIT createEntityItemEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createEntityItemEntitySignalE(output, error_type, error_str);
        Q_EMIT createEntityItemEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createEntityItemEntitySignalError(output, error_type, error_str);
        Q_EMIT createEntityItemEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::createEntityItemEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createEntityItemEntityBulk"][_serverIndices.value("createEntityItemEntityBulk")].URL()+"/application/entity/{entity_id}/bulk");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::createEntityItemEntityBulkCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::createEntityItemEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createEntityItemEntityBulkSignal(output);
        Q_EMIT createEntityItemEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createEntityItemEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT createEntityItemEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createEntityItemEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT createEntityItemEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::deleteEntityItemCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const OAIBulkEntity &body) {
    QString fullPath = QString(_serverConfigs["deleteEntityItemCollectionBulk"][_serverIndices.value("deleteEntityItemCollectionBulk")].URL()+"/application/entity/{entity_id}/bulk");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::deleteEntityItemCollectionBulkCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::deleteEntityItemCollectionBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteEntityItemCollectionBulkSignal(output);
        Q_EMIT deleteEntityItemCollectionBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteEntityItemCollectionBulkSignalE(output, error_type, error_str);
        Q_EMIT deleteEntityItemCollectionBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteEntityItemCollectionBulkSignalError(output, error_type, error_str);
        Q_EMIT deleteEntityItemCollectionBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::deleteEntityItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const QString &entity_item_id) {
    QString fullPath = QString(_serverConfigs["deleteEntityItemEntity"][_serverIndices.value("deleteEntityItemEntity")].URL()+"/application/entity/{entity_id}/{entity_item_id}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    
    {
        QString entity_item_idPathParam("{");
        entity_item_idPathParam.append("entity_item_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_item_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_item_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_item_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::deleteEntityItemEntityCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::deleteEntityItemEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteEntityItemEntitySignal();
        Q_EMIT deleteEntityItemEntitySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteEntityItemEntitySignalE(error_type, error_str);
        Q_EMIT deleteEntityItemEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteEntityItemEntitySignalError(error_type, error_str);
        Q_EMIT deleteEntityItemEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::getEntityItemAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &pipeline) {
    QString fullPath = QString(_serverConfigs["getEntityItemAggregate"][_serverIndices.value("getEntityItemAggregate")].URL()+"/application/entity/{entity_id}/aggregate");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (pipeline.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pipeline", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pipeline")).append(querySuffix).append(QUrl::toPercentEncoding(pipeline.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::getEntityItemAggregateCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::getEntityItemAggregateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAggregate output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEntityItemAggregateSignal(output);
        Q_EMIT getEntityItemAggregateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEntityItemAggregateSignalE(output, error_type, error_str);
        Q_EMIT getEntityItemAggregateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEntityItemAggregateSignalError(output, error_type, error_str);
        Q_EMIT getEntityItemAggregateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::getEntityItemCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &unique) {
    QString fullPath = QString(_serverConfigs["getEntityItemCollection"][_serverIndices.value("getEntityItemCollection")].URL()+"/application/entity/{entity_id}/list");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page_size", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page_size")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    if (unique.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "unique", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("unique")).append(querySuffix).append(QUrl::toPercentEncoding(unique.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::getEntityItemCollectionCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::getEntityItemCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEntityItemEntity> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEntityItemEntity val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEntityItemCollectionSignal(output);
        Q_EMIT getEntityItemCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEntityItemCollectionSignalE(output, error_type, error_str);
        Q_EMIT getEntityItemCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEntityItemCollectionSignalError(output, error_type, error_str);
        Q_EMIT getEntityItemCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::getEntityItemCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &filter) {
    QString fullPath = QString(_serverConfigs["getEntityItemCountCollection"][_serverIndices.value("getEntityItemCountCollection")].URL()+"/application/entity/{entity_id}/count");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::getEntityItemCountCollectionCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::getEntityItemCountCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEntityItemCountCollectionSignal(output);
        Q_EMIT getEntityItemCountCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEntityItemCountCollectionSignalE(output, error_type, error_str);
        Q_EMIT getEntityItemCountCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEntityItemCountCollectionSignalError(output, error_type, error_str);
        Q_EMIT getEntityItemCountCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::getEntityItemDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["getEntityItemDescribe"][_serverIndices.value("getEntityItemDescribe")].URL()+"/application/entity/{entity_id}/describe");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::getEntityItemDescribeCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::getEntityItemDescribeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityItemDescribe output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEntityItemDescribeSignal(output);
        Q_EMIT getEntityItemDescribeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEntityItemDescribeSignalE(output, error_type, error_str);
        Q_EMIT getEntityItemDescribeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEntityItemDescribeSignalError(output, error_type, error_str);
        Q_EMIT getEntityItemDescribeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::getEntityItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const QString &entity_item_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields) {
    QString fullPath = QString(_serverConfigs["getEntityItemEntity"][_serverIndices.value("getEntityItemEntity")].URL()+"/application/entity/{entity_id}/{entity_item_id}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    
    {
        QString entity_item_idPathParam("{");
        entity_item_idPathParam.append("entity_item_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_item_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_item_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_item_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::getEntityItemEntityCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::getEntityItemEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityItemEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEntityItemEntitySignal(output);
        Q_EMIT getEntityItemEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEntityItemEntitySignalE(output, error_type, error_str);
        Q_EMIT getEntityItemEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEntityItemEntitySignalError(output, error_type, error_str);
        Q_EMIT getEntityItemEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::updateEntityItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const QString &entity_item_id, const OAIEntityItemEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateEntityItemEntity"][_serverIndices.value("updateEntityItemEntity")].URL()+"/application/entity/{entity_id}/{entity_item_id}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    
    {
        QString entity_item_idPathParam("{");
        entity_item_idPathParam.append("entity_item_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_item_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_item_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_item_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::updateEntityItemEntityCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::updateEntityItemEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityItemEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEntityItemEntitySignal(output);
        Q_EMIT updateEntityItemEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEntityItemEntitySignalE(output, error_type, error_str);
        Q_EMIT updateEntityItemEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEntityItemEntitySignalError(output, error_type, error_str);
        Q_EMIT updateEntityItemEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::updateEntityItemEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &entity_id, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateEntityItemEntityBulk"][_serverIndices.value("updateEntityItemEntityBulk")].URL()+"/application/entity/{entity_id}/bulk");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entity_id"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityItemApi::updateEntityItemEntityBulkCallback);
    connect(this, &OAIEntityItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityItemApi::updateEntityItemEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEntityItemEntityBulkSignal(output);
        Q_EMIT updateEntityItemEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEntityItemEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT updateEntityItemEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEntityItemEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT updateEntityItemEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityItemApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
