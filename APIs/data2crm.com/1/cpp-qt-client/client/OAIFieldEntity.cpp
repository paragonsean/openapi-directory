/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldEntity::OAIFieldEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldEntity::OAIFieldEntity() {
    this->initializeModel();
}

OAIFieldEntity::~OAIFieldEntity() {}

void OAIFieldEntity::initializeModel() {

    m_array_item_isSet = false;
    m_array_item_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_enum_isSet = false;
    m_is_enum_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_methods_isSet = false;
    m_methods_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFieldEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldEntity::fromJsonObject(QJsonObject json) {

    m_array_item_isValid = ::OpenAPI::fromJsonValue(m_array_item, json[QString("arrayItem")]);
    m_array_item_isSet = !json[QString("arrayItem")].isNull() && m_array_item_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_enum_isValid = ::OpenAPI::fromJsonValue(m_is_enum, json[QString("isEnum")]);
    m_is_enum_isSet = !json[QString("isEnum")].isNull() && m_is_enum_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_methods_isValid = ::OpenAPI::fromJsonValue(m_methods, json[QString("methods")]);
    m_methods_isSet = !json[QString("methods")].isNull() && m_methods_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFieldEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_array_item_isSet) {
        obj.insert(QString("arrayItem"), ::OpenAPI::toJsonValue(m_array_item));
    }
    if (m_entity.size() > 0) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_enum_isSet) {
        obj.insert(QString("isEnum"), ::OpenAPI::toJsonValue(m_is_enum));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_methods_isSet) {
        obj.insert(QString("methods"), ::OpenAPI::toJsonValue(m_methods));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_relation.size() > 0) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFieldEntity::getArrayItem() const {
    return m_array_item;
}
void OAIFieldEntity::setArrayItem(const QString &array_item) {
    m_array_item = array_item;
    m_array_item_isSet = true;
}

bool OAIFieldEntity::is_array_item_Set() const{
    return m_array_item_isSet;
}

bool OAIFieldEntity::is_array_item_Valid() const{
    return m_array_item_isValid;
}

QList<QString> OAIFieldEntity::getEntity() const {
    return m_entity;
}
void OAIFieldEntity::setEntity(const QList<QString> &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIFieldEntity::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIFieldEntity::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIFieldEntity::getFormat() const {
    return m_format;
}
void OAIFieldEntity::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIFieldEntity::is_format_Set() const{
    return m_format_isSet;
}

bool OAIFieldEntity::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIFieldEntity::getId() const {
    return m_id;
}
void OAIFieldEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFieldEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFieldEntity::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFieldEntity::isIsEnum() const {
    return m_is_enum;
}
void OAIFieldEntity::setIsEnum(const bool &is_enum) {
    m_is_enum = is_enum;
    m_is_enum_isSet = true;
}

bool OAIFieldEntity::is_is_enum_Set() const{
    return m_is_enum_isSet;
}

bool OAIFieldEntity::is_is_enum_Valid() const{
    return m_is_enum_isValid;
}

QString OAIFieldEntity::getLabel() const {
    return m_label;
}
void OAIFieldEntity::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIFieldEntity::is_label_Set() const{
    return m_label_isSet;
}

bool OAIFieldEntity::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIFieldEntity::getLimit() const {
    return m_limit;
}
void OAIFieldEntity::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIFieldEntity::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIFieldEntity::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIObject OAIFieldEntity::getMethods() const {
    return m_methods;
}
void OAIFieldEntity::setMethods(const OAIObject &methods) {
    m_methods = methods;
    m_methods_isSet = true;
}

bool OAIFieldEntity::is_methods_Set() const{
    return m_methods_isSet;
}

bool OAIFieldEntity::is_methods_Valid() const{
    return m_methods_isValid;
}

QString OAIFieldEntity::getName() const {
    return m_name;
}
void OAIFieldEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFieldEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFieldEntity::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIFieldEntity::getRelation() const {
    return m_relation;
}
void OAIFieldEntity::setRelation(const QList<QString> &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIFieldEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIFieldEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAIFieldEntity::getType() const {
    return m_type;
}
void OAIFieldEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFieldEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFieldEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFieldEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_methods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
