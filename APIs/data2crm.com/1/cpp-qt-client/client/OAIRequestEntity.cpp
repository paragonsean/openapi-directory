/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestEntity::OAIRequestEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestEntity::OAIRequestEntity() {
    this->initializeModel();
}

OAIRequestEntity::~OAIRequestEntity() {}

void OAIRequestEntity::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIRequestEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestEntity::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIRequestEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_header.size() > 0) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIRequestEntity::getContent() const {
    return m_content;
}
void OAIRequestEntity::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIRequestEntity::is_content_Set() const{
    return m_content_isSet;
}

bool OAIRequestEntity::is_content_Valid() const{
    return m_content_isValid;
}

QList<OAIHeader> OAIRequestEntity::getHeader() const {
    return m_header;
}
void OAIRequestEntity::setHeader(const QList<OAIHeader> &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIRequestEntity::is_header_Set() const{
    return m_header_isSet;
}

bool OAIRequestEntity::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIRequestEntity::getMethod() const {
    return m_method;
}
void OAIRequestEntity::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIRequestEntity::is_method_Set() const{
    return m_method_isSet;
}

bool OAIRequestEntity::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIRequestEntity::getPath() const {
    return m_path;
}
void OAIRequestEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRequestEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRequestEntity::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIRequestEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
