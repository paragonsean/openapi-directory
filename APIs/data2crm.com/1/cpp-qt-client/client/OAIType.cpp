/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIType::OAIType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIType::OAIType() {
    this->initializeModel();
}

OAIType::~OAIType() {}

void OAIType::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIType::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIType::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIType::getAvailable() const {
    return m_available;
}
void OAIType::setAvailable(const qint32 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIType::is_available_Set() const{
    return m_available_isSet;
}

bool OAIType::is_available_Valid() const{
    return m_available_isValid;
}

float OAIType::getCount() const {
    return m_count;
}
void OAIType::setCount(const float &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIType::is_count_Set() const{
    return m_count_isSet;
}

bool OAIType::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIType::getPeriod() const {
    return m_period;
}
void OAIType::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIType::is_period_Set() const{
    return m_period_isSet;
}

bool OAIType::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIType::getType() const {
    return m_type;
}
void OAIType::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIType::is_type_Set() const{
    return m_type_isSet;
}

bool OAIType::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
