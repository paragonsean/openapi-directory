/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICampaignApi_H
#define OAI_OAICampaignApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregate.h"
#include "OAIBulkEntity.h"
#include "OAIBulkEntityRelation.h"
#include "OAICampaignDescribe.h"
#include "OAICampaignEntity.h"
#include "OAICampaignEntityRelation.h"
#include "OAICount.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICampaignApi : public QObject {
    Q_OBJECT

public:
    OAICampaignApi(const int timeOut = 0);
    ~OAICampaignApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAICampaignEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createCampaignEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAICampaignEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createCampaignEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    */
    virtual void deleteCampaignCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  campaign_id QString [required]
    */
    virtual void deleteCampaignEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &campaign_id);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  pipeline QString [optional]
    */
    virtual void getCampaignAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pipeline = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  unique QString [optional]
    */
    virtual void getCampaignCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void getCampaignCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void getCampaignDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getCampaignEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  body OAICampaignEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateCampaignEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &campaign_id, const OAICampaignEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateCampaignEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCampaignEntityCallback(OAIHttpRequestWorker *worker);
    void createCampaignEntityBulkCallback(OAIHttpRequestWorker *worker);
    void deleteCampaignCollectionBulkCallback(OAIHttpRequestWorker *worker);
    void deleteCampaignEntityCallback(OAIHttpRequestWorker *worker);
    void getCampaignAggregateCallback(OAIHttpRequestWorker *worker);
    void getCampaignCollectionCallback(OAIHttpRequestWorker *worker);
    void getCampaignCountCollectionCallback(OAIHttpRequestWorker *worker);
    void getCampaignDescribeCallback(OAIHttpRequestWorker *worker);
    void getCampaignEntityCallback(OAIHttpRequestWorker *worker);
    void updateCampaignEntityCallback(OAIHttpRequestWorker *worker);
    void updateCampaignEntityBulkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCampaignEntitySignal(OAICampaignEntityRelation summary);
    void createCampaignEntityBulkSignal(OAIBulkEntityRelation summary);
    void deleteCampaignCollectionBulkSignal(OAIBulkEntity summary);
    void deleteCampaignEntitySignal();
    void getCampaignAggregateSignal(OAIAggregate summary);
    void getCampaignCollectionSignal(QList<OAICampaignEntity> summary);
    void getCampaignCountCollectionSignal(OAICount summary);
    void getCampaignDescribeSignal(OAICampaignDescribe summary);
    void getCampaignEntitySignal(OAICampaignEntity summary);
    void updateCampaignEntitySignal(OAICampaignEntityRelation summary);
    void updateCampaignEntityBulkSignal(OAIBulkEntityRelation summary);


    void createCampaignEntitySignalFull(OAIHttpRequestWorker *worker, OAICampaignEntityRelation summary);
    void createCampaignEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);
    void deleteCampaignCollectionBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntity summary);
    void deleteCampaignEntitySignalFull(OAIHttpRequestWorker *worker);
    void getCampaignAggregateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void getCampaignCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAICampaignEntity> summary);
    void getCampaignCountCollectionSignalFull(OAIHttpRequestWorker *worker, OAICount summary);
    void getCampaignDescribeSignalFull(OAIHttpRequestWorker *worker, OAICampaignDescribe summary);
    void getCampaignEntitySignalFull(OAIHttpRequestWorker *worker, OAICampaignEntity summary);
    void updateCampaignEntitySignalFull(OAIHttpRequestWorker *worker, OAICampaignEntityRelation summary);
    void updateCampaignEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);

    Q_DECL_DEPRECATED_X("Use createCampaignEntitySignalError() instead")
    void createCampaignEntitySignalE(OAICampaignEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignEntitySignalError(OAICampaignEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCampaignEntityBulkSignalError() instead")
    void createCampaignEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignCollectionBulkSignalError() instead")
    void deleteCampaignCollectionBulkSignalE(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignCollectionBulkSignalError(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignEntitySignalError() instead")
    void deleteCampaignEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignAggregateSignalError() instead")
    void getCampaignAggregateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignAggregateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignCollectionSignalError() instead")
    void getCampaignCollectionSignalE(QList<OAICampaignEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignCollectionSignalError(QList<OAICampaignEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignCountCollectionSignalError() instead")
    void getCampaignCountCollectionSignalE(OAICount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignCountCollectionSignalError(OAICount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignDescribeSignalError() instead")
    void getCampaignDescribeSignalE(OAICampaignDescribe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignDescribeSignalError(OAICampaignDescribe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignEntitySignalError() instead")
    void getCampaignEntitySignalE(OAICampaignEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignEntitySignalError(OAICampaignEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignEntitySignalError() instead")
    void updateCampaignEntitySignalE(OAICampaignEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignEntitySignalError(OAICampaignEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignEntityBulkSignalError() instead")
    void updateCampaignEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCampaignEntitySignalErrorFull() instead")
    void createCampaignEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCampaignEntityBulkSignalErrorFull() instead")
    void createCampaignEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignCollectionBulkSignalErrorFull() instead")
    void deleteCampaignCollectionBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignCollectionBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignEntitySignalErrorFull() instead")
    void deleteCampaignEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignAggregateSignalErrorFull() instead")
    void getCampaignAggregateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignAggregateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignCollectionSignalErrorFull() instead")
    void getCampaignCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignCountCollectionSignalErrorFull() instead")
    void getCampaignCountCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignCountCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignDescribeSignalErrorFull() instead")
    void getCampaignDescribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignDescribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignEntitySignalErrorFull() instead")
    void getCampaignEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignEntitySignalErrorFull() instead")
    void updateCampaignEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignEntityBulkSignalErrorFull() instead")
    void updateCampaignEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
