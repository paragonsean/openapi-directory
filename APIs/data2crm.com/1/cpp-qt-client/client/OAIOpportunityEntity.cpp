/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpportunityEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpportunityEntity::OAIOpportunityEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpportunityEntity::OAIOpportunityEntity() {
    this->initializeModel();
}

OAIOpportunityEntity::~OAIOpportunityEntity() {}

void OAIOpportunityEntity::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_expected_amount_isSet = false;
    m_expected_amount_isValid = false;

    m_expected_end_at_isSet = false;
    m_expected_end_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lead_source_isSet = false;
    m_lead_source_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_step_isSet = false;
    m_next_step_isValid = false;

    m_pipeline_with_stage_isSet = false;
    m_pipeline_with_stage_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIOpportunityEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpportunityEntity::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_expected_amount_isValid = ::OpenAPI::fromJsonValue(m_expected_amount, json[QString("expected_amount")]);
    m_expected_amount_isSet = !json[QString("expected_amount")].isNull() && m_expected_amount_isValid;

    m_expected_end_at_isValid = ::OpenAPI::fromJsonValue(m_expected_end_at, json[QString("expected_end_at")]);
    m_expected_end_at_isSet = !json[QString("expected_end_at")].isNull() && m_expected_end_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lead_source_isValid = ::OpenAPI::fromJsonValue(m_lead_source, json[QString("lead_source")]);
    m_lead_source_isSet = !json[QString("lead_source")].isNull() && m_lead_source_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_step_isValid = ::OpenAPI::fromJsonValue(m_next_step, json[QString("next_step")]);
    m_next_step_isSet = !json[QString("next_step")].isNull() && m_next_step_isValid;

    m_pipeline_with_stage_isValid = ::OpenAPI::fromJsonValue(m_pipeline_with_stage, json[QString("pipeline_with_stage")]);
    m_pipeline_with_stage_isSet = !json[QString("pipeline_with_stage")].isNull() && m_pipeline_with_stage_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIOpportunityEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpportunityEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_expected_amount_isSet) {
        obj.insert(QString("expected_amount"), ::OpenAPI::toJsonValue(m_expected_amount));
    }
    if (m_expected_end_at_isSet) {
        obj.insert(QString("expected_end_at"), ::OpenAPI::toJsonValue(m_expected_end_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lead_source_isSet) {
        obj.insert(QString("lead_source"), ::OpenAPI::toJsonValue(m_lead_source));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_step_isSet) {
        obj.insert(QString("next_step"), ::OpenAPI::toJsonValue(m_next_step));
    }
    if (m_pipeline_with_stage_isSet) {
        obj.insert(QString("pipeline_with_stage"), ::OpenAPI::toJsonValue(m_pipeline_with_stage));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

float OAIOpportunityEntity::getAmount() const {
    return m_amount;
}
void OAIOpportunityEntity::setAmount(const float &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIOpportunityEntity::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIOpportunityEntity::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIOpportunityEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIOpportunityEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOpportunityEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOpportunityEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICurrency OAIOpportunityEntity::getCurrency() const {
    return m_currency;
}
void OAIOpportunityEntity::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOpportunityEntity::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOpportunityEntity::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIOpportunityEntity::getDescription() const {
    return m_description;
}
void OAIOpportunityEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOpportunityEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOpportunityEntity::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIOpportunityEntity::getEndedAt() const {
    return m_ended_at;
}
void OAIOpportunityEntity::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIOpportunityEntity::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIOpportunityEntity::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

float OAIOpportunityEntity::getExpectedAmount() const {
    return m_expected_amount;
}
void OAIOpportunityEntity::setExpectedAmount(const float &expected_amount) {
    m_expected_amount = expected_amount;
    m_expected_amount_isSet = true;
}

bool OAIOpportunityEntity::is_expected_amount_Set() const{
    return m_expected_amount_isSet;
}

bool OAIOpportunityEntity::is_expected_amount_Valid() const{
    return m_expected_amount_isValid;
}

QDateTime OAIOpportunityEntity::getExpectedEndAt() const {
    return m_expected_end_at;
}
void OAIOpportunityEntity::setExpectedEndAt(const QDateTime &expected_end_at) {
    m_expected_end_at = expected_end_at;
    m_expected_end_at_isSet = true;
}

bool OAIOpportunityEntity::is_expected_end_at_Set() const{
    return m_expected_end_at_isSet;
}

bool OAIOpportunityEntity::is_expected_end_at_Valid() const{
    return m_expected_end_at_isValid;
}

QString OAIOpportunityEntity::getId() const {
    return m_id;
}
void OAIOpportunityEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOpportunityEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOpportunityEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOpportunityEntity::getLeadSource() const {
    return m_lead_source;
}
void OAIOpportunityEntity::setLeadSource(const QString &lead_source) {
    m_lead_source = lead_source;
    m_lead_source_isSet = true;
}

bool OAIOpportunityEntity::is_lead_source_Set() const{
    return m_lead_source_isSet;
}

bool OAIOpportunityEntity::is_lead_source_Valid() const{
    return m_lead_source_isValid;
}

QString OAIOpportunityEntity::getName() const {
    return m_name;
}
void OAIOpportunityEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOpportunityEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOpportunityEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOpportunityEntity::getNextStep() const {
    return m_next_step;
}
void OAIOpportunityEntity::setNextStep(const QString &next_step) {
    m_next_step = next_step;
    m_next_step_isSet = true;
}

bool OAIOpportunityEntity::is_next_step_Set() const{
    return m_next_step_isSet;
}

bool OAIOpportunityEntity::is_next_step_Valid() const{
    return m_next_step_isValid;
}

QString OAIOpportunityEntity::getPipelineWithStage() const {
    return m_pipeline_with_stage;
}
void OAIOpportunityEntity::setPipelineWithStage(const QString &pipeline_with_stage) {
    m_pipeline_with_stage = pipeline_with_stage;
    m_pipeline_with_stage_isSet = true;
}

bool OAIOpportunityEntity::is_pipeline_with_stage_Set() const{
    return m_pipeline_with_stage_isSet;
}

bool OAIOpportunityEntity::is_pipeline_with_stage_Valid() const{
    return m_pipeline_with_stage_isValid;
}

qint32 OAIOpportunityEntity::getProbability() const {
    return m_probability;
}
void OAIOpportunityEntity::setProbability(const qint32 &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAIOpportunityEntity::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAIOpportunityEntity::is_probability_Valid() const{
    return m_probability_isValid;
}

OAIRelation OAIOpportunityEntity::getRelation() const {
    return m_relation;
}
void OAIOpportunityEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIOpportunityEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIOpportunityEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAIOpportunityEntity::getState() const {
    return m_state;
}
void OAIOpportunityEntity::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOpportunityEntity::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOpportunityEntity::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIOpportunityEntity::getType() const {
    return m_type;
}
void OAIOpportunityEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOpportunityEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOpportunityEntity::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIOpportunityEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOpportunityEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOpportunityEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOpportunityEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIOpportunityEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_with_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpportunityEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
