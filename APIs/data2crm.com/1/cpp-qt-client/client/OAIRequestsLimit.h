/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRequestsLimit.h
 *
 * 
 */

#ifndef OAIRequestsLimit_H
#define OAIRequestsLimit_H

#include <QJsonObject>

#include "OAIType.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIType;

class OAIRequestsLimit : public OAIObject {
public:
    OAIRequestsLimit();
    OAIRequestsLimit(QString json);
    ~OAIRequestsLimit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIsExceeded() const;
    void setIsExceeded(const bool &is_exceeded);
    bool is_is_exceeded_Set() const;
    bool is_is_exceeded_Valid() const;

    QDateTime getRetryAfter() const;
    void setRetryAfter(const QDateTime &retry_after);
    bool is_retry_after_Set() const;
    bool is_retry_after_Valid() const;

    QList<OAIType> getType() const;
    void setType(const QList<OAIType> &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_exceeded;
    bool m_is_exceeded_isSet;
    bool m_is_exceeded_isValid;

    QDateTime m_retry_after;
    bool m_retry_after_isSet;
    bool m_retry_after_isValid;

    QList<OAIType> m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRequestsLimit)

#endif // OAIRequestsLimit_H
