/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpportunityApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIOpportunityApi::OAIOpportunityApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIOpportunityApi::~OAIOpportunityApi() {
}

void OAIOpportunityApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api-2445581398133.apicast.io:443/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createOpportunityEntity", defaultConf);
    _serverIndices.insert("createOpportunityEntity", 0);
    _serverConfigs.insert("createOpportunityEntityBulk", defaultConf);
    _serverIndices.insert("createOpportunityEntityBulk", 0);
    _serverConfigs.insert("deleteOpportunityCollectionBulk", defaultConf);
    _serverIndices.insert("deleteOpportunityCollectionBulk", 0);
    _serverConfigs.insert("deleteOpportunityEntity", defaultConf);
    _serverIndices.insert("deleteOpportunityEntity", 0);
    _serverConfigs.insert("getOpportunityAggregate", defaultConf);
    _serverIndices.insert("getOpportunityAggregate", 0);
    _serverConfigs.insert("getOpportunityCollection", defaultConf);
    _serverIndices.insert("getOpportunityCollection", 0);
    _serverConfigs.insert("getOpportunityCountCollection", defaultConf);
    _serverIndices.insert("getOpportunityCountCollection", 0);
    _serverConfigs.insert("getOpportunityDescribe", defaultConf);
    _serverIndices.insert("getOpportunityDescribe", 0);
    _serverConfigs.insert("getOpportunityEntity", defaultConf);
    _serverIndices.insert("getOpportunityEntity", 0);
    _serverConfigs.insert("updateOpportunityEntity", defaultConf);
    _serverIndices.insert("updateOpportunityEntity", 0);
    _serverConfigs.insert("updateOpportunityEntityBulk", defaultConf);
    _serverIndices.insert("updateOpportunityEntityBulk", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIOpportunityApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIOpportunityApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIOpportunityApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIOpportunityApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIOpportunityApi::setUsername(const QString &username) {
    _username = username;
}

void OAIOpportunityApi::setPassword(const QString &password) {
    _password = password;
}


void OAIOpportunityApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIOpportunityApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIOpportunityApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIOpportunityApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOpportunityApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOpportunityApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIOpportunityApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIOpportunityApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIOpportunityApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIOpportunityApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIOpportunityApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIOpportunityApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIOpportunityApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIOpportunityApi::createOpportunityEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIOpportunityEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createOpportunityEntity"][_serverIndices.value("createOpportunityEntity")].URL()+"/application/entity/opportunity");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::createOpportunityEntityCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::createOpportunityEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOpportunityEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createOpportunityEntitySignal(output);
        Q_EMIT createOpportunityEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createOpportunityEntitySignalE(output, error_type, error_str);
        Q_EMIT createOpportunityEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createOpportunityEntitySignalError(output, error_type, error_str);
        Q_EMIT createOpportunityEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::createOpportunityEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createOpportunityEntityBulk"][_serverIndices.value("createOpportunityEntityBulk")].URL()+"/application/entity/opportunity/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::createOpportunityEntityBulkCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::createOpportunityEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createOpportunityEntityBulkSignal(output);
        Q_EMIT createOpportunityEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createOpportunityEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT createOpportunityEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createOpportunityEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT createOpportunityEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::deleteOpportunityCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body) {
    QString fullPath = QString(_serverConfigs["deleteOpportunityCollectionBulk"][_serverIndices.value("deleteOpportunityCollectionBulk")].URL()+"/application/entity/opportunity/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::deleteOpportunityCollectionBulkCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::deleteOpportunityCollectionBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteOpportunityCollectionBulkSignal(output);
        Q_EMIT deleteOpportunityCollectionBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteOpportunityCollectionBulkSignalE(output, error_type, error_str);
        Q_EMIT deleteOpportunityCollectionBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteOpportunityCollectionBulkSignalError(output, error_type, error_str);
        Q_EMIT deleteOpportunityCollectionBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::deleteOpportunityEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &opportunity_id) {
    QString fullPath = QString(_serverConfigs["deleteOpportunityEntity"][_serverIndices.value("deleteOpportunityEntity")].URL()+"/application/entity/opportunity/{opportunity_id}");
    
    
    {
        QString opportunity_idPathParam("{");
        opportunity_idPathParam.append("opportunity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "opportunity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"opportunity_id"+pathSuffix : pathPrefix;
        fullPath.replace(opportunity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(opportunity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::deleteOpportunityEntityCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::deleteOpportunityEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteOpportunityEntitySignal();
        Q_EMIT deleteOpportunityEntitySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteOpportunityEntitySignalE(error_type, error_str);
        Q_EMIT deleteOpportunityEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteOpportunityEntitySignalError(error_type, error_str);
        Q_EMIT deleteOpportunityEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::getOpportunityAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &pipeline) {
    QString fullPath = QString(_serverConfigs["getOpportunityAggregate"][_serverIndices.value("getOpportunityAggregate")].URL()+"/application/entity/opportunity/aggregate");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (pipeline.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pipeline", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pipeline")).append(querySuffix).append(QUrl::toPercentEncoding(pipeline.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::getOpportunityAggregateCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::getOpportunityAggregateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAggregate output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getOpportunityAggregateSignal(output);
        Q_EMIT getOpportunityAggregateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getOpportunityAggregateSignalE(output, error_type, error_str);
        Q_EMIT getOpportunityAggregateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getOpportunityAggregateSignalError(output, error_type, error_str);
        Q_EMIT getOpportunityAggregateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::getOpportunityCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &unique) {
    QString fullPath = QString(_serverConfigs["getOpportunityCollection"][_serverIndices.value("getOpportunityCollection")].URL()+"/application/entity/opportunity/list");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page_size", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page_size")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    if (unique.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "unique", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("unique")).append(querySuffix).append(QUrl::toPercentEncoding(unique.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::getOpportunityCollectionCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::getOpportunityCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIOpportunityEntity> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIOpportunityEntity val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getOpportunityCollectionSignal(output);
        Q_EMIT getOpportunityCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getOpportunityCollectionSignalE(output, error_type, error_str);
        Q_EMIT getOpportunityCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getOpportunityCollectionSignalError(output, error_type, error_str);
        Q_EMIT getOpportunityCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::getOpportunityCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &filter) {
    QString fullPath = QString(_serverConfigs["getOpportunityCountCollection"][_serverIndices.value("getOpportunityCountCollection")].URL()+"/application/entity/opportunity/count");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::getOpportunityCountCollectionCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::getOpportunityCountCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getOpportunityCountCollectionSignal(output);
        Q_EMIT getOpportunityCountCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getOpportunityCountCollectionSignalE(output, error_type, error_str);
        Q_EMIT getOpportunityCountCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getOpportunityCountCollectionSignalError(output, error_type, error_str);
        Q_EMIT getOpportunityCountCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::getOpportunityDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["getOpportunityDescribe"][_serverIndices.value("getOpportunityDescribe")].URL()+"/application/entity/opportunity/describe");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::getOpportunityDescribeCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::getOpportunityDescribeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOpportunityDescribe output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getOpportunityDescribeSignal(output);
        Q_EMIT getOpportunityDescribeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getOpportunityDescribeSignalE(output, error_type, error_str);
        Q_EMIT getOpportunityDescribeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getOpportunityDescribeSignalError(output, error_type, error_str);
        Q_EMIT getOpportunityDescribeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::getOpportunityEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &opportunity_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields) {
    QString fullPath = QString(_serverConfigs["getOpportunityEntity"][_serverIndices.value("getOpportunityEntity")].URL()+"/application/entity/opportunity/{opportunity_id}");
    
    
    {
        QString opportunity_idPathParam("{");
        opportunity_idPathParam.append("opportunity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "opportunity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"opportunity_id"+pathSuffix : pathPrefix;
        fullPath.replace(opportunity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(opportunity_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::getOpportunityEntityCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::getOpportunityEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOpportunityEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getOpportunityEntitySignal(output);
        Q_EMIT getOpportunityEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getOpportunityEntitySignalE(output, error_type, error_str);
        Q_EMIT getOpportunityEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getOpportunityEntitySignalError(output, error_type, error_str);
        Q_EMIT getOpportunityEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::updateOpportunityEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &opportunity_id, const OAIOpportunityEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateOpportunityEntity"][_serverIndices.value("updateOpportunityEntity")].URL()+"/application/entity/opportunity/{opportunity_id}");
    
    
    {
        QString opportunity_idPathParam("{");
        opportunity_idPathParam.append("opportunity_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "opportunity_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"opportunity_id"+pathSuffix : pathPrefix;
        fullPath.replace(opportunity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(opportunity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::updateOpportunityEntityCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::updateOpportunityEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOpportunityEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateOpportunityEntitySignal(output);
        Q_EMIT updateOpportunityEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateOpportunityEntitySignalE(output, error_type, error_str);
        Q_EMIT updateOpportunityEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateOpportunityEntitySignalError(output, error_type, error_str);
        Q_EMIT updateOpportunityEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::updateOpportunityEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateOpportunityEntityBulk"][_serverIndices.value("updateOpportunityEntityBulk")].URL()+"/application/entity/opportunity/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOpportunityApi::updateOpportunityEntityBulkCallback);
    connect(this, &OAIOpportunityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOpportunityApi::updateOpportunityEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateOpportunityEntityBulkSignal(output);
        Q_EMIT updateOpportunityEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateOpportunityEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT updateOpportunityEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateOpportunityEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT updateOpportunityEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOpportunityApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
