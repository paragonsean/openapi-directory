/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachmentEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachmentEntity::OAIAttachmentEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachmentEntity::OAIAttachmentEntity() {
    this->initializeModel();
}

OAIAttachmentEntity::~OAIAttachmentEntity() {}

void OAIAttachmentEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIAttachmentEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachmentEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIAttachmentEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachmentEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIAttachmentEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIAttachmentEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAttachmentEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAttachmentEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAttachmentEntity::getDescription() const {
    return m_description;
}
void OAIAttachmentEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttachmentEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttachmentEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAttachmentEntity::getId() const {
    return m_id;
}
void OAIAttachmentEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttachmentEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttachmentEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAttachmentEntity::getLink() const {
    return m_link;
}
void OAIAttachmentEntity::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIAttachmentEntity::is_link_Set() const{
    return m_link_isSet;
}

bool OAIAttachmentEntity::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIAttachmentEntity::getMimeType() const {
    return m_mime_type;
}
void OAIAttachmentEntity::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIAttachmentEntity::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIAttachmentEntity::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIAttachmentEntity::getName() const {
    return m_name;
}
void OAIAttachmentEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttachmentEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttachmentEntity::is_name_Valid() const{
    return m_name_isValid;
}

OAIRelation OAIAttachmentEntity::getRelation() const {
    return m_relation;
}
void OAIAttachmentEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIAttachmentEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIAttachmentEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

qint32 OAIAttachmentEntity::getSize() const {
    return m_size;
}
void OAIAttachmentEntity::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAttachmentEntity::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAttachmentEntity::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIAttachmentEntity::getTitle() const {
    return m_title;
}
void OAIAttachmentEntity::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAttachmentEntity::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAttachmentEntity::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIAttachmentEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAttachmentEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAttachmentEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAttachmentEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIAttachmentEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachmentEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
