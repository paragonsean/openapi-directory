/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelation::OAIRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelation::OAIRelation() {
    this->initializeModel();
}

OAIRelation::~OAIRelation() {}

void OAIRelation::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_call_isSet = false;
    m_call_isValid = false;

    m_campaign_isSet = false;
    m_campaign_isValid = false;

    m_r_case_isSet = false;
    m_r_case_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_invoice_item_isSet = false;
    m_invoice_item_isValid = false;

    m_lead_isSet = false;
    m_lead_isValid = false;

    m_meeting_isSet = false;
    m_meeting_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_opportunity_isSet = false;
    m_opportunity_isValid = false;

    m_opportunity_product_isSet = false;
    m_opportunity_product_isValid = false;

    m_post_isSet = false;
    m_post_isValid = false;

    m_price_book_isSet = false;
    m_price_book_isValid = false;

    m_price_book_item_isSet = false;
    m_price_book_item_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_quote_item_isSet = false;
    m_quote_item_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_ticket_isSet = false;
    m_ticket_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelation::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_call_isValid = ::OpenAPI::fromJsonValue(m_call, json[QString("call")]);
    m_call_isSet = !json[QString("call")].isNull() && m_call_isValid;

    m_campaign_isValid = ::OpenAPI::fromJsonValue(m_campaign, json[QString("campaign")]);
    m_campaign_isSet = !json[QString("campaign")].isNull() && m_campaign_isValid;

    m_r_case_isValid = ::OpenAPI::fromJsonValue(m_r_case, json[QString("case")]);
    m_r_case_isSet = !json[QString("case")].isNull() && m_r_case_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("invoice")]);
    m_invoice_isSet = !json[QString("invoice")].isNull() && m_invoice_isValid;

    m_invoice_item_isValid = ::OpenAPI::fromJsonValue(m_invoice_item, json[QString("invoiceItem")]);
    m_invoice_item_isSet = !json[QString("invoiceItem")].isNull() && m_invoice_item_isValid;

    m_lead_isValid = ::OpenAPI::fromJsonValue(m_lead, json[QString("lead")]);
    m_lead_isSet = !json[QString("lead")].isNull() && m_lead_isValid;

    m_meeting_isValid = ::OpenAPI::fromJsonValue(m_meeting, json[QString("meeting")]);
    m_meeting_isSet = !json[QString("meeting")].isNull() && m_meeting_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_opportunity_isValid = ::OpenAPI::fromJsonValue(m_opportunity, json[QString("opportunity")]);
    m_opportunity_isSet = !json[QString("opportunity")].isNull() && m_opportunity_isValid;

    m_opportunity_product_isValid = ::OpenAPI::fromJsonValue(m_opportunity_product, json[QString("opportunityProduct")]);
    m_opportunity_product_isSet = !json[QString("opportunityProduct")].isNull() && m_opportunity_product_isValid;

    m_post_isValid = ::OpenAPI::fromJsonValue(m_post, json[QString("post")]);
    m_post_isSet = !json[QString("post")].isNull() && m_post_isValid;

    m_price_book_isValid = ::OpenAPI::fromJsonValue(m_price_book, json[QString("priceBook")]);
    m_price_book_isSet = !json[QString("priceBook")].isNull() && m_price_book_isValid;

    m_price_book_item_isValid = ::OpenAPI::fromJsonValue(m_price_book_item, json[QString("priceBookItem")]);
    m_price_book_item_isSet = !json[QString("priceBookItem")].isNull() && m_price_book_item_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;

    m_quote_item_isValid = ::OpenAPI::fromJsonValue(m_quote_item, json[QString("quoteItem")]);
    m_quote_item_isSet = !json[QString("quoteItem")].isNull() && m_quote_item_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("task")]);
    m_task_isSet = !json[QString("task")].isNull() && m_task_isValid;

    m_ticket_isValid = ::OpenAPI::fromJsonValue(m_ticket, json[QString("ticket")]);
    m_ticket_isSet = !json[QString("ticket")].isNull() && m_ticket_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_account.size() > 0) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_attachment.size() > 0) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_call.size() > 0) {
        obj.insert(QString("call"), ::OpenAPI::toJsonValue(m_call));
    }
    if (m_campaign.size() > 0) {
        obj.insert(QString("campaign"), ::OpenAPI::toJsonValue(m_campaign));
    }
    if (m_r_case.size() > 0) {
        obj.insert(QString("case"), ::OpenAPI::toJsonValue(m_r_case));
    }
    if (m_comment.size() > 0) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_contact.size() > 0) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_email.size() > 0) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_event.size() > 0) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_invoice.size() > 0) {
        obj.insert(QString("invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_invoice_item.size() > 0) {
        obj.insert(QString("invoiceItem"), ::OpenAPI::toJsonValue(m_invoice_item));
    }
    if (m_lead.size() > 0) {
        obj.insert(QString("lead"), ::OpenAPI::toJsonValue(m_lead));
    }
    if (m_meeting.size() > 0) {
        obj.insert(QString("meeting"), ::OpenAPI::toJsonValue(m_meeting));
    }
    if (m_note.size() > 0) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_opportunity.size() > 0) {
        obj.insert(QString("opportunity"), ::OpenAPI::toJsonValue(m_opportunity));
    }
    if (m_opportunity_product.size() > 0) {
        obj.insert(QString("opportunityProduct"), ::OpenAPI::toJsonValue(m_opportunity_product));
    }
    if (m_post.size() > 0) {
        obj.insert(QString("post"), ::OpenAPI::toJsonValue(m_post));
    }
    if (m_price_book.size() > 0) {
        obj.insert(QString("priceBook"), ::OpenAPI::toJsonValue(m_price_book));
    }
    if (m_price_book_item.size() > 0) {
        obj.insert(QString("priceBookItem"), ::OpenAPI::toJsonValue(m_price_book_item));
    }
    if (m_product.size() > 0) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_project.size() > 0) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_quote.size() > 0) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    if (m_quote_item.size() > 0) {
        obj.insert(QString("quoteItem"), ::OpenAPI::toJsonValue(m_quote_item));
    }
    if (m_tag.size() > 0) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_task.size() > 0) {
        obj.insert(QString("task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_ticket.size() > 0) {
        obj.insert(QString("ticket"), ::OpenAPI::toJsonValue(m_ticket));
    }
    if (m_user.size() > 0) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIAccountRelation> OAIRelation::getAccount() const {
    return m_account;
}
void OAIRelation::setAccount(const QList<OAIAccountRelation> &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIRelation::is_account_Set() const{
    return m_account_isSet;
}

bool OAIRelation::is_account_Valid() const{
    return m_account_isValid;
}

QList<OAIAttachmentRelation> OAIRelation::getAttachment() const {
    return m_attachment;
}
void OAIRelation::setAttachment(const QList<OAIAttachmentRelation> &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAIRelation::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAIRelation::is_attachment_Valid() const{
    return m_attachment_isValid;
}

QList<OAICallRelation> OAIRelation::getCall() const {
    return m_call;
}
void OAIRelation::setCall(const QList<OAICallRelation> &call) {
    m_call = call;
    m_call_isSet = true;
}

bool OAIRelation::is_call_Set() const{
    return m_call_isSet;
}

bool OAIRelation::is_call_Valid() const{
    return m_call_isValid;
}

QList<OAICampaignRelation> OAIRelation::getCampaign() const {
    return m_campaign;
}
void OAIRelation::setCampaign(const QList<OAICampaignRelation> &campaign) {
    m_campaign = campaign;
    m_campaign_isSet = true;
}

bool OAIRelation::is_campaign_Set() const{
    return m_campaign_isSet;
}

bool OAIRelation::is_campaign_Valid() const{
    return m_campaign_isValid;
}

QList<OAICaseRelation> OAIRelation::getRCase() const {
    return m_r_case;
}
void OAIRelation::setRCase(const QList<OAICaseRelation> &r_case) {
    m_r_case = r_case;
    m_r_case_isSet = true;
}

bool OAIRelation::is_r_case_Set() const{
    return m_r_case_isSet;
}

bool OAIRelation::is_r_case_Valid() const{
    return m_r_case_isValid;
}

QList<OAICommentRelation> OAIRelation::getComment() const {
    return m_comment;
}
void OAIRelation::setComment(const QList<OAICommentRelation> &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIRelation::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIRelation::is_comment_Valid() const{
    return m_comment_isValid;
}

QList<OAIContactRelation> OAIRelation::getContact() const {
    return m_contact;
}
void OAIRelation::setContact(const QList<OAIContactRelation> &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIRelation::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIRelation::is_contact_Valid() const{
    return m_contact_isValid;
}

QList<OAIEmailRelation> OAIRelation::getEmail() const {
    return m_email;
}
void OAIRelation::setEmail(const QList<OAIEmailRelation> &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRelation::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRelation::is_email_Valid() const{
    return m_email_isValid;
}

QList<OAIEventRelation> OAIRelation::getEvent() const {
    return m_event;
}
void OAIRelation::setEvent(const QList<OAIEventRelation> &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIRelation::is_event_Set() const{
    return m_event_isSet;
}

bool OAIRelation::is_event_Valid() const{
    return m_event_isValid;
}

QList<OAIInvoiceRelation> OAIRelation::getInvoice() const {
    return m_invoice;
}
void OAIRelation::setInvoice(const QList<OAIInvoiceRelation> &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIRelation::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIRelation::is_invoice_Valid() const{
    return m_invoice_isValid;
}

QList<OAIInvoiceItemRelation> OAIRelation::getInvoiceItem() const {
    return m_invoice_item;
}
void OAIRelation::setInvoiceItem(const QList<OAIInvoiceItemRelation> &invoice_item) {
    m_invoice_item = invoice_item;
    m_invoice_item_isSet = true;
}

bool OAIRelation::is_invoice_item_Set() const{
    return m_invoice_item_isSet;
}

bool OAIRelation::is_invoice_item_Valid() const{
    return m_invoice_item_isValid;
}

QList<OAILeadRelation> OAIRelation::getLead() const {
    return m_lead;
}
void OAIRelation::setLead(const QList<OAILeadRelation> &lead) {
    m_lead = lead;
    m_lead_isSet = true;
}

bool OAIRelation::is_lead_Set() const{
    return m_lead_isSet;
}

bool OAIRelation::is_lead_Valid() const{
    return m_lead_isValid;
}

QList<OAIMeetingRelation> OAIRelation::getMeeting() const {
    return m_meeting;
}
void OAIRelation::setMeeting(const QList<OAIMeetingRelation> &meeting) {
    m_meeting = meeting;
    m_meeting_isSet = true;
}

bool OAIRelation::is_meeting_Set() const{
    return m_meeting_isSet;
}

bool OAIRelation::is_meeting_Valid() const{
    return m_meeting_isValid;
}

QList<OAINoteRelation> OAIRelation::getNote() const {
    return m_note;
}
void OAIRelation::setNote(const QList<OAINoteRelation> &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIRelation::is_note_Set() const{
    return m_note_isSet;
}

bool OAIRelation::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIOpportunityRelation> OAIRelation::getOpportunity() const {
    return m_opportunity;
}
void OAIRelation::setOpportunity(const QList<OAIOpportunityRelation> &opportunity) {
    m_opportunity = opportunity;
    m_opportunity_isSet = true;
}

bool OAIRelation::is_opportunity_Set() const{
    return m_opportunity_isSet;
}

bool OAIRelation::is_opportunity_Valid() const{
    return m_opportunity_isValid;
}

QList<OAIOpportunityProductRelation> OAIRelation::getOpportunityProduct() const {
    return m_opportunity_product;
}
void OAIRelation::setOpportunityProduct(const QList<OAIOpportunityProductRelation> &opportunity_product) {
    m_opportunity_product = opportunity_product;
    m_opportunity_product_isSet = true;
}

bool OAIRelation::is_opportunity_product_Set() const{
    return m_opportunity_product_isSet;
}

bool OAIRelation::is_opportunity_product_Valid() const{
    return m_opportunity_product_isValid;
}

QList<OAIPostRelation> OAIRelation::getPost() const {
    return m_post;
}
void OAIRelation::setPost(const QList<OAIPostRelation> &post) {
    m_post = post;
    m_post_isSet = true;
}

bool OAIRelation::is_post_Set() const{
    return m_post_isSet;
}

bool OAIRelation::is_post_Valid() const{
    return m_post_isValid;
}

QList<OAIPriceBookRelation> OAIRelation::getPriceBook() const {
    return m_price_book;
}
void OAIRelation::setPriceBook(const QList<OAIPriceBookRelation> &price_book) {
    m_price_book = price_book;
    m_price_book_isSet = true;
}

bool OAIRelation::is_price_book_Set() const{
    return m_price_book_isSet;
}

bool OAIRelation::is_price_book_Valid() const{
    return m_price_book_isValid;
}

QList<OAIPriceBookItemRelation> OAIRelation::getPriceBookItem() const {
    return m_price_book_item;
}
void OAIRelation::setPriceBookItem(const QList<OAIPriceBookItemRelation> &price_book_item) {
    m_price_book_item = price_book_item;
    m_price_book_item_isSet = true;
}

bool OAIRelation::is_price_book_item_Set() const{
    return m_price_book_item_isSet;
}

bool OAIRelation::is_price_book_item_Valid() const{
    return m_price_book_item_isValid;
}

QList<OAIProductRelation> OAIRelation::getProduct() const {
    return m_product;
}
void OAIRelation::setProduct(const QList<OAIProductRelation> &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIRelation::is_product_Set() const{
    return m_product_isSet;
}

bool OAIRelation::is_product_Valid() const{
    return m_product_isValid;
}

QList<OAIProjectRelation> OAIRelation::getProject() const {
    return m_project;
}
void OAIRelation::setProject(const QList<OAIProjectRelation> &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIRelation::is_project_Set() const{
    return m_project_isSet;
}

bool OAIRelation::is_project_Valid() const{
    return m_project_isValid;
}

QList<OAIQuoteRelation> OAIRelation::getQuote() const {
    return m_quote;
}
void OAIRelation::setQuote(const QList<OAIQuoteRelation> &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAIRelation::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAIRelation::is_quote_Valid() const{
    return m_quote_isValid;
}

QList<OAIQuoteItemRelation> OAIRelation::getQuoteItem() const {
    return m_quote_item;
}
void OAIRelation::setQuoteItem(const QList<OAIQuoteItemRelation> &quote_item) {
    m_quote_item = quote_item;
    m_quote_item_isSet = true;
}

bool OAIRelation::is_quote_item_Set() const{
    return m_quote_item_isSet;
}

bool OAIRelation::is_quote_item_Valid() const{
    return m_quote_item_isValid;
}

QList<OAITagRelation> OAIRelation::getTag() const {
    return m_tag;
}
void OAIRelation::setTag(const QList<OAITagRelation> &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIRelation::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIRelation::is_tag_Valid() const{
    return m_tag_isValid;
}

QList<OAITaskRelation> OAIRelation::getTask() const {
    return m_task;
}
void OAIRelation::setTask(const QList<OAITaskRelation> &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIRelation::is_task_Set() const{
    return m_task_isSet;
}

bool OAIRelation::is_task_Valid() const{
    return m_task_isValid;
}

QList<OAITicketRelation> OAIRelation::getTicket() const {
    return m_ticket;
}
void OAIRelation::setTicket(const QList<OAITicketRelation> &ticket) {
    m_ticket = ticket;
    m_ticket_isSet = true;
}

bool OAIRelation::is_ticket_Set() const{
    return m_ticket_isSet;
}

bool OAIRelation::is_ticket_Valid() const{
    return m_ticket_isValid;
}

QList<OAIUserRelation> OAIRelation::getUser() const {
    return m_user;
}
void OAIRelation::setUser(const QList<OAIUserRelation> &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRelation::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRelation::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_call.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_case.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_item.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opportunity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opportunity_product.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_book.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_book_item.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_item.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
