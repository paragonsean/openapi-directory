/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatformEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatformEntity::OAIPlatformEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatformEntity::OAIPlatformEntity() {
    this->initializeModel();
}

OAIPlatformEntity::~OAIPlatformEntity() {}

void OAIPlatformEntity::initializeModel() {

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPlatformEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlatformEntity::fromJsonObject(QJsonObject json) {

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPlatformEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlatformEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization.size() > 0) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAuthorization> OAIPlatformEntity::getAuthorization() const {
    return m_authorization;
}
void OAIPlatformEntity::setAuthorization(const QList<OAIAuthorization> &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIPlatformEntity::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIPlatformEntity::is_authorization_Valid() const{
    return m_authorization_isValid;
}

QString OAIPlatformEntity::getName() const {
    return m_name;
}
void OAIPlatformEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlatformEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlatformEntity::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIPlatformEntity::getResource() const {
    return m_resource;
}
void OAIPlatformEntity::setResource(const OAIObject &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIPlatformEntity::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIPlatformEntity::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIPlatformEntity::getType() const {
    return m_type;
}
void OAIPlatformEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlatformEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlatformEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPlatformEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlatformEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
