/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternalUserEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternalUserEntity::OAIInternalUserEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternalUserEntity::OAIInternalUserEntity() {
    this->initializeModel();
}

OAIInternalUserEntity::~OAIInternalUserEntity() {}

void OAIInternalUserEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_internal_request_count_isSet = false;
    m_internal_request_count_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_used_at_isSet = false;
    m_last_used_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_request_count_isSet = false;
    m_request_count_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIInternalUserEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternalUserEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_internal_request_count_isValid = ::OpenAPI::fromJsonValue(m_internal_request_count, json[QString("internal_request_count")]);
    m_internal_request_count_isSet = !json[QString("internal_request_count")].isNull() && m_internal_request_count_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_used_at_isValid = ::OpenAPI::fromJsonValue(m_last_used_at, json[QString("last_used_at")]);
    m_last_used_at_isSet = !json[QString("last_used_at")].isNull() && m_last_used_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_request_count_isValid = ::OpenAPI::fromJsonValue(m_request_count, json[QString("request_count")]);
    m_request_count_isSet = !json[QString("request_count")].isNull() && m_request_count_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIInternalUserEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternalUserEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_internal_request_count_isSet) {
        obj.insert(QString("internal_request_count"), ::OpenAPI::toJsonValue(m_internal_request_count));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_used_at_isSet) {
        obj.insert(QString("last_used_at"), ::OpenAPI::toJsonValue(m_last_used_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_request_count_isSet) {
        obj.insert(QString("request_count"), ::OpenAPI::toJsonValue(m_request_count));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIInternalUserEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIInternalUserEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIInternalUserEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIInternalUserEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIInternalUserEntity::getEmail() const {
    return m_email;
}
void OAIInternalUserEntity::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIInternalUserEntity::is_email_Set() const{
    return m_email_isSet;
}

bool OAIInternalUserEntity::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAIInternalUserEntity::getInternalRequestCount() const {
    return m_internal_request_count;
}
void OAIInternalUserEntity::setInternalRequestCount(const qint32 &internal_request_count) {
    m_internal_request_count = internal_request_count;
    m_internal_request_count_isSet = true;
}

bool OAIInternalUserEntity::is_internal_request_count_Set() const{
    return m_internal_request_count_isSet;
}

bool OAIInternalUserEntity::is_internal_request_count_Valid() const{
    return m_internal_request_count_isValid;
}

QString OAIInternalUserEntity::getKey() const {
    return m_key;
}
void OAIInternalUserEntity::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIInternalUserEntity::is_key_Set() const{
    return m_key_isSet;
}

bool OAIInternalUserEntity::is_key_Valid() const{
    return m_key_isValid;
}

QDateTime OAIInternalUserEntity::getLastUsedAt() const {
    return m_last_used_at;
}
void OAIInternalUserEntity::setLastUsedAt(const QDateTime &last_used_at) {
    m_last_used_at = last_used_at;
    m_last_used_at_isSet = true;
}

bool OAIInternalUserEntity::is_last_used_at_Set() const{
    return m_last_used_at_isSet;
}

bool OAIInternalUserEntity::is_last_used_at_Valid() const{
    return m_last_used_at_isValid;
}

QString OAIInternalUserEntity::getName() const {
    return m_name;
}
void OAIInternalUserEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInternalUserEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInternalUserEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInternalUserEntity::getOrganization() const {
    return m_organization;
}
void OAIInternalUserEntity::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIInternalUserEntity::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIInternalUserEntity::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIInternalUserEntity::getPhone() const {
    return m_phone;
}
void OAIInternalUserEntity::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIInternalUserEntity::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIInternalUserEntity::is_phone_Valid() const{
    return m_phone_isValid;
}

qint32 OAIInternalUserEntity::getRequestCount() const {
    return m_request_count;
}
void OAIInternalUserEntity::setRequestCount(const qint32 &request_count) {
    m_request_count = request_count;
    m_request_count_isSet = true;
}

bool OAIInternalUserEntity::is_request_count_Set() const{
    return m_request_count_isSet;
}

bool OAIInternalUserEntity::is_request_count_Valid() const{
    return m_request_count_isValid;
}

QList<QString> OAIInternalUserEntity::getRoles() const {
    return m_roles;
}
void OAIInternalUserEntity::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIInternalUserEntity::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIInternalUserEntity::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIInternalUserEntity::getStatus() const {
    return m_status;
}
void OAIInternalUserEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInternalUserEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInternalUserEntity::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIInternalUserEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIInternalUserEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIInternalUserEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIInternalUserEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIInternalUserEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_request_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternalUserEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
