/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorization::OAIAuthorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorization::OAIAuthorization() {
    this->initializeModel();
}

OAIAuthorization::~OAIAuthorization() {}

void OAIAuthorization::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_platform_credential_isSet = false;
    m_platform_credential_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAuthorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorization::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_platform_credential_isValid = ::OpenAPI::fromJsonValue(m_platform_credential, json[QString("platform_credential")]);
    m_platform_credential_isSet = !json[QString("platform_credential")].isNull() && m_platform_credential_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAuthorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorization::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_platform_credential.size() > 0) {
        obj.insert(QString("platform_credential"), ::OpenAPI::toJsonValue(m_platform_credential));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAuthorization::getDescription() const {
    return m_description;
}
void OAIAuthorization::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuthorization::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuthorization::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIObject> OAIAuthorization::getPlatformCredential() const {
    return m_platform_credential;
}
void OAIAuthorization::setPlatformCredential(const QList<OAIObject> &platform_credential) {
    m_platform_credential = platform_credential;
    m_platform_credential_isSet = true;
}

bool OAIAuthorization::is_platform_credential_Set() const{
    return m_platform_credential_isSet;
}

bool OAIAuthorization::is_platform_credential_Valid() const{
    return m_platform_credential_isValid;
}

QString OAIAuthorization::getType() const {
    return m_type;
}
void OAIAuthorization::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAuthorization::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAuthorization::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAuthorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_credential.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
