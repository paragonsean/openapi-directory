/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserEntity::OAIUserEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserEntity::OAIUserEntity() {
    this->initializeModel();
}

OAIUserEntity::~OAIUserEntity() {}

void OAIUserEntity::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_is_associable_isSet = false;
    m_is_associable_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_messenger_isSet = false;
    m_messenger_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_name_suffix_isSet = false;
    m_name_suffix_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_salutation_isSet = false;
    m_salutation_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIUserEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserEntity::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("is_admin")]);
    m_is_admin_isSet = !json[QString("is_admin")].isNull() && m_is_admin_isValid;

    m_is_associable_isValid = ::OpenAPI::fromJsonValue(m_is_associable, json[QString("is_associable")]);
    m_is_associable_isSet = !json[QString("is_associable")].isNull() && m_is_associable_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_messenger_isValid = ::OpenAPI::fromJsonValue(m_messenger, json[QString("messenger")]);
    m_messenger_isSet = !json[QString("messenger")].isNull() && m_messenger_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("middle_name")]);
    m_middle_name_isSet = !json[QString("middle_name")].isNull() && m_middle_name_isValid;

    m_name_suffix_isValid = ::OpenAPI::fromJsonValue(m_name_suffix, json[QString("name_suffix")]);
    m_name_suffix_isSet = !json[QString("name_suffix")].isNull() && m_name_suffix_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_salutation_isValid = ::OpenAPI::fromJsonValue(m_salutation, json[QString("salutation")]);
    m_salutation_isSet = !json[QString("salutation")].isNull() && m_salutation_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIUserEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email.size() > 0) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("is_admin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_is_associable_isSet) {
        obj.insert(QString("is_associable"), ::OpenAPI::toJsonValue(m_is_associable));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_messenger.size() > 0) {
        obj.insert(QString("messenger"), ::OpenAPI::toJsonValue(m_messenger));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("middle_name"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_name_suffix_isSet) {
        obj.insert(QString("name_suffix"), ::OpenAPI::toJsonValue(m_name_suffix));
    }
    if (m_phone.size() > 0) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_salutation_isSet) {
        obj.insert(QString("salutation"), ::OpenAPI::toJsonValue(m_salutation));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_website.size() > 0) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QList<OAIAddress> OAIUserEntity::getAddress() const {
    return m_address;
}
void OAIUserEntity::setAddress(const QList<OAIAddress> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUserEntity::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUserEntity::is_address_Valid() const{
    return m_address_isValid;
}

QDateTime OAIUserEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIUserEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUserEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUserEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUserEntity::getDepartment() const {
    return m_department;
}
void OAIUserEntity::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIUserEntity::is_department_Set() const{
    return m_department_isSet;
}

bool OAIUserEntity::is_department_Valid() const{
    return m_department_isValid;
}

QString OAIUserEntity::getDescription() const {
    return m_description;
}
void OAIUserEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUserEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUserEntity::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEmail> OAIUserEntity::getEmail() const {
    return m_email;
}
void OAIUserEntity::setEmail(const QList<OAIEmail> &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserEntity::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserEntity::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserEntity::getFirstName() const {
    return m_first_name;
}
void OAIUserEntity::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserEntity::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserEntity::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserEntity::getId() const {
    return m_id;
}
void OAIUserEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserEntity::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUserEntity::isIsAdmin() const {
    return m_is_admin;
}
void OAIUserEntity::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIUserEntity::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIUserEntity::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

bool OAIUserEntity::isIsAssociable() const {
    return m_is_associable;
}
void OAIUserEntity::setIsAssociable(const bool &is_associable) {
    m_is_associable = is_associable;
    m_is_associable_isSet = true;
}

bool OAIUserEntity::is_is_associable_Set() const{
    return m_is_associable_isSet;
}

bool OAIUserEntity::is_is_associable_Valid() const{
    return m_is_associable_isValid;
}

QString OAIUserEntity::getLastName() const {
    return m_last_name;
}
void OAIUserEntity::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserEntity::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserEntity::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<OAIMessenger> OAIUserEntity::getMessenger() const {
    return m_messenger;
}
void OAIUserEntity::setMessenger(const QList<OAIMessenger> &messenger) {
    m_messenger = messenger;
    m_messenger_isSet = true;
}

bool OAIUserEntity::is_messenger_Set() const{
    return m_messenger_isSet;
}

bool OAIUserEntity::is_messenger_Valid() const{
    return m_messenger_isValid;
}

QString OAIUserEntity::getMiddleName() const {
    return m_middle_name;
}
void OAIUserEntity::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAIUserEntity::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAIUserEntity::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QString OAIUserEntity::getNameSuffix() const {
    return m_name_suffix;
}
void OAIUserEntity::setNameSuffix(const QString &name_suffix) {
    m_name_suffix = name_suffix;
    m_name_suffix_isSet = true;
}

bool OAIUserEntity::is_name_suffix_Set() const{
    return m_name_suffix_isSet;
}

bool OAIUserEntity::is_name_suffix_Valid() const{
    return m_name_suffix_isValid;
}

QList<OAIPhone> OAIUserEntity::getPhone() const {
    return m_phone;
}
void OAIUserEntity::setPhone(const QList<OAIPhone> &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUserEntity::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUserEntity::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIUserEntity::getPosition() const {
    return m_position;
}
void OAIUserEntity::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIUserEntity::is_position_Set() const{
    return m_position_isSet;
}

bool OAIUserEntity::is_position_Valid() const{
    return m_position_isValid;
}

OAIRelation OAIUserEntity::getRelation() const {
    return m_relation;
}
void OAIUserEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIUserEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIUserEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAIUserEntity::getSalutation() const {
    return m_salutation;
}
void OAIUserEntity::setSalutation(const QString &salutation) {
    m_salutation = salutation;
    m_salutation_isSet = true;
}

bool OAIUserEntity::is_salutation_Set() const{
    return m_salutation_isSet;
}

bool OAIUserEntity::is_salutation_Valid() const{
    return m_salutation_isValid;
}

QString OAIUserEntity::getStatus() const {
    return m_status;
}
void OAIUserEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserEntity::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIUserEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUserEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUserEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUserEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIUserEntity::getUsername() const {
    return m_username;
}
void OAIUserEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserEntity::is_username_Valid() const{
    return m_username_isValid;
}

QList<OAIWebsite> OAIUserEntity::getWebsite() const {
    return m_website;
}
void OAIUserEntity::setWebsite(const QList<OAIWebsite> &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIUserEntity::is_website_Set() const{
    return m_website_isSet;
}

bool OAIUserEntity::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIUserEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_associable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messenger.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salutation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
