/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttachmentApi_H
#define OAI_OAIAttachmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregate.h"
#include "OAIAttachmentDescribe.h"
#include "OAIAttachmentEntity.h"
#include "OAIAttachmentEntityList.h"
#include "OAIAttachmentEntityRelation.h"
#include "OAIAttachmentEntityWrite.h"
#include "OAIBulkEntity.h"
#include "OAIBulkEntityRelation.h"
#include "OAICount.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttachmentApi : public QObject {
    Q_OBJECT

public:
    OAIAttachmentApi(const int timeOut = 0);
    ~OAIAttachmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIAttachmentEntityWrite [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createAttachmentEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIAttachmentEntityWrite &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createAttachmentEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    */
    virtual void deleteAttachmentCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  attachment_id QString [required]
    */
    virtual void deleteAttachmentEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &attachment_id);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  pipeline QString [optional]
    */
    virtual void getAttachmentAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pipeline = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  unique QString [optional]
    */
    virtual void getAttachmentCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void getAttachmentCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void getAttachmentDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getAttachmentEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  body OAIAttachmentEntityWrite [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateAttachmentEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &attachment_id, const OAIAttachmentEntityWrite &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateAttachmentEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAttachmentEntityCallback(OAIHttpRequestWorker *worker);
    void createAttachmentEntityBulkCallback(OAIHttpRequestWorker *worker);
    void deleteAttachmentCollectionBulkCallback(OAIHttpRequestWorker *worker);
    void deleteAttachmentEntityCallback(OAIHttpRequestWorker *worker);
    void getAttachmentAggregateCallback(OAIHttpRequestWorker *worker);
    void getAttachmentCollectionCallback(OAIHttpRequestWorker *worker);
    void getAttachmentCountCollectionCallback(OAIHttpRequestWorker *worker);
    void getAttachmentDescribeCallback(OAIHttpRequestWorker *worker);
    void getAttachmentEntityCallback(OAIHttpRequestWorker *worker);
    void updateAttachmentEntityCallback(OAIHttpRequestWorker *worker);
    void updateAttachmentEntityBulkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAttachmentEntitySignal(OAIAttachmentEntityRelation summary);
    void createAttachmentEntityBulkSignal(OAIBulkEntityRelation summary);
    void deleteAttachmentCollectionBulkSignal(OAIBulkEntity summary);
    void deleteAttachmentEntitySignal();
    void getAttachmentAggregateSignal(OAIAggregate summary);
    void getAttachmentCollectionSignal(QList<OAIAttachmentEntityList> summary);
    void getAttachmentCountCollectionSignal(OAICount summary);
    void getAttachmentDescribeSignal(OAIAttachmentDescribe summary);
    void getAttachmentEntitySignal(OAIAttachmentEntity summary);
    void updateAttachmentEntitySignal(OAIAttachmentEntityRelation summary);
    void updateAttachmentEntityBulkSignal(OAIBulkEntityRelation summary);


    void createAttachmentEntitySignalFull(OAIHttpRequestWorker *worker, OAIAttachmentEntityRelation summary);
    void createAttachmentEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);
    void deleteAttachmentCollectionBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntity summary);
    void deleteAttachmentEntitySignalFull(OAIHttpRequestWorker *worker);
    void getAttachmentAggregateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void getAttachmentCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttachmentEntityList> summary);
    void getAttachmentCountCollectionSignalFull(OAIHttpRequestWorker *worker, OAICount summary);
    void getAttachmentDescribeSignalFull(OAIHttpRequestWorker *worker, OAIAttachmentDescribe summary);
    void getAttachmentEntitySignalFull(OAIHttpRequestWorker *worker, OAIAttachmentEntity summary);
    void updateAttachmentEntitySignalFull(OAIHttpRequestWorker *worker, OAIAttachmentEntityRelation summary);
    void updateAttachmentEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);

    Q_DECL_DEPRECATED_X("Use createAttachmentEntitySignalError() instead")
    void createAttachmentEntitySignalE(OAIAttachmentEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAttachmentEntitySignalError(OAIAttachmentEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAttachmentEntityBulkSignalError() instead")
    void createAttachmentEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAttachmentEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAttachmentCollectionBulkSignalError() instead")
    void deleteAttachmentCollectionBulkSignalE(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAttachmentCollectionBulkSignalError(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAttachmentEntitySignalError() instead")
    void deleteAttachmentEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAttachmentEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentAggregateSignalError() instead")
    void getAttachmentAggregateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentAggregateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentCollectionSignalError() instead")
    void getAttachmentCollectionSignalE(QList<OAIAttachmentEntityList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentCollectionSignalError(QList<OAIAttachmentEntityList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentCountCollectionSignalError() instead")
    void getAttachmentCountCollectionSignalE(OAICount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentCountCollectionSignalError(OAICount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentDescribeSignalError() instead")
    void getAttachmentDescribeSignalE(OAIAttachmentDescribe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentDescribeSignalError(OAIAttachmentDescribe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentEntitySignalError() instead")
    void getAttachmentEntitySignalE(OAIAttachmentEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentEntitySignalError(OAIAttachmentEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAttachmentEntitySignalError() instead")
    void updateAttachmentEntitySignalE(OAIAttachmentEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAttachmentEntitySignalError(OAIAttachmentEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAttachmentEntityBulkSignalError() instead")
    void updateAttachmentEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAttachmentEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAttachmentEntitySignalErrorFull() instead")
    void createAttachmentEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAttachmentEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAttachmentEntityBulkSignalErrorFull() instead")
    void createAttachmentEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAttachmentEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAttachmentCollectionBulkSignalErrorFull() instead")
    void deleteAttachmentCollectionBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAttachmentCollectionBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAttachmentEntitySignalErrorFull() instead")
    void deleteAttachmentEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAttachmentEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentAggregateSignalErrorFull() instead")
    void getAttachmentAggregateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentAggregateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentCollectionSignalErrorFull() instead")
    void getAttachmentCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentCountCollectionSignalErrorFull() instead")
    void getAttachmentCountCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentCountCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentDescribeSignalErrorFull() instead")
    void getAttachmentDescribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentDescribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentEntitySignalErrorFull() instead")
    void getAttachmentEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAttachmentEntitySignalErrorFull() instead")
    void updateAttachmentEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAttachmentEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAttachmentEntityBulkSignalErrorFull() instead")
    void updateAttachmentEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAttachmentEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
