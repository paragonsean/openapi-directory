/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFieldItemApi_H
#define OAI_OAIFieldItemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICount.h"
#include "OAIFieldItemDescribe.h"
#include "OAIFieldItemEntity.h"
#include "OAIFieldItemEntityRelation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFieldItemApi : public QObject {
    Q_OBJECT

public:
    OAIFieldItemApi(const int timeOut = 0);
    ~OAIFieldItemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  field_id QString [required]
    * @param[in]  body OAIFieldItemEntity [required]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createFieldItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &field_id, const OAIFieldItemEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  field_id QString [required]
    * @param[in]  field_item_id QString [required]
    */
    virtual void deleteFieldItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &field_id, const QString &field_item_id);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  field_id QString [required]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getFieldItemCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &field_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  field_id QString [required]
    */
    virtual void getFieldItemCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &field_id);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  field_id QString [required]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void getFieldItemDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &field_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  field_id QString [required]
    * @param[in]  field_item_id QString [required]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getFieldItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &field_id, const QString &field_item_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  field_id QString [required]
    * @param[in]  field_item_id QString [required]
    * @param[in]  body OAIFieldItemEntity [required]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateFieldItemEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &field_id, const QString &field_item_id, const OAIFieldItemEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createFieldItemEntityCallback(OAIHttpRequestWorker *worker);
    void deleteFieldItemEntityCallback(OAIHttpRequestWorker *worker);
    void getFieldItemCollectionCallback(OAIHttpRequestWorker *worker);
    void getFieldItemCountCollectionCallback(OAIHttpRequestWorker *worker);
    void getFieldItemDescribeCallback(OAIHttpRequestWorker *worker);
    void getFieldItemEntityCallback(OAIHttpRequestWorker *worker);
    void updateFieldItemEntityCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createFieldItemEntitySignal(OAIFieldItemEntityRelation summary);
    void deleteFieldItemEntitySignal();
    void getFieldItemCollectionSignal(QList<OAIFieldItemEntity> summary);
    void getFieldItemCountCollectionSignal(OAICount summary);
    void getFieldItemDescribeSignal(OAIFieldItemDescribe summary);
    void getFieldItemEntitySignal(OAIFieldItemEntity summary);
    void updateFieldItemEntitySignal(OAIFieldItemEntityRelation summary);


    void createFieldItemEntitySignalFull(OAIHttpRequestWorker *worker, OAIFieldItemEntityRelation summary);
    void deleteFieldItemEntitySignalFull(OAIHttpRequestWorker *worker);
    void getFieldItemCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIFieldItemEntity> summary);
    void getFieldItemCountCollectionSignalFull(OAIHttpRequestWorker *worker, OAICount summary);
    void getFieldItemDescribeSignalFull(OAIHttpRequestWorker *worker, OAIFieldItemDescribe summary);
    void getFieldItemEntitySignalFull(OAIHttpRequestWorker *worker, OAIFieldItemEntity summary);
    void updateFieldItemEntitySignalFull(OAIHttpRequestWorker *worker, OAIFieldItemEntityRelation summary);

    Q_DECL_DEPRECATED_X("Use createFieldItemEntitySignalError() instead")
    void createFieldItemEntitySignalE(OAIFieldItemEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldItemEntitySignalError(OAIFieldItemEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldItemEntitySignalError() instead")
    void deleteFieldItemEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldItemEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldItemCollectionSignalError() instead")
    void getFieldItemCollectionSignalE(QList<OAIFieldItemEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldItemCollectionSignalError(QList<OAIFieldItemEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldItemCountCollectionSignalError() instead")
    void getFieldItemCountCollectionSignalE(OAICount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldItemCountCollectionSignalError(OAICount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldItemDescribeSignalError() instead")
    void getFieldItemDescribeSignalE(OAIFieldItemDescribe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldItemDescribeSignalError(OAIFieldItemDescribe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldItemEntitySignalError() instead")
    void getFieldItemEntitySignalE(OAIFieldItemEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldItemEntitySignalError(OAIFieldItemEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldItemEntitySignalError() instead")
    void updateFieldItemEntitySignalE(OAIFieldItemEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldItemEntitySignalError(OAIFieldItemEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createFieldItemEntitySignalErrorFull() instead")
    void createFieldItemEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldItemEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldItemEntitySignalErrorFull() instead")
    void deleteFieldItemEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldItemEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldItemCollectionSignalErrorFull() instead")
    void getFieldItemCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldItemCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldItemCountCollectionSignalErrorFull() instead")
    void getFieldItemCountCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldItemCountCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldItemDescribeSignalErrorFull() instead")
    void getFieldItemDescribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldItemDescribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldItemEntitySignalErrorFull() instead")
    void getFieldItemEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldItemEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldItemEntitySignalErrorFull() instead")
    void updateFieldItemEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldItemEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
