/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignEntity::OAICampaignEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignEntity::OAICampaignEntity() {
    this->initializeModel();
}

OAICampaignEntity::~OAICampaignEntity() {}

void OAICampaignEntity::initializeModel() {

    m_actual_cost_isSet = false;
    m_actual_cost_isValid = false;

    m_budgeted_cost_isSet = false;
    m_budgeted_cost_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_expected_end_at_isSet = false;
    m_expected_end_at_isValid = false;

    m_expected_response_isSet = false;
    m_expected_response_isValid = false;

    m_expected_revenue_isSet = false;
    m_expected_revenue_isValid = false;

    m_expected_start_at_isSet = false;
    m_expected_start_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_numbers_sent_isSet = false;
    m_numbers_sent_isValid = false;

    m_objective_isSet = false;
    m_objective_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICampaignEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaignEntity::fromJsonObject(QJsonObject json) {

    m_actual_cost_isValid = ::OpenAPI::fromJsonValue(m_actual_cost, json[QString("actual_cost")]);
    m_actual_cost_isSet = !json[QString("actual_cost")].isNull() && m_actual_cost_isValid;

    m_budgeted_cost_isValid = ::OpenAPI::fromJsonValue(m_budgeted_cost, json[QString("budgeted_cost")]);
    m_budgeted_cost_isSet = !json[QString("budgeted_cost")].isNull() && m_budgeted_cost_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_expected_end_at_isValid = ::OpenAPI::fromJsonValue(m_expected_end_at, json[QString("expected_end_at")]);
    m_expected_end_at_isSet = !json[QString("expected_end_at")].isNull() && m_expected_end_at_isValid;

    m_expected_response_isValid = ::OpenAPI::fromJsonValue(m_expected_response, json[QString("expected_response")]);
    m_expected_response_isSet = !json[QString("expected_response")].isNull() && m_expected_response_isValid;

    m_expected_revenue_isValid = ::OpenAPI::fromJsonValue(m_expected_revenue, json[QString("expected_revenue")]);
    m_expected_revenue_isSet = !json[QString("expected_revenue")].isNull() && m_expected_revenue_isValid;

    m_expected_start_at_isValid = ::OpenAPI::fromJsonValue(m_expected_start_at, json[QString("expected_start_at")]);
    m_expected_start_at_isSet = !json[QString("expected_start_at")].isNull() && m_expected_start_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_numbers_sent_isValid = ::OpenAPI::fromJsonValue(m_numbers_sent, json[QString("numbers_sent")]);
    m_numbers_sent_isSet = !json[QString("numbers_sent")].isNull() && m_numbers_sent_isValid;

    m_objective_isValid = ::OpenAPI::fromJsonValue(m_objective, json[QString("objective")]);
    m_objective_isSet = !json[QString("objective")].isNull() && m_objective_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAICampaignEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaignEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_cost_isSet) {
        obj.insert(QString("actual_cost"), ::OpenAPI::toJsonValue(m_actual_cost));
    }
    if (m_budgeted_cost_isSet) {
        obj.insert(QString("budgeted_cost"), ::OpenAPI::toJsonValue(m_budgeted_cost));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_expected_end_at_isSet) {
        obj.insert(QString("expected_end_at"), ::OpenAPI::toJsonValue(m_expected_end_at));
    }
    if (m_expected_response_isSet) {
        obj.insert(QString("expected_response"), ::OpenAPI::toJsonValue(m_expected_response));
    }
    if (m_expected_revenue_isSet) {
        obj.insert(QString("expected_revenue"), ::OpenAPI::toJsonValue(m_expected_revenue));
    }
    if (m_expected_start_at_isSet) {
        obj.insert(QString("expected_start_at"), ::OpenAPI::toJsonValue(m_expected_start_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_numbers_sent_isSet) {
        obj.insert(QString("numbers_sent"), ::OpenAPI::toJsonValue(m_numbers_sent));
    }
    if (m_objective_isSet) {
        obj.insert(QString("objective"), ::OpenAPI::toJsonValue(m_objective));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

float OAICampaignEntity::getActualCost() const {
    return m_actual_cost;
}
void OAICampaignEntity::setActualCost(const float &actual_cost) {
    m_actual_cost = actual_cost;
    m_actual_cost_isSet = true;
}

bool OAICampaignEntity::is_actual_cost_Set() const{
    return m_actual_cost_isSet;
}

bool OAICampaignEntity::is_actual_cost_Valid() const{
    return m_actual_cost_isValid;
}

float OAICampaignEntity::getBudgetedCost() const {
    return m_budgeted_cost;
}
void OAICampaignEntity::setBudgetedCost(const float &budgeted_cost) {
    m_budgeted_cost = budgeted_cost;
    m_budgeted_cost_isSet = true;
}

bool OAICampaignEntity::is_budgeted_cost_Set() const{
    return m_budgeted_cost_isSet;
}

bool OAICampaignEntity::is_budgeted_cost_Valid() const{
    return m_budgeted_cost_isValid;
}

QDateTime OAICampaignEntity::getCreatedAt() const {
    return m_created_at;
}
void OAICampaignEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICampaignEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICampaignEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICurrency OAICampaignEntity::getCurrency() const {
    return m_currency;
}
void OAICampaignEntity::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICampaignEntity::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICampaignEntity::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICampaignEntity::getDescription() const {
    return m_description;
}
void OAICampaignEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICampaignEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAICampaignEntity::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAICampaignEntity::getEndedAt() const {
    return m_ended_at;
}
void OAICampaignEntity::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAICampaignEntity::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAICampaignEntity::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QDateTime OAICampaignEntity::getExpectedEndAt() const {
    return m_expected_end_at;
}
void OAICampaignEntity::setExpectedEndAt(const QDateTime &expected_end_at) {
    m_expected_end_at = expected_end_at;
    m_expected_end_at_isSet = true;
}

bool OAICampaignEntity::is_expected_end_at_Set() const{
    return m_expected_end_at_isSet;
}

bool OAICampaignEntity::is_expected_end_at_Valid() const{
    return m_expected_end_at_isValid;
}

float OAICampaignEntity::getExpectedResponse() const {
    return m_expected_response;
}
void OAICampaignEntity::setExpectedResponse(const float &expected_response) {
    m_expected_response = expected_response;
    m_expected_response_isSet = true;
}

bool OAICampaignEntity::is_expected_response_Set() const{
    return m_expected_response_isSet;
}

bool OAICampaignEntity::is_expected_response_Valid() const{
    return m_expected_response_isValid;
}

float OAICampaignEntity::getExpectedRevenue() const {
    return m_expected_revenue;
}
void OAICampaignEntity::setExpectedRevenue(const float &expected_revenue) {
    m_expected_revenue = expected_revenue;
    m_expected_revenue_isSet = true;
}

bool OAICampaignEntity::is_expected_revenue_Set() const{
    return m_expected_revenue_isSet;
}

bool OAICampaignEntity::is_expected_revenue_Valid() const{
    return m_expected_revenue_isValid;
}

QDateTime OAICampaignEntity::getExpectedStartAt() const {
    return m_expected_start_at;
}
void OAICampaignEntity::setExpectedStartAt(const QDateTime &expected_start_at) {
    m_expected_start_at = expected_start_at;
    m_expected_start_at_isSet = true;
}

bool OAICampaignEntity::is_expected_start_at_Set() const{
    return m_expected_start_at_isSet;
}

bool OAICampaignEntity::is_expected_start_at_Valid() const{
    return m_expected_start_at_isValid;
}

QString OAICampaignEntity::getId() const {
    return m_id;
}
void OAICampaignEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICampaignEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAICampaignEntity::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICampaignEntity::isIsActive() const {
    return m_is_active;
}
void OAICampaignEntity::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAICampaignEntity::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAICampaignEntity::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAICampaignEntity::getName() const {
    return m_name;
}
void OAICampaignEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICampaignEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAICampaignEntity::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICampaignEntity::getNumbersSent() const {
    return m_numbers_sent;
}
void OAICampaignEntity::setNumbersSent(const qint32 &numbers_sent) {
    m_numbers_sent = numbers_sent;
    m_numbers_sent_isSet = true;
}

bool OAICampaignEntity::is_numbers_sent_Set() const{
    return m_numbers_sent_isSet;
}

bool OAICampaignEntity::is_numbers_sent_Valid() const{
    return m_numbers_sent_isValid;
}

QString OAICampaignEntity::getObjective() const {
    return m_objective;
}
void OAICampaignEntity::setObjective(const QString &objective) {
    m_objective = objective;
    m_objective_isSet = true;
}

bool OAICampaignEntity::is_objective_Set() const{
    return m_objective_isSet;
}

bool OAICampaignEntity::is_objective_Valid() const{
    return m_objective_isValid;
}

OAIRelation OAICampaignEntity::getRelation() const {
    return m_relation;
}
void OAICampaignEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAICampaignEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAICampaignEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QDateTime OAICampaignEntity::getStartedAt() const {
    return m_started_at;
}
void OAICampaignEntity::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAICampaignEntity::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAICampaignEntity::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAICampaignEntity::getStatus() const {
    return m_status;
}
void OAICampaignEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICampaignEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAICampaignEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICampaignEntity::getType() const {
    return m_type;
}
void OAICampaignEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICampaignEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAICampaignEntity::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAICampaignEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAICampaignEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICampaignEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICampaignEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICampaignEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budgeted_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbers_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaignEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
