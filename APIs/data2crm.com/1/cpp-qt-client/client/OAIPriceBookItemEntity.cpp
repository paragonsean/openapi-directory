/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceBookItemEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceBookItemEntity::OAIPriceBookItemEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceBookItemEntity::OAIPriceBookItemEntity() {
    this->initializeModel();
}

OAIPriceBookItemEntity::~OAIPriceBookItemEntity() {}

void OAIPriceBookItemEntity::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_use_standard_price_isSet = false;
    m_use_standard_price_isValid = false;
}

void OAIPriceBookItemEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceBookItemEntity::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_use_standard_price_isValid = ::OpenAPI::fromJsonValue(m_use_standard_price, json[QString("use_standard_price")]);
    m_use_standard_price_isSet = !json[QString("use_standard_price")].isNull() && m_use_standard_price_isValid;
}

QString OAIPriceBookItemEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceBookItemEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price.size() > 0) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_use_standard_price_isSet) {
        obj.insert(QString("use_standard_price"), ::OpenAPI::toJsonValue(m_use_standard_price));
    }
    return obj;
}

QString OAIPriceBookItemEntity::getCode() const {
    return m_code;
}
void OAIPriceBookItemEntity::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIPriceBookItemEntity::is_code_Set() const{
    return m_code_isSet;
}

bool OAIPriceBookItemEntity::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIPriceBookItemEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIPriceBookItemEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPriceBookItemEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPriceBookItemEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPriceBookItemEntity::getId() const {
    return m_id;
}
void OAIPriceBookItemEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPriceBookItemEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPriceBookItemEntity::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPriceBookItemEntity::isIsActive() const {
    return m_is_active;
}
void OAIPriceBookItemEntity::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIPriceBookItemEntity::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIPriceBookItemEntity::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIPriceBookItemEntity::getName() const {
    return m_name;
}
void OAIPriceBookItemEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPriceBookItemEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPriceBookItemEntity::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPrice> OAIPriceBookItemEntity::getPrice() const {
    return m_price;
}
void OAIPriceBookItemEntity::setPrice(const QList<OAIPrice> &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIPriceBookItemEntity::is_price_Set() const{
    return m_price_isSet;
}

bool OAIPriceBookItemEntity::is_price_Valid() const{
    return m_price_isValid;
}

OAIRelation OAIPriceBookItemEntity::getRelation() const {
    return m_relation;
}
void OAIPriceBookItemEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIPriceBookItemEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIPriceBookItemEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QDateTime OAIPriceBookItemEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPriceBookItemEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPriceBookItemEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPriceBookItemEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIPriceBookItemEntity::isUseStandardPrice() const {
    return m_use_standard_price;
}
void OAIPriceBookItemEntity::setUseStandardPrice(const bool &use_standard_price) {
    m_use_standard_price = use_standard_price;
    m_use_standard_price_isSet = true;
}

bool OAIPriceBookItemEntity::is_use_standard_price_Set() const{
    return m_use_standard_price_isSet;
}

bool OAIPriceBookItemEntity::is_use_standard_price_Valid() const{
    return m_use_standard_price_isValid;
}

bool OAIPriceBookItemEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_standard_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceBookItemEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
