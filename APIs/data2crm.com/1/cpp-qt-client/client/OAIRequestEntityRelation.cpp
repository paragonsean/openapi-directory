/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestEntityRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestEntityRelation::OAIRequestEntityRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestEntityRelation::OAIRequestEntityRelation() {
    this->initializeModel();
}

OAIRequestEntityRelation::~OAIRequestEntityRelation() {}

void OAIRequestEntityRelation::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIRequestEntityRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestEntityRelation::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("status_code")]);
    m_status_code_isSet = !json[QString("status_code")].isNull() && m_status_code_isValid;
}

QString OAIRequestEntityRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestEntityRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_header.size() > 0) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("status_code"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QString OAIRequestEntityRelation::getContent() const {
    return m_content;
}
void OAIRequestEntityRelation::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIRequestEntityRelation::is_content_Set() const{
    return m_content_isSet;
}

bool OAIRequestEntityRelation::is_content_Valid() const{
    return m_content_isValid;
}

QList<OAIHeader> OAIRequestEntityRelation::getHeader() const {
    return m_header;
}
void OAIRequestEntityRelation::setHeader(const QList<OAIHeader> &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIRequestEntityRelation::is_header_Set() const{
    return m_header_isSet;
}

bool OAIRequestEntityRelation::is_header_Valid() const{
    return m_header_isValid;
}

qint32 OAIRequestEntityRelation::getStatusCode() const {
    return m_status_code;
}
void OAIRequestEntityRelation::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIRequestEntityRelation::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIRequestEntityRelation::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIRequestEntityRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestEntityRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
