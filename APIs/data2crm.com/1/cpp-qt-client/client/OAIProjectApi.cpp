/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIProjectApi::OAIProjectApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIProjectApi::~OAIProjectApi() {
}

void OAIProjectApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api-2445581398133.apicast.io:443/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createProjectEntity", defaultConf);
    _serverIndices.insert("createProjectEntity", 0);
    _serverConfigs.insert("createProjectEntityBulk", defaultConf);
    _serverIndices.insert("createProjectEntityBulk", 0);
    _serverConfigs.insert("deleteProjectCollectionBulk", defaultConf);
    _serverIndices.insert("deleteProjectCollectionBulk", 0);
    _serverConfigs.insert("deleteProjectEntity", defaultConf);
    _serverIndices.insert("deleteProjectEntity", 0);
    _serverConfigs.insert("getProjectAggregate", defaultConf);
    _serverIndices.insert("getProjectAggregate", 0);
    _serverConfigs.insert("getProjectCollection", defaultConf);
    _serverIndices.insert("getProjectCollection", 0);
    _serverConfigs.insert("getProjectCountCollection", defaultConf);
    _serverIndices.insert("getProjectCountCollection", 0);
    _serverConfigs.insert("getProjectDescribe", defaultConf);
    _serverIndices.insert("getProjectDescribe", 0);
    _serverConfigs.insert("getProjectEntity", defaultConf);
    _serverIndices.insert("getProjectEntity", 0);
    _serverConfigs.insert("updateProjectEntity", defaultConf);
    _serverIndices.insert("updateProjectEntity", 0);
    _serverConfigs.insert("updateProjectEntityBulk", defaultConf);
    _serverIndices.insert("updateProjectEntityBulk", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIProjectApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIProjectApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIProjectApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIProjectApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIProjectApi::setUsername(const QString &username) {
    _username = username;
}

void OAIProjectApi::setPassword(const QString &password) {
    _password = password;
}


void OAIProjectApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIProjectApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIProjectApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIProjectApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProjectApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIProjectApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIProjectApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIProjectApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIProjectApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIProjectApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIProjectApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIProjectApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIProjectApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIProjectApi::createProjectEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIProjectEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createProjectEntity"][_serverIndices.value("createProjectEntity")].URL()+"/application/entity/project");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::createProjectEntityCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::createProjectEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProjectEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createProjectEntitySignal(output);
        Q_EMIT createProjectEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createProjectEntitySignalE(output, error_type, error_str);
        Q_EMIT createProjectEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createProjectEntitySignalError(output, error_type, error_str);
        Q_EMIT createProjectEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::createProjectEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createProjectEntityBulk"][_serverIndices.value("createProjectEntityBulk")].URL()+"/application/entity/project/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::createProjectEntityBulkCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::createProjectEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createProjectEntityBulkSignal(output);
        Q_EMIT createProjectEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createProjectEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT createProjectEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createProjectEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT createProjectEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::deleteProjectCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body) {
    QString fullPath = QString(_serverConfigs["deleteProjectCollectionBulk"][_serverIndices.value("deleteProjectCollectionBulk")].URL()+"/application/entity/project/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::deleteProjectCollectionBulkCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::deleteProjectCollectionBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteProjectCollectionBulkSignal(output);
        Q_EMIT deleteProjectCollectionBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteProjectCollectionBulkSignalE(output, error_type, error_str);
        Q_EMIT deleteProjectCollectionBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteProjectCollectionBulkSignalError(output, error_type, error_str);
        Q_EMIT deleteProjectCollectionBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::deleteProjectEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &project_id) {
    QString fullPath = QString(_serverConfigs["deleteProjectEntity"][_serverIndices.value("deleteProjectEntity")].URL()+"/application/entity/project/{project_id}");
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("project_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_id"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::deleteProjectEntityCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::deleteProjectEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteProjectEntitySignal();
        Q_EMIT deleteProjectEntitySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteProjectEntitySignalE(error_type, error_str);
        Q_EMIT deleteProjectEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteProjectEntitySignalError(error_type, error_str);
        Q_EMIT deleteProjectEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::getProjectAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &pipeline) {
    QString fullPath = QString(_serverConfigs["getProjectAggregate"][_serverIndices.value("getProjectAggregate")].URL()+"/application/entity/project/aggregate");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (pipeline.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pipeline", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pipeline")).append(querySuffix).append(QUrl::toPercentEncoding(pipeline.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::getProjectAggregateCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::getProjectAggregateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAggregate output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getProjectAggregateSignal(output);
        Q_EMIT getProjectAggregateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getProjectAggregateSignalE(output, error_type, error_str);
        Q_EMIT getProjectAggregateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getProjectAggregateSignalError(output, error_type, error_str);
        Q_EMIT getProjectAggregateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::getProjectCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &unique) {
    QString fullPath = QString(_serverConfigs["getProjectCollection"][_serverIndices.value("getProjectCollection")].URL()+"/application/entity/project/list");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page_size", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page_size")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    if (unique.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "unique", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("unique")).append(querySuffix).append(QUrl::toPercentEncoding(unique.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::getProjectCollectionCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::getProjectCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProjectEntity> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProjectEntity val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getProjectCollectionSignal(output);
        Q_EMIT getProjectCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getProjectCollectionSignalE(output, error_type, error_str);
        Q_EMIT getProjectCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getProjectCollectionSignalError(output, error_type, error_str);
        Q_EMIT getProjectCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::getProjectCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &filter) {
    QString fullPath = QString(_serverConfigs["getProjectCountCollection"][_serverIndices.value("getProjectCountCollection")].URL()+"/application/entity/project/count");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::getProjectCountCollectionCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::getProjectCountCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getProjectCountCollectionSignal(output);
        Q_EMIT getProjectCountCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getProjectCountCollectionSignalE(output, error_type, error_str);
        Q_EMIT getProjectCountCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getProjectCountCollectionSignalError(output, error_type, error_str);
        Q_EMIT getProjectCountCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::getProjectDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["getProjectDescribe"][_serverIndices.value("getProjectDescribe")].URL()+"/application/entity/project/describe");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::getProjectDescribeCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::getProjectDescribeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProjectDescribe output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getProjectDescribeSignal(output);
        Q_EMIT getProjectDescribeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getProjectDescribeSignalE(output, error_type, error_str);
        Q_EMIT getProjectDescribeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getProjectDescribeSignalError(output, error_type, error_str);
        Q_EMIT getProjectDescribeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::getProjectEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &project_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields) {
    QString fullPath = QString(_serverConfigs["getProjectEntity"][_serverIndices.value("getProjectEntity")].URL()+"/application/entity/project/{project_id}");
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("project_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_id"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::getProjectEntityCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::getProjectEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProjectEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getProjectEntitySignal(output);
        Q_EMIT getProjectEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getProjectEntitySignalE(output, error_type, error_str);
        Q_EMIT getProjectEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getProjectEntitySignalError(output, error_type, error_str);
        Q_EMIT getProjectEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::updateProjectEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &project_id, const OAIProjectEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateProjectEntity"][_serverIndices.value("updateProjectEntity")].URL()+"/application/entity/project/{project_id}");
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("project_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_id"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::updateProjectEntityCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::updateProjectEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProjectEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateProjectEntitySignal(output);
        Q_EMIT updateProjectEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateProjectEntitySignalE(output, error_type, error_str);
        Q_EMIT updateProjectEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateProjectEntitySignalError(output, error_type, error_str);
        Q_EMIT updateProjectEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::updateProjectEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateProjectEntityBulk"][_serverIndices.value("updateProjectEntityBulk")].URL()+"/application/entity/project/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIProjectApi::updateProjectEntityBulkCallback);
    connect(this, &OAIProjectApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIProjectApi::updateProjectEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateProjectEntityBulkSignal(output);
        Q_EMIT updateProjectEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateProjectEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT updateProjectEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateProjectEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT updateProjectEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIProjectApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
