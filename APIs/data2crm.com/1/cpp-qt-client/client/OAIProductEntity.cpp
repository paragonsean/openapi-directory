/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductEntity::OAIProductEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductEntity::OAIProductEntity() {
    this->initializeModel();
}

OAIProductEntity::~OAIProductEntity() {}

void OAIProductEntity::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_taxable_isSet = false;
    m_is_taxable_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_in_demand_isSet = false;
    m_quantity_in_demand_isValid = false;

    m_quantity_in_stock_isSet = false;
    m_quantity_in_stock_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_reorder_level_isSet = false;
    m_reorder_level_isValid = false;

    m_sales_ended_at_isSet = false;
    m_sales_ended_at_isValid = false;

    m_sales_started_at_isSet = false;
    m_sales_started_at_isValid = false;

    m_support_ended_at_isSet = false;
    m_support_ended_at_isValid = false;

    m_support_started_at_isSet = false;
    m_support_started_at_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIProductEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductEntity::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_taxable_isValid = ::OpenAPI::fromJsonValue(m_is_taxable, json[QString("is_taxable")]);
    m_is_taxable_isSet = !json[QString("is_taxable")].isNull() && m_is_taxable_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_in_demand_isValid = ::OpenAPI::fromJsonValue(m_quantity_in_demand, json[QString("quantity_in_demand")]);
    m_quantity_in_demand_isSet = !json[QString("quantity_in_demand")].isNull() && m_quantity_in_demand_isValid;

    m_quantity_in_stock_isValid = ::OpenAPI::fromJsonValue(m_quantity_in_stock, json[QString("quantity_in_stock")]);
    m_quantity_in_stock_isSet = !json[QString("quantity_in_stock")].isNull() && m_quantity_in_stock_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_reorder_level_isValid = ::OpenAPI::fromJsonValue(m_reorder_level, json[QString("reorder_level")]);
    m_reorder_level_isSet = !json[QString("reorder_level")].isNull() && m_reorder_level_isValid;

    m_sales_ended_at_isValid = ::OpenAPI::fromJsonValue(m_sales_ended_at, json[QString("sales_ended_at")]);
    m_sales_ended_at_isSet = !json[QString("sales_ended_at")].isNull() && m_sales_ended_at_isValid;

    m_sales_started_at_isValid = ::OpenAPI::fromJsonValue(m_sales_started_at, json[QString("sales_started_at")]);
    m_sales_started_at_isSet = !json[QString("sales_started_at")].isNull() && m_sales_started_at_isValid;

    m_support_ended_at_isValid = ::OpenAPI::fromJsonValue(m_support_ended_at, json[QString("support_ended_at")]);
    m_support_ended_at_isSet = !json[QString("support_ended_at")].isNull() && m_support_ended_at_isValid;

    m_support_started_at_isValid = ::OpenAPI::fromJsonValue(m_support_started_at, json[QString("support_started_at")]);
    m_support_started_at_isSet = !json[QString("support_started_at")].isNull() && m_support_started_at_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIProductEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_cost.size() > 0) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.size() > 0) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_taxable_isSet) {
        obj.insert(QString("is_taxable"), ::OpenAPI::toJsonValue(m_is_taxable));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price.size() > 0) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_in_demand_isSet) {
        obj.insert(QString("quantity_in_demand"), ::OpenAPI::toJsonValue(m_quantity_in_demand));
    }
    if (m_quantity_in_stock_isSet) {
        obj.insert(QString("quantity_in_stock"), ::OpenAPI::toJsonValue(m_quantity_in_stock));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_reorder_level_isSet) {
        obj.insert(QString("reorder_level"), ::OpenAPI::toJsonValue(m_reorder_level));
    }
    if (m_sales_ended_at_isSet) {
        obj.insert(QString("sales_ended_at"), ::OpenAPI::toJsonValue(m_sales_ended_at));
    }
    if (m_sales_started_at_isSet) {
        obj.insert(QString("sales_started_at"), ::OpenAPI::toJsonValue(m_sales_started_at));
    }
    if (m_support_ended_at_isSet) {
        obj.insert(QString("support_ended_at"), ::OpenAPI::toJsonValue(m_support_ended_at));
    }
    if (m_support_started_at_isSet) {
        obj.insert(QString("support_started_at"), ::OpenAPI::toJsonValue(m_support_started_at));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QList<QString> OAIProductEntity::getCategory() const {
    return m_category;
}
void OAIProductEntity::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIProductEntity::is_category_Set() const{
    return m_category_isSet;
}

bool OAIProductEntity::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIProductEntity::getCode() const {
    return m_code;
}
void OAIProductEntity::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProductEntity::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProductEntity::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAICost> OAIProductEntity::getCost() const {
    return m_cost;
}
void OAIProductEntity::setCost(const QList<OAICost> &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIProductEntity::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIProductEntity::is_cost_Valid() const{
    return m_cost_isValid;
}

QDateTime OAIProductEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIProductEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProductEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProductEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIProductEntity::getDescription() const {
    return m_description;
}
void OAIProductEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProductEntity::getId() const {
    return m_id;
}
void OAIProductEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductEntity::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImage> OAIProductEntity::getImage() const {
    return m_image;
}
void OAIProductEntity::setImage(const QList<OAIImage> &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIProductEntity::is_image_Set() const{
    return m_image_isSet;
}

bool OAIProductEntity::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIProductEntity::isIsActive() const {
    return m_is_active;
}
void OAIProductEntity::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIProductEntity::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIProductEntity::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIProductEntity::isIsTaxable() const {
    return m_is_taxable;
}
void OAIProductEntity::setIsTaxable(const bool &is_taxable) {
    m_is_taxable = is_taxable;
    m_is_taxable_isSet = true;
}

bool OAIProductEntity::is_is_taxable_Set() const{
    return m_is_taxable_isSet;
}

bool OAIProductEntity::is_is_taxable_Valid() const{
    return m_is_taxable_isValid;
}

QString OAIProductEntity::getManufacturer() const {
    return m_manufacturer;
}
void OAIProductEntity::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIProductEntity::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIProductEntity::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIProductEntity::getName() const {
    return m_name;
}
void OAIProductEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductEntity::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPrice> OAIProductEntity::getPrice() const {
    return m_price;
}
void OAIProductEntity::setPrice(const QList<OAIPrice> &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProductEntity::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProductEntity::is_price_Valid() const{
    return m_price_isValid;
}

float OAIProductEntity::getQuantityInDemand() const {
    return m_quantity_in_demand;
}
void OAIProductEntity::setQuantityInDemand(const float &quantity_in_demand) {
    m_quantity_in_demand = quantity_in_demand;
    m_quantity_in_demand_isSet = true;
}

bool OAIProductEntity::is_quantity_in_demand_Set() const{
    return m_quantity_in_demand_isSet;
}

bool OAIProductEntity::is_quantity_in_demand_Valid() const{
    return m_quantity_in_demand_isValid;
}

float OAIProductEntity::getQuantityInStock() const {
    return m_quantity_in_stock;
}
void OAIProductEntity::setQuantityInStock(const float &quantity_in_stock) {
    m_quantity_in_stock = quantity_in_stock;
    m_quantity_in_stock_isSet = true;
}

bool OAIProductEntity::is_quantity_in_stock_Set() const{
    return m_quantity_in_stock_isSet;
}

bool OAIProductEntity::is_quantity_in_stock_Valid() const{
    return m_quantity_in_stock_isValid;
}

OAIRelation OAIProductEntity::getRelation() const {
    return m_relation;
}
void OAIProductEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIProductEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIProductEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

float OAIProductEntity::getReorderLevel() const {
    return m_reorder_level;
}
void OAIProductEntity::setReorderLevel(const float &reorder_level) {
    m_reorder_level = reorder_level;
    m_reorder_level_isSet = true;
}

bool OAIProductEntity::is_reorder_level_Set() const{
    return m_reorder_level_isSet;
}

bool OAIProductEntity::is_reorder_level_Valid() const{
    return m_reorder_level_isValid;
}

QDateTime OAIProductEntity::getSalesEndedAt() const {
    return m_sales_ended_at;
}
void OAIProductEntity::setSalesEndedAt(const QDateTime &sales_ended_at) {
    m_sales_ended_at = sales_ended_at;
    m_sales_ended_at_isSet = true;
}

bool OAIProductEntity::is_sales_ended_at_Set() const{
    return m_sales_ended_at_isSet;
}

bool OAIProductEntity::is_sales_ended_at_Valid() const{
    return m_sales_ended_at_isValid;
}

QDateTime OAIProductEntity::getSalesStartedAt() const {
    return m_sales_started_at;
}
void OAIProductEntity::setSalesStartedAt(const QDateTime &sales_started_at) {
    m_sales_started_at = sales_started_at;
    m_sales_started_at_isSet = true;
}

bool OAIProductEntity::is_sales_started_at_Set() const{
    return m_sales_started_at_isSet;
}

bool OAIProductEntity::is_sales_started_at_Valid() const{
    return m_sales_started_at_isValid;
}

QDateTime OAIProductEntity::getSupportEndedAt() const {
    return m_support_ended_at;
}
void OAIProductEntity::setSupportEndedAt(const QDateTime &support_ended_at) {
    m_support_ended_at = support_ended_at;
    m_support_ended_at_isSet = true;
}

bool OAIProductEntity::is_support_ended_at_Set() const{
    return m_support_ended_at_isSet;
}

bool OAIProductEntity::is_support_ended_at_Valid() const{
    return m_support_ended_at_isValid;
}

QDateTime OAIProductEntity::getSupportStartedAt() const {
    return m_support_started_at;
}
void OAIProductEntity::setSupportStartedAt(const QDateTime &support_started_at) {
    m_support_started_at = support_started_at;
    m_support_started_at_isSet = true;
}

bool OAIProductEntity::is_support_started_at_Set() const{
    return m_support_started_at_isSet;
}

bool OAIProductEntity::is_support_started_at_Valid() const{
    return m_support_started_at_isValid;
}

QString OAIProductEntity::getType() const {
    return m_type;
}
void OAIProductEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProductEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProductEntity::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProductEntity::getUnit() const {
    return m_unit;
}
void OAIProductEntity::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIProductEntity::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIProductEntity::is_unit_Valid() const{
    return m_unit_isValid;
}

QDateTime OAIProductEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIProductEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIProductEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIProductEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIProductEntity::getUrl() const {
    return m_url;
}
void OAIProductEntity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProductEntity::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProductEntity::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIProductEntity::getVendor() const {
    return m_vendor;
}
void OAIProductEntity::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIProductEntity::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIProductEntity::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIProductEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_in_demand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_in_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reorder_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
