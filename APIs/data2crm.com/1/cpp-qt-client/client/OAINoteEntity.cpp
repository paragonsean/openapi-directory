/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINoteEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINoteEntity::OAINoteEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINoteEntity::OAINoteEntity() {
    this->initializeModel();
}

OAINoteEntity::~OAINoteEntity() {}

void OAINoteEntity::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAINoteEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINoteEntity::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAINoteEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINoteEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAINoteEntity::getBody() const {
    return m_body;
}
void OAINoteEntity::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINoteEntity::is_body_Set() const{
    return m_body_isSet;
}

bool OAINoteEntity::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAINoteEntity::getCreatedAt() const {
    return m_created_at;
}
void OAINoteEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINoteEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINoteEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAINoteEntity::getId() const {
    return m_id;
}
void OAINoteEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINoteEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAINoteEntity::is_id_Valid() const{
    return m_id_isValid;
}

OAIRelation OAINoteEntity::getRelation() const {
    return m_relation;
}
void OAINoteEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAINoteEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAINoteEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAINoteEntity::getSubject() const {
    return m_subject;
}
void OAINoteEntity::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAINoteEntity::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAINoteEntity::is_subject_Valid() const{
    return m_subject_isValid;
}

QDateTime OAINoteEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAINoteEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINoteEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINoteEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAINoteEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINoteEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
