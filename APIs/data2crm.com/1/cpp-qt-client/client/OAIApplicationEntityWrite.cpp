/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationEntityWrite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationEntityWrite::OAIApplicationEntityWrite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationEntityWrite::OAIApplicationEntityWrite() {
    this->initializeModel();
}

OAIApplicationEntityWrite::~OAIApplicationEntityWrite() {}

void OAIApplicationEntityWrite::initializeModel() {

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_credential_isSet = false;
    m_credential_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIApplicationEntityWrite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationEntityWrite::fromJsonObject(QJsonObject json) {

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_credential_isValid = ::OpenAPI::fromJsonValue(m_credential, json[QString("credential")]);
    m_credential_isSet = !json[QString("credential")].isNull() && m_credential_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIApplicationEntityWrite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationEntityWrite::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_isSet) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_credential_isSet) {
        obj.insert(QString("credential"), ::OpenAPI::toJsonValue(m_credential));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIApplicationEntityWrite::getAuthorization() const {
    return m_authorization;
}
void OAIApplicationEntityWrite::setAuthorization(const QString &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIApplicationEntityWrite::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIApplicationEntityWrite::is_authorization_Valid() const{
    return m_authorization_isValid;
}

OAIObject OAIApplicationEntityWrite::getCredential() const {
    return m_credential;
}
void OAIApplicationEntityWrite::setCredential(const OAIObject &credential) {
    m_credential = credential;
    m_credential_isSet = true;
}

bool OAIApplicationEntityWrite::is_credential_Set() const{
    return m_credential_isSet;
}

bool OAIApplicationEntityWrite::is_credential_Valid() const{
    return m_credential_isValid;
}

QString OAIApplicationEntityWrite::getDescription() const {
    return m_description;
}
void OAIApplicationEntityWrite::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationEntityWrite::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationEntityWrite::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplicationEntityWrite::getType() const {
    return m_type;
}
void OAIApplicationEntityWrite::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApplicationEntityWrite::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApplicationEntityWrite::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIApplicationEntityWrite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationEntityWrite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
