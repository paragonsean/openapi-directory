/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuoteApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIQuoteApi::OAIQuoteApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIQuoteApi::~OAIQuoteApi() {
}

void OAIQuoteApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api-2445581398133.apicast.io:443/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createQuoteEntity", defaultConf);
    _serverIndices.insert("createQuoteEntity", 0);
    _serverConfigs.insert("createQuoteEntityBulk", defaultConf);
    _serverIndices.insert("createQuoteEntityBulk", 0);
    _serverConfigs.insert("deleteQuoteCollectionBulk", defaultConf);
    _serverIndices.insert("deleteQuoteCollectionBulk", 0);
    _serverConfigs.insert("deleteQuoteEntity", defaultConf);
    _serverIndices.insert("deleteQuoteEntity", 0);
    _serverConfigs.insert("getQuoteAggregate", defaultConf);
    _serverIndices.insert("getQuoteAggregate", 0);
    _serverConfigs.insert("getQuoteCollection", defaultConf);
    _serverIndices.insert("getQuoteCollection", 0);
    _serverConfigs.insert("getQuoteCountCollection", defaultConf);
    _serverIndices.insert("getQuoteCountCollection", 0);
    _serverConfigs.insert("getQuoteDescribe", defaultConf);
    _serverIndices.insert("getQuoteDescribe", 0);
    _serverConfigs.insert("getQuoteEntity", defaultConf);
    _serverIndices.insert("getQuoteEntity", 0);
    _serverConfigs.insert("updateQuoteEntity", defaultConf);
    _serverIndices.insert("updateQuoteEntity", 0);
    _serverConfigs.insert("updateQuoteEntityBulk", defaultConf);
    _serverIndices.insert("updateQuoteEntityBulk", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIQuoteApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIQuoteApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIQuoteApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIQuoteApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIQuoteApi::setUsername(const QString &username) {
    _username = username;
}

void OAIQuoteApi::setPassword(const QString &password) {
    _password = password;
}


void OAIQuoteApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIQuoteApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIQuoteApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIQuoteApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIQuoteApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIQuoteApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIQuoteApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIQuoteApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIQuoteApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIQuoteApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIQuoteApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIQuoteApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIQuoteApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIQuoteApi::createQuoteEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIQuoteEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createQuoteEntity"][_serverIndices.value("createQuoteEntity")].URL()+"/application/entity/quote");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::createQuoteEntityCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::createQuoteEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQuoteEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createQuoteEntitySignal(output);
        Q_EMIT createQuoteEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createQuoteEntitySignalE(output, error_type, error_str);
        Q_EMIT createQuoteEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createQuoteEntitySignalError(output, error_type, error_str);
        Q_EMIT createQuoteEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::createQuoteEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["createQuoteEntityBulk"][_serverIndices.value("createQuoteEntityBulk")].URL()+"/application/entity/quote/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::createQuoteEntityBulkCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::createQuoteEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createQuoteEntityBulkSignal(output);
        Q_EMIT createQuoteEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createQuoteEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT createQuoteEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createQuoteEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT createQuoteEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::deleteQuoteCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body) {
    QString fullPath = QString(_serverConfigs["deleteQuoteCollectionBulk"][_serverIndices.value("deleteQuoteCollectionBulk")].URL()+"/application/entity/quote/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::deleteQuoteCollectionBulkCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::deleteQuoteCollectionBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteQuoteCollectionBulkSignal(output);
        Q_EMIT deleteQuoteCollectionBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteQuoteCollectionBulkSignalE(output, error_type, error_str);
        Q_EMIT deleteQuoteCollectionBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteQuoteCollectionBulkSignalError(output, error_type, error_str);
        Q_EMIT deleteQuoteCollectionBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::deleteQuoteEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &quote_id) {
    QString fullPath = QString(_serverConfigs["deleteQuoteEntity"][_serverIndices.value("deleteQuoteEntity")].URL()+"/application/entity/quote/{quote_id}");
    
    
    {
        QString quote_idPathParam("{");
        quote_idPathParam.append("quote_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "quote_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"quote_id"+pathSuffix : pathPrefix;
        fullPath.replace(quote_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(quote_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::deleteQuoteEntityCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::deleteQuoteEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteQuoteEntitySignal();
        Q_EMIT deleteQuoteEntitySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteQuoteEntitySignalE(error_type, error_str);
        Q_EMIT deleteQuoteEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteQuoteEntitySignalError(error_type, error_str);
        Q_EMIT deleteQuoteEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::getQuoteAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &pipeline) {
    QString fullPath = QString(_serverConfigs["getQuoteAggregate"][_serverIndices.value("getQuoteAggregate")].URL()+"/application/entity/quote/aggregate");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (pipeline.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pipeline", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pipeline")).append(querySuffix).append(QUrl::toPercentEncoding(pipeline.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::getQuoteAggregateCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::getQuoteAggregateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAggregate output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getQuoteAggregateSignal(output);
        Q_EMIT getQuoteAggregateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getQuoteAggregateSignalE(output, error_type, error_str);
        Q_EMIT getQuoteAggregateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getQuoteAggregateSignalError(output, error_type, error_str);
        Q_EMIT getQuoteAggregateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::getQuoteCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &unique) {
    QString fullPath = QString(_serverConfigs["getQuoteCollection"][_serverIndices.value("getQuoteCollection")].URL()+"/application/entity/quote/list");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page_size", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page_size")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    if (unique.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "unique", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("unique")).append(querySuffix).append(QUrl::toPercentEncoding(unique.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::getQuoteCollectionCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::getQuoteCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIQuoteEntity> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIQuoteEntity val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getQuoteCollectionSignal(output);
        Q_EMIT getQuoteCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getQuoteCollectionSignalE(output, error_type, error_str);
        Q_EMIT getQuoteCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getQuoteCollectionSignalError(output, error_type, error_str);
        Q_EMIT getQuoteCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::getQuoteCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &filter) {
    QString fullPath = QString(_serverConfigs["getQuoteCountCollection"][_serverIndices.value("getQuoteCountCollection")].URL()+"/application/entity/quote/count");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::getQuoteCountCollectionCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::getQuoteCountCollectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICount output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getQuoteCountCollectionSignal(output);
        Q_EMIT getQuoteCountCollectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getQuoteCountCollectionSignalE(output, error_type, error_str);
        Q_EMIT getQuoteCountCollectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getQuoteCountCollectionSignalError(output, error_type, error_str);
        Q_EMIT getQuoteCountCollectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::getQuoteDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["getQuoteDescribe"][_serverIndices.value("getQuoteDescribe")].URL()+"/application/entity/quote/describe");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::getQuoteDescribeCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::getQuoteDescribeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQuoteDescribe output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getQuoteDescribeSignal(output);
        Q_EMIT getQuoteDescribeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getQuoteDescribeSignalE(output, error_type, error_str);
        Q_EMIT getQuoteDescribeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getQuoteDescribeSignalError(output, error_type, error_str);
        Q_EMIT getQuoteDescribeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::getQuoteEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &quote_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual, const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &fields) {
    QString fullPath = QString(_serverConfigs["getQuoteEntity"][_serverIndices.value("getQuoteEntity")].URL()+"/application/entity/quote/{quote_id}");
    
    
    {
        QString quote_idPathParam("{");
        quote_idPathParam.append("quote_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "quote_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"quote_id"+pathSuffix : pathPrefix;
        fullPath.replace(quote_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(quote_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_data_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_data_enable.value()));
        }
        }
    if (x_api2_crm_data_build.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_build.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-BUILD", ::OpenAPI::toStringValue(x_api2_crm_data_build.value()));
        }
        }
    if (x_api2_crm_data_is_final.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-IS-FINAL", ::OpenAPI::toStringValue(x_api2_crm_data_is_final.value()));
        }
        }
    if (x_api2_crm_data_strategy.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-STRATEGY", ::OpenAPI::toStringValue(x_api2_crm_data_strategy.value()));
        }
        }
    if (x_api2_crm_data_coherent_entities.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-COHERENT-ENTITIES", ::OpenAPI::toStringValue(x_api2_crm_data_coherent_entities.value()));
        }
        }
    if (x_api2_crm_data_always_actual.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ALWAYS-ACTUAL", ::OpenAPI::toStringValue(x_api2_crm_data_always_actual.value()));
        }
        }
    if (x_api2_crm_data_actual_at.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DATA-ACTUAL-AT", ::OpenAPI::toStringValue(x_api2_crm_data_actual_at.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::getQuoteEntityCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::getQuoteEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQuoteEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getQuoteEntitySignal(output);
        Q_EMIT getQuoteEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getQuoteEntitySignalE(output, error_type, error_str);
        Q_EMIT getQuoteEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getQuoteEntitySignalError(output, error_type, error_str);
        Q_EMIT getQuoteEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::updateQuoteEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &quote_id, const OAIQuoteEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateQuoteEntity"][_serverIndices.value("updateQuoteEntity")].URL()+"/application/entity/quote/{quote_id}");
    
    
    {
        QString quote_idPathParam("{");
        quote_idPathParam.append("quote_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "quote_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"quote_id"+pathSuffix : pathPrefix;
        fullPath.replace(quote_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(quote_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::updateQuoteEntityCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::updateQuoteEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQuoteEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateQuoteEntitySignal(output);
        Q_EMIT updateQuoteEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateQuoteEntitySignalE(output, error_type, error_str);
        Q_EMIT updateQuoteEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateQuoteEntitySignalError(output, error_type, error_str);
        Q_EMIT updateQuoteEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::updateQuoteEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime) {
    QString fullPath = QString(_serverConfigs["updateQuoteEntityBulk"][_serverIndices.value("updateQuoteEntityBulk")].URL()+"/application/entity/quote/bulk");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_user_key).isEmpty()) {
            input.headers.insert("X-API2CRM-USER-KEY", ::OpenAPI::toStringValue(x_api2_crm_user_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_application_key).isEmpty()) {
            input.headers.insert("X-API2CRM-APPLICATION-KEY", ::OpenAPI::toStringValue(x_api2_crm_application_key));
        }
        }
    if (x_api2_crm_native_enable.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_native_enable.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-NATIVE-ENABLE", ::OpenAPI::toStringValue(x_api2_crm_native_enable.value()));
        }
        }
    if (x_api2_crm_describe_lifetime.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()).isEmpty()) {
            input.headers.insert("X-API2CRM-DESCRIBE-LIFETIME", ::OpenAPI::toStringValue(x_api2_crm_describe_lifetime.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIQuoteApi::updateQuoteEntityBulkCallback);
    connect(this, &OAIQuoteApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIQuoteApi::updateQuoteEntityBulkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBulkEntityRelation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateQuoteEntityBulkSignal(output);
        Q_EMIT updateQuoteEntityBulkSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateQuoteEntityBulkSignalE(output, error_type, error_str);
        Q_EMIT updateQuoteEntityBulkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateQuoteEntityBulkSignalError(output, error_type, error_str);
        Q_EMIT updateQuoteEntityBulkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIQuoteApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
