/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICasesEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICasesEntity::OAICasesEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICasesEntity::OAICasesEntity() {
    this->initializeModel();
}

OAICasesEntity::~OAICasesEntity() {}

void OAICasesEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_expected_end_at_isSet = false;
    m_expected_end_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_internal_comments_isSet = false;
    m_internal_comments_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_is_escalated_isSet = false;
    m_is_escalated_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_pipeline_with_stage_isSet = false;
    m_pipeline_with_stage_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_resolution_comments_isSet = false;
    m_resolution_comments_isValid = false;

    m_satisfaction_isSet = false;
    m_satisfaction_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICasesEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICasesEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_expected_end_at_isValid = ::OpenAPI::fromJsonValue(m_expected_end_at, json[QString("expected_end_at")]);
    m_expected_end_at_isSet = !json[QString("expected_end_at")].isNull() && m_expected_end_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_internal_comments_isValid = ::OpenAPI::fromJsonValue(m_internal_comments, json[QString("internal_comments")]);
    m_internal_comments_isSet = !json[QString("internal_comments")].isNull() && m_internal_comments_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("is_closed")]);
    m_is_closed_isSet = !json[QString("is_closed")].isNull() && m_is_closed_isValid;

    m_is_escalated_isValid = ::OpenAPI::fromJsonValue(m_is_escalated, json[QString("is_escalated")]);
    m_is_escalated_isSet = !json[QString("is_escalated")].isNull() && m_is_escalated_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_pipeline_with_stage_isValid = ::OpenAPI::fromJsonValue(m_pipeline_with_stage, json[QString("pipeline_with_stage")]);
    m_pipeline_with_stage_isSet = !json[QString("pipeline_with_stage")].isNull() && m_pipeline_with_stage_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_resolution_comments_isValid = ::OpenAPI::fromJsonValue(m_resolution_comments, json[QString("resolution_comments")]);
    m_resolution_comments_isSet = !json[QString("resolution_comments")].isNull() && m_resolution_comments_isValid;

    m_satisfaction_isValid = ::OpenAPI::fromJsonValue(m_satisfaction, json[QString("satisfaction")]);
    m_satisfaction_isSet = !json[QString("satisfaction")].isNull() && m_satisfaction_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAICasesEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICasesEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_expected_end_at_isSet) {
        obj.insert(QString("expected_end_at"), ::OpenAPI::toJsonValue(m_expected_end_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_internal_comments_isSet) {
        obj.insert(QString("internal_comments"), ::OpenAPI::toJsonValue(m_internal_comments));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("is_closed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_is_escalated_isSet) {
        obj.insert(QString("is_escalated"), ::OpenAPI::toJsonValue(m_is_escalated));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_pipeline_with_stage_isSet) {
        obj.insert(QString("pipeline_with_stage"), ::OpenAPI::toJsonValue(m_pipeline_with_stage));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_resolution_comments_isSet) {
        obj.insert(QString("resolution_comments"), ::OpenAPI::toJsonValue(m_resolution_comments));
    }
    if (m_satisfaction_isSet) {
        obj.insert(QString("satisfaction"), ::OpenAPI::toJsonValue(m_satisfaction));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAICasesEntity::getCreatedAt() const {
    return m_created_at;
}
void OAICasesEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICasesEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICasesEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICasesEntity::getDescription() const {
    return m_description;
}
void OAICasesEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICasesEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAICasesEntity::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAICasesEntity::getEndedAt() const {
    return m_ended_at;
}
void OAICasesEntity::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAICasesEntity::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAICasesEntity::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QDateTime OAICasesEntity::getExpectedEndAt() const {
    return m_expected_end_at;
}
void OAICasesEntity::setExpectedEndAt(const QDateTime &expected_end_at) {
    m_expected_end_at = expected_end_at;
    m_expected_end_at_isSet = true;
}

bool OAICasesEntity::is_expected_end_at_Set() const{
    return m_expected_end_at_isSet;
}

bool OAICasesEntity::is_expected_end_at_Valid() const{
    return m_expected_end_at_isValid;
}

QString OAICasesEntity::getId() const {
    return m_id;
}
void OAICasesEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICasesEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAICasesEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICasesEntity::getInternalComments() const {
    return m_internal_comments;
}
void OAICasesEntity::setInternalComments(const QString &internal_comments) {
    m_internal_comments = internal_comments;
    m_internal_comments_isSet = true;
}

bool OAICasesEntity::is_internal_comments_Set() const{
    return m_internal_comments_isSet;
}

bool OAICasesEntity::is_internal_comments_Valid() const{
    return m_internal_comments_isValid;
}

bool OAICasesEntity::isIsClosed() const {
    return m_is_closed;
}
void OAICasesEntity::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAICasesEntity::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAICasesEntity::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

bool OAICasesEntity::isIsEscalated() const {
    return m_is_escalated;
}
void OAICasesEntity::setIsEscalated(const bool &is_escalated) {
    m_is_escalated = is_escalated;
    m_is_escalated_isSet = true;
}

bool OAICasesEntity::is_is_escalated_Set() const{
    return m_is_escalated_isSet;
}

bool OAICasesEntity::is_is_escalated_Valid() const{
    return m_is_escalated_isValid;
}

QString OAICasesEntity::getNumber() const {
    return m_number;
}
void OAICasesEntity::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICasesEntity::is_number_Set() const{
    return m_number_isSet;
}

bool OAICasesEntity::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICasesEntity::getOrigin() const {
    return m_origin;
}
void OAICasesEntity::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAICasesEntity::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAICasesEntity::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAICasesEntity::getPipelineWithStage() const {
    return m_pipeline_with_stage;
}
void OAICasesEntity::setPipelineWithStage(const QString &pipeline_with_stage) {
    m_pipeline_with_stage = pipeline_with_stage;
    m_pipeline_with_stage_isSet = true;
}

bool OAICasesEntity::is_pipeline_with_stage_Set() const{
    return m_pipeline_with_stage_isSet;
}

bool OAICasesEntity::is_pipeline_with_stage_Valid() const{
    return m_pipeline_with_stage_isValid;
}

QString OAICasesEntity::getPriority() const {
    return m_priority;
}
void OAICasesEntity::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICasesEntity::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICasesEntity::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAICasesEntity::getReason() const {
    return m_reason;
}
void OAICasesEntity::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAICasesEntity::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAICasesEntity::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIRelation OAICasesEntity::getRelation() const {
    return m_relation;
}
void OAICasesEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAICasesEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAICasesEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAICasesEntity::getResolution() const {
    return m_resolution;
}
void OAICasesEntity::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAICasesEntity::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAICasesEntity::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAICasesEntity::getResolutionComments() const {
    return m_resolution_comments;
}
void OAICasesEntity::setResolutionComments(const QString &resolution_comments) {
    m_resolution_comments = resolution_comments;
    m_resolution_comments_isSet = true;
}

bool OAICasesEntity::is_resolution_comments_Set() const{
    return m_resolution_comments_isSet;
}

bool OAICasesEntity::is_resolution_comments_Valid() const{
    return m_resolution_comments_isValid;
}

QString OAICasesEntity::getSatisfaction() const {
    return m_satisfaction;
}
void OAICasesEntity::setSatisfaction(const QString &satisfaction) {
    m_satisfaction = satisfaction;
    m_satisfaction_isSet = true;
}

bool OAICasesEntity::is_satisfaction_Set() const{
    return m_satisfaction_isSet;
}

bool OAICasesEntity::is_satisfaction_Valid() const{
    return m_satisfaction_isValid;
}

QString OAICasesEntity::getStatus() const {
    return m_status;
}
void OAICasesEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICasesEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAICasesEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICasesEntity::getSubject() const {
    return m_subject;
}
void OAICasesEntity::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICasesEntity::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICasesEntity::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAICasesEntity::getType() const {
    return m_type;
}
void OAICasesEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICasesEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAICasesEntity::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAICasesEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAICasesEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICasesEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICasesEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICasesEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_escalated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_with_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICasesEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
