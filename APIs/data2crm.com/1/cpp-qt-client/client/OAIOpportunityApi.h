/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOpportunityApi_H
#define OAI_OAIOpportunityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregate.h"
#include "OAIBulkEntity.h"
#include "OAIBulkEntityRelation.h"
#include "OAICount.h"
#include "OAIOpportunityDescribe.h"
#include "OAIOpportunityEntity.h"
#include "OAIOpportunityEntityRelation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOpportunityApi : public QObject {
    Q_OBJECT

public:
    OAIOpportunityApi(const int timeOut = 0);
    ~OAIOpportunityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIOpportunityEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createOpportunityEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIOpportunityEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createOpportunityEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    */
    virtual void deleteOpportunityCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  opportunity_id QString [required]
    */
    virtual void deleteOpportunityEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &opportunity_id);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  pipeline QString [optional]
    */
    virtual void getOpportunityAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pipeline = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  unique QString [optional]
    */
    virtual void getOpportunityCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void getOpportunityCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void getOpportunityDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  opportunity_id QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getOpportunityEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &opportunity_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  opportunity_id QString [required]
    * @param[in]  body OAIOpportunityEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateOpportunityEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &opportunity_id, const OAIOpportunityEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateOpportunityEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOpportunityEntityCallback(OAIHttpRequestWorker *worker);
    void createOpportunityEntityBulkCallback(OAIHttpRequestWorker *worker);
    void deleteOpportunityCollectionBulkCallback(OAIHttpRequestWorker *worker);
    void deleteOpportunityEntityCallback(OAIHttpRequestWorker *worker);
    void getOpportunityAggregateCallback(OAIHttpRequestWorker *worker);
    void getOpportunityCollectionCallback(OAIHttpRequestWorker *worker);
    void getOpportunityCountCollectionCallback(OAIHttpRequestWorker *worker);
    void getOpportunityDescribeCallback(OAIHttpRequestWorker *worker);
    void getOpportunityEntityCallback(OAIHttpRequestWorker *worker);
    void updateOpportunityEntityCallback(OAIHttpRequestWorker *worker);
    void updateOpportunityEntityBulkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOpportunityEntitySignal(OAIOpportunityEntityRelation summary);
    void createOpportunityEntityBulkSignal(OAIBulkEntityRelation summary);
    void deleteOpportunityCollectionBulkSignal(OAIBulkEntity summary);
    void deleteOpportunityEntitySignal();
    void getOpportunityAggregateSignal(OAIAggregate summary);
    void getOpportunityCollectionSignal(QList<OAIOpportunityEntity> summary);
    void getOpportunityCountCollectionSignal(OAICount summary);
    void getOpportunityDescribeSignal(OAIOpportunityDescribe summary);
    void getOpportunityEntitySignal(OAIOpportunityEntity summary);
    void updateOpportunityEntitySignal(OAIOpportunityEntityRelation summary);
    void updateOpportunityEntityBulkSignal(OAIBulkEntityRelation summary);


    void createOpportunityEntitySignalFull(OAIHttpRequestWorker *worker, OAIOpportunityEntityRelation summary);
    void createOpportunityEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);
    void deleteOpportunityCollectionBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntity summary);
    void deleteOpportunityEntitySignalFull(OAIHttpRequestWorker *worker);
    void getOpportunityAggregateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void getOpportunityCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIOpportunityEntity> summary);
    void getOpportunityCountCollectionSignalFull(OAIHttpRequestWorker *worker, OAICount summary);
    void getOpportunityDescribeSignalFull(OAIHttpRequestWorker *worker, OAIOpportunityDescribe summary);
    void getOpportunityEntitySignalFull(OAIHttpRequestWorker *worker, OAIOpportunityEntity summary);
    void updateOpportunityEntitySignalFull(OAIHttpRequestWorker *worker, OAIOpportunityEntityRelation summary);
    void updateOpportunityEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);

    Q_DECL_DEPRECATED_X("Use createOpportunityEntitySignalError() instead")
    void createOpportunityEntitySignalE(OAIOpportunityEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOpportunityEntitySignalError(OAIOpportunityEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOpportunityEntityBulkSignalError() instead")
    void createOpportunityEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOpportunityEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOpportunityCollectionBulkSignalError() instead")
    void deleteOpportunityCollectionBulkSignalE(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOpportunityCollectionBulkSignalError(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOpportunityEntitySignalError() instead")
    void deleteOpportunityEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOpportunityEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityAggregateSignalError() instead")
    void getOpportunityAggregateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityAggregateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityCollectionSignalError() instead")
    void getOpportunityCollectionSignalE(QList<OAIOpportunityEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityCollectionSignalError(QList<OAIOpportunityEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityCountCollectionSignalError() instead")
    void getOpportunityCountCollectionSignalE(OAICount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityCountCollectionSignalError(OAICount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityDescribeSignalError() instead")
    void getOpportunityDescribeSignalE(OAIOpportunityDescribe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityDescribeSignalError(OAIOpportunityDescribe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityEntitySignalError() instead")
    void getOpportunityEntitySignalE(OAIOpportunityEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityEntitySignalError(OAIOpportunityEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOpportunityEntitySignalError() instead")
    void updateOpportunityEntitySignalE(OAIOpportunityEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOpportunityEntitySignalError(OAIOpportunityEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOpportunityEntityBulkSignalError() instead")
    void updateOpportunityEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOpportunityEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOpportunityEntitySignalErrorFull() instead")
    void createOpportunityEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOpportunityEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOpportunityEntityBulkSignalErrorFull() instead")
    void createOpportunityEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOpportunityEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOpportunityCollectionBulkSignalErrorFull() instead")
    void deleteOpportunityCollectionBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOpportunityCollectionBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOpportunityEntitySignalErrorFull() instead")
    void deleteOpportunityEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOpportunityEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityAggregateSignalErrorFull() instead")
    void getOpportunityAggregateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityAggregateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityCollectionSignalErrorFull() instead")
    void getOpportunityCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityCountCollectionSignalErrorFull() instead")
    void getOpportunityCountCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityCountCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityDescribeSignalErrorFull() instead")
    void getOpportunityDescribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityDescribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpportunityEntitySignalErrorFull() instead")
    void getOpportunityEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpportunityEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOpportunityEntitySignalErrorFull() instead")
    void updateOpportunityEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOpportunityEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOpportunityEntityBulkSignalErrorFull() instead")
    void updateOpportunityEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOpportunityEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
