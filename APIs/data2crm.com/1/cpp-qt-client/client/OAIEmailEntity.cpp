/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailEntity::OAIEmailEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailEntity::OAIEmailEntity() {
    this->initializeModel();
}

OAIEmailEntity::~OAIEmailEntity() {}

void OAIEmailEntity::initializeModel() {

    m_bcc_isSet = false;
    m_bcc_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_sent_at_isSet = false;
    m_sent_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIEmailEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailEntity::fromJsonObject(QJsonObject json) {

    m_bcc_isValid = ::OpenAPI::fromJsonValue(m_bcc, json[QString("bcc")]);
    m_bcc_isSet = !json[QString("bcc")].isNull() && m_bcc_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("cc")]);
    m_cc_isSet = !json[QString("cc")].isNull() && m_cc_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_sent_at_isValid = ::OpenAPI::fromJsonValue(m_sent_at, json[QString("sent_at")]);
    m_sent_at_isSet = !json[QString("sent_at")].isNull() && m_sent_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIEmailEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_bcc.size() > 0) {
        obj.insert(QString("bcc"), ::OpenAPI::toJsonValue(m_bcc));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_cc.size() > 0) {
        obj.insert(QString("cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_sent_at_isSet) {
        obj.insert(QString("sent_at"), ::OpenAPI::toJsonValue(m_sent_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<QString> OAIEmailEntity::getBcc() const {
    return m_bcc;
}
void OAIEmailEntity::setBcc(const QList<QString> &bcc) {
    m_bcc = bcc;
    m_bcc_isSet = true;
}

bool OAIEmailEntity::is_bcc_Set() const{
    return m_bcc_isSet;
}

bool OAIEmailEntity::is_bcc_Valid() const{
    return m_bcc_isValid;
}

QString OAIEmailEntity::getBody() const {
    return m_body;
}
void OAIEmailEntity::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIEmailEntity::is_body_Set() const{
    return m_body_isSet;
}

bool OAIEmailEntity::is_body_Valid() const{
    return m_body_isValid;
}

QList<QString> OAIEmailEntity::getCc() const {
    return m_cc;
}
void OAIEmailEntity::setCc(const QList<QString> &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAIEmailEntity::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAIEmailEntity::is_cc_Valid() const{
    return m_cc_isValid;
}

QDateTime OAIEmailEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIEmailEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEmailEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEmailEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEmailEntity::getDirection() const {
    return m_direction;
}
void OAIEmailEntity::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIEmailEntity::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIEmailEntity::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIEmailEntity::getFrom() const {
    return m_from;
}
void OAIEmailEntity::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIEmailEntity::is_from_Set() const{
    return m_from_isSet;
}

bool OAIEmailEntity::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIEmailEntity::getId() const {
    return m_id;
}
void OAIEmailEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEmailEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEmailEntity::is_id_Valid() const{
    return m_id_isValid;
}

OAIRelation OAIEmailEntity::getRelation() const {
    return m_relation;
}
void OAIEmailEntity::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIEmailEntity::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIEmailEntity::is_relation_Valid() const{
    return m_relation_isValid;
}

QDateTime OAIEmailEntity::getSentAt() const {
    return m_sent_at;
}
void OAIEmailEntity::setSentAt(const QDateTime &sent_at) {
    m_sent_at = sent_at;
    m_sent_at_isSet = true;
}

bool OAIEmailEntity::is_sent_at_Set() const{
    return m_sent_at_isSet;
}

bool OAIEmailEntity::is_sent_at_Valid() const{
    return m_sent_at_isValid;
}

QString OAIEmailEntity::getStatus() const {
    return m_status;
}
void OAIEmailEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEmailEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEmailEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEmailEntity::getSubject() const {
    return m_subject;
}
void OAIEmailEntity::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEmailEntity::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEmailEntity::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAIEmailEntity::getTo() const {
    return m_to;
}
void OAIEmailEntity::setTo(const QList<QString> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIEmailEntity::is_to_Set() const{
    return m_to_isSet;
}

bool OAIEmailEntity::is_to_Valid() const{
    return m_to_isValid;
}

QDateTime OAIEmailEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEmailEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEmailEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEmailEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIEmailEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bcc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
