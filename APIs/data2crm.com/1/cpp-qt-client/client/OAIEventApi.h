/**
 * Data2CRM.API
 * <p>Make use of our in-depth documentation to get more information about the various functions of the service. Those willing to explore the mechanics of Data2CRM.API can test it in live regime using the short code samples.</p><p>Select CRM: <span id=\"docs-select-crm\" style=\"font-weight: bold\">Loading... please wait</span></p><p>Here are the API access keys:<br><b>X-API2CRM-USER-KEY</b>: <span id=\"docs-user-key\">e2a6379ab878ae7e58119d4ec842bf9c</span><br><b>X-API2CRM-APPLICATION-KEY</b>: <span id=\"docs-crm-key\">7ae5b17008fb414d84981191cf3b66a476ef8bef</span></p><p id=\"docs-crm-access\">The CRM access details are:<br><b>URL</b>: <a id=\"docs-crm-url\" href=\"https://login.salesforce.com/\" target=\"_blank\">https://login.salesforce.com/</a><br><b>E-mail / Username</b>: <span id=\"docs-crm-username\">developers.data2crm.api+1@magneticone.com</span><br><b>Password</b>: <span id=\"docs-crm-password\">data2crmapi123</span></p>
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventApi_H
#define OAI_OAIEventApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregate.h"
#include "OAIBulkEntity.h"
#include "OAIBulkEntityRelation.h"
#include "OAICount.h"
#include "OAIEventDescribe.h"
#include "OAIEventEntity.h"
#include "OAIEventEntityRelation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventApi : public QObject {
    Q_OBJECT

public:
    OAIEventApi(const int timeOut = 0);
    ~OAIEventApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIEventEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createEventEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIEventEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void createEventEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    */
    virtual void deleteEventCollectionBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  event_id QString [required]
    */
    virtual void deleteEventEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &event_id);

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  pipeline QString [optional]
    */
    virtual void getEventAggregate(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pipeline = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  unique QString [optional]
    */
    virtual void getEventCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void getEventCountCollection(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void getEventDescribe(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_data_enable QString [optional]
    * @param[in]  x_api2_crm_data_build QString [optional]
    * @param[in]  x_api2_crm_data_is_final QString [optional]
    * @param[in]  x_api2_crm_data_strategy QString [optional]
    * @param[in]  x_api2_crm_data_coherent_entities QString [optional]
    * @param[in]  x_api2_crm_data_always_actual QString [optional]
    * @param[in]  x_api2_crm_data_actual_at QDateTime [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getEventEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &event_id, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_is_final = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_coherent_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_data_always_actual = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &x_api2_crm_data_actual_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  body OAIEventEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateEventEntity(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const QString &event_id, const OAIEventEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api2_crm_user_key QString [required]
    * @param[in]  x_api2_crm_application_key QString [required]
    * @param[in]  body OAIBulkEntity [required]
    * @param[in]  x_api2_crm_native_enable QString [optional]
    * @param[in]  x_api2_crm_describe_lifetime QString [optional]
    */
    virtual void updateEventEntityBulk(const QString &x_api2_crm_user_key, const QString &x_api2_crm_application_key, const OAIBulkEntity &body, const ::OpenAPI::OptionalParam<QString> &x_api2_crm_native_enable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api2_crm_describe_lifetime = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEventEntityCallback(OAIHttpRequestWorker *worker);
    void createEventEntityBulkCallback(OAIHttpRequestWorker *worker);
    void deleteEventCollectionBulkCallback(OAIHttpRequestWorker *worker);
    void deleteEventEntityCallback(OAIHttpRequestWorker *worker);
    void getEventAggregateCallback(OAIHttpRequestWorker *worker);
    void getEventCollectionCallback(OAIHttpRequestWorker *worker);
    void getEventCountCollectionCallback(OAIHttpRequestWorker *worker);
    void getEventDescribeCallback(OAIHttpRequestWorker *worker);
    void getEventEntityCallback(OAIHttpRequestWorker *worker);
    void updateEventEntityCallback(OAIHttpRequestWorker *worker);
    void updateEventEntityBulkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEventEntitySignal(OAIEventEntityRelation summary);
    void createEventEntityBulkSignal(OAIBulkEntityRelation summary);
    void deleteEventCollectionBulkSignal(OAIBulkEntity summary);
    void deleteEventEntitySignal();
    void getEventAggregateSignal(OAIAggregate summary);
    void getEventCollectionSignal(QList<OAIEventEntity> summary);
    void getEventCountCollectionSignal(OAICount summary);
    void getEventDescribeSignal(OAIEventDescribe summary);
    void getEventEntitySignal(OAIEventEntity summary);
    void updateEventEntitySignal(OAIEventEntityRelation summary);
    void updateEventEntityBulkSignal(OAIBulkEntityRelation summary);


    void createEventEntitySignalFull(OAIHttpRequestWorker *worker, OAIEventEntityRelation summary);
    void createEventEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);
    void deleteEventCollectionBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntity summary);
    void deleteEventEntitySignalFull(OAIHttpRequestWorker *worker);
    void getEventAggregateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void getEventCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIEventEntity> summary);
    void getEventCountCollectionSignalFull(OAIHttpRequestWorker *worker, OAICount summary);
    void getEventDescribeSignalFull(OAIHttpRequestWorker *worker, OAIEventDescribe summary);
    void getEventEntitySignalFull(OAIHttpRequestWorker *worker, OAIEventEntity summary);
    void updateEventEntitySignalFull(OAIHttpRequestWorker *worker, OAIEventEntityRelation summary);
    void updateEventEntityBulkSignalFull(OAIHttpRequestWorker *worker, OAIBulkEntityRelation summary);

    Q_DECL_DEPRECATED_X("Use createEventEntitySignalError() instead")
    void createEventEntitySignalE(OAIEventEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEventEntitySignalError(OAIEventEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEventEntityBulkSignalError() instead")
    void createEventEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEventEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventCollectionBulkSignalError() instead")
    void deleteEventCollectionBulkSignalE(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventCollectionBulkSignalError(OAIBulkEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventEntitySignalError() instead")
    void deleteEventEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventAggregateSignalError() instead")
    void getEventAggregateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventAggregateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventCollectionSignalError() instead")
    void getEventCollectionSignalE(QList<OAIEventEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventCollectionSignalError(QList<OAIEventEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventCountCollectionSignalError() instead")
    void getEventCountCollectionSignalE(OAICount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventCountCollectionSignalError(OAICount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventDescribeSignalError() instead")
    void getEventDescribeSignalE(OAIEventDescribe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventDescribeSignalError(OAIEventDescribe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventEntitySignalError() instead")
    void getEventEntitySignalE(OAIEventEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventEntitySignalError(OAIEventEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEventEntitySignalError() instead")
    void updateEventEntitySignalE(OAIEventEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEventEntitySignalError(OAIEventEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEventEntityBulkSignalError() instead")
    void updateEventEntityBulkSignalE(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEventEntityBulkSignalError(OAIBulkEntityRelation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEventEntitySignalErrorFull() instead")
    void createEventEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEventEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEventEntityBulkSignalErrorFull() instead")
    void createEventEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEventEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventCollectionBulkSignalErrorFull() instead")
    void deleteEventCollectionBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventCollectionBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventEntitySignalErrorFull() instead")
    void deleteEventEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventAggregateSignalErrorFull() instead")
    void getEventAggregateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventAggregateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventCollectionSignalErrorFull() instead")
    void getEventCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventCountCollectionSignalErrorFull() instead")
    void getEventCountCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventCountCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventDescribeSignalErrorFull() instead")
    void getEventDescribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventDescribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventEntitySignalErrorFull() instead")
    void getEventEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEventEntitySignalErrorFull() instead")
    void updateEventEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEventEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEventEntityBulkSignalErrorFull() instead")
    void updateEventEntityBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEventEntityBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
