# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.email import Email
from openapi_server.models.messenger import Messenger
from openapi_server.models.phone import Phone
from openapi_server.models.relation import Relation
from openapi_server.models.website import Website
from openapi_server import util


class AccountEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: List[Address]=None, annual_revenue: str=None, category: str=None, created_at: datetime=None, description: str=None, email: List[Email]=None, employees: str=None, id: str=None, industry: List[str]=None, messenger: List[Messenger]=None, name: str=None, ownership: str=None, phone: List[Phone]=None, rating: str=None, relation: Relation=None, sic_code: str=None, ticker_symbol: str=None, type: str=None, updated_at: datetime=None, website: List[Website]=None):
        """AccountEntity - a model defined in OpenAPI

        :param address: The address of this AccountEntity.
        :param annual_revenue: The annual_revenue of this AccountEntity.
        :param category: The category of this AccountEntity.
        :param created_at: The created_at of this AccountEntity.
        :param description: The description of this AccountEntity.
        :param email: The email of this AccountEntity.
        :param employees: The employees of this AccountEntity.
        :param id: The id of this AccountEntity.
        :param industry: The industry of this AccountEntity.
        :param messenger: The messenger of this AccountEntity.
        :param name: The name of this AccountEntity.
        :param ownership: The ownership of this AccountEntity.
        :param phone: The phone of this AccountEntity.
        :param rating: The rating of this AccountEntity.
        :param relation: The relation of this AccountEntity.
        :param sic_code: The sic_code of this AccountEntity.
        :param ticker_symbol: The ticker_symbol of this AccountEntity.
        :param type: The type of this AccountEntity.
        :param updated_at: The updated_at of this AccountEntity.
        :param website: The website of this AccountEntity.
        """
        self.openapi_types = {
            'address': List[Address],
            'annual_revenue': str,
            'category': str,
            'created_at': datetime,
            'description': str,
            'email': List[Email],
            'employees': str,
            'id': str,
            'industry': List[str],
            'messenger': List[Messenger],
            'name': str,
            'ownership': str,
            'phone': List[Phone],
            'rating': str,
            'relation': Relation,
            'sic_code': str,
            'ticker_symbol': str,
            'type': str,
            'updated_at': datetime,
            'website': List[Website]
        }

        self.attribute_map = {
            'address': 'address',
            'annual_revenue': 'annual_revenue',
            'category': 'category',
            'created_at': 'created_at',
            'description': 'description',
            'email': 'email',
            'employees': 'employees',
            'id': 'id',
            'industry': 'industry',
            'messenger': 'messenger',
            'name': 'name',
            'ownership': 'ownership',
            'phone': 'phone',
            'rating': 'rating',
            'relation': 'relation',
            'sic_code': 'sic_code',
            'ticker_symbol': 'ticker_symbol',
            'type': 'type',
            'updated_at': 'updated_at',
            'website': 'website'
        }

        self._address = address
        self._annual_revenue = annual_revenue
        self._category = category
        self._created_at = created_at
        self._description = description
        self._email = email
        self._employees = employees
        self._id = id
        self._industry = industry
        self._messenger = messenger
        self._name = name
        self._ownership = ownership
        self._phone = phone
        self._rating = rating
        self._relation = relation
        self._sic_code = sic_code
        self._ticker_symbol = ticker_symbol
        self._type = type
        self._updated_at = updated_at
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountEntity of this AccountEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this AccountEntity.

        Address

        :return: The address of this AccountEntity.
        :rtype: List[Address]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountEntity.

        Address

        :param address: The address of this AccountEntity.
        :type address: List[Address]
        """

        self._address = address

    @property
    def annual_revenue(self):
        """Gets the annual_revenue of this AccountEntity.

        Annual Revenue

        :return: The annual_revenue of this AccountEntity.
        :rtype: str
        """
        return self._annual_revenue

    @annual_revenue.setter
    def annual_revenue(self, annual_revenue):
        """Sets the annual_revenue of this AccountEntity.

        Annual Revenue

        :param annual_revenue: The annual_revenue of this AccountEntity.
        :type annual_revenue: str
        """

        self._annual_revenue = annual_revenue

    @property
    def category(self):
        """Gets the category of this AccountEntity.

        Category

        :return: The category of this AccountEntity.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AccountEntity.

        Category

        :param category: The category of this AccountEntity.
        :type category: str
        """

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this AccountEntity.

        Created At

        :return: The created_at of this AccountEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountEntity.

        Created At

        :param created_at: The created_at of this AccountEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this AccountEntity.

        Description

        :return: The description of this AccountEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountEntity.

        Description

        :param description: The description of this AccountEntity.
        :type description: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this AccountEntity.

        Email

        :return: The email of this AccountEntity.
        :rtype: List[Email]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountEntity.

        Email

        :param email: The email of this AccountEntity.
        :type email: List[Email]
        """

        self._email = email

    @property
    def employees(self):
        """Gets the employees of this AccountEntity.

        Employees

        :return: The employees of this AccountEntity.
        :rtype: str
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this AccountEntity.

        Employees

        :param employees: The employees of this AccountEntity.
        :type employees: str
        """

        self._employees = employees

    @property
    def id(self):
        """Gets the id of this AccountEntity.

        Account Identifier

        :return: The id of this AccountEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountEntity.

        Account Identifier

        :param id: The id of this AccountEntity.
        :type id: str
        """

        self._id = id

    @property
    def industry(self):
        """Gets the industry of this AccountEntity.

        Industry

        :return: The industry of this AccountEntity.
        :rtype: List[str]
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this AccountEntity.

        Industry

        :param industry: The industry of this AccountEntity.
        :type industry: List[str]
        """

        self._industry = industry

    @property
    def messenger(self):
        """Gets the messenger of this AccountEntity.

        Messenger

        :return: The messenger of this AccountEntity.
        :rtype: List[Messenger]
        """
        return self._messenger

    @messenger.setter
    def messenger(self, messenger):
        """Sets the messenger of this AccountEntity.

        Messenger

        :param messenger: The messenger of this AccountEntity.
        :type messenger: List[Messenger]
        """

        self._messenger = messenger

    @property
    def name(self):
        """Gets the name of this AccountEntity.

        Name

        :return: The name of this AccountEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountEntity.

        Name

        :param name: The name of this AccountEntity.
        :type name: str
        """

        self._name = name

    @property
    def ownership(self):
        """Gets the ownership of this AccountEntity.

        Ownership

        :return: The ownership of this AccountEntity.
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this AccountEntity.

        Ownership

        :param ownership: The ownership of this AccountEntity.
        :type ownership: str
        """

        self._ownership = ownership

    @property
    def phone(self):
        """Gets the phone of this AccountEntity.

        Phone

        :return: The phone of this AccountEntity.
        :rtype: List[Phone]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AccountEntity.

        Phone

        :param phone: The phone of this AccountEntity.
        :type phone: List[Phone]
        """

        self._phone = phone

    @property
    def rating(self):
        """Gets the rating of this AccountEntity.

        Rating

        :return: The rating of this AccountEntity.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this AccountEntity.

        Rating

        :param rating: The rating of this AccountEntity.
        :type rating: str
        """

        self._rating = rating

    @property
    def relation(self):
        """Gets the relation of this AccountEntity.


        :return: The relation of this AccountEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this AccountEntity.


        :param relation: The relation of this AccountEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def sic_code(self):
        """Gets the sic_code of this AccountEntity.

        SIC Code

        :return: The sic_code of this AccountEntity.
        :rtype: str
        """
        return self._sic_code

    @sic_code.setter
    def sic_code(self, sic_code):
        """Sets the sic_code of this AccountEntity.

        SIC Code

        :param sic_code: The sic_code of this AccountEntity.
        :type sic_code: str
        """

        self._sic_code = sic_code

    @property
    def ticker_symbol(self):
        """Gets the ticker_symbol of this AccountEntity.

        Ticker Symbol

        :return: The ticker_symbol of this AccountEntity.
        :rtype: str
        """
        return self._ticker_symbol

    @ticker_symbol.setter
    def ticker_symbol(self, ticker_symbol):
        """Sets the ticker_symbol of this AccountEntity.

        Ticker Symbol

        :param ticker_symbol: The ticker_symbol of this AccountEntity.
        :type ticker_symbol: str
        """

        self._ticker_symbol = ticker_symbol

    @property
    def type(self):
        """Gets the type of this AccountEntity.

        Type

        :return: The type of this AccountEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountEntity.

        Type

        :param type: The type of this AccountEntity.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this AccountEntity.

        Updated At

        :return: The updated_at of this AccountEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AccountEntity.

        Updated At

        :param updated_at: The updated_at of this AccountEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def website(self):
        """Gets the website of this AccountEntity.

        Website

        :return: The website of this AccountEntity.
        :rtype: List[Website]
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this AccountEntity.

        Website

        :param website: The website of this AccountEntity.
        :type website: List[Website]
        """

        self._website = website
