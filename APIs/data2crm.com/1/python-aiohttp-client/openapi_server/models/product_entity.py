# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost import Cost
from openapi_server.models.image import Image
from openapi_server.models.price import Price
from openapi_server.models.relation import Relation
from openapi_server import util


class ProductEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: List[str]=None, code: str=None, cost: List[Cost]=None, created_at: datetime=None, description: str=None, id: str=None, image: List[Image]=None, is_active: bool=None, is_taxable: bool=None, manufacturer: str=None, name: str=None, price: List[Price]=None, quantity_in_demand: float=None, quantity_in_stock: float=None, relation: Relation=None, reorder_level: float=None, sales_ended_at: datetime=None, sales_started_at: datetime=None, support_ended_at: datetime=None, support_started_at: datetime=None, type: str=None, unit: str=None, updated_at: datetime=None, url: str=None, vendor: str=None):
        """ProductEntity - a model defined in OpenAPI

        :param category: The category of this ProductEntity.
        :param code: The code of this ProductEntity.
        :param cost: The cost of this ProductEntity.
        :param created_at: The created_at of this ProductEntity.
        :param description: The description of this ProductEntity.
        :param id: The id of this ProductEntity.
        :param image: The image of this ProductEntity.
        :param is_active: The is_active of this ProductEntity.
        :param is_taxable: The is_taxable of this ProductEntity.
        :param manufacturer: The manufacturer of this ProductEntity.
        :param name: The name of this ProductEntity.
        :param price: The price of this ProductEntity.
        :param quantity_in_demand: The quantity_in_demand of this ProductEntity.
        :param quantity_in_stock: The quantity_in_stock of this ProductEntity.
        :param relation: The relation of this ProductEntity.
        :param reorder_level: The reorder_level of this ProductEntity.
        :param sales_ended_at: The sales_ended_at of this ProductEntity.
        :param sales_started_at: The sales_started_at of this ProductEntity.
        :param support_ended_at: The support_ended_at of this ProductEntity.
        :param support_started_at: The support_started_at of this ProductEntity.
        :param type: The type of this ProductEntity.
        :param unit: The unit of this ProductEntity.
        :param updated_at: The updated_at of this ProductEntity.
        :param url: The url of this ProductEntity.
        :param vendor: The vendor of this ProductEntity.
        """
        self.openapi_types = {
            'category': List[str],
            'code': str,
            'cost': List[Cost],
            'created_at': datetime,
            'description': str,
            'id': str,
            'image': List[Image],
            'is_active': bool,
            'is_taxable': bool,
            'manufacturer': str,
            'name': str,
            'price': List[Price],
            'quantity_in_demand': float,
            'quantity_in_stock': float,
            'relation': Relation,
            'reorder_level': float,
            'sales_ended_at': datetime,
            'sales_started_at': datetime,
            'support_ended_at': datetime,
            'support_started_at': datetime,
            'type': str,
            'unit': str,
            'updated_at': datetime,
            'url': str,
            'vendor': str
        }

        self.attribute_map = {
            'category': 'category',
            'code': 'code',
            'cost': 'cost',
            'created_at': 'created_at',
            'description': 'description',
            'id': 'id',
            'image': 'image',
            'is_active': 'is_active',
            'is_taxable': 'is_taxable',
            'manufacturer': 'manufacturer',
            'name': 'name',
            'price': 'price',
            'quantity_in_demand': 'quantity_in_demand',
            'quantity_in_stock': 'quantity_in_stock',
            'relation': 'relation',
            'reorder_level': 'reorder_level',
            'sales_ended_at': 'sales_ended_at',
            'sales_started_at': 'sales_started_at',
            'support_ended_at': 'support_ended_at',
            'support_started_at': 'support_started_at',
            'type': 'type',
            'unit': 'unit',
            'updated_at': 'updated_at',
            'url': 'url',
            'vendor': 'vendor'
        }

        self._category = category
        self._code = code
        self._cost = cost
        self._created_at = created_at
        self._description = description
        self._id = id
        self._image = image
        self._is_active = is_active
        self._is_taxable = is_taxable
        self._manufacturer = manufacturer
        self._name = name
        self._price = price
        self._quantity_in_demand = quantity_in_demand
        self._quantity_in_stock = quantity_in_stock
        self._relation = relation
        self._reorder_level = reorder_level
        self._sales_ended_at = sales_ended_at
        self._sales_started_at = sales_started_at
        self._support_ended_at = support_ended_at
        self._support_started_at = support_started_at
        self._type = type
        self._unit = unit
        self._updated_at = updated_at
        self._url = url
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductEntity of this ProductEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ProductEntity.

        Category

        :return: The category of this ProductEntity.
        :rtype: List[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ProductEntity.

        Category

        :param category: The category of this ProductEntity.
        :type category: List[str]
        """

        self._category = category

    @property
    def code(self):
        """Gets the code of this ProductEntity.

        Code

        :return: The code of this ProductEntity.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProductEntity.

        Code

        :param code: The code of this ProductEntity.
        :type code: str
        """

        self._code = code

    @property
    def cost(self):
        """Gets the cost of this ProductEntity.

        Cost

        :return: The cost of this ProductEntity.
        :rtype: List[Cost]
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ProductEntity.

        Cost

        :param cost: The cost of this ProductEntity.
        :type cost: List[Cost]
        """

        self._cost = cost

    @property
    def created_at(self):
        """Gets the created_at of this ProductEntity.

        Created At

        :return: The created_at of this ProductEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProductEntity.

        Created At

        :param created_at: The created_at of this ProductEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ProductEntity.

        Description

        :return: The description of this ProductEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductEntity.

        Description

        :param description: The description of this ProductEntity.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ProductEntity.

        Product Identifier

        :return: The id of this ProductEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductEntity.

        Product Identifier

        :param id: The id of this ProductEntity.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ProductEntity.

        Image

        :return: The image of this ProductEntity.
        :rtype: List[Image]
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ProductEntity.

        Image

        :param image: The image of this ProductEntity.
        :type image: List[Image]
        """

        self._image = image

    @property
    def is_active(self):
        """Gets the is_active of this ProductEntity.

        Is active

        :return: The is_active of this ProductEntity.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProductEntity.

        Is active

        :param is_active: The is_active of this ProductEntity.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_taxable(self):
        """Gets the is_taxable of this ProductEntity.

        Is taxable

        :return: The is_taxable of this ProductEntity.
        :rtype: bool
        """
        return self._is_taxable

    @is_taxable.setter
    def is_taxable(self, is_taxable):
        """Sets the is_taxable of this ProductEntity.

        Is taxable

        :param is_taxable: The is_taxable of this ProductEntity.
        :type is_taxable: bool
        """

        self._is_taxable = is_taxable

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductEntity.

        Manufacturer

        :return: The manufacturer of this ProductEntity.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductEntity.

        Manufacturer

        :param manufacturer: The manufacturer of this ProductEntity.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def name(self):
        """Gets the name of this ProductEntity.

        Name

        :return: The name of this ProductEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductEntity.

        Name

        :param name: The name of this ProductEntity.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this ProductEntity.

        Price

        :return: The price of this ProductEntity.
        :rtype: List[Price]
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductEntity.

        Price

        :param price: The price of this ProductEntity.
        :type price: List[Price]
        """

        self._price = price

    @property
    def quantity_in_demand(self):
        """Gets the quantity_in_demand of this ProductEntity.

        Quantity In Demand

        :return: The quantity_in_demand of this ProductEntity.
        :rtype: float
        """
        return self._quantity_in_demand

    @quantity_in_demand.setter
    def quantity_in_demand(self, quantity_in_demand):
        """Sets the quantity_in_demand of this ProductEntity.

        Quantity In Demand

        :param quantity_in_demand: The quantity_in_demand of this ProductEntity.
        :type quantity_in_demand: float
        """

        self._quantity_in_demand = quantity_in_demand

    @property
    def quantity_in_stock(self):
        """Gets the quantity_in_stock of this ProductEntity.

        Quantity In Stock

        :return: The quantity_in_stock of this ProductEntity.
        :rtype: float
        """
        return self._quantity_in_stock

    @quantity_in_stock.setter
    def quantity_in_stock(self, quantity_in_stock):
        """Sets the quantity_in_stock of this ProductEntity.

        Quantity In Stock

        :param quantity_in_stock: The quantity_in_stock of this ProductEntity.
        :type quantity_in_stock: float
        """

        self._quantity_in_stock = quantity_in_stock

    @property
    def relation(self):
        """Gets the relation of this ProductEntity.


        :return: The relation of this ProductEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this ProductEntity.


        :param relation: The relation of this ProductEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def reorder_level(self):
        """Gets the reorder_level of this ProductEntity.

        Reorder Level

        :return: The reorder_level of this ProductEntity.
        :rtype: float
        """
        return self._reorder_level

    @reorder_level.setter
    def reorder_level(self, reorder_level):
        """Sets the reorder_level of this ProductEntity.

        Reorder Level

        :param reorder_level: The reorder_level of this ProductEntity.
        :type reorder_level: float
        """

        self._reorder_level = reorder_level

    @property
    def sales_ended_at(self):
        """Gets the sales_ended_at of this ProductEntity.

        Sales Ended At

        :return: The sales_ended_at of this ProductEntity.
        :rtype: datetime
        """
        return self._sales_ended_at

    @sales_ended_at.setter
    def sales_ended_at(self, sales_ended_at):
        """Sets the sales_ended_at of this ProductEntity.

        Sales Ended At

        :param sales_ended_at: The sales_ended_at of this ProductEntity.
        :type sales_ended_at: datetime
        """

        self._sales_ended_at = sales_ended_at

    @property
    def sales_started_at(self):
        """Gets the sales_started_at of this ProductEntity.

        Sales Started At

        :return: The sales_started_at of this ProductEntity.
        :rtype: datetime
        """
        return self._sales_started_at

    @sales_started_at.setter
    def sales_started_at(self, sales_started_at):
        """Sets the sales_started_at of this ProductEntity.

        Sales Started At

        :param sales_started_at: The sales_started_at of this ProductEntity.
        :type sales_started_at: datetime
        """

        self._sales_started_at = sales_started_at

    @property
    def support_ended_at(self):
        """Gets the support_ended_at of this ProductEntity.

        Support Ended At

        :return: The support_ended_at of this ProductEntity.
        :rtype: datetime
        """
        return self._support_ended_at

    @support_ended_at.setter
    def support_ended_at(self, support_ended_at):
        """Sets the support_ended_at of this ProductEntity.

        Support Ended At

        :param support_ended_at: The support_ended_at of this ProductEntity.
        :type support_ended_at: datetime
        """

        self._support_ended_at = support_ended_at

    @property
    def support_started_at(self):
        """Gets the support_started_at of this ProductEntity.

        Support Started At

        :return: The support_started_at of this ProductEntity.
        :rtype: datetime
        """
        return self._support_started_at

    @support_started_at.setter
    def support_started_at(self, support_started_at):
        """Sets the support_started_at of this ProductEntity.

        Support Started At

        :param support_started_at: The support_started_at of this ProductEntity.
        :type support_started_at: datetime
        """

        self._support_started_at = support_started_at

    @property
    def type(self):
        """Gets the type of this ProductEntity.

        Type

        :return: The type of this ProductEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductEntity.

        Type

        :param type: The type of this ProductEntity.
        :type type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this ProductEntity.

        Unit

        :return: The unit of this ProductEntity.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ProductEntity.

        Unit

        :param unit: The unit of this ProductEntity.
        :type unit: str
        """

        self._unit = unit

    @property
    def updated_at(self):
        """Gets the updated_at of this ProductEntity.

        Updated At

        :return: The updated_at of this ProductEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ProductEntity.

        Updated At

        :param updated_at: The updated_at of this ProductEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this ProductEntity.

        URL

        :return: The url of this ProductEntity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductEntity.

        URL

        :param url: The url of this ProductEntity.
        :type url: str
        """

        self._url = url

    @property
    def vendor(self):
        """Gets the vendor of this ProductEntity.

        Vendor

        :return: The vendor of this ProductEntity.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ProductEntity.

        Vendor

        :param vendor: The vendor of this ProductEntity.
        :type vendor: str
        """

        self._vendor = vendor
