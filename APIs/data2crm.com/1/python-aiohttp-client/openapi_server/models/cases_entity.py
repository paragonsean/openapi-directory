# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relation import Relation
from openapi_server import util


class CasesEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, ended_at: datetime=None, expected_end_at: datetime=None, id: str=None, internal_comments: str=None, is_closed: bool=None, is_escalated: bool=None, number: str=None, origin: str=None, pipeline_with_stage: str=None, priority: str=None, reason: str=None, relation: Relation=None, resolution: str=None, resolution_comments: str=None, satisfaction: str=None, status: str=None, subject: str=None, type: str=None, updated_at: datetime=None):
        """CasesEntity - a model defined in OpenAPI

        :param created_at: The created_at of this CasesEntity.
        :param description: The description of this CasesEntity.
        :param ended_at: The ended_at of this CasesEntity.
        :param expected_end_at: The expected_end_at of this CasesEntity.
        :param id: The id of this CasesEntity.
        :param internal_comments: The internal_comments of this CasesEntity.
        :param is_closed: The is_closed of this CasesEntity.
        :param is_escalated: The is_escalated of this CasesEntity.
        :param number: The number of this CasesEntity.
        :param origin: The origin of this CasesEntity.
        :param pipeline_with_stage: The pipeline_with_stage of this CasesEntity.
        :param priority: The priority of this CasesEntity.
        :param reason: The reason of this CasesEntity.
        :param relation: The relation of this CasesEntity.
        :param resolution: The resolution of this CasesEntity.
        :param resolution_comments: The resolution_comments of this CasesEntity.
        :param satisfaction: The satisfaction of this CasesEntity.
        :param status: The status of this CasesEntity.
        :param subject: The subject of this CasesEntity.
        :param type: The type of this CasesEntity.
        :param updated_at: The updated_at of this CasesEntity.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'ended_at': datetime,
            'expected_end_at': datetime,
            'id': str,
            'internal_comments': str,
            'is_closed': bool,
            'is_escalated': bool,
            'number': str,
            'origin': str,
            'pipeline_with_stage': str,
            'priority': str,
            'reason': str,
            'relation': Relation,
            'resolution': str,
            'resolution_comments': str,
            'satisfaction': str,
            'status': str,
            'subject': str,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'ended_at': 'ended_at',
            'expected_end_at': 'expected_end_at',
            'id': 'id',
            'internal_comments': 'internal_comments',
            'is_closed': 'is_closed',
            'is_escalated': 'is_escalated',
            'number': 'number',
            'origin': 'origin',
            'pipeline_with_stage': 'pipeline_with_stage',
            'priority': 'priority',
            'reason': 'reason',
            'relation': 'relation',
            'resolution': 'resolution',
            'resolution_comments': 'resolution_comments',
            'satisfaction': 'satisfaction',
            'status': 'status',
            'subject': 'subject',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._description = description
        self._ended_at = ended_at
        self._expected_end_at = expected_end_at
        self._id = id
        self._internal_comments = internal_comments
        self._is_closed = is_closed
        self._is_escalated = is_escalated
        self._number = number
        self._origin = origin
        self._pipeline_with_stage = pipeline_with_stage
        self._priority = priority
        self._reason = reason
        self._relation = relation
        self._resolution = resolution
        self._resolution_comments = resolution_comments
        self._satisfaction = satisfaction
        self._status = status
        self._subject = subject
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CasesEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CasesEntity of this CasesEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this CasesEntity.

        Created At

        :return: The created_at of this CasesEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CasesEntity.

        Created At

        :param created_at: The created_at of this CasesEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this CasesEntity.

        Description

        :return: The description of this CasesEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CasesEntity.

        Description

        :param description: The description of this CasesEntity.
        :type description: str
        """

        self._description = description

    @property
    def ended_at(self):
        """Gets the ended_at of this CasesEntity.

        Ended At

        :return: The ended_at of this CasesEntity.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this CasesEntity.

        Ended At

        :param ended_at: The ended_at of this CasesEntity.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def expected_end_at(self):
        """Gets the expected_end_at of this CasesEntity.

        Expected End At

        :return: The expected_end_at of this CasesEntity.
        :rtype: datetime
        """
        return self._expected_end_at

    @expected_end_at.setter
    def expected_end_at(self, expected_end_at):
        """Sets the expected_end_at of this CasesEntity.

        Expected End At

        :param expected_end_at: The expected_end_at of this CasesEntity.
        :type expected_end_at: datetime
        """

        self._expected_end_at = expected_end_at

    @property
    def id(self):
        """Gets the id of this CasesEntity.

        Case Identifier

        :return: The id of this CasesEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CasesEntity.

        Case Identifier

        :param id: The id of this CasesEntity.
        :type id: str
        """

        self._id = id

    @property
    def internal_comments(self):
        """Gets the internal_comments of this CasesEntity.

        Internal Comments

        :return: The internal_comments of this CasesEntity.
        :rtype: str
        """
        return self._internal_comments

    @internal_comments.setter
    def internal_comments(self, internal_comments):
        """Sets the internal_comments of this CasesEntity.

        Internal Comments

        :param internal_comments: The internal_comments of this CasesEntity.
        :type internal_comments: str
        """

        self._internal_comments = internal_comments

    @property
    def is_closed(self):
        """Gets the is_closed of this CasesEntity.

        Is Closed

        :return: The is_closed of this CasesEntity.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this CasesEntity.

        Is Closed

        :param is_closed: The is_closed of this CasesEntity.
        :type is_closed: bool
        """

        self._is_closed = is_closed

    @property
    def is_escalated(self):
        """Gets the is_escalated of this CasesEntity.

        Is Escalated

        :return: The is_escalated of this CasesEntity.
        :rtype: bool
        """
        return self._is_escalated

    @is_escalated.setter
    def is_escalated(self, is_escalated):
        """Sets the is_escalated of this CasesEntity.

        Is Escalated

        :param is_escalated: The is_escalated of this CasesEntity.
        :type is_escalated: bool
        """

        self._is_escalated = is_escalated

    @property
    def number(self):
        """Gets the number of this CasesEntity.

        Number

        :return: The number of this CasesEntity.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CasesEntity.

        Number

        :param number: The number of this CasesEntity.
        :type number: str
        """

        self._number = number

    @property
    def origin(self):
        """Gets the origin of this CasesEntity.

        Origin

        :return: The origin of this CasesEntity.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this CasesEntity.

        Origin

        :param origin: The origin of this CasesEntity.
        :type origin: str
        """

        self._origin = origin

    @property
    def pipeline_with_stage(self):
        """Gets the pipeline_with_stage of this CasesEntity.

        Pipeline With Stage

        :return: The pipeline_with_stage of this CasesEntity.
        :rtype: str
        """
        return self._pipeline_with_stage

    @pipeline_with_stage.setter
    def pipeline_with_stage(self, pipeline_with_stage):
        """Sets the pipeline_with_stage of this CasesEntity.

        Pipeline With Stage

        :param pipeline_with_stage: The pipeline_with_stage of this CasesEntity.
        :type pipeline_with_stage: str
        """

        self._pipeline_with_stage = pipeline_with_stage

    @property
    def priority(self):
        """Gets the priority of this CasesEntity.

        Priority

        :return: The priority of this CasesEntity.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CasesEntity.

        Priority

        :param priority: The priority of this CasesEntity.
        :type priority: str
        """

        self._priority = priority

    @property
    def reason(self):
        """Gets the reason of this CasesEntity.

        Reason

        :return: The reason of this CasesEntity.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CasesEntity.

        Reason

        :param reason: The reason of this CasesEntity.
        :type reason: str
        """

        self._reason = reason

    @property
    def relation(self):
        """Gets the relation of this CasesEntity.


        :return: The relation of this CasesEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this CasesEntity.


        :param relation: The relation of this CasesEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def resolution(self):
        """Gets the resolution of this CasesEntity.

        Resolution

        :return: The resolution of this CasesEntity.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this CasesEntity.

        Resolution

        :param resolution: The resolution of this CasesEntity.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def resolution_comments(self):
        """Gets the resolution_comments of this CasesEntity.

        Resolution Comments

        :return: The resolution_comments of this CasesEntity.
        :rtype: str
        """
        return self._resolution_comments

    @resolution_comments.setter
    def resolution_comments(self, resolution_comments):
        """Sets the resolution_comments of this CasesEntity.

        Resolution Comments

        :param resolution_comments: The resolution_comments of this CasesEntity.
        :type resolution_comments: str
        """

        self._resolution_comments = resolution_comments

    @property
    def satisfaction(self):
        """Gets the satisfaction of this CasesEntity.

        Satisfaction

        :return: The satisfaction of this CasesEntity.
        :rtype: str
        """
        return self._satisfaction

    @satisfaction.setter
    def satisfaction(self, satisfaction):
        """Sets the satisfaction of this CasesEntity.

        Satisfaction

        :param satisfaction: The satisfaction of this CasesEntity.
        :type satisfaction: str
        """

        self._satisfaction = satisfaction

    @property
    def status(self):
        """Gets the status of this CasesEntity.

        Status

        :return: The status of this CasesEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CasesEntity.

        Status

        :param status: The status of this CasesEntity.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this CasesEntity.

        Subject

        :return: The subject of this CasesEntity.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CasesEntity.

        Subject

        :param subject: The subject of this CasesEntity.
        :type subject: str
        """

        self._subject = subject

    @property
    def type(self):
        """Gets the type of this CasesEntity.

        Type

        :return: The type of this CasesEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CasesEntity.

        Type

        :param type: The type of this CasesEntity.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this CasesEntity.

        Updated At

        :return: The updated_at of this CasesEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CasesEntity.

        Updated At

        :param updated_at: The updated_at of this CasesEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
