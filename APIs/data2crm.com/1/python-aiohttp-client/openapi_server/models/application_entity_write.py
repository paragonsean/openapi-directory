# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationEntityWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization: str=None, credential: object=None, description: str=None, type: str=None):
        """ApplicationEntityWrite - a model defined in OpenAPI

        :param authorization: The authorization of this ApplicationEntityWrite.
        :param credential: The credential of this ApplicationEntityWrite.
        :param description: The description of this ApplicationEntityWrite.
        :param type: The type of this ApplicationEntityWrite.
        """
        self.openapi_types = {
            'authorization': str,
            'credential': object,
            'description': str,
            'type': str
        }

        self.attribute_map = {
            'authorization': 'authorization',
            'credential': 'credential',
            'description': 'description',
            'type': 'type'
        }

        self._authorization = authorization
        self._credential = credential
        self._description = description
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationEntityWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationEntityWrite of this ApplicationEntityWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self):
        """Gets the authorization of this ApplicationEntityWrite.

        Application authorization

        :return: The authorization of this ApplicationEntityWrite.
        :rtype: str
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this ApplicationEntityWrite.

        Application authorization

        :param authorization: The authorization of this ApplicationEntityWrite.
        :type authorization: str
        """

        self._authorization = authorization

    @property
    def credential(self):
        """Gets the credential of this ApplicationEntityWrite.


        :return: The credential of this ApplicationEntityWrite.
        :rtype: object
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this ApplicationEntityWrite.


        :param credential: The credential of this ApplicationEntityWrite.
        :type credential: object
        """

        self._credential = credential

    @property
    def description(self):
        """Gets the description of this ApplicationEntityWrite.

        Application description

        :return: The description of this ApplicationEntityWrite.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationEntityWrite.

        Application description

        :param description: The description of this ApplicationEntityWrite.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ApplicationEntityWrite.

        Application platform type

        :return: The type of this ApplicationEntityWrite.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplicationEntityWrite.

        Application platform type

        :param type: The type of this ApplicationEntityWrite.
        :type type: str
        """
        allowed_values = ["Bitrix24", "MicrosoftDynamics", "Vtiger", "ZohoCRM", "Salesforce", "SalesforceSandbox", "Solve360", "Highrise", "Insightly", "HubSpot", "PipelineDeals", "SugarCRM", "SuiteCRM", "CapsuleCRM", "Pipedrive", "Infusionsoft", "CloseIO", "BaseCRM", "Act", "AgileCRM", "ProsperWorks", "FreshSales", "Odoo", "GSuite", "ActPremiumWeb", "Marketo", "AmoCRM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
