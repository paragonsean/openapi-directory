# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.currency import Currency
from openapi_server.models.discount import Discount
from openapi_server.models.relation import Relation
from openapi_server.models.tax import Tax
from openapi_server import util


class InvoiceEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: List[Address]=None, adjustment: float=None, balance: float=None, created_at: datetime=None, currency: Currency=None, description: str=None, discount: List[Discount]=None, due_date: date=None, excise_duty: float=None, grand_total: float=None, id: str=None, invoice_date: date=None, number: str=None, purchase_order: str=None, received: float=None, relation: Relation=None, sales_commission: float=None, shipping_and_handling: float=None, status: str=None, subject: str=None, subtotal: float=None, tax: List[Tax]=None, terms_and_conditions: str=None, total_price: float=None, updated_at: datetime=None):
        """InvoiceEntity - a model defined in OpenAPI

        :param address: The address of this InvoiceEntity.
        :param adjustment: The adjustment of this InvoiceEntity.
        :param balance: The balance of this InvoiceEntity.
        :param created_at: The created_at of this InvoiceEntity.
        :param currency: The currency of this InvoiceEntity.
        :param description: The description of this InvoiceEntity.
        :param discount: The discount of this InvoiceEntity.
        :param due_date: The due_date of this InvoiceEntity.
        :param excise_duty: The excise_duty of this InvoiceEntity.
        :param grand_total: The grand_total of this InvoiceEntity.
        :param id: The id of this InvoiceEntity.
        :param invoice_date: The invoice_date of this InvoiceEntity.
        :param number: The number of this InvoiceEntity.
        :param purchase_order: The purchase_order of this InvoiceEntity.
        :param received: The received of this InvoiceEntity.
        :param relation: The relation of this InvoiceEntity.
        :param sales_commission: The sales_commission of this InvoiceEntity.
        :param shipping_and_handling: The shipping_and_handling of this InvoiceEntity.
        :param status: The status of this InvoiceEntity.
        :param subject: The subject of this InvoiceEntity.
        :param subtotal: The subtotal of this InvoiceEntity.
        :param tax: The tax of this InvoiceEntity.
        :param terms_and_conditions: The terms_and_conditions of this InvoiceEntity.
        :param total_price: The total_price of this InvoiceEntity.
        :param updated_at: The updated_at of this InvoiceEntity.
        """
        self.openapi_types = {
            'address': List[Address],
            'adjustment': float,
            'balance': float,
            'created_at': datetime,
            'currency': Currency,
            'description': str,
            'discount': List[Discount],
            'due_date': date,
            'excise_duty': float,
            'grand_total': float,
            'id': str,
            'invoice_date': date,
            'number': str,
            'purchase_order': str,
            'received': float,
            'relation': Relation,
            'sales_commission': float,
            'shipping_and_handling': float,
            'status': str,
            'subject': str,
            'subtotal': float,
            'tax': List[Tax],
            'terms_and_conditions': str,
            'total_price': float,
            'updated_at': datetime
        }

        self.attribute_map = {
            'address': 'address',
            'adjustment': 'adjustment',
            'balance': 'balance',
            'created_at': 'created_at',
            'currency': 'currency',
            'description': 'description',
            'discount': 'discount',
            'due_date': 'due_date',
            'excise_duty': 'excise_duty',
            'grand_total': 'grand_total',
            'id': 'id',
            'invoice_date': 'invoice_date',
            'number': 'number',
            'purchase_order': 'purchase_order',
            'received': 'received',
            'relation': 'relation',
            'sales_commission': 'sales_commission',
            'shipping_and_handling': 'shipping_and_handling',
            'status': 'status',
            'subject': 'subject',
            'subtotal': 'subtotal',
            'tax': 'tax',
            'terms_and_conditions': 'terms_and_conditions',
            'total_price': 'total_price',
            'updated_at': 'updated_at'
        }

        self._address = address
        self._adjustment = adjustment
        self._balance = balance
        self._created_at = created_at
        self._currency = currency
        self._description = description
        self._discount = discount
        self._due_date = due_date
        self._excise_duty = excise_duty
        self._grand_total = grand_total
        self._id = id
        self._invoice_date = invoice_date
        self._number = number
        self._purchase_order = purchase_order
        self._received = received
        self._relation = relation
        self._sales_commission = sales_commission
        self._shipping_and_handling = shipping_and_handling
        self._status = status
        self._subject = subject
        self._subtotal = subtotal
        self._tax = tax
        self._terms_and_conditions = terms_and_conditions
        self._total_price = total_price
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceEntity of this InvoiceEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this InvoiceEntity.

        Address

        :return: The address of this InvoiceEntity.
        :rtype: List[Address]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InvoiceEntity.

        Address

        :param address: The address of this InvoiceEntity.
        :type address: List[Address]
        """

        self._address = address

    @property
    def adjustment(self):
        """Gets the adjustment of this InvoiceEntity.

        Adjustment

        :return: The adjustment of this InvoiceEntity.
        :rtype: float
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this InvoiceEntity.

        Adjustment

        :param adjustment: The adjustment of this InvoiceEntity.
        :type adjustment: float
        """

        self._adjustment = adjustment

    @property
    def balance(self):
        """Gets the balance of this InvoiceEntity.

        Balance

        :return: The balance of this InvoiceEntity.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this InvoiceEntity.

        Balance

        :param balance: The balance of this InvoiceEntity.
        :type balance: float
        """

        self._balance = balance

    @property
    def created_at(self):
        """Gets the created_at of this InvoiceEntity.

        Created At

        :return: The created_at of this InvoiceEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InvoiceEntity.

        Created At

        :param created_at: The created_at of this InvoiceEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this InvoiceEntity.


        :return: The currency of this InvoiceEntity.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InvoiceEntity.


        :param currency: The currency of this InvoiceEntity.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this InvoiceEntity.

        Description

        :return: The description of this InvoiceEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceEntity.

        Description

        :param description: The description of this InvoiceEntity.
        :type description: str
        """

        self._description = description

    @property
    def discount(self):
        """Gets the discount of this InvoiceEntity.

        Discount

        :return: The discount of this InvoiceEntity.
        :rtype: List[Discount]
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this InvoiceEntity.

        Discount

        :param discount: The discount of this InvoiceEntity.
        :type discount: List[Discount]
        """

        self._discount = discount

    @property
    def due_date(self):
        """Gets the due_date of this InvoiceEntity.

        Due Date

        :return: The due_date of this InvoiceEntity.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this InvoiceEntity.

        Due Date

        :param due_date: The due_date of this InvoiceEntity.
        :type due_date: date
        """

        self._due_date = due_date

    @property
    def excise_duty(self):
        """Gets the excise_duty of this InvoiceEntity.

        Excise Duty

        :return: The excise_duty of this InvoiceEntity.
        :rtype: float
        """
        return self._excise_duty

    @excise_duty.setter
    def excise_duty(self, excise_duty):
        """Sets the excise_duty of this InvoiceEntity.

        Excise Duty

        :param excise_duty: The excise_duty of this InvoiceEntity.
        :type excise_duty: float
        """

        self._excise_duty = excise_duty

    @property
    def grand_total(self):
        """Gets the grand_total of this InvoiceEntity.

        Grand Total

        :return: The grand_total of this InvoiceEntity.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this InvoiceEntity.

        Grand Total

        :param grand_total: The grand_total of this InvoiceEntity.
        :type grand_total: float
        """

        self._grand_total = grand_total

    @property
    def id(self):
        """Gets the id of this InvoiceEntity.

        Invoice Identifier

        :return: The id of this InvoiceEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceEntity.

        Invoice Identifier

        :param id: The id of this InvoiceEntity.
        :type id: str
        """

        self._id = id

    @property
    def invoice_date(self):
        """Gets the invoice_date of this InvoiceEntity.

        Invoice Date

        :return: The invoice_date of this InvoiceEntity.
        :rtype: date
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this InvoiceEntity.

        Invoice Date

        :param invoice_date: The invoice_date of this InvoiceEntity.
        :type invoice_date: date
        """

        self._invoice_date = invoice_date

    @property
    def number(self):
        """Gets the number of this InvoiceEntity.

        Number

        :return: The number of this InvoiceEntity.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InvoiceEntity.

        Number

        :param number: The number of this InvoiceEntity.
        :type number: str
        """

        self._number = number

    @property
    def purchase_order(self):
        """Gets the purchase_order of this InvoiceEntity.

        Purchase Order

        :return: The purchase_order of this InvoiceEntity.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this InvoiceEntity.

        Purchase Order

        :param purchase_order: The purchase_order of this InvoiceEntity.
        :type purchase_order: str
        """

        self._purchase_order = purchase_order

    @property
    def received(self):
        """Gets the received of this InvoiceEntity.

        Received

        :return: The received of this InvoiceEntity.
        :rtype: float
        """
        return self._received

    @received.setter
    def received(self, received):
        """Sets the received of this InvoiceEntity.

        Received

        :param received: The received of this InvoiceEntity.
        :type received: float
        """

        self._received = received

    @property
    def relation(self):
        """Gets the relation of this InvoiceEntity.


        :return: The relation of this InvoiceEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this InvoiceEntity.


        :param relation: The relation of this InvoiceEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def sales_commission(self):
        """Gets the sales_commission of this InvoiceEntity.

        Sales Commission

        :return: The sales_commission of this InvoiceEntity.
        :rtype: float
        """
        return self._sales_commission

    @sales_commission.setter
    def sales_commission(self, sales_commission):
        """Sets the sales_commission of this InvoiceEntity.

        Sales Commission

        :param sales_commission: The sales_commission of this InvoiceEntity.
        :type sales_commission: float
        """

        self._sales_commission = sales_commission

    @property
    def shipping_and_handling(self):
        """Gets the shipping_and_handling of this InvoiceEntity.

        Shipping And Handling

        :return: The shipping_and_handling of this InvoiceEntity.
        :rtype: float
        """
        return self._shipping_and_handling

    @shipping_and_handling.setter
    def shipping_and_handling(self, shipping_and_handling):
        """Sets the shipping_and_handling of this InvoiceEntity.

        Shipping And Handling

        :param shipping_and_handling: The shipping_and_handling of this InvoiceEntity.
        :type shipping_and_handling: float
        """

        self._shipping_and_handling = shipping_and_handling

    @property
    def status(self):
        """Gets the status of this InvoiceEntity.

        Status

        :return: The status of this InvoiceEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvoiceEntity.

        Status

        :param status: The status of this InvoiceEntity.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this InvoiceEntity.

        Subject

        :return: The subject of this InvoiceEntity.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this InvoiceEntity.

        Subject

        :param subject: The subject of this InvoiceEntity.
        :type subject: str
        """

        self._subject = subject

    @property
    def subtotal(self):
        """Gets the subtotal of this InvoiceEntity.

        Subtotal

        :return: The subtotal of this InvoiceEntity.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this InvoiceEntity.

        Subtotal

        :param subtotal: The subtotal of this InvoiceEntity.
        :type subtotal: float
        """

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this InvoiceEntity.

        Tax

        :return: The tax of this InvoiceEntity.
        :rtype: List[Tax]
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this InvoiceEntity.

        Tax

        :param tax: The tax of this InvoiceEntity.
        :type tax: List[Tax]
        """

        self._tax = tax

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this InvoiceEntity.

        Terms And Conditions

        :return: The terms_and_conditions of this InvoiceEntity.
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this InvoiceEntity.

        Terms And Conditions

        :param terms_and_conditions: The terms_and_conditions of this InvoiceEntity.
        :type terms_and_conditions: str
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def total_price(self):
        """Gets the total_price of this InvoiceEntity.

        Total Price

        :return: The total_price of this InvoiceEntity.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this InvoiceEntity.

        Total Price

        :param total_price: The total_price of this InvoiceEntity.
        :type total_price: float
        """

        self._total_price = total_price

    @property
    def updated_at(self):
        """Gets the updated_at of this InvoiceEntity.

        Updated At

        :return: The updated_at of this InvoiceEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InvoiceEntity.

        Updated At

        :param updated_at: The updated_at of this InvoiceEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
