# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.discount import Discount
from openapi_server.models.relation import Relation
from openapi_server.models.tax import Tax
from openapi_server import util


class OpportunityProductEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, currency: Currency=None, description: str=None, discount: List[Discount]=None, id: str=None, list_price: float=None, name: str=None, number: str=None, quantity: float=None, relation: Relation=None, sales_price: float=None, subtotal: float=None, tax: List[Tax]=None, total_price: float=None, unit: str=None, updated_at: datetime=None):
        """OpportunityProductEntity - a model defined in OpenAPI

        :param created_at: The created_at of this OpportunityProductEntity.
        :param currency: The currency of this OpportunityProductEntity.
        :param description: The description of this OpportunityProductEntity.
        :param discount: The discount of this OpportunityProductEntity.
        :param id: The id of this OpportunityProductEntity.
        :param list_price: The list_price of this OpportunityProductEntity.
        :param name: The name of this OpportunityProductEntity.
        :param number: The number of this OpportunityProductEntity.
        :param quantity: The quantity of this OpportunityProductEntity.
        :param relation: The relation of this OpportunityProductEntity.
        :param sales_price: The sales_price of this OpportunityProductEntity.
        :param subtotal: The subtotal of this OpportunityProductEntity.
        :param tax: The tax of this OpportunityProductEntity.
        :param total_price: The total_price of this OpportunityProductEntity.
        :param unit: The unit of this OpportunityProductEntity.
        :param updated_at: The updated_at of this OpportunityProductEntity.
        """
        self.openapi_types = {
            'created_at': datetime,
            'currency': Currency,
            'description': str,
            'discount': List[Discount],
            'id': str,
            'list_price': float,
            'name': str,
            'number': str,
            'quantity': float,
            'relation': Relation,
            'sales_price': float,
            'subtotal': float,
            'tax': List[Tax],
            'total_price': float,
            'unit': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'currency': 'currency',
            'description': 'description',
            'discount': 'discount',
            'id': 'id',
            'list_price': 'list_price',
            'name': 'name',
            'number': 'number',
            'quantity': 'quantity',
            'relation': 'relation',
            'sales_price': 'sales_price',
            'subtotal': 'subtotal',
            'tax': 'tax',
            'total_price': 'total_price',
            'unit': 'unit',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._currency = currency
        self._description = description
        self._discount = discount
        self._id = id
        self._list_price = list_price
        self._name = name
        self._number = number
        self._quantity = quantity
        self._relation = relation
        self._sales_price = sales_price
        self._subtotal = subtotal
        self._tax = tax
        self._total_price = total_price
        self._unit = unit
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpportunityProductEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpportunityProductEntity of this OpportunityProductEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this OpportunityProductEntity.

        Created At

        :return: The created_at of this OpportunityProductEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OpportunityProductEntity.

        Created At

        :param created_at: The created_at of this OpportunityProductEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this OpportunityProductEntity.


        :return: The currency of this OpportunityProductEntity.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OpportunityProductEntity.


        :param currency: The currency of this OpportunityProductEntity.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this OpportunityProductEntity.

        Description

        :return: The description of this OpportunityProductEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpportunityProductEntity.

        Description

        :param description: The description of this OpportunityProductEntity.
        :type description: str
        """

        self._description = description

    @property
    def discount(self):
        """Gets the discount of this OpportunityProductEntity.

        Discount

        :return: The discount of this OpportunityProductEntity.
        :rtype: List[Discount]
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OpportunityProductEntity.

        Discount

        :param discount: The discount of this OpportunityProductEntity.
        :type discount: List[Discount]
        """

        self._discount = discount

    @property
    def id(self):
        """Gets the id of this OpportunityProductEntity.

        OpportunityProduct Identifier

        :return: The id of this OpportunityProductEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpportunityProductEntity.

        OpportunityProduct Identifier

        :param id: The id of this OpportunityProductEntity.
        :type id: str
        """

        self._id = id

    @property
    def list_price(self):
        """Gets the list_price of this OpportunityProductEntity.

        List Price

        :return: The list_price of this OpportunityProductEntity.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this OpportunityProductEntity.

        List Price

        :param list_price: The list_price of this OpportunityProductEntity.
        :type list_price: float
        """

        self._list_price = list_price

    @property
    def name(self):
        """Gets the name of this OpportunityProductEntity.

        Name

        :return: The name of this OpportunityProductEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpportunityProductEntity.

        Name

        :param name: The name of this OpportunityProductEntity.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this OpportunityProductEntity.

        Number

        :return: The number of this OpportunityProductEntity.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OpportunityProductEntity.

        Number

        :param number: The number of this OpportunityProductEntity.
        :type number: str
        """

        self._number = number

    @property
    def quantity(self):
        """Gets the quantity of this OpportunityProductEntity.

        Quantity

        :return: The quantity of this OpportunityProductEntity.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OpportunityProductEntity.

        Quantity

        :param quantity: The quantity of this OpportunityProductEntity.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def relation(self):
        """Gets the relation of this OpportunityProductEntity.


        :return: The relation of this OpportunityProductEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this OpportunityProductEntity.


        :param relation: The relation of this OpportunityProductEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def sales_price(self):
        """Gets the sales_price of this OpportunityProductEntity.

        Sales Price

        :return: The sales_price of this OpportunityProductEntity.
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this OpportunityProductEntity.

        Sales Price

        :param sales_price: The sales_price of this OpportunityProductEntity.
        :type sales_price: float
        """

        self._sales_price = sales_price

    @property
    def subtotal(self):
        """Gets the subtotal of this OpportunityProductEntity.

        Subtotal

        :return: The subtotal of this OpportunityProductEntity.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this OpportunityProductEntity.

        Subtotal

        :param subtotal: The subtotal of this OpportunityProductEntity.
        :type subtotal: float
        """

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this OpportunityProductEntity.

        Tax

        :return: The tax of this OpportunityProductEntity.
        :rtype: List[Tax]
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this OpportunityProductEntity.

        Tax

        :param tax: The tax of this OpportunityProductEntity.
        :type tax: List[Tax]
        """

        self._tax = tax

    @property
    def total_price(self):
        """Gets the total_price of this OpportunityProductEntity.

        Total Price

        :return: The total_price of this OpportunityProductEntity.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this OpportunityProductEntity.

        Total Price

        :param total_price: The total_price of this OpportunityProductEntity.
        :type total_price: float
        """

        self._total_price = total_price

    @property
    def unit(self):
        """Gets the unit of this OpportunityProductEntity.

        Unit

        :return: The unit of this OpportunityProductEntity.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this OpportunityProductEntity.

        Unit

        :param unit: The unit of this OpportunityProductEntity.
        :type unit: str
        """

        self._unit = unit

    @property
    def updated_at(self):
        """Gets the updated_at of this OpportunityProductEntity.

        Updated At

        :return: The updated_at of this OpportunityProductEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OpportunityProductEntity.

        Updated At

        :param updated_at: The updated_at of this OpportunityProductEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
