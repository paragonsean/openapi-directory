# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Type(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: int=None, count: float=None, period: int=None, type: str=None):
        """Type - a model defined in OpenAPI

        :param available: The available of this Type.
        :param count: The count of this Type.
        :param period: The period of this Type.
        :param type: The type of this Type.
        """
        self.openapi_types = {
            'available': int,
            'count': float,
            'period': int,
            'type': str
        }

        self.attribute_map = {
            'available': 'available',
            'count': 'count',
            'period': 'period',
            'type': 'type'
        }

        self._available = available
        self._count = count
        self._period = period
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Type':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Type of this Type.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this Type.

        Available

        :return: The available of this Type.
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Type.

        Available

        :param available: The available of this Type.
        :type available: int
        """

        self._available = available

    @property
    def count(self):
        """Gets the count of this Type.

        Count

        :return: The count of this Type.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Type.

        Count

        :param count: The count of this Type.
        :type count: float
        """

        self._count = count

    @property
    def period(self):
        """Gets the period of this Type.

        Period

        :return: The period of this Type.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Type.

        Period

        :param period: The period of this Type.
        :type period: int
        """

        self._period = period

    @property
    def type(self):
        """Gets the type of this Type.

        Type

        :return: The type of this Type.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Type.

        Type

        :param type: The type of this Type.
        :type type: str
        """

        self._type = type
