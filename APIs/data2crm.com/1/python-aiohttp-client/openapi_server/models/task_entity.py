# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relation import Relation
from openapi_server import util


class TaskEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, due_at: datetime=None, ended_at: datetime=None, id: str=None, priority: str=None, relation: Relation=None, reminder_at: datetime=None, started_at: datetime=None, status: str=None, subject: str=None, updated_at: datetime=None):
        """TaskEntity - a model defined in OpenAPI

        :param created_at: The created_at of this TaskEntity.
        :param description: The description of this TaskEntity.
        :param due_at: The due_at of this TaskEntity.
        :param ended_at: The ended_at of this TaskEntity.
        :param id: The id of this TaskEntity.
        :param priority: The priority of this TaskEntity.
        :param relation: The relation of this TaskEntity.
        :param reminder_at: The reminder_at of this TaskEntity.
        :param started_at: The started_at of this TaskEntity.
        :param status: The status of this TaskEntity.
        :param subject: The subject of this TaskEntity.
        :param updated_at: The updated_at of this TaskEntity.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'due_at': datetime,
            'ended_at': datetime,
            'id': str,
            'priority': str,
            'relation': Relation,
            'reminder_at': datetime,
            'started_at': datetime,
            'status': str,
            'subject': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'due_at': 'due_at',
            'ended_at': 'ended_at',
            'id': 'id',
            'priority': 'priority',
            'relation': 'relation',
            'reminder_at': 'reminder_at',
            'started_at': 'started_at',
            'status': 'status',
            'subject': 'subject',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._description = description
        self._due_at = due_at
        self._ended_at = ended_at
        self._id = id
        self._priority = priority
        self._relation = relation
        self._reminder_at = reminder_at
        self._started_at = started_at
        self._status = status
        self._subject = subject
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskEntity of this TaskEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this TaskEntity.

        Created At

        :return: The created_at of this TaskEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskEntity.

        Created At

        :param created_at: The created_at of this TaskEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this TaskEntity.

        Description

        :return: The description of this TaskEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskEntity.

        Description

        :param description: The description of this TaskEntity.
        :type description: str
        """

        self._description = description

    @property
    def due_at(self):
        """Gets the due_at of this TaskEntity.

        Due At

        :return: The due_at of this TaskEntity.
        :rtype: datetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this TaskEntity.

        Due At

        :param due_at: The due_at of this TaskEntity.
        :type due_at: datetime
        """

        self._due_at = due_at

    @property
    def ended_at(self):
        """Gets the ended_at of this TaskEntity.

        Ended At

        :return: The ended_at of this TaskEntity.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this TaskEntity.

        Ended At

        :param ended_at: The ended_at of this TaskEntity.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def id(self):
        """Gets the id of this TaskEntity.

        Task Identifier

        :return: The id of this TaskEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskEntity.

        Task Identifier

        :param id: The id of this TaskEntity.
        :type id: str
        """

        self._id = id

    @property
    def priority(self):
        """Gets the priority of this TaskEntity.

        Priority

        :return: The priority of this TaskEntity.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskEntity.

        Priority

        :param priority: The priority of this TaskEntity.
        :type priority: str
        """

        self._priority = priority

    @property
    def relation(self):
        """Gets the relation of this TaskEntity.


        :return: The relation of this TaskEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this TaskEntity.


        :param relation: The relation of this TaskEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def reminder_at(self):
        """Gets the reminder_at of this TaskEntity.

        Remainder At

        :return: The reminder_at of this TaskEntity.
        :rtype: datetime
        """
        return self._reminder_at

    @reminder_at.setter
    def reminder_at(self, reminder_at):
        """Sets the reminder_at of this TaskEntity.

        Remainder At

        :param reminder_at: The reminder_at of this TaskEntity.
        :type reminder_at: datetime
        """

        self._reminder_at = reminder_at

    @property
    def started_at(self):
        """Gets the started_at of this TaskEntity.

        Started At

        :return: The started_at of this TaskEntity.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this TaskEntity.

        Started At

        :param started_at: The started_at of this TaskEntity.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this TaskEntity.

        Status

        :return: The status of this TaskEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskEntity.

        Status

        :param status: The status of this TaskEntity.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this TaskEntity.

        Name

        :return: The subject of this TaskEntity.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TaskEntity.

        Name

        :param subject: The subject of this TaskEntity.
        :type subject: str
        """

        self._subject = subject

    @property
    def updated_at(self):
        """Gets the updated_at of this TaskEntity.

        Updated At

        :return: The updated_at of this TaskEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TaskEntity.

        Updated At

        :param updated_at: The updated_at of this TaskEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
