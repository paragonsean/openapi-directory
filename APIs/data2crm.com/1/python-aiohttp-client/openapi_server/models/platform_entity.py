# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization import Authorization
from openapi_server import util


class PlatformEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization: List[Authorization]=None, name: str=None, resource: object=None, type: str=None):
        """PlatformEntity - a model defined in OpenAPI

        :param authorization: The authorization of this PlatformEntity.
        :param name: The name of this PlatformEntity.
        :param resource: The resource of this PlatformEntity.
        :param type: The type of this PlatformEntity.
        """
        self.openapi_types = {
            'authorization': List[Authorization],
            'name': str,
            'resource': object,
            'type': str
        }

        self.attribute_map = {
            'authorization': 'authorization',
            'name': 'name',
            'resource': 'resource',
            'type': 'type'
        }

        self._authorization = authorization
        self._name = name
        self._resource = resource
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlatformEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlatformEntity of this PlatformEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self):
        """Gets the authorization of this PlatformEntity.

        Authorization

        :return: The authorization of this PlatformEntity.
        :rtype: List[Authorization]
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this PlatformEntity.

        Authorization

        :param authorization: The authorization of this PlatformEntity.
        :type authorization: List[Authorization]
        """

        self._authorization = authorization

    @property
    def name(self):
        """Gets the name of this PlatformEntity.

        Name

        :return: The name of this PlatformEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlatformEntity.

        Name

        :param name: The name of this PlatformEntity.
        :type name: str
        """

        self._name = name

    @property
    def resource(self):
        """Gets the resource of this PlatformEntity.


        :return: The resource of this PlatformEntity.
        :rtype: object
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this PlatformEntity.


        :param resource: The resource of this PlatformEntity.
        :type resource: object
        """

        self._resource = resource

    @property
    def type(self):
        """Gets the type of this PlatformEntity.

        Type

        :return: The type of this PlatformEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlatformEntity.

        Type

        :param type: The type of this PlatformEntity.
        :type type: str
        """

        self._type = type
