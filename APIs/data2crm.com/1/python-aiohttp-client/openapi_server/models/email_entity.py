# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relation import Relation
from openapi_server import util


class EmailEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bcc: List[str]=None, body: str=None, cc: List[str]=None, created_at: datetime=None, direction: str=None, _from: str=None, id: str=None, relation: Relation=None, sent_at: datetime=None, status: str=None, subject: str=None, to: List[str]=None, updated_at: datetime=None):
        """EmailEntity - a model defined in OpenAPI

        :param bcc: The bcc of this EmailEntity.
        :param body: The body of this EmailEntity.
        :param cc: The cc of this EmailEntity.
        :param created_at: The created_at of this EmailEntity.
        :param direction: The direction of this EmailEntity.
        :param _from: The _from of this EmailEntity.
        :param id: The id of this EmailEntity.
        :param relation: The relation of this EmailEntity.
        :param sent_at: The sent_at of this EmailEntity.
        :param status: The status of this EmailEntity.
        :param subject: The subject of this EmailEntity.
        :param to: The to of this EmailEntity.
        :param updated_at: The updated_at of this EmailEntity.
        """
        self.openapi_types = {
            'bcc': List[str],
            'body': str,
            'cc': List[str],
            'created_at': datetime,
            'direction': str,
            '_from': str,
            'id': str,
            'relation': Relation,
            'sent_at': datetime,
            'status': str,
            'subject': str,
            'to': List[str],
            'updated_at': datetime
        }

        self.attribute_map = {
            'bcc': 'bcc',
            'body': 'body',
            'cc': 'cc',
            'created_at': 'created_at',
            'direction': 'direction',
            '_from': 'from',
            'id': 'id',
            'relation': 'relation',
            'sent_at': 'sent_at',
            'status': 'status',
            'subject': 'subject',
            'to': 'to',
            'updated_at': 'updated_at'
        }

        self._bcc = bcc
        self._body = body
        self._cc = cc
        self._created_at = created_at
        self._direction = direction
        self.__from = _from
        self._id = id
        self._relation = relation
        self._sent_at = sent_at
        self._status = status
        self._subject = subject
        self._to = to
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailEntity of this EmailEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bcc(self):
        """Gets the bcc of this EmailEntity.

        BCC

        :return: The bcc of this EmailEntity.
        :rtype: List[str]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this EmailEntity.

        BCC

        :param bcc: The bcc of this EmailEntity.
        :type bcc: List[str]
        """

        self._bcc = bcc

    @property
    def body(self):
        """Gets the body of this EmailEntity.

        Body

        :return: The body of this EmailEntity.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailEntity.

        Body

        :param body: The body of this EmailEntity.
        :type body: str
        """

        self._body = body

    @property
    def cc(self):
        """Gets the cc of this EmailEntity.

        CC

        :return: The cc of this EmailEntity.
        :rtype: List[str]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this EmailEntity.

        CC

        :param cc: The cc of this EmailEntity.
        :type cc: List[str]
        """

        self._cc = cc

    @property
    def created_at(self):
        """Gets the created_at of this EmailEntity.

        Created At

        :return: The created_at of this EmailEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EmailEntity.

        Created At

        :param created_at: The created_at of this EmailEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def direction(self):
        """Gets the direction of this EmailEntity.

        Direction

        :return: The direction of this EmailEntity.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this EmailEntity.

        Direction

        :param direction: The direction of this EmailEntity.
        :type direction: str
        """

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this EmailEntity.

        From

        :return: The _from of this EmailEntity.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailEntity.

        From

        :param _from: The _from of this EmailEntity.
        :type _from: str
        """

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this EmailEntity.

        Email Identifier

        :return: The id of this EmailEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailEntity.

        Email Identifier

        :param id: The id of this EmailEntity.
        :type id: str
        """

        self._id = id

    @property
    def relation(self):
        """Gets the relation of this EmailEntity.


        :return: The relation of this EmailEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this EmailEntity.


        :param relation: The relation of this EmailEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def sent_at(self):
        """Gets the sent_at of this EmailEntity.

        Sent At

        :return: The sent_at of this EmailEntity.
        :rtype: datetime
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this EmailEntity.

        Sent At

        :param sent_at: The sent_at of this EmailEntity.
        :type sent_at: datetime
        """

        self._sent_at = sent_at

    @property
    def status(self):
        """Gets the status of this EmailEntity.

        Status

        :return: The status of this EmailEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EmailEntity.

        Status

        :param status: The status of this EmailEntity.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this EmailEntity.

        Subject

        :return: The subject of this EmailEntity.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailEntity.

        Subject

        :param subject: The subject of this EmailEntity.
        :type subject: str
        """

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this EmailEntity.

        To

        :return: The to of this EmailEntity.
        :rtype: List[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailEntity.

        To

        :param to: The to of this EmailEntity.
        :type to: List[str]
        """

        self._to = to

    @property
    def updated_at(self):
        """Gets the updated_at of this EmailEntity.

        Updated At

        :return: The updated_at of this EmailEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EmailEntity.

        Updated At

        :param updated_at: The updated_at of this EmailEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
