# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email import Email
from openapi_server.models.relation import Relation
from openapi_server import util


class TicketEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: List[str]=None, closed_at: datetime=None, created_at: datetime=None, description: str=None, due_at: datetime=None, email: List[Email]=None, id: str=None, number: str=None, pipeline_with_stage: str=None, priority: str=None, relation: Relation=None, resolution: str=None, source: str=None, subject: str=None, updated_at: datetime=None):
        """TicketEntity - a model defined in OpenAPI

        :param category: The category of this TicketEntity.
        :param closed_at: The closed_at of this TicketEntity.
        :param created_at: The created_at of this TicketEntity.
        :param description: The description of this TicketEntity.
        :param due_at: The due_at of this TicketEntity.
        :param email: The email of this TicketEntity.
        :param id: The id of this TicketEntity.
        :param number: The number of this TicketEntity.
        :param pipeline_with_stage: The pipeline_with_stage of this TicketEntity.
        :param priority: The priority of this TicketEntity.
        :param relation: The relation of this TicketEntity.
        :param resolution: The resolution of this TicketEntity.
        :param source: The source of this TicketEntity.
        :param subject: The subject of this TicketEntity.
        :param updated_at: The updated_at of this TicketEntity.
        """
        self.openapi_types = {
            'category': List[str],
            'closed_at': datetime,
            'created_at': datetime,
            'description': str,
            'due_at': datetime,
            'email': List[Email],
            'id': str,
            'number': str,
            'pipeline_with_stage': str,
            'priority': str,
            'relation': Relation,
            'resolution': str,
            'source': str,
            'subject': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'category': 'category',
            'closed_at': 'closed_at',
            'created_at': 'created_at',
            'description': 'description',
            'due_at': 'due_at',
            'email': 'email',
            'id': 'id',
            'number': 'number',
            'pipeline_with_stage': 'pipeline_with_stage',
            'priority': 'priority',
            'relation': 'relation',
            'resolution': 'resolution',
            'source': 'source',
            'subject': 'subject',
            'updated_at': 'updated_at'
        }

        self._category = category
        self._closed_at = closed_at
        self._created_at = created_at
        self._description = description
        self._due_at = due_at
        self._email = email
        self._id = id
        self._number = number
        self._pipeline_with_stage = pipeline_with_stage
        self._priority = priority
        self._relation = relation
        self._resolution = resolution
        self._source = source
        self._subject = subject
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketEntity of this TicketEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this TicketEntity.

        Category

        :return: The category of this TicketEntity.
        :rtype: List[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TicketEntity.

        Category

        :param category: The category of this TicketEntity.
        :type category: List[str]
        """

        self._category = category

    @property
    def closed_at(self):
        """Gets the closed_at of this TicketEntity.

        Closed At

        :return: The closed_at of this TicketEntity.
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this TicketEntity.

        Closed At

        :param closed_at: The closed_at of this TicketEntity.
        :type closed_at: datetime
        """

        self._closed_at = closed_at

    @property
    def created_at(self):
        """Gets the created_at of this TicketEntity.

        Created At

        :return: The created_at of this TicketEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TicketEntity.

        Created At

        :param created_at: The created_at of this TicketEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this TicketEntity.

        Description

        :return: The description of this TicketEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketEntity.

        Description

        :param description: The description of this TicketEntity.
        :type description: str
        """

        self._description = description

    @property
    def due_at(self):
        """Gets the due_at of this TicketEntity.

        Due At

        :return: The due_at of this TicketEntity.
        :rtype: datetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this TicketEntity.

        Due At

        :param due_at: The due_at of this TicketEntity.
        :type due_at: datetime
        """

        self._due_at = due_at

    @property
    def email(self):
        """Gets the email of this TicketEntity.

        Email

        :return: The email of this TicketEntity.
        :rtype: List[Email]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TicketEntity.

        Email

        :param email: The email of this TicketEntity.
        :type email: List[Email]
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this TicketEntity.

        Ticket Identifier

        :return: The id of this TicketEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketEntity.

        Ticket Identifier

        :param id: The id of this TicketEntity.
        :type id: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this TicketEntity.

        Number

        :return: The number of this TicketEntity.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TicketEntity.

        Number

        :param number: The number of this TicketEntity.
        :type number: str
        """

        self._number = number

    @property
    def pipeline_with_stage(self):
        """Gets the pipeline_with_stage of this TicketEntity.

        Pipeline With Stage

        :return: The pipeline_with_stage of this TicketEntity.
        :rtype: str
        """
        return self._pipeline_with_stage

    @pipeline_with_stage.setter
    def pipeline_with_stage(self, pipeline_with_stage):
        """Sets the pipeline_with_stage of this TicketEntity.

        Pipeline With Stage

        :param pipeline_with_stage: The pipeline_with_stage of this TicketEntity.
        :type pipeline_with_stage: str
        """

        self._pipeline_with_stage = pipeline_with_stage

    @property
    def priority(self):
        """Gets the priority of this TicketEntity.

        Priority

        :return: The priority of this TicketEntity.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TicketEntity.

        Priority

        :param priority: The priority of this TicketEntity.
        :type priority: str
        """

        self._priority = priority

    @property
    def relation(self):
        """Gets the relation of this TicketEntity.


        :return: The relation of this TicketEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this TicketEntity.


        :param relation: The relation of this TicketEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def resolution(self):
        """Gets the resolution of this TicketEntity.

        Resolution

        :return: The resolution of this TicketEntity.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this TicketEntity.

        Resolution

        :param resolution: The resolution of this TicketEntity.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def source(self):
        """Gets the source of this TicketEntity.

        Source

        :return: The source of this TicketEntity.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TicketEntity.

        Source

        :param source: The source of this TicketEntity.
        :type source: str
        """

        self._source = source

    @property
    def subject(self):
        """Gets the subject of this TicketEntity.

        Subject

        :return: The subject of this TicketEntity.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TicketEntity.

        Subject

        :param subject: The subject of this TicketEntity.
        :type subject: str
        """

        self._subject = subject

    @property
    def updated_at(self):
        """Gets the updated_at of this TicketEntity.

        Updated At

        :return: The updated_at of this TicketEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TicketEntity.

        Updated At

        :param updated_at: The updated_at of this TicketEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
