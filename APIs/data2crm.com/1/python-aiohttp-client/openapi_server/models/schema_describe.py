# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SchemaDescribe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create: object=None, fetch: object=None, fetch_all: object=None, update: object=None):
        """SchemaDescribe - a model defined in OpenAPI

        :param create: The create of this SchemaDescribe.
        :param fetch: The fetch of this SchemaDescribe.
        :param fetch_all: The fetch_all of this SchemaDescribe.
        :param update: The update of this SchemaDescribe.
        """
        self.openapi_types = {
            'create': object,
            'fetch': object,
            'fetch_all': object,
            'update': object
        }

        self.attribute_map = {
            'create': 'create',
            'fetch': 'fetch',
            'fetch_all': 'fetchAll',
            'update': 'update'
        }

        self._create = create
        self._fetch = fetch
        self._fetch_all = fetch_all
        self._update = update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaDescribe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaDescribe of this SchemaDescribe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create(self):
        """Gets the create of this SchemaDescribe.


        :return: The create of this SchemaDescribe.
        :rtype: object
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this SchemaDescribe.


        :param create: The create of this SchemaDescribe.
        :type create: object
        """

        self._create = create

    @property
    def fetch(self):
        """Gets the fetch of this SchemaDescribe.


        :return: The fetch of this SchemaDescribe.
        :rtype: object
        """
        return self._fetch

    @fetch.setter
    def fetch(self, fetch):
        """Sets the fetch of this SchemaDescribe.


        :param fetch: The fetch of this SchemaDescribe.
        :type fetch: object
        """

        self._fetch = fetch

    @property
    def fetch_all(self):
        """Gets the fetch_all of this SchemaDescribe.


        :return: The fetch_all of this SchemaDescribe.
        :rtype: object
        """
        return self._fetch_all

    @fetch_all.setter
    def fetch_all(self, fetch_all):
        """Sets the fetch_all of this SchemaDescribe.


        :param fetch_all: The fetch_all of this SchemaDescribe.
        :type fetch_all: object
        """

        self._fetch_all = fetch_all

    @property
    def update(self):
        """Gets the update of this SchemaDescribe.


        :return: The update of this SchemaDescribe.
        :rtype: object
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this SchemaDescribe.


        :param update: The update of this SchemaDescribe.
        :type update: object
        """

        self._update = update
