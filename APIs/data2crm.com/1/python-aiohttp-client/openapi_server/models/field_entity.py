# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, array_item: str=None, entity: List[str]=None, format: str=None, id: str=None, is_enum: bool=None, label: str=None, limit: int=None, methods: object=None, name: str=None, relation: List[str]=None, type: str=None):
        """FieldEntity - a model defined in OpenAPI

        :param array_item: The array_item of this FieldEntity.
        :param entity: The entity of this FieldEntity.
        :param format: The format of this FieldEntity.
        :param id: The id of this FieldEntity.
        :param is_enum: The is_enum of this FieldEntity.
        :param label: The label of this FieldEntity.
        :param limit: The limit of this FieldEntity.
        :param methods: The methods of this FieldEntity.
        :param name: The name of this FieldEntity.
        :param relation: The relation of this FieldEntity.
        :param type: The type of this FieldEntity.
        """
        self.openapi_types = {
            'array_item': str,
            'entity': List[str],
            'format': str,
            'id': str,
            'is_enum': bool,
            'label': str,
            'limit': int,
            'methods': object,
            'name': str,
            'relation': List[str],
            'type': str
        }

        self.attribute_map = {
            'array_item': 'arrayItem',
            'entity': 'entity',
            'format': 'format',
            'id': 'id',
            'is_enum': 'isEnum',
            'label': 'label',
            'limit': 'limit',
            'methods': 'methods',
            'name': 'name',
            'relation': 'relation',
            'type': 'type'
        }

        self._array_item = array_item
        self._entity = entity
        self._format = format
        self._id = id
        self._is_enum = is_enum
        self._label = label
        self._limit = limit
        self._methods = methods
        self._name = name
        self._relation = relation
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldEntity of this FieldEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def array_item(self):
        """Gets the array_item of this FieldEntity.

        Array Item

        :return: The array_item of this FieldEntity.
        :rtype: str
        """
        return self._array_item

    @array_item.setter
    def array_item(self, array_item):
        """Sets the array_item of this FieldEntity.

        Array Item

        :param array_item: The array_item of this FieldEntity.
        :type array_item: str
        """

        self._array_item = array_item

    @property
    def entity(self):
        """Gets the entity of this FieldEntity.

        Entity

        :return: The entity of this FieldEntity.
        :rtype: List[str]
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this FieldEntity.

        Entity

        :param entity: The entity of this FieldEntity.
        :type entity: List[str]
        """

        self._entity = entity

    @property
    def format(self):
        """Gets the format of this FieldEntity.

        Format

        :return: The format of this FieldEntity.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this FieldEntity.

        Format

        :param format: The format of this FieldEntity.
        :type format: str
        """

        self._format = format

    @property
    def id(self):
        """Gets the id of this FieldEntity.

        Field Identifier

        :return: The id of this FieldEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldEntity.

        Field Identifier

        :param id: The id of this FieldEntity.
        :type id: str
        """

        self._id = id

    @property
    def is_enum(self):
        """Gets the is_enum of this FieldEntity.

        Is Enum

        :return: The is_enum of this FieldEntity.
        :rtype: bool
        """
        return self._is_enum

    @is_enum.setter
    def is_enum(self, is_enum):
        """Sets the is_enum of this FieldEntity.

        Is Enum

        :param is_enum: The is_enum of this FieldEntity.
        :type is_enum: bool
        """

        self._is_enum = is_enum

    @property
    def label(self):
        """Gets the label of this FieldEntity.

        Label

        :return: The label of this FieldEntity.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FieldEntity.

        Label

        :param label: The label of this FieldEntity.
        :type label: str
        """

        self._label = label

    @property
    def limit(self):
        """Gets the limit of this FieldEntity.

        Limit

        :return: The limit of this FieldEntity.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this FieldEntity.

        Limit

        :param limit: The limit of this FieldEntity.
        :type limit: int
        """

        self._limit = limit

    @property
    def methods(self):
        """Gets the methods of this FieldEntity.


        :return: The methods of this FieldEntity.
        :rtype: object
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this FieldEntity.


        :param methods: The methods of this FieldEntity.
        :type methods: object
        """

        self._methods = methods

    @property
    def name(self):
        """Gets the name of this FieldEntity.

        Name

        :return: The name of this FieldEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldEntity.

        Name

        :param name: The name of this FieldEntity.
        :type name: str
        """

        self._name = name

    @property
    def relation(self):
        """Gets the relation of this FieldEntity.

        Relation

        :return: The relation of this FieldEntity.
        :rtype: List[str]
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this FieldEntity.

        Relation

        :param relation: The relation of this FieldEntity.
        :type relation: List[str]
        """

        self._relation = relation

    @property
    def type(self):
        """Gets the type of this FieldEntity.

        Type

        :return: The type of this FieldEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldEntity.

        Type

        :param type: The type of this FieldEntity.
        :type type: str
        """

        self._type = type
