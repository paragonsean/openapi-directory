# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relation import Relation
from openapi_server import util


class EventEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, ended_at: datetime=None, id: str=None, is_all_day: bool=None, location: str=None, relation: Relation=None, started_at: datetime=None, status: str=None, subject: str=None, updated_at: datetime=None):
        """EventEntity - a model defined in OpenAPI

        :param created_at: The created_at of this EventEntity.
        :param description: The description of this EventEntity.
        :param ended_at: The ended_at of this EventEntity.
        :param id: The id of this EventEntity.
        :param is_all_day: The is_all_day of this EventEntity.
        :param location: The location of this EventEntity.
        :param relation: The relation of this EventEntity.
        :param started_at: The started_at of this EventEntity.
        :param status: The status of this EventEntity.
        :param subject: The subject of this EventEntity.
        :param updated_at: The updated_at of this EventEntity.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'ended_at': datetime,
            'id': str,
            'is_all_day': bool,
            'location': str,
            'relation': Relation,
            'started_at': datetime,
            'status': str,
            'subject': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'ended_at': 'ended_at',
            'id': 'id',
            'is_all_day': 'is_all_day',
            'location': 'location',
            'relation': 'relation',
            'started_at': 'started_at',
            'status': 'status',
            'subject': 'subject',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._description = description
        self._ended_at = ended_at
        self._id = id
        self._is_all_day = is_all_day
        self._location = location
        self._relation = relation
        self._started_at = started_at
        self._status = status
        self._subject = subject
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventEntity of this EventEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this EventEntity.

        Created At

        :return: The created_at of this EventEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventEntity.

        Created At

        :param created_at: The created_at of this EventEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this EventEntity.

        Description

        :return: The description of this EventEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventEntity.

        Description

        :param description: The description of this EventEntity.
        :type description: str
        """

        self._description = description

    @property
    def ended_at(self):
        """Gets the ended_at of this EventEntity.

        Ended At

        :return: The ended_at of this EventEntity.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this EventEntity.

        Ended At

        :param ended_at: The ended_at of this EventEntity.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def id(self):
        """Gets the id of this EventEntity.

        Event Identifier

        :return: The id of this EventEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventEntity.

        Event Identifier

        :param id: The id of this EventEntity.
        :type id: str
        """

        self._id = id

    @property
    def is_all_day(self):
        """Gets the is_all_day of this EventEntity.

        Is All Day

        :return: The is_all_day of this EventEntity.
        :rtype: bool
        """
        return self._is_all_day

    @is_all_day.setter
    def is_all_day(self, is_all_day):
        """Sets the is_all_day of this EventEntity.

        Is All Day

        :param is_all_day: The is_all_day of this EventEntity.
        :type is_all_day: bool
        """

        self._is_all_day = is_all_day

    @property
    def location(self):
        """Gets the location of this EventEntity.

        Location

        :return: The location of this EventEntity.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EventEntity.

        Location

        :param location: The location of this EventEntity.
        :type location: str
        """

        self._location = location

    @property
    def relation(self):
        """Gets the relation of this EventEntity.


        :return: The relation of this EventEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this EventEntity.


        :param relation: The relation of this EventEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def started_at(self):
        """Gets the started_at of this EventEntity.

        Started At

        :return: The started_at of this EventEntity.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this EventEntity.

        Started At

        :param started_at: The started_at of this EventEntity.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this EventEntity.

        Status

        :return: The status of this EventEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventEntity.

        Status

        :param status: The status of this EventEntity.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this EventEntity.

        Subject

        :return: The subject of this EventEntity.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EventEntity.

        Subject

        :param subject: The subject of this EventEntity.
        :type subject: str
        """

        self._subject = subject

    @property
    def updated_at(self):
        """Gets the updated_at of this EventEntity.

        Updated At

        :return: The updated_at of this EventEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EventEntity.

        Updated At

        :param updated_at: The updated_at of this EventEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
