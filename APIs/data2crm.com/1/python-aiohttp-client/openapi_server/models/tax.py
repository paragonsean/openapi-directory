# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percent_value: float=None, type: str=None, value: float=None):
        """Tax - a model defined in OpenAPI

        :param percent_value: The percent_value of this Tax.
        :param type: The type of this Tax.
        :param value: The value of this Tax.
        """
        self.openapi_types = {
            'percent_value': float,
            'type': str,
            'value': float
        }

        self.attribute_map = {
            'percent_value': 'percent_value',
            'type': 'type',
            'value': 'value'
        }

        self._percent_value = percent_value
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tax of this Tax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percent_value(self):
        """Gets the percent_value of this Tax.

        Percent Value

        :return: The percent_value of this Tax.
        :rtype: float
        """
        return self._percent_value

    @percent_value.setter
    def percent_value(self, percent_value):
        """Sets the percent_value of this Tax.

        Percent Value

        :param percent_value: The percent_value of this Tax.
        :type percent_value: float
        """

        self._percent_value = percent_value

    @property
    def type(self):
        """Gets the type of this Tax.

        Type

        :return: The type of this Tax.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tax.

        Type

        :param type: The type of this Tax.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Tax.

        Value

        :return: The value of this Tax.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Tax.

        Value

        :param value: The value of this Tax.
        :type value: float
        """

        self._value = value
