# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_relation import AccountRelation
from openapi_server.models.attachment_relation import AttachmentRelation
from openapi_server.models.call_relation import CallRelation
from openapi_server.models.campaign_relation import CampaignRelation
from openapi_server.models.case_relation import CaseRelation
from openapi_server.models.comment_relation import CommentRelation
from openapi_server.models.contact_relation import ContactRelation
from openapi_server.models.email_relation import EmailRelation
from openapi_server.models.event_relation import EventRelation
from openapi_server.models.invoice_item_relation import InvoiceItemRelation
from openapi_server.models.invoice_relation import InvoiceRelation
from openapi_server.models.lead_relation import LeadRelation
from openapi_server.models.meeting_relation import MeetingRelation
from openapi_server.models.note_relation import NoteRelation
from openapi_server.models.opportunity_product_relation import OpportunityProductRelation
from openapi_server.models.opportunity_relation import OpportunityRelation
from openapi_server.models.post_relation import PostRelation
from openapi_server.models.price_book_item_relation import PriceBookItemRelation
from openapi_server.models.price_book_relation import PriceBookRelation
from openapi_server.models.product_relation import ProductRelation
from openapi_server.models.project_relation import ProjectRelation
from openapi_server.models.quote_item_relation import QuoteItemRelation
from openapi_server.models.quote_relation import QuoteRelation
from openapi_server.models.tag_relation import TagRelation
from openapi_server.models.task_relation import TaskRelation
from openapi_server.models.ticket_relation import TicketRelation
from openapi_server.models.user_relation import UserRelation
from openapi_server import util


class Relation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: List[AccountRelation]=None, attachment: List[AttachmentRelation]=None, call: List[CallRelation]=None, campaign: List[CampaignRelation]=None, case: List[CaseRelation]=None, comment: List[CommentRelation]=None, contact: List[ContactRelation]=None, email: List[EmailRelation]=None, event: List[EventRelation]=None, invoice: List[InvoiceRelation]=None, invoice_item: List[InvoiceItemRelation]=None, lead: List[LeadRelation]=None, meeting: List[MeetingRelation]=None, note: List[NoteRelation]=None, opportunity: List[OpportunityRelation]=None, opportunity_product: List[OpportunityProductRelation]=None, post: List[PostRelation]=None, price_book: List[PriceBookRelation]=None, price_book_item: List[PriceBookItemRelation]=None, product: List[ProductRelation]=None, project: List[ProjectRelation]=None, quote: List[QuoteRelation]=None, quote_item: List[QuoteItemRelation]=None, tag: List[TagRelation]=None, task: List[TaskRelation]=None, ticket: List[TicketRelation]=None, user: List[UserRelation]=None):
        """Relation - a model defined in OpenAPI

        :param account: The account of this Relation.
        :param attachment: The attachment of this Relation.
        :param call: The call of this Relation.
        :param campaign: The campaign of this Relation.
        :param case: The case of this Relation.
        :param comment: The comment of this Relation.
        :param contact: The contact of this Relation.
        :param email: The email of this Relation.
        :param event: The event of this Relation.
        :param invoice: The invoice of this Relation.
        :param invoice_item: The invoice_item of this Relation.
        :param lead: The lead of this Relation.
        :param meeting: The meeting of this Relation.
        :param note: The note of this Relation.
        :param opportunity: The opportunity of this Relation.
        :param opportunity_product: The opportunity_product of this Relation.
        :param post: The post of this Relation.
        :param price_book: The price_book of this Relation.
        :param price_book_item: The price_book_item of this Relation.
        :param product: The product of this Relation.
        :param project: The project of this Relation.
        :param quote: The quote of this Relation.
        :param quote_item: The quote_item of this Relation.
        :param tag: The tag of this Relation.
        :param task: The task of this Relation.
        :param ticket: The ticket of this Relation.
        :param user: The user of this Relation.
        """
        self.openapi_types = {
            'account': List[AccountRelation],
            'attachment': List[AttachmentRelation],
            'call': List[CallRelation],
            'campaign': List[CampaignRelation],
            'case': List[CaseRelation],
            'comment': List[CommentRelation],
            'contact': List[ContactRelation],
            'email': List[EmailRelation],
            'event': List[EventRelation],
            'invoice': List[InvoiceRelation],
            'invoice_item': List[InvoiceItemRelation],
            'lead': List[LeadRelation],
            'meeting': List[MeetingRelation],
            'note': List[NoteRelation],
            'opportunity': List[OpportunityRelation],
            'opportunity_product': List[OpportunityProductRelation],
            'post': List[PostRelation],
            'price_book': List[PriceBookRelation],
            'price_book_item': List[PriceBookItemRelation],
            'product': List[ProductRelation],
            'project': List[ProjectRelation],
            'quote': List[QuoteRelation],
            'quote_item': List[QuoteItemRelation],
            'tag': List[TagRelation],
            'task': List[TaskRelation],
            'ticket': List[TicketRelation],
            'user': List[UserRelation]
        }

        self.attribute_map = {
            'account': 'account',
            'attachment': 'attachment',
            'call': 'call',
            'campaign': 'campaign',
            'case': 'case',
            'comment': 'comment',
            'contact': 'contact',
            'email': 'email',
            'event': 'event',
            'invoice': 'invoice',
            'invoice_item': 'invoiceItem',
            'lead': 'lead',
            'meeting': 'meeting',
            'note': 'note',
            'opportunity': 'opportunity',
            'opportunity_product': 'opportunityProduct',
            'post': 'post',
            'price_book': 'priceBook',
            'price_book_item': 'priceBookItem',
            'product': 'product',
            'project': 'project',
            'quote': 'quote',
            'quote_item': 'quoteItem',
            'tag': 'tag',
            'task': 'task',
            'ticket': 'ticket',
            'user': 'user'
        }

        self._account = account
        self._attachment = attachment
        self._call = call
        self._campaign = campaign
        self._case = case
        self._comment = comment
        self._contact = contact
        self._email = email
        self._event = event
        self._invoice = invoice
        self._invoice_item = invoice_item
        self._lead = lead
        self._meeting = meeting
        self._note = note
        self._opportunity = opportunity
        self._opportunity_product = opportunity_product
        self._post = post
        self._price_book = price_book
        self._price_book_item = price_book_item
        self._product = product
        self._project = project
        self._quote = quote
        self._quote_item = quote_item
        self._tag = tag
        self._task = task
        self._ticket = ticket
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relation of this Relation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Relation.

        Account

        :return: The account of this Relation.
        :rtype: List[AccountRelation]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Relation.

        Account

        :param account: The account of this Relation.
        :type account: List[AccountRelation]
        """

        self._account = account

    @property
    def attachment(self):
        """Gets the attachment of this Relation.

        Attachment

        :return: The attachment of this Relation.
        :rtype: List[AttachmentRelation]
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this Relation.

        Attachment

        :param attachment: The attachment of this Relation.
        :type attachment: List[AttachmentRelation]
        """

        self._attachment = attachment

    @property
    def call(self):
        """Gets the call of this Relation.

        Call

        :return: The call of this Relation.
        :rtype: List[CallRelation]
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this Relation.

        Call

        :param call: The call of this Relation.
        :type call: List[CallRelation]
        """

        self._call = call

    @property
    def campaign(self):
        """Gets the campaign of this Relation.

        Campaign

        :return: The campaign of this Relation.
        :rtype: List[CampaignRelation]
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this Relation.

        Campaign

        :param campaign: The campaign of this Relation.
        :type campaign: List[CampaignRelation]
        """

        self._campaign = campaign

    @property
    def case(self):
        """Gets the case of this Relation.

        Case

        :return: The case of this Relation.
        :rtype: List[CaseRelation]
        """
        return self._case

    @case.setter
    def case(self, case):
        """Sets the case of this Relation.

        Case

        :param case: The case of this Relation.
        :type case: List[CaseRelation]
        """

        self._case = case

    @property
    def comment(self):
        """Gets the comment of this Relation.

        Comment

        :return: The comment of this Relation.
        :rtype: List[CommentRelation]
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Relation.

        Comment

        :param comment: The comment of this Relation.
        :type comment: List[CommentRelation]
        """

        self._comment = comment

    @property
    def contact(self):
        """Gets the contact of this Relation.

        Contact

        :return: The contact of this Relation.
        :rtype: List[ContactRelation]
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Relation.

        Contact

        :param contact: The contact of this Relation.
        :type contact: List[ContactRelation]
        """

        self._contact = contact

    @property
    def email(self):
        """Gets the email of this Relation.

        Email

        :return: The email of this Relation.
        :rtype: List[EmailRelation]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Relation.

        Email

        :param email: The email of this Relation.
        :type email: List[EmailRelation]
        """

        self._email = email

    @property
    def event(self):
        """Gets the event of this Relation.

        Event

        :return: The event of this Relation.
        :rtype: List[EventRelation]
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Relation.

        Event

        :param event: The event of this Relation.
        :type event: List[EventRelation]
        """

        self._event = event

    @property
    def invoice(self):
        """Gets the invoice of this Relation.

        Invoice

        :return: The invoice of this Relation.
        :rtype: List[InvoiceRelation]
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this Relation.

        Invoice

        :param invoice: The invoice of this Relation.
        :type invoice: List[InvoiceRelation]
        """

        self._invoice = invoice

    @property
    def invoice_item(self):
        """Gets the invoice_item of this Relation.

        Invoice Item

        :return: The invoice_item of this Relation.
        :rtype: List[InvoiceItemRelation]
        """
        return self._invoice_item

    @invoice_item.setter
    def invoice_item(self, invoice_item):
        """Sets the invoice_item of this Relation.

        Invoice Item

        :param invoice_item: The invoice_item of this Relation.
        :type invoice_item: List[InvoiceItemRelation]
        """

        self._invoice_item = invoice_item

    @property
    def lead(self):
        """Gets the lead of this Relation.

        Lead

        :return: The lead of this Relation.
        :rtype: List[LeadRelation]
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this Relation.

        Lead

        :param lead: The lead of this Relation.
        :type lead: List[LeadRelation]
        """

        self._lead = lead

    @property
    def meeting(self):
        """Gets the meeting of this Relation.

        Meeting

        :return: The meeting of this Relation.
        :rtype: List[MeetingRelation]
        """
        return self._meeting

    @meeting.setter
    def meeting(self, meeting):
        """Sets the meeting of this Relation.

        Meeting

        :param meeting: The meeting of this Relation.
        :type meeting: List[MeetingRelation]
        """

        self._meeting = meeting

    @property
    def note(self):
        """Gets the note of this Relation.

        Note

        :return: The note of this Relation.
        :rtype: List[NoteRelation]
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Relation.

        Note

        :param note: The note of this Relation.
        :type note: List[NoteRelation]
        """

        self._note = note

    @property
    def opportunity(self):
        """Gets the opportunity of this Relation.

        Opportunity

        :return: The opportunity of this Relation.
        :rtype: List[OpportunityRelation]
        """
        return self._opportunity

    @opportunity.setter
    def opportunity(self, opportunity):
        """Sets the opportunity of this Relation.

        Opportunity

        :param opportunity: The opportunity of this Relation.
        :type opportunity: List[OpportunityRelation]
        """

        self._opportunity = opportunity

    @property
    def opportunity_product(self):
        """Gets the opportunity_product of this Relation.

        Opportunity Product

        :return: The opportunity_product of this Relation.
        :rtype: List[OpportunityProductRelation]
        """
        return self._opportunity_product

    @opportunity_product.setter
    def opportunity_product(self, opportunity_product):
        """Sets the opportunity_product of this Relation.

        Opportunity Product

        :param opportunity_product: The opportunity_product of this Relation.
        :type opportunity_product: List[OpportunityProductRelation]
        """

        self._opportunity_product = opportunity_product

    @property
    def post(self):
        """Gets the post of this Relation.

        Post

        :return: The post of this Relation.
        :rtype: List[PostRelation]
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this Relation.

        Post

        :param post: The post of this Relation.
        :type post: List[PostRelation]
        """

        self._post = post

    @property
    def price_book(self):
        """Gets the price_book of this Relation.

        Price Book

        :return: The price_book of this Relation.
        :rtype: List[PriceBookRelation]
        """
        return self._price_book

    @price_book.setter
    def price_book(self, price_book):
        """Sets the price_book of this Relation.

        Price Book

        :param price_book: The price_book of this Relation.
        :type price_book: List[PriceBookRelation]
        """

        self._price_book = price_book

    @property
    def price_book_item(self):
        """Gets the price_book_item of this Relation.

        Price Book Item

        :return: The price_book_item of this Relation.
        :rtype: List[PriceBookItemRelation]
        """
        return self._price_book_item

    @price_book_item.setter
    def price_book_item(self, price_book_item):
        """Sets the price_book_item of this Relation.

        Price Book Item

        :param price_book_item: The price_book_item of this Relation.
        :type price_book_item: List[PriceBookItemRelation]
        """

        self._price_book_item = price_book_item

    @property
    def product(self):
        """Gets the product of this Relation.

        Product

        :return: The product of this Relation.
        :rtype: List[ProductRelation]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Relation.

        Product

        :param product: The product of this Relation.
        :type product: List[ProductRelation]
        """

        self._product = product

    @property
    def project(self):
        """Gets the project of this Relation.

        Project

        :return: The project of this Relation.
        :rtype: List[ProjectRelation]
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Relation.

        Project

        :param project: The project of this Relation.
        :type project: List[ProjectRelation]
        """

        self._project = project

    @property
    def quote(self):
        """Gets the quote of this Relation.

        Quote

        :return: The quote of this Relation.
        :rtype: List[QuoteRelation]
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this Relation.

        Quote

        :param quote: The quote of this Relation.
        :type quote: List[QuoteRelation]
        """

        self._quote = quote

    @property
    def quote_item(self):
        """Gets the quote_item of this Relation.

        Quote Item

        :return: The quote_item of this Relation.
        :rtype: List[QuoteItemRelation]
        """
        return self._quote_item

    @quote_item.setter
    def quote_item(self, quote_item):
        """Sets the quote_item of this Relation.

        Quote Item

        :param quote_item: The quote_item of this Relation.
        :type quote_item: List[QuoteItemRelation]
        """

        self._quote_item = quote_item

    @property
    def tag(self):
        """Gets the tag of this Relation.

        Tag

        :return: The tag of this Relation.
        :rtype: List[TagRelation]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Relation.

        Tag

        :param tag: The tag of this Relation.
        :type tag: List[TagRelation]
        """

        self._tag = tag

    @property
    def task(self):
        """Gets the task of this Relation.

        Task

        :return: The task of this Relation.
        :rtype: List[TaskRelation]
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this Relation.

        Task

        :param task: The task of this Relation.
        :type task: List[TaskRelation]
        """

        self._task = task

    @property
    def ticket(self):
        """Gets the ticket of this Relation.

        Ticket

        :return: The ticket of this Relation.
        :rtype: List[TicketRelation]
        """
        return self._ticket

    @ticket.setter
    def ticket(self, ticket):
        """Sets the ticket of this Relation.

        Ticket

        :param ticket: The ticket of this Relation.
        :type ticket: List[TicketRelation]
        """

        self._ticket = ticket

    @property
    def user(self):
        """Gets the user of this Relation.

        User

        :return: The user of this Relation.
        :rtype: List[UserRelation]
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Relation.

        User

        :param user: The user of this Relation.
        :type user: List[UserRelation]
        """

        self._user = user
