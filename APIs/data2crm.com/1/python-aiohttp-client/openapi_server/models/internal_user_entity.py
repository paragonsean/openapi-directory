# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InternalUserEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, email: str=None, internal_request_count: int=None, key: str=None, last_used_at: datetime=None, name: str=None, organization: str=None, phone: str=None, request_count: int=None, roles: List[str]=None, status: str=None, updated_at: datetime=None):
        """InternalUserEntity - a model defined in OpenAPI

        :param created_at: The created_at of this InternalUserEntity.
        :param email: The email of this InternalUserEntity.
        :param internal_request_count: The internal_request_count of this InternalUserEntity.
        :param key: The key of this InternalUserEntity.
        :param last_used_at: The last_used_at of this InternalUserEntity.
        :param name: The name of this InternalUserEntity.
        :param organization: The organization of this InternalUserEntity.
        :param phone: The phone of this InternalUserEntity.
        :param request_count: The request_count of this InternalUserEntity.
        :param roles: The roles of this InternalUserEntity.
        :param status: The status of this InternalUserEntity.
        :param updated_at: The updated_at of this InternalUserEntity.
        """
        self.openapi_types = {
            'created_at': datetime,
            'email': str,
            'internal_request_count': int,
            'key': str,
            'last_used_at': datetime,
            'name': str,
            'organization': str,
            'phone': str,
            'request_count': int,
            'roles': List[str],
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'email': 'email',
            'internal_request_count': 'internal_request_count',
            'key': 'key',
            'last_used_at': 'last_used_at',
            'name': 'name',
            'organization': 'organization',
            'phone': 'phone',
            'request_count': 'request_count',
            'roles': 'roles',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._email = email
        self._internal_request_count = internal_request_count
        self._key = key
        self._last_used_at = last_used_at
        self._name = name
        self._organization = organization
        self._phone = phone
        self._request_count = request_count
        self._roles = roles
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InternalUserEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InternalUserEntity of this InternalUserEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this InternalUserEntity.

        Created At

        :return: The created_at of this InternalUserEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InternalUserEntity.

        Created At

        :param created_at: The created_at of this InternalUserEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this InternalUserEntity.

        Email

        :return: The email of this InternalUserEntity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InternalUserEntity.

        Email

        :param email: The email of this InternalUserEntity.
        :type email: str
        """

        self._email = email

    @property
    def internal_request_count(self):
        """Gets the internal_request_count of this InternalUserEntity.

        Internal Request Count

        :return: The internal_request_count of this InternalUserEntity.
        :rtype: int
        """
        return self._internal_request_count

    @internal_request_count.setter
    def internal_request_count(self, internal_request_count):
        """Sets the internal_request_count of this InternalUserEntity.

        Internal Request Count

        :param internal_request_count: The internal_request_count of this InternalUserEntity.
        :type internal_request_count: int
        """

        self._internal_request_count = internal_request_count

    @property
    def key(self):
        """Gets the key of this InternalUserEntity.

        User Key

        :return: The key of this InternalUserEntity.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InternalUserEntity.

        User Key

        :param key: The key of this InternalUserEntity.
        :type key: str
        """

        self._key = key

    @property
    def last_used_at(self):
        """Gets the last_used_at of this InternalUserEntity.

        Last Used At

        :return: The last_used_at of this InternalUserEntity.
        :rtype: datetime
        """
        return self._last_used_at

    @last_used_at.setter
    def last_used_at(self, last_used_at):
        """Sets the last_used_at of this InternalUserEntity.

        Last Used At

        :param last_used_at: The last_used_at of this InternalUserEntity.
        :type last_used_at: datetime
        """

        self._last_used_at = last_used_at

    @property
    def name(self):
        """Gets the name of this InternalUserEntity.

        Name

        :return: The name of this InternalUserEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InternalUserEntity.

        Name

        :param name: The name of this InternalUserEntity.
        :type name: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this InternalUserEntity.

        Organization

        :return: The organization of this InternalUserEntity.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this InternalUserEntity.

        Organization

        :param organization: The organization of this InternalUserEntity.
        :type organization: str
        """

        self._organization = organization

    @property
    def phone(self):
        """Gets the phone of this InternalUserEntity.

        Phone

        :return: The phone of this InternalUserEntity.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this InternalUserEntity.

        Phone

        :param phone: The phone of this InternalUserEntity.
        :type phone: str
        """

        self._phone = phone

    @property
    def request_count(self):
        """Gets the request_count of this InternalUserEntity.

        Request Count

        :return: The request_count of this InternalUserEntity.
        :rtype: int
        """
        return self._request_count

    @request_count.setter
    def request_count(self, request_count):
        """Sets the request_count of this InternalUserEntity.

        Request Count

        :param request_count: The request_count of this InternalUserEntity.
        :type request_count: int
        """

        self._request_count = request_count

    @property
    def roles(self):
        """Gets the roles of this InternalUserEntity.

        Roles

        :return: The roles of this InternalUserEntity.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InternalUserEntity.

        Roles

        :param roles: The roles of this InternalUserEntity.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def status(self):
        """Gets the status of this InternalUserEntity.

        Status

        :return: The status of this InternalUserEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InternalUserEntity.

        Status

        :param status: The status of this InternalUserEntity.
        :type status: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this InternalUserEntity.

        Updated At

        :return: The updated_at of this InternalUserEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InternalUserEntity.

        Updated At

        :param updated_at: The updated_at of this InternalUserEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
