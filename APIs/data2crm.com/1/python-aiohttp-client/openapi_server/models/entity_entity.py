# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, collection: str=None, custom_field: object=None, data_cache: object=None, entity: str=None, id: str=None, internal_type: str=None, limit: int=None, methods: object=None, name: str=None, similar_to: List[str]=None, type: str=None):
        """EntityEntity - a model defined in OpenAPI

        :param category: The category of this EntityEntity.
        :param collection: The collection of this EntityEntity.
        :param custom_field: The custom_field of this EntityEntity.
        :param data_cache: The data_cache of this EntityEntity.
        :param entity: The entity of this EntityEntity.
        :param id: The id of this EntityEntity.
        :param internal_type: The internal_type of this EntityEntity.
        :param limit: The limit of this EntityEntity.
        :param methods: The methods of this EntityEntity.
        :param name: The name of this EntityEntity.
        :param similar_to: The similar_to of this EntityEntity.
        :param type: The type of this EntityEntity.
        """
        self.openapi_types = {
            'category': str,
            'collection': str,
            'custom_field': object,
            'data_cache': object,
            'entity': str,
            'id': str,
            'internal_type': str,
            'limit': int,
            'methods': object,
            'name': str,
            'similar_to': List[str],
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'collection': 'collection',
            'custom_field': 'customField',
            'data_cache': 'dataCache',
            'entity': 'entity',
            'id': 'id',
            'internal_type': 'internalType',
            'limit': 'limit',
            'methods': 'methods',
            'name': 'name',
            'similar_to': 'similarTo',
            'type': 'type'
        }

        self._category = category
        self._collection = collection
        self._custom_field = custom_field
        self._data_cache = data_cache
        self._entity = entity
        self._id = id
        self._internal_type = internal_type
        self._limit = limit
        self._methods = methods
        self._name = name
        self._similar_to = similar_to
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityEntity of this EntityEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this EntityEntity.

        Category

        :return: The category of this EntityEntity.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EntityEntity.

        Category

        :param category: The category of this EntityEntity.
        :type category: str
        """
        allowed_values = ["basic", "asset", "additional"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def collection(self):
        """Gets the collection of this EntityEntity.

        Collection

        :return: The collection of this EntityEntity.
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this EntityEntity.

        Collection

        :param collection: The collection of this EntityEntity.
        :type collection: str
        """

        self._collection = collection

    @property
    def custom_field(self):
        """Gets the custom_field of this EntityEntity.


        :return: The custom_field of this EntityEntity.
        :rtype: object
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this EntityEntity.


        :param custom_field: The custom_field of this EntityEntity.
        :type custom_field: object
        """

        self._custom_field = custom_field

    @property
    def data_cache(self):
        """Gets the data_cache of this EntityEntity.


        :return: The data_cache of this EntityEntity.
        :rtype: object
        """
        return self._data_cache

    @data_cache.setter
    def data_cache(self, data_cache):
        """Sets the data_cache of this EntityEntity.


        :param data_cache: The data_cache of this EntityEntity.
        :type data_cache: object
        """

        self._data_cache = data_cache

    @property
    def entity(self):
        """Gets the entity of this EntityEntity.

        Entity

        :return: The entity of this EntityEntity.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityEntity.

        Entity

        :param entity: The entity of this EntityEntity.
        :type entity: str
        """

        self._entity = entity

    @property
    def id(self):
        """Gets the id of this EntityEntity.

        Entity Identifier

        :return: The id of this EntityEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityEntity.

        Entity Identifier

        :param id: The id of this EntityEntity.
        :type id: str
        """

        self._id = id

    @property
    def internal_type(self):
        """Gets the internal_type of this EntityEntity.

        Internal Type

        :return: The internal_type of this EntityEntity.
        :rtype: str
        """
        return self._internal_type

    @internal_type.setter
    def internal_type(self, internal_type):
        """Sets the internal_type of this EntityEntity.

        Internal Type

        :param internal_type: The internal_type of this EntityEntity.
        :type internal_type: str
        """
        allowed_values = ["not_unified", "unified"]  # noqa: E501
        if internal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `internal_type` ({0}), must be one of {1}"
                .format(internal_type, allowed_values)
            )

        self._internal_type = internal_type

    @property
    def limit(self):
        """Gets the limit of this EntityEntity.

        Limit

        :return: The limit of this EntityEntity.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this EntityEntity.

        Limit

        :param limit: The limit of this EntityEntity.
        :type limit: int
        """

        self._limit = limit

    @property
    def methods(self):
        """Gets the methods of this EntityEntity.


        :return: The methods of this EntityEntity.
        :rtype: object
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this EntityEntity.


        :param methods: The methods of this EntityEntity.
        :type methods: object
        """

        self._methods = methods

    @property
    def name(self):
        """Gets the name of this EntityEntity.

        Name

        :return: The name of this EntityEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityEntity.

        Name

        :param name: The name of this EntityEntity.
        :type name: str
        """

        self._name = name

    @property
    def similar_to(self):
        """Gets the similar_to of this EntityEntity.

        Percentage to unified entity

        :return: The similar_to of this EntityEntity.
        :rtype: List[str]
        """
        return self._similar_to

    @similar_to.setter
    def similar_to(self, similar_to):
        """Sets the similar_to of this EntityEntity.

        Percentage to unified entity

        :param similar_to: The similar_to of this EntityEntity.
        :type similar_to: List[str]
        """

        self._similar_to = similar_to

    @property
    def type(self):
        """Gets the type of this EntityEntity.

        Type

        :return: The type of this EntityEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityEntity.

        Type

        :param type: The type of this EntityEntity.
        :type type: str
        """
        allowed_values = ["standard", "custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
