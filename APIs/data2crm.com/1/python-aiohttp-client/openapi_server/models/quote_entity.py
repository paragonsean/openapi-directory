# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.currency import Currency
from openapi_server.models.discount import Discount
from openapi_server.models.relation import Relation
from openapi_server.models.tax import Tax
from openapi_server import util


class QuoteEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: List[Address]=None, adjustment: float=None, carrier: str=None, created_at: datetime=None, currency: Currency=None, description: str=None, discount: List[Discount]=None, expiration_date: date=None, grand_total: float=None, id: str=None, number: str=None, payment_terms: str=None, relation: Relation=None, shipping_and_handling: float=None, status: str=None, subject: str=None, subtotal: float=None, tax: List[Tax]=None, terms_and_conditions: str=None, total_price: float=None, updated_at: datetime=None):
        """QuoteEntity - a model defined in OpenAPI

        :param address: The address of this QuoteEntity.
        :param adjustment: The adjustment of this QuoteEntity.
        :param carrier: The carrier of this QuoteEntity.
        :param created_at: The created_at of this QuoteEntity.
        :param currency: The currency of this QuoteEntity.
        :param description: The description of this QuoteEntity.
        :param discount: The discount of this QuoteEntity.
        :param expiration_date: The expiration_date of this QuoteEntity.
        :param grand_total: The grand_total of this QuoteEntity.
        :param id: The id of this QuoteEntity.
        :param number: The number of this QuoteEntity.
        :param payment_terms: The payment_terms of this QuoteEntity.
        :param relation: The relation of this QuoteEntity.
        :param shipping_and_handling: The shipping_and_handling of this QuoteEntity.
        :param status: The status of this QuoteEntity.
        :param subject: The subject of this QuoteEntity.
        :param subtotal: The subtotal of this QuoteEntity.
        :param tax: The tax of this QuoteEntity.
        :param terms_and_conditions: The terms_and_conditions of this QuoteEntity.
        :param total_price: The total_price of this QuoteEntity.
        :param updated_at: The updated_at of this QuoteEntity.
        """
        self.openapi_types = {
            'address': List[Address],
            'adjustment': float,
            'carrier': str,
            'created_at': datetime,
            'currency': Currency,
            'description': str,
            'discount': List[Discount],
            'expiration_date': date,
            'grand_total': float,
            'id': str,
            'number': str,
            'payment_terms': str,
            'relation': Relation,
            'shipping_and_handling': float,
            'status': str,
            'subject': str,
            'subtotal': float,
            'tax': List[Tax],
            'terms_and_conditions': str,
            'total_price': float,
            'updated_at': datetime
        }

        self.attribute_map = {
            'address': 'address',
            'adjustment': 'adjustment',
            'carrier': 'carrier',
            'created_at': 'created_at',
            'currency': 'currency',
            'description': 'description',
            'discount': 'discount',
            'expiration_date': 'expiration_date',
            'grand_total': 'grand_total',
            'id': 'id',
            'number': 'number',
            'payment_terms': 'payment_terms',
            'relation': 'relation',
            'shipping_and_handling': 'shipping_and_handling',
            'status': 'status',
            'subject': 'subject',
            'subtotal': 'subtotal',
            'tax': 'tax',
            'terms_and_conditions': 'terms_and_conditions',
            'total_price': 'total_price',
            'updated_at': 'updated_at'
        }

        self._address = address
        self._adjustment = adjustment
        self._carrier = carrier
        self._created_at = created_at
        self._currency = currency
        self._description = description
        self._discount = discount
        self._expiration_date = expiration_date
        self._grand_total = grand_total
        self._id = id
        self._number = number
        self._payment_terms = payment_terms
        self._relation = relation
        self._shipping_and_handling = shipping_and_handling
        self._status = status
        self._subject = subject
        self._subtotal = subtotal
        self._tax = tax
        self._terms_and_conditions = terms_and_conditions
        self._total_price = total_price
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuoteEntity of this QuoteEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this QuoteEntity.

        Address

        :return: The address of this QuoteEntity.
        :rtype: List[Address]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this QuoteEntity.

        Address

        :param address: The address of this QuoteEntity.
        :type address: List[Address]
        """

        self._address = address

    @property
    def adjustment(self):
        """Gets the adjustment of this QuoteEntity.

        Adjustment

        :return: The adjustment of this QuoteEntity.
        :rtype: float
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this QuoteEntity.

        Adjustment

        :param adjustment: The adjustment of this QuoteEntity.
        :type adjustment: float
        """

        self._adjustment = adjustment

    @property
    def carrier(self):
        """Gets the carrier of this QuoteEntity.

        Carrier

        :return: The carrier of this QuoteEntity.
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this QuoteEntity.

        Carrier

        :param carrier: The carrier of this QuoteEntity.
        :type carrier: str
        """

        self._carrier = carrier

    @property
    def created_at(self):
        """Gets the created_at of this QuoteEntity.

        Created At

        :return: The created_at of this QuoteEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this QuoteEntity.

        Created At

        :param created_at: The created_at of this QuoteEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this QuoteEntity.


        :return: The currency of this QuoteEntity.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this QuoteEntity.


        :param currency: The currency of this QuoteEntity.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this QuoteEntity.

        Description

        :return: The description of this QuoteEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this QuoteEntity.

        Description

        :param description: The description of this QuoteEntity.
        :type description: str
        """

        self._description = description

    @property
    def discount(self):
        """Gets the discount of this QuoteEntity.

        Discount

        :return: The discount of this QuoteEntity.
        :rtype: List[Discount]
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this QuoteEntity.

        Discount

        :param discount: The discount of this QuoteEntity.
        :type discount: List[Discount]
        """

        self._discount = discount

    @property
    def expiration_date(self):
        """Gets the expiration_date of this QuoteEntity.

        Expiration Date

        :return: The expiration_date of this QuoteEntity.
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this QuoteEntity.

        Expiration Date

        :param expiration_date: The expiration_date of this QuoteEntity.
        :type expiration_date: date
        """

        self._expiration_date = expiration_date

    @property
    def grand_total(self):
        """Gets the grand_total of this QuoteEntity.

        Grand Total

        :return: The grand_total of this QuoteEntity.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this QuoteEntity.

        Grand Total

        :param grand_total: The grand_total of this QuoteEntity.
        :type grand_total: float
        """

        self._grand_total = grand_total

    @property
    def id(self):
        """Gets the id of this QuoteEntity.

        Quote Identifier

        :return: The id of this QuoteEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuoteEntity.

        Quote Identifier

        :param id: The id of this QuoteEntity.
        :type id: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this QuoteEntity.

        Number

        :return: The number of this QuoteEntity.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this QuoteEntity.

        Number

        :param number: The number of this QuoteEntity.
        :type number: str
        """

        self._number = number

    @property
    def payment_terms(self):
        """Gets the payment_terms of this QuoteEntity.

        Payment Terms

        :return: The payment_terms of this QuoteEntity.
        :rtype: str
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this QuoteEntity.

        Payment Terms

        :param payment_terms: The payment_terms of this QuoteEntity.
        :type payment_terms: str
        """

        self._payment_terms = payment_terms

    @property
    def relation(self):
        """Gets the relation of this QuoteEntity.


        :return: The relation of this QuoteEntity.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this QuoteEntity.


        :param relation: The relation of this QuoteEntity.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def shipping_and_handling(self):
        """Gets the shipping_and_handling of this QuoteEntity.

        Shipping And Handling

        :return: The shipping_and_handling of this QuoteEntity.
        :rtype: float
        """
        return self._shipping_and_handling

    @shipping_and_handling.setter
    def shipping_and_handling(self, shipping_and_handling):
        """Sets the shipping_and_handling of this QuoteEntity.

        Shipping And Handling

        :param shipping_and_handling: The shipping_and_handling of this QuoteEntity.
        :type shipping_and_handling: float
        """

        self._shipping_and_handling = shipping_and_handling

    @property
    def status(self):
        """Gets the status of this QuoteEntity.

        Status

        :return: The status of this QuoteEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QuoteEntity.

        Status

        :param status: The status of this QuoteEntity.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this QuoteEntity.

        Subject

        :return: The subject of this QuoteEntity.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this QuoteEntity.

        Subject

        :param subject: The subject of this QuoteEntity.
        :type subject: str
        """

        self._subject = subject

    @property
    def subtotal(self):
        """Gets the subtotal of this QuoteEntity.

        Subtotal

        :return: The subtotal of this QuoteEntity.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this QuoteEntity.

        Subtotal

        :param subtotal: The subtotal of this QuoteEntity.
        :type subtotal: float
        """

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this QuoteEntity.

        Tax

        :return: The tax of this QuoteEntity.
        :rtype: List[Tax]
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this QuoteEntity.

        Tax

        :param tax: The tax of this QuoteEntity.
        :type tax: List[Tax]
        """

        self._tax = tax

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this QuoteEntity.

        Terms And Conditions

        :return: The terms_and_conditions of this QuoteEntity.
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this QuoteEntity.

        Terms And Conditions

        :param terms_and_conditions: The terms_and_conditions of this QuoteEntity.
        :type terms_and_conditions: str
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def total_price(self):
        """Gets the total_price of this QuoteEntity.

        Total Price

        :return: The total_price of this QuoteEntity.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this QuoteEntity.

        Total Price

        :param total_price: The total_price of this QuoteEntity.
        :type total_price: float
        """

        self._total_price = total_price

    @property
    def updated_at(self):
        """Gets the updated_at of this QuoteEntity.

        Updated At

        :return: The updated_at of this QuoteEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this QuoteEntity.

        Updated At

        :param updated_at: The updated_at of this QuoteEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
