/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RewindTimeSeriesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:22.874424-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RewindTimeSeriesResponse {
  public static final String SERIALIZED_NAME_CUSTOMER_ERROR = "customerError";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ERROR)
  private Double customerError;

  public static final String SERIALIZED_NAME_ERROR_DIFF = "errorDiff";
  @SerializedName(SERIALIZED_NAME_ERROR_DIFF)
  private Double errorDiff;

  public static final String SERIALIZED_NAME_ICUE_ERROR = "icueError";
  @SerializedName(SERIALIZED_NAME_ICUE_ERROR)
  private Double icueError;

  public static final String SERIALIZED_NAME_TIME_SERIES = "timeSeries";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES)
  private String timeSeries;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Double totalCost;

  public static final String SERIALIZED_NAME_USE_ICUE = "useIcue";
  @SerializedName(SERIALIZED_NAME_USE_ICUE)
  private Boolean useIcue;

  public RewindTimeSeriesResponse() {
  }

  public RewindTimeSeriesResponse customerError(Double customerError) {
    this.customerError = customerError;
    return this;
  }

  /**
   * Get customerError
   * @return customerError
   */
  @javax.annotation.Nullable
  public Double getCustomerError() {
    return customerError;
  }

  public void setCustomerError(Double customerError) {
    this.customerError = customerError;
  }


  public RewindTimeSeriesResponse errorDiff(Double errorDiff) {
    this.errorDiff = errorDiff;
    return this;
  }

  /**
   * Get errorDiff
   * @return errorDiff
   */
  @javax.annotation.Nullable
  public Double getErrorDiff() {
    return errorDiff;
  }

  public void setErrorDiff(Double errorDiff) {
    this.errorDiff = errorDiff;
  }


  public RewindTimeSeriesResponse icueError(Double icueError) {
    this.icueError = icueError;
    return this;
  }

  /**
   * Get icueError
   * @return icueError
   */
  @javax.annotation.Nullable
  public Double getIcueError() {
    return icueError;
  }

  public void setIcueError(Double icueError) {
    this.icueError = icueError;
  }


  public RewindTimeSeriesResponse timeSeries(String timeSeries) {
    this.timeSeries = timeSeries;
    return this;
  }

  /**
   * Get timeSeries
   * @return timeSeries
   */
  @javax.annotation.Nullable
  public String getTimeSeries() {
    return timeSeries;
  }

  public void setTimeSeries(String timeSeries) {
    this.timeSeries = timeSeries;
  }


  public RewindTimeSeriesResponse totalCost(Double totalCost) {
    this.totalCost = totalCost;
    return this;
  }

  /**
   * Get totalCost
   * @return totalCost
   */
  @javax.annotation.Nullable
  public Double getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(Double totalCost) {
    this.totalCost = totalCost;
  }


  public RewindTimeSeriesResponse useIcue(Boolean useIcue) {
    this.useIcue = useIcue;
    return this;
  }

  /**
   * Get useIcue
   * @return useIcue
   */
  @javax.annotation.Nullable
  public Boolean getUseIcue() {
    return useIcue;
  }

  public void setUseIcue(Boolean useIcue) {
    this.useIcue = useIcue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RewindTimeSeriesResponse rewindTimeSeriesResponse = (RewindTimeSeriesResponse) o;
    return Objects.equals(this.customerError, rewindTimeSeriesResponse.customerError) &&
        Objects.equals(this.errorDiff, rewindTimeSeriesResponse.errorDiff) &&
        Objects.equals(this.icueError, rewindTimeSeriesResponse.icueError) &&
        Objects.equals(this.timeSeries, rewindTimeSeriesResponse.timeSeries) &&
        Objects.equals(this.totalCost, rewindTimeSeriesResponse.totalCost) &&
        Objects.equals(this.useIcue, rewindTimeSeriesResponse.useIcue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerError, errorDiff, icueError, timeSeries, totalCost, useIcue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RewindTimeSeriesResponse {\n");
    sb.append("    customerError: ").append(toIndentedString(customerError)).append("\n");
    sb.append("    errorDiff: ").append(toIndentedString(errorDiff)).append("\n");
    sb.append("    icueError: ").append(toIndentedString(icueError)).append("\n");
    sb.append("    timeSeries: ").append(toIndentedString(timeSeries)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    useIcue: ").append(toIndentedString(useIcue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerError");
    openapiFields.add("errorDiff");
    openapiFields.add("icueError");
    openapiFields.add("timeSeries");
    openapiFields.add("totalCost");
    openapiFields.add("useIcue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RewindTimeSeriesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RewindTimeSeriesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RewindTimeSeriesResponse is not found in the empty JSON string", RewindTimeSeriesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RewindTimeSeriesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RewindTimeSeriesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("timeSeries") != null && !jsonObj.get("timeSeries").isJsonNull()) && !jsonObj.get("timeSeries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeSeries").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RewindTimeSeriesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RewindTimeSeriesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RewindTimeSeriesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RewindTimeSeriesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RewindTimeSeriesResponse>() {
           @Override
           public void write(JsonWriter out, RewindTimeSeriesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RewindTimeSeriesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RewindTimeSeriesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RewindTimeSeriesResponse
   * @throws IOException if the JSON string is invalid with respect to RewindTimeSeriesResponse
   */
  public static RewindTimeSeriesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RewindTimeSeriesResponse.class);
  }

  /**
   * Convert an instance of RewindTimeSeriesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

