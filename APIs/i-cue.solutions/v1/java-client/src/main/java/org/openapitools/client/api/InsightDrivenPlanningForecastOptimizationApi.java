/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AiPlanningLevelRequest;
import java.io.File;
import org.openapitools.client.model.ForecastBottomUpResponse;
import org.openapitools.client.model.ForecastResponse;
import org.openapitools.client.model.FullDetailsForecastResponse;
import org.openapitools.client.model.HistoryAndForecastResponse;
import org.openapitools.client.model.JobResponse;
import org.openapitools.client.model.OptimalParameterResponse;
import org.openapitools.client.model.OutliersRequest;
import org.openapitools.client.model.PlanningLevelReRunRequest;
import org.openapitools.client.model.PlanningLevelRequest;
import org.openapitools.client.model.TimeSeriesOutliersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightDrivenPlanningForecastOptimizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InsightDrivenPlanningForecastOptimizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightDrivenPlanningForecastOptimizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for forecastAIHistoryAndForecastPost
     * @param token User Authentication Token (optional)
     * @param aiPlanningLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastAIHistoryAndForecastPostCall(String token, AiPlanningLevelRequest aiPlanningLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = aiPlanningLevelRequest;

        // create path and map variables
        String localVarPath = "/forecast/AI/history-and-forecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastAIHistoryAndForecastPostValidateBeforeCall(String token, AiPlanningLevelRequest aiPlanningLevelRequest, final ApiCallback _callback) throws ApiException {
        return forecastAIHistoryAndForecastPostCall(token, aiPlanningLevelRequest, _callback);

    }

    /**
     * History and forecast utilizing advanced machine learning models
     * History and forecast utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
     * @param token User Authentication Token (optional)
     * @param aiPlanningLevelRequest  (optional)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JobResponse forecastAIHistoryAndForecastPost(String token, AiPlanningLevelRequest aiPlanningLevelRequest) throws ApiException {
        ApiResponse<JobResponse> localVarResp = forecastAIHistoryAndForecastPostWithHttpInfo(token, aiPlanningLevelRequest);
        return localVarResp.getData();
    }

    /**
     * History and forecast utilizing advanced machine learning models
     * History and forecast utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
     * @param token User Authentication Token (optional)
     * @param aiPlanningLevelRequest  (optional)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResponse> forecastAIHistoryAndForecastPostWithHttpInfo(String token, AiPlanningLevelRequest aiPlanningLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastAIHistoryAndForecastPostValidateBeforeCall(token, aiPlanningLevelRequest, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * History and forecast utilizing advanced machine learning models (asynchronously)
     * History and forecast utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
     * @param token User Authentication Token (optional)
     * @param aiPlanningLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastAIHistoryAndForecastPostAsync(String token, AiPlanningLevelRequest aiPlanningLevelRequest, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastAIHistoryAndForecastPostValidateBeforeCall(token, aiPlanningLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastAIPost
     * @param token User Authentication Token (optional)
     * @param aiPlanningLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastAIPostCall(String token, AiPlanningLevelRequest aiPlanningLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = aiPlanningLevelRequest;

        // create path and map variables
        String localVarPath = "/forecast/AI";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastAIPostValidateBeforeCall(String token, AiPlanningLevelRequest aiPlanningLevelRequest, final ApiCallback _callback) throws ApiException {
        return forecastAIPostCall(token, aiPlanningLevelRequest, _callback);

    }

    /**
     * Forecast utilizing advanced machine learning models
     * Forecast AI is utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
     * @param token User Authentication Token (optional)
     * @param aiPlanningLevelRequest  (optional)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JobResponse forecastAIPost(String token, AiPlanningLevelRequest aiPlanningLevelRequest) throws ApiException {
        ApiResponse<JobResponse> localVarResp = forecastAIPostWithHttpInfo(token, aiPlanningLevelRequest);
        return localVarResp.getData();
    }

    /**
     * Forecast utilizing advanced machine learning models
     * Forecast AI is utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
     * @param token User Authentication Token (optional)
     * @param aiPlanningLevelRequest  (optional)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResponse> forecastAIPostWithHttpInfo(String token, AiPlanningLevelRequest aiPlanningLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastAIPostValidateBeforeCall(token, aiPlanningLevelRequest, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forecast utilizing advanced machine learning models (asynchronously)
     * Forecast AI is utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
     * @param token User Authentication Token (optional)
     * @param aiPlanningLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastAIPostAsync(String token, AiPlanningLevelRequest aiPlanningLevelRequest, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastAIPostValidateBeforeCall(token, aiPlanningLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastFileToForecastPost
     * @param _file  (required)
     * @param method  (required)
     * @param token User Authentication Token (optional)
     * @param discardData  (optional)
     * @param errorType  (optional)
     * @param holdOutPeriod  (optional)
     * @param noFcst  (optional)
     * @param outlierDetection  (optional)
     * @param periodicity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastFileToForecastPostCall(File _file, String method, String token, Boolean discardData, String errorType, Integer holdOutPeriod, Integer noFcst, Boolean outlierDetection, Integer periodicity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forecast/file-to-forecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (discardData != null) {
            localVarFormParams.put("DiscardData", discardData);
        }

        if (errorType != null) {
            localVarFormParams.put("ErrorType", errorType);
        }

        if (_file != null) {
            localVarFormParams.put("File", _file);
        }

        if (holdOutPeriod != null) {
            localVarFormParams.put("HoldOutPeriod", holdOutPeriod);
        }

        if (method != null) {
            localVarFormParams.put("Method", method);
        }

        if (noFcst != null) {
            localVarFormParams.put("NoFcst", noFcst);
        }

        if (outlierDetection != null) {
            localVarFormParams.put("OutlierDetection", outlierDetection);
        }

        if (periodicity != null) {
            localVarFormParams.put("Periodicity", periodicity);
        }

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastFileToForecastPostValidateBeforeCall(File _file, String method, String token, Boolean discardData, String errorType, Integer holdOutPeriod, Integer noFcst, Boolean outlierDetection, Integer periodicity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling forecastFileToForecastPost(Async)");
        }

        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling forecastFileToForecastPost(Async)");
        }

        return forecastFileToForecastPostCall(_file, method, token, discardData, errorType, holdOutPeriod, noFcst, outlierDetection, periodicity, _callback);

    }

    /**
     * Forecast from file
     * Forecast from file allows for quick analysis via Microsoft Excel and CSV file format. Please check documentation link for help.
     * @param _file  (required)
     * @param method  (required)
     * @param token User Authentication Token (optional)
     * @param discardData  (optional)
     * @param errorType  (optional)
     * @param holdOutPeriod  (optional)
     * @param noFcst  (optional)
     * @param outlierDetection  (optional)
     * @param periodicity  (optional)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JobResponse forecastFileToForecastPost(File _file, String method, String token, Boolean discardData, String errorType, Integer holdOutPeriod, Integer noFcst, Boolean outlierDetection, Integer periodicity) throws ApiException {
        ApiResponse<JobResponse> localVarResp = forecastFileToForecastPostWithHttpInfo(_file, method, token, discardData, errorType, holdOutPeriod, noFcst, outlierDetection, periodicity);
        return localVarResp.getData();
    }

    /**
     * Forecast from file
     * Forecast from file allows for quick analysis via Microsoft Excel and CSV file format. Please check documentation link for help.
     * @param _file  (required)
     * @param method  (required)
     * @param token User Authentication Token (optional)
     * @param discardData  (optional)
     * @param errorType  (optional)
     * @param holdOutPeriod  (optional)
     * @param noFcst  (optional)
     * @param outlierDetection  (optional)
     * @param periodicity  (optional)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResponse> forecastFileToForecastPostWithHttpInfo(File _file, String method, String token, Boolean discardData, String errorType, Integer holdOutPeriod, Integer noFcst, Boolean outlierDetection, Integer periodicity) throws ApiException {
        okhttp3.Call localVarCall = forecastFileToForecastPostValidateBeforeCall(_file, method, token, discardData, errorType, holdOutPeriod, noFcst, outlierDetection, periodicity, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forecast from file (asynchronously)
     * Forecast from file allows for quick analysis via Microsoft Excel and CSV file format. Please check documentation link for help.
     * @param _file  (required)
     * @param method  (required)
     * @param token User Authentication Token (optional)
     * @param discardData  (optional)
     * @param errorType  (optional)
     * @param holdOutPeriod  (optional)
     * @param noFcst  (optional)
     * @param outlierDetection  (optional)
     * @param periodicity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastFileToForecastPostAsync(File _file, String method, String token, Boolean discardData, String errorType, Integer holdOutPeriod, Integer noFcst, Boolean outlierDetection, Integer periodicity, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastFileToForecastPostValidateBeforeCall(_file, method, token, discardData, errorType, holdOutPeriod, noFcst, outlierDetection, periodicity, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastForecastBottomUpPost
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastForecastBottomUpPostCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planningLevelRequest;

        // create path and map variables
        String localVarPath = "/forecast/forecast-bottom-up";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastForecastBottomUpPostValidateBeforeCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        return forecastForecastBottomUpPostCall(token, planningLevelRequest, _callback);

    }

    /**
     * Bottom up forecasting
     * Calculate forecast by timeseries and sum results up to establish forecast for top level timeseries.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return ForecastBottomUpResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ForecastBottomUpResponse forecastForecastBottomUpPost(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        ApiResponse<ForecastBottomUpResponse> localVarResp = forecastForecastBottomUpPostWithHttpInfo(token, planningLevelRequest);
        return localVarResp.getData();
    }

    /**
     * Bottom up forecasting
     * Calculate forecast by timeseries and sum results up to establish forecast for top level timeseries.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return ApiResponse&lt;ForecastBottomUpResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForecastBottomUpResponse> forecastForecastBottomUpPostWithHttpInfo(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastForecastBottomUpPostValidateBeforeCall(token, planningLevelRequest, null);
        Type localVarReturnType = new TypeToken<ForecastBottomUpResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bottom up forecasting (asynchronously)
     * Calculate forecast by timeseries and sum results up to establish forecast for top level timeseries.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastForecastBottomUpPostAsync(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback<ForecastBottomUpResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastForecastBottomUpPostValidateBeforeCall(token, planningLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<ForecastBottomUpResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastForecastTopDownPost
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastForecastTopDownPostCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planningLevelRequest;

        // create path and map variables
        String localVarPath = "/forecast/forecast-top-down";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastForecastTopDownPostValidateBeforeCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        return forecastForecastTopDownPostCall(token, planningLevelRequest, _callback);

    }

    /**
     * Top down forecasting
     * Calculate forecast based on sum of of lower level timeseries and distribute forecast down based on ratios. Great feature for planning levels with dynamic timeseries.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void forecastForecastTopDownPost(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        forecastForecastTopDownPostWithHttpInfo(token, planningLevelRequest);
    }

    /**
     * Top down forecasting
     * Calculate forecast based on sum of of lower level timeseries and distribute forecast down based on ratios. Great feature for planning levels with dynamic timeseries.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> forecastForecastTopDownPostWithHttpInfo(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastForecastTopDownPostValidateBeforeCall(token, planningLevelRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Top down forecasting (asynchronously)
     * Calculate forecast based on sum of of lower level timeseries and distribute forecast down based on ratios. Great feature for planning levels with dynamic timeseries.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastForecastTopDownPostAsync(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastForecastTopDownPostValidateBeforeCall(token, planningLevelRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastFullDetailPost
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastFullDetailPostCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planningLevelRequest;

        // create path and map variables
        String localVarPath = "/forecast/full-detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastFullDetailPostValidateBeforeCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        return forecastFullDetailPostCall(token, planningLevelRequest, _callback);

    }

    /**
     * Full forecast result details, including error, trend seasonality and outlier
     * Response provides full forecast result details, including error, trend seasonality and outlier. Great for advanced analysis.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return FullDetailsForecastResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FullDetailsForecastResponse forecastFullDetailPost(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        ApiResponse<FullDetailsForecastResponse> localVarResp = forecastFullDetailPostWithHttpInfo(token, planningLevelRequest);
        return localVarResp.getData();
    }

    /**
     * Full forecast result details, including error, trend seasonality and outlier
     * Response provides full forecast result details, including error, trend seasonality and outlier. Great for advanced analysis.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return ApiResponse&lt;FullDetailsForecastResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullDetailsForecastResponse> forecastFullDetailPostWithHttpInfo(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastFullDetailPostValidateBeforeCall(token, planningLevelRequest, null);
        Type localVarReturnType = new TypeToken<FullDetailsForecastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Full forecast result details, including error, trend seasonality and outlier (asynchronously)
     * Response provides full forecast result details, including error, trend seasonality and outlier. Great for advanced analysis.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastFullDetailPostAsync(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback<FullDetailsForecastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastFullDetailPostValidateBeforeCall(token, planningLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<FullDetailsForecastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastHistoryAndForecastPost
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastHistoryAndForecastPostCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planningLevelRequest;

        // create path and map variables
        String localVarPath = "/forecast/history-and-forecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastHistoryAndForecastPostValidateBeforeCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        return forecastHistoryAndForecastPostCall(token, planningLevelRequest, _callback);

    }

    /**
     * History and forecast for fast timeseries view
     * Reponse provides history and forecast per timeseries. Great for visualizing results.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return HistoryAndForecastResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HistoryAndForecastResponse forecastHistoryAndForecastPost(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        ApiResponse<HistoryAndForecastResponse> localVarResp = forecastHistoryAndForecastPostWithHttpInfo(token, planningLevelRequest);
        return localVarResp.getData();
    }

    /**
     * History and forecast for fast timeseries view
     * Reponse provides history and forecast per timeseries. Great for visualizing results.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return ApiResponse&lt;HistoryAndForecastResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryAndForecastResponse> forecastHistoryAndForecastPostWithHttpInfo(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastHistoryAndForecastPostValidateBeforeCall(token, planningLevelRequest, null);
        Type localVarReturnType = new TypeToken<HistoryAndForecastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * History and forecast for fast timeseries view (asynchronously)
     * Reponse provides history and forecast per timeseries. Great for visualizing results.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastHistoryAndForecastPostAsync(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback<HistoryAndForecastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastHistoryAndForecastPostValidateBeforeCall(token, planningLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<HistoryAndForecastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastOptimalParameterPost
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastOptimalParameterPostCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planningLevelRequest;

        // create path and map variables
        String localVarPath = "/forecast/optimal-parameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastOptimalParameterPostValidateBeforeCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        return forecastOptimalParameterPostCall(token, planningLevelRequest, _callback);

    }

    /**
     * Get optimal parameter per method
     * Use the optimal parameter sets created by iCUE to set the method parameters of your internal planning system.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return OptimalParameterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OptimalParameterResponse forecastOptimalParameterPost(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        ApiResponse<OptimalParameterResponse> localVarResp = forecastOptimalParameterPostWithHttpInfo(token, planningLevelRequest);
        return localVarResp.getData();
    }

    /**
     * Get optimal parameter per method
     * Use the optimal parameter sets created by iCUE to set the method parameters of your internal planning system.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return ApiResponse&lt;OptimalParameterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OptimalParameterResponse> forecastOptimalParameterPostWithHttpInfo(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastOptimalParameterPostValidateBeforeCall(token, planningLevelRequest, null);
        Type localVarReturnType = new TypeToken<OptimalParameterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get optimal parameter per method (asynchronously)
     * Use the optimal parameter sets created by iCUE to set the method parameters of your internal planning system.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastOptimalParameterPostAsync(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback<OptimalParameterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastOptimalParameterPostValidateBeforeCall(token, planningLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<OptimalParameterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastPost
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastPostCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planningLevelRequest;

        // create path and map variables
        String localVarPath = "/forecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastPostValidateBeforeCall(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback _callback) throws ApiException {
        return forecastPostCall(token, planningLevelRequest, _callback);

    }

    /**
     * Forecasts only, for faster results
     * To support maximum operation and integration speed, this endpoint only returns the calculated forecast.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return ForecastResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ForecastResponse forecastPost(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        ApiResponse<ForecastResponse> localVarResp = forecastPostWithHttpInfo(token, planningLevelRequest);
        return localVarResp.getData();
    }

    /**
     * Forecasts only, for faster results
     * To support maximum operation and integration speed, this endpoint only returns the calculated forecast.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @return ApiResponse&lt;ForecastResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForecastResponse> forecastPostWithHttpInfo(String token, PlanningLevelRequest planningLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastPostValidateBeforeCall(token, planningLevelRequest, null);
        Type localVarReturnType = new TypeToken<ForecastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forecasts only, for faster results (asynchronously)
     * To support maximum operation and integration speed, this endpoint only returns the calculated forecast.
     * @param token User Authentication Token (optional)
     * @param planningLevelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastPostAsync(String token, PlanningLevelRequest planningLevelRequest, final ApiCallback<ForecastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastPostValidateBeforeCall(token, planningLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<ForecastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastRerunPost
     * @param token User Authentication Token (optional)
     * @param planningLevelReRunRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastRerunPostCall(String token, PlanningLevelReRunRequest planningLevelReRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planningLevelReRunRequest;

        // create path and map variables
        String localVarPath = "/forecast/rerun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastRerunPostValidateBeforeCall(String token, PlanningLevelReRunRequest planningLevelReRunRequest, final ApiCallback _callback) throws ApiException {
        return forecastRerunPostCall(token, planningLevelReRunRequest, _callback);

    }

    /**
     * Rerun previously uploaded planning level
     * Rerun previously uploaded planning level.
     * @param token User Authentication Token (optional)
     * @param planningLevelReRunRequest  (optional)
     * @return ForecastResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ForecastResponse forecastRerunPost(String token, PlanningLevelReRunRequest planningLevelReRunRequest) throws ApiException {
        ApiResponse<ForecastResponse> localVarResp = forecastRerunPostWithHttpInfo(token, planningLevelReRunRequest);
        return localVarResp.getData();
    }

    /**
     * Rerun previously uploaded planning level
     * Rerun previously uploaded planning level.
     * @param token User Authentication Token (optional)
     * @param planningLevelReRunRequest  (optional)
     * @return ApiResponse&lt;ForecastResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForecastResponse> forecastRerunPostWithHttpInfo(String token, PlanningLevelReRunRequest planningLevelReRunRequest) throws ApiException {
        okhttp3.Call localVarCall = forecastRerunPostValidateBeforeCall(token, planningLevelReRunRequest, null);
        Type localVarReturnType = new TypeToken<ForecastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rerun previously uploaded planning level (asynchronously)
     * Rerun previously uploaded planning level.
     * @param token User Authentication Token (optional)
     * @param planningLevelReRunRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastRerunPostAsync(String token, PlanningLevelReRunRequest planningLevelReRunRequest, final ApiCallback<ForecastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastRerunPostValidateBeforeCall(token, planningLevelReRunRequest, _callback);
        Type localVarReturnType = new TypeToken<ForecastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastResultJobIdGet
     * @param jobId  (required)
     * @param token User Authentication Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastResultJobIdGetCall(Integer jobId, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forecast/result/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastResultJobIdGetValidateBeforeCall(Integer jobId, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling forecastResultJobIdGet(Async)");
        }

        return forecastResultJobIdGetCall(jobId, token, _callback);

    }

    /**
     * Forecast result
     * Get result for forecast job
     * @param jobId  (required)
     * @param token User Authentication Token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void forecastResultJobIdGet(Integer jobId, String token) throws ApiException {
        forecastResultJobIdGetWithHttpInfo(jobId, token);
    }

    /**
     * Forecast result
     * Get result for forecast job
     * @param jobId  (required)
     * @param token User Authentication Token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> forecastResultJobIdGetWithHttpInfo(Integer jobId, String token) throws ApiException {
        okhttp3.Call localVarCall = forecastResultJobIdGetValidateBeforeCall(jobId, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Forecast result (asynchronously)
     * Get result for forecast job
     * @param jobId  (required)
     * @param token User Authentication Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastResultJobIdGetAsync(Integer jobId, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastResultJobIdGetValidateBeforeCall(jobId, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for forecastStatusJobIdGet
     * @param jobId  (required)
     * @param token User Authentication Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastStatusJobIdGetCall(Integer jobId, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forecast/status/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forecastStatusJobIdGetValidateBeforeCall(Integer jobId, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling forecastStatusJobIdGet(Async)");
        }

        return forecastStatusJobIdGetCall(jobId, token, _callback);

    }

    /**
     * Forecast status
     * Get status for forecast job
     * @param jobId  (required)
     * @param token User Authentication Token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void forecastStatusJobIdGet(Integer jobId, String token) throws ApiException {
        forecastStatusJobIdGetWithHttpInfo(jobId, token);
    }

    /**
     * Forecast status
     * Get status for forecast job
     * @param jobId  (required)
     * @param token User Authentication Token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> forecastStatusJobIdGetWithHttpInfo(Integer jobId, String token) throws ApiException {
        okhttp3.Call localVarCall = forecastStatusJobIdGetValidateBeforeCall(jobId, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Forecast status (asynchronously)
     * Get status for forecast job
     * @param jobId  (required)
     * @param token User Authentication Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forecastStatusJobIdGetAsync(Integer jobId, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = forecastStatusJobIdGetValidateBeforeCall(jobId, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for outlierPost
     * @param token User Authentication Token (optional)
     * @param outliersRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outlierPostCall(String token, OutliersRequest outliersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outliersRequest;

        // create path and map variables
        String localVarPath = "/outlier";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outlierPostValidateBeforeCall(String token, OutliersRequest outliersRequest, final ApiCallback _callback) throws ApiException {
        return outlierPostCall(token, outliersRequest, _callback);

    }

    /**
     * Get outlier
     * Identify outliers (single and repetitive spikes, seasonality, masked outliers, trend and level jumps, amongst other topics) and use for cleansing of the history stream prior to forecast claculation. Depending on math model used, this approach often improves results dramatically, as it removes disturbances.
     * @param token User Authentication Token (optional)
     * @param outliersRequest  (optional)
     * @return List&lt;TimeSeriesOutliersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<TimeSeriesOutliersResponse> outlierPost(String token, OutliersRequest outliersRequest) throws ApiException {
        ApiResponse<List<TimeSeriesOutliersResponse>> localVarResp = outlierPostWithHttpInfo(token, outliersRequest);
        return localVarResp.getData();
    }

    /**
     * Get outlier
     * Identify outliers (single and repetitive spikes, seasonality, masked outliers, trend and level jumps, amongst other topics) and use for cleansing of the history stream prior to forecast claculation. Depending on math model used, this approach often improves results dramatically, as it removes disturbances.
     * @param token User Authentication Token (optional)
     * @param outliersRequest  (optional)
     * @return ApiResponse&lt;List&lt;TimeSeriesOutliersResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TimeSeriesOutliersResponse>> outlierPostWithHttpInfo(String token, OutliersRequest outliersRequest) throws ApiException {
        okhttp3.Call localVarCall = outlierPostValidateBeforeCall(token, outliersRequest, null);
        Type localVarReturnType = new TypeToken<List<TimeSeriesOutliersResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get outlier (asynchronously)
     * Identify outliers (single and repetitive spikes, seasonality, masked outliers, trend and level jumps, amongst other topics) and use for cleansing of the history stream prior to forecast claculation. Depending on math model used, this approach often improves results dramatically, as it removes disturbances.
     * @param token User Authentication Token (optional)
     * @param outliersRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outlierPostAsync(String token, OutliersRequest outliersRequest, final ApiCallback<List<TimeSeriesOutliersResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = outlierPostValidateBeforeCall(token, outliersRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TimeSeriesOutliersResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
