/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.ForecastPerformanceRequest;
import org.openapitools.client.model.PortfolioAbcModel;
import org.openapitools.client.model.PortfolioModel;
import org.openapitools.client.model.PortfolioRequest;
import org.openapitools.client.model.PortfolioXyzModel;
import org.openapitools.client.model.RewindResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortfolioPerformanceManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PortfolioPerformanceManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortfolioPerformanceManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for portfolioAbcPost
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioAbcPostCall(String token, PortfolioRequest portfolioRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfolioRequest;

        // create path and map variables
        String localVarPath = "/portfolio/abc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portfolioAbcPostValidateBeforeCall(String token, PortfolioRequest portfolioRequest, final ApiCallback _callback) throws ApiException {
        return portfolioAbcPostCall(token, portfolioRequest, _callback);

    }

    /**
     * ABC Analysis
     * Calculate and retrieve results of ABC (pareto analysis) per timeseries and planning level.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @return List&lt;PortfolioAbcModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<PortfolioAbcModel> portfolioAbcPost(String token, PortfolioRequest portfolioRequest) throws ApiException {
        ApiResponse<List<PortfolioAbcModel>> localVarResp = portfolioAbcPostWithHttpInfo(token, portfolioRequest);
        return localVarResp.getData();
    }

    /**
     * ABC Analysis
     * Calculate and retrieve results of ABC (pareto analysis) per timeseries and planning level.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @return ApiResponse&lt;List&lt;PortfolioAbcModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PortfolioAbcModel>> portfolioAbcPostWithHttpInfo(String token, PortfolioRequest portfolioRequest) throws ApiException {
        okhttp3.Call localVarCall = portfolioAbcPostValidateBeforeCall(token, portfolioRequest, null);
        Type localVarReturnType = new TypeToken<List<PortfolioAbcModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ABC Analysis (asynchronously)
     * Calculate and retrieve results of ABC (pareto analysis) per timeseries and planning level.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioAbcPostAsync(String token, PortfolioRequest portfolioRequest, final ApiCallback<List<PortfolioAbcModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = portfolioAbcPostValidateBeforeCall(token, portfolioRequest, _callback);
        Type localVarReturnType = new TypeToken<List<PortfolioAbcModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for portfolioFileToPortfolioPost
     * @param _file  (required)
     * @param token User Authentication Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioFileToPortfolioPostCall(File _file, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio/file-to-portfolio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("File", _file);
        }

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portfolioFileToPortfolioPostValidateBeforeCall(File _file, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling portfolioFileToPortfolioPost(Async)");
        }

        return portfolioFileToPortfolioPostCall(_file, token, _callback);

    }

    /**
     * ABCxyz Analysis
     * Calculate and retrieve results of ABC (pareto analysis) and xyz (Coefficient of variation) per timeseries and planning level. This analysis is a powerful means to estbalish a proper planning cadence, best accuracy messures and optimal hyperparameters for the organization. It provides a balanced and actionable overview of the entire product portfolio.
     * @param _file  (required)
     * @param token User Authentication Token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void portfolioFileToPortfolioPost(File _file, String token) throws ApiException {
        portfolioFileToPortfolioPostWithHttpInfo(_file, token);
    }

    /**
     * ABCxyz Analysis
     * Calculate and retrieve results of ABC (pareto analysis) and xyz (Coefficient of variation) per timeseries and planning level. This analysis is a powerful means to estbalish a proper planning cadence, best accuracy messures and optimal hyperparameters for the organization. It provides a balanced and actionable overview of the entire product portfolio.
     * @param _file  (required)
     * @param token User Authentication Token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> portfolioFileToPortfolioPostWithHttpInfo(File _file, String token) throws ApiException {
        okhttp3.Call localVarCall = portfolioFileToPortfolioPostValidateBeforeCall(_file, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ABCxyz Analysis (asynchronously)
     * Calculate and retrieve results of ABC (pareto analysis) and xyz (Coefficient of variation) per timeseries and planning level. This analysis is a powerful means to estbalish a proper planning cadence, best accuracy messures and optimal hyperparameters for the organization. It provides a balanced and actionable overview of the entire product portfolio.
     * @param _file  (required)
     * @param token User Authentication Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioFileToPortfolioPostAsync(File _file, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = portfolioFileToPortfolioPostValidateBeforeCall(_file, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for portfolioForecastPerformanceRewindPost
     * @param token User Authentication Token (optional)
     * @param forecastPerformanceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioForecastPerformanceRewindPostCall(String token, ForecastPerformanceRequest forecastPerformanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forecastPerformanceRequest;

        // create path and map variables
        String localVarPath = "/portfolio/forecast-performance-rewind";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portfolioForecastPerformanceRewindPostValidateBeforeCall(String token, ForecastPerformanceRequest forecastPerformanceRequest, final ApiCallback _callback) throws ApiException {
        return portfolioForecastPerformanceRewindPostCall(token, forecastPerformanceRequest, _callback);

    }

    /**
     * Planning level rewind to calculate and measure performance potential (internal versus iCUE).
     * Planning level rewind to calculate and measure performance potential (internal versus iCUE).
     * @param token User Authentication Token (optional)
     * @param forecastPerformanceRequest  (optional)
     * @return RewindResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RewindResponse portfolioForecastPerformanceRewindPost(String token, ForecastPerformanceRequest forecastPerformanceRequest) throws ApiException {
        ApiResponse<RewindResponse> localVarResp = portfolioForecastPerformanceRewindPostWithHttpInfo(token, forecastPerformanceRequest);
        return localVarResp.getData();
    }

    /**
     * Planning level rewind to calculate and measure performance potential (internal versus iCUE).
     * Planning level rewind to calculate and measure performance potential (internal versus iCUE).
     * @param token User Authentication Token (optional)
     * @param forecastPerformanceRequest  (optional)
     * @return ApiResponse&lt;RewindResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RewindResponse> portfolioForecastPerformanceRewindPostWithHttpInfo(String token, ForecastPerformanceRequest forecastPerformanceRequest) throws ApiException {
        okhttp3.Call localVarCall = portfolioForecastPerformanceRewindPostValidateBeforeCall(token, forecastPerformanceRequest, null);
        Type localVarReturnType = new TypeToken<RewindResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Planning level rewind to calculate and measure performance potential (internal versus iCUE). (asynchronously)
     * Planning level rewind to calculate and measure performance potential (internal versus iCUE).
     * @param token User Authentication Token (optional)
     * @param forecastPerformanceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioForecastPerformanceRewindPostAsync(String token, ForecastPerformanceRequest forecastPerformanceRequest, final ApiCallback<RewindResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = portfolioForecastPerformanceRewindPostValidateBeforeCall(token, forecastPerformanceRequest, _callback);
        Type localVarReturnType = new TypeToken<RewindResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for portfolioPost
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioPostCall(String token, PortfolioRequest portfolioRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfolioRequest;

        // create path and map variables
        String localVarPath = "/portfolio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portfolioPostValidateBeforeCall(String token, PortfolioRequest portfolioRequest, final ApiCallback _callback) throws ApiException {
        return portfolioPostCall(token, portfolioRequest, _callback);

    }

    /**
     * ABCxyz Analysis
     * Calculate and retrieve results of ABC (pareto analysis) and xyz (Coefficient of variation) per timeseries and planning level. This analysis is a powerful means to estbalish a proper planning cadence, best accuracy messures and optimal hyperparameters for the organization. It provides a balanced and actionable overview of the entire product portfolio.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @return List&lt;PortfolioModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<PortfolioModel> portfolioPost(String token, PortfolioRequest portfolioRequest) throws ApiException {
        ApiResponse<List<PortfolioModel>> localVarResp = portfolioPostWithHttpInfo(token, portfolioRequest);
        return localVarResp.getData();
    }

    /**
     * ABCxyz Analysis
     * Calculate and retrieve results of ABC (pareto analysis) and xyz (Coefficient of variation) per timeseries and planning level. This analysis is a powerful means to estbalish a proper planning cadence, best accuracy messures and optimal hyperparameters for the organization. It provides a balanced and actionable overview of the entire product portfolio.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @return ApiResponse&lt;List&lt;PortfolioModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PortfolioModel>> portfolioPostWithHttpInfo(String token, PortfolioRequest portfolioRequest) throws ApiException {
        okhttp3.Call localVarCall = portfolioPostValidateBeforeCall(token, portfolioRequest, null);
        Type localVarReturnType = new TypeToken<List<PortfolioModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ABCxyz Analysis (asynchronously)
     * Calculate and retrieve results of ABC (pareto analysis) and xyz (Coefficient of variation) per timeseries and planning level. This analysis is a powerful means to estbalish a proper planning cadence, best accuracy messures and optimal hyperparameters for the organization. It provides a balanced and actionable overview of the entire product portfolio.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioPostAsync(String token, PortfolioRequest portfolioRequest, final ApiCallback<List<PortfolioModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = portfolioPostValidateBeforeCall(token, portfolioRequest, _callback);
        Type localVarReturnType = new TypeToken<List<PortfolioModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for portfolioXyzPost
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioXyzPostCall(String token, PortfolioRequest portfolioRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfolioRequest;

        // create path and map variables
        String localVarPath = "/portfolio/xyz";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("Token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portfolioXyzPostValidateBeforeCall(String token, PortfolioRequest portfolioRequest, final ApiCallback _callback) throws ApiException {
        return portfolioXyzPostCall(token, portfolioRequest, _callback);

    }

    /**
     * xyz Analysis
     * Calculate and retrieve results of xyz (Coefficient of variation) per timeseries and planning level.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @return List&lt;PortfolioXyzModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<PortfolioXyzModel> portfolioXyzPost(String token, PortfolioRequest portfolioRequest) throws ApiException {
        ApiResponse<List<PortfolioXyzModel>> localVarResp = portfolioXyzPostWithHttpInfo(token, portfolioRequest);
        return localVarResp.getData();
    }

    /**
     * xyz Analysis
     * Calculate and retrieve results of xyz (Coefficient of variation) per timeseries and planning level.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @return ApiResponse&lt;List&lt;PortfolioXyzModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PortfolioXyzModel>> portfolioXyzPostWithHttpInfo(String token, PortfolioRequest portfolioRequest) throws ApiException {
        okhttp3.Call localVarCall = portfolioXyzPostValidateBeforeCall(token, portfolioRequest, null);
        Type localVarReturnType = new TypeToken<List<PortfolioXyzModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * xyz Analysis (asynchronously)
     * Calculate and retrieve results of xyz (Coefficient of variation) per timeseries and planning level.
     * @param token User Authentication Token (optional)
     * @param portfolioRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portfolioXyzPostAsync(String token, PortfolioRequest portfolioRequest, final ApiCallback<List<PortfolioXyzModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = portfolioXyzPostValidateBeforeCall(token, portfolioRequest, _callback);
        Type localVarReturnType = new TypeToken<List<PortfolioXyzModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
