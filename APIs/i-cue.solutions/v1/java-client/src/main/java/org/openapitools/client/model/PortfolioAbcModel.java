/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PortfolioAbcModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:22.874424-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PortfolioAbcModel {
  public static final String SERIALIZED_NAME_ABC12 = "abc12";
  @SerializedName(SERIALIZED_NAME_ABC12)
  private String abc12;

  public static final String SERIALIZED_NAME_ABC12_VALUE = "abc12Value";
  @SerializedName(SERIALIZED_NAME_ABC12_VALUE)
  private Double abc12Value;

  public static final String SERIALIZED_NAME_ABC6 = "abc6";
  @SerializedName(SERIALIZED_NAME_ABC6)
  private String abc6;

  public static final String SERIALIZED_NAME_ABC6_VALUE = "abc6Value";
  @SerializedName(SERIALIZED_NAME_ABC6_VALUE)
  private Double abc6Value;

  public static final String SERIALIZED_NAME_ABC9 = "abc9";
  @SerializedName(SERIALIZED_NAME_ABC9)
  private String abc9;

  public static final String SERIALIZED_NAME_ABC9_VALUE = "abc9Value";
  @SerializedName(SERIALIZED_NAME_ABC9_VALUE)
  private Double abc9Value;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_THRESHOLD_A = "thresholdA";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_A)
  private Double thresholdA;

  public static final String SERIALIZED_NAME_THRESHOLD_B = "thresholdB";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_B)
  private Double thresholdB;

  public static final String SERIALIZED_NAME_THRESHOLD_C = "thresholdC";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_C)
  private Double thresholdC;

  public PortfolioAbcModel() {
  }

  public PortfolioAbcModel abc12(String abc12) {
    this.abc12 = abc12;
    return this;
  }

  /**
   * Get abc12
   * @return abc12
   */
  @javax.annotation.Nullable
  public String getAbc12() {
    return abc12;
  }

  public void setAbc12(String abc12) {
    this.abc12 = abc12;
  }


  public PortfolioAbcModel abc12Value(Double abc12Value) {
    this.abc12Value = abc12Value;
    return this;
  }

  /**
   * Get abc12Value
   * @return abc12Value
   */
  @javax.annotation.Nullable
  public Double getAbc12Value() {
    return abc12Value;
  }

  public void setAbc12Value(Double abc12Value) {
    this.abc12Value = abc12Value;
  }


  public PortfolioAbcModel abc6(String abc6) {
    this.abc6 = abc6;
    return this;
  }

  /**
   * Get abc6
   * @return abc6
   */
  @javax.annotation.Nullable
  public String getAbc6() {
    return abc6;
  }

  public void setAbc6(String abc6) {
    this.abc6 = abc6;
  }


  public PortfolioAbcModel abc6Value(Double abc6Value) {
    this.abc6Value = abc6Value;
    return this;
  }

  /**
   * Get abc6Value
   * @return abc6Value
   */
  @javax.annotation.Nullable
  public Double getAbc6Value() {
    return abc6Value;
  }

  public void setAbc6Value(Double abc6Value) {
    this.abc6Value = abc6Value;
  }


  public PortfolioAbcModel abc9(String abc9) {
    this.abc9 = abc9;
    return this;
  }

  /**
   * Get abc9
   * @return abc9
   */
  @javax.annotation.Nullable
  public String getAbc9() {
    return abc9;
  }

  public void setAbc9(String abc9) {
    this.abc9 = abc9;
  }


  public PortfolioAbcModel abc9Value(Double abc9Value) {
    this.abc9Value = abc9Value;
    return this;
  }

  /**
   * Get abc9Value
   * @return abc9Value
   */
  @javax.annotation.Nullable
  public Double getAbc9Value() {
    return abc9Value;
  }

  public void setAbc9Value(Double abc9Value) {
    this.abc9Value = abc9Value;
  }


  public PortfolioAbcModel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PortfolioAbcModel thresholdA(Double thresholdA) {
    this.thresholdA = thresholdA;
    return this;
  }

  /**
   * Get thresholdA
   * @return thresholdA
   */
  @javax.annotation.Nullable
  public Double getThresholdA() {
    return thresholdA;
  }

  public void setThresholdA(Double thresholdA) {
    this.thresholdA = thresholdA;
  }


  public PortfolioAbcModel thresholdB(Double thresholdB) {
    this.thresholdB = thresholdB;
    return this;
  }

  /**
   * Get thresholdB
   * @return thresholdB
   */
  @javax.annotation.Nullable
  public Double getThresholdB() {
    return thresholdB;
  }

  public void setThresholdB(Double thresholdB) {
    this.thresholdB = thresholdB;
  }


  public PortfolioAbcModel thresholdC(Double thresholdC) {
    this.thresholdC = thresholdC;
    return this;
  }

  /**
   * Get thresholdC
   * @return thresholdC
   */
  @javax.annotation.Nullable
  public Double getThresholdC() {
    return thresholdC;
  }

  public void setThresholdC(Double thresholdC) {
    this.thresholdC = thresholdC;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioAbcModel portfolioAbcModel = (PortfolioAbcModel) o;
    return Objects.equals(this.abc12, portfolioAbcModel.abc12) &&
        Objects.equals(this.abc12Value, portfolioAbcModel.abc12Value) &&
        Objects.equals(this.abc6, portfolioAbcModel.abc6) &&
        Objects.equals(this.abc6Value, portfolioAbcModel.abc6Value) &&
        Objects.equals(this.abc9, portfolioAbcModel.abc9) &&
        Objects.equals(this.abc9Value, portfolioAbcModel.abc9Value) &&
        Objects.equals(this.id, portfolioAbcModel.id) &&
        Objects.equals(this.thresholdA, portfolioAbcModel.thresholdA) &&
        Objects.equals(this.thresholdB, portfolioAbcModel.thresholdB) &&
        Objects.equals(this.thresholdC, portfolioAbcModel.thresholdC);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(abc12, abc12Value, abc6, abc6Value, abc9, abc9Value, id, thresholdA, thresholdB, thresholdC);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioAbcModel {\n");
    sb.append("    abc12: ").append(toIndentedString(abc12)).append("\n");
    sb.append("    abc12Value: ").append(toIndentedString(abc12Value)).append("\n");
    sb.append("    abc6: ").append(toIndentedString(abc6)).append("\n");
    sb.append("    abc6Value: ").append(toIndentedString(abc6Value)).append("\n");
    sb.append("    abc9: ").append(toIndentedString(abc9)).append("\n");
    sb.append("    abc9Value: ").append(toIndentedString(abc9Value)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    thresholdA: ").append(toIndentedString(thresholdA)).append("\n");
    sb.append("    thresholdB: ").append(toIndentedString(thresholdB)).append("\n");
    sb.append("    thresholdC: ").append(toIndentedString(thresholdC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abc12");
    openapiFields.add("abc12Value");
    openapiFields.add("abc6");
    openapiFields.add("abc6Value");
    openapiFields.add("abc9");
    openapiFields.add("abc9Value");
    openapiFields.add("id");
    openapiFields.add("thresholdA");
    openapiFields.add("thresholdB");
    openapiFields.add("thresholdC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PortfolioAbcModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortfolioAbcModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortfolioAbcModel is not found in the empty JSON string", PortfolioAbcModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PortfolioAbcModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PortfolioAbcModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abc12") != null && !jsonObj.get("abc12").isJsonNull()) && !jsonObj.get("abc12").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abc12` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abc12").toString()));
      }
      if ((jsonObj.get("abc6") != null && !jsonObj.get("abc6").isJsonNull()) && !jsonObj.get("abc6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abc6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abc6").toString()));
      }
      if ((jsonObj.get("abc9") != null && !jsonObj.get("abc9").isJsonNull()) && !jsonObj.get("abc9").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abc9` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abc9").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortfolioAbcModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortfolioAbcModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortfolioAbcModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortfolioAbcModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PortfolioAbcModel>() {
           @Override
           public void write(JsonWriter out, PortfolioAbcModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortfolioAbcModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PortfolioAbcModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PortfolioAbcModel
   * @throws IOException if the JSON string is invalid with respect to PortfolioAbcModel
   */
  public static PortfolioAbcModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortfolioAbcModel.class);
  }

  /**
   * Convert an instance of PortfolioAbcModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

