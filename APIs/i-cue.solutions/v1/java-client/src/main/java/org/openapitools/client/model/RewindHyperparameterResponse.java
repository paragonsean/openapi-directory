/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RewindHyperparameterResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:22.874424-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RewindHyperparameterResponse {
  public static final String SERIALIZED_NAME_COST_OF_ERROR = "costOfError";
  @SerializedName(SERIALIZED_NAME_COST_OF_ERROR)
  private Double costOfError;

  public static final String SERIALIZED_NAME_DISCARD_DATA = "discardData";
  @SerializedName(SERIALIZED_NAME_DISCARD_DATA)
  private Boolean discardData;

  /**
   * Gets or Sets errorType
   */
  @JsonAdapter(ErrorTypeEnum.Adapter.class)
  public enum ErrorTypeEnum {
    MEAN_ABSOLUTE_PERCENTAGE_ERROR("MeanAbsolutePercentageError"),
    
    MEAN_SQUARED_ERROR("MeanSquaredError"),
    
    MEAN_ABSOLUTE_ERROR("MeanAbsoluteError"),
    
    MEDIAN_ABSOLUTE_DEVIATION("MedianAbsoluteDeviation"),
    
    NONE("None");

    private String value;

    ErrorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorTypeEnum fromValue(String value) {
      for (ErrorTypeEnum b : ErrorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_TYPE = "errorType";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private ErrorTypeEnum errorType;

  public static final String SERIALIZED_NAME_HOLD_OUT_PERIOD = "holdOutPeriod";
  @SerializedName(SERIALIZED_NAME_HOLD_OUT_PERIOD)
  private Integer holdOutPeriod;

  public static final String SERIALIZED_NAME_NO_FCST = "noFcst";
  @SerializedName(SERIALIZED_NAME_NO_FCST)
  private Integer noFcst;

  public static final String SERIALIZED_NAME_PERIODICITY = "periodicity";
  @SerializedName(SERIALIZED_NAME_PERIODICITY)
  private Integer periodicity;

  public static final String SERIALIZED_NAME_REWIND_TIME_FRAME = "rewindTimeFrame";
  @SerializedName(SERIALIZED_NAME_REWIND_TIME_FRAME)
  private Integer rewindTimeFrame;

  public RewindHyperparameterResponse() {
  }

  public RewindHyperparameterResponse costOfError(Double costOfError) {
    this.costOfError = costOfError;
    return this;
  }

  /**
   * Get costOfError
   * @return costOfError
   */
  @javax.annotation.Nullable
  public Double getCostOfError() {
    return costOfError;
  }

  public void setCostOfError(Double costOfError) {
    this.costOfError = costOfError;
  }


  public RewindHyperparameterResponse discardData(Boolean discardData) {
    this.discardData = discardData;
    return this;
  }

  /**
   * Get discardData
   * @return discardData
   */
  @javax.annotation.Nullable
  public Boolean getDiscardData() {
    return discardData;
  }

  public void setDiscardData(Boolean discardData) {
    this.discardData = discardData;
  }


  public RewindHyperparameterResponse errorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * Get errorType
   * @return errorType
   */
  @javax.annotation.Nullable
  public ErrorTypeEnum getErrorType() {
    return errorType;
  }

  public void setErrorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
  }


  public RewindHyperparameterResponse holdOutPeriod(Integer holdOutPeriod) {
    this.holdOutPeriod = holdOutPeriod;
    return this;
  }

  /**
   * Get holdOutPeriod
   * @return holdOutPeriod
   */
  @javax.annotation.Nullable
  public Integer getHoldOutPeriod() {
    return holdOutPeriod;
  }

  public void setHoldOutPeriod(Integer holdOutPeriod) {
    this.holdOutPeriod = holdOutPeriod;
  }


  public RewindHyperparameterResponse noFcst(Integer noFcst) {
    this.noFcst = noFcst;
    return this;
  }

  /**
   * Get noFcst
   * @return noFcst
   */
  @javax.annotation.Nullable
  public Integer getNoFcst() {
    return noFcst;
  }

  public void setNoFcst(Integer noFcst) {
    this.noFcst = noFcst;
  }


  public RewindHyperparameterResponse periodicity(Integer periodicity) {
    this.periodicity = periodicity;
    return this;
  }

  /**
   * Get periodicity
   * @return periodicity
   */
  @javax.annotation.Nullable
  public Integer getPeriodicity() {
    return periodicity;
  }

  public void setPeriodicity(Integer periodicity) {
    this.periodicity = periodicity;
  }


  public RewindHyperparameterResponse rewindTimeFrame(Integer rewindTimeFrame) {
    this.rewindTimeFrame = rewindTimeFrame;
    return this;
  }

  /**
   * Get rewindTimeFrame
   * @return rewindTimeFrame
   */
  @javax.annotation.Nullable
  public Integer getRewindTimeFrame() {
    return rewindTimeFrame;
  }

  public void setRewindTimeFrame(Integer rewindTimeFrame) {
    this.rewindTimeFrame = rewindTimeFrame;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RewindHyperparameterResponse rewindHyperparameterResponse = (RewindHyperparameterResponse) o;
    return Objects.equals(this.costOfError, rewindHyperparameterResponse.costOfError) &&
        Objects.equals(this.discardData, rewindHyperparameterResponse.discardData) &&
        Objects.equals(this.errorType, rewindHyperparameterResponse.errorType) &&
        Objects.equals(this.holdOutPeriod, rewindHyperparameterResponse.holdOutPeriod) &&
        Objects.equals(this.noFcst, rewindHyperparameterResponse.noFcst) &&
        Objects.equals(this.periodicity, rewindHyperparameterResponse.periodicity) &&
        Objects.equals(this.rewindTimeFrame, rewindHyperparameterResponse.rewindTimeFrame);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(costOfError, discardData, errorType, holdOutPeriod, noFcst, periodicity, rewindTimeFrame);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RewindHyperparameterResponse {\n");
    sb.append("    costOfError: ").append(toIndentedString(costOfError)).append("\n");
    sb.append("    discardData: ").append(toIndentedString(discardData)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    holdOutPeriod: ").append(toIndentedString(holdOutPeriod)).append("\n");
    sb.append("    noFcst: ").append(toIndentedString(noFcst)).append("\n");
    sb.append("    periodicity: ").append(toIndentedString(periodicity)).append("\n");
    sb.append("    rewindTimeFrame: ").append(toIndentedString(rewindTimeFrame)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costOfError");
    openapiFields.add("discardData");
    openapiFields.add("errorType");
    openapiFields.add("holdOutPeriod");
    openapiFields.add("noFcst");
    openapiFields.add("periodicity");
    openapiFields.add("rewindTimeFrame");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RewindHyperparameterResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RewindHyperparameterResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RewindHyperparameterResponse is not found in the empty JSON string", RewindHyperparameterResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RewindHyperparameterResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RewindHyperparameterResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) && !jsonObj.get("errorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorType").toString()));
      }
      // validate the optional field `errorType`
      if (jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) {
        ErrorTypeEnum.validateJsonElement(jsonObj.get("errorType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RewindHyperparameterResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RewindHyperparameterResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RewindHyperparameterResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RewindHyperparameterResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RewindHyperparameterResponse>() {
           @Override
           public void write(JsonWriter out, RewindHyperparameterResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RewindHyperparameterResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RewindHyperparameterResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RewindHyperparameterResponse
   * @throws IOException if the JSON string is invalid with respect to RewindHyperparameterResponse
   */
  public static RewindHyperparameterResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RewindHyperparameterResponse.class);
  }

  /**
   * Convert an instance of RewindHyperparameterResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

