/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ForecastOptimalParametersResponse;
import org.openapitools.client.model.OutlierResponse;
import org.openapitools.client.model.PlanningLevelForecastResultData;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimeSeriesFullDetailsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:22.874424-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesFullDetailsResponse {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Double error;

  public static final String SERIALIZED_NAME_FORECAST_DATA = "forecastData";
  @SerializedName(SERIALIZED_NAME_FORECAST_DATA)
  private List<PlanningLevelForecastResultData> forecastData;

  public static final String SERIALIZED_NAME_HISTORY_DATA = "historyData";
  @SerializedName(SERIALIZED_NAME_HISTORY_DATA)
  private List<PlanningLevelForecastResultData> historyData;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_OPTIMAL_PARAMETERS = "optimalParameters";
  @SerializedName(SERIALIZED_NAME_OPTIMAL_PARAMETERS)
  private ForecastOptimalParametersResponse optimalParameters;

  public static final String SERIALIZED_NAME_OUTLIERS = "outliers";
  @SerializedName(SERIALIZED_NAME_OUTLIERS)
  private List<OutlierResponse> outliers;

  public static final String SERIALIZED_NAME_TIME_SERIES_ID = "timeSeriesId";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID)
  private String timeSeriesId;

  public TimeSeriesFullDetailsResponse() {
  }

  public TimeSeriesFullDetailsResponse error(Double error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Double getError() {
    return error;
  }

  public void setError(Double error) {
    this.error = error;
  }


  public TimeSeriesFullDetailsResponse forecastData(List<PlanningLevelForecastResultData> forecastData) {
    this.forecastData = forecastData;
    return this;
  }

  public TimeSeriesFullDetailsResponse addForecastDataItem(PlanningLevelForecastResultData forecastDataItem) {
    if (this.forecastData == null) {
      this.forecastData = new ArrayList<>();
    }
    this.forecastData.add(forecastDataItem);
    return this;
  }

  /**
   * Get forecastData
   * @return forecastData
   */
  @javax.annotation.Nullable
  public List<PlanningLevelForecastResultData> getForecastData() {
    return forecastData;
  }

  public void setForecastData(List<PlanningLevelForecastResultData> forecastData) {
    this.forecastData = forecastData;
  }


  public TimeSeriesFullDetailsResponse historyData(List<PlanningLevelForecastResultData> historyData) {
    this.historyData = historyData;
    return this;
  }

  public TimeSeriesFullDetailsResponse addHistoryDataItem(PlanningLevelForecastResultData historyDataItem) {
    if (this.historyData == null) {
      this.historyData = new ArrayList<>();
    }
    this.historyData.add(historyDataItem);
    return this;
  }

  /**
   * Get historyData
   * @return historyData
   */
  @javax.annotation.Nullable
  public List<PlanningLevelForecastResultData> getHistoryData() {
    return historyData;
  }

  public void setHistoryData(List<PlanningLevelForecastResultData> historyData) {
    this.historyData = historyData;
  }


  public TimeSeriesFullDetailsResponse method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public TimeSeriesFullDetailsResponse optimalParameters(ForecastOptimalParametersResponse optimalParameters) {
    this.optimalParameters = optimalParameters;
    return this;
  }

  /**
   * Get optimalParameters
   * @return optimalParameters
   */
  @javax.annotation.Nullable
  public ForecastOptimalParametersResponse getOptimalParameters() {
    return optimalParameters;
  }

  public void setOptimalParameters(ForecastOptimalParametersResponse optimalParameters) {
    this.optimalParameters = optimalParameters;
  }


  public TimeSeriesFullDetailsResponse outliers(List<OutlierResponse> outliers) {
    this.outliers = outliers;
    return this;
  }

  public TimeSeriesFullDetailsResponse addOutliersItem(OutlierResponse outliersItem) {
    if (this.outliers == null) {
      this.outliers = new ArrayList<>();
    }
    this.outliers.add(outliersItem);
    return this;
  }

  /**
   * Get outliers
   * @return outliers
   */
  @javax.annotation.Nullable
  public List<OutlierResponse> getOutliers() {
    return outliers;
  }

  public void setOutliers(List<OutlierResponse> outliers) {
    this.outliers = outliers;
  }


  public TimeSeriesFullDetailsResponse timeSeriesId(String timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
    return this;
  }

  /**
   * Get timeSeriesId
   * @return timeSeriesId
   */
  @javax.annotation.Nullable
  public String getTimeSeriesId() {
    return timeSeriesId;
  }

  public void setTimeSeriesId(String timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesFullDetailsResponse timeSeriesFullDetailsResponse = (TimeSeriesFullDetailsResponse) o;
    return Objects.equals(this.error, timeSeriesFullDetailsResponse.error) &&
        Objects.equals(this.forecastData, timeSeriesFullDetailsResponse.forecastData) &&
        Objects.equals(this.historyData, timeSeriesFullDetailsResponse.historyData) &&
        Objects.equals(this.method, timeSeriesFullDetailsResponse.method) &&
        Objects.equals(this.optimalParameters, timeSeriesFullDetailsResponse.optimalParameters) &&
        Objects.equals(this.outliers, timeSeriesFullDetailsResponse.outliers) &&
        Objects.equals(this.timeSeriesId, timeSeriesFullDetailsResponse.timeSeriesId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, forecastData, historyData, method, optimalParameters, outliers, timeSeriesId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesFullDetailsResponse {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    forecastData: ").append(toIndentedString(forecastData)).append("\n");
    sb.append("    historyData: ").append(toIndentedString(historyData)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    optimalParameters: ").append(toIndentedString(optimalParameters)).append("\n");
    sb.append("    outliers: ").append(toIndentedString(outliers)).append("\n");
    sb.append("    timeSeriesId: ").append(toIndentedString(timeSeriesId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("forecastData");
    openapiFields.add("historyData");
    openapiFields.add("method");
    openapiFields.add("optimalParameters");
    openapiFields.add("outliers");
    openapiFields.add("timeSeriesId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesFullDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesFullDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesFullDetailsResponse is not found in the empty JSON string", TimeSeriesFullDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesFullDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesFullDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("forecastData") != null && !jsonObj.get("forecastData").isJsonNull()) {
        JsonArray jsonArrayforecastData = jsonObj.getAsJsonArray("forecastData");
        if (jsonArrayforecastData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forecastData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forecastData` to be an array in the JSON string but got `%s`", jsonObj.get("forecastData").toString()));
          }

          // validate the optional field `forecastData` (array)
          for (int i = 0; i < jsonArrayforecastData.size(); i++) {
            PlanningLevelForecastResultData.validateJsonElement(jsonArrayforecastData.get(i));
          };
        }
      }
      if (jsonObj.get("historyData") != null && !jsonObj.get("historyData").isJsonNull()) {
        JsonArray jsonArrayhistoryData = jsonObj.getAsJsonArray("historyData");
        if (jsonArrayhistoryData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("historyData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `historyData` to be an array in the JSON string but got `%s`", jsonObj.get("historyData").toString()));
          }

          // validate the optional field `historyData` (array)
          for (int i = 0; i < jsonArrayhistoryData.size(); i++) {
            PlanningLevelForecastResultData.validateJsonElement(jsonArrayhistoryData.get(i));
          };
        }
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `optimalParameters`
      if (jsonObj.get("optimalParameters") != null && !jsonObj.get("optimalParameters").isJsonNull()) {
        ForecastOptimalParametersResponse.validateJsonElement(jsonObj.get("optimalParameters"));
      }
      if (jsonObj.get("outliers") != null && !jsonObj.get("outliers").isJsonNull()) {
        JsonArray jsonArrayoutliers = jsonObj.getAsJsonArray("outliers");
        if (jsonArrayoutliers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outliers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outliers` to be an array in the JSON string but got `%s`", jsonObj.get("outliers").toString()));
          }

          // validate the optional field `outliers` (array)
          for (int i = 0; i < jsonArrayoutliers.size(); i++) {
            OutlierResponse.validateJsonElement(jsonArrayoutliers.get(i));
          };
        }
      }
      if ((jsonObj.get("timeSeriesId") != null && !jsonObj.get("timeSeriesId").isJsonNull()) && !jsonObj.get("timeSeriesId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeSeriesId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesFullDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesFullDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesFullDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesFullDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesFullDetailsResponse>() {
           @Override
           public void write(JsonWriter out, TimeSeriesFullDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesFullDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesFullDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesFullDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesFullDetailsResponse
   */
  public static TimeSeriesFullDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesFullDetailsResponse.class);
  }

  /**
   * Convert an instance of TimeSeriesFullDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

