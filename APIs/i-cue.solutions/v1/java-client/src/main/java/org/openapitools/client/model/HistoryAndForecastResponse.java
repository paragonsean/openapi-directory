/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ForecastHyperparameterResponse;
import org.openapitools.client.model.TimeSeriesHistoryAndForecastResponse;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistoryAndForecastResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:22.874424-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoryAndForecastResponse {
  public static final String SERIALIZED_NAME_HYPERPARAMETERS = "hyperparameters";
  @SerializedName(SERIALIZED_NAME_HYPERPARAMETERS)
  private ForecastHyperparameterResponse hyperparameters;

  public static final String SERIALIZED_NAME_TIME_SERIES = "timeSeries";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES)
  private List<TimeSeriesHistoryAndForecastResponse> timeSeries;

  public HistoryAndForecastResponse() {
  }

  public HistoryAndForecastResponse hyperparameters(ForecastHyperparameterResponse hyperparameters) {
    this.hyperparameters = hyperparameters;
    return this;
  }

  /**
   * Get hyperparameters
   * @return hyperparameters
   */
  @javax.annotation.Nullable
  public ForecastHyperparameterResponse getHyperparameters() {
    return hyperparameters;
  }

  public void setHyperparameters(ForecastHyperparameterResponse hyperparameters) {
    this.hyperparameters = hyperparameters;
  }


  public HistoryAndForecastResponse timeSeries(List<TimeSeriesHistoryAndForecastResponse> timeSeries) {
    this.timeSeries = timeSeries;
    return this;
  }

  public HistoryAndForecastResponse addTimeSeriesItem(TimeSeriesHistoryAndForecastResponse timeSeriesItem) {
    if (this.timeSeries == null) {
      this.timeSeries = new ArrayList<>();
    }
    this.timeSeries.add(timeSeriesItem);
    return this;
  }

  /**
   * Get timeSeries
   * @return timeSeries
   */
  @javax.annotation.Nullable
  public List<TimeSeriesHistoryAndForecastResponse> getTimeSeries() {
    return timeSeries;
  }

  public void setTimeSeries(List<TimeSeriesHistoryAndForecastResponse> timeSeries) {
    this.timeSeries = timeSeries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryAndForecastResponse historyAndForecastResponse = (HistoryAndForecastResponse) o;
    return Objects.equals(this.hyperparameters, historyAndForecastResponse.hyperparameters) &&
        Objects.equals(this.timeSeries, historyAndForecastResponse.timeSeries);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hyperparameters, timeSeries);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryAndForecastResponse {\n");
    sb.append("    hyperparameters: ").append(toIndentedString(hyperparameters)).append("\n");
    sb.append("    timeSeries: ").append(toIndentedString(timeSeries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hyperparameters");
    openapiFields.add("timeSeries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoryAndForecastResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoryAndForecastResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoryAndForecastResponse is not found in the empty JSON string", HistoryAndForecastResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoryAndForecastResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoryAndForecastResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `hyperparameters`
      if (jsonObj.get("hyperparameters") != null && !jsonObj.get("hyperparameters").isJsonNull()) {
        ForecastHyperparameterResponse.validateJsonElement(jsonObj.get("hyperparameters"));
      }
      if (jsonObj.get("timeSeries") != null && !jsonObj.get("timeSeries").isJsonNull()) {
        JsonArray jsonArraytimeSeries = jsonObj.getAsJsonArray("timeSeries");
        if (jsonArraytimeSeries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeSeries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeSeries` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeries").toString()));
          }

          // validate the optional field `timeSeries` (array)
          for (int i = 0; i < jsonArraytimeSeries.size(); i++) {
            TimeSeriesHistoryAndForecastResponse.validateJsonElement(jsonArraytimeSeries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoryAndForecastResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoryAndForecastResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoryAndForecastResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoryAndForecastResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoryAndForecastResponse>() {
           @Override
           public void write(JsonWriter out, HistoryAndForecastResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoryAndForecastResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoryAndForecastResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoryAndForecastResponse
   * @throws IOException if the JSON string is invalid with respect to HistoryAndForecastResponse
   */
  public static HistoryAndForecastResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoryAndForecastResponse.class);
  }

  /**
   * Convert an instance of HistoryAndForecastResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

