/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InventoryManagementApi
 */
@Disabled
public class InventoryManagementApiTest {

    private final InventoryManagementApi api = new InventoryManagementApi();

    /**
     * Calculate Amazon Inventory Performance Index (IPI)
     *
     * Calculate Amazon Inventory Performance Index (IPI)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryAmazonIpiPostTest() throws ApiException {
        String token = null;
        api.inventoryAmazonIpiPost(token);
        // TODO: test validations
    }

    /**
     * Carrying Cost
     *
     * Carrying Cost
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryCaryyingCostPostTest() throws ApiException {
        String token = null;
        api.inventoryCaryyingCostPost(token);
        // TODO: test validations
    }

    /**
     * Calculate economic order quantity
     *
     * Calculate economic order quantity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryEoqPostTest() throws ApiException {
        String token = null;
        api.inventoryEoqPost(token);
        // TODO: test validations
    }

    /**
     * Calculate fill rate
     *
     * Calculate fill rate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryFillRatePostTest() throws ApiException {
        String token = null;
        api.inventoryFillRatePost(token);
        // TODO: test validations
    }

    /**
     * Calculate financial impact of forecast accuracy
     *
     * Calculate financial impact of forecast accuracy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryFinancialImapctForecastAccuracyPostTest() throws ApiException {
        String token = null;
        api.inventoryFinancialImapctForecastAccuracyPost(token);
        // TODO: test validations
    }

    /**
     * Inventroy Turn-over
     *
     * Inventroy Turn-over
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryInventoryTurnoverPostTest() throws ApiException {
        String token = null;
        api.inventoryInventoryTurnoverPost(token);
        // TODO: test validations
    }

    /**
     * Calculate lead time demand
     *
     * Calculate lead time demand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryLtdPostTest() throws ApiException {
        String token = null;
        api.inventoryLtdPost(token);
        // TODO: test validations
    }

    /**
     * Calculate minimum order quantity
     *
     * Calculate minimum order quantity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryMoqPostTest() throws ApiException {
        String token = null;
        api.inventoryMoqPost(token);
        // TODO: test validations
    }

    /**
     * Calculate optimal service level
     *
     * Calculate optimal service level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryOptimalServiceLevelPostTest() throws ApiException {
        String token = null;
        api.inventoryOptimalServiceLevelPost(token);
        // TODO: test validations
    }

    /**
     * Re-order Point
     *
     * Re-order Point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryReorderPointPostTest() throws ApiException {
        String token = null;
        api.inventoryReorderPointPost(token);
        // TODO: test validations
    }

    /**
     * Safety Stock
     *
     * Safety Stock
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventorySafetyStockPostTest() throws ApiException {
        String token = null;
        api.inventorySafetyStockPost(token);
        // TODO: test validations
    }

    /**
     * Calculate service level
     *
     * Calculate service level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryServiceLevelPostTest() throws ApiException {
        String token = null;
        api.inventoryServiceLevelPost(token);
        // TODO: test validations
    }

    /**
     * Calculate inventory turns
     *
     * Calculate inventory turns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryTurnsPostTest() throws ApiException {
        String token = null;
        api.inventoryTurnsPost(token);
        // TODO: test validations
    }

}
