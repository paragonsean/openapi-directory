/*
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EntityResponse;
import java.io.File;
import org.openapitools.client.model.JsonForecastResponse;
import org.openapitools.client.model.MethodDto;
import org.openapitools.client.model.NewEntityRequest;
import org.openapitools.client.model.NewModelRequest;
import org.openapitools.client.model.NewTokenRequest;
import org.openapitools.client.model.NewUserRequest;
import org.openapitools.client.model.ToggleRequest;
import org.openapitools.client.model.ToggleUserRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdministrationApi
 */
@Disabled
public class AdministrationApiTest {

    private final AdministrationApi api = new AdministrationApi();

    /**
     * Get all organizations
     *
     * This is an iCUE only endpoint or Enterprise feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationEntityGetTest() throws ApiException {
        String token = null;
        List<EntityResponse> response = api.administrationEntityGet(token);
        // TODO: test validations
    }

    /**
     * Delete organization
     *
     * This is an iCUE only endpoint or Enterprise feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationEntityIdDeleteTest() throws ApiException {
        Integer id = null;
        String token = null;
        api.administrationEntityIdDelete(id, token);
        // TODO: test validations
    }

    /**
     * Create organization
     *
     * This is an iCUE only endpoint or Enterprise feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationEntityPostTest() throws ApiException {
        String token = null;
        NewEntityRequest newEntityRequest = null;
        UUID response = api.administrationEntityPost(token, newEntityRequest);
        // TODO: test validations
    }

    /**
     * Pause organization
     *
     * This is an iCUE only endpoint or Enterprise feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationEntityPutTest() throws ApiException {
        String token = null;
        ToggleRequest toggleRequest = null;
        api.administrationEntityPut(token, toggleRequest);
        // TODO: test validations
    }

    /**
     * Transform data file to JSON format
     *
     * Transform data file to JSON format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationFileToJsonPostTest() throws ApiException {
        File _file = null;
        Integer periodicity = null;
        String token = null;
        JsonForecastResponse response = api.administrationFileToJsonPost(_file, periodicity, token);
        // TODO: test validations
    }

    /**
     * Get Models for Organization
     *
     * Returns models registered for Organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationModelEntityIdGetTest() throws ApiException {
        Integer entityId = null;
        String token = null;
        List<MethodDto> response = api.administrationModelEntityIdGet(entityId, token);
        // TODO: test validations
    }

    /**
     * Register new forecasting model
     *
     * Register new forecasting model for single organziation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationModelEntityIdPostTest() throws ApiException {
        Integer entityId = null;
        String token = null;
        NewModelRequest newModelRequest = null;
        MethodDto response = api.administrationModelEntityIdPost(entityId, token, newModelRequest);
        // TODO: test validations
    }

    /**
     * Get all common Models
     *
     * Returns models that are common for all Organizations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationModelGetTest() throws ApiException {
        String token = null;
        List<MethodDto> response = api.administrationModelGet(token);
        // TODO: test validations
    }

    /**
     * Register new forecasting model
     *
     * Register new forecasting model for all organziations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationModelPostTest() throws ApiException {
        String token = null;
        NewModelRequest newModelRequest = null;
        MethodDto response = api.administrationModelPost(token, newModelRequest);
        // TODO: test validations
    }

    /**
     * Delete planning level
     *
     * Delete planning level. This is an Enterprise feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationPlanningLevelEntityIdIdDeleteTest() throws ApiException {
        Integer entityId = null;
        Integer id = null;
        String token = null;
        api.administrationPlanningLevelEntityIdIdDelete(entityId, id, token);
        // TODO: test validations
    }

    /**
     * Lock planning level
     *
     * Lock planning level against modification. This is an Enterprise feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationPlanningLevelLockPostTest() throws ApiException {
        String token = null;
        api.administrationPlanningLevelLockPost(token);
        // TODO: test validations
    }

    /**
     * Issue a token
     *
     * This is an iCUE only endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationTokenPostTest() throws ApiException {
        String token = null;
        NewTokenRequest newTokenRequest = null;
        UUID response = api.administrationTokenPost(token, newTokenRequest);
        // TODO: test validations
    }

    /**
     * Get all users
     *
     * Get all users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationUserEntityIdGetTest() throws ApiException {
        Integer entityId = null;
        String token = null;
        api.administrationUserEntityIdGet(entityId, token);
        // TODO: test validations
    }

    /**
     * Delete user
     *
     * Delete user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationUserEntityIdIdDeleteTest() throws ApiException {
        Integer entityId = null;
        Integer id = null;
        String token = null;
        api.administrationUserEntityIdIdDelete(entityId, id, token);
        // TODO: test validations
    }

    /**
     * Lock user
     *
     * After lock user won&#39;t be able to use iCUE API endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationUserLockPutTest() throws ApiException {
        String token = null;
        ToggleUserRequest toggleUserRequest = null;
        api.administrationUserLockPut(token, toggleUserRequest);
        // TODO: test validations
    }

    /**
     * Create user
     *
     * Create new user for entity/organization. This can be done by entity administrator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationUserPostTest() throws ApiException {
        String token = null;
        NewUserRequest newUserRequest = null;
        UUID response = api.administrationUserPost(token, newUserRequest);
        // TODO: test validations
    }

    /**
     * Update user
     *
     * Update user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void administrationUserPutTest() throws ApiException {
        String token = null;
        api.administrationUserPut(token);
        // TODO: test validations
    }

}
