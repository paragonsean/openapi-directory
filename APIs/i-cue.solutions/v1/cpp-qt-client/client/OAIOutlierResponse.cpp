/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutlierResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutlierResponse::OAIOutlierResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutlierResponse::OAIOutlierResponse() {
    this->initializeModel();
}

OAIOutlierResponse::~OAIOutlierResponse() {}

void OAIOutlierResponse::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOutlierResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutlierResponse::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOutlierResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutlierResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAIOutlierResponse::getIndex() const {
    return m_index;
}
void OAIOutlierResponse::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIOutlierResponse::is_index_Set() const{
    return m_index_isSet;
}

bool OAIOutlierResponse::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIOutlierResponse::getType() const {
    return m_type;
}
void OAIOutlierResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOutlierResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOutlierResponse::is_type_Valid() const{
    return m_type_isValid;
}

double OAIOutlierResponse::getValue() const {
    return m_value;
}
void OAIOutlierResponse::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOutlierResponse::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOutlierResponse::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOutlierResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutlierResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
