/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastPerformanceDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastPerformanceDataRequest::OAIForecastPerformanceDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastPerformanceDataRequest::OAIForecastPerformanceDataRequest() {
    this->initializeModel();
}

OAIForecastPerformanceDataRequest::~OAIForecastPerformanceDataRequest() {}

void OAIForecastPerformanceDataRequest::initializeModel() {

    m_forecast_values_isSet = false;
    m_forecast_values_isValid = false;

    m_history_values_isSet = false;
    m_history_values_isValid = false;

    m_time_series_id_isSet = false;
    m_time_series_id_isValid = false;
}

void OAIForecastPerformanceDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastPerformanceDataRequest::fromJsonObject(QJsonObject json) {

    m_forecast_values_isValid = ::OpenAPI::fromJsonValue(m_forecast_values, json[QString("forecastValues")]);
    m_forecast_values_isSet = !json[QString("forecastValues")].isNull() && m_forecast_values_isValid;

    m_history_values_isValid = ::OpenAPI::fromJsonValue(m_history_values, json[QString("historyValues")]);
    m_history_values_isSet = !json[QString("historyValues")].isNull() && m_history_values_isValid;

    m_time_series_id_isValid = ::OpenAPI::fromJsonValue(m_time_series_id, json[QString("timeSeriesId")]);
    m_time_series_id_isSet = !json[QString("timeSeriesId")].isNull() && m_time_series_id_isValid;
}

QString OAIForecastPerformanceDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastPerformanceDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_forecast_values.size() > 0) {
        obj.insert(QString("forecastValues"), ::OpenAPI::toJsonValue(m_forecast_values));
    }
    if (m_history_values.size() > 0) {
        obj.insert(QString("historyValues"), ::OpenAPI::toJsonValue(m_history_values));
    }
    if (m_time_series_id_isSet) {
        obj.insert(QString("timeSeriesId"), ::OpenAPI::toJsonValue(m_time_series_id));
    }
    return obj;
}

QList<double> OAIForecastPerformanceDataRequest::getForecastValues() const {
    return m_forecast_values;
}
void OAIForecastPerformanceDataRequest::setForecastValues(const QList<double> &forecast_values) {
    m_forecast_values = forecast_values;
    m_forecast_values_isSet = true;
}

bool OAIForecastPerformanceDataRequest::is_forecast_values_Set() const{
    return m_forecast_values_isSet;
}

bool OAIForecastPerformanceDataRequest::is_forecast_values_Valid() const{
    return m_forecast_values_isValid;
}

QList<double> OAIForecastPerformanceDataRequest::getHistoryValues() const {
    return m_history_values;
}
void OAIForecastPerformanceDataRequest::setHistoryValues(const QList<double> &history_values) {
    m_history_values = history_values;
    m_history_values_isSet = true;
}

bool OAIForecastPerformanceDataRequest::is_history_values_Set() const{
    return m_history_values_isSet;
}

bool OAIForecastPerformanceDataRequest::is_history_values_Valid() const{
    return m_history_values_isValid;
}

QString OAIForecastPerformanceDataRequest::getTimeSeriesId() const {
    return m_time_series_id;
}
void OAIForecastPerformanceDataRequest::setTimeSeriesId(const QString &time_series_id) {
    m_time_series_id = time_series_id;
    m_time_series_id_isSet = true;
}

bool OAIForecastPerformanceDataRequest::is_time_series_id_Set() const{
    return m_time_series_id_isSet;
}

bool OAIForecastPerformanceDataRequest::is_time_series_id_Valid() const{
    return m_time_series_id_isValid;
}

bool OAIForecastPerformanceDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forecast_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastPerformanceDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
