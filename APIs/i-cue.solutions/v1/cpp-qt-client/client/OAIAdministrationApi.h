/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdministrationApi_H
#define OAI_OAIAdministrationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEntityResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIJsonForecastResponse.h"
#include "OAIMethodDto.h"
#include "OAINewEntityRequest.h"
#include "OAINewModelRequest.h"
#include "OAINewTokenRequest.h"
#include "OAINewUserRequest.h"
#include "OAIToggleRequest.h"
#include "OAIToggleUserRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdministrationApi : public QObject {
    Q_OBJECT

public:
    OAIAdministrationApi(const int timeOut = 0);
    ~OAIAdministrationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    */
    virtual void administrationEntityGet(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  token QString [optional]
    */
    virtual void administrationEntityIdDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_new_entity_request OAINewEntityRequest [optional]
    */
    virtual void administrationEntityPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINewEntityRequest> &oai_new_entity_request = ::OpenAPI::OptionalParam<OAINewEntityRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_toggle_request OAIToggleRequest [optional]
    */
    virtual void administrationEntityPut(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIToggleRequest> &oai_toggle_request = ::OpenAPI::OptionalParam<OAIToggleRequest>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  periodicity qint32 [required]
    * @param[in]  token QString [optional]
    */
    virtual void administrationFileToJsonPost(const OAIHttpFileElement &file, const qint32 &periodicity, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entity_id qint32 [required]
    * @param[in]  token QString [optional]
    */
    virtual void administrationModelEntityIdGet(const qint32 &entity_id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entity_id qint32 [required]
    * @param[in]  token QString [optional]
    * @param[in]  oai_new_model_request OAINewModelRequest [optional]
    */
    virtual void administrationModelEntityIdPost(const qint32 &entity_id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINewModelRequest> &oai_new_model_request = ::OpenAPI::OptionalParam<OAINewModelRequest>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void administrationModelGet(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_new_model_request OAINewModelRequest [optional]
    */
    virtual void administrationModelPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINewModelRequest> &oai_new_model_request = ::OpenAPI::OptionalParam<OAINewModelRequest>());

    /**
    * @param[in]  entity_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  token QString [optional]
    */
    virtual void administrationPlanningLevelEntityIdIdDelete(const qint32 &entity_id, const qint32 &id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void administrationPlanningLevelLockPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_new_token_request OAINewTokenRequest [optional]
    */
    virtual void administrationTokenPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINewTokenRequest> &oai_new_token_request = ::OpenAPI::OptionalParam<OAINewTokenRequest>());

    /**
    * @param[in]  entity_id qint32 [required]
    * @param[in]  token QString [optional]
    */
    virtual void administrationUserEntityIdGet(const qint32 &entity_id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entity_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  token QString [optional]
    */
    virtual void administrationUserEntityIdIdDelete(const qint32 &entity_id, const qint32 &id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_toggle_user_request OAIToggleUserRequest [optional]
    */
    virtual void administrationUserLockPut(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIToggleUserRequest> &oai_toggle_user_request = ::OpenAPI::OptionalParam<OAIToggleUserRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_new_user_request OAINewUserRequest [optional]
    */
    virtual void administrationUserPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINewUserRequest> &oai_new_user_request = ::OpenAPI::OptionalParam<OAINewUserRequest>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void administrationUserPut(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void administrationEntityGetCallback(OAIHttpRequestWorker *worker);
    void administrationEntityIdDeleteCallback(OAIHttpRequestWorker *worker);
    void administrationEntityPostCallback(OAIHttpRequestWorker *worker);
    void administrationEntityPutCallback(OAIHttpRequestWorker *worker);
    void administrationFileToJsonPostCallback(OAIHttpRequestWorker *worker);
    void administrationModelEntityIdGetCallback(OAIHttpRequestWorker *worker);
    void administrationModelEntityIdPostCallback(OAIHttpRequestWorker *worker);
    void administrationModelGetCallback(OAIHttpRequestWorker *worker);
    void administrationModelPostCallback(OAIHttpRequestWorker *worker);
    void administrationPlanningLevelEntityIdIdDeleteCallback(OAIHttpRequestWorker *worker);
    void administrationPlanningLevelLockPostCallback(OAIHttpRequestWorker *worker);
    void administrationTokenPostCallback(OAIHttpRequestWorker *worker);
    void administrationUserEntityIdGetCallback(OAIHttpRequestWorker *worker);
    void administrationUserEntityIdIdDeleteCallback(OAIHttpRequestWorker *worker);
    void administrationUserLockPutCallback(OAIHttpRequestWorker *worker);
    void administrationUserPostCallback(OAIHttpRequestWorker *worker);
    void administrationUserPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void administrationEntityGetSignal(QList<OAIEntityResponse> summary);
    void administrationEntityIdDeleteSignal();
    void administrationEntityPostSignal(QString summary);
    void administrationEntityPutSignal();
    void administrationFileToJsonPostSignal(OAIJsonForecastResponse summary);
    void administrationModelEntityIdGetSignal(QList<OAIMethodDto> summary);
    void administrationModelEntityIdPostSignal(OAIMethodDto summary);
    void administrationModelGetSignal(QList<OAIMethodDto> summary);
    void administrationModelPostSignal(OAIMethodDto summary);
    void administrationPlanningLevelEntityIdIdDeleteSignal();
    void administrationPlanningLevelLockPostSignal();
    void administrationTokenPostSignal(QString summary);
    void administrationUserEntityIdGetSignal();
    void administrationUserEntityIdIdDeleteSignal();
    void administrationUserLockPutSignal();
    void administrationUserPostSignal(QString summary);
    void administrationUserPutSignal();


    void administrationEntityGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityResponse> summary);
    void administrationEntityIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void administrationEntityPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void administrationEntityPutSignalFull(OAIHttpRequestWorker *worker);
    void administrationFileToJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIJsonForecastResponse summary);
    void administrationModelEntityIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMethodDto> summary);
    void administrationModelEntityIdPostSignalFull(OAIHttpRequestWorker *worker, OAIMethodDto summary);
    void administrationModelGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMethodDto> summary);
    void administrationModelPostSignalFull(OAIHttpRequestWorker *worker, OAIMethodDto summary);
    void administrationPlanningLevelEntityIdIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void administrationPlanningLevelLockPostSignalFull(OAIHttpRequestWorker *worker);
    void administrationTokenPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void administrationUserEntityIdGetSignalFull(OAIHttpRequestWorker *worker);
    void administrationUserEntityIdIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void administrationUserLockPutSignalFull(OAIHttpRequestWorker *worker);
    void administrationUserPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void administrationUserPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use administrationEntityGetSignalError() instead")
    void administrationEntityGetSignalE(QList<OAIEntityResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationEntityGetSignalError(QList<OAIEntityResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationEntityIdDeleteSignalError() instead")
    void administrationEntityIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void administrationEntityIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationEntityPostSignalError() instead")
    void administrationEntityPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationEntityPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationEntityPutSignalError() instead")
    void administrationEntityPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void administrationEntityPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationFileToJsonPostSignalError() instead")
    void administrationFileToJsonPostSignalE(OAIJsonForecastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationFileToJsonPostSignalError(OAIJsonForecastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationModelEntityIdGetSignalError() instead")
    void administrationModelEntityIdGetSignalE(QList<OAIMethodDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationModelEntityIdGetSignalError(QList<OAIMethodDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationModelEntityIdPostSignalError() instead")
    void administrationModelEntityIdPostSignalE(OAIMethodDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationModelEntityIdPostSignalError(OAIMethodDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationModelGetSignalError() instead")
    void administrationModelGetSignalE(QList<OAIMethodDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationModelGetSignalError(QList<OAIMethodDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationModelPostSignalError() instead")
    void administrationModelPostSignalE(OAIMethodDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationModelPostSignalError(OAIMethodDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationPlanningLevelEntityIdIdDeleteSignalError() instead")
    void administrationPlanningLevelEntityIdIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void administrationPlanningLevelEntityIdIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationPlanningLevelLockPostSignalError() instead")
    void administrationPlanningLevelLockPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void administrationPlanningLevelLockPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationTokenPostSignalError() instead")
    void administrationTokenPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationTokenPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserEntityIdGetSignalError() instead")
    void administrationUserEntityIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserEntityIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserEntityIdIdDeleteSignalError() instead")
    void administrationUserEntityIdIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserEntityIdIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserLockPutSignalError() instead")
    void administrationUserLockPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserLockPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserPostSignalError() instead")
    void administrationUserPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserPutSignalError() instead")
    void administrationUserPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use administrationEntityGetSignalErrorFull() instead")
    void administrationEntityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationEntityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationEntityIdDeleteSignalErrorFull() instead")
    void administrationEntityIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationEntityIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationEntityPostSignalErrorFull() instead")
    void administrationEntityPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationEntityPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationEntityPutSignalErrorFull() instead")
    void administrationEntityPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationEntityPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationFileToJsonPostSignalErrorFull() instead")
    void administrationFileToJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationFileToJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationModelEntityIdGetSignalErrorFull() instead")
    void administrationModelEntityIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationModelEntityIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationModelEntityIdPostSignalErrorFull() instead")
    void administrationModelEntityIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationModelEntityIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationModelGetSignalErrorFull() instead")
    void administrationModelGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationModelGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationModelPostSignalErrorFull() instead")
    void administrationModelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationModelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationPlanningLevelEntityIdIdDeleteSignalErrorFull() instead")
    void administrationPlanningLevelEntityIdIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationPlanningLevelEntityIdIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationPlanningLevelLockPostSignalErrorFull() instead")
    void administrationPlanningLevelLockPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationPlanningLevelLockPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationTokenPostSignalErrorFull() instead")
    void administrationTokenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationTokenPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserEntityIdGetSignalErrorFull() instead")
    void administrationUserEntityIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserEntityIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserEntityIdIdDeleteSignalErrorFull() instead")
    void administrationUserEntityIdIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserEntityIdIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserLockPutSignalErrorFull() instead")
    void administrationUserLockPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserLockPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserPostSignalErrorFull() instead")
    void administrationUserPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use administrationUserPutSignalErrorFull() instead")
    void administrationUserPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void administrationUserPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
