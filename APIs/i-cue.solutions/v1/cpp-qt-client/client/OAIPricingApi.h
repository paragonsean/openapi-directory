/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPricingApi_H
#define OAI_OAIPricingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPricingApi : public QObject {
    Q_OBJECT

public:
    OAIPricingApi(const int timeOut = 0);
    ~OAIPricingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    */
    virtual void pricingBundlePricingPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void pricingCompetitivePricingPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void pricingCostPlusPricingPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void pricingDecoyPricingPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void pricingOddPricingPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void pricingPenetrationPricingPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void pricingPriceElasticityOfDemandPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void pricingBundlePricingPostCallback(OAIHttpRequestWorker *worker);
    void pricingCompetitivePricingPostCallback(OAIHttpRequestWorker *worker);
    void pricingCostPlusPricingPostCallback(OAIHttpRequestWorker *worker);
    void pricingDecoyPricingPostCallback(OAIHttpRequestWorker *worker);
    void pricingOddPricingPostCallback(OAIHttpRequestWorker *worker);
    void pricingPenetrationPricingPostCallback(OAIHttpRequestWorker *worker);
    void pricingPriceElasticityOfDemandPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void pricingBundlePricingPostSignal();
    void pricingCompetitivePricingPostSignal();
    void pricingCostPlusPricingPostSignal();
    void pricingDecoyPricingPostSignal();
    void pricingOddPricingPostSignal();
    void pricingPenetrationPricingPostSignal();
    void pricingPriceElasticityOfDemandPostSignal();


    void pricingBundlePricingPostSignalFull(OAIHttpRequestWorker *worker);
    void pricingCompetitivePricingPostSignalFull(OAIHttpRequestWorker *worker);
    void pricingCostPlusPricingPostSignalFull(OAIHttpRequestWorker *worker);
    void pricingDecoyPricingPostSignalFull(OAIHttpRequestWorker *worker);
    void pricingOddPricingPostSignalFull(OAIHttpRequestWorker *worker);
    void pricingPenetrationPricingPostSignalFull(OAIHttpRequestWorker *worker);
    void pricingPriceElasticityOfDemandPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use pricingBundlePricingPostSignalError() instead")
    void pricingBundlePricingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricingBundlePricingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingCompetitivePricingPostSignalError() instead")
    void pricingCompetitivePricingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricingCompetitivePricingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingCostPlusPricingPostSignalError() instead")
    void pricingCostPlusPricingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricingCostPlusPricingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingDecoyPricingPostSignalError() instead")
    void pricingDecoyPricingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricingDecoyPricingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingOddPricingPostSignalError() instead")
    void pricingOddPricingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricingOddPricingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingPenetrationPricingPostSignalError() instead")
    void pricingPenetrationPricingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricingPenetrationPricingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingPriceElasticityOfDemandPostSignalError() instead")
    void pricingPriceElasticityOfDemandPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricingPriceElasticityOfDemandPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use pricingBundlePricingPostSignalErrorFull() instead")
    void pricingBundlePricingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingBundlePricingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingCompetitivePricingPostSignalErrorFull() instead")
    void pricingCompetitivePricingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingCompetitivePricingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingCostPlusPricingPostSignalErrorFull() instead")
    void pricingCostPlusPricingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingCostPlusPricingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingDecoyPricingPostSignalErrorFull() instead")
    void pricingDecoyPricingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingDecoyPricingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingOddPricingPostSignalErrorFull() instead")
    void pricingOddPricingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingOddPricingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingPenetrationPricingPostSignalErrorFull() instead")
    void pricingPenetrationPricingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingPenetrationPricingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingPriceElasticityOfDemandPostSignalErrorFull() instead")
    void pricingPriceElasticityOfDemandPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingPriceElasticityOfDemandPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
