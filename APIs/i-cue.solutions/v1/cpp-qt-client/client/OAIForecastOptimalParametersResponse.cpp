/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastOptimalParametersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastOptimalParametersResponse::OAIForecastOptimalParametersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastOptimalParametersResponse::OAIForecastOptimalParametersResponse() {
    this->initializeModel();
}

OAIForecastOptimalParametersResponse::~OAIForecastOptimalParametersResponse() {}

void OAIForecastOptimalParametersResponse::initializeModel() {

    m_alpha_isSet = false;
    m_alpha_isValid = false;

    m_beta_isSet = false;
    m_beta_isValid = false;

    m_gamma_isSet = false;
    m_gamma_isValid = false;
}

void OAIForecastOptimalParametersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastOptimalParametersResponse::fromJsonObject(QJsonObject json) {

    m_alpha_isValid = ::OpenAPI::fromJsonValue(m_alpha, json[QString("alpha")]);
    m_alpha_isSet = !json[QString("alpha")].isNull() && m_alpha_isValid;

    m_beta_isValid = ::OpenAPI::fromJsonValue(m_beta, json[QString("beta")]);
    m_beta_isSet = !json[QString("beta")].isNull() && m_beta_isValid;

    m_gamma_isValid = ::OpenAPI::fromJsonValue(m_gamma, json[QString("gamma")]);
    m_gamma_isSet = !json[QString("gamma")].isNull() && m_gamma_isValid;
}

QString OAIForecastOptimalParametersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastOptimalParametersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alpha_isSet) {
        obj.insert(QString("alpha"), ::OpenAPI::toJsonValue(m_alpha));
    }
    if (m_beta_isSet) {
        obj.insert(QString("beta"), ::OpenAPI::toJsonValue(m_beta));
    }
    if (m_gamma_isSet) {
        obj.insert(QString("gamma"), ::OpenAPI::toJsonValue(m_gamma));
    }
    return obj;
}

double OAIForecastOptimalParametersResponse::getAlpha() const {
    return m_alpha;
}
void OAIForecastOptimalParametersResponse::setAlpha(const double &alpha) {
    m_alpha = alpha;
    m_alpha_isSet = true;
}

bool OAIForecastOptimalParametersResponse::is_alpha_Set() const{
    return m_alpha_isSet;
}

bool OAIForecastOptimalParametersResponse::is_alpha_Valid() const{
    return m_alpha_isValid;
}

double OAIForecastOptimalParametersResponse::getBeta() const {
    return m_beta;
}
void OAIForecastOptimalParametersResponse::setBeta(const double &beta) {
    m_beta = beta;
    m_beta_isSet = true;
}

bool OAIForecastOptimalParametersResponse::is_beta_Set() const{
    return m_beta_isSet;
}

bool OAIForecastOptimalParametersResponse::is_beta_Valid() const{
    return m_beta_isValid;
}

double OAIForecastOptimalParametersResponse::getGamma() const {
    return m_gamma;
}
void OAIForecastOptimalParametersResponse::setGamma(const double &gamma) {
    m_gamma = gamma;
    m_gamma_isSet = true;
}

bool OAIForecastOptimalParametersResponse::is_gamma_Set() const{
    return m_gamma_isSet;
}

bool OAIForecastOptimalParametersResponse::is_gamma_Valid() const{
    return m_gamma_isValid;
}

bool OAIForecastOptimalParametersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alpha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gamma_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastOptimalParametersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
