/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPortfolioPerformanceManagementApi_H
#define OAI_OAIPortfolioPerformanceManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIForecastPerformanceRequest.h"
#include "OAIHttpFileElement.h"
#include "OAIPortfolioAbcModel.h"
#include "OAIPortfolioModel.h"
#include "OAIPortfolioRequest.h"
#include "OAIPortfolioXyzModel.h"
#include "OAIRewindResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPortfolioPerformanceManagementApi : public QObject {
    Q_OBJECT

public:
    OAIPortfolioPerformanceManagementApi(const int timeOut = 0);
    ~OAIPortfolioPerformanceManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_portfolio_request OAIPortfolioRequest [optional]
    */
    virtual void portfolioAbcPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPortfolioRequest> &oai_portfolio_request = ::OpenAPI::OptionalParam<OAIPortfolioRequest>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  token QString [optional]
    */
    virtual void portfolioFileToPortfolioPost(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_forecast_performance_request OAIForecastPerformanceRequest [optional]
    */
    virtual void portfolioForecastPerformanceRewindPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIForecastPerformanceRequest> &oai_forecast_performance_request = ::OpenAPI::OptionalParam<OAIForecastPerformanceRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_portfolio_request OAIPortfolioRequest [optional]
    */
    virtual void portfolioPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPortfolioRequest> &oai_portfolio_request = ::OpenAPI::OptionalParam<OAIPortfolioRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_portfolio_request OAIPortfolioRequest [optional]
    */
    virtual void portfolioXyzPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPortfolioRequest> &oai_portfolio_request = ::OpenAPI::OptionalParam<OAIPortfolioRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void portfolioAbcPostCallback(OAIHttpRequestWorker *worker);
    void portfolioFileToPortfolioPostCallback(OAIHttpRequestWorker *worker);
    void portfolioForecastPerformanceRewindPostCallback(OAIHttpRequestWorker *worker);
    void portfolioPostCallback(OAIHttpRequestWorker *worker);
    void portfolioXyzPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void portfolioAbcPostSignal(QList<OAIPortfolioAbcModel> summary);
    void portfolioFileToPortfolioPostSignal();
    void portfolioForecastPerformanceRewindPostSignal(OAIRewindResponse summary);
    void portfolioPostSignal(QList<OAIPortfolioModel> summary);
    void portfolioXyzPostSignal(QList<OAIPortfolioXyzModel> summary);


    void portfolioAbcPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIPortfolioAbcModel> summary);
    void portfolioFileToPortfolioPostSignalFull(OAIHttpRequestWorker *worker);
    void portfolioForecastPerformanceRewindPostSignalFull(OAIHttpRequestWorker *worker, OAIRewindResponse summary);
    void portfolioPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIPortfolioModel> summary);
    void portfolioXyzPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIPortfolioXyzModel> summary);

    Q_DECL_DEPRECATED_X("Use portfolioAbcPostSignalError() instead")
    void portfolioAbcPostSignalE(QList<OAIPortfolioAbcModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioAbcPostSignalError(QList<OAIPortfolioAbcModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use portfolioFileToPortfolioPostSignalError() instead")
    void portfolioFileToPortfolioPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioFileToPortfolioPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use portfolioForecastPerformanceRewindPostSignalError() instead")
    void portfolioForecastPerformanceRewindPostSignalE(OAIRewindResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioForecastPerformanceRewindPostSignalError(OAIRewindResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use portfolioPostSignalError() instead")
    void portfolioPostSignalE(QList<OAIPortfolioModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioPostSignalError(QList<OAIPortfolioModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use portfolioXyzPostSignalError() instead")
    void portfolioXyzPostSignalE(QList<OAIPortfolioXyzModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioXyzPostSignalError(QList<OAIPortfolioXyzModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use portfolioAbcPostSignalErrorFull() instead")
    void portfolioAbcPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioAbcPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use portfolioFileToPortfolioPostSignalErrorFull() instead")
    void portfolioFileToPortfolioPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioFileToPortfolioPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use portfolioForecastPerformanceRewindPostSignalErrorFull() instead")
    void portfolioForecastPerformanceRewindPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioForecastPerformanceRewindPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use portfolioPostSignalErrorFull() instead")
    void portfolioPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use portfolioXyzPostSignalErrorFull() instead")
    void portfolioXyzPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void portfolioXyzPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
