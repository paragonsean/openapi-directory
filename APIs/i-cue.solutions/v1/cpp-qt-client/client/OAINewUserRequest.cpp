/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewUserRequest::OAINewUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewUserRequest::OAINewUserRequest() {
    this->initializeModel();
}

OAINewUserRequest::~OAINewUserRequest() {}

void OAINewUserRequest::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_entity_token_isSet = false;
    m_entity_token_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;
}

void OAINewUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewUserRequest::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_entity_token_isValid = ::OpenAPI::fromJsonValue(m_entity_token, json[QString("entityToken")]);
    m_entity_token_isSet = !json[QString("entityToken")].isNull() && m_entity_token_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("firstname")]);
    m_firstname_isSet = !json[QString("firstname")].isNull() && m_firstname_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("lastname")]);
    m_lastname_isSet = !json[QString("lastname")].isNull() && m_lastname_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;
}

QString OAINewUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_entity_token_isSet) {
        obj.insert(QString("entityToken"), ::OpenAPI::toJsonValue(m_entity_token));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    return obj;
}

QString OAINewUserRequest::getEmail() const {
    return m_email;
}
void OAINewUserRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAINewUserRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAINewUserRequest::is_email_Valid() const{
    return m_email_isValid;
}

QString OAINewUserRequest::getEntityToken() const {
    return m_entity_token;
}
void OAINewUserRequest::setEntityToken(const QString &entity_token) {
    m_entity_token = entity_token;
    m_entity_token_isSet = true;
}

bool OAINewUserRequest::is_entity_token_Set() const{
    return m_entity_token_isSet;
}

bool OAINewUserRequest::is_entity_token_Valid() const{
    return m_entity_token_isValid;
}

QString OAINewUserRequest::getFirstname() const {
    return m_firstname;
}
void OAINewUserRequest::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAINewUserRequest::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAINewUserRequest::is_firstname_Valid() const{
    return m_firstname_isValid;
}

bool OAINewUserRequest::isIsActive() const {
    return m_is_active;
}
void OAINewUserRequest::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAINewUserRequest::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAINewUserRequest::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAINewUserRequest::getLastname() const {
    return m_lastname;
}
void OAINewUserRequest::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAINewUserRequest::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAINewUserRequest::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAINewUserRequest::getPhone() const {
    return m_phone;
}
void OAINewUserRequest::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAINewUserRequest::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAINewUserRequest::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAINewUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
