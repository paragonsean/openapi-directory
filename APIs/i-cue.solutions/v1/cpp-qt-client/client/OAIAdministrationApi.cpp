/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdministrationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAdministrationApi::OAIAdministrationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAdministrationApi::~OAIAdministrationApi() {
}

void OAIAdministrationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("administrationEntityGet", defaultConf);
    _serverIndices.insert("administrationEntityGet", 0);
    _serverConfigs.insert("administrationEntityIdDelete", defaultConf);
    _serverIndices.insert("administrationEntityIdDelete", 0);
    _serverConfigs.insert("administrationEntityPost", defaultConf);
    _serverIndices.insert("administrationEntityPost", 0);
    _serverConfigs.insert("administrationEntityPut", defaultConf);
    _serverIndices.insert("administrationEntityPut", 0);
    _serverConfigs.insert("administrationFileToJsonPost", defaultConf);
    _serverIndices.insert("administrationFileToJsonPost", 0);
    _serverConfigs.insert("administrationModelEntityIdGet", defaultConf);
    _serverIndices.insert("administrationModelEntityIdGet", 0);
    _serverConfigs.insert("administrationModelEntityIdPost", defaultConf);
    _serverIndices.insert("administrationModelEntityIdPost", 0);
    _serverConfigs.insert("administrationModelGet", defaultConf);
    _serverIndices.insert("administrationModelGet", 0);
    _serverConfigs.insert("administrationModelPost", defaultConf);
    _serverIndices.insert("administrationModelPost", 0);
    _serverConfigs.insert("administrationPlanningLevelEntityIdIdDelete", defaultConf);
    _serverIndices.insert("administrationPlanningLevelEntityIdIdDelete", 0);
    _serverConfigs.insert("administrationPlanningLevelLockPost", defaultConf);
    _serverIndices.insert("administrationPlanningLevelLockPost", 0);
    _serverConfigs.insert("administrationTokenPost", defaultConf);
    _serverIndices.insert("administrationTokenPost", 0);
    _serverConfigs.insert("administrationUserEntityIdGet", defaultConf);
    _serverIndices.insert("administrationUserEntityIdGet", 0);
    _serverConfigs.insert("administrationUserEntityIdIdDelete", defaultConf);
    _serverIndices.insert("administrationUserEntityIdIdDelete", 0);
    _serverConfigs.insert("administrationUserLockPut", defaultConf);
    _serverIndices.insert("administrationUserLockPut", 0);
    _serverConfigs.insert("administrationUserPost", defaultConf);
    _serverIndices.insert("administrationUserPost", 0);
    _serverConfigs.insert("administrationUserPut", defaultConf);
    _serverIndices.insert("administrationUserPut", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAdministrationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAdministrationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAdministrationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAdministrationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAdministrationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAdministrationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAdministrationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAdministrationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAdministrationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAdministrationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAdministrationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAdministrationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAdministrationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAdministrationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAdministrationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAdministrationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAdministrationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAdministrationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAdministrationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAdministrationApi::administrationEntityGet(const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationEntityGet"][_serverIndices.value("administrationEntityGet")].URL()+"/administration/entity");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationEntityGetCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationEntityGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEntityResponse> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEntityResponse val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationEntityGetSignal(output);
        Q_EMIT administrationEntityGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationEntityGetSignalE(output, error_type, error_str);
        Q_EMIT administrationEntityGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationEntityGetSignalError(output, error_type, error_str);
        Q_EMIT administrationEntityGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationEntityIdDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationEntityIdDelete"][_serverIndices.value("administrationEntityIdDelete")].URL()+"/administration/entity/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationEntityIdDeleteCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationEntityIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationEntityIdDeleteSignal();
        Q_EMIT administrationEntityIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationEntityIdDeleteSignalE(error_type, error_str);
        Q_EMIT administrationEntityIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationEntityIdDeleteSignalError(error_type, error_str);
        Q_EMIT administrationEntityIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationEntityPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAINewEntityRequest> &oai_new_entity_request) {
    QString fullPath = QString(_serverConfigs["administrationEntityPost"][_serverIndices.value("administrationEntityPost")].URL()+"/administration/entity");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_new_entity_request.hasValue()){

        
        QByteArray output = oai_new_entity_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationEntityPostCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationEntityPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationEntityPostSignal(output);
        Q_EMIT administrationEntityPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationEntityPostSignalE(output, error_type, error_str);
        Q_EMIT administrationEntityPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationEntityPostSignalError(output, error_type, error_str);
        Q_EMIT administrationEntityPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationEntityPut(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIToggleRequest> &oai_toggle_request) {
    QString fullPath = QString(_serverConfigs["administrationEntityPut"][_serverIndices.value("administrationEntityPut")].URL()+"/administration/entity");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_toggle_request.hasValue()){

        
        QByteArray output = oai_toggle_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationEntityPutCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationEntityPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationEntityPutSignal();
        Q_EMIT administrationEntityPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationEntityPutSignalE(error_type, error_str);
        Q_EMIT administrationEntityPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationEntityPutSignalError(error_type, error_str);
        Q_EMIT administrationEntityPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationFileToJsonPost(const OAIHttpFileElement &file, const qint32 &periodicity, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationFileToJsonPost"][_serverIndices.value("administrationFileToJsonPost")].URL()+"/administration/file-to-json");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_file("File", file.local_filename, file.request_filename, file.mime_type);
    }
    
    {
        input.add_var("Periodicity", ::OpenAPI::toStringValue(periodicity));
    }

    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationFileToJsonPostCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationFileToJsonPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJsonForecastResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationFileToJsonPostSignal(output);
        Q_EMIT administrationFileToJsonPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationFileToJsonPostSignalE(output, error_type, error_str);
        Q_EMIT administrationFileToJsonPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationFileToJsonPostSignalError(output, error_type, error_str);
        Q_EMIT administrationFileToJsonPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationModelEntityIdGet(const qint32 &entity_id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationModelEntityIdGet"][_serverIndices.value("administrationModelEntityIdGet")].URL()+"/administration/model/{entityId}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationModelEntityIdGetCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationModelEntityIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMethodDto> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMethodDto val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationModelEntityIdGetSignal(output);
        Q_EMIT administrationModelEntityIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationModelEntityIdGetSignalE(output, error_type, error_str);
        Q_EMIT administrationModelEntityIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationModelEntityIdGetSignalError(output, error_type, error_str);
        Q_EMIT administrationModelEntityIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationModelEntityIdPost(const qint32 &entity_id, const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAINewModelRequest> &oai_new_model_request) {
    QString fullPath = QString(_serverConfigs["administrationModelEntityIdPost"][_serverIndices.value("administrationModelEntityIdPost")].URL()+"/administration/model/{entityId}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_new_model_request.hasValue()){

        
        QByteArray output = oai_new_model_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationModelEntityIdPostCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationModelEntityIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMethodDto output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationModelEntityIdPostSignal(output);
        Q_EMIT administrationModelEntityIdPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationModelEntityIdPostSignalE(output, error_type, error_str);
        Q_EMIT administrationModelEntityIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationModelEntityIdPostSignalError(output, error_type, error_str);
        Q_EMIT administrationModelEntityIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationModelGet(const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationModelGet"][_serverIndices.value("administrationModelGet")].URL()+"/administration/model");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationModelGetCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationModelGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIMethodDto> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIMethodDto val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationModelGetSignal(output);
        Q_EMIT administrationModelGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationModelGetSignalE(output, error_type, error_str);
        Q_EMIT administrationModelGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationModelGetSignalError(output, error_type, error_str);
        Q_EMIT administrationModelGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationModelPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAINewModelRequest> &oai_new_model_request) {
    QString fullPath = QString(_serverConfigs["administrationModelPost"][_serverIndices.value("administrationModelPost")].URL()+"/administration/model");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_new_model_request.hasValue()){

        
        QByteArray output = oai_new_model_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationModelPostCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationModelPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMethodDto output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationModelPostSignal(output);
        Q_EMIT administrationModelPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationModelPostSignalE(output, error_type, error_str);
        Q_EMIT administrationModelPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationModelPostSignalError(output, error_type, error_str);
        Q_EMIT administrationModelPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationPlanningLevelEntityIdIdDelete(const qint32 &entity_id, const qint32 &id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationPlanningLevelEntityIdIdDelete"][_serverIndices.value("administrationPlanningLevelEntityIdIdDelete")].URL()+"/administration/planning-level/{entityId}/{id}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationPlanningLevelEntityIdIdDeleteCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationPlanningLevelEntityIdIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationPlanningLevelEntityIdIdDeleteSignal();
        Q_EMIT administrationPlanningLevelEntityIdIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationPlanningLevelEntityIdIdDeleteSignalE(error_type, error_str);
        Q_EMIT administrationPlanningLevelEntityIdIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationPlanningLevelEntityIdIdDeleteSignalError(error_type, error_str);
        Q_EMIT administrationPlanningLevelEntityIdIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationPlanningLevelLockPost(const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationPlanningLevelLockPost"][_serverIndices.value("administrationPlanningLevelLockPost")].URL()+"/administration/planning-level/lock");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationPlanningLevelLockPostCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationPlanningLevelLockPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationPlanningLevelLockPostSignal();
        Q_EMIT administrationPlanningLevelLockPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationPlanningLevelLockPostSignalE(error_type, error_str);
        Q_EMIT administrationPlanningLevelLockPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationPlanningLevelLockPostSignalError(error_type, error_str);
        Q_EMIT administrationPlanningLevelLockPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationTokenPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAINewTokenRequest> &oai_new_token_request) {
    QString fullPath = QString(_serverConfigs["administrationTokenPost"][_serverIndices.value("administrationTokenPost")].URL()+"/administration/token");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_new_token_request.hasValue()){

        
        QByteArray output = oai_new_token_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationTokenPostCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationTokenPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationTokenPostSignal(output);
        Q_EMIT administrationTokenPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationTokenPostSignalE(output, error_type, error_str);
        Q_EMIT administrationTokenPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationTokenPostSignalError(output, error_type, error_str);
        Q_EMIT administrationTokenPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationUserEntityIdGet(const qint32 &entity_id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationUserEntityIdGet"][_serverIndices.value("administrationUserEntityIdGet")].URL()+"/administration/user/{entityId}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationUserEntityIdGetCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationUserEntityIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationUserEntityIdGetSignal();
        Q_EMIT administrationUserEntityIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationUserEntityIdGetSignalE(error_type, error_str);
        Q_EMIT administrationUserEntityIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationUserEntityIdGetSignalError(error_type, error_str);
        Q_EMIT administrationUserEntityIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationUserEntityIdIdDelete(const qint32 &entity_id, const qint32 &id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationUserEntityIdIdDelete"][_serverIndices.value("administrationUserEntityIdIdDelete")].URL()+"/administration/user/{entityId}/{id}");
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationUserEntityIdIdDeleteCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationUserEntityIdIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationUserEntityIdIdDeleteSignal();
        Q_EMIT administrationUserEntityIdIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationUserEntityIdIdDeleteSignalE(error_type, error_str);
        Q_EMIT administrationUserEntityIdIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationUserEntityIdIdDeleteSignalError(error_type, error_str);
        Q_EMIT administrationUserEntityIdIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationUserLockPut(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIToggleUserRequest> &oai_toggle_user_request) {
    QString fullPath = QString(_serverConfigs["administrationUserLockPut"][_serverIndices.value("administrationUserLockPut")].URL()+"/administration/user/lock");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_toggle_user_request.hasValue()){

        
        QByteArray output = oai_toggle_user_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationUserLockPutCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationUserLockPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationUserLockPutSignal();
        Q_EMIT administrationUserLockPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationUserLockPutSignalE(error_type, error_str);
        Q_EMIT administrationUserLockPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationUserLockPutSignalError(error_type, error_str);
        Q_EMIT administrationUserLockPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationUserPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAINewUserRequest> &oai_new_user_request) {
    QString fullPath = QString(_serverConfigs["administrationUserPost"][_serverIndices.value("administrationUserPost")].URL()+"/administration/user");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_new_user_request.hasValue()){

        
        QByteArray output = oai_new_user_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationUserPostCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationUserPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationUserPostSignal(output);
        Q_EMIT administrationUserPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationUserPostSignalE(output, error_type, error_str);
        Q_EMIT administrationUserPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationUserPostSignalError(output, error_type, error_str);
        Q_EMIT administrationUserPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::administrationUserPut(const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["administrationUserPut"][_serverIndices.value("administrationUserPut")].URL()+"/administration/user");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAdministrationApi::administrationUserPutCallback);
    connect(this, &OAIAdministrationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAdministrationApi::administrationUserPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT administrationUserPutSignal();
        Q_EMIT administrationUserPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT administrationUserPutSignalE(error_type, error_str);
        Q_EMIT administrationUserPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT administrationUserPutSignalError(error_type, error_str);
        Q_EMIT administrationUserPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAdministrationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
