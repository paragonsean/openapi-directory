/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightDrivenPlanningForecastOptimizationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIInsightDrivenPlanningForecastOptimizationApi::OAIInsightDrivenPlanningForecastOptimizationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIInsightDrivenPlanningForecastOptimizationApi::~OAIInsightDrivenPlanningForecastOptimizationApi() {
}

void OAIInsightDrivenPlanningForecastOptimizationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("forecastAIHistoryAndForecastPost", defaultConf);
    _serverIndices.insert("forecastAIHistoryAndForecastPost", 0);
    _serverConfigs.insert("forecastAIPost", defaultConf);
    _serverIndices.insert("forecastAIPost", 0);
    _serverConfigs.insert("forecastFileToForecastPost", defaultConf);
    _serverIndices.insert("forecastFileToForecastPost", 0);
    _serverConfigs.insert("forecastForecastBottomUpPost", defaultConf);
    _serverIndices.insert("forecastForecastBottomUpPost", 0);
    _serverConfigs.insert("forecastForecastTopDownPost", defaultConf);
    _serverIndices.insert("forecastForecastTopDownPost", 0);
    _serverConfigs.insert("forecastFullDetailPost", defaultConf);
    _serverIndices.insert("forecastFullDetailPost", 0);
    _serverConfigs.insert("forecastHistoryAndForecastPost", defaultConf);
    _serverIndices.insert("forecastHistoryAndForecastPost", 0);
    _serverConfigs.insert("forecastOptimalParameterPost", defaultConf);
    _serverIndices.insert("forecastOptimalParameterPost", 0);
    _serverConfigs.insert("forecastPost", defaultConf);
    _serverIndices.insert("forecastPost", 0);
    _serverConfigs.insert("forecastRerunPost", defaultConf);
    _serverIndices.insert("forecastRerunPost", 0);
    _serverConfigs.insert("forecastResultJobIdGet", defaultConf);
    _serverIndices.insert("forecastResultJobIdGet", 0);
    _serverConfigs.insert("forecastStatusJobIdGet", defaultConf);
    _serverIndices.insert("forecastStatusJobIdGet", 0);
    _serverConfigs.insert("outlierPost", defaultConf);
    _serverIndices.insert("outlierPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIInsightDrivenPlanningForecastOptimizationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIInsightDrivenPlanningForecastOptimizationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIInsightDrivenPlanningForecastOptimizationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIInsightDrivenPlanningForecastOptimizationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIInsightDrivenPlanningForecastOptimizationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIInsightDrivenPlanningForecastOptimizationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIInsightDrivenPlanningForecastOptimizationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIInsightDrivenPlanningForecastOptimizationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIInsightDrivenPlanningForecastOptimizationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIInsightDrivenPlanningForecastOptimizationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIInsightDrivenPlanningForecastOptimizationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIInsightDrivenPlanningForecastOptimizationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIInsightDrivenPlanningForecastOptimizationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIInsightDrivenPlanningForecastOptimizationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIInsightDrivenPlanningForecastOptimizationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIInsightDrivenPlanningForecastOptimizationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastAIHistoryAndForecastPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIAiPlanningLevelRequest> &oaiai_planning_level_request) {
    QString fullPath = QString(_serverConfigs["forecastAIHistoryAndForecastPost"][_serverIndices.value("forecastAIHistoryAndForecastPost")].URL()+"/forecast/AI/history-and-forecast");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiai_planning_level_request.hasValue()){

        
        QByteArray output = oaiai_planning_level_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastAIHistoryAndForecastPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastAIHistoryAndForecastPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJobResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastAIHistoryAndForecastPostSignal(output);
        Q_EMIT forecastAIHistoryAndForecastPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastAIHistoryAndForecastPostSignalE(output, error_type, error_str);
        Q_EMIT forecastAIHistoryAndForecastPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastAIHistoryAndForecastPostSignalError(output, error_type, error_str);
        Q_EMIT forecastAIHistoryAndForecastPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastAIPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIAiPlanningLevelRequest> &oaiai_planning_level_request) {
    QString fullPath = QString(_serverConfigs["forecastAIPost"][_serverIndices.value("forecastAIPost")].URL()+"/forecast/AI");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiai_planning_level_request.hasValue()){

        
        QByteArray output = oaiai_planning_level_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastAIPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastAIPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJobResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastAIPostSignal(output);
        Q_EMIT forecastAIPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastAIPostSignalE(output, error_type, error_str);
        Q_EMIT forecastAIPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastAIPostSignalError(output, error_type, error_str);
        Q_EMIT forecastAIPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastFileToForecastPost(const OAIHttpFileElement &file, const QString &method, const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<bool> &discard_data, const ::OpenAPI::OptionalParam<QString> &error_type, const ::OpenAPI::OptionalParam<qint32> &hold_out_period, const ::OpenAPI::OptionalParam<qint32> &no_fcst, const ::OpenAPI::OptionalParam<bool> &outlier_detection, const ::OpenAPI::OptionalParam<qint32> &periodicity) {
    QString fullPath = QString(_serverConfigs["forecastFileToForecastPost"][_serverIndices.value("forecastFileToForecastPost")].URL()+"/forecast/file-to-forecast");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (discard_data.hasValue())
    {
        input.add_var("DiscardData", ::OpenAPI::toStringValue(discard_data.value()));
    }
    if (error_type.hasValue())
    {
        input.add_var("ErrorType", ::OpenAPI::toStringValue(error_type.value()));
    }
    
    {
        input.add_file("File", file.local_filename, file.request_filename, file.mime_type);
    }
    if (hold_out_period.hasValue())
    {
        input.add_var("HoldOutPeriod", ::OpenAPI::toStringValue(hold_out_period.value()));
    }
    
    {
        input.add_var("Method", ::OpenAPI::toStringValue(method));
    }
    if (no_fcst.hasValue())
    {
        input.add_var("NoFcst", ::OpenAPI::toStringValue(no_fcst.value()));
    }
    if (outlier_detection.hasValue())
    {
        input.add_var("OutlierDetection", ::OpenAPI::toStringValue(outlier_detection.value()));
    }
    if (periodicity.hasValue())
    {
        input.add_var("Periodicity", ::OpenAPI::toStringValue(periodicity.value()));
    }

    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastFileToForecastPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastFileToForecastPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJobResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastFileToForecastPostSignal(output);
        Q_EMIT forecastFileToForecastPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastFileToForecastPostSignalE(output, error_type, error_str);
        Q_EMIT forecastFileToForecastPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastFileToForecastPostSignalError(output, error_type, error_str);
        Q_EMIT forecastFileToForecastPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastForecastBottomUpPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request) {
    QString fullPath = QString(_serverConfigs["forecastForecastBottomUpPost"][_serverIndices.value("forecastForecastBottomUpPost")].URL()+"/forecast/forecast-bottom-up");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_planning_level_request.hasValue()){

        
        QByteArray output = oai_planning_level_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastForecastBottomUpPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastForecastBottomUpPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIForecastBottomUpResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastForecastBottomUpPostSignal(output);
        Q_EMIT forecastForecastBottomUpPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastForecastBottomUpPostSignalE(output, error_type, error_str);
        Q_EMIT forecastForecastBottomUpPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastForecastBottomUpPostSignalError(output, error_type, error_str);
        Q_EMIT forecastForecastBottomUpPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastForecastTopDownPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request) {
    QString fullPath = QString(_serverConfigs["forecastForecastTopDownPost"][_serverIndices.value("forecastForecastTopDownPost")].URL()+"/forecast/forecast-top-down");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_planning_level_request.hasValue()){

        
        QByteArray output = oai_planning_level_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastForecastTopDownPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastForecastTopDownPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastForecastTopDownPostSignal();
        Q_EMIT forecastForecastTopDownPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastForecastTopDownPostSignalE(error_type, error_str);
        Q_EMIT forecastForecastTopDownPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastForecastTopDownPostSignalError(error_type, error_str);
        Q_EMIT forecastForecastTopDownPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastFullDetailPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request) {
    QString fullPath = QString(_serverConfigs["forecastFullDetailPost"][_serverIndices.value("forecastFullDetailPost")].URL()+"/forecast/full-detail");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_planning_level_request.hasValue()){

        
        QByteArray output = oai_planning_level_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastFullDetailPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastFullDetailPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFullDetailsForecastResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastFullDetailPostSignal(output);
        Q_EMIT forecastFullDetailPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastFullDetailPostSignalE(output, error_type, error_str);
        Q_EMIT forecastFullDetailPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastFullDetailPostSignalError(output, error_type, error_str);
        Q_EMIT forecastFullDetailPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastHistoryAndForecastPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request) {
    QString fullPath = QString(_serverConfigs["forecastHistoryAndForecastPost"][_serverIndices.value("forecastHistoryAndForecastPost")].URL()+"/forecast/history-and-forecast");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_planning_level_request.hasValue()){

        
        QByteArray output = oai_planning_level_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastHistoryAndForecastPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastHistoryAndForecastPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHistoryAndForecastResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastHistoryAndForecastPostSignal(output);
        Q_EMIT forecastHistoryAndForecastPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastHistoryAndForecastPostSignalE(output, error_type, error_str);
        Q_EMIT forecastHistoryAndForecastPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastHistoryAndForecastPostSignalError(output, error_type, error_str);
        Q_EMIT forecastHistoryAndForecastPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastOptimalParameterPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request) {
    QString fullPath = QString(_serverConfigs["forecastOptimalParameterPost"][_serverIndices.value("forecastOptimalParameterPost")].URL()+"/forecast/optimal-parameter");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_planning_level_request.hasValue()){

        
        QByteArray output = oai_planning_level_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastOptimalParameterPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastOptimalParameterPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOptimalParameterResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastOptimalParameterPostSignal(output);
        Q_EMIT forecastOptimalParameterPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastOptimalParameterPostSignalE(output, error_type, error_str);
        Q_EMIT forecastOptimalParameterPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastOptimalParameterPostSignalError(output, error_type, error_str);
        Q_EMIT forecastOptimalParameterPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request) {
    QString fullPath = QString(_serverConfigs["forecastPost"][_serverIndices.value("forecastPost")].URL()+"/forecast");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_planning_level_request.hasValue()){

        
        QByteArray output = oai_planning_level_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIForecastResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastPostSignal(output);
        Q_EMIT forecastPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastPostSignalE(output, error_type, error_str);
        Q_EMIT forecastPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastPostSignalError(output, error_type, error_str);
        Q_EMIT forecastPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastRerunPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIPlanningLevelReRunRequest> &oai_planning_level_re_run_request) {
    QString fullPath = QString(_serverConfigs["forecastRerunPost"][_serverIndices.value("forecastRerunPost")].URL()+"/forecast/rerun");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_planning_level_re_run_request.hasValue()){

        
        QByteArray output = oai_planning_level_re_run_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastRerunPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastRerunPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIForecastResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastRerunPostSignal(output);
        Q_EMIT forecastRerunPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastRerunPostSignalE(output, error_type, error_str);
        Q_EMIT forecastRerunPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastRerunPostSignalError(output, error_type, error_str);
        Q_EMIT forecastRerunPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastResultJobIdGet(const qint32 &job_id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["forecastResultJobIdGet"][_serverIndices.value("forecastResultJobIdGet")].URL()+"/forecast/result/{jobId}");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("jobId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "jobId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"jobId"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastResultJobIdGetCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastResultJobIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastResultJobIdGetSignal();
        Q_EMIT forecastResultJobIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastResultJobIdGetSignalE(error_type, error_str);
        Q_EMIT forecastResultJobIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastResultJobIdGetSignalError(error_type, error_str);
        Q_EMIT forecastResultJobIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastStatusJobIdGet(const qint32 &job_id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["forecastStatusJobIdGet"][_serverIndices.value("forecastStatusJobIdGet")].URL()+"/forecast/status/{jobId}");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("jobId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "jobId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"jobId"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::forecastStatusJobIdGetCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::forecastStatusJobIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forecastStatusJobIdGetSignal();
        Q_EMIT forecastStatusJobIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forecastStatusJobIdGetSignalE(error_type, error_str);
        Q_EMIT forecastStatusJobIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forecastStatusJobIdGetSignalError(error_type, error_str);
        Q_EMIT forecastStatusJobIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::outlierPost(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<OAIOutliersRequest> &oai_outliers_request) {
    QString fullPath = QString(_serverConfigs["outlierPost"][_serverIndices.value("outlierPost")].URL()+"/outlier");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_outliers_request.hasValue()){

        
        QByteArray output = oai_outliers_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInsightDrivenPlanningForecastOptimizationApi::outlierPostCallback);
    connect(this, &OAIInsightDrivenPlanningForecastOptimizationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInsightDrivenPlanningForecastOptimizationApi::outlierPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITimeSeriesOutliersResponse> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITimeSeriesOutliersResponse val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT outlierPostSignal(output);
        Q_EMIT outlierPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT outlierPostSignalE(output, error_type, error_str);
        Q_EMIT outlierPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT outlierPostSignalError(output, error_type, error_str);
        Q_EMIT outlierPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInsightDrivenPlanningForecastOptimizationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
