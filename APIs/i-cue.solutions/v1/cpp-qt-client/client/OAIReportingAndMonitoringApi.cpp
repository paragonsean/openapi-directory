/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportingAndMonitoringApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIReportingAndMonitoringApi::OAIReportingAndMonitoringApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIReportingAndMonitoringApi::~OAIReportingAndMonitoringApi() {
}

void OAIReportingAndMonitoringApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("reportPerformancePlanningLevelIdGet", defaultConf);
    _serverIndices.insert("reportPerformancePlanningLevelIdGet", 0);
    _serverConfigs.insert("reportPerformanceSkuRationalizationPlanningLevelIdGet", defaultConf);
    _serverIndices.insert("reportPerformanceSkuRationalizationPlanningLevelIdGet", 0);
    _serverConfigs.insert("reportPlanningLevelOrganizationGet", defaultConf);
    _serverIndices.insert("reportPlanningLevelOrganizationGet", 0);
    _serverConfigs.insert("reportPlanningLevelUserGet", defaultConf);
    _serverIndices.insert("reportPlanningLevelUserGet", 0);
    _serverConfigs.insert("reportUserGet", defaultConf);
    _serverIndices.insert("reportUserGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIReportingAndMonitoringApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIReportingAndMonitoringApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIReportingAndMonitoringApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIReportingAndMonitoringApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIReportingAndMonitoringApi::setUsername(const QString &username) {
    _username = username;
}

void OAIReportingAndMonitoringApi::setPassword(const QString &password) {
    _password = password;
}


void OAIReportingAndMonitoringApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIReportingAndMonitoringApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIReportingAndMonitoringApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIReportingAndMonitoringApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIReportingAndMonitoringApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIReportingAndMonitoringApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIReportingAndMonitoringApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIReportingAndMonitoringApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIReportingAndMonitoringApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIReportingAndMonitoringApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIReportingAndMonitoringApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIReportingAndMonitoringApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIReportingAndMonitoringApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIReportingAndMonitoringApi::reportPerformancePlanningLevelIdGet(const QString &planning_level_id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["reportPerformancePlanningLevelIdGet"][_serverIndices.value("reportPerformancePlanningLevelIdGet")].URL()+"/report/performance/{planningLevelId}");
    
    
    {
        QString planning_level_idPathParam("{");
        planning_level_idPathParam.append("planningLevelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "planningLevelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"planningLevelId"+pathSuffix : pathPrefix;
        fullPath.replace(planning_level_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(planning_level_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportingAndMonitoringApi::reportPerformancePlanningLevelIdGetCallback);
    connect(this, &OAIReportingAndMonitoringApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportingAndMonitoringApi::reportPerformancePlanningLevelIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reportPerformancePlanningLevelIdGetSignal();
        Q_EMIT reportPerformancePlanningLevelIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reportPerformancePlanningLevelIdGetSignalE(error_type, error_str);
        Q_EMIT reportPerformancePlanningLevelIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reportPerformancePlanningLevelIdGetSignalError(error_type, error_str);
        Q_EMIT reportPerformancePlanningLevelIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportingAndMonitoringApi::reportPerformanceSkuRationalizationPlanningLevelIdGet(const qint32 &planning_level_id, const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["reportPerformanceSkuRationalizationPlanningLevelIdGet"][_serverIndices.value("reportPerformanceSkuRationalizationPlanningLevelIdGet")].URL()+"/report/performance/sku-rationalization/{planningLevelId}");
    
    
    {
        QString planning_level_idPathParam("{");
        planning_level_idPathParam.append("planningLevelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "planningLevelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"planningLevelId"+pathSuffix : pathPrefix;
        fullPath.replace(planning_level_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(planning_level_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportingAndMonitoringApi::reportPerformanceSkuRationalizationPlanningLevelIdGetCallback);
    connect(this, &OAIReportingAndMonitoringApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportingAndMonitoringApi::reportPerformanceSkuRationalizationPlanningLevelIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPortfolioModel> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPortfolioModel val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reportPerformanceSkuRationalizationPlanningLevelIdGetSignal(output);
        Q_EMIT reportPerformanceSkuRationalizationPlanningLevelIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reportPerformanceSkuRationalizationPlanningLevelIdGetSignalE(output, error_type, error_str);
        Q_EMIT reportPerformanceSkuRationalizationPlanningLevelIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reportPerformanceSkuRationalizationPlanningLevelIdGetSignalError(output, error_type, error_str);
        Q_EMIT reportPerformanceSkuRationalizationPlanningLevelIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportingAndMonitoringApi::reportPlanningLevelOrganizationGet(const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["reportPlanningLevelOrganizationGet"][_serverIndices.value("reportPlanningLevelOrganizationGet")].URL()+"/report/planning-level/organization");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportingAndMonitoringApi::reportPlanningLevelOrganizationGetCallback);
    connect(this, &OAIReportingAndMonitoringApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportingAndMonitoringApi::reportPlanningLevelOrganizationGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reportPlanningLevelOrganizationGetSignal();
        Q_EMIT reportPlanningLevelOrganizationGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reportPlanningLevelOrganizationGetSignalE(error_type, error_str);
        Q_EMIT reportPlanningLevelOrganizationGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reportPlanningLevelOrganizationGetSignalError(error_type, error_str);
        Q_EMIT reportPlanningLevelOrganizationGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportingAndMonitoringApi::reportPlanningLevelUserGet(const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["reportPlanningLevelUserGet"][_serverIndices.value("reportPlanningLevelUserGet")].URL()+"/report/planning-level/user");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportingAndMonitoringApi::reportPlanningLevelUserGetCallback);
    connect(this, &OAIReportingAndMonitoringApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportingAndMonitoringApi::reportPlanningLevelUserGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reportPlanningLevelUserGetSignal();
        Q_EMIT reportPlanningLevelUserGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reportPlanningLevelUserGetSignalE(error_type, error_str);
        Q_EMIT reportPlanningLevelUserGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reportPlanningLevelUserGetSignalError(error_type, error_str);
        Q_EMIT reportPlanningLevelUserGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportingAndMonitoringApi::reportUserGet(const ::OpenAPI::OptionalParam<QString> &token) {
    QString fullPath = QString(_serverConfigs["reportUserGet"][_serverIndices.value("reportUserGet")].URL()+"/report/user");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("Token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportingAndMonitoringApi::reportUserGetCallback);
    connect(this, &OAIReportingAndMonitoringApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportingAndMonitoringApi::reportUserGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reportUserGetSignal();
        Q_EMIT reportUserGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reportUserGetSignalE(error_type, error_str);
        Q_EMIT reportUserGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reportUserGetSignalError(error_type, error_str);
        Q_EMIT reportUserGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportingAndMonitoringApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
