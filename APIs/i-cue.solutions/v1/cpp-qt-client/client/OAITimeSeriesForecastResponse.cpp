/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesForecastResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesForecastResponse::OAITimeSeriesForecastResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesForecastResponse::OAITimeSeriesForecastResponse() {
    this->initializeModel();
}

OAITimeSeriesForecastResponse::~OAITimeSeriesForecastResponse() {}

void OAITimeSeriesForecastResponse::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_forecast_data_isSet = false;
    m_forecast_data_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_time_series_id_isSet = false;
    m_time_series_id_isValid = false;
}

void OAITimeSeriesForecastResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesForecastResponse::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_forecast_data_isValid = ::OpenAPI::fromJsonValue(m_forecast_data, json[QString("forecastData")]);
    m_forecast_data_isSet = !json[QString("forecastData")].isNull() && m_forecast_data_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_time_series_id_isValid = ::OpenAPI::fromJsonValue(m_time_series_id, json[QString("timeSeriesId")]);
    m_time_series_id_isSet = !json[QString("timeSeriesId")].isNull() && m_time_series_id_isValid;
}

QString OAITimeSeriesForecastResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesForecastResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_forecast_data.size() > 0) {
        obj.insert(QString("forecastData"), ::OpenAPI::toJsonValue(m_forecast_data));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_time_series_id_isSet) {
        obj.insert(QString("timeSeriesId"), ::OpenAPI::toJsonValue(m_time_series_id));
    }
    return obj;
}

double OAITimeSeriesForecastResponse::getError() const {
    return m_error;
}
void OAITimeSeriesForecastResponse::setError(const double &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAITimeSeriesForecastResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAITimeSeriesForecastResponse::is_error_Valid() const{
    return m_error_isValid;
}

QList<OAIPlanningLevelForecastResultData> OAITimeSeriesForecastResponse::getForecastData() const {
    return m_forecast_data;
}
void OAITimeSeriesForecastResponse::setForecastData(const QList<OAIPlanningLevelForecastResultData> &forecast_data) {
    m_forecast_data = forecast_data;
    m_forecast_data_isSet = true;
}

bool OAITimeSeriesForecastResponse::is_forecast_data_Set() const{
    return m_forecast_data_isSet;
}

bool OAITimeSeriesForecastResponse::is_forecast_data_Valid() const{
    return m_forecast_data_isValid;
}

QString OAITimeSeriesForecastResponse::getMethod() const {
    return m_method;
}
void OAITimeSeriesForecastResponse::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAITimeSeriesForecastResponse::is_method_Set() const{
    return m_method_isSet;
}

bool OAITimeSeriesForecastResponse::is_method_Valid() const{
    return m_method_isValid;
}

QString OAITimeSeriesForecastResponse::getTimeSeriesId() const {
    return m_time_series_id;
}
void OAITimeSeriesForecastResponse::setTimeSeriesId(const QString &time_series_id) {
    m_time_series_id = time_series_id;
    m_time_series_id_isSet = true;
}

bool OAITimeSeriesForecastResponse::is_time_series_id_Set() const{
    return m_time_series_id_isSet;
}

bool OAITimeSeriesForecastResponse::is_time_series_id_Valid() const{
    return m_time_series_id_isValid;
}

bool OAITimeSeriesForecastResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesForecastResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
