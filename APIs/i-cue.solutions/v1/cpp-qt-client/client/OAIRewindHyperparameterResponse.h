/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRewindHyperparameterResponse.h
 *
 * 
 */

#ifndef OAIRewindHyperparameterResponse_H
#define OAIRewindHyperparameterResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRewindHyperparameterResponse : public OAIObject {
public:
    OAIRewindHyperparameterResponse();
    OAIRewindHyperparameterResponse(QString json);
    ~OAIRewindHyperparameterResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCostOfError() const;
    void setCostOfError(const double &cost_of_error);
    bool is_cost_of_error_Set() const;
    bool is_cost_of_error_Valid() const;

    bool isDiscardData() const;
    void setDiscardData(const bool &discard_data);
    bool is_discard_data_Set() const;
    bool is_discard_data_Valid() const;

    QString getErrorType() const;
    void setErrorType(const QString &error_type);
    bool is_error_type_Set() const;
    bool is_error_type_Valid() const;

    qint32 getHoldOutPeriod() const;
    void setHoldOutPeriod(const qint32 &hold_out_period);
    bool is_hold_out_period_Set() const;
    bool is_hold_out_period_Valid() const;

    qint32 getNoFcst() const;
    void setNoFcst(const qint32 &no_fcst);
    bool is_no_fcst_Set() const;
    bool is_no_fcst_Valid() const;

    qint32 getPeriodicity() const;
    void setPeriodicity(const qint32 &periodicity);
    bool is_periodicity_Set() const;
    bool is_periodicity_Valid() const;

    qint32 getRewindTimeFrame() const;
    void setRewindTimeFrame(const qint32 &rewind_time_frame);
    bool is_rewind_time_frame_Set() const;
    bool is_rewind_time_frame_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cost_of_error;
    bool m_cost_of_error_isSet;
    bool m_cost_of_error_isValid;

    bool m_discard_data;
    bool m_discard_data_isSet;
    bool m_discard_data_isValid;

    QString m_error_type;
    bool m_error_type_isSet;
    bool m_error_type_isValid;

    qint32 m_hold_out_period;
    bool m_hold_out_period_isSet;
    bool m_hold_out_period_isValid;

    qint32 m_no_fcst;
    bool m_no_fcst_isSet;
    bool m_no_fcst_isValid;

    qint32 m_periodicity;
    bool m_periodicity_isSet;
    bool m_periodicity_isValid;

    qint32 m_rewind_time_frame;
    bool m_rewind_time_frame_isSet;
    bool m_rewind_time_frame_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRewindHyperparameterResponse)

#endif // OAIRewindHyperparameterResponse_H
