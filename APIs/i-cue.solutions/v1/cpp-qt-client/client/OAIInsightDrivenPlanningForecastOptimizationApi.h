/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInsightDrivenPlanningForecastOptimizationApi_H
#define OAI_OAIInsightDrivenPlanningForecastOptimizationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAiPlanningLevelRequest.h"
#include "OAIForecastBottomUpResponse.h"
#include "OAIForecastResponse.h"
#include "OAIFullDetailsForecastResponse.h"
#include "OAIHistoryAndForecastResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIJobResponse.h"
#include "OAIOptimalParameterResponse.h"
#include "OAIOutliersRequest.h"
#include "OAIPlanningLevelReRunRequest.h"
#include "OAIPlanningLevelRequest.h"
#include "OAITimeSeriesOutliersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInsightDrivenPlanningForecastOptimizationApi : public QObject {
    Q_OBJECT

public:
    OAIInsightDrivenPlanningForecastOptimizationApi(const int timeOut = 0);
    ~OAIInsightDrivenPlanningForecastOptimizationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oaiai_planning_level_request OAIAiPlanningLevelRequest [optional]
    */
    virtual void forecastAIHistoryAndForecastPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAiPlanningLevelRequest> &oaiai_planning_level_request = ::OpenAPI::OptionalParam<OAIAiPlanningLevelRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oaiai_planning_level_request OAIAiPlanningLevelRequest [optional]
    */
    virtual void forecastAIPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAiPlanningLevelRequest> &oaiai_planning_level_request = ::OpenAPI::OptionalParam<OAIAiPlanningLevelRequest>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  method QString [required]
    * @param[in]  token QString [optional]
    * @param[in]  discard_data bool [optional]
    * @param[in]  error_type QString [optional]
    * @param[in]  hold_out_period qint32 [optional]
    * @param[in]  no_fcst qint32 [optional]
    * @param[in]  outlier_detection bool [optional]
    * @param[in]  periodicity qint32 [optional]
    */
    virtual void forecastFileToForecastPost(const OAIHttpFileElement &file, const QString &method, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &discard_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &error_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &hold_out_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &no_fcst = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &outlier_detection = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &periodicity = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_planning_level_request OAIPlanningLevelRequest [optional]
    */
    virtual void forecastForecastBottomUpPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request = ::OpenAPI::OptionalParam<OAIPlanningLevelRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_planning_level_request OAIPlanningLevelRequest [optional]
    */
    virtual void forecastForecastTopDownPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request = ::OpenAPI::OptionalParam<OAIPlanningLevelRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_planning_level_request OAIPlanningLevelRequest [optional]
    */
    virtual void forecastFullDetailPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request = ::OpenAPI::OptionalParam<OAIPlanningLevelRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_planning_level_request OAIPlanningLevelRequest [optional]
    */
    virtual void forecastHistoryAndForecastPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request = ::OpenAPI::OptionalParam<OAIPlanningLevelRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_planning_level_request OAIPlanningLevelRequest [optional]
    */
    virtual void forecastOptimalParameterPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request = ::OpenAPI::OptionalParam<OAIPlanningLevelRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_planning_level_request OAIPlanningLevelRequest [optional]
    */
    virtual void forecastPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlanningLevelRequest> &oai_planning_level_request = ::OpenAPI::OptionalParam<OAIPlanningLevelRequest>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_planning_level_re_run_request OAIPlanningLevelReRunRequest [optional]
    */
    virtual void forecastRerunPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlanningLevelReRunRequest> &oai_planning_level_re_run_request = ::OpenAPI::OptionalParam<OAIPlanningLevelReRunRequest>());

    /**
    * @param[in]  job_id qint32 [required]
    * @param[in]  token QString [optional]
    */
    virtual void forecastResultJobIdGet(const qint32 &job_id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id qint32 [required]
    * @param[in]  token QString [optional]
    */
    virtual void forecastStatusJobIdGet(const qint32 &job_id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  oai_outliers_request OAIOutliersRequest [optional]
    */
    virtual void outlierPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOutliersRequest> &oai_outliers_request = ::OpenAPI::OptionalParam<OAIOutliersRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void forecastAIHistoryAndForecastPostCallback(OAIHttpRequestWorker *worker);
    void forecastAIPostCallback(OAIHttpRequestWorker *worker);
    void forecastFileToForecastPostCallback(OAIHttpRequestWorker *worker);
    void forecastForecastBottomUpPostCallback(OAIHttpRequestWorker *worker);
    void forecastForecastTopDownPostCallback(OAIHttpRequestWorker *worker);
    void forecastFullDetailPostCallback(OAIHttpRequestWorker *worker);
    void forecastHistoryAndForecastPostCallback(OAIHttpRequestWorker *worker);
    void forecastOptimalParameterPostCallback(OAIHttpRequestWorker *worker);
    void forecastPostCallback(OAIHttpRequestWorker *worker);
    void forecastRerunPostCallback(OAIHttpRequestWorker *worker);
    void forecastResultJobIdGetCallback(OAIHttpRequestWorker *worker);
    void forecastStatusJobIdGetCallback(OAIHttpRequestWorker *worker);
    void outlierPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void forecastAIHistoryAndForecastPostSignal(OAIJobResponse summary);
    void forecastAIPostSignal(OAIJobResponse summary);
    void forecastFileToForecastPostSignal(OAIJobResponse summary);
    void forecastForecastBottomUpPostSignal(OAIForecastBottomUpResponse summary);
    void forecastForecastTopDownPostSignal();
    void forecastFullDetailPostSignal(OAIFullDetailsForecastResponse summary);
    void forecastHistoryAndForecastPostSignal(OAIHistoryAndForecastResponse summary);
    void forecastOptimalParameterPostSignal(OAIOptimalParameterResponse summary);
    void forecastPostSignal(OAIForecastResponse summary);
    void forecastRerunPostSignal(OAIForecastResponse summary);
    void forecastResultJobIdGetSignal();
    void forecastStatusJobIdGetSignal();
    void outlierPostSignal(QList<OAITimeSeriesOutliersResponse> summary);


    void forecastAIHistoryAndForecastPostSignalFull(OAIHttpRequestWorker *worker, OAIJobResponse summary);
    void forecastAIPostSignalFull(OAIHttpRequestWorker *worker, OAIJobResponse summary);
    void forecastFileToForecastPostSignalFull(OAIHttpRequestWorker *worker, OAIJobResponse summary);
    void forecastForecastBottomUpPostSignalFull(OAIHttpRequestWorker *worker, OAIForecastBottomUpResponse summary);
    void forecastForecastTopDownPostSignalFull(OAIHttpRequestWorker *worker);
    void forecastFullDetailPostSignalFull(OAIHttpRequestWorker *worker, OAIFullDetailsForecastResponse summary);
    void forecastHistoryAndForecastPostSignalFull(OAIHttpRequestWorker *worker, OAIHistoryAndForecastResponse summary);
    void forecastOptimalParameterPostSignalFull(OAIHttpRequestWorker *worker, OAIOptimalParameterResponse summary);
    void forecastPostSignalFull(OAIHttpRequestWorker *worker, OAIForecastResponse summary);
    void forecastRerunPostSignalFull(OAIHttpRequestWorker *worker, OAIForecastResponse summary);
    void forecastResultJobIdGetSignalFull(OAIHttpRequestWorker *worker);
    void forecastStatusJobIdGetSignalFull(OAIHttpRequestWorker *worker);
    void outlierPostSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeSeriesOutliersResponse> summary);

    Q_DECL_DEPRECATED_X("Use forecastAIHistoryAndForecastPostSignalError() instead")
    void forecastAIHistoryAndForecastPostSignalE(OAIJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastAIHistoryAndForecastPostSignalError(OAIJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastAIPostSignalError() instead")
    void forecastAIPostSignalE(OAIJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastAIPostSignalError(OAIJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastFileToForecastPostSignalError() instead")
    void forecastFileToForecastPostSignalE(OAIJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastFileToForecastPostSignalError(OAIJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastForecastBottomUpPostSignalError() instead")
    void forecastForecastBottomUpPostSignalE(OAIForecastBottomUpResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastForecastBottomUpPostSignalError(OAIForecastBottomUpResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastForecastTopDownPostSignalError() instead")
    void forecastForecastTopDownPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void forecastForecastTopDownPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastFullDetailPostSignalError() instead")
    void forecastFullDetailPostSignalE(OAIFullDetailsForecastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastFullDetailPostSignalError(OAIFullDetailsForecastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastHistoryAndForecastPostSignalError() instead")
    void forecastHistoryAndForecastPostSignalE(OAIHistoryAndForecastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastHistoryAndForecastPostSignalError(OAIHistoryAndForecastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastOptimalParameterPostSignalError() instead")
    void forecastOptimalParameterPostSignalE(OAIOptimalParameterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastOptimalParameterPostSignalError(OAIOptimalParameterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastPostSignalError() instead")
    void forecastPostSignalE(OAIForecastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastPostSignalError(OAIForecastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastRerunPostSignalError() instead")
    void forecastRerunPostSignalE(OAIForecastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastRerunPostSignalError(OAIForecastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastResultJobIdGetSignalError() instead")
    void forecastResultJobIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void forecastResultJobIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastStatusJobIdGetSignalError() instead")
    void forecastStatusJobIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void forecastStatusJobIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use outlierPostSignalError() instead")
    void outlierPostSignalE(QList<OAITimeSeriesOutliersResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void outlierPostSignalError(QList<OAITimeSeriesOutliersResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use forecastAIHistoryAndForecastPostSignalErrorFull() instead")
    void forecastAIHistoryAndForecastPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastAIHistoryAndForecastPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastAIPostSignalErrorFull() instead")
    void forecastAIPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastAIPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastFileToForecastPostSignalErrorFull() instead")
    void forecastFileToForecastPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastFileToForecastPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastForecastBottomUpPostSignalErrorFull() instead")
    void forecastForecastBottomUpPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastForecastBottomUpPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastForecastTopDownPostSignalErrorFull() instead")
    void forecastForecastTopDownPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastForecastTopDownPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastFullDetailPostSignalErrorFull() instead")
    void forecastFullDetailPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastFullDetailPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastHistoryAndForecastPostSignalErrorFull() instead")
    void forecastHistoryAndForecastPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastHistoryAndForecastPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastOptimalParameterPostSignalErrorFull() instead")
    void forecastOptimalParameterPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastOptimalParameterPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastPostSignalErrorFull() instead")
    void forecastPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastRerunPostSignalErrorFull() instead")
    void forecastRerunPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastRerunPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastResultJobIdGetSignalErrorFull() instead")
    void forecastResultJobIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastResultJobIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastStatusJobIdGetSignalErrorFull() instead")
    void forecastStatusJobIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastStatusJobIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use outlierPostSignalErrorFull() instead")
    void outlierPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void outlierPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
