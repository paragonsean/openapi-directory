/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInventoryManagementApi_H
#define OAI_OAIInventoryManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInventoryManagementApi : public QObject {
    Q_OBJECT

public:
    OAIInventoryManagementApi(const int timeOut = 0);
    ~OAIInventoryManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryAmazonIpiPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryCaryyingCostPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryEoqPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryFillRatePost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryFinancialImapctForecastAccuracyPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryInventoryTurnoverPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryLtdPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryMoqPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryOptimalServiceLevelPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryReorderPointPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventorySafetyStockPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryServiceLevelPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void inventoryTurnsPost(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void inventoryAmazonIpiPostCallback(OAIHttpRequestWorker *worker);
    void inventoryCaryyingCostPostCallback(OAIHttpRequestWorker *worker);
    void inventoryEoqPostCallback(OAIHttpRequestWorker *worker);
    void inventoryFillRatePostCallback(OAIHttpRequestWorker *worker);
    void inventoryFinancialImapctForecastAccuracyPostCallback(OAIHttpRequestWorker *worker);
    void inventoryInventoryTurnoverPostCallback(OAIHttpRequestWorker *worker);
    void inventoryLtdPostCallback(OAIHttpRequestWorker *worker);
    void inventoryMoqPostCallback(OAIHttpRequestWorker *worker);
    void inventoryOptimalServiceLevelPostCallback(OAIHttpRequestWorker *worker);
    void inventoryReorderPointPostCallback(OAIHttpRequestWorker *worker);
    void inventorySafetyStockPostCallback(OAIHttpRequestWorker *worker);
    void inventoryServiceLevelPostCallback(OAIHttpRequestWorker *worker);
    void inventoryTurnsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void inventoryAmazonIpiPostSignal();
    void inventoryCaryyingCostPostSignal();
    void inventoryEoqPostSignal();
    void inventoryFillRatePostSignal();
    void inventoryFinancialImapctForecastAccuracyPostSignal();
    void inventoryInventoryTurnoverPostSignal();
    void inventoryLtdPostSignal();
    void inventoryMoqPostSignal();
    void inventoryOptimalServiceLevelPostSignal();
    void inventoryReorderPointPostSignal();
    void inventorySafetyStockPostSignal();
    void inventoryServiceLevelPostSignal();
    void inventoryTurnsPostSignal();


    void inventoryAmazonIpiPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryCaryyingCostPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryEoqPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryFillRatePostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryFinancialImapctForecastAccuracyPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryInventoryTurnoverPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryLtdPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryMoqPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryOptimalServiceLevelPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryReorderPointPostSignalFull(OAIHttpRequestWorker *worker);
    void inventorySafetyStockPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryServiceLevelPostSignalFull(OAIHttpRequestWorker *worker);
    void inventoryTurnsPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use inventoryAmazonIpiPostSignalError() instead")
    void inventoryAmazonIpiPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryAmazonIpiPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryCaryyingCostPostSignalError() instead")
    void inventoryCaryyingCostPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryCaryyingCostPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryEoqPostSignalError() instead")
    void inventoryEoqPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryEoqPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryFillRatePostSignalError() instead")
    void inventoryFillRatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryFillRatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryFinancialImapctForecastAccuracyPostSignalError() instead")
    void inventoryFinancialImapctForecastAccuracyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryFinancialImapctForecastAccuracyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryInventoryTurnoverPostSignalError() instead")
    void inventoryInventoryTurnoverPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryInventoryTurnoverPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryLtdPostSignalError() instead")
    void inventoryLtdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryLtdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryMoqPostSignalError() instead")
    void inventoryMoqPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryMoqPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryOptimalServiceLevelPostSignalError() instead")
    void inventoryOptimalServiceLevelPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryOptimalServiceLevelPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryReorderPointPostSignalError() instead")
    void inventoryReorderPointPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryReorderPointPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventorySafetyStockPostSignalError() instead")
    void inventorySafetyStockPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventorySafetyStockPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryServiceLevelPostSignalError() instead")
    void inventoryServiceLevelPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryServiceLevelPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryTurnsPostSignalError() instead")
    void inventoryTurnsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryTurnsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use inventoryAmazonIpiPostSignalErrorFull() instead")
    void inventoryAmazonIpiPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryAmazonIpiPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryCaryyingCostPostSignalErrorFull() instead")
    void inventoryCaryyingCostPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryCaryyingCostPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryEoqPostSignalErrorFull() instead")
    void inventoryEoqPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryEoqPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryFillRatePostSignalErrorFull() instead")
    void inventoryFillRatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryFillRatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryFinancialImapctForecastAccuracyPostSignalErrorFull() instead")
    void inventoryFinancialImapctForecastAccuracyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryFinancialImapctForecastAccuracyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryInventoryTurnoverPostSignalErrorFull() instead")
    void inventoryInventoryTurnoverPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryInventoryTurnoverPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryLtdPostSignalErrorFull() instead")
    void inventoryLtdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryLtdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryMoqPostSignalErrorFull() instead")
    void inventoryMoqPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryMoqPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryOptimalServiceLevelPostSignalErrorFull() instead")
    void inventoryOptimalServiceLevelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryOptimalServiceLevelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryReorderPointPostSignalErrorFull() instead")
    void inventoryReorderPointPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryReorderPointPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventorySafetyStockPostSignalErrorFull() instead")
    void inventorySafetyStockPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventorySafetyStockPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryServiceLevelPostSignalErrorFull() instead")
    void inventoryServiceLevelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryServiceLevelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryTurnsPostSignalErrorFull() instead")
    void inventoryTurnsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryTurnsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
