/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAiPlanningLevelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAiPlanningLevelRequest::OAIAiPlanningLevelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAiPlanningLevelRequest::OAIAiPlanningLevelRequest() {
    this->initializeModel();
}

OAIAiPlanningLevelRequest::~OAIAiPlanningLevelRequest() {}

void OAIAiPlanningLevelRequest::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_planning_level_id_isSet = false;
    m_planning_level_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIAiPlanningLevelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAiPlanningLevelRequest::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_planning_level_id_isValid = ::OpenAPI::fromJsonValue(m_planning_level_id, json[QString("planningLevelId")]);
    m_planning_level_id_isSet = !json[QString("planningLevelId")].isNull() && m_planning_level_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIAiPlanningLevelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAiPlanningLevelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_params.isSet()) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_planning_level_id_isSet) {
        obj.insert(QString("planningLevelId"), ::OpenAPI::toJsonValue(m_planning_level_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QList<OAIPlanningLevelDataDto> OAIAiPlanningLevelRequest::getData() const {
    return m_data;
}
void OAIAiPlanningLevelRequest::setData(const QList<OAIPlanningLevelDataDto> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAiPlanningLevelRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAiPlanningLevelRequest::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIAiPlanningLevelRequest::getMethod() const {
    return m_method;
}
void OAIAiPlanningLevelRequest::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIAiPlanningLevelRequest::is_method_Set() const{
    return m_method_isSet;
}

bool OAIAiPlanningLevelRequest::is_method_Valid() const{
    return m_method_isValid;
}

OAIPlanningLevelInfoRequest OAIAiPlanningLevelRequest::getParams() const {
    return m_params;
}
void OAIAiPlanningLevelRequest::setParams(const OAIPlanningLevelInfoRequest &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIAiPlanningLevelRequest::is_params_Set() const{
    return m_params_isSet;
}

bool OAIAiPlanningLevelRequest::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIAiPlanningLevelRequest::getPlanningLevelId() const {
    return m_planning_level_id;
}
void OAIAiPlanningLevelRequest::setPlanningLevelId(const QString &planning_level_id) {
    m_planning_level_id = planning_level_id;
    m_planning_level_id_isSet = true;
}

bool OAIAiPlanningLevelRequest::is_planning_level_id_Set() const{
    return m_planning_level_id_isSet;
}

bool OAIAiPlanningLevelRequest::is_planning_level_id_Valid() const{
    return m_planning_level_id_isValid;
}

QString OAIAiPlanningLevelRequest::getStartDate() const {
    return m_start_date;
}
void OAIAiPlanningLevelRequest::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIAiPlanningLevelRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIAiPlanningLevelRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIAiPlanningLevelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planning_level_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAiPlanningLevelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_method_isValid && m_planning_level_id_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
