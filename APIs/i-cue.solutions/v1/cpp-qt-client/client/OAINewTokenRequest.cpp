/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewTokenRequest::OAINewTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewTokenRequest::OAINewTokenRequest() {
    this->initializeModel();
}

OAINewTokenRequest::~OAINewTokenRequest() {}

void OAINewTokenRequest::initializeModel() {

    m_entity_token_isSet = false;
    m_entity_token_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_user_token_isSet = false;
    m_user_token_isValid = false;
}

void OAINewTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewTokenRequest::fromJsonObject(QJsonObject json) {

    m_entity_token_isValid = ::OpenAPI::fromJsonValue(m_entity_token, json[QString("entityToken")]);
    m_entity_token_isSet = !json[QString("entityToken")].isNull() && m_entity_token_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_user_token_isValid = ::OpenAPI::fromJsonValue(m_user_token, json[QString("userToken")]);
    m_user_token_isSet = !json[QString("userToken")].isNull() && m_user_token_isValid;
}

QString OAINewTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_token_isSet) {
        obj.insert(QString("entityToken"), ::OpenAPI::toJsonValue(m_entity_token));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_user_token_isSet) {
        obj.insert(QString("userToken"), ::OpenAPI::toJsonValue(m_user_token));
    }
    return obj;
}

QString OAINewTokenRequest::getEntityToken() const {
    return m_entity_token;
}
void OAINewTokenRequest::setEntityToken(const QString &entity_token) {
    m_entity_token = entity_token;
    m_entity_token_isSet = true;
}

bool OAINewTokenRequest::is_entity_token_Set() const{
    return m_entity_token_isSet;
}

bool OAINewTokenRequest::is_entity_token_Valid() const{
    return m_entity_token_isValid;
}

QDateTime OAINewTokenRequest::getExpirationDate() const {
    return m_expiration_date;
}
void OAINewTokenRequest::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAINewTokenRequest::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAINewTokenRequest::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAINewTokenRequest::getUserToken() const {
    return m_user_token;
}
void OAINewTokenRequest::setUserToken(const QString &user_token) {
    m_user_token = user_token;
    m_user_token_isSet = true;
}

bool OAINewTokenRequest::is_user_token_Set() const{
    return m_user_token_isSet;
}

bool OAINewTokenRequest::is_user_token_Valid() const{
    return m_user_token_isValid;
}

bool OAINewTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
