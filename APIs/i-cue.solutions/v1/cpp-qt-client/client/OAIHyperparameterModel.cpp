/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperparameterModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperparameterModel::OAIHyperparameterModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperparameterModel::OAIHyperparameterModel() {
    this->initializeModel();
}

OAIHyperparameterModel::~OAIHyperparameterModel() {}

void OAIHyperparameterModel::initializeModel() {

    m_abc_classification_threshold_a_isSet = false;
    m_abc_classification_threshold_a_isValid = false;

    m_abc_classification_threshold_b_isSet = false;
    m_abc_classification_threshold_b_isValid = false;

    m_abc_classification_threshold_c_isSet = false;
    m_abc_classification_threshold_c_isValid = false;

    m_discard_data_isSet = false;
    m_discard_data_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_hold_out_period_isSet = false;
    m_hold_out_period_isValid = false;

    m_no_fcst_isSet = false;
    m_no_fcst_isValid = false;

    m_outlier_detection_isSet = false;
    m_outlier_detection_isValid = false;

    m_periodicity_isSet = false;
    m_periodicity_isValid = false;

    m_xyz_classification_threshold_x_isSet = false;
    m_xyz_classification_threshold_x_isValid = false;

    m_xyz_classification_threshold_y_isSet = false;
    m_xyz_classification_threshold_y_isValid = false;

    m_xyz_classification_threshold_z_isSet = false;
    m_xyz_classification_threshold_z_isValid = false;
}

void OAIHyperparameterModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperparameterModel::fromJsonObject(QJsonObject json) {

    m_abc_classification_threshold_a_isValid = ::OpenAPI::fromJsonValue(m_abc_classification_threshold_a, json[QString("abcClassificationThresholdA")]);
    m_abc_classification_threshold_a_isSet = !json[QString("abcClassificationThresholdA")].isNull() && m_abc_classification_threshold_a_isValid;

    m_abc_classification_threshold_b_isValid = ::OpenAPI::fromJsonValue(m_abc_classification_threshold_b, json[QString("abcClassificationThresholdB")]);
    m_abc_classification_threshold_b_isSet = !json[QString("abcClassificationThresholdB")].isNull() && m_abc_classification_threshold_b_isValid;

    m_abc_classification_threshold_c_isValid = ::OpenAPI::fromJsonValue(m_abc_classification_threshold_c, json[QString("abcClassificationThresholdC")]);
    m_abc_classification_threshold_c_isSet = !json[QString("abcClassificationThresholdC")].isNull() && m_abc_classification_threshold_c_isValid;

    m_discard_data_isValid = ::OpenAPI::fromJsonValue(m_discard_data, json[QString("discardData")]);
    m_discard_data_isSet = !json[QString("discardData")].isNull() && m_discard_data_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_hold_out_period_isValid = ::OpenAPI::fromJsonValue(m_hold_out_period, json[QString("holdOutPeriod")]);
    m_hold_out_period_isSet = !json[QString("holdOutPeriod")].isNull() && m_hold_out_period_isValid;

    m_no_fcst_isValid = ::OpenAPI::fromJsonValue(m_no_fcst, json[QString("noFcst")]);
    m_no_fcst_isSet = !json[QString("noFcst")].isNull() && m_no_fcst_isValid;

    m_outlier_detection_isValid = ::OpenAPI::fromJsonValue(m_outlier_detection, json[QString("outlierDetection")]);
    m_outlier_detection_isSet = !json[QString("outlierDetection")].isNull() && m_outlier_detection_isValid;

    m_periodicity_isValid = ::OpenAPI::fromJsonValue(m_periodicity, json[QString("periodicity")]);
    m_periodicity_isSet = !json[QString("periodicity")].isNull() && m_periodicity_isValid;

    m_xyz_classification_threshold_x_isValid = ::OpenAPI::fromJsonValue(m_xyz_classification_threshold_x, json[QString("xyzClassificationThresholdX")]);
    m_xyz_classification_threshold_x_isSet = !json[QString("xyzClassificationThresholdX")].isNull() && m_xyz_classification_threshold_x_isValid;

    m_xyz_classification_threshold_y_isValid = ::OpenAPI::fromJsonValue(m_xyz_classification_threshold_y, json[QString("xyzClassificationThresholdY")]);
    m_xyz_classification_threshold_y_isSet = !json[QString("xyzClassificationThresholdY")].isNull() && m_xyz_classification_threshold_y_isValid;

    m_xyz_classification_threshold_z_isValid = ::OpenAPI::fromJsonValue(m_xyz_classification_threshold_z, json[QString("xyzClassificationThresholdZ")]);
    m_xyz_classification_threshold_z_isSet = !json[QString("xyzClassificationThresholdZ")].isNull() && m_xyz_classification_threshold_z_isValid;
}

QString OAIHyperparameterModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperparameterModel::asJsonObject() const {
    QJsonObject obj;
    if (m_abc_classification_threshold_a_isSet) {
        obj.insert(QString("abcClassificationThresholdA"), ::OpenAPI::toJsonValue(m_abc_classification_threshold_a));
    }
    if (m_abc_classification_threshold_b_isSet) {
        obj.insert(QString("abcClassificationThresholdB"), ::OpenAPI::toJsonValue(m_abc_classification_threshold_b));
    }
    if (m_abc_classification_threshold_c_isSet) {
        obj.insert(QString("abcClassificationThresholdC"), ::OpenAPI::toJsonValue(m_abc_classification_threshold_c));
    }
    if (m_discard_data_isSet) {
        obj.insert(QString("discardData"), ::OpenAPI::toJsonValue(m_discard_data));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_hold_out_period_isSet) {
        obj.insert(QString("holdOutPeriod"), ::OpenAPI::toJsonValue(m_hold_out_period));
    }
    if (m_no_fcst_isSet) {
        obj.insert(QString("noFcst"), ::OpenAPI::toJsonValue(m_no_fcst));
    }
    if (m_outlier_detection_isSet) {
        obj.insert(QString("outlierDetection"), ::OpenAPI::toJsonValue(m_outlier_detection));
    }
    if (m_periodicity_isSet) {
        obj.insert(QString("periodicity"), ::OpenAPI::toJsonValue(m_periodicity));
    }
    if (m_xyz_classification_threshold_x_isSet) {
        obj.insert(QString("xyzClassificationThresholdX"), ::OpenAPI::toJsonValue(m_xyz_classification_threshold_x));
    }
    if (m_xyz_classification_threshold_y_isSet) {
        obj.insert(QString("xyzClassificationThresholdY"), ::OpenAPI::toJsonValue(m_xyz_classification_threshold_y));
    }
    if (m_xyz_classification_threshold_z_isSet) {
        obj.insert(QString("xyzClassificationThresholdZ"), ::OpenAPI::toJsonValue(m_xyz_classification_threshold_z));
    }
    return obj;
}

double OAIHyperparameterModel::getAbcClassificationThresholdA() const {
    return m_abc_classification_threshold_a;
}
void OAIHyperparameterModel::setAbcClassificationThresholdA(const double &abc_classification_threshold_a) {
    m_abc_classification_threshold_a = abc_classification_threshold_a;
    m_abc_classification_threshold_a_isSet = true;
}

bool OAIHyperparameterModel::is_abc_classification_threshold_a_Set() const{
    return m_abc_classification_threshold_a_isSet;
}

bool OAIHyperparameterModel::is_abc_classification_threshold_a_Valid() const{
    return m_abc_classification_threshold_a_isValid;
}

double OAIHyperparameterModel::getAbcClassificationThresholdB() const {
    return m_abc_classification_threshold_b;
}
void OAIHyperparameterModel::setAbcClassificationThresholdB(const double &abc_classification_threshold_b) {
    m_abc_classification_threshold_b = abc_classification_threshold_b;
    m_abc_classification_threshold_b_isSet = true;
}

bool OAIHyperparameterModel::is_abc_classification_threshold_b_Set() const{
    return m_abc_classification_threshold_b_isSet;
}

bool OAIHyperparameterModel::is_abc_classification_threshold_b_Valid() const{
    return m_abc_classification_threshold_b_isValid;
}

double OAIHyperparameterModel::getAbcClassificationThresholdC() const {
    return m_abc_classification_threshold_c;
}
void OAIHyperparameterModel::setAbcClassificationThresholdC(const double &abc_classification_threshold_c) {
    m_abc_classification_threshold_c = abc_classification_threshold_c;
    m_abc_classification_threshold_c_isSet = true;
}

bool OAIHyperparameterModel::is_abc_classification_threshold_c_Set() const{
    return m_abc_classification_threshold_c_isSet;
}

bool OAIHyperparameterModel::is_abc_classification_threshold_c_Valid() const{
    return m_abc_classification_threshold_c_isValid;
}

bool OAIHyperparameterModel::isDiscardData() const {
    return m_discard_data;
}
void OAIHyperparameterModel::setDiscardData(const bool &discard_data) {
    m_discard_data = discard_data;
    m_discard_data_isSet = true;
}

bool OAIHyperparameterModel::is_discard_data_Set() const{
    return m_discard_data_isSet;
}

bool OAIHyperparameterModel::is_discard_data_Valid() const{
    return m_discard_data_isValid;
}

QString OAIHyperparameterModel::getErrorType() const {
    return m_error_type;
}
void OAIHyperparameterModel::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIHyperparameterModel::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIHyperparameterModel::is_error_type_Valid() const{
    return m_error_type_isValid;
}

qint32 OAIHyperparameterModel::getHoldOutPeriod() const {
    return m_hold_out_period;
}
void OAIHyperparameterModel::setHoldOutPeriod(const qint32 &hold_out_period) {
    m_hold_out_period = hold_out_period;
    m_hold_out_period_isSet = true;
}

bool OAIHyperparameterModel::is_hold_out_period_Set() const{
    return m_hold_out_period_isSet;
}

bool OAIHyperparameterModel::is_hold_out_period_Valid() const{
    return m_hold_out_period_isValid;
}

qint32 OAIHyperparameterModel::getNoFcst() const {
    return m_no_fcst;
}
void OAIHyperparameterModel::setNoFcst(const qint32 &no_fcst) {
    m_no_fcst = no_fcst;
    m_no_fcst_isSet = true;
}

bool OAIHyperparameterModel::is_no_fcst_Set() const{
    return m_no_fcst_isSet;
}

bool OAIHyperparameterModel::is_no_fcst_Valid() const{
    return m_no_fcst_isValid;
}

bool OAIHyperparameterModel::isOutlierDetection() const {
    return m_outlier_detection;
}
void OAIHyperparameterModel::setOutlierDetection(const bool &outlier_detection) {
    m_outlier_detection = outlier_detection;
    m_outlier_detection_isSet = true;
}

bool OAIHyperparameterModel::is_outlier_detection_Set() const{
    return m_outlier_detection_isSet;
}

bool OAIHyperparameterModel::is_outlier_detection_Valid() const{
    return m_outlier_detection_isValid;
}

qint32 OAIHyperparameterModel::getPeriodicity() const {
    return m_periodicity;
}
void OAIHyperparameterModel::setPeriodicity(const qint32 &periodicity) {
    m_periodicity = periodicity;
    m_periodicity_isSet = true;
}

bool OAIHyperparameterModel::is_periodicity_Set() const{
    return m_periodicity_isSet;
}

bool OAIHyperparameterModel::is_periodicity_Valid() const{
    return m_periodicity_isValid;
}

double OAIHyperparameterModel::getXyzClassificationThresholdX() const {
    return m_xyz_classification_threshold_x;
}
void OAIHyperparameterModel::setXyzClassificationThresholdX(const double &xyz_classification_threshold_x) {
    m_xyz_classification_threshold_x = xyz_classification_threshold_x;
    m_xyz_classification_threshold_x_isSet = true;
}

bool OAIHyperparameterModel::is_xyz_classification_threshold_x_Set() const{
    return m_xyz_classification_threshold_x_isSet;
}

bool OAIHyperparameterModel::is_xyz_classification_threshold_x_Valid() const{
    return m_xyz_classification_threshold_x_isValid;
}

double OAIHyperparameterModel::getXyzClassificationThresholdY() const {
    return m_xyz_classification_threshold_y;
}
void OAIHyperparameterModel::setXyzClassificationThresholdY(const double &xyz_classification_threshold_y) {
    m_xyz_classification_threshold_y = xyz_classification_threshold_y;
    m_xyz_classification_threshold_y_isSet = true;
}

bool OAIHyperparameterModel::is_xyz_classification_threshold_y_Set() const{
    return m_xyz_classification_threshold_y_isSet;
}

bool OAIHyperparameterModel::is_xyz_classification_threshold_y_Valid() const{
    return m_xyz_classification_threshold_y_isValid;
}

double OAIHyperparameterModel::getXyzClassificationThresholdZ() const {
    return m_xyz_classification_threshold_z;
}
void OAIHyperparameterModel::setXyzClassificationThresholdZ(const double &xyz_classification_threshold_z) {
    m_xyz_classification_threshold_z = xyz_classification_threshold_z;
    m_xyz_classification_threshold_z_isSet = true;
}

bool OAIHyperparameterModel::is_xyz_classification_threshold_z_Set() const{
    return m_xyz_classification_threshold_z_isSet;
}

bool OAIHyperparameterModel::is_xyz_classification_threshold_z_Valid() const{
    return m_xyz_classification_threshold_z_isValid;
}

bool OAIHyperparameterModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abc_classification_threshold_a_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_abc_classification_threshold_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_abc_classification_threshold_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discard_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_out_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_fcst_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlier_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periodicity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xyz_classification_threshold_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xyz_classification_threshold_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xyz_classification_threshold_z_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperparameterModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
