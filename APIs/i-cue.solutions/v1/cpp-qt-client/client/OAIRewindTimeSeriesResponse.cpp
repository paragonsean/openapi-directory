/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRewindTimeSeriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRewindTimeSeriesResponse::OAIRewindTimeSeriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRewindTimeSeriesResponse::OAIRewindTimeSeriesResponse() {
    this->initializeModel();
}

OAIRewindTimeSeriesResponse::~OAIRewindTimeSeriesResponse() {}

void OAIRewindTimeSeriesResponse::initializeModel() {

    m_customer_error_isSet = false;
    m_customer_error_isValid = false;

    m_error_diff_isSet = false;
    m_error_diff_isValid = false;

    m_icue_error_isSet = false;
    m_icue_error_isValid = false;

    m_time_series_isSet = false;
    m_time_series_isValid = false;

    m_total_cost_isSet = false;
    m_total_cost_isValid = false;

    m_use_icue_isSet = false;
    m_use_icue_isValid = false;
}

void OAIRewindTimeSeriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRewindTimeSeriesResponse::fromJsonObject(QJsonObject json) {

    m_customer_error_isValid = ::OpenAPI::fromJsonValue(m_customer_error, json[QString("customerError")]);
    m_customer_error_isSet = !json[QString("customerError")].isNull() && m_customer_error_isValid;

    m_error_diff_isValid = ::OpenAPI::fromJsonValue(m_error_diff, json[QString("errorDiff")]);
    m_error_diff_isSet = !json[QString("errorDiff")].isNull() && m_error_diff_isValid;

    m_icue_error_isValid = ::OpenAPI::fromJsonValue(m_icue_error, json[QString("icueError")]);
    m_icue_error_isSet = !json[QString("icueError")].isNull() && m_icue_error_isValid;

    m_time_series_isValid = ::OpenAPI::fromJsonValue(m_time_series, json[QString("timeSeries")]);
    m_time_series_isSet = !json[QString("timeSeries")].isNull() && m_time_series_isValid;

    m_total_cost_isValid = ::OpenAPI::fromJsonValue(m_total_cost, json[QString("totalCost")]);
    m_total_cost_isSet = !json[QString("totalCost")].isNull() && m_total_cost_isValid;

    m_use_icue_isValid = ::OpenAPI::fromJsonValue(m_use_icue, json[QString("useIcue")]);
    m_use_icue_isSet = !json[QString("useIcue")].isNull() && m_use_icue_isValid;
}

QString OAIRewindTimeSeriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRewindTimeSeriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_error_isSet) {
        obj.insert(QString("customerError"), ::OpenAPI::toJsonValue(m_customer_error));
    }
    if (m_error_diff_isSet) {
        obj.insert(QString("errorDiff"), ::OpenAPI::toJsonValue(m_error_diff));
    }
    if (m_icue_error_isSet) {
        obj.insert(QString("icueError"), ::OpenAPI::toJsonValue(m_icue_error));
    }
    if (m_time_series_isSet) {
        obj.insert(QString("timeSeries"), ::OpenAPI::toJsonValue(m_time_series));
    }
    if (m_total_cost_isSet) {
        obj.insert(QString("totalCost"), ::OpenAPI::toJsonValue(m_total_cost));
    }
    if (m_use_icue_isSet) {
        obj.insert(QString("useIcue"), ::OpenAPI::toJsonValue(m_use_icue));
    }
    return obj;
}

double OAIRewindTimeSeriesResponse::getCustomerError() const {
    return m_customer_error;
}
void OAIRewindTimeSeriesResponse::setCustomerError(const double &customer_error) {
    m_customer_error = customer_error;
    m_customer_error_isSet = true;
}

bool OAIRewindTimeSeriesResponse::is_customer_error_Set() const{
    return m_customer_error_isSet;
}

bool OAIRewindTimeSeriesResponse::is_customer_error_Valid() const{
    return m_customer_error_isValid;
}

double OAIRewindTimeSeriesResponse::getErrorDiff() const {
    return m_error_diff;
}
void OAIRewindTimeSeriesResponse::setErrorDiff(const double &error_diff) {
    m_error_diff = error_diff;
    m_error_diff_isSet = true;
}

bool OAIRewindTimeSeriesResponse::is_error_diff_Set() const{
    return m_error_diff_isSet;
}

bool OAIRewindTimeSeriesResponse::is_error_diff_Valid() const{
    return m_error_diff_isValid;
}

double OAIRewindTimeSeriesResponse::getIcueError() const {
    return m_icue_error;
}
void OAIRewindTimeSeriesResponse::setIcueError(const double &icue_error) {
    m_icue_error = icue_error;
    m_icue_error_isSet = true;
}

bool OAIRewindTimeSeriesResponse::is_icue_error_Set() const{
    return m_icue_error_isSet;
}

bool OAIRewindTimeSeriesResponse::is_icue_error_Valid() const{
    return m_icue_error_isValid;
}

QString OAIRewindTimeSeriesResponse::getTimeSeries() const {
    return m_time_series;
}
void OAIRewindTimeSeriesResponse::setTimeSeries(const QString &time_series) {
    m_time_series = time_series;
    m_time_series_isSet = true;
}

bool OAIRewindTimeSeriesResponse::is_time_series_Set() const{
    return m_time_series_isSet;
}

bool OAIRewindTimeSeriesResponse::is_time_series_Valid() const{
    return m_time_series_isValid;
}

double OAIRewindTimeSeriesResponse::getTotalCost() const {
    return m_total_cost;
}
void OAIRewindTimeSeriesResponse::setTotalCost(const double &total_cost) {
    m_total_cost = total_cost;
    m_total_cost_isSet = true;
}

bool OAIRewindTimeSeriesResponse::is_total_cost_Set() const{
    return m_total_cost_isSet;
}

bool OAIRewindTimeSeriesResponse::is_total_cost_Valid() const{
    return m_total_cost_isValid;
}

bool OAIRewindTimeSeriesResponse::isUseIcue() const {
    return m_use_icue;
}
void OAIRewindTimeSeriesResponse::setUseIcue(const bool &use_icue) {
    m_use_icue = use_icue;
    m_use_icue_isSet = true;
}

bool OAIRewindTimeSeriesResponse::is_use_icue_Set() const{
    return m_use_icue_isSet;
}

bool OAIRewindTimeSeriesResponse::is_use_icue_Valid() const{
    return m_use_icue_isValid;
}

bool OAIRewindTimeSeriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_diff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icue_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_icue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRewindTimeSeriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
