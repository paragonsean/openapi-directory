/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHyperparameterModel.h
 *
 * 
 */

#ifndef OAIHyperparameterModel_H
#define OAIHyperparameterModel_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHyperparameterModel : public OAIObject {
public:
    OAIHyperparameterModel();
    OAIHyperparameterModel(QString json);
    ~OAIHyperparameterModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAbcClassificationThresholdA() const;
    void setAbcClassificationThresholdA(const double &abc_classification_threshold_a);
    bool is_abc_classification_threshold_a_Set() const;
    bool is_abc_classification_threshold_a_Valid() const;

    double getAbcClassificationThresholdB() const;
    void setAbcClassificationThresholdB(const double &abc_classification_threshold_b);
    bool is_abc_classification_threshold_b_Set() const;
    bool is_abc_classification_threshold_b_Valid() const;

    double getAbcClassificationThresholdC() const;
    void setAbcClassificationThresholdC(const double &abc_classification_threshold_c);
    bool is_abc_classification_threshold_c_Set() const;
    bool is_abc_classification_threshold_c_Valid() const;

    bool isDiscardData() const;
    void setDiscardData(const bool &discard_data);
    bool is_discard_data_Set() const;
    bool is_discard_data_Valid() const;

    QString getErrorType() const;
    void setErrorType(const QString &error_type);
    bool is_error_type_Set() const;
    bool is_error_type_Valid() const;

    qint32 getHoldOutPeriod() const;
    void setHoldOutPeriod(const qint32 &hold_out_period);
    bool is_hold_out_period_Set() const;
    bool is_hold_out_period_Valid() const;

    qint32 getNoFcst() const;
    void setNoFcst(const qint32 &no_fcst);
    bool is_no_fcst_Set() const;
    bool is_no_fcst_Valid() const;

    bool isOutlierDetection() const;
    void setOutlierDetection(const bool &outlier_detection);
    bool is_outlier_detection_Set() const;
    bool is_outlier_detection_Valid() const;

    qint32 getPeriodicity() const;
    void setPeriodicity(const qint32 &periodicity);
    bool is_periodicity_Set() const;
    bool is_periodicity_Valid() const;

    double getXyzClassificationThresholdX() const;
    void setXyzClassificationThresholdX(const double &xyz_classification_threshold_x);
    bool is_xyz_classification_threshold_x_Set() const;
    bool is_xyz_classification_threshold_x_Valid() const;

    double getXyzClassificationThresholdY() const;
    void setXyzClassificationThresholdY(const double &xyz_classification_threshold_y);
    bool is_xyz_classification_threshold_y_Set() const;
    bool is_xyz_classification_threshold_y_Valid() const;

    double getXyzClassificationThresholdZ() const;
    void setXyzClassificationThresholdZ(const double &xyz_classification_threshold_z);
    bool is_xyz_classification_threshold_z_Set() const;
    bool is_xyz_classification_threshold_z_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_abc_classification_threshold_a;
    bool m_abc_classification_threshold_a_isSet;
    bool m_abc_classification_threshold_a_isValid;

    double m_abc_classification_threshold_b;
    bool m_abc_classification_threshold_b_isSet;
    bool m_abc_classification_threshold_b_isValid;

    double m_abc_classification_threshold_c;
    bool m_abc_classification_threshold_c_isSet;
    bool m_abc_classification_threshold_c_isValid;

    bool m_discard_data;
    bool m_discard_data_isSet;
    bool m_discard_data_isValid;

    QString m_error_type;
    bool m_error_type_isSet;
    bool m_error_type_isValid;

    qint32 m_hold_out_period;
    bool m_hold_out_period_isSet;
    bool m_hold_out_period_isValid;

    qint32 m_no_fcst;
    bool m_no_fcst_isSet;
    bool m_no_fcst_isValid;

    bool m_outlier_detection;
    bool m_outlier_detection_isSet;
    bool m_outlier_detection_isValid;

    qint32 m_periodicity;
    bool m_periodicity_isSet;
    bool m_periodicity_isValid;

    double m_xyz_classification_threshold_x;
    bool m_xyz_classification_threshold_x_isSet;
    bool m_xyz_classification_threshold_x_isValid;

    double m_xyz_classification_threshold_y;
    bool m_xyz_classification_threshold_y_isSet;
    bool m_xyz_classification_threshold_y_isValid;

    double m_xyz_classification_threshold_z;
    bool m_xyz_classification_threshold_z_isSet;
    bool m_xyz_classification_threshold_z_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHyperparameterModel)

#endif // OAIHyperparameterModel_H
