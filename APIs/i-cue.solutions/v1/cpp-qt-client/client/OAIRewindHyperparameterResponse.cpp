/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRewindHyperparameterResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRewindHyperparameterResponse::OAIRewindHyperparameterResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRewindHyperparameterResponse::OAIRewindHyperparameterResponse() {
    this->initializeModel();
}

OAIRewindHyperparameterResponse::~OAIRewindHyperparameterResponse() {}

void OAIRewindHyperparameterResponse::initializeModel() {

    m_cost_of_error_isSet = false;
    m_cost_of_error_isValid = false;

    m_discard_data_isSet = false;
    m_discard_data_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_hold_out_period_isSet = false;
    m_hold_out_period_isValid = false;

    m_no_fcst_isSet = false;
    m_no_fcst_isValid = false;

    m_periodicity_isSet = false;
    m_periodicity_isValid = false;

    m_rewind_time_frame_isSet = false;
    m_rewind_time_frame_isValid = false;
}

void OAIRewindHyperparameterResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRewindHyperparameterResponse::fromJsonObject(QJsonObject json) {

    m_cost_of_error_isValid = ::OpenAPI::fromJsonValue(m_cost_of_error, json[QString("costOfError")]);
    m_cost_of_error_isSet = !json[QString("costOfError")].isNull() && m_cost_of_error_isValid;

    m_discard_data_isValid = ::OpenAPI::fromJsonValue(m_discard_data, json[QString("discardData")]);
    m_discard_data_isSet = !json[QString("discardData")].isNull() && m_discard_data_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_hold_out_period_isValid = ::OpenAPI::fromJsonValue(m_hold_out_period, json[QString("holdOutPeriod")]);
    m_hold_out_period_isSet = !json[QString("holdOutPeriod")].isNull() && m_hold_out_period_isValid;

    m_no_fcst_isValid = ::OpenAPI::fromJsonValue(m_no_fcst, json[QString("noFcst")]);
    m_no_fcst_isSet = !json[QString("noFcst")].isNull() && m_no_fcst_isValid;

    m_periodicity_isValid = ::OpenAPI::fromJsonValue(m_periodicity, json[QString("periodicity")]);
    m_periodicity_isSet = !json[QString("periodicity")].isNull() && m_periodicity_isValid;

    m_rewind_time_frame_isValid = ::OpenAPI::fromJsonValue(m_rewind_time_frame, json[QString("rewindTimeFrame")]);
    m_rewind_time_frame_isSet = !json[QString("rewindTimeFrame")].isNull() && m_rewind_time_frame_isValid;
}

QString OAIRewindHyperparameterResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRewindHyperparameterResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_of_error_isSet) {
        obj.insert(QString("costOfError"), ::OpenAPI::toJsonValue(m_cost_of_error));
    }
    if (m_discard_data_isSet) {
        obj.insert(QString("discardData"), ::OpenAPI::toJsonValue(m_discard_data));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_hold_out_period_isSet) {
        obj.insert(QString("holdOutPeriod"), ::OpenAPI::toJsonValue(m_hold_out_period));
    }
    if (m_no_fcst_isSet) {
        obj.insert(QString("noFcst"), ::OpenAPI::toJsonValue(m_no_fcst));
    }
    if (m_periodicity_isSet) {
        obj.insert(QString("periodicity"), ::OpenAPI::toJsonValue(m_periodicity));
    }
    if (m_rewind_time_frame_isSet) {
        obj.insert(QString("rewindTimeFrame"), ::OpenAPI::toJsonValue(m_rewind_time_frame));
    }
    return obj;
}

double OAIRewindHyperparameterResponse::getCostOfError() const {
    return m_cost_of_error;
}
void OAIRewindHyperparameterResponse::setCostOfError(const double &cost_of_error) {
    m_cost_of_error = cost_of_error;
    m_cost_of_error_isSet = true;
}

bool OAIRewindHyperparameterResponse::is_cost_of_error_Set() const{
    return m_cost_of_error_isSet;
}

bool OAIRewindHyperparameterResponse::is_cost_of_error_Valid() const{
    return m_cost_of_error_isValid;
}

bool OAIRewindHyperparameterResponse::isDiscardData() const {
    return m_discard_data;
}
void OAIRewindHyperparameterResponse::setDiscardData(const bool &discard_data) {
    m_discard_data = discard_data;
    m_discard_data_isSet = true;
}

bool OAIRewindHyperparameterResponse::is_discard_data_Set() const{
    return m_discard_data_isSet;
}

bool OAIRewindHyperparameterResponse::is_discard_data_Valid() const{
    return m_discard_data_isValid;
}

QString OAIRewindHyperparameterResponse::getErrorType() const {
    return m_error_type;
}
void OAIRewindHyperparameterResponse::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIRewindHyperparameterResponse::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIRewindHyperparameterResponse::is_error_type_Valid() const{
    return m_error_type_isValid;
}

qint32 OAIRewindHyperparameterResponse::getHoldOutPeriod() const {
    return m_hold_out_period;
}
void OAIRewindHyperparameterResponse::setHoldOutPeriod(const qint32 &hold_out_period) {
    m_hold_out_period = hold_out_period;
    m_hold_out_period_isSet = true;
}

bool OAIRewindHyperparameterResponse::is_hold_out_period_Set() const{
    return m_hold_out_period_isSet;
}

bool OAIRewindHyperparameterResponse::is_hold_out_period_Valid() const{
    return m_hold_out_period_isValid;
}

qint32 OAIRewindHyperparameterResponse::getNoFcst() const {
    return m_no_fcst;
}
void OAIRewindHyperparameterResponse::setNoFcst(const qint32 &no_fcst) {
    m_no_fcst = no_fcst;
    m_no_fcst_isSet = true;
}

bool OAIRewindHyperparameterResponse::is_no_fcst_Set() const{
    return m_no_fcst_isSet;
}

bool OAIRewindHyperparameterResponse::is_no_fcst_Valid() const{
    return m_no_fcst_isValid;
}

qint32 OAIRewindHyperparameterResponse::getPeriodicity() const {
    return m_periodicity;
}
void OAIRewindHyperparameterResponse::setPeriodicity(const qint32 &periodicity) {
    m_periodicity = periodicity;
    m_periodicity_isSet = true;
}

bool OAIRewindHyperparameterResponse::is_periodicity_Set() const{
    return m_periodicity_isSet;
}

bool OAIRewindHyperparameterResponse::is_periodicity_Valid() const{
    return m_periodicity_isValid;
}

qint32 OAIRewindHyperparameterResponse::getRewindTimeFrame() const {
    return m_rewind_time_frame;
}
void OAIRewindHyperparameterResponse::setRewindTimeFrame(const qint32 &rewind_time_frame) {
    m_rewind_time_frame = rewind_time_frame;
    m_rewind_time_frame_isSet = true;
}

bool OAIRewindHyperparameterResponse::is_rewind_time_frame_Set() const{
    return m_rewind_time_frame_isSet;
}

bool OAIRewindHyperparameterResponse::is_rewind_time_frame_Valid() const{
    return m_rewind_time_frame_isValid;
}

bool OAIRewindHyperparameterResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_of_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discard_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_out_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_fcst_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periodicity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewind_time_frame_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRewindHyperparameterResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
