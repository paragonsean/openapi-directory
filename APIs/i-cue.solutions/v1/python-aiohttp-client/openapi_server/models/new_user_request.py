# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, entity_token: str=None, firstname: str=None, is_active: bool=None, lastname: str=None, phone: str=None):
        """NewUserRequest - a model defined in OpenAPI

        :param email: The email of this NewUserRequest.
        :param entity_token: The entity_token of this NewUserRequest.
        :param firstname: The firstname of this NewUserRequest.
        :param is_active: The is_active of this NewUserRequest.
        :param lastname: The lastname of this NewUserRequest.
        :param phone: The phone of this NewUserRequest.
        """
        self.openapi_types = {
            'email': str,
            'entity_token': str,
            'firstname': str,
            'is_active': bool,
            'lastname': str,
            'phone': str
        }

        self.attribute_map = {
            'email': 'email',
            'entity_token': 'entityToken',
            'firstname': 'firstname',
            'is_active': 'isActive',
            'lastname': 'lastname',
            'phone': 'phone'
        }

        self._email = email
        self._entity_token = entity_token
        self._firstname = firstname
        self._is_active = is_active
        self._lastname = lastname
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewUserRequest of this NewUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this NewUserRequest.


        :return: The email of this NewUserRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewUserRequest.


        :param email: The email of this NewUserRequest.
        :type email: str
        """

        self._email = email

    @property
    def entity_token(self):
        """Gets the entity_token of this NewUserRequest.


        :return: The entity_token of this NewUserRequest.
        :rtype: str
        """
        return self._entity_token

    @entity_token.setter
    def entity_token(self, entity_token):
        """Sets the entity_token of this NewUserRequest.


        :param entity_token: The entity_token of this NewUserRequest.
        :type entity_token: str
        """

        self._entity_token = entity_token

    @property
    def firstname(self):
        """Gets the firstname of this NewUserRequest.


        :return: The firstname of this NewUserRequest.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this NewUserRequest.


        :param firstname: The firstname of this NewUserRequest.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def is_active(self):
        """Gets the is_active of this NewUserRequest.


        :return: The is_active of this NewUserRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this NewUserRequest.


        :param is_active: The is_active of this NewUserRequest.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def lastname(self):
        """Gets the lastname of this NewUserRequest.


        :return: The lastname of this NewUserRequest.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this NewUserRequest.


        :param lastname: The lastname of this NewUserRequest.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def phone(self):
        """Gets the phone of this NewUserRequest.


        :return: The phone of this NewUserRequest.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this NewUserRequest.


        :param phone: The phone of this NewUserRequest.
        :type phone: str
        """

        self._phone = phone
