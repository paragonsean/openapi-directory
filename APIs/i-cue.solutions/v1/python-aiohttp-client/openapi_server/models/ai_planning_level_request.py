# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.planning_level_data_dto import PlanningLevelDataDto
from openapi_server.models.planning_level_info_request import PlanningLevelInfoRequest
from openapi_server import util


class AiPlanningLevelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[PlanningLevelDataDto]=None, method: str=None, params: PlanningLevelInfoRequest=None, planning_level_id: str=None, start_date: str=None):
        """AiPlanningLevelRequest - a model defined in OpenAPI

        :param data: The data of this AiPlanningLevelRequest.
        :param method: The method of this AiPlanningLevelRequest.
        :param params: The params of this AiPlanningLevelRequest.
        :param planning_level_id: The planning_level_id of this AiPlanningLevelRequest.
        :param start_date: The start_date of this AiPlanningLevelRequest.
        """
        self.openapi_types = {
            'data': List[PlanningLevelDataDto],
            'method': str,
            'params': PlanningLevelInfoRequest,
            'planning_level_id': str,
            'start_date': str
        }

        self.attribute_map = {
            'data': 'data',
            'method': 'method',
            'params': 'params',
            'planning_level_id': 'planningLevelId',
            'start_date': 'startDate'
        }

        self._data = data
        self._method = method
        self._params = params
        self._planning_level_id = planning_level_id
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AiPlanningLevelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AiPlanningLevelRequest of this AiPlanningLevelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this AiPlanningLevelRequest.


        :return: The data of this AiPlanningLevelRequest.
        :rtype: List[PlanningLevelDataDto]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AiPlanningLevelRequest.


        :param data: The data of this AiPlanningLevelRequest.
        :type data: List[PlanningLevelDataDto]
        """

        self._data = data

    @property
    def method(self):
        """Gets the method of this AiPlanningLevelRequest.


        :return: The method of this AiPlanningLevelRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AiPlanningLevelRequest.


        :param method: The method of this AiPlanningLevelRequest.
        :type method: str
        """
        allowed_values = ["icueMLP", "icueMLO", "icueMLN"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def params(self):
        """Gets the params of this AiPlanningLevelRequest.


        :return: The params of this AiPlanningLevelRequest.
        :rtype: PlanningLevelInfoRequest
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this AiPlanningLevelRequest.


        :param params: The params of this AiPlanningLevelRequest.
        :type params: PlanningLevelInfoRequest
        """

        self._params = params

    @property
    def planning_level_id(self):
        """Gets the planning_level_id of this AiPlanningLevelRequest.


        :return: The planning_level_id of this AiPlanningLevelRequest.
        :rtype: str
        """
        return self._planning_level_id

    @planning_level_id.setter
    def planning_level_id(self, planning_level_id):
        """Sets the planning_level_id of this AiPlanningLevelRequest.


        :param planning_level_id: The planning_level_id of this AiPlanningLevelRequest.
        :type planning_level_id: str
        """
        if planning_level_id is None:
            raise ValueError("Invalid value for `planning_level_id`, must not be `None`")

        self._planning_level_id = planning_level_id

    @property
    def start_date(self):
        """Gets the start_date of this AiPlanningLevelRequest.


        :return: The start_date of this AiPlanningLevelRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AiPlanningLevelRequest.


        :param start_date: The start_date of this AiPlanningLevelRequest.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
