# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.planning_level_data_dto import PlanningLevelDataDto
from openapi_server import util


class LifecycleOneToOneRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: PlanningLevelDataDto=None, planning_level_id: str=None, ratio: float=None):
        """LifecycleOneToOneRequest - a model defined in OpenAPI

        :param data: The data of this LifecycleOneToOneRequest.
        :param planning_level_id: The planning_level_id of this LifecycleOneToOneRequest.
        :param ratio: The ratio of this LifecycleOneToOneRequest.
        """
        self.openapi_types = {
            'data': PlanningLevelDataDto,
            'planning_level_id': str,
            'ratio': float
        }

        self.attribute_map = {
            'data': 'data',
            'planning_level_id': 'planningLevelId',
            'ratio': 'ratio'
        }

        self._data = data
        self._planning_level_id = planning_level_id
        self._ratio = ratio

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifecycleOneToOneRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifecycleOneToOneRequest of this LifecycleOneToOneRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this LifecycleOneToOneRequest.


        :return: The data of this LifecycleOneToOneRequest.
        :rtype: PlanningLevelDataDto
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this LifecycleOneToOneRequest.


        :param data: The data of this LifecycleOneToOneRequest.
        :type data: PlanningLevelDataDto
        """

        self._data = data

    @property
    def planning_level_id(self):
        """Gets the planning_level_id of this LifecycleOneToOneRequest.


        :return: The planning_level_id of this LifecycleOneToOneRequest.
        :rtype: str
        """
        return self._planning_level_id

    @planning_level_id.setter
    def planning_level_id(self, planning_level_id):
        """Sets the planning_level_id of this LifecycleOneToOneRequest.


        :param planning_level_id: The planning_level_id of this LifecycleOneToOneRequest.
        :type planning_level_id: str
        """
        if planning_level_id is None:
            raise ValueError("Invalid value for `planning_level_id`, must not be `None`")

        self._planning_level_id = planning_level_id

    @property
    def ratio(self):
        """Gets the ratio of this LifecycleOneToOneRequest.


        :return: The ratio of this LifecycleOneToOneRequest.
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this LifecycleOneToOneRequest.


        :param ratio: The ratio of this LifecycleOneToOneRequest.
        :type ratio: float
        """

        self._ratio = ratio
