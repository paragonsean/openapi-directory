# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewindTimeSeriesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_error: float=None, error_diff: float=None, icue_error: float=None, time_series: str=None, total_cost: float=None, use_icue: bool=None):
        """RewindTimeSeriesResponse - a model defined in OpenAPI

        :param customer_error: The customer_error of this RewindTimeSeriesResponse.
        :param error_diff: The error_diff of this RewindTimeSeriesResponse.
        :param icue_error: The icue_error of this RewindTimeSeriesResponse.
        :param time_series: The time_series of this RewindTimeSeriesResponse.
        :param total_cost: The total_cost of this RewindTimeSeriesResponse.
        :param use_icue: The use_icue of this RewindTimeSeriesResponse.
        """
        self.openapi_types = {
            'customer_error': float,
            'error_diff': float,
            'icue_error': float,
            'time_series': str,
            'total_cost': float,
            'use_icue': bool
        }

        self.attribute_map = {
            'customer_error': 'customerError',
            'error_diff': 'errorDiff',
            'icue_error': 'icueError',
            'time_series': 'timeSeries',
            'total_cost': 'totalCost',
            'use_icue': 'useIcue'
        }

        self._customer_error = customer_error
        self._error_diff = error_diff
        self._icue_error = icue_error
        self._time_series = time_series
        self._total_cost = total_cost
        self._use_icue = use_icue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewindTimeSeriesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewindTimeSeriesResponse of this RewindTimeSeriesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_error(self):
        """Gets the customer_error of this RewindTimeSeriesResponse.


        :return: The customer_error of this RewindTimeSeriesResponse.
        :rtype: float
        """
        return self._customer_error

    @customer_error.setter
    def customer_error(self, customer_error):
        """Sets the customer_error of this RewindTimeSeriesResponse.


        :param customer_error: The customer_error of this RewindTimeSeriesResponse.
        :type customer_error: float
        """

        self._customer_error = customer_error

    @property
    def error_diff(self):
        """Gets the error_diff of this RewindTimeSeriesResponse.


        :return: The error_diff of this RewindTimeSeriesResponse.
        :rtype: float
        """
        return self._error_diff

    @error_diff.setter
    def error_diff(self, error_diff):
        """Sets the error_diff of this RewindTimeSeriesResponse.


        :param error_diff: The error_diff of this RewindTimeSeriesResponse.
        :type error_diff: float
        """

        self._error_diff = error_diff

    @property
    def icue_error(self):
        """Gets the icue_error of this RewindTimeSeriesResponse.


        :return: The icue_error of this RewindTimeSeriesResponse.
        :rtype: float
        """
        return self._icue_error

    @icue_error.setter
    def icue_error(self, icue_error):
        """Sets the icue_error of this RewindTimeSeriesResponse.


        :param icue_error: The icue_error of this RewindTimeSeriesResponse.
        :type icue_error: float
        """

        self._icue_error = icue_error

    @property
    def time_series(self):
        """Gets the time_series of this RewindTimeSeriesResponse.


        :return: The time_series of this RewindTimeSeriesResponse.
        :rtype: str
        """
        return self._time_series

    @time_series.setter
    def time_series(self, time_series):
        """Sets the time_series of this RewindTimeSeriesResponse.


        :param time_series: The time_series of this RewindTimeSeriesResponse.
        :type time_series: str
        """

        self._time_series = time_series

    @property
    def total_cost(self):
        """Gets the total_cost of this RewindTimeSeriesResponse.


        :return: The total_cost of this RewindTimeSeriesResponse.
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this RewindTimeSeriesResponse.


        :param total_cost: The total_cost of this RewindTimeSeriesResponse.
        :type total_cost: float
        """

        self._total_cost = total_cost

    @property
    def use_icue(self):
        """Gets the use_icue of this RewindTimeSeriesResponse.


        :return: The use_icue of this RewindTimeSeriesResponse.
        :rtype: bool
        """
        return self._use_icue

    @use_icue.setter
    def use_icue(self, use_icue):
        """Sets the use_icue of this RewindTimeSeriesResponse.


        :param use_icue: The use_icue of this RewindTimeSeriesResponse.
        :type use_icue: bool
        """

        self._use_icue = use_icue
