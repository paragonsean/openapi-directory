# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewindHyperparameterResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_of_error: float=None, discard_data: bool=None, error_type: str=None, hold_out_period: int=None, no_fcst: int=None, periodicity: int=None, rewind_time_frame: int=None):
        """RewindHyperparameterResponse - a model defined in OpenAPI

        :param cost_of_error: The cost_of_error of this RewindHyperparameterResponse.
        :param discard_data: The discard_data of this RewindHyperparameterResponse.
        :param error_type: The error_type of this RewindHyperparameterResponse.
        :param hold_out_period: The hold_out_period of this RewindHyperparameterResponse.
        :param no_fcst: The no_fcst of this RewindHyperparameterResponse.
        :param periodicity: The periodicity of this RewindHyperparameterResponse.
        :param rewind_time_frame: The rewind_time_frame of this RewindHyperparameterResponse.
        """
        self.openapi_types = {
            'cost_of_error': float,
            'discard_data': bool,
            'error_type': str,
            'hold_out_period': int,
            'no_fcst': int,
            'periodicity': int,
            'rewind_time_frame': int
        }

        self.attribute_map = {
            'cost_of_error': 'costOfError',
            'discard_data': 'discardData',
            'error_type': 'errorType',
            'hold_out_period': 'holdOutPeriod',
            'no_fcst': 'noFcst',
            'periodicity': 'periodicity',
            'rewind_time_frame': 'rewindTimeFrame'
        }

        self._cost_of_error = cost_of_error
        self._discard_data = discard_data
        self._error_type = error_type
        self._hold_out_period = hold_out_period
        self._no_fcst = no_fcst
        self._periodicity = periodicity
        self._rewind_time_frame = rewind_time_frame

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewindHyperparameterResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewindHyperparameterResponse of this RewindHyperparameterResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_of_error(self):
        """Gets the cost_of_error of this RewindHyperparameterResponse.


        :return: The cost_of_error of this RewindHyperparameterResponse.
        :rtype: float
        """
        return self._cost_of_error

    @cost_of_error.setter
    def cost_of_error(self, cost_of_error):
        """Sets the cost_of_error of this RewindHyperparameterResponse.


        :param cost_of_error: The cost_of_error of this RewindHyperparameterResponse.
        :type cost_of_error: float
        """

        self._cost_of_error = cost_of_error

    @property
    def discard_data(self):
        """Gets the discard_data of this RewindHyperparameterResponse.


        :return: The discard_data of this RewindHyperparameterResponse.
        :rtype: bool
        """
        return self._discard_data

    @discard_data.setter
    def discard_data(self, discard_data):
        """Sets the discard_data of this RewindHyperparameterResponse.


        :param discard_data: The discard_data of this RewindHyperparameterResponse.
        :type discard_data: bool
        """

        self._discard_data = discard_data

    @property
    def error_type(self):
        """Gets the error_type of this RewindHyperparameterResponse.


        :return: The error_type of this RewindHyperparameterResponse.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this RewindHyperparameterResponse.


        :param error_type: The error_type of this RewindHyperparameterResponse.
        :type error_type: str
        """
        allowed_values = ["MeanAbsolutePercentageError", "MeanSquaredError", "MeanAbsoluteError", "MedianAbsoluteDeviation", "None"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def hold_out_period(self):
        """Gets the hold_out_period of this RewindHyperparameterResponse.


        :return: The hold_out_period of this RewindHyperparameterResponse.
        :rtype: int
        """
        return self._hold_out_period

    @hold_out_period.setter
    def hold_out_period(self, hold_out_period):
        """Sets the hold_out_period of this RewindHyperparameterResponse.


        :param hold_out_period: The hold_out_period of this RewindHyperparameterResponse.
        :type hold_out_period: int
        """

        self._hold_out_period = hold_out_period

    @property
    def no_fcst(self):
        """Gets the no_fcst of this RewindHyperparameterResponse.


        :return: The no_fcst of this RewindHyperparameterResponse.
        :rtype: int
        """
        return self._no_fcst

    @no_fcst.setter
    def no_fcst(self, no_fcst):
        """Sets the no_fcst of this RewindHyperparameterResponse.


        :param no_fcst: The no_fcst of this RewindHyperparameterResponse.
        :type no_fcst: int
        """

        self._no_fcst = no_fcst

    @property
    def periodicity(self):
        """Gets the periodicity of this RewindHyperparameterResponse.


        :return: The periodicity of this RewindHyperparameterResponse.
        :rtype: int
        """
        return self._periodicity

    @periodicity.setter
    def periodicity(self, periodicity):
        """Sets the periodicity of this RewindHyperparameterResponse.


        :param periodicity: The periodicity of this RewindHyperparameterResponse.
        :type periodicity: int
        """

        self._periodicity = periodicity

    @property
    def rewind_time_frame(self):
        """Gets the rewind_time_frame of this RewindHyperparameterResponse.


        :return: The rewind_time_frame of this RewindHyperparameterResponse.
        :rtype: int
        """
        return self._rewind_time_frame

    @rewind_time_frame.setter
    def rewind_time_frame(self, rewind_time_frame):
        """Sets the rewind_time_frame of this RewindHyperparameterResponse.


        :param rewind_time_frame: The rewind_time_frame of this RewindHyperparameterResponse.
        :type rewind_time_frame: int
        """

        self._rewind_time_frame = rewind_time_frame
