# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_optimal_parameters_response import ForecastOptimalParametersResponse
from openapi_server import util


class TimeSeriesOptimalParametersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, optimal_parameters: ForecastOptimalParametersResponse=None, time_series_id: str=None):
        """TimeSeriesOptimalParametersResponse - a model defined in OpenAPI

        :param method: The method of this TimeSeriesOptimalParametersResponse.
        :param optimal_parameters: The optimal_parameters of this TimeSeriesOptimalParametersResponse.
        :param time_series_id: The time_series_id of this TimeSeriesOptimalParametersResponse.
        """
        self.openapi_types = {
            'method': str,
            'optimal_parameters': ForecastOptimalParametersResponse,
            'time_series_id': str
        }

        self.attribute_map = {
            'method': 'method',
            'optimal_parameters': 'optimalParameters',
            'time_series_id': 'timeSeriesId'
        }

        self._method = method
        self._optimal_parameters = optimal_parameters
        self._time_series_id = time_series_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesOptimalParametersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesOptimalParametersResponse of this TimeSeriesOptimalParametersResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this TimeSeriesOptimalParametersResponse.


        :return: The method of this TimeSeriesOptimalParametersResponse.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this TimeSeriesOptimalParametersResponse.


        :param method: The method of this TimeSeriesOptimalParametersResponse.
        :type method: str
        """

        self._method = method

    @property
    def optimal_parameters(self):
        """Gets the optimal_parameters of this TimeSeriesOptimalParametersResponse.


        :return: The optimal_parameters of this TimeSeriesOptimalParametersResponse.
        :rtype: ForecastOptimalParametersResponse
        """
        return self._optimal_parameters

    @optimal_parameters.setter
    def optimal_parameters(self, optimal_parameters):
        """Sets the optimal_parameters of this TimeSeriesOptimalParametersResponse.


        :param optimal_parameters: The optimal_parameters of this TimeSeriesOptimalParametersResponse.
        :type optimal_parameters: ForecastOptimalParametersResponse
        """

        self._optimal_parameters = optimal_parameters

    @property
    def time_series_id(self):
        """Gets the time_series_id of this TimeSeriesOptimalParametersResponse.


        :return: The time_series_id of this TimeSeriesOptimalParametersResponse.
        :rtype: str
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this TimeSeriesOptimalParametersResponse.


        :param time_series_id: The time_series_id of this TimeSeriesOptimalParametersResponse.
        :type time_series_id: str
        """

        self._time_series_id = time_series_id
