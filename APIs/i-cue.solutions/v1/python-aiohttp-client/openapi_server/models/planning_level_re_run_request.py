# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.planning_level_info_request import PlanningLevelInfoRequest
from openapi_server import util


class PlanningLevelReRunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, params: PlanningLevelInfoRequest=None, planning_level_id: int=None):
        """PlanningLevelReRunRequest - a model defined in OpenAPI

        :param method: The method of this PlanningLevelReRunRequest.
        :param params: The params of this PlanningLevelReRunRequest.
        :param planning_level_id: The planning_level_id of this PlanningLevelReRunRequest.
        """
        self.openapi_types = {
            'method': str,
            'params': PlanningLevelInfoRequest,
            'planning_level_id': int
        }

        self.attribute_map = {
            'method': 'method',
            'params': 'params',
            'planning_level_id': 'planningLevelId'
        }

        self._method = method
        self._params = params
        self._planning_level_id = planning_level_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanningLevelReRunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanningLevelReRunRequest of this PlanningLevelReRunRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this PlanningLevelReRunRequest.


        :return: The method of this PlanningLevelReRunRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PlanningLevelReRunRequest.


        :param method: The method of this PlanningLevelReRunRequest.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def params(self):
        """Gets the params of this PlanningLevelReRunRequest.


        :return: The params of this PlanningLevelReRunRequest.
        :rtype: PlanningLevelInfoRequest
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this PlanningLevelReRunRequest.


        :param params: The params of this PlanningLevelReRunRequest.
        :type params: PlanningLevelInfoRequest
        """

        self._params = params

    @property
    def planning_level_id(self):
        """Gets the planning_level_id of this PlanningLevelReRunRequest.


        :return: The planning_level_id of this PlanningLevelReRunRequest.
        :rtype: int
        """
        return self._planning_level_id

    @planning_level_id.setter
    def planning_level_id(self, planning_level_id):
        """Sets the planning_level_id of this PlanningLevelReRunRequest.


        :param planning_level_id: The planning_level_id of this PlanningLevelReRunRequest.
        :type planning_level_id: int
        """
        if planning_level_id is None:
            raise ValueError("Invalid value for `planning_level_id`, must not be `None`")

        self._planning_level_id = planning_level_id
