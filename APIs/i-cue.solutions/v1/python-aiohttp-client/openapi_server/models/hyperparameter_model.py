# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HyperparameterModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abc_classification_threshold_a: float=None, abc_classification_threshold_b: float=None, abc_classification_threshold_c: float=None, discard_data: bool=None, error_type: str=None, hold_out_period: int=None, no_fcst: int=None, outlier_detection: bool=None, periodicity: int=None, xyz_classification_threshold_x: float=None, xyz_classification_threshold_y: float=None, xyz_classification_threshold_z: float=None):
        """HyperparameterModel - a model defined in OpenAPI

        :param abc_classification_threshold_a: The abc_classification_threshold_a of this HyperparameterModel.
        :param abc_classification_threshold_b: The abc_classification_threshold_b of this HyperparameterModel.
        :param abc_classification_threshold_c: The abc_classification_threshold_c of this HyperparameterModel.
        :param discard_data: The discard_data of this HyperparameterModel.
        :param error_type: The error_type of this HyperparameterModel.
        :param hold_out_period: The hold_out_period of this HyperparameterModel.
        :param no_fcst: The no_fcst of this HyperparameterModel.
        :param outlier_detection: The outlier_detection of this HyperparameterModel.
        :param periodicity: The periodicity of this HyperparameterModel.
        :param xyz_classification_threshold_x: The xyz_classification_threshold_x of this HyperparameterModel.
        :param xyz_classification_threshold_y: The xyz_classification_threshold_y of this HyperparameterModel.
        :param xyz_classification_threshold_z: The xyz_classification_threshold_z of this HyperparameterModel.
        """
        self.openapi_types = {
            'abc_classification_threshold_a': float,
            'abc_classification_threshold_b': float,
            'abc_classification_threshold_c': float,
            'discard_data': bool,
            'error_type': str,
            'hold_out_period': int,
            'no_fcst': int,
            'outlier_detection': bool,
            'periodicity': int,
            'xyz_classification_threshold_x': float,
            'xyz_classification_threshold_y': float,
            'xyz_classification_threshold_z': float
        }

        self.attribute_map = {
            'abc_classification_threshold_a': 'abcClassificationThresholdA',
            'abc_classification_threshold_b': 'abcClassificationThresholdB',
            'abc_classification_threshold_c': 'abcClassificationThresholdC',
            'discard_data': 'discardData',
            'error_type': 'errorType',
            'hold_out_period': 'holdOutPeriod',
            'no_fcst': 'noFcst',
            'outlier_detection': 'outlierDetection',
            'periodicity': 'periodicity',
            'xyz_classification_threshold_x': 'xyzClassificationThresholdX',
            'xyz_classification_threshold_y': 'xyzClassificationThresholdY',
            'xyz_classification_threshold_z': 'xyzClassificationThresholdZ'
        }

        self._abc_classification_threshold_a = abc_classification_threshold_a
        self._abc_classification_threshold_b = abc_classification_threshold_b
        self._abc_classification_threshold_c = abc_classification_threshold_c
        self._discard_data = discard_data
        self._error_type = error_type
        self._hold_out_period = hold_out_period
        self._no_fcst = no_fcst
        self._outlier_detection = outlier_detection
        self._periodicity = periodicity
        self._xyz_classification_threshold_x = xyz_classification_threshold_x
        self._xyz_classification_threshold_y = xyz_classification_threshold_y
        self._xyz_classification_threshold_z = xyz_classification_threshold_z

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HyperparameterModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HyperparameterModel of this HyperparameterModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abc_classification_threshold_a(self):
        """Gets the abc_classification_threshold_a of this HyperparameterModel.


        :return: The abc_classification_threshold_a of this HyperparameterModel.
        :rtype: float
        """
        return self._abc_classification_threshold_a

    @abc_classification_threshold_a.setter
    def abc_classification_threshold_a(self, abc_classification_threshold_a):
        """Sets the abc_classification_threshold_a of this HyperparameterModel.


        :param abc_classification_threshold_a: The abc_classification_threshold_a of this HyperparameterModel.
        :type abc_classification_threshold_a: float
        """

        self._abc_classification_threshold_a = abc_classification_threshold_a

    @property
    def abc_classification_threshold_b(self):
        """Gets the abc_classification_threshold_b of this HyperparameterModel.


        :return: The abc_classification_threshold_b of this HyperparameterModel.
        :rtype: float
        """
        return self._abc_classification_threshold_b

    @abc_classification_threshold_b.setter
    def abc_classification_threshold_b(self, abc_classification_threshold_b):
        """Sets the abc_classification_threshold_b of this HyperparameterModel.


        :param abc_classification_threshold_b: The abc_classification_threshold_b of this HyperparameterModel.
        :type abc_classification_threshold_b: float
        """

        self._abc_classification_threshold_b = abc_classification_threshold_b

    @property
    def abc_classification_threshold_c(self):
        """Gets the abc_classification_threshold_c of this HyperparameterModel.


        :return: The abc_classification_threshold_c of this HyperparameterModel.
        :rtype: float
        """
        return self._abc_classification_threshold_c

    @abc_classification_threshold_c.setter
    def abc_classification_threshold_c(self, abc_classification_threshold_c):
        """Sets the abc_classification_threshold_c of this HyperparameterModel.


        :param abc_classification_threshold_c: The abc_classification_threshold_c of this HyperparameterModel.
        :type abc_classification_threshold_c: float
        """

        self._abc_classification_threshold_c = abc_classification_threshold_c

    @property
    def discard_data(self):
        """Gets the discard_data of this HyperparameterModel.


        :return: The discard_data of this HyperparameterModel.
        :rtype: bool
        """
        return self._discard_data

    @discard_data.setter
    def discard_data(self, discard_data):
        """Sets the discard_data of this HyperparameterModel.


        :param discard_data: The discard_data of this HyperparameterModel.
        :type discard_data: bool
        """

        self._discard_data = discard_data

    @property
    def error_type(self):
        """Gets the error_type of this HyperparameterModel.


        :return: The error_type of this HyperparameterModel.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this HyperparameterModel.


        :param error_type: The error_type of this HyperparameterModel.
        :type error_type: str
        """
        allowed_values = ["MeanAbsolutePercentageError", "MeanSquaredError", "MeanAbsoluteError", "MedianAbsoluteDeviation", "None"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def hold_out_period(self):
        """Gets the hold_out_period of this HyperparameterModel.


        :return: The hold_out_period of this HyperparameterModel.
        :rtype: int
        """
        return self._hold_out_period

    @hold_out_period.setter
    def hold_out_period(self, hold_out_period):
        """Sets the hold_out_period of this HyperparameterModel.


        :param hold_out_period: The hold_out_period of this HyperparameterModel.
        :type hold_out_period: int
        """

        self._hold_out_period = hold_out_period

    @property
    def no_fcst(self):
        """Gets the no_fcst of this HyperparameterModel.


        :return: The no_fcst of this HyperparameterModel.
        :rtype: int
        """
        return self._no_fcst

    @no_fcst.setter
    def no_fcst(self, no_fcst):
        """Sets the no_fcst of this HyperparameterModel.


        :param no_fcst: The no_fcst of this HyperparameterModel.
        :type no_fcst: int
        """

        self._no_fcst = no_fcst

    @property
    def outlier_detection(self):
        """Gets the outlier_detection of this HyperparameterModel.


        :return: The outlier_detection of this HyperparameterModel.
        :rtype: bool
        """
        return self._outlier_detection

    @outlier_detection.setter
    def outlier_detection(self, outlier_detection):
        """Sets the outlier_detection of this HyperparameterModel.


        :param outlier_detection: The outlier_detection of this HyperparameterModel.
        :type outlier_detection: bool
        """

        self._outlier_detection = outlier_detection

    @property
    def periodicity(self):
        """Gets the periodicity of this HyperparameterModel.


        :return: The periodicity of this HyperparameterModel.
        :rtype: int
        """
        return self._periodicity

    @periodicity.setter
    def periodicity(self, periodicity):
        """Sets the periodicity of this HyperparameterModel.


        :param periodicity: The periodicity of this HyperparameterModel.
        :type periodicity: int
        """

        self._periodicity = periodicity

    @property
    def xyz_classification_threshold_x(self):
        """Gets the xyz_classification_threshold_x of this HyperparameterModel.


        :return: The xyz_classification_threshold_x of this HyperparameterModel.
        :rtype: float
        """
        return self._xyz_classification_threshold_x

    @xyz_classification_threshold_x.setter
    def xyz_classification_threshold_x(self, xyz_classification_threshold_x):
        """Sets the xyz_classification_threshold_x of this HyperparameterModel.


        :param xyz_classification_threshold_x: The xyz_classification_threshold_x of this HyperparameterModel.
        :type xyz_classification_threshold_x: float
        """

        self._xyz_classification_threshold_x = xyz_classification_threshold_x

    @property
    def xyz_classification_threshold_y(self):
        """Gets the xyz_classification_threshold_y of this HyperparameterModel.


        :return: The xyz_classification_threshold_y of this HyperparameterModel.
        :rtype: float
        """
        return self._xyz_classification_threshold_y

    @xyz_classification_threshold_y.setter
    def xyz_classification_threshold_y(self, xyz_classification_threshold_y):
        """Sets the xyz_classification_threshold_y of this HyperparameterModel.


        :param xyz_classification_threshold_y: The xyz_classification_threshold_y of this HyperparameterModel.
        :type xyz_classification_threshold_y: float
        """

        self._xyz_classification_threshold_y = xyz_classification_threshold_y

    @property
    def xyz_classification_threshold_z(self):
        """Gets the xyz_classification_threshold_z of this HyperparameterModel.


        :return: The xyz_classification_threshold_z of this HyperparameterModel.
        :rtype: float
        """
        return self._xyz_classification_threshold_z

    @xyz_classification_threshold_z.setter
    def xyz_classification_threshold_z(self, xyz_classification_threshold_z):
        """Sets the xyz_classification_threshold_z of this HyperparameterModel.


        :param xyz_classification_threshold_z: The xyz_classification_threshold_z of this HyperparameterModel.
        :type xyz_classification_threshold_z: float
        """

        self._xyz_classification_threshold_z = xyz_classification_threshold_z
