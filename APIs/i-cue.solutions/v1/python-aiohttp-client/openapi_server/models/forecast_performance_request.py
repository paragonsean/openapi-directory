# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_performance_data_request import ForecastPerformanceDataRequest
from openapi_server.models.planning_level_info_request import PlanningLevelInfoRequest
from openapi_server import util


class ForecastPerformanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_of_error: float=None, data: List[ForecastPerformanceDataRequest]=None, method: str=None, params: PlanningLevelInfoRequest=None, planning_level_id: str=None, rewind_time_frame: int=None, start_date: str=None):
        """ForecastPerformanceRequest - a model defined in OpenAPI

        :param cost_of_error: The cost_of_error of this ForecastPerformanceRequest.
        :param data: The data of this ForecastPerformanceRequest.
        :param method: The method of this ForecastPerformanceRequest.
        :param params: The params of this ForecastPerformanceRequest.
        :param planning_level_id: The planning_level_id of this ForecastPerformanceRequest.
        :param rewind_time_frame: The rewind_time_frame of this ForecastPerformanceRequest.
        :param start_date: The start_date of this ForecastPerformanceRequest.
        """
        self.openapi_types = {
            'cost_of_error': float,
            'data': List[ForecastPerformanceDataRequest],
            'method': str,
            'params': PlanningLevelInfoRequest,
            'planning_level_id': str,
            'rewind_time_frame': int,
            'start_date': str
        }

        self.attribute_map = {
            'cost_of_error': 'costOfError',
            'data': 'data',
            'method': 'method',
            'params': 'params',
            'planning_level_id': 'planningLevelId',
            'rewind_time_frame': 'rewindTimeFrame',
            'start_date': 'startDate'
        }

        self._cost_of_error = cost_of_error
        self._data = data
        self._method = method
        self._params = params
        self._planning_level_id = planning_level_id
        self._rewind_time_frame = rewind_time_frame
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForecastPerformanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForecastPerformanceRequest of this ForecastPerformanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_of_error(self):
        """Gets the cost_of_error of this ForecastPerformanceRequest.


        :return: The cost_of_error of this ForecastPerformanceRequest.
        :rtype: float
        """
        return self._cost_of_error

    @cost_of_error.setter
    def cost_of_error(self, cost_of_error):
        """Sets the cost_of_error of this ForecastPerformanceRequest.


        :param cost_of_error: The cost_of_error of this ForecastPerformanceRequest.
        :type cost_of_error: float
        """

        self._cost_of_error = cost_of_error

    @property
    def data(self):
        """Gets the data of this ForecastPerformanceRequest.


        :return: The data of this ForecastPerformanceRequest.
        :rtype: List[ForecastPerformanceDataRequest]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ForecastPerformanceRequest.


        :param data: The data of this ForecastPerformanceRequest.
        :type data: List[ForecastPerformanceDataRequest]
        """

        self._data = data

    @property
    def method(self):
        """Gets the method of this ForecastPerformanceRequest.


        :return: The method of this ForecastPerformanceRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ForecastPerformanceRequest.


        :param method: The method of this ForecastPerformanceRequest.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def params(self):
        """Gets the params of this ForecastPerformanceRequest.


        :return: The params of this ForecastPerformanceRequest.
        :rtype: PlanningLevelInfoRequest
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ForecastPerformanceRequest.


        :param params: The params of this ForecastPerformanceRequest.
        :type params: PlanningLevelInfoRequest
        """

        self._params = params

    @property
    def planning_level_id(self):
        """Gets the planning_level_id of this ForecastPerformanceRequest.


        :return: The planning_level_id of this ForecastPerformanceRequest.
        :rtype: str
        """
        return self._planning_level_id

    @planning_level_id.setter
    def planning_level_id(self, planning_level_id):
        """Sets the planning_level_id of this ForecastPerformanceRequest.


        :param planning_level_id: The planning_level_id of this ForecastPerformanceRequest.
        :type planning_level_id: str
        """
        if planning_level_id is None:
            raise ValueError("Invalid value for `planning_level_id`, must not be `None`")

        self._planning_level_id = planning_level_id

    @property
    def rewind_time_frame(self):
        """Gets the rewind_time_frame of this ForecastPerformanceRequest.


        :return: The rewind_time_frame of this ForecastPerformanceRequest.
        :rtype: int
        """
        return self._rewind_time_frame

    @rewind_time_frame.setter
    def rewind_time_frame(self, rewind_time_frame):
        """Sets the rewind_time_frame of this ForecastPerformanceRequest.


        :param rewind_time_frame: The rewind_time_frame of this ForecastPerformanceRequest.
        :type rewind_time_frame: int
        """
        if rewind_time_frame is None:
            raise ValueError("Invalid value for `rewind_time_frame`, must not be `None`")

        self._rewind_time_frame = rewind_time_frame

    @property
    def start_date(self):
        """Gets the start_date of this ForecastPerformanceRequest.


        :return: The start_date of this ForecastPerformanceRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ForecastPerformanceRequest.


        :param start_date: The start_date of this ForecastPerformanceRequest.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
