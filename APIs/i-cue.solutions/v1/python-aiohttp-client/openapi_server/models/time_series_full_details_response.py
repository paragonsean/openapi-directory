# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_optimal_parameters_response import ForecastOptimalParametersResponse
from openapi_server.models.outlier_response import OutlierResponse
from openapi_server.models.planning_level_forecast_result_data import PlanningLevelForecastResultData
from openapi_server import util


class TimeSeriesFullDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: float=None, forecast_data: List[PlanningLevelForecastResultData]=None, history_data: List[PlanningLevelForecastResultData]=None, method: str=None, optimal_parameters: ForecastOptimalParametersResponse=None, outliers: List[OutlierResponse]=None, time_series_id: str=None):
        """TimeSeriesFullDetailsResponse - a model defined in OpenAPI

        :param error: The error of this TimeSeriesFullDetailsResponse.
        :param forecast_data: The forecast_data of this TimeSeriesFullDetailsResponse.
        :param history_data: The history_data of this TimeSeriesFullDetailsResponse.
        :param method: The method of this TimeSeriesFullDetailsResponse.
        :param optimal_parameters: The optimal_parameters of this TimeSeriesFullDetailsResponse.
        :param outliers: The outliers of this TimeSeriesFullDetailsResponse.
        :param time_series_id: The time_series_id of this TimeSeriesFullDetailsResponse.
        """
        self.openapi_types = {
            'error': float,
            'forecast_data': List[PlanningLevelForecastResultData],
            'history_data': List[PlanningLevelForecastResultData],
            'method': str,
            'optimal_parameters': ForecastOptimalParametersResponse,
            'outliers': List[OutlierResponse],
            'time_series_id': str
        }

        self.attribute_map = {
            'error': 'error',
            'forecast_data': 'forecastData',
            'history_data': 'historyData',
            'method': 'method',
            'optimal_parameters': 'optimalParameters',
            'outliers': 'outliers',
            'time_series_id': 'timeSeriesId'
        }

        self._error = error
        self._forecast_data = forecast_data
        self._history_data = history_data
        self._method = method
        self._optimal_parameters = optimal_parameters
        self._outliers = outliers
        self._time_series_id = time_series_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesFullDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesFullDetailsResponse of this TimeSeriesFullDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this TimeSeriesFullDetailsResponse.


        :return: The error of this TimeSeriesFullDetailsResponse.
        :rtype: float
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TimeSeriesFullDetailsResponse.


        :param error: The error of this TimeSeriesFullDetailsResponse.
        :type error: float
        """

        self._error = error

    @property
    def forecast_data(self):
        """Gets the forecast_data of this TimeSeriesFullDetailsResponse.


        :return: The forecast_data of this TimeSeriesFullDetailsResponse.
        :rtype: List[PlanningLevelForecastResultData]
        """
        return self._forecast_data

    @forecast_data.setter
    def forecast_data(self, forecast_data):
        """Sets the forecast_data of this TimeSeriesFullDetailsResponse.


        :param forecast_data: The forecast_data of this TimeSeriesFullDetailsResponse.
        :type forecast_data: List[PlanningLevelForecastResultData]
        """

        self._forecast_data = forecast_data

    @property
    def history_data(self):
        """Gets the history_data of this TimeSeriesFullDetailsResponse.


        :return: The history_data of this TimeSeriesFullDetailsResponse.
        :rtype: List[PlanningLevelForecastResultData]
        """
        return self._history_data

    @history_data.setter
    def history_data(self, history_data):
        """Sets the history_data of this TimeSeriesFullDetailsResponse.


        :param history_data: The history_data of this TimeSeriesFullDetailsResponse.
        :type history_data: List[PlanningLevelForecastResultData]
        """

        self._history_data = history_data

    @property
    def method(self):
        """Gets the method of this TimeSeriesFullDetailsResponse.


        :return: The method of this TimeSeriesFullDetailsResponse.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this TimeSeriesFullDetailsResponse.


        :param method: The method of this TimeSeriesFullDetailsResponse.
        :type method: str
        """

        self._method = method

    @property
    def optimal_parameters(self):
        """Gets the optimal_parameters of this TimeSeriesFullDetailsResponse.


        :return: The optimal_parameters of this TimeSeriesFullDetailsResponse.
        :rtype: ForecastOptimalParametersResponse
        """
        return self._optimal_parameters

    @optimal_parameters.setter
    def optimal_parameters(self, optimal_parameters):
        """Sets the optimal_parameters of this TimeSeriesFullDetailsResponse.


        :param optimal_parameters: The optimal_parameters of this TimeSeriesFullDetailsResponse.
        :type optimal_parameters: ForecastOptimalParametersResponse
        """

        self._optimal_parameters = optimal_parameters

    @property
    def outliers(self):
        """Gets the outliers of this TimeSeriesFullDetailsResponse.


        :return: The outliers of this TimeSeriesFullDetailsResponse.
        :rtype: List[OutlierResponse]
        """
        return self._outliers

    @outliers.setter
    def outliers(self, outliers):
        """Sets the outliers of this TimeSeriesFullDetailsResponse.


        :param outliers: The outliers of this TimeSeriesFullDetailsResponse.
        :type outliers: List[OutlierResponse]
        """

        self._outliers = outliers

    @property
    def time_series_id(self):
        """Gets the time_series_id of this TimeSeriesFullDetailsResponse.


        :return: The time_series_id of this TimeSeriesFullDetailsResponse.
        :rtype: str
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this TimeSeriesFullDetailsResponse.


        :param time_series_id: The time_series_id of this TimeSeriesFullDetailsResponse.
        :type time_series_id: str
        """

        self._time_series_id = time_series_id
