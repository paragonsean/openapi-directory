# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, db_connection: str=None, email: str=None, id: int=None, is_active: bool=None, name: str=None, token: str=None):
        """EntityResponse - a model defined in OpenAPI

        :param address: The address of this EntityResponse.
        :param db_connection: The db_connection of this EntityResponse.
        :param email: The email of this EntityResponse.
        :param id: The id of this EntityResponse.
        :param is_active: The is_active of this EntityResponse.
        :param name: The name of this EntityResponse.
        :param token: The token of this EntityResponse.
        """
        self.openapi_types = {
            'address': str,
            'db_connection': str,
            'email': str,
            'id': int,
            'is_active': bool,
            'name': str,
            'token': str
        }

        self.attribute_map = {
            'address': 'address',
            'db_connection': 'dbConnection',
            'email': 'email',
            'id': 'id',
            'is_active': 'isActive',
            'name': 'name',
            'token': 'token'
        }

        self._address = address
        self._db_connection = db_connection
        self._email = email
        self._id = id
        self._is_active = is_active
        self._name = name
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityResponse of this EntityResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this EntityResponse.


        :return: The address of this EntityResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EntityResponse.


        :param address: The address of this EntityResponse.
        :type address: str
        """

        self._address = address

    @property
    def db_connection(self):
        """Gets the db_connection of this EntityResponse.


        :return: The db_connection of this EntityResponse.
        :rtype: str
        """
        return self._db_connection

    @db_connection.setter
    def db_connection(self, db_connection):
        """Sets the db_connection of this EntityResponse.


        :param db_connection: The db_connection of this EntityResponse.
        :type db_connection: str
        """

        self._db_connection = db_connection

    @property
    def email(self):
        """Gets the email of this EntityResponse.


        :return: The email of this EntityResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EntityResponse.


        :param email: The email of this EntityResponse.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this EntityResponse.


        :return: The id of this EntityResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityResponse.


        :param id: The id of this EntityResponse.
        :type id: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this EntityResponse.


        :return: The is_active of this EntityResponse.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this EntityResponse.


        :param is_active: The is_active of this EntityResponse.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this EntityResponse.


        :return: The name of this EntityResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityResponse.


        :param name: The name of this EntityResponse.
        :type name: str
        """

        self._name = name

    @property
    def token(self):
        """Gets the token of this EntityResponse.


        :return: The token of this EntityResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this EntityResponse.


        :param token: The token of this EntityResponse.
        :type token: str
        """

        self._token = token
