/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GrowthServices);
  }
}(this, function(expect, GrowthServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GrowthServices.AdministrationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AdministrationApi', function() {
    describe('administrationEntityGet', function() {
      it('should call administrationEntityGet successfully', function(done) {
        //uncomment below and update the code to test administrationEntityGet
        //instance.administrationEntityGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationEntityIdDelete', function() {
      it('should call administrationEntityIdDelete successfully', function(done) {
        //uncomment below and update the code to test administrationEntityIdDelete
        //instance.administrationEntityIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationEntityPost', function() {
      it('should call administrationEntityPost successfully', function(done) {
        //uncomment below and update the code to test administrationEntityPost
        //instance.administrationEntityPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationEntityPut', function() {
      it('should call administrationEntityPut successfully', function(done) {
        //uncomment below and update the code to test administrationEntityPut
        //instance.administrationEntityPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationFileToJsonPost', function() {
      it('should call administrationFileToJsonPost successfully', function(done) {
        //uncomment below and update the code to test administrationFileToJsonPost
        //instance.administrationFileToJsonPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationModelEntityIdGet', function() {
      it('should call administrationModelEntityIdGet successfully', function(done) {
        //uncomment below and update the code to test administrationModelEntityIdGet
        //instance.administrationModelEntityIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationModelEntityIdPost', function() {
      it('should call administrationModelEntityIdPost successfully', function(done) {
        //uncomment below and update the code to test administrationModelEntityIdPost
        //instance.administrationModelEntityIdPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationModelGet', function() {
      it('should call administrationModelGet successfully', function(done) {
        //uncomment below and update the code to test administrationModelGet
        //instance.administrationModelGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationModelPost', function() {
      it('should call administrationModelPost successfully', function(done) {
        //uncomment below and update the code to test administrationModelPost
        //instance.administrationModelPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationPlanningLevelEntityIdIdDelete', function() {
      it('should call administrationPlanningLevelEntityIdIdDelete successfully', function(done) {
        //uncomment below and update the code to test administrationPlanningLevelEntityIdIdDelete
        //instance.administrationPlanningLevelEntityIdIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationPlanningLevelLockPost', function() {
      it('should call administrationPlanningLevelLockPost successfully', function(done) {
        //uncomment below and update the code to test administrationPlanningLevelLockPost
        //instance.administrationPlanningLevelLockPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationTokenPost', function() {
      it('should call administrationTokenPost successfully', function(done) {
        //uncomment below and update the code to test administrationTokenPost
        //instance.administrationTokenPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationUserEntityIdGet', function() {
      it('should call administrationUserEntityIdGet successfully', function(done) {
        //uncomment below and update the code to test administrationUserEntityIdGet
        //instance.administrationUserEntityIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationUserEntityIdIdDelete', function() {
      it('should call administrationUserEntityIdIdDelete successfully', function(done) {
        //uncomment below and update the code to test administrationUserEntityIdIdDelete
        //instance.administrationUserEntityIdIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationUserLockPut', function() {
      it('should call administrationUserLockPut successfully', function(done) {
        //uncomment below and update the code to test administrationUserLockPut
        //instance.administrationUserLockPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationUserPost', function() {
      it('should call administrationUserPost successfully', function(done) {
        //uncomment below and update the code to test administrationUserPost
        //instance.administrationUserPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('administrationUserPut', function() {
      it('should call administrationUserPut successfully', function(done) {
        //uncomment below and update the code to test administrationUserPut
        //instance.administrationUserPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
