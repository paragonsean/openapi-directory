/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AiPlanningLevelRequest from '../model/AiPlanningLevelRequest';
import ForecastBottomUpResponse from '../model/ForecastBottomUpResponse';
import ForecastResponse from '../model/ForecastResponse';
import FullDetailsForecastResponse from '../model/FullDetailsForecastResponse';
import HistoryAndForecastResponse from '../model/HistoryAndForecastResponse';
import JobResponse from '../model/JobResponse';
import OptimalParameterResponse from '../model/OptimalParameterResponse';
import OutliersRequest from '../model/OutliersRequest';
import PlanningLevelReRunRequest from '../model/PlanningLevelReRunRequest';
import PlanningLevelRequest from '../model/PlanningLevelRequest';
import TimeSeriesOutliersResponse from '../model/TimeSeriesOutliersResponse';

/**
* InsightDrivenPlanningForecastOptimization service.
* @module api/InsightDrivenPlanningForecastOptimizationApi
* @version v1
*/
export default class InsightDrivenPlanningForecastOptimizationApi {

    /**
    * Constructs a new InsightDrivenPlanningForecastOptimizationApi. 
    * @alias module:api/InsightDrivenPlanningForecastOptimizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the forecastAIHistoryAndForecastPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastAIHistoryAndForecastPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * History and forecast utilizing advanced machine learning models
     * History and forecast utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/AiPlanningLevelRequest} [aiPlanningLevelRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastAIHistoryAndForecastPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    forecastAIHistoryAndForecastPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['aiPlanningLevelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/forecast/AI/history-and-forecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastAIPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastAIPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forecast utilizing advanced machine learning models
     * Forecast AI is utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/AiPlanningLevelRequest} [aiPlanningLevelRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastAIPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    forecastAIPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['aiPlanningLevelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/forecast/AI', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastFileToForecastPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastFileToForecastPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forecast from file
     * Forecast from file allows for quick analysis via Microsoft Excel and CSV file format. Please check documentation link for help.
     * @param {File} file 
     * @param {module:model/String} method 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {Boolean} [discardData] 
     * @param {module:model/String} [errorType] 
     * @param {Number} [holdOutPeriod] 
     * @param {Number} [noFcst] 
     * @param {Boolean} [outlierDetection] 
     * @param {Number} [periodicity] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastFileToForecastPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    forecastFileToForecastPost(file, method, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling forecastFileToForecastPost");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling forecastFileToForecastPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
        'DiscardData': opts['discardData'],
        'ErrorType': opts['errorType'],
        'File': file,
        'HoldOutPeriod': opts['holdOutPeriod'],
        'Method': method,
        'NoFcst': opts['noFcst'],
        'OutlierDetection': opts['outlierDetection'],
        'Periodicity': opts['periodicity']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/forecast/file-to-forecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastForecastBottomUpPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastForecastBottomUpPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForecastBottomUpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bottom up forecasting
     * Calculate forecast by timeseries and sum results up to establish forecast for top level timeseries.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/PlanningLevelRequest} [planningLevelRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastForecastBottomUpPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForecastBottomUpResponse}
     */
    forecastForecastBottomUpPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['planningLevelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ForecastBottomUpResponse;
      return this.apiClient.callApi(
        '/forecast/forecast-bottom-up', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastForecastTopDownPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastForecastTopDownPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top down forecasting
     * Calculate forecast based on sum of of lower level timeseries and distribute forecast down based on ratios. Great feature for planning levels with dynamic timeseries.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/PlanningLevelRequest} [planningLevelRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastForecastTopDownPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forecastForecastTopDownPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['planningLevelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast/forecast-top-down', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastFullDetailPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastFullDetailPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullDetailsForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Full forecast result details, including error, trend seasonality and outlier
     * Response provides full forecast result details, including error, trend seasonality and outlier. Great for advanced analysis.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/PlanningLevelRequest} [planningLevelRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastFullDetailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullDetailsForecastResponse}
     */
    forecastFullDetailPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['planningLevelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = FullDetailsForecastResponse;
      return this.apiClient.callApi(
        '/forecast/full-detail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastHistoryAndForecastPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastHistoryAndForecastPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryAndForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * History and forecast for fast timeseries view
     * Reponse provides history and forecast per timeseries. Great for visualizing results.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/PlanningLevelRequest} [planningLevelRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastHistoryAndForecastPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryAndForecastResponse}
     */
    forecastHistoryAndForecastPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['planningLevelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = HistoryAndForecastResponse;
      return this.apiClient.callApi(
        '/forecast/history-and-forecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastOptimalParameterPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastOptimalParameterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OptimalParameterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get optimal parameter per method
     * Use the optimal parameter sets created by iCUE to set the method parameters of your internal planning system.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/PlanningLevelRequest} [planningLevelRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastOptimalParameterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OptimalParameterResponse}
     */
    forecastOptimalParameterPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['planningLevelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = OptimalParameterResponse;
      return this.apiClient.callApi(
        '/forecast/optimal-parameter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forecasts only, for faster results
     * To support maximum operation and integration speed, this endpoint only returns the calculated forecast.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/PlanningLevelRequest} [planningLevelRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForecastResponse}
     */
    forecastPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['planningLevelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ForecastResponse;
      return this.apiClient.callApi(
        '/forecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastRerunPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastRerunPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rerun previously uploaded planning level
     * Rerun previously uploaded planning level.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/PlanningLevelReRunRequest} [planningLevelReRunRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastRerunPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForecastResponse}
     */
    forecastRerunPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['planningLevelReRunRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ForecastResponse;
      return this.apiClient.callApi(
        '/forecast/rerun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastResultJobIdGet operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastResultJobIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forecast result
     * Get result for forecast job
     * @param {Number} jobId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastResultJobIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forecastResultJobIdGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling forecastResultJobIdGet");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast/result/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastStatusJobIdGet operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~forecastStatusJobIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forecast status
     * Get status for forecast job
     * @param {Number} jobId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~forecastStatusJobIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forecastStatusJobIdGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling forecastStatusJobIdGet");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forecast/status/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the outlierPost operation.
     * @callback module:api/InsightDrivenPlanningForecastOptimizationApi~outlierPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeSeriesOutliersResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get outlier
     * Identify outliers (single and repetitive spikes, seasonality, masked outliers, trend and level jumps, amongst other topics) and use for cleansing of the history stream prior to forecast claculation. Depending on math model used, this approach often improves results dramatically, as it removes disturbances.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/OutliersRequest} [outliersRequest] 
     * @param {module:api/InsightDrivenPlanningForecastOptimizationApi~outlierPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeSeriesOutliersResponse>}
     */
    outlierPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['outliersRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [TimeSeriesOutliersResponse];
      return this.apiClient.callApi(
        '/outlier', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
