/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PortfolioModel from '../model/PortfolioModel';

/**
* ReportingAndMonitoring service.
* @module api/ReportingAndMonitoringApi
* @version v1
*/
export default class ReportingAndMonitoringApi {

    /**
    * Constructs a new ReportingAndMonitoringApi. 
    * @alias module:api/ReportingAndMonitoringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportPerformancePlanningLevelIdGet operation.
     * @callback module:api/ReportingAndMonitoringApi~reportPerformancePlanningLevelIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Month over month performance per planning level
     * Month over month performance per planning level
     * @param {String} planningLevelId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/ReportingAndMonitoringApi~reportPerformancePlanningLevelIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportPerformancePlanningLevelIdGet(planningLevelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planningLevelId' is set
      if (planningLevelId === undefined || planningLevelId === null) {
        throw new Error("Missing the required parameter 'planningLevelId' when calling reportPerformancePlanningLevelIdGet");
      }

      let pathParams = {
        'planningLevelId': planningLevelId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/performance/{planningLevelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPerformanceSkuRationalizationPlanningLevelIdGet operation.
     * @callback module:api/ReportingAndMonitoringApi~reportPerformanceSkuRationalizationPlanningLevelIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortfolioModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SKU rationalization report
     * SKU rationalization report
     * @param {Number} planningLevelId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/ReportingAndMonitoringApi~reportPerformanceSkuRationalizationPlanningLevelIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortfolioModel>}
     */
    reportPerformanceSkuRationalizationPlanningLevelIdGet(planningLevelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planningLevelId' is set
      if (planningLevelId === undefined || planningLevelId === null) {
        throw new Error("Missing the required parameter 'planningLevelId' when calling reportPerformanceSkuRationalizationPlanningLevelIdGet");
      }

      let pathParams = {
        'planningLevelId': planningLevelId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [PortfolioModel];
      return this.apiClient.callApi(
        '/report/performance/sku-rationalization/{planningLevelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPlanningLevelOrganizationGet operation.
     * @callback module:api/ReportingAndMonitoringApi~reportPlanningLevelOrganizationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of plannign levels by organization
     * Get list of plannign levels by organization
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/ReportingAndMonitoringApi~reportPlanningLevelOrganizationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportPlanningLevelOrganizationGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/planning-level/organization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPlanningLevelUserGet operation.
     * @callback module:api/ReportingAndMonitoringApi~reportPlanningLevelUserGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of plannign levels by user
     * Get list of plannign levels by user
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/ReportingAndMonitoringApi~reportPlanningLevelUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportPlanningLevelUserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/planning-level/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportUserGet operation.
     * @callback module:api/ReportingAndMonitoringApi~reportUserGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get usage statistics per user
     * Get usage statistics per user
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/ReportingAndMonitoringApi~reportUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportUserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
