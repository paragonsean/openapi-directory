/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityResponse from '../model/EntityResponse';
import JsonForecastResponse from '../model/JsonForecastResponse';
import MethodDto from '../model/MethodDto';
import NewEntityRequest from '../model/NewEntityRequest';
import NewModelRequest from '../model/NewModelRequest';
import NewTokenRequest from '../model/NewTokenRequest';
import NewUserRequest from '../model/NewUserRequest';
import ToggleRequest from '../model/ToggleRequest';
import ToggleUserRequest from '../model/ToggleUserRequest';

/**
* Administration service.
* @module api/AdministrationApi
* @version v1
*/
export default class AdministrationApi {

    /**
    * Constructs a new AdministrationApi. 
    * @alias module:api/AdministrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the administrationEntityGet operation.
     * @callback module:api/AdministrationApi~administrationEntityGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all organizations
     * This is an iCUE only endpoint or Enterprise feature.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationEntityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityResponse>}
     */
    administrationEntityGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [EntityResponse];
      return this.apiClient.callApi(
        '/administration/entity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationEntityIdDelete operation.
     * @callback module:api/AdministrationApi~administrationEntityIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization
     * This is an iCUE only endpoint or Enterprise feature.
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationEntityIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    administrationEntityIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling administrationEntityIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/administration/entity/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationEntityPost operation.
     * @callback module:api/AdministrationApi~administrationEntityPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create organization
     * This is an iCUE only endpoint or Enterprise feature.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/NewEntityRequest} [newEntityRequest] 
     * @param {module:api/AdministrationApi~administrationEntityPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    administrationEntityPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['newEntityRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/administration/entity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationEntityPut operation.
     * @callback module:api/AdministrationApi~administrationEntityPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause organization
     * This is an iCUE only endpoint or Enterprise feature.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/ToggleRequest} [toggleRequest] 
     * @param {module:api/AdministrationApi~administrationEntityPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    administrationEntityPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['toggleRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/administration/entity', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationFileToJsonPost operation.
     * @callback module:api/AdministrationApi~administrationFileToJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transform data file to JSON format
     * Transform data file to JSON format
     * @param {File} file 
     * @param {Number} periodicity 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationFileToJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonForecastResponse}
     */
    administrationFileToJsonPost(file, periodicity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling administrationFileToJsonPost");
      }
      // verify the required parameter 'periodicity' is set
      if (periodicity === undefined || periodicity === null) {
        throw new Error("Missing the required parameter 'periodicity' when calling administrationFileToJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
        'File': file,
        'Periodicity': periodicity
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = JsonForecastResponse;
      return this.apiClient.callApi(
        '/administration/file-to-json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationModelEntityIdGet operation.
     * @callback module:api/AdministrationApi~administrationModelEntityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MethodDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Models for Organization
     * Returns models registered for Organization
     * @param {Number} entityId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationModelEntityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MethodDto>}
     */
    administrationModelEntityIdGet(entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling administrationModelEntityIdGet");
      }

      let pathParams = {
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [MethodDto];
      return this.apiClient.callApi(
        '/administration/model/{entityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationModelEntityIdPost operation.
     * @callback module:api/AdministrationApi~administrationModelEntityIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register new forecasting model
     * Register new forecasting model for single organziation
     * @param {Number} entityId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/NewModelRequest} [newModelRequest] 
     * @param {module:api/AdministrationApi~administrationModelEntityIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodDto}
     */
    administrationModelEntityIdPost(entityId, opts, callback) {
      opts = opts || {};
      let postBody = opts['newModelRequest'];
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling administrationModelEntityIdPost");
      }

      let pathParams = {
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MethodDto;
      return this.apiClient.callApi(
        '/administration/model/{entityId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationModelGet operation.
     * @callback module:api/AdministrationApi~administrationModelGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MethodDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all common Models
     * Returns models that are common for all Organizations
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationModelGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MethodDto>}
     */
    administrationModelGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [MethodDto];
      return this.apiClient.callApi(
        '/administration/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationModelPost operation.
     * @callback module:api/AdministrationApi~administrationModelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register new forecasting model
     * Register new forecasting model for all organziations
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/NewModelRequest} [newModelRequest] 
     * @param {module:api/AdministrationApi~administrationModelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodDto}
     */
    administrationModelPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['newModelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MethodDto;
      return this.apiClient.callApi(
        '/administration/model', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationPlanningLevelEntityIdIdDelete operation.
     * @callback module:api/AdministrationApi~administrationPlanningLevelEntityIdIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete planning level
     * Delete planning level. This is an Enterprise feature.
     * @param {Number} entityId 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationPlanningLevelEntityIdIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    administrationPlanningLevelEntityIdIdDelete(entityId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling administrationPlanningLevelEntityIdIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling administrationPlanningLevelEntityIdIdDelete");
      }

      let pathParams = {
        'entityId': entityId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/administration/planning-level/{entityId}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationPlanningLevelLockPost operation.
     * @callback module:api/AdministrationApi~administrationPlanningLevelLockPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock planning level
     * Lock planning level against modification. This is an Enterprise feature.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationPlanningLevelLockPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    administrationPlanningLevelLockPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/administration/planning-level/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationTokenPost operation.
     * @callback module:api/AdministrationApi~administrationTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue a token
     * This is an iCUE only endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/NewTokenRequest} [newTokenRequest] 
     * @param {module:api/AdministrationApi~administrationTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    administrationTokenPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['newTokenRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/administration/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationUserEntityIdGet operation.
     * @callback module:api/AdministrationApi~administrationUserEntityIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all users
     * Get all users
     * @param {Number} entityId 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationUserEntityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    administrationUserEntityIdGet(entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling administrationUserEntityIdGet");
      }

      let pathParams = {
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/administration/user/{entityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationUserEntityIdIdDelete operation.
     * @callback module:api/AdministrationApi~administrationUserEntityIdIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user
     * Delete user
     * @param {Number} entityId 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationUserEntityIdIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    administrationUserEntityIdIdDelete(entityId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling administrationUserEntityIdIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling administrationUserEntityIdIdDelete");
      }

      let pathParams = {
        'entityId': entityId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/administration/user/{entityId}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationUserLockPut operation.
     * @callback module:api/AdministrationApi~administrationUserLockPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock user
     * After lock user won't be able to use iCUE API endpoints.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/ToggleUserRequest} [toggleUserRequest] 
     * @param {module:api/AdministrationApi~administrationUserLockPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    administrationUserLockPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['toggleUserRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/administration/user/lock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationUserPost operation.
     * @callback module:api/AdministrationApi~administrationUserPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * Create new user for entity/organization. This can be done by entity administrator.
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:model/NewUserRequest} [newUserRequest] 
     * @param {module:api/AdministrationApi~administrationUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    administrationUserPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['newUserRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/administration/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the administrationUserPut operation.
     * @callback module:api/AdministrationApi~administrationUserPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user
     * Update user
     * @param {Object} opts Optional parameters
     * @param {String} [token] User Authentication Token
     * @param {module:api/AdministrationApi~administrationUserPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    administrationUserPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Token': opts['token']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/administration/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
