/**
 * Growth Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlanningLevelDataDto from './PlanningLevelDataDto';

/**
 * The JsonForecastResponse model module.
 * @module model/JsonForecastResponse
 * @version v1
 */
class JsonForecastResponse {
    /**
     * Constructs a new <code>JsonForecastResponse</code>.
     * @alias module:model/JsonForecastResponse
     */
    constructor() { 
        
        JsonForecastResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonForecastResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonForecastResponse} obj Optional instance to populate.
     * @return {module:model/JsonForecastResponse} The populated <code>JsonForecastResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonForecastResponse();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [PlanningLevelDataDto]);
            }
            if (data.hasOwnProperty('planningLevelId')) {
                obj['planningLevelId'] = ApiClient.convertToType(data['planningLevelId'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonForecastResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonForecastResponse</code>.
     */
    static validateJSON(data) {
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                PlanningLevelDataDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['planningLevelId'] && !(typeof data['planningLevelId'] === 'string' || data['planningLevelId'] instanceof String)) {
            throw new Error("Expected the field `planningLevelId` to be a primitive type in the JSON string but got " + data['planningLevelId']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/PlanningLevelDataDto>} data
 */
JsonForecastResponse.prototype['data'] = undefined;

/**
 * @member {String} planningLevelId
 */
JsonForecastResponse.prototype['planningLevelId'] = undefined;

/**
 * @member {String} startDate
 */
JsonForecastResponse.prototype['startDate'] = undefined;






export default JsonForecastResponse;

