/**
 * RESTful4Up
 * RESTful API 4 Unipacker
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplyYaraRules200Response from '../model/ApplyYaraRules200Response';
import EmulationOutput200Response from '../model/EmulationOutput200Response';
import Error from '../model/Error';
import GeneratePartialYaraRule200Response from '../model/GeneratePartialYaraRule200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applyYaraRules operation.
     * @callback module:api/DefaultApi~applyYaraRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplyYaraRules200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * apply given YARA rules to the given executable. (upto 10 rules)
     * @param {File} file file
     * @param {Array.<String>} rules 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [isUnpackingRequired] 
     * @param {module:api/DefaultApi~applyYaraRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplyYaraRules200Response}
     */
    applyYaraRules(file, rules, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling applyYaraRules");
      }
      // verify the required parameter 'rules' is set
      if (rules === undefined || rules === null) {
        throw new Error("Missing the required parameter 'rules' when calling applyYaraRules");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'is_unpacking_required': opts['isUnpackingRequired'],
        'rules': this.apiClient.buildCollectionParam(rules, 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = ApplyYaraRules200Response;
      return this.apiClient.callApi(
        '/apply-yara-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clean operation.
     * @callback module:api/DefaultApi~cleanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * clean up the uploaded files
     * @param {module:api/DefaultApi~cleanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clean(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clean', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emulationOutput operation.
     * @callback module:api/DefaultApi~emulationOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmulationOutput200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * try to get the emulation output after unpacking the file
     * @param {File} file file
     * @param {module:api/DefaultApi~emulationOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmulationOutput200Response}
     */
    emulationOutput(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling emulationOutput");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = EmulationOutput200Response;
      return this.apiClient.callApi(
        '/emulation-output', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePartialYaraRule operation.
     * @callback module:api/DefaultApi~generatePartialYaraRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneratePartialYaraRule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * generate partial YARA rules for give executable. (Rule without the condition section)
     * @param {File} file file
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [isUnpackingRequired] 
     * @param {String} [minimumStringLength] 
     * @param {Array.<String>} [stringsToIgnore] 
     * @param {module:api/DefaultApi~generatePartialYaraRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneratePartialYaraRule200Response}
     */
    generatePartialYaraRule(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling generatePartialYaraRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'is_unpacking_required': opts['isUnpackingRequired'],
        'minimum_string_length': opts['minimumStringLength'],
        'strings_to_ignore': this.apiClient.buildCollectionParam(opts['stringsToIgnore'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = GeneratePartialYaraRule200Response;
      return this.apiClient.callApi(
        '/generate-partial-yara-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpack operation.
     * @callback module:api/DefaultApi~unpackCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * try to unpack the given file
     * @param {File} file file
     * @param {module:api/DefaultApi~unpackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    unpack(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling unpack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/unpack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
