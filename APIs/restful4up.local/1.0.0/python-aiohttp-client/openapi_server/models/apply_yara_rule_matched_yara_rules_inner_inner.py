# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplyYaraRuleMatchedYaraRulesInnerInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule: str=None, string_information: List[str]=None):
        """ApplyYaraRuleMatchedYaraRulesInnerInner - a model defined in OpenAPI

        :param rule: The rule of this ApplyYaraRuleMatchedYaraRulesInnerInner.
        :param string_information: The string_information of this ApplyYaraRuleMatchedYaraRulesInnerInner.
        """
        self.openapi_types = {
            'rule': str,
            'string_information': List[str]
        }

        self.attribute_map = {
            'rule': 'rule',
            'string_information': 'string_information'
        }

        self._rule = rule
        self._string_information = string_information

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyYaraRuleMatchedYaraRulesInnerInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The apply_yara_rule_matched_yara_rules_inner_inner of this ApplyYaraRuleMatchedYaraRulesInnerInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule(self):
        """Gets the rule of this ApplyYaraRuleMatchedYaraRulesInnerInner.

        matched rule

        :return: The rule of this ApplyYaraRuleMatchedYaraRulesInnerInner.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ApplyYaraRuleMatchedYaraRulesInnerInner.

        matched rule

        :param rule: The rule of this ApplyYaraRuleMatchedYaraRulesInnerInner.
        :type rule: str
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")

        self._rule = rule

    @property
    def string_information(self):
        """Gets the string_information of this ApplyYaraRuleMatchedYaraRulesInnerInner.

        string which matched during the scanning

        :return: The string_information of this ApplyYaraRuleMatchedYaraRulesInnerInner.
        :rtype: List[str]
        """
        return self._string_information

    @string_information.setter
    def string_information(self, string_information):
        """Sets the string_information of this ApplyYaraRuleMatchedYaraRulesInnerInner.

        string which matched during the scanning

        :param string_information: The string_information of this ApplyYaraRuleMatchedYaraRulesInnerInner.
        :type string_information: List[str]
        """
        if string_information is None:
            raise ValueError("Invalid value for `string_information`, must not be `None`")

        self._string_information = string_information
