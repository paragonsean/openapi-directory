# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apply_yara_rule_matched_yara_rules_inner_inner import ApplyYaraRuleMatchedYaraRulesInnerInner
from openapi_server import util


class ApplyYaraRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, is_success: bool=None, matched_yara_rules: List[List[ApplyYaraRuleMatchedYaraRulesInnerInner]]=None, yara_command: str=None):
        """ApplyYaraRule - a model defined in OpenAPI

        :param error_message: The error_message of this ApplyYaraRule.
        :param is_success: The is_success of this ApplyYaraRule.
        :param matched_yara_rules: The matched_yara_rules of this ApplyYaraRule.
        :param yara_command: The yara_command of this ApplyYaraRule.
        """
        self.openapi_types = {
            'error_message': str,
            'is_success': bool,
            'matched_yara_rules': List[List[ApplyYaraRuleMatchedYaraRulesInnerInner]],
            'yara_command': str
        }

        self.attribute_map = {
            'error_message': 'error_message',
            'is_success': 'is_success',
            'matched_yara_rules': 'matched_yara_rules',
            'yara_command': 'yara_command'
        }

        self._error_message = error_message
        self._is_success = is_success
        self._matched_yara_rules = matched_yara_rules
        self._yara_command = yara_command

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyYaraRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The apply_yara_rule of this ApplyYaraRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this ApplyYaraRule.

        error message, if YARA failed

        :return: The error_message of this ApplyYaraRule.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ApplyYaraRule.

        error message, if YARA failed

        :param error_message: The error_message of this ApplyYaraRule.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def is_success(self):
        """Gets the is_success of this ApplyYaraRule.

        is operation success

        :return: The is_success of this ApplyYaraRule.
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this ApplyYaraRule.

        is operation success

        :param is_success: The is_success of this ApplyYaraRule.
        :type is_success: bool
        """
        if is_success is None:
            raise ValueError("Invalid value for `is_success`, must not be `None`")

        self._is_success = is_success

    @property
    def matched_yara_rules(self):
        """Gets the matched_yara_rules of this ApplyYaraRule.

        matched YARA rules

        :return: The matched_yara_rules of this ApplyYaraRule.
        :rtype: List[List[ApplyYaraRuleMatchedYaraRulesInnerInner]]
        """
        return self._matched_yara_rules

    @matched_yara_rules.setter
    def matched_yara_rules(self, matched_yara_rules):
        """Sets the matched_yara_rules of this ApplyYaraRule.

        matched YARA rules

        :param matched_yara_rules: The matched_yara_rules of this ApplyYaraRule.
        :type matched_yara_rules: List[List[ApplyYaraRuleMatchedYaraRulesInnerInner]]
        """

        self._matched_yara_rules = matched_yara_rules

    @property
    def yara_command(self):
        """Gets the yara_command of this ApplyYaraRule.

        Yara command executed

        :return: The yara_command of this ApplyYaraRule.
        :rtype: str
        """
        return self._yara_command

    @yara_command.setter
    def yara_command(self, yara_command):
        """Sets the yara_command of this ApplyYaraRule.

        Yara command executed

        :param yara_command: The yara_command of this ApplyYaraRule.
        :type yara_command: str
        """
        if yara_command is None:
            raise ValueError("Invalid value for `yara_command`, must not be `None`")

        self._yara_command = yara_command
