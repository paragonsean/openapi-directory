/*
 * RESTful4Up
 * RESTful API 4 Unipacker
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplyYaraRuleMatchedYaraRulesInnerInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplyYaraRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:55.437812-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplyYaraRule {
  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error_message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_IS_SUCCESS = "is_success";
  @SerializedName(SERIALIZED_NAME_IS_SUCCESS)
  private Boolean isSuccess;

  public static final String SERIALIZED_NAME_MATCHED_YARA_RULES = "matched_yara_rules";
  @SerializedName(SERIALIZED_NAME_MATCHED_YARA_RULES)
  private List<List<ApplyYaraRuleMatchedYaraRulesInnerInner>> matchedYaraRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_YARA_COMMAND = "yara_command";
  @SerializedName(SERIALIZED_NAME_YARA_COMMAND)
  private String yaraCommand;

  public ApplyYaraRule() {
  }

  public ApplyYaraRule errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * error message, if YARA failed
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ApplyYaraRule isSuccess(Boolean isSuccess) {
    this.isSuccess = isSuccess;
    return this;
  }

  /**
   * is operation success
   * @return isSuccess
   */
  @javax.annotation.Nonnull
  public Boolean getIsSuccess() {
    return isSuccess;
  }

  public void setIsSuccess(Boolean isSuccess) {
    this.isSuccess = isSuccess;
  }


  public ApplyYaraRule matchedYaraRules(List<List<ApplyYaraRuleMatchedYaraRulesInnerInner>> matchedYaraRules) {
    this.matchedYaraRules = matchedYaraRules;
    return this;
  }

  public ApplyYaraRule addMatchedYaraRulesItem(List<ApplyYaraRuleMatchedYaraRulesInnerInner> matchedYaraRulesItem) {
    if (this.matchedYaraRules == null) {
      this.matchedYaraRules = new ArrayList<>();
    }
    this.matchedYaraRules.add(matchedYaraRulesItem);
    return this;
  }

  /**
   * matched YARA rules
   * @return matchedYaraRules
   */
  @javax.annotation.Nullable
  public List<List<ApplyYaraRuleMatchedYaraRulesInnerInner>> getMatchedYaraRules() {
    return matchedYaraRules;
  }

  public void setMatchedYaraRules(List<List<ApplyYaraRuleMatchedYaraRulesInnerInner>> matchedYaraRules) {
    this.matchedYaraRules = matchedYaraRules;
  }


  public ApplyYaraRule yaraCommand(String yaraCommand) {
    this.yaraCommand = yaraCommand;
    return this;
  }

  /**
   * Yara command executed
   * @return yaraCommand
   */
  @javax.annotation.Nonnull
  public String getYaraCommand() {
    return yaraCommand;
  }

  public void setYaraCommand(String yaraCommand) {
    this.yaraCommand = yaraCommand;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplyYaraRule applyYaraRule = (ApplyYaraRule) o;
    return Objects.equals(this.errorMessage, applyYaraRule.errorMessage) &&
        Objects.equals(this.isSuccess, applyYaraRule.isSuccess) &&
        Objects.equals(this.matchedYaraRules, applyYaraRule.matchedYaraRules) &&
        Objects.equals(this.yaraCommand, applyYaraRule.yaraCommand);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMessage, isSuccess, matchedYaraRules, yaraCommand);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplyYaraRule {\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    isSuccess: ").append(toIndentedString(isSuccess)).append("\n");
    sb.append("    matchedYaraRules: ").append(toIndentedString(matchedYaraRules)).append("\n");
    sb.append("    yaraCommand: ").append(toIndentedString(yaraCommand)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error_message");
    openapiFields.add("is_success");
    openapiFields.add("matched_yara_rules");
    openapiFields.add("yara_command");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is_success");
    openapiRequiredFields.add("yara_command");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplyYaraRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplyYaraRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplyYaraRule is not found in the empty JSON string", ApplyYaraRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplyYaraRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplyYaraRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplyYaraRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error_message") != null && !jsonObj.get("error_message").isJsonNull()) && !jsonObj.get("error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_message").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("matched_yara_rules") != null && !jsonObj.get("matched_yara_rules").isJsonNull() && !jsonObj.get("matched_yara_rules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `matched_yara_rules` to be an array in the JSON string but got `%s`", jsonObj.get("matched_yara_rules").toString()));
      }
      if (!jsonObj.get("yara_command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yara_command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yara_command").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplyYaraRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplyYaraRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplyYaraRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplyYaraRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplyYaraRule>() {
           @Override
           public void write(JsonWriter out, ApplyYaraRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplyYaraRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplyYaraRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplyYaraRule
   * @throws IOException if the JSON string is invalid with respect to ApplyYaraRule
   */
  public static ApplyYaraRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplyYaraRule.class);
  }

  /**
   * Convert an instance of ApplyYaraRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

