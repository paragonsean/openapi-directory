/*
 * RESTful4Up
 * RESTful API 4 Unipacker
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplyYaraRules200Response;
import org.openapitools.client.model.EmulationOutput200Response;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.GeneratePartialYaraRule200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applyYaraRules
     * @param _file file (required)
     * @param rules  (required)
     * @param isUnpackingRequired  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yara rules </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyYaraRulesCall(File _file, List<String> rules, String isUnpackingRequired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apply-yara-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (isUnpackingRequired != null) {
            localVarFormParams.put("is_unpacking_required", isUnpackingRequired);
        }

        if (rules != null) {
            localVarFormParams.put("rules", rules);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyYaraRulesValidateBeforeCall(File _file, List<String> rules, String isUnpackingRequired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling applyYaraRules(Async)");
        }

        // verify the required parameter 'rules' is set
        if (rules == null) {
            throw new ApiException("Missing the required parameter 'rules' when calling applyYaraRules(Async)");
        }

        return applyYaraRulesCall(_file, rules, isUnpackingRequired, _callback);

    }

    /**
     * 
     * apply given YARA rules to the given executable. (upto 10 rules)
     * @param _file file (required)
     * @param rules  (required)
     * @param isUnpackingRequired  (optional)
     * @return ApplyYaraRules200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yara rules </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public ApplyYaraRules200Response applyYaraRules(File _file, List<String> rules, String isUnpackingRequired) throws ApiException {
        ApiResponse<ApplyYaraRules200Response> localVarResp = applyYaraRulesWithHttpInfo(_file, rules, isUnpackingRequired);
        return localVarResp.getData();
    }

    /**
     * 
     * apply given YARA rules to the given executable. (upto 10 rules)
     * @param _file file (required)
     * @param rules  (required)
     * @param isUnpackingRequired  (optional)
     * @return ApiResponse&lt;ApplyYaraRules200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yara rules </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplyYaraRules200Response> applyYaraRulesWithHttpInfo(File _file, List<String> rules, String isUnpackingRequired) throws ApiException {
        okhttp3.Call localVarCall = applyYaraRulesValidateBeforeCall(_file, rules, isUnpackingRequired, null);
        Type localVarReturnType = new TypeToken<ApplyYaraRules200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * apply given YARA rules to the given executable. (upto 10 rules)
     * @param _file file (required)
     * @param rules  (required)
     * @param isUnpackingRequired  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yara rules </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyYaraRulesAsync(File _file, List<String> rules, String isUnpackingRequired, final ApiCallback<ApplyYaraRules200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyYaraRulesValidateBeforeCall(_file, rules, isUnpackingRequired, _callback);
        Type localVarReturnType = new TypeToken<ApplyYaraRules200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clean
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cleanCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clean";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cleanValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cleanCall(_callback);

    }

    /**
     * 
     * clean up the uploaded files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public void clean() throws ApiException {
        cleanWithHttpInfo();
    }

    /**
     * 
     * clean up the uploaded files
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cleanWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cleanValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * clean up the uploaded files
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cleanAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cleanValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for emulationOutput
     * @param _file file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> emulation output after unpacking the file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emulationOutputCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emulation-output";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emulationOutputValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling emulationOutput(Async)");
        }

        return emulationOutputCall(_file, _callback);

    }

    /**
     * 
     * try to get the emulation output after unpacking the file
     * @param _file file (required)
     * @return EmulationOutput200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> emulation output after unpacking the file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public EmulationOutput200Response emulationOutput(File _file) throws ApiException {
        ApiResponse<EmulationOutput200Response> localVarResp = emulationOutputWithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * 
     * try to get the emulation output after unpacking the file
     * @param _file file (required)
     * @return ApiResponse&lt;EmulationOutput200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> emulation output after unpacking the file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmulationOutput200Response> emulationOutputWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = emulationOutputValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<EmulationOutput200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * try to get the emulation output after unpacking the file
     * @param _file file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> emulation output after unpacking the file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emulationOutputAsync(File _file, final ApiCallback<EmulationOutput200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = emulationOutputValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<EmulationOutput200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generatePartialYaraRule
     * @param _file file (required)
     * @param isUnpackingRequired  (optional)
     * @param minimumStringLength  (optional)
     * @param stringsToIgnore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yara rules </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generatePartialYaraRuleCall(File _file, String isUnpackingRequired, String minimumStringLength, List<String> stringsToIgnore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/generate-partial-yara-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (isUnpackingRequired != null) {
            localVarFormParams.put("is_unpacking_required", isUnpackingRequired);
        }

        if (minimumStringLength != null) {
            localVarFormParams.put("minimum_string_length", minimumStringLength);
        }

        if (stringsToIgnore != null) {
            localVarFormParams.put("strings_to_ignore", stringsToIgnore);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePartialYaraRuleValidateBeforeCall(File _file, String isUnpackingRequired, String minimumStringLength, List<String> stringsToIgnore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling generatePartialYaraRule(Async)");
        }

        return generatePartialYaraRuleCall(_file, isUnpackingRequired, minimumStringLength, stringsToIgnore, _callback);

    }

    /**
     * 
     * generate partial YARA rules for give executable. (Rule without the condition section)
     * @param _file file (required)
     * @param isUnpackingRequired  (optional)
     * @param minimumStringLength  (optional)
     * @param stringsToIgnore  (optional)
     * @return GeneratePartialYaraRule200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yara rules </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePartialYaraRule200Response generatePartialYaraRule(File _file, String isUnpackingRequired, String minimumStringLength, List<String> stringsToIgnore) throws ApiException {
        ApiResponse<GeneratePartialYaraRule200Response> localVarResp = generatePartialYaraRuleWithHttpInfo(_file, isUnpackingRequired, minimumStringLength, stringsToIgnore);
        return localVarResp.getData();
    }

    /**
     * 
     * generate partial YARA rules for give executable. (Rule without the condition section)
     * @param _file file (required)
     * @param isUnpackingRequired  (optional)
     * @param minimumStringLength  (optional)
     * @param stringsToIgnore  (optional)
     * @return ApiResponse&lt;GeneratePartialYaraRule200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yara rules </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneratePartialYaraRule200Response> generatePartialYaraRuleWithHttpInfo(File _file, String isUnpackingRequired, String minimumStringLength, List<String> stringsToIgnore) throws ApiException {
        okhttp3.Call localVarCall = generatePartialYaraRuleValidateBeforeCall(_file, isUnpackingRequired, minimumStringLength, stringsToIgnore, null);
        Type localVarReturnType = new TypeToken<GeneratePartialYaraRule200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * generate partial YARA rules for give executable. (Rule without the condition section)
     * @param _file file (required)
     * @param isUnpackingRequired  (optional)
     * @param minimumStringLength  (optional)
     * @param stringsToIgnore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yara rules </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generatePartialYaraRuleAsync(File _file, String isUnpackingRequired, String minimumStringLength, List<String> stringsToIgnore, final ApiCallback<GeneratePartialYaraRule200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePartialYaraRuleValidateBeforeCall(_file, isUnpackingRequired, minimumStringLength, stringsToIgnore, _callback);
        Type localVarReturnType = new TypeToken<GeneratePartialYaraRule200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpack
     * @param _file file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpackCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unpack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpackValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling unpack(Async)");
        }

        return unpackCall(_file, _callback);

    }

    /**
     * 
     * try to unpack the given file
     * @param _file file (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public File unpack(File _file) throws ApiException {
        ApiResponse<File> localVarResp = unpackWithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * 
     * try to unpack the given file
     * @param _file file (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> unpackWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = unpackValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * try to unpack the given file
     * @param _file file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> request error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpackAsync(File _file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpackValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
