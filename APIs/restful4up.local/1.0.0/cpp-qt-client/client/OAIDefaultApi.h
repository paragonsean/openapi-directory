/**
 * RESTful4Up
 * RESTful API 4 Unipacker
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplyYaraRules_200_response.h"
#include "OAIEmulationOutput_200_response.h"
#include "OAIError.h"
#include "OAIGeneratePartialYaraRule_200_response.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  rules QList<QString> [required]
    * @param[in]  is_unpacking_required QString [optional]
    */
    virtual void applyYaraRules(const OAIHttpFileElement &file, const QList<QString> &rules, const ::OpenAPI::OptionalParam<QString> &is_unpacking_required = ::OpenAPI::OptionalParam<QString>());


    virtual void clean();

    /**
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void emulationOutput(const OAIHttpFileElement &file);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  is_unpacking_required QString [optional]
    * @param[in]  minimum_string_length QString [optional]
    * @param[in]  strings_to_ignore QList<QString> [optional]
    */
    virtual void generatePartialYaraRule(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &is_unpacking_required = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &minimum_string_length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &strings_to_ignore = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void unpack(const OAIHttpFileElement &file);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applyYaraRulesCallback(OAIHttpRequestWorker *worker);
    void cleanCallback(OAIHttpRequestWorker *worker);
    void emulationOutputCallback(OAIHttpRequestWorker *worker);
    void generatePartialYaraRuleCallback(OAIHttpRequestWorker *worker);
    void unpackCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applyYaraRulesSignal(OAIApplyYaraRules_200_response summary);
    void cleanSignal();
    void emulationOutputSignal(OAIEmulationOutput_200_response summary);
    void generatePartialYaraRuleSignal(OAIGeneratePartialYaraRule_200_response summary);
    void unpackSignal(OAIHttpFileElement summary);


    void applyYaraRulesSignalFull(OAIHttpRequestWorker *worker, OAIApplyYaraRules_200_response summary);
    void cleanSignalFull(OAIHttpRequestWorker *worker);
    void emulationOutputSignalFull(OAIHttpRequestWorker *worker, OAIEmulationOutput_200_response summary);
    void generatePartialYaraRuleSignalFull(OAIHttpRequestWorker *worker, OAIGeneratePartialYaraRule_200_response summary);
    void unpackSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use applyYaraRulesSignalError() instead")
    void applyYaraRulesSignalE(OAIApplyYaraRules_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applyYaraRulesSignalError(OAIApplyYaraRules_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cleanSignalError() instead")
    void cleanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cleanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emulationOutputSignalError() instead")
    void emulationOutputSignalE(OAIEmulationOutput_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emulationOutputSignalError(OAIEmulationOutput_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePartialYaraRuleSignalError() instead")
    void generatePartialYaraRuleSignalE(OAIGeneratePartialYaraRule_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePartialYaraRuleSignalError(OAIGeneratePartialYaraRule_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpackSignalError() instead")
    void unpackSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unpackSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applyYaraRulesSignalErrorFull() instead")
    void applyYaraRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applyYaraRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cleanSignalErrorFull() instead")
    void cleanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cleanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emulationOutputSignalErrorFull() instead")
    void emulationOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emulationOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePartialYaraRuleSignalErrorFull() instead")
    void generatePartialYaraRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePartialYaraRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpackSignalErrorFull() instead")
    void unpackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unpackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
