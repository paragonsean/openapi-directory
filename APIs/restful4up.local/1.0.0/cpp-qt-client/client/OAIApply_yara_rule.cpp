/**
 * RESTful4Up
 * RESTful API 4 Unipacker
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApply_yara_rule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApply_yara_rule::OAIApply_yara_rule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApply_yara_rule::OAIApply_yara_rule() {
    this->initializeModel();
}

OAIApply_yara_rule::~OAIApply_yara_rule() {}

void OAIApply_yara_rule::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_is_success_isSet = false;
    m_is_success_isValid = false;

    m_matched_yara_rules_isSet = false;
    m_matched_yara_rules_isValid = false;

    m_yara_command_isSet = false;
    m_yara_command_isValid = false;
}

void OAIApply_yara_rule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApply_yara_rule::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_is_success_isValid = ::OpenAPI::fromJsonValue(m_is_success, json[QString("is_success")]);
    m_is_success_isSet = !json[QString("is_success")].isNull() && m_is_success_isValid;

    if(json["matched_yara_rules"].isArray()){
        auto arr = json["matched_yara_rules"].toArray();
        m_matched_yara_rules_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIApply_yara_rule_matched_yara_rules_inner_inner> item;
                m_matched_yara_rules_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_matched_yara_rules_isSet = !jval.isNull() && m_matched_yara_rules_isValid;
                m_matched_yara_rules.push_back(item);
            }
        }
    }

    m_yara_command_isValid = ::OpenAPI::fromJsonValue(m_yara_command, json[QString("yara_command")]);
    m_yara_command_isSet = !json[QString("yara_command")].isNull() && m_yara_command_isValid;
}

QString OAIApply_yara_rule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApply_yara_rule::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_is_success_isSet) {
        obj.insert(QString("is_success"), ::OpenAPI::toJsonValue(m_is_success));
    }
    if (m_matched_yara_rules.size() > 0) {
        
        obj.insert(QString("matched_yara_rules"), toJsonValue(m_matched_yara_rules));
    }
    if (m_yara_command_isSet) {
        obj.insert(QString("yara_command"), ::OpenAPI::toJsonValue(m_yara_command));
    }
    return obj;
}

QString OAIApply_yara_rule::getErrorMessage() const {
    return m_error_message;
}
void OAIApply_yara_rule::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIApply_yara_rule::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIApply_yara_rule::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIApply_yara_rule::isIsSuccess() const {
    return m_is_success;
}
void OAIApply_yara_rule::setIsSuccess(const bool &is_success) {
    m_is_success = is_success;
    m_is_success_isSet = true;
}

bool OAIApply_yara_rule::is_is_success_Set() const{
    return m_is_success_isSet;
}

bool OAIApply_yara_rule::is_is_success_Valid() const{
    return m_is_success_isValid;
}

QList<QList<OAIApply_yara_rule_matched_yara_rules_inner_inner>> OAIApply_yara_rule::getMatchedYaraRules() const {
    return m_matched_yara_rules;
}
void OAIApply_yara_rule::setMatchedYaraRules(const QList<QList<OAIApply_yara_rule_matched_yara_rules_inner_inner>> &matched_yara_rules) {
    m_matched_yara_rules = matched_yara_rules;
    m_matched_yara_rules_isSet = true;
}

bool OAIApply_yara_rule::is_matched_yara_rules_Set() const{
    return m_matched_yara_rules_isSet;
}

bool OAIApply_yara_rule::is_matched_yara_rules_Valid() const{
    return m_matched_yara_rules_isValid;
}

QString OAIApply_yara_rule::getYaraCommand() const {
    return m_yara_command;
}
void OAIApply_yara_rule::setYaraCommand(const QString &yara_command) {
    m_yara_command = yara_command;
    m_yara_command_isSet = true;
}

bool OAIApply_yara_rule::is_yara_command_Set() const{
    return m_yara_command_isSet;
}

bool OAIApply_yara_rule::is_yara_command_Valid() const{
    return m_yara_command_isValid;
}

bool OAIApply_yara_rule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_yara_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_yara_command_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApply_yara_rule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_success_isValid && m_yara_command_isValid && true;
}

} // namespace OpenAPI
