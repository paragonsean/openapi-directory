/**
 * RESTful4Up
 * RESTful API 4 Unipacker
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYara.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYara::OAIYara(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYara::OAIYara() {
    this->initializeModel();
}

OAIYara::~OAIYara() {}

void OAIYara::initializeModel() {

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_strings_isSet = false;
    m_strings_isValid = false;
}

void OAIYara::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYara::fromJsonObject(QJsonObject json) {

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    if(json["strings"].isArray()){
        auto arr = json["strings"].toArray();
        m_strings_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_strings_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_strings_isSet = !jval.isNull() && m_strings_isValid;
                m_strings.push_back(item);
            }
        }
    }
}

QString OAIYara::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYara::asJsonObject() const {
    QJsonObject obj;
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_strings.size() > 0) {
        
        obj.insert(QString("strings"), toJsonValue(m_strings));
    }
    return obj;
}

OAIYara_meta OAIYara::getMeta() const {
    return m_meta;
}
void OAIYara::setMeta(const OAIYara_meta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIYara::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIYara::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIYara::getName() const {
    return m_name;
}
void OAIYara::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIYara::is_name_Set() const{
    return m_name_isSet;
}

bool OAIYara::is_name_Valid() const{
    return m_name_isValid;
}

QList<QList<QString>> OAIYara::getStrings() const {
    return m_strings;
}
void OAIYara::setStrings(const QList<QList<QString>> &strings) {
    m_strings = strings;
    m_strings_isSet = true;
}

bool OAIYara::is_strings_Set() const{
    return m_strings_isSet;
}

bool OAIYara::is_strings_Valid() const{
    return m_strings_isValid;
}

bool OAIYara::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYara::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_meta_isValid && m_name_isValid && m_strings_isValid && true;
}

} // namespace OpenAPI
