/**
 * RESTful4Up
 * RESTful API 4 Unipacker
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApply_yara_rule_matched_yara_rules_inner_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApply_yara_rule_matched_yara_rules_inner_inner::OAIApply_yara_rule_matched_yara_rules_inner_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApply_yara_rule_matched_yara_rules_inner_inner::OAIApply_yara_rule_matched_yara_rules_inner_inner() {
    this->initializeModel();
}

OAIApply_yara_rule_matched_yara_rules_inner_inner::~OAIApply_yara_rule_matched_yara_rules_inner_inner() {}

void OAIApply_yara_rule_matched_yara_rules_inner_inner::initializeModel() {

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_string_information_isSet = false;
    m_string_information_isValid = false;
}

void OAIApply_yara_rule_matched_yara_rules_inner_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApply_yara_rule_matched_yara_rules_inner_inner::fromJsonObject(QJsonObject json) {

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_string_information_isValid = ::OpenAPI::fromJsonValue(m_string_information, json[QString("string_information")]);
    m_string_information_isSet = !json[QString("string_information")].isNull() && m_string_information_isValid;
}

QString OAIApply_yara_rule_matched_yara_rules_inner_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApply_yara_rule_matched_yara_rules_inner_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_string_information.size() > 0) {
        obj.insert(QString("string_information"), ::OpenAPI::toJsonValue(m_string_information));
    }
    return obj;
}

QString OAIApply_yara_rule_matched_yara_rules_inner_inner::getRule() const {
    return m_rule;
}
void OAIApply_yara_rule_matched_yara_rules_inner_inner::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIApply_yara_rule_matched_yara_rules_inner_inner::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIApply_yara_rule_matched_yara_rules_inner_inner::is_rule_Valid() const{
    return m_rule_isValid;
}

QList<QString> OAIApply_yara_rule_matched_yara_rules_inner_inner::getStringInformation() const {
    return m_string_information;
}
void OAIApply_yara_rule_matched_yara_rules_inner_inner::setStringInformation(const QList<QString> &string_information) {
    m_string_information = string_information;
    m_string_information_isSet = true;
}

bool OAIApply_yara_rule_matched_yara_rules_inner_inner::is_string_information_Set() const{
    return m_string_information_isSet;
}

bool OAIApply_yara_rule_matched_yara_rules_inner_inner::is_string_information_Valid() const{
    return m_string_information_isValid;
}

bool OAIApply_yara_rule_matched_yara_rules_inner_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApply_yara_rule_matched_yara_rules_inner_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_isValid && m_string_information_isValid && true;
}

} // namespace OpenAPI
