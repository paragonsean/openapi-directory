/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInternalApi_H
#define OAI_OAIInternalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFeedback.h"
#include "OAISeldonMessage.h"
#include "OAISeldonMessageList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInternalApi : public QObject {
    Q_OBJECT

public:
    OAIInternalApi(const int timeOut = 0);
    ~OAIInternalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAISeldonMessageList [required]
    */
    virtual void aggregate(const OAISeldonMessageList &body);

    /**
    * @param[in]  json OAISeldonMessageList [optional]
    */
    virtual void aggregate2(const ::OpenAPI::OptionalParam<OAISeldonMessageList> &json = ::OpenAPI::OptionalParam<OAISeldonMessageList>());

    /**
    * @param[in]  json OAISeldonMessage [optional]
    */
    virtual void route(const ::OpenAPI::OptionalParam<OAISeldonMessage> &json = ::OpenAPI::OptionalParam<OAISeldonMessage>());

    /**
    * @param[in]  json OAISeldonMessage [required]
    */
    virtual void route2(const OAISeldonMessage &json);

    /**
    * @param[in]  json OAIFeedback [optional]
    */
    virtual void sendFeedback(const ::OpenAPI::OptionalParam<OAIFeedback> &json = ::OpenAPI::OptionalParam<OAIFeedback>());

    /**
    * @param[in]  json OAIFeedback [required]
    */
    virtual void sendFeedback2(const OAIFeedback &json);

    /**
    * @param[in]  json OAISeldonMessage [optional]
    */
    virtual void transformInput(const ::OpenAPI::OptionalParam<OAISeldonMessage> &json = ::OpenAPI::OptionalParam<OAISeldonMessage>());

    /**
    * @param[in]  json OAISeldonMessage [required]
    */
    virtual void transformInput2(const OAISeldonMessage &json);

    /**
    * @param[in]  json OAISeldonMessage [optional]
    */
    virtual void transformInput3(const ::OpenAPI::OptionalParam<OAISeldonMessage> &json = ::OpenAPI::OptionalParam<OAISeldonMessage>());

    /**
    * @param[in]  json OAISeldonMessage [required]
    */
    virtual void transformInput4(const OAISeldonMessage &json);

    /**
    * @param[in]  json OAISeldonMessage [optional]
    */
    virtual void transformOutput(const ::OpenAPI::OptionalParam<OAISeldonMessage> &json = ::OpenAPI::OptionalParam<OAISeldonMessage>());

    /**
    * @param[in]  json OAISeldonMessage [required]
    */
    virtual void transformOutput2(const OAISeldonMessage &json);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aggregateCallback(OAIHttpRequestWorker *worker);
    void aggregate2Callback(OAIHttpRequestWorker *worker);
    void routeCallback(OAIHttpRequestWorker *worker);
    void route2Callback(OAIHttpRequestWorker *worker);
    void sendFeedbackCallback(OAIHttpRequestWorker *worker);
    void sendFeedback2Callback(OAIHttpRequestWorker *worker);
    void transformInputCallback(OAIHttpRequestWorker *worker);
    void transformInput2Callback(OAIHttpRequestWorker *worker);
    void transformInput3Callback(OAIHttpRequestWorker *worker);
    void transformInput4Callback(OAIHttpRequestWorker *worker);
    void transformOutputCallback(OAIHttpRequestWorker *worker);
    void transformOutput2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aggregateSignal(OAISeldonMessage summary);
    void aggregate2Signal(OAISeldonMessage summary);
    void routeSignal(OAISeldonMessage summary);
    void route2Signal(OAISeldonMessage summary);
    void sendFeedbackSignal(OAISeldonMessage summary);
    void sendFeedback2Signal(OAISeldonMessage summary);
    void transformInputSignal(OAISeldonMessage summary);
    void transformInput2Signal(OAISeldonMessage summary);
    void transformInput3Signal(OAISeldonMessage summary);
    void transformInput4Signal(OAISeldonMessage summary);
    void transformOutputSignal(OAISeldonMessage summary);
    void transformOutput2Signal(OAISeldonMessage summary);


    void aggregateSignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void aggregate2SignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void routeSignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void route2SignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void sendFeedbackSignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void sendFeedback2SignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void transformInputSignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void transformInput2SignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void transformInput3SignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void transformInput4SignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void transformOutputSignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);
    void transformOutput2SignalFull(OAIHttpRequestWorker *worker, OAISeldonMessage summary);

    Q_DECL_DEPRECATED_X("Use aggregateSignalError() instead")
    void aggregateSignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateSignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregate2SignalError() instead")
    void aggregate2SignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregate2SignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeSignalError() instead")
    void routeSignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeSignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use route2SignalError() instead")
    void route2SignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void route2SignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFeedbackSignalError() instead")
    void sendFeedbackSignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFeedbackSignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFeedback2SignalError() instead")
    void sendFeedback2SignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFeedback2SignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformInputSignalError() instead")
    void transformInputSignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformInputSignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformInput2SignalError() instead")
    void transformInput2SignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformInput2SignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformInput3SignalError() instead")
    void transformInput3SignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformInput3SignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformInput4SignalError() instead")
    void transformInput4SignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformInput4SignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformOutputSignalError() instead")
    void transformOutputSignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformOutputSignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformOutput2SignalError() instead")
    void transformOutput2SignalE(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformOutput2SignalError(OAISeldonMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aggregateSignalErrorFull() instead")
    void aggregateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregate2SignalErrorFull() instead")
    void aggregate2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregate2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeSignalErrorFull() instead")
    void routeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use route2SignalErrorFull() instead")
    void route2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void route2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFeedbackSignalErrorFull() instead")
    void sendFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFeedback2SignalErrorFull() instead")
    void sendFeedback2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFeedback2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformInputSignalErrorFull() instead")
    void transformInputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformInputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformInput2SignalErrorFull() instead")
    void transformInput2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformInput2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformInput3SignalErrorFull() instead")
    void transformInput3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformInput3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformInput4SignalErrorFull() instead")
    void transformInput4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformInput4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformOutputSignalErrorFull() instead")
    void transformOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformOutput2SignalErrorFull() instead")
    void transformOutput2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformOutput2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
