/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultData::OAIDefaultData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultData::OAIDefaultData() {
    this->initializeModel();
}

OAIDefaultData::~OAIDefaultData() {}

void OAIDefaultData::initializeModel() {

    m_names_isSet = false;
    m_names_isValid = false;

    m_ndarry_isSet = false;
    m_ndarry_isValid = false;

    m_tensor_isSet = false;
    m_tensor_isValid = false;

    m_tftensor_isSet = false;
    m_tftensor_isValid = false;
}

void OAIDefaultData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultData::fromJsonObject(QJsonObject json) {

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_ndarry_isValid = ::OpenAPI::fromJsonValue(m_ndarry, json[QString("ndarry")]);
    m_ndarry_isSet = !json[QString("ndarry")].isNull() && m_ndarry_isValid;

    m_tensor_isValid = ::OpenAPI::fromJsonValue(m_tensor, json[QString("tensor")]);
    m_tensor_isSet = !json[QString("tensor")].isNull() && m_tensor_isValid;

    m_tftensor_isValid = ::OpenAPI::fromJsonValue(m_tftensor, json[QString("tftensor")]);
    m_tftensor_isSet = !json[QString("tftensor")].isNull() && m_tftensor_isValid;
}

QString OAIDefaultData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultData::asJsonObject() const {
    QJsonObject obj;
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_ndarry.size() > 0) {
        obj.insert(QString("ndarry"), ::OpenAPI::toJsonValue(m_ndarry));
    }
    if (m_tensor.isSet()) {
        obj.insert(QString("tensor"), ::OpenAPI::toJsonValue(m_tensor));
    }
    if (m_tftensor.isSet()) {
        obj.insert(QString("tftensor"), ::OpenAPI::toJsonValue(m_tftensor));
    }
    return obj;
}

QList<QString> OAIDefaultData::getNames() const {
    return m_names;
}
void OAIDefaultData::setNames(const QList<QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIDefaultData::is_names_Set() const{
    return m_names_isSet;
}

bool OAIDefaultData::is_names_Valid() const{
    return m_names_isValid;
}

QList<QJsonValue> OAIDefaultData::getNdarry() const {
    return m_ndarry;
}
void OAIDefaultData::setNdarry(const QList<QJsonValue> &ndarry) {
    m_ndarry = ndarry;
    m_ndarry_isSet = true;
}

bool OAIDefaultData::is_ndarry_Set() const{
    return m_ndarry_isSet;
}

bool OAIDefaultData::is_ndarry_Valid() const{
    return m_ndarry_isValid;
}

OAITensor OAIDefaultData::getTensor() const {
    return m_tensor;
}
void OAIDefaultData::setTensor(const OAITensor &tensor) {
    m_tensor = tensor;
    m_tensor_isSet = true;
}

bool OAIDefaultData::is_tensor_Set() const{
    return m_tensor_isSet;
}

bool OAIDefaultData::is_tensor_Valid() const{
    return m_tensor_isValid;
}

OAITensorflowTensorProto OAIDefaultData::getTftensor() const {
    return m_tftensor;
}
void OAIDefaultData::setTftensor(const OAITensorflowTensorProto &tftensor) {
    m_tftensor = tftensor;
    m_tftensor_isSet = true;
}

bool OAIDefaultData::is_tftensor_Set() const{
    return m_tftensor_isSet;
}

bool OAIDefaultData::is_tftensor_Valid() const{
    return m_tftensor_isValid;
}

bool OAIDefaultData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ndarry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tftensor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
