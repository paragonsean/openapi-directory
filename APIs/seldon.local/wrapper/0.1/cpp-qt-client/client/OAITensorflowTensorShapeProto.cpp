/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITensorflowTensorShapeProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITensorflowTensorShapeProto::OAITensorflowTensorShapeProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITensorflowTensorShapeProto::OAITensorflowTensorShapeProto() {
    this->initializeModel();
}

OAITensorflowTensorShapeProto::~OAITensorflowTensorShapeProto() {}

void OAITensorflowTensorShapeProto::initializeModel() {

    m_dim_isSet = false;
    m_dim_isValid = false;

    m_unknown_rank_isSet = false;
    m_unknown_rank_isValid = false;
}

void OAITensorflowTensorShapeProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITensorflowTensorShapeProto::fromJsonObject(QJsonObject json) {

    m_dim_isValid = ::OpenAPI::fromJsonValue(m_dim, json[QString("dim")]);
    m_dim_isSet = !json[QString("dim")].isNull() && m_dim_isValid;

    m_unknown_rank_isValid = ::OpenAPI::fromJsonValue(m_unknown_rank, json[QString("unknown_rank")]);
    m_unknown_rank_isSet = !json[QString("unknown_rank")].isNull() && m_unknown_rank_isValid;
}

QString OAITensorflowTensorShapeProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITensorflowTensorShapeProto::asJsonObject() const {
    QJsonObject obj;
    if (m_dim.size() > 0) {
        obj.insert(QString("dim"), ::OpenAPI::toJsonValue(m_dim));
    }
    if (m_unknown_rank_isSet) {
        obj.insert(QString("unknown_rank"), ::OpenAPI::toJsonValue(m_unknown_rank));
    }
    return obj;
}

QList<OAITensorShapeProtoDim> OAITensorflowTensorShapeProto::getDim() const {
    return m_dim;
}
void OAITensorflowTensorShapeProto::setDim(const QList<OAITensorShapeProtoDim> &dim) {
    m_dim = dim;
    m_dim_isSet = true;
}

bool OAITensorflowTensorShapeProto::is_dim_Set() const{
    return m_dim_isSet;
}

bool OAITensorflowTensorShapeProto::is_dim_Valid() const{
    return m_dim_isValid;
}

bool OAITensorflowTensorShapeProto::isUnknownRank() const {
    return m_unknown_rank;
}
void OAITensorflowTensorShapeProto::setUnknownRank(const bool &unknown_rank) {
    m_unknown_rank = unknown_rank;
    m_unknown_rank_isSet = true;
}

bool OAITensorflowTensorShapeProto::is_unknown_rank_Set() const{
    return m_unknown_rank_isSet;
}

bool OAITensorflowTensorShapeProto::is_unknown_rank_Valid() const{
    return m_unknown_rank_isValid;
}

bool OAITensorflowTensorShapeProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dim.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_rank_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITensorflowTensorShapeProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
