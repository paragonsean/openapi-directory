/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITensorflowVariantTensorDataProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITensorflowVariantTensorDataProto::OAITensorflowVariantTensorDataProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITensorflowVariantTensorDataProto::OAITensorflowVariantTensorDataProto() {
    this->initializeModel();
}

OAITensorflowVariantTensorDataProto::~OAITensorflowVariantTensorDataProto() {}

void OAITensorflowVariantTensorDataProto::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_tensors_isSet = false;
    m_tensors_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;
}

void OAITensorflowVariantTensorDataProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITensorflowVariantTensorDataProto::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_tensors_isValid = ::OpenAPI::fromJsonValue(m_tensors, json[QString("tensors")]);
    m_tensors_isSet = !json[QString("tensors")].isNull() && m_tensors_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("type_name")]);
    m_type_name_isSet = !json[QString("type_name")].isNull() && m_type_name_isValid;
}

QString OAITensorflowVariantTensorDataProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITensorflowVariantTensorDataProto::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_tensors.size() > 0) {
        obj.insert(QString("tensors"), ::OpenAPI::toJsonValue(m_tensors));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("type_name"), ::OpenAPI::toJsonValue(m_type_name));
    }
    return obj;
}

QByteArray OAITensorflowVariantTensorDataProto::getMetadata() const {
    return m_metadata;
}
void OAITensorflowVariantTensorDataProto::setMetadata(const QByteArray &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAITensorflowVariantTensorDataProto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAITensorflowVariantTensorDataProto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAITensorflowTensorProto> OAITensorflowVariantTensorDataProto::getTensors() const {
    return m_tensors;
}
void OAITensorflowVariantTensorDataProto::setTensors(const QList<OAITensorflowTensorProto> &tensors) {
    m_tensors = tensors;
    m_tensors_isSet = true;
}

bool OAITensorflowVariantTensorDataProto::is_tensors_Set() const{
    return m_tensors_isSet;
}

bool OAITensorflowVariantTensorDataProto::is_tensors_Valid() const{
    return m_tensors_isValid;
}

QString OAITensorflowVariantTensorDataProto::getTypeName() const {
    return m_type_name;
}
void OAITensorflowVariantTensorDataProto::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAITensorflowVariantTensorDataProto::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAITensorflowVariantTensorDataProto::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAITensorflowVariantTensorDataProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITensorflowVariantTensorDataProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
