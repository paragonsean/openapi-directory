/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedback.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedback::OAIFeedback(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedback::OAIFeedback() {
    this->initializeModel();
}

OAIFeedback::~OAIFeedback() {}

void OAIFeedback::initializeModel() {

    m_request_isSet = false;
    m_request_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_reward_isSet = false;
    m_reward_isValid = false;

    m_truth_isSet = false;
    m_truth_isValid = false;
}

void OAIFeedback::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedback::fromJsonObject(QJsonObject json) {

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_reward_isValid = ::OpenAPI::fromJsonValue(m_reward, json[QString("reward")]);
    m_reward_isSet = !json[QString("reward")].isNull() && m_reward_isValid;

    m_truth_isValid = ::OpenAPI::fromJsonValue(m_truth, json[QString("truth")]);
    m_truth_isSet = !json[QString("truth")].isNull() && m_truth_isValid;
}

QString OAIFeedback::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedback::asJsonObject() const {
    QJsonObject obj;
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_reward_isSet) {
        obj.insert(QString("reward"), ::OpenAPI::toJsonValue(m_reward));
    }
    if (m_truth.isSet()) {
        obj.insert(QString("truth"), ::OpenAPI::toJsonValue(m_truth));
    }
    return obj;
}

OAISeldonMessage OAIFeedback::getRequest() const {
    return m_request;
}
void OAIFeedback::setRequest(const OAISeldonMessage &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIFeedback::is_request_Set() const{
    return m_request_isSet;
}

bool OAIFeedback::is_request_Valid() const{
    return m_request_isValid;
}

OAISeldonMessage OAIFeedback::getResponse() const {
    return m_response;
}
void OAIFeedback::setResponse(const OAISeldonMessage &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIFeedback::is_response_Set() const{
    return m_response_isSet;
}

bool OAIFeedback::is_response_Valid() const{
    return m_response_isValid;
}

float OAIFeedback::getReward() const {
    return m_reward;
}
void OAIFeedback::setReward(const float &reward) {
    m_reward = reward;
    m_reward_isSet = true;
}

bool OAIFeedback::is_reward_Set() const{
    return m_reward_isSet;
}

bool OAIFeedback::is_reward_Valid() const{
    return m_reward_isValid;
}

OAISeldonMessage OAIFeedback::getTruth() const {
    return m_truth;
}
void OAIFeedback::setTruth(const OAISeldonMessage &truth) {
    m_truth = truth;
    m_truth_isSet = true;
}

bool OAIFeedback::is_truth_Set() const{
    return m_truth_isSet;
}

bool OAIFeedback::is_truth_Valid() const{
    return m_truth_isValid;
}

bool OAIFeedback::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truth.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedback::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
