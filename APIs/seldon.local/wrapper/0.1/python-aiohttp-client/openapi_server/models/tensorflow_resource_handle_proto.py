# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TensorflowResourceHandleProto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: str=None, device: str=None, hash_code: str=None, maybe_type_name: str=None, name: str=None):
        """TensorflowResourceHandleProto - a model defined in OpenAPI

        :param container: The container of this TensorflowResourceHandleProto.
        :param device: The device of this TensorflowResourceHandleProto.
        :param hash_code: The hash_code of this TensorflowResourceHandleProto.
        :param maybe_type_name: The maybe_type_name of this TensorflowResourceHandleProto.
        :param name: The name of this TensorflowResourceHandleProto.
        """
        self.openapi_types = {
            'container': str,
            'device': str,
            'hash_code': str,
            'maybe_type_name': str,
            'name': str
        }

        self.attribute_map = {
            'container': 'container',
            'device': 'device',
            'hash_code': 'hash_code',
            'maybe_type_name': 'maybe_type_name',
            'name': 'name'
        }

        self._container = container
        self._device = device
        self._hash_code = hash_code
        self._maybe_type_name = maybe_type_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TensorflowResourceHandleProto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TensorflowResourceHandleProto of this TensorflowResourceHandleProto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this TensorflowResourceHandleProto.

        Container in which this resource is placed.

        :return: The container of this TensorflowResourceHandleProto.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this TensorflowResourceHandleProto.

        Container in which this resource is placed.

        :param container: The container of this TensorflowResourceHandleProto.
        :type container: str
        """

        self._container = container

    @property
    def device(self):
        """Gets the device of this TensorflowResourceHandleProto.

        Unique name for the device containing the resource.

        :return: The device of this TensorflowResourceHandleProto.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this TensorflowResourceHandleProto.

        Unique name for the device containing the resource.

        :param device: The device of this TensorflowResourceHandleProto.
        :type device: str
        """

        self._device = device

    @property
    def hash_code(self):
        """Gets the hash_code of this TensorflowResourceHandleProto.

        Hash code for the type of the resource. Is only valid in the same device and in the same execution.

        :return: The hash_code of this TensorflowResourceHandleProto.
        :rtype: str
        """
        return self._hash_code

    @hash_code.setter
    def hash_code(self, hash_code):
        """Sets the hash_code of this TensorflowResourceHandleProto.

        Hash code for the type of the resource. Is only valid in the same device and in the same execution.

        :param hash_code: The hash_code of this TensorflowResourceHandleProto.
        :type hash_code: str
        """

        self._hash_code = hash_code

    @property
    def maybe_type_name(self):
        """Gets the maybe_type_name of this TensorflowResourceHandleProto.

        For debug-only, the name of the type pointed to by this handle, if available.

        :return: The maybe_type_name of this TensorflowResourceHandleProto.
        :rtype: str
        """
        return self._maybe_type_name

    @maybe_type_name.setter
    def maybe_type_name(self, maybe_type_name):
        """Sets the maybe_type_name of this TensorflowResourceHandleProto.

        For debug-only, the name of the type pointed to by this handle, if available.

        :param maybe_type_name: The maybe_type_name of this TensorflowResourceHandleProto.
        :type maybe_type_name: str
        """

        self._maybe_type_name = maybe_type_name

    @property
    def name(self):
        """Gets the name of this TensorflowResourceHandleProto.

        Unique name of this resource.

        :return: The name of this TensorflowResourceHandleProto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TensorflowResourceHandleProto.

        Unique name of this resource.

        :param name: The name of this TensorflowResourceHandleProto.
        :type name: str
        """

        self._name = name
