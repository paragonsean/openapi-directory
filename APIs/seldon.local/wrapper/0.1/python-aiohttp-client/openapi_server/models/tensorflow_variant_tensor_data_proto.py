# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tensorflow_tensor_proto import TensorflowTensorProto
from openapi_server import util


class TensorflowVariantTensorDataProto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: str=None, tensors: List[TensorflowTensorProto]=None, type_name: str=None):
        """TensorflowVariantTensorDataProto - a model defined in OpenAPI

        :param metadata: The metadata of this TensorflowVariantTensorDataProto.
        :param tensors: The tensors of this TensorflowVariantTensorDataProto.
        :param type_name: The type_name of this TensorflowVariantTensorDataProto.
        """
        self.openapi_types = {
            'metadata': str,
            'tensors': List[TensorflowTensorProto],
            'type_name': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'tensors': 'tensors',
            'type_name': 'type_name'
        }

        self._metadata = metadata
        self._tensors = tensors
        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TensorflowVariantTensorDataProto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TensorflowVariantTensorDataProto of this TensorflowVariantTensorDataProto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this TensorflowVariantTensorDataProto.

        Portions of the object that are not Tensors.

        :return: The metadata of this TensorflowVariantTensorDataProto.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TensorflowVariantTensorDataProto.

        Portions of the object that are not Tensors.

        :param metadata: The metadata of this TensorflowVariantTensorDataProto.
        :type metadata: str
        """

        self._metadata = metadata

    @property
    def tensors(self):
        """Gets the tensors of this TensorflowVariantTensorDataProto.

        Tensors contained within objects being serialized.

        :return: The tensors of this TensorflowVariantTensorDataProto.
        :rtype: List[TensorflowTensorProto]
        """
        return self._tensors

    @tensors.setter
    def tensors(self, tensors):
        """Sets the tensors of this TensorflowVariantTensorDataProto.

        Tensors contained within objects being serialized.

        :param tensors: The tensors of this TensorflowVariantTensorDataProto.
        :type tensors: List[TensorflowTensorProto]
        """

        self._tensors = tensors

    @property
    def type_name(self):
        """Gets the type_name of this TensorflowVariantTensorDataProto.

        Name of the type of objects being serialized.

        :return: The type_name of this TensorflowVariantTensorDataProto.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this TensorflowVariantTensorDataProto.

        Name of the type of objects being serialized.

        :param type_name: The type_name of this TensorflowVariantTensorDataProto.
        :type type_name: str
        """

        self._type_name = type_name
