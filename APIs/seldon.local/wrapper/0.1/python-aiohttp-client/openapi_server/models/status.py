# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_status_flag import StatusStatusFlag
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, info: str=None, reason: str=None, status: StatusStatusFlag=StatusStatusFlag.SUCCESS):
        """Status - a model defined in OpenAPI

        :param code: The code of this Status.
        :param info: The info of this Status.
        :param reason: The reason of this Status.
        :param status: The status of this Status.
        """
        self.openapi_types = {
            'code': int,
            'info': str,
            'reason': str,
            'status': StatusStatusFlag
        }

        self.attribute_map = {
            'code': 'code',
            'info': 'info',
            'reason': 'reason',
            'status': 'status'
        }

        self._code = code
        self._info = info
        self._reason = reason
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Status of this Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Status.


        :return: The code of this Status.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Status.


        :param code: The code of this Status.
        :type code: int
        """

        self._code = code

    @property
    def info(self):
        """Gets the info of this Status.


        :return: The info of this Status.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Status.


        :param info: The info of this Status.
        :type info: str
        """

        self._info = info

    @property
    def reason(self):
        """Gets the reason of this Status.


        :return: The reason of this Status.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Status.


        :param reason: The reason of this Status.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this Status.


        :return: The status of this Status.
        :rtype: StatusStatusFlag
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Status.


        :param status: The status of this Status.
        :type status: StatusStatusFlag
        """

        self._status = status
