# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tensor import Tensor
from openapi_server.models.tensorflow_tensor_proto import TensorflowTensorProto
from openapi_server import util


class DefaultData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, names: List[str]=None, ndarry: List[object]=None, tensor: Tensor=None, tftensor: TensorflowTensorProto=None):
        """DefaultData - a model defined in OpenAPI

        :param names: The names of this DefaultData.
        :param ndarry: The ndarry of this DefaultData.
        :param tensor: The tensor of this DefaultData.
        :param tftensor: The tftensor of this DefaultData.
        """
        self.openapi_types = {
            'names': List[str],
            'ndarry': List[object],
            'tensor': Tensor,
            'tftensor': TensorflowTensorProto
        }

        self.attribute_map = {
            'names': 'names',
            'ndarry': 'ndarry',
            'tensor': 'tensor',
            'tftensor': 'tftensor'
        }

        self._names = names
        self._ndarry = ndarry
        self._tensor = tensor
        self._tftensor = tftensor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefaultData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefaultData of this DefaultData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def names(self):
        """Gets the names of this DefaultData.


        :return: The names of this DefaultData.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this DefaultData.


        :param names: The names of this DefaultData.
        :type names: List[str]
        """

        self._names = names

    @property
    def ndarry(self):
        """Gets the ndarry of this DefaultData.


        :return: The ndarry of this DefaultData.
        :rtype: List[object]
        """
        return self._ndarry

    @ndarry.setter
    def ndarry(self, ndarry):
        """Sets the ndarry of this DefaultData.


        :param ndarry: The ndarry of this DefaultData.
        :type ndarry: List[object]
        """

        self._ndarry = ndarry

    @property
    def tensor(self):
        """Gets the tensor of this DefaultData.


        :return: The tensor of this DefaultData.
        :rtype: Tensor
        """
        return self._tensor

    @tensor.setter
    def tensor(self, tensor):
        """Sets the tensor of this DefaultData.


        :param tensor: The tensor of this DefaultData.
        :type tensor: Tensor
        """

        self._tensor = tensor

    @property
    def tftensor(self):
        """Gets the tftensor of this DefaultData.


        :return: The tftensor of this DefaultData.
        :rtype: TensorflowTensorProto
        """
        return self._tftensor

    @tftensor.setter
    def tftensor(self, tftensor):
        """Sets the tftensor of this DefaultData.


        :param tftensor: The tftensor of this DefaultData.
        :type tftensor: TensorflowTensorProto
        """

        self._tftensor = tftensor
