/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Feedback from '../model/Feedback';
import SeldonMessage from '../model/SeldonMessage';
import SeldonMessageList from '../model/SeldonMessageList';

/**
* Internal service.
* @module api/InternalApi
* @version 0.1
*/
export default class InternalApi {

    /**
    * Constructs a new InternalApi. 
    * @alias module:api/InternalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aggregate operation.
     * @callback module:api/InternalApi~aggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SeldonMessageList} body 
     * @param {module:api/InternalApi~aggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    aggregate(body, callback) {
      let postBody = null;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aggregate");
      }

      let pathParams = {
      };
      let queryParams = {
        'body': body
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/aggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregate2 operation.
     * @callback module:api/InternalApi~aggregate2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SeldonMessageList} [json] 
     * @param {module:api/InternalApi~aggregate2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    aggregate2(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'json': opts['json']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/aggregate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the route operation.
     * @callback module:api/InternalApi~routeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SeldonMessage} [json] 
     * @param {module:api/InternalApi~routeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    route(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'json': opts['json']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/route', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the route2 operation.
     * @callback module:api/InternalApi~route2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SeldonMessage} json 
     * @param {module:api/InternalApi~route2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    route2(json, callback) {
      let postBody = null;
      // verify the required parameter 'json' is set
      if (json === undefined || json === null) {
        throw new Error("Missing the required parameter 'json' when calling route2");
      }

      let pathParams = {
      };
      let queryParams = {
        'json': json
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/route', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendFeedback operation.
     * @callback module:api/InternalApi~sendFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Feedback} [json] 
     * @param {module:api/InternalApi~sendFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    sendFeedback(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'json': opts['json']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/send-feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendFeedback2 operation.
     * @callback module:api/InternalApi~sendFeedback2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Feedback} json 
     * @param {module:api/InternalApi~sendFeedback2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    sendFeedback2(json, callback) {
      let postBody = null;
      // verify the required parameter 'json' is set
      if (json === undefined || json === null) {
        throw new Error("Missing the required parameter 'json' when calling sendFeedback2");
      }

      let pathParams = {
      };
      let queryParams = {
        'json': json
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/send-feedback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformInput operation.
     * @callback module:api/InternalApi~transformInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SeldonMessage} [json] 
     * @param {module:api/InternalApi~transformInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    transformInput(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'json': opts['json']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/transform-input', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformInput2 operation.
     * @callback module:api/InternalApi~transformInput2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SeldonMessage} json 
     * @param {module:api/InternalApi~transformInput2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    transformInput2(json, callback) {
      let postBody = null;
      // verify the required parameter 'json' is set
      if (json === undefined || json === null) {
        throw new Error("Missing the required parameter 'json' when calling transformInput2");
      }

      let pathParams = {
      };
      let queryParams = {
        'json': json
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/transform-input', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformInput3 operation.
     * @callback module:api/InternalApi~transformInput3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SeldonMessage} [json] 
     * @param {module:api/InternalApi~transformInput3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    transformInput3(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'json': opts['json']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/predict', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformInput4 operation.
     * @callback module:api/InternalApi~transformInput4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SeldonMessage} json 
     * @param {module:api/InternalApi~transformInput4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    transformInput4(json, callback) {
      let postBody = null;
      // verify the required parameter 'json' is set
      if (json === undefined || json === null) {
        throw new Error("Missing the required parameter 'json' when calling transformInput4");
      }

      let pathParams = {
      };
      let queryParams = {
        'json': json
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/predict', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformOutput operation.
     * @callback module:api/InternalApi~transformOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SeldonMessage} [json] 
     * @param {module:api/InternalApi~transformOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    transformOutput(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'json': opts['json']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/transform-output', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformOutput2 operation.
     * @callback module:api/InternalApi~transformOutput2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SeldonMessage} json 
     * @param {module:api/InternalApi~transformOutput2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    transformOutput2(json, callback) {
      let postBody = null;
      // verify the required parameter 'json' is set
      if (json === undefined || json === null) {
        throw new Error("Missing the required parameter 'json' when calling transformOutput2");
      }

      let pathParams = {
      };
      let queryParams = {
        'json': json
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/transform-output', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
