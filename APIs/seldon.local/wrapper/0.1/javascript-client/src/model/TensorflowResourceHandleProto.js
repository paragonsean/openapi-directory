/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TensorflowResourceHandleProto model module.
 * @module model/TensorflowResourceHandleProto
 * @version 0.1
 */
class TensorflowResourceHandleProto {
    /**
     * Constructs a new <code>TensorflowResourceHandleProto</code>.
     * Protocol buffer representing a handle to a tensorflow resource. Handles are not valid across executions, but can be serialized back and forth from within a single run.
     * @alias module:model/TensorflowResourceHandleProto
     */
    constructor() { 
        
        TensorflowResourceHandleProto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TensorflowResourceHandleProto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TensorflowResourceHandleProto} obj Optional instance to populate.
     * @return {module:model/TensorflowResourceHandleProto} The populated <code>TensorflowResourceHandleProto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TensorflowResourceHandleProto();

            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('hash_code')) {
                obj['hash_code'] = ApiClient.convertToType(data['hash_code'], 'String');
            }
            if (data.hasOwnProperty('maybe_type_name')) {
                obj['maybe_type_name'] = ApiClient.convertToType(data['maybe_type_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TensorflowResourceHandleProto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TensorflowResourceHandleProto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // ensure the json data is a string
        if (data['hash_code'] && !(typeof data['hash_code'] === 'string' || data['hash_code'] instanceof String)) {
            throw new Error("Expected the field `hash_code` to be a primitive type in the JSON string but got " + data['hash_code']);
        }
        // ensure the json data is a string
        if (data['maybe_type_name'] && !(typeof data['maybe_type_name'] === 'string' || data['maybe_type_name'] instanceof String)) {
            throw new Error("Expected the field `maybe_type_name` to be a primitive type in the JSON string but got " + data['maybe_type_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Container in which this resource is placed.
 * @member {String} container
 */
TensorflowResourceHandleProto.prototype['container'] = undefined;

/**
 * Unique name for the device containing the resource.
 * @member {String} device
 */
TensorflowResourceHandleProto.prototype['device'] = undefined;

/**
 * Hash code for the type of the resource. Is only valid in the same device and in the same execution.
 * @member {String} hash_code
 */
TensorflowResourceHandleProto.prototype['hash_code'] = undefined;

/**
 * For debug-only, the name of the type pointed to by this handle, if available.
 * @member {String} maybe_type_name
 */
TensorflowResourceHandleProto.prototype['maybe_type_name'] = undefined;

/**
 * Unique name of this resource.
 * @member {String} name
 */
TensorflowResourceHandleProto.prototype['name'] = undefined;






export default TensorflowResourceHandleProto;

