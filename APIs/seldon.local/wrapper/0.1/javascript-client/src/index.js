/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DefaultData from './model/DefaultData';
import Feedback from './model/Feedback';
import Meta from './model/Meta';
import Metric from './model/Metric';
import MetricType from './model/MetricType';
import SeldonMessage from './model/SeldonMessage';
import SeldonMessageList from './model/SeldonMessageList';
import Status from './model/Status';
import StatusStatusFlag from './model/StatusStatusFlag';
import Tensor from './model/Tensor';
import TensorShapeProtoDim from './model/TensorShapeProtoDim';
import TensorflowDataType from './model/TensorflowDataType';
import TensorflowResourceHandleProto from './model/TensorflowResourceHandleProto';
import TensorflowTensorProto from './model/TensorflowTensorProto';
import TensorflowTensorShapeProto from './model/TensorflowTensorShapeProto';
import TensorflowVariantTensorDataProto from './model/TensorflowVariantTensorDataProto';
import InternalApi from './api/InternalApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SeldonExternalApi = require('index'); // See note below*.
* var xxxSvc = new SeldonExternalApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SeldonExternalApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SeldonExternalApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SeldonExternalApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DefaultData model constructor.
     * @property {module:model/DefaultData}
     */
    DefaultData,

    /**
     * The Feedback model constructor.
     * @property {module:model/Feedback}
     */
    Feedback,

    /**
     * The Meta model constructor.
     * @property {module:model/Meta}
     */
    Meta,

    /**
     * The Metric model constructor.
     * @property {module:model/Metric}
     */
    Metric,

    /**
     * The MetricType model constructor.
     * @property {module:model/MetricType}
     */
    MetricType,

    /**
     * The SeldonMessage model constructor.
     * @property {module:model/SeldonMessage}
     */
    SeldonMessage,

    /**
     * The SeldonMessageList model constructor.
     * @property {module:model/SeldonMessageList}
     */
    SeldonMessageList,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The StatusStatusFlag model constructor.
     * @property {module:model/StatusStatusFlag}
     */
    StatusStatusFlag,

    /**
     * The Tensor model constructor.
     * @property {module:model/Tensor}
     */
    Tensor,

    /**
     * The TensorShapeProtoDim model constructor.
     * @property {module:model/TensorShapeProtoDim}
     */
    TensorShapeProtoDim,

    /**
     * The TensorflowDataType model constructor.
     * @property {module:model/TensorflowDataType}
     */
    TensorflowDataType,

    /**
     * The TensorflowResourceHandleProto model constructor.
     * @property {module:model/TensorflowResourceHandleProto}
     */
    TensorflowResourceHandleProto,

    /**
     * The TensorflowTensorProto model constructor.
     * @property {module:model/TensorflowTensorProto}
     */
    TensorflowTensorProto,

    /**
     * The TensorflowTensorShapeProto model constructor.
     * @property {module:model/TensorflowTensorShapeProto}
     */
    TensorflowTensorShapeProto,

    /**
     * The TensorflowVariantTensorDataProto model constructor.
     * @property {module:model/TensorflowVariantTensorDataProto}
     */
    TensorflowVariantTensorDataProto,

    /**
    * The InternalApi service constructor.
    * @property {module:api/InternalApi}
    */
    InternalApi
};
