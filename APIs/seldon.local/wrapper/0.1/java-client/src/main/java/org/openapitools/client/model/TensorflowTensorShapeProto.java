/*
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TensorShapeProtoDim;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dimensions of a tensor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:04.437005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TensorflowTensorShapeProto {
  public static final String SERIALIZED_NAME_DIM = "dim";
  @SerializedName(SERIALIZED_NAME_DIM)
  private List<TensorShapeProtoDim> dim = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNKNOWN_RANK = "unknown_rank";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_RANK)
  private Boolean unknownRank;

  public TensorflowTensorShapeProto() {
  }

  public TensorflowTensorShapeProto dim(List<TensorShapeProtoDim> dim) {
    this.dim = dim;
    return this;
  }

  public TensorflowTensorShapeProto addDimItem(TensorShapeProtoDim dimItem) {
    if (this.dim == null) {
      this.dim = new ArrayList<>();
    }
    this.dim.add(dimItem);
    return this;
  }

  /**
   * Dimensions of the tensor, such as {\&quot;input\&quot;, 30}, {\&quot;output\&quot;, 40} for a 30 x 40 2D tensor.  If an entry has size -1, this corresponds to a dimension of unknown size. The names are optional.  The order of entries in \&quot;dim\&quot; matters: It indicates the layout of the values in the tensor in-memory representation.  The first entry in \&quot;dim\&quot; is the outermost dimension used to layout the values, the last entry is the innermost dimension.  This matches the in-memory layout of RowMajor Eigen tensors.  If \&quot;dim.size()\&quot; &gt; 0, \&quot;unknown_rank\&quot; must be false.
   * @return dim
   */
  @javax.annotation.Nullable
  public List<TensorShapeProtoDim> getDim() {
    return dim;
  }

  public void setDim(List<TensorShapeProtoDim> dim) {
    this.dim = dim;
  }


  public TensorflowTensorShapeProto unknownRank(Boolean unknownRank) {
    this.unknownRank = unknownRank;
    return this;
  }

  /**
   * If true, the number of dimensions in the shape is unknown.  If true, \&quot;dim.size()\&quot; must be 0.
   * @return unknownRank
   */
  @javax.annotation.Nullable
  public Boolean getUnknownRank() {
    return unknownRank;
  }

  public void setUnknownRank(Boolean unknownRank) {
    this.unknownRank = unknownRank;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TensorflowTensorShapeProto tensorflowTensorShapeProto = (TensorflowTensorShapeProto) o;
    return Objects.equals(this.dim, tensorflowTensorShapeProto.dim) &&
        Objects.equals(this.unknownRank, tensorflowTensorShapeProto.unknownRank);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dim, unknownRank);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TensorflowTensorShapeProto {\n");
    sb.append("    dim: ").append(toIndentedString(dim)).append("\n");
    sb.append("    unknownRank: ").append(toIndentedString(unknownRank)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dim");
    openapiFields.add("unknown_rank");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TensorflowTensorShapeProto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TensorflowTensorShapeProto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TensorflowTensorShapeProto is not found in the empty JSON string", TensorflowTensorShapeProto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TensorflowTensorShapeProto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TensorflowTensorShapeProto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dim") != null && !jsonObj.get("dim").isJsonNull()) {
        JsonArray jsonArraydim = jsonObj.getAsJsonArray("dim");
        if (jsonArraydim != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dim").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dim` to be an array in the JSON string but got `%s`", jsonObj.get("dim").toString()));
          }

          // validate the optional field `dim` (array)
          for (int i = 0; i < jsonArraydim.size(); i++) {
            TensorShapeProtoDim.validateJsonElement(jsonArraydim.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TensorflowTensorShapeProto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TensorflowTensorShapeProto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TensorflowTensorShapeProto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TensorflowTensorShapeProto.class));

       return (TypeAdapter<T>) new TypeAdapter<TensorflowTensorShapeProto>() {
           @Override
           public void write(JsonWriter out, TensorflowTensorShapeProto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TensorflowTensorShapeProto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TensorflowTensorShapeProto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TensorflowTensorShapeProto
   * @throws IOException if the JSON string is invalid with respect to TensorflowTensorShapeProto
   */
  public static TensorflowTensorShapeProto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TensorflowTensorShapeProto.class);
  }

  /**
   * Convert an instance of TensorflowTensorShapeProto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

