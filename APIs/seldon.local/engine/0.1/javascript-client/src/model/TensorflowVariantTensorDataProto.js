/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TensorflowTensorProto from './TensorflowTensorProto';

/**
 * The TensorflowVariantTensorDataProto model module.
 * @module model/TensorflowVariantTensorDataProto
 * @version 0.1
 */
class TensorflowVariantTensorDataProto {
    /**
     * Constructs a new <code>TensorflowVariantTensorDataProto</code>.
     * Protocol buffer representing the serialization format of DT_VARIANT tensors.
     * @alias module:model/TensorflowVariantTensorDataProto
     */
    constructor() { 
        
        TensorflowVariantTensorDataProto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TensorflowVariantTensorDataProto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TensorflowVariantTensorDataProto} obj Optional instance to populate.
     * @return {module:model/TensorflowVariantTensorDataProto} The populated <code>TensorflowVariantTensorDataProto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TensorflowVariantTensorDataProto();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'Blob');
            }
            if (data.hasOwnProperty('tensors')) {
                obj['tensors'] = ApiClient.convertToType(data['tensors'], [TensorflowTensorProto]);
            }
            if (data.hasOwnProperty('type_name')) {
                obj['type_name'] = ApiClient.convertToType(data['type_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TensorflowVariantTensorDataProto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TensorflowVariantTensorDataProto</code>.
     */
    static validateJSON(data) {
        if (data['tensors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tensors'])) {
                throw new Error("Expected the field `tensors` to be an array in the JSON data but got " + data['tensors']);
            }
            // validate the optional field `tensors` (array)
            for (const item of data['tensors']) {
                TensorflowTensorProto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type_name'] && !(typeof data['type_name'] === 'string' || data['type_name'] instanceof String)) {
            throw new Error("Expected the field `type_name` to be a primitive type in the JSON string but got " + data['type_name']);
        }

        return true;
    }


}



/**
 * Portions of the object that are not Tensors.
 * @member {Blob} metadata
 */
TensorflowVariantTensorDataProto.prototype['metadata'] = undefined;

/**
 * Tensors contained within objects being serialized.
 * @member {Array.<module:model/TensorflowTensorProto>} tensors
 */
TensorflowVariantTensorDataProto.prototype['tensors'] = undefined;

/**
 * Name of the type of objects being serialized.
 * @member {String} type_name
 */
TensorflowVariantTensorDataProto.prototype['type_name'] = undefined;






export default TensorflowVariantTensorDataProto;

