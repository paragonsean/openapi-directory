/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TensorflowDataType from './TensorflowDataType';
import TensorflowResourceHandleProto from './TensorflowResourceHandleProto';
import TensorflowTensorShapeProto from './TensorflowTensorShapeProto';
import TensorflowVariantTensorDataProto from './TensorflowVariantTensorDataProto';

/**
 * The TensorflowTensorProto model module.
 * @module model/TensorflowTensorProto
 * @version 0.1
 */
class TensorflowTensorProto {
    /**
     * Constructs a new <code>TensorflowTensorProto</code>.
     * Protocol buffer representing a tensor.
     * @alias module:model/TensorflowTensorProto
     */
    constructor() { 
        
        TensorflowTensorProto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TensorflowTensorProto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TensorflowTensorProto} obj Optional instance to populate.
     * @return {module:model/TensorflowTensorProto} The populated <code>TensorflowTensorProto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TensorflowTensorProto();

            if (data.hasOwnProperty('bool_val')) {
                obj['bool_val'] = ApiClient.convertToType(data['bool_val'], ['Boolean']);
            }
            if (data.hasOwnProperty('dcomplex_val')) {
                obj['dcomplex_val'] = ApiClient.convertToType(data['dcomplex_val'], ['Number']);
            }
            if (data.hasOwnProperty('double_val')) {
                obj['double_val'] = ApiClient.convertToType(data['double_val'], ['Number']);
            }
            if (data.hasOwnProperty('dtype')) {
                obj['dtype'] = TensorflowDataType.constructFromObject(data['dtype']);
            }
            if (data.hasOwnProperty('float_val')) {
                obj['float_val'] = ApiClient.convertToType(data['float_val'], ['Number']);
            }
            if (data.hasOwnProperty('half_val')) {
                obj['half_val'] = ApiClient.convertToType(data['half_val'], ['Number']);
            }
            if (data.hasOwnProperty('int64_val')) {
                obj['int64_val'] = ApiClient.convertToType(data['int64_val'], ['String']);
            }
            if (data.hasOwnProperty('int_val')) {
                obj['int_val'] = ApiClient.convertToType(data['int_val'], ['Number']);
            }
            if (data.hasOwnProperty('resource_handle_val')) {
                obj['resource_handle_val'] = ApiClient.convertToType(data['resource_handle_val'], [TensorflowResourceHandleProto]);
            }
            if (data.hasOwnProperty('scomplex_val')) {
                obj['scomplex_val'] = ApiClient.convertToType(data['scomplex_val'], ['Number']);
            }
            if (data.hasOwnProperty('string_val')) {
                obj['string_val'] = ApiClient.convertToType(data['string_val'], ['Blob']);
            }
            if (data.hasOwnProperty('tensor_content')) {
                obj['tensor_content'] = ApiClient.convertToType(data['tensor_content'], 'Blob');
            }
            if (data.hasOwnProperty('tensor_shape')) {
                obj['tensor_shape'] = TensorflowTensorShapeProto.constructFromObject(data['tensor_shape']);
            }
            if (data.hasOwnProperty('uint32_val')) {
                obj['uint32_val'] = ApiClient.convertToType(data['uint32_val'], ['Number']);
            }
            if (data.hasOwnProperty('uint64_val')) {
                obj['uint64_val'] = ApiClient.convertToType(data['uint64_val'], ['String']);
            }
            if (data.hasOwnProperty('variant_val')) {
                obj['variant_val'] = ApiClient.convertToType(data['variant_val'], [TensorflowVariantTensorDataProto]);
            }
            if (data.hasOwnProperty('version_number')) {
                obj['version_number'] = ApiClient.convertToType(data['version_number'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TensorflowTensorProto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TensorflowTensorProto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['bool_val'])) {
            throw new Error("Expected the field `bool_val` to be an array in the JSON data but got " + data['bool_val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dcomplex_val'])) {
            throw new Error("Expected the field `dcomplex_val` to be an array in the JSON data but got " + data['dcomplex_val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['double_val'])) {
            throw new Error("Expected the field `double_val` to be an array in the JSON data but got " + data['double_val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['float_val'])) {
            throw new Error("Expected the field `float_val` to be an array in the JSON data but got " + data['float_val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['half_val'])) {
            throw new Error("Expected the field `half_val` to be an array in the JSON data but got " + data['half_val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['int64_val'])) {
            throw new Error("Expected the field `int64_val` to be an array in the JSON data but got " + data['int64_val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['int_val'])) {
            throw new Error("Expected the field `int_val` to be an array in the JSON data but got " + data['int_val']);
        }
        if (data['resource_handle_val']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resource_handle_val'])) {
                throw new Error("Expected the field `resource_handle_val` to be an array in the JSON data but got " + data['resource_handle_val']);
            }
            // validate the optional field `resource_handle_val` (array)
            for (const item of data['resource_handle_val']) {
                TensorflowResourceHandleProto.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scomplex_val'])) {
            throw new Error("Expected the field `scomplex_val` to be an array in the JSON data but got " + data['scomplex_val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['string_val'])) {
            throw new Error("Expected the field `string_val` to be an array in the JSON data but got " + data['string_val']);
        }
        // validate the optional field `tensor_shape`
        if (data['tensor_shape']) { // data not null
          TensorflowTensorShapeProto.validateJSON(data['tensor_shape']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uint32_val'])) {
            throw new Error("Expected the field `uint32_val` to be an array in the JSON data but got " + data['uint32_val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uint64_val'])) {
            throw new Error("Expected the field `uint64_val` to be an array in the JSON data but got " + data['uint64_val']);
        }
        if (data['variant_val']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variant_val'])) {
                throw new Error("Expected the field `variant_val` to be an array in the JSON data but got " + data['variant_val']);
            }
            // validate the optional field `variant_val` (array)
            for (const item of data['variant_val']) {
                TensorflowVariantTensorDataProto.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<Boolean>} bool_val
 */
TensorflowTensorProto.prototype['bool_val'] = undefined;

/**
 * DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real and imaginary parts of i-th double precision complex.
 * @member {Array.<Number>} dcomplex_val
 */
TensorflowTensorProto.prototype['dcomplex_val'] = undefined;

/**
 * DT_DOUBLE.
 * @member {Array.<Number>} double_val
 */
TensorflowTensorProto.prototype['double_val'] = undefined;

/**
 * @member {module:model/TensorflowDataType} dtype
 */
TensorflowTensorProto.prototype['dtype'] = undefined;

/**
 * DT_FLOAT.
 * @member {Array.<Number>} float_val
 */
TensorflowTensorProto.prototype['float_val'] = undefined;

/**
 * DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll have some pointless zero padding for each value here.
 * @member {Array.<Number>} half_val
 */
TensorflowTensorProto.prototype['half_val'] = undefined;

/**
 * @member {Array.<String>} int64_val
 */
TensorflowTensorProto.prototype['int64_val'] = undefined;

/**
 * DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
 * @member {Array.<Number>} int_val
 */
TensorflowTensorProto.prototype['int_val'] = undefined;

/**
 * @member {Array.<module:model/TensorflowResourceHandleProto>} resource_handle_val
 */
TensorflowTensorProto.prototype['resource_handle_val'] = undefined;

/**
 * DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real and imaginary parts of i-th single precision complex.
 * @member {Array.<Number>} scomplex_val
 */
TensorflowTensorProto.prototype['scomplex_val'] = undefined;

/**
 * @member {Array.<Blob>} string_val
 */
TensorflowTensorProto.prototype['string_val'] = undefined;

/**
 * Serialized raw tensor content from either Tensor::AsProtoTensorContent or memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation can be used for all tensor types. The purpose of this representation is to reduce serialization overhead during RPC call by avoiding serialization of many repeated small items.
 * @member {Blob} tensor_content
 */
TensorflowTensorProto.prototype['tensor_content'] = undefined;

/**
 * @member {module:model/TensorflowTensorShapeProto} tensor_shape
 */
TensorflowTensorProto.prototype['tensor_shape'] = undefined;

/**
 * @member {Array.<Number>} uint32_val
 */
TensorflowTensorProto.prototype['uint32_val'] = undefined;

/**
 * @member {Array.<String>} uint64_val
 */
TensorflowTensorProto.prototype['uint64_val'] = undefined;

/**
 * @member {Array.<module:model/TensorflowVariantTensorDataProto>} variant_val
 */
TensorflowTensorProto.prototype['variant_val'] = undefined;

/**
 * Version number. In version 0, if the \"repeated xxx\" representations contain only one element, that element is repeated to fill the shape.  This makes it easy to represent a constant Tensor with a single value.
 * @member {Number} version_number
 */
TensorflowTensorProto.prototype['version_number'] = undefined;






export default TensorflowTensorProto;

