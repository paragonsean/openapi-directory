/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Feedback from '../model/Feedback';
import SeldonMessage from '../model/SeldonMessage';

/**
* ExternalAmbassadorAPI service.
* @module api/ExternalAmbassadorAPIApi
* @version 0.1
*/
export default class ExternalAmbassadorAPIApi {

    /**
    * Constructs a new ExternalAmbassadorAPIApi. 
    * @alias module:api/ExternalAmbassadorAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the predict operation.
     * @callback module:api/ExternalAmbassadorAPIApi~predictCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {String} deployment 
     * @param {module:model/SeldonMessage} seldonMessage 
     * @param {module:api/ExternalAmbassadorAPIApi~predictCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    predict(namespace, deployment, seldonMessage, callback) {
      let postBody = seldonMessage;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling predict");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling predict");
      }
      // verify the required parameter 'seldonMessage' is set
      if (seldonMessage === undefined || seldonMessage === null) {
        throw new Error("Missing the required parameter 'seldonMessage' when calling predict");
      }

      let pathParams = {
        'namespace': namespace,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json', 'application/octet-stream', 'text/*'];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/seldon/{namespace}/{deployment}/api/v1.0/predictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendFeedback operation.
     * @callback module:api/ExternalAmbassadorAPIApi~sendFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeldonMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {String} deployment 
     * @param {module:model/Feedback} feedback 
     * @param {module:api/ExternalAmbassadorAPIApi~sendFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeldonMessage}
     */
    sendFeedback(namespace, deployment, feedback, callback) {
      let postBody = feedback;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling sendFeedback");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling sendFeedback");
      }
      // verify the required parameter 'feedback' is set
      if (feedback === undefined || feedback === null) {
        throw new Error("Missing the required parameter 'feedback' when calling sendFeedback");
      }

      let pathParams = {
        'namespace': namespace,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SeldonMessage;
      return this.apiClient.callApi(
        '/seldon/{namespace}/{deployment}/api/v1.0/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
