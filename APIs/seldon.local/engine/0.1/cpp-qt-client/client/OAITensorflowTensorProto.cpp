/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITensorflowTensorProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITensorflowTensorProto::OAITensorflowTensorProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITensorflowTensorProto::OAITensorflowTensorProto() {
    this->initializeModel();
}

OAITensorflowTensorProto::~OAITensorflowTensorProto() {}

void OAITensorflowTensorProto::initializeModel() {

    m_bool_val_isSet = false;
    m_bool_val_isValid = false;

    m_dcomplex_val_isSet = false;
    m_dcomplex_val_isValid = false;

    m_double_val_isSet = false;
    m_double_val_isValid = false;

    m_dtype_isSet = false;
    m_dtype_isValid = false;

    m_float_val_isSet = false;
    m_float_val_isValid = false;

    m_half_val_isSet = false;
    m_half_val_isValid = false;

    m_int64_val_isSet = false;
    m_int64_val_isValid = false;

    m_int_val_isSet = false;
    m_int_val_isValid = false;

    m_resource_handle_val_isSet = false;
    m_resource_handle_val_isValid = false;

    m_scomplex_val_isSet = false;
    m_scomplex_val_isValid = false;

    m_string_val_isSet = false;
    m_string_val_isValid = false;

    m_tensor_content_isSet = false;
    m_tensor_content_isValid = false;

    m_tensor_shape_isSet = false;
    m_tensor_shape_isValid = false;

    m_uint32_val_isSet = false;
    m_uint32_val_isValid = false;

    m_uint64_val_isSet = false;
    m_uint64_val_isValid = false;

    m_variant_val_isSet = false;
    m_variant_val_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;
}

void OAITensorflowTensorProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITensorflowTensorProto::fromJsonObject(QJsonObject json) {

    m_bool_val_isValid = ::OpenAPI::fromJsonValue(m_bool_val, json[QString("bool_val")]);
    m_bool_val_isSet = !json[QString("bool_val")].isNull() && m_bool_val_isValid;

    m_dcomplex_val_isValid = ::OpenAPI::fromJsonValue(m_dcomplex_val, json[QString("dcomplex_val")]);
    m_dcomplex_val_isSet = !json[QString("dcomplex_val")].isNull() && m_dcomplex_val_isValid;

    m_double_val_isValid = ::OpenAPI::fromJsonValue(m_double_val, json[QString("double_val")]);
    m_double_val_isSet = !json[QString("double_val")].isNull() && m_double_val_isValid;

    m_dtype_isValid = ::OpenAPI::fromJsonValue(m_dtype, json[QString("dtype")]);
    m_dtype_isSet = !json[QString("dtype")].isNull() && m_dtype_isValid;

    m_float_val_isValid = ::OpenAPI::fromJsonValue(m_float_val, json[QString("float_val")]);
    m_float_val_isSet = !json[QString("float_val")].isNull() && m_float_val_isValid;

    m_half_val_isValid = ::OpenAPI::fromJsonValue(m_half_val, json[QString("half_val")]);
    m_half_val_isSet = !json[QString("half_val")].isNull() && m_half_val_isValid;

    m_int64_val_isValid = ::OpenAPI::fromJsonValue(m_int64_val, json[QString("int64_val")]);
    m_int64_val_isSet = !json[QString("int64_val")].isNull() && m_int64_val_isValid;

    m_int_val_isValid = ::OpenAPI::fromJsonValue(m_int_val, json[QString("int_val")]);
    m_int_val_isSet = !json[QString("int_val")].isNull() && m_int_val_isValid;

    m_resource_handle_val_isValid = ::OpenAPI::fromJsonValue(m_resource_handle_val, json[QString("resource_handle_val")]);
    m_resource_handle_val_isSet = !json[QString("resource_handle_val")].isNull() && m_resource_handle_val_isValid;

    m_scomplex_val_isValid = ::OpenAPI::fromJsonValue(m_scomplex_val, json[QString("scomplex_val")]);
    m_scomplex_val_isSet = !json[QString("scomplex_val")].isNull() && m_scomplex_val_isValid;

    m_string_val_isValid = ::OpenAPI::fromJsonValue(m_string_val, json[QString("string_val")]);
    m_string_val_isSet = !json[QString("string_val")].isNull() && m_string_val_isValid;

    m_tensor_content_isValid = ::OpenAPI::fromJsonValue(m_tensor_content, json[QString("tensor_content")]);
    m_tensor_content_isSet = !json[QString("tensor_content")].isNull() && m_tensor_content_isValid;

    m_tensor_shape_isValid = ::OpenAPI::fromJsonValue(m_tensor_shape, json[QString("tensor_shape")]);
    m_tensor_shape_isSet = !json[QString("tensor_shape")].isNull() && m_tensor_shape_isValid;

    m_uint32_val_isValid = ::OpenAPI::fromJsonValue(m_uint32_val, json[QString("uint32_val")]);
    m_uint32_val_isSet = !json[QString("uint32_val")].isNull() && m_uint32_val_isValid;

    m_uint64_val_isValid = ::OpenAPI::fromJsonValue(m_uint64_val, json[QString("uint64_val")]);
    m_uint64_val_isSet = !json[QString("uint64_val")].isNull() && m_uint64_val_isValid;

    m_variant_val_isValid = ::OpenAPI::fromJsonValue(m_variant_val, json[QString("variant_val")]);
    m_variant_val_isSet = !json[QString("variant_val")].isNull() && m_variant_val_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("version_number")]);
    m_version_number_isSet = !json[QString("version_number")].isNull() && m_version_number_isValid;
}

QString OAITensorflowTensorProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITensorflowTensorProto::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_val.size() > 0) {
        obj.insert(QString("bool_val"), ::OpenAPI::toJsonValue(m_bool_val));
    }
    if (m_dcomplex_val.size() > 0) {
        obj.insert(QString("dcomplex_val"), ::OpenAPI::toJsonValue(m_dcomplex_val));
    }
    if (m_double_val.size() > 0) {
        obj.insert(QString("double_val"), ::OpenAPI::toJsonValue(m_double_val));
    }
    if (m_dtype.isSet()) {
        obj.insert(QString("dtype"), ::OpenAPI::toJsonValue(m_dtype));
    }
    if (m_float_val.size() > 0) {
        obj.insert(QString("float_val"), ::OpenAPI::toJsonValue(m_float_val));
    }
    if (m_half_val.size() > 0) {
        obj.insert(QString("half_val"), ::OpenAPI::toJsonValue(m_half_val));
    }
    if (m_int64_val.size() > 0) {
        obj.insert(QString("int64_val"), ::OpenAPI::toJsonValue(m_int64_val));
    }
    if (m_int_val.size() > 0) {
        obj.insert(QString("int_val"), ::OpenAPI::toJsonValue(m_int_val));
    }
    if (m_resource_handle_val.size() > 0) {
        obj.insert(QString("resource_handle_val"), ::OpenAPI::toJsonValue(m_resource_handle_val));
    }
    if (m_scomplex_val.size() > 0) {
        obj.insert(QString("scomplex_val"), ::OpenAPI::toJsonValue(m_scomplex_val));
    }
    if (m_string_val.size() > 0) {
        obj.insert(QString("string_val"), ::OpenAPI::toJsonValue(m_string_val));
    }
    if (m_tensor_content_isSet) {
        obj.insert(QString("tensor_content"), ::OpenAPI::toJsonValue(m_tensor_content));
    }
    if (m_tensor_shape.isSet()) {
        obj.insert(QString("tensor_shape"), ::OpenAPI::toJsonValue(m_tensor_shape));
    }
    if (m_uint32_val.size() > 0) {
        obj.insert(QString("uint32_val"), ::OpenAPI::toJsonValue(m_uint32_val));
    }
    if (m_uint64_val.size() > 0) {
        obj.insert(QString("uint64_val"), ::OpenAPI::toJsonValue(m_uint64_val));
    }
    if (m_variant_val.size() > 0) {
        obj.insert(QString("variant_val"), ::OpenAPI::toJsonValue(m_variant_val));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("version_number"), ::OpenAPI::toJsonValue(m_version_number));
    }
    return obj;
}

QList<bool> OAITensorflowTensorProto::getBoolVal() const {
    return m_bool_val;
}
void OAITensorflowTensorProto::setBoolVal(const QList<bool> &bool_val) {
    m_bool_val = bool_val;
    m_bool_val_isSet = true;
}

bool OAITensorflowTensorProto::is_bool_val_Set() const{
    return m_bool_val_isSet;
}

bool OAITensorflowTensorProto::is_bool_val_Valid() const{
    return m_bool_val_isValid;
}

QList<double> OAITensorflowTensorProto::getDcomplexVal() const {
    return m_dcomplex_val;
}
void OAITensorflowTensorProto::setDcomplexVal(const QList<double> &dcomplex_val) {
    m_dcomplex_val = dcomplex_val;
    m_dcomplex_val_isSet = true;
}

bool OAITensorflowTensorProto::is_dcomplex_val_Set() const{
    return m_dcomplex_val_isSet;
}

bool OAITensorflowTensorProto::is_dcomplex_val_Valid() const{
    return m_dcomplex_val_isValid;
}

QList<double> OAITensorflowTensorProto::getDoubleVal() const {
    return m_double_val;
}
void OAITensorflowTensorProto::setDoubleVal(const QList<double> &double_val) {
    m_double_val = double_val;
    m_double_val_isSet = true;
}

bool OAITensorflowTensorProto::is_double_val_Set() const{
    return m_double_val_isSet;
}

bool OAITensorflowTensorProto::is_double_val_Valid() const{
    return m_double_val_isValid;
}

OAITensorflowDataType OAITensorflowTensorProto::getDtype() const {
    return m_dtype;
}
void OAITensorflowTensorProto::setDtype(const OAITensorflowDataType &dtype) {
    m_dtype = dtype;
    m_dtype_isSet = true;
}

bool OAITensorflowTensorProto::is_dtype_Set() const{
    return m_dtype_isSet;
}

bool OAITensorflowTensorProto::is_dtype_Valid() const{
    return m_dtype_isValid;
}

QList<float> OAITensorflowTensorProto::getFloatVal() const {
    return m_float_val;
}
void OAITensorflowTensorProto::setFloatVal(const QList<float> &float_val) {
    m_float_val = float_val;
    m_float_val_isSet = true;
}

bool OAITensorflowTensorProto::is_float_val_Set() const{
    return m_float_val_isSet;
}

bool OAITensorflowTensorProto::is_float_val_Valid() const{
    return m_float_val_isValid;
}

QList<qint32> OAITensorflowTensorProto::getHalfVal() const {
    return m_half_val;
}
void OAITensorflowTensorProto::setHalfVal(const QList<qint32> &half_val) {
    m_half_val = half_val;
    m_half_val_isSet = true;
}

bool OAITensorflowTensorProto::is_half_val_Set() const{
    return m_half_val_isSet;
}

bool OAITensorflowTensorProto::is_half_val_Valid() const{
    return m_half_val_isValid;
}

QList<QString> OAITensorflowTensorProto::getInt64Val() const {
    return m_int64_val;
}
void OAITensorflowTensorProto::setInt64Val(const QList<QString> &int64_val) {
    m_int64_val = int64_val;
    m_int64_val_isSet = true;
}

bool OAITensorflowTensorProto::is_int64_val_Set() const{
    return m_int64_val_isSet;
}

bool OAITensorflowTensorProto::is_int64_val_Valid() const{
    return m_int64_val_isValid;
}

QList<qint32> OAITensorflowTensorProto::getIntVal() const {
    return m_int_val;
}
void OAITensorflowTensorProto::setIntVal(const QList<qint32> &int_val) {
    m_int_val = int_val;
    m_int_val_isSet = true;
}

bool OAITensorflowTensorProto::is_int_val_Set() const{
    return m_int_val_isSet;
}

bool OAITensorflowTensorProto::is_int_val_Valid() const{
    return m_int_val_isValid;
}

QList<OAITensorflowResourceHandleProto> OAITensorflowTensorProto::getResourceHandleVal() const {
    return m_resource_handle_val;
}
void OAITensorflowTensorProto::setResourceHandleVal(const QList<OAITensorflowResourceHandleProto> &resource_handle_val) {
    m_resource_handle_val = resource_handle_val;
    m_resource_handle_val_isSet = true;
}

bool OAITensorflowTensorProto::is_resource_handle_val_Set() const{
    return m_resource_handle_val_isSet;
}

bool OAITensorflowTensorProto::is_resource_handle_val_Valid() const{
    return m_resource_handle_val_isValid;
}

QList<float> OAITensorflowTensorProto::getScomplexVal() const {
    return m_scomplex_val;
}
void OAITensorflowTensorProto::setScomplexVal(const QList<float> &scomplex_val) {
    m_scomplex_val = scomplex_val;
    m_scomplex_val_isSet = true;
}

bool OAITensorflowTensorProto::is_scomplex_val_Set() const{
    return m_scomplex_val_isSet;
}

bool OAITensorflowTensorProto::is_scomplex_val_Valid() const{
    return m_scomplex_val_isValid;
}

QList<QByteArray> OAITensorflowTensorProto::getStringVal() const {
    return m_string_val;
}
void OAITensorflowTensorProto::setStringVal(const QList<QByteArray> &string_val) {
    m_string_val = string_val;
    m_string_val_isSet = true;
}

bool OAITensorflowTensorProto::is_string_val_Set() const{
    return m_string_val_isSet;
}

bool OAITensorflowTensorProto::is_string_val_Valid() const{
    return m_string_val_isValid;
}

QByteArray OAITensorflowTensorProto::getTensorContent() const {
    return m_tensor_content;
}
void OAITensorflowTensorProto::setTensorContent(const QByteArray &tensor_content) {
    m_tensor_content = tensor_content;
    m_tensor_content_isSet = true;
}

bool OAITensorflowTensorProto::is_tensor_content_Set() const{
    return m_tensor_content_isSet;
}

bool OAITensorflowTensorProto::is_tensor_content_Valid() const{
    return m_tensor_content_isValid;
}

OAITensorflowTensorShapeProto OAITensorflowTensorProto::getTensorShape() const {
    return m_tensor_shape;
}
void OAITensorflowTensorProto::setTensorShape(const OAITensorflowTensorShapeProto &tensor_shape) {
    m_tensor_shape = tensor_shape;
    m_tensor_shape_isSet = true;
}

bool OAITensorflowTensorProto::is_tensor_shape_Set() const{
    return m_tensor_shape_isSet;
}

bool OAITensorflowTensorProto::is_tensor_shape_Valid() const{
    return m_tensor_shape_isValid;
}

QList<qint64> OAITensorflowTensorProto::getUint32Val() const {
    return m_uint32_val;
}
void OAITensorflowTensorProto::setUint32Val(const QList<qint64> &uint32_val) {
    m_uint32_val = uint32_val;
    m_uint32_val_isSet = true;
}

bool OAITensorflowTensorProto::is_uint32_val_Set() const{
    return m_uint32_val_isSet;
}

bool OAITensorflowTensorProto::is_uint32_val_Valid() const{
    return m_uint32_val_isValid;
}

QList<QString> OAITensorflowTensorProto::getUint64Val() const {
    return m_uint64_val;
}
void OAITensorflowTensorProto::setUint64Val(const QList<QString> &uint64_val) {
    m_uint64_val = uint64_val;
    m_uint64_val_isSet = true;
}

bool OAITensorflowTensorProto::is_uint64_val_Set() const{
    return m_uint64_val_isSet;
}

bool OAITensorflowTensorProto::is_uint64_val_Valid() const{
    return m_uint64_val_isValid;
}

QList<OAITensorflowVariantTensorDataProto> OAITensorflowTensorProto::getVariantVal() const {
    return m_variant_val;
}
void OAITensorflowTensorProto::setVariantVal(const QList<OAITensorflowVariantTensorDataProto> &variant_val) {
    m_variant_val = variant_val;
    m_variant_val_isSet = true;
}

bool OAITensorflowTensorProto::is_variant_val_Set() const{
    return m_variant_val_isSet;
}

bool OAITensorflowTensorProto::is_variant_val_Valid() const{
    return m_variant_val_isValid;
}

qint32 OAITensorflowTensorProto::getVersionNumber() const {
    return m_version_number;
}
void OAITensorflowTensorProto::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAITensorflowTensorProto::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAITensorflowTensorProto::is_version_number_Valid() const{
    return m_version_number_isValid;
}

bool OAITensorflowTensorProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dcomplex_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_float_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_half_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_int64_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_int_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_handle_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scomplex_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensor_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensor_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uint32_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uint64_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITensorflowTensorProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
