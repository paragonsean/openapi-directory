/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITensorflowResourceHandleProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITensorflowResourceHandleProto::OAITensorflowResourceHandleProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITensorflowResourceHandleProto::OAITensorflowResourceHandleProto() {
    this->initializeModel();
}

OAITensorflowResourceHandleProto::~OAITensorflowResourceHandleProto() {}

void OAITensorflowResourceHandleProto::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_hash_code_isSet = false;
    m_hash_code_isValid = false;

    m_maybe_type_name_isSet = false;
    m_maybe_type_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAITensorflowResourceHandleProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITensorflowResourceHandleProto::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_hash_code_isValid = ::OpenAPI::fromJsonValue(m_hash_code, json[QString("hash_code")]);
    m_hash_code_isSet = !json[QString("hash_code")].isNull() && m_hash_code_isValid;

    m_maybe_type_name_isValid = ::OpenAPI::fromJsonValue(m_maybe_type_name, json[QString("maybe_type_name")]);
    m_maybe_type_name_isSet = !json[QString("maybe_type_name")].isNull() && m_maybe_type_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAITensorflowResourceHandleProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITensorflowResourceHandleProto::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_hash_code_isSet) {
        obj.insert(QString("hash_code"), ::OpenAPI::toJsonValue(m_hash_code));
    }
    if (m_maybe_type_name_isSet) {
        obj.insert(QString("maybe_type_name"), ::OpenAPI::toJsonValue(m_maybe_type_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAITensorflowResourceHandleProto::getContainer() const {
    return m_container;
}
void OAITensorflowResourceHandleProto::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAITensorflowResourceHandleProto::is_container_Set() const{
    return m_container_isSet;
}

bool OAITensorflowResourceHandleProto::is_container_Valid() const{
    return m_container_isValid;
}

QString OAITensorflowResourceHandleProto::getDevice() const {
    return m_device;
}
void OAITensorflowResourceHandleProto::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAITensorflowResourceHandleProto::is_device_Set() const{
    return m_device_isSet;
}

bool OAITensorflowResourceHandleProto::is_device_Valid() const{
    return m_device_isValid;
}

QString OAITensorflowResourceHandleProto::getHashCode() const {
    return m_hash_code;
}
void OAITensorflowResourceHandleProto::setHashCode(const QString &hash_code) {
    m_hash_code = hash_code;
    m_hash_code_isSet = true;
}

bool OAITensorflowResourceHandleProto::is_hash_code_Set() const{
    return m_hash_code_isSet;
}

bool OAITensorflowResourceHandleProto::is_hash_code_Valid() const{
    return m_hash_code_isValid;
}

QString OAITensorflowResourceHandleProto::getMaybeTypeName() const {
    return m_maybe_type_name;
}
void OAITensorflowResourceHandleProto::setMaybeTypeName(const QString &maybe_type_name) {
    m_maybe_type_name = maybe_type_name;
    m_maybe_type_name_isSet = true;
}

bool OAITensorflowResourceHandleProto::is_maybe_type_name_Set() const{
    return m_maybe_type_name_isSet;
}

bool OAITensorflowResourceHandleProto::is_maybe_type_name_Valid() const{
    return m_maybe_type_name_isValid;
}

QString OAITensorflowResourceHandleProto::getName() const {
    return m_name;
}
void OAITensorflowResourceHandleProto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITensorflowResourceHandleProto::is_name_Set() const{
    return m_name_isSet;
}

bool OAITensorflowResourceHandleProto::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITensorflowResourceHandleProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maybe_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITensorflowResourceHandleProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
