/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITensorflowDataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITensorflowDataType::OAITensorflowDataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITensorflowDataType::OAITensorflowDataType() {
    this->initializeModel();
}

OAITensorflowDataType::~OAITensorflowDataType() {}

void OAITensorflowDataType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITensorflowDataType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITensorflowDataType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DT_INVALID", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_FLOAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_DOUBLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::DOUBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_INT32", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INT32;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_UINT8", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::UINT8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_INT16", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INT16;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_INT8", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INT8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_STRING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_COMPLEX64", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::COMPLEX64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_INT64", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INT64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_BOOL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::BOOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QINT8", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QINT8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QUINT8", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QUINT8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QINT32", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QINT32;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_BFLOAT16", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::BFLOAT16;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QINT16", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QINT16;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QUINT16", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QUINT16;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_UINT16", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::UINT16;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_COMPLEX128", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::COMPLEX128;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_HALF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::HALF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_RESOURCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::RESOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_VARIANT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::VARIANT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_UINT32", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::UINT32;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_UINT64", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::UINT64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_FLOAT_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::FLOAT_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_DOUBLE_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::DOUBLE_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_INT32_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INT32_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_UINT8_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::UINT8_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_INT16_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INT16_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_INT8_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INT8_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_STRING_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::STRING_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_COMPLEX64_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::COMPLEX64_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_INT64_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::INT64_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_BOOL_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::BOOL_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QINT8_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QINT8_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QUINT8_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QUINT8_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QINT32_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QINT32_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_BFLOAT16_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::BFLOAT16_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QINT16_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QINT16_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_QUINT16_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::QUINT16_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_UINT16_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::UINT16_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_COMPLEX128_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::COMPLEX128_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_HALF_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::HALF_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_RESOURCE_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::RESOURCE_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_VARIANT_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::VARIANT_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_UINT32_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::UINT32_REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DT_UINT64_REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITensorflowDataType::UINT64_REF;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITensorflowDataType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITensorflowDataType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITensorflowDataType::INVALID:
            val = "DT_INVALID";
            break;
        case eOAITensorflowDataType::FLOAT:
            val = "DT_FLOAT";
            break;
        case eOAITensorflowDataType::DOUBLE:
            val = "DT_DOUBLE";
            break;
        case eOAITensorflowDataType::INT32:
            val = "DT_INT32";
            break;
        case eOAITensorflowDataType::UINT8:
            val = "DT_UINT8";
            break;
        case eOAITensorflowDataType::INT16:
            val = "DT_INT16";
            break;
        case eOAITensorflowDataType::INT8:
            val = "DT_INT8";
            break;
        case eOAITensorflowDataType::STRING:
            val = "DT_STRING";
            break;
        case eOAITensorflowDataType::COMPLEX64:
            val = "DT_COMPLEX64";
            break;
        case eOAITensorflowDataType::INT64:
            val = "DT_INT64";
            break;
        case eOAITensorflowDataType::BOOL:
            val = "DT_BOOL";
            break;
        case eOAITensorflowDataType::QINT8:
            val = "DT_QINT8";
            break;
        case eOAITensorflowDataType::QUINT8:
            val = "DT_QUINT8";
            break;
        case eOAITensorflowDataType::QINT32:
            val = "DT_QINT32";
            break;
        case eOAITensorflowDataType::BFLOAT16:
            val = "DT_BFLOAT16";
            break;
        case eOAITensorflowDataType::QINT16:
            val = "DT_QINT16";
            break;
        case eOAITensorflowDataType::QUINT16:
            val = "DT_QUINT16";
            break;
        case eOAITensorflowDataType::UINT16:
            val = "DT_UINT16";
            break;
        case eOAITensorflowDataType::COMPLEX128:
            val = "DT_COMPLEX128";
            break;
        case eOAITensorflowDataType::HALF:
            val = "DT_HALF";
            break;
        case eOAITensorflowDataType::RESOURCE:
            val = "DT_RESOURCE";
            break;
        case eOAITensorflowDataType::VARIANT:
            val = "DT_VARIANT";
            break;
        case eOAITensorflowDataType::UINT32:
            val = "DT_UINT32";
            break;
        case eOAITensorflowDataType::UINT64:
            val = "DT_UINT64";
            break;
        case eOAITensorflowDataType::FLOAT_REF:
            val = "DT_FLOAT_REF";
            break;
        case eOAITensorflowDataType::DOUBLE_REF:
            val = "DT_DOUBLE_REF";
            break;
        case eOAITensorflowDataType::INT32_REF:
            val = "DT_INT32_REF";
            break;
        case eOAITensorflowDataType::UINT8_REF:
            val = "DT_UINT8_REF";
            break;
        case eOAITensorflowDataType::INT16_REF:
            val = "DT_INT16_REF";
            break;
        case eOAITensorflowDataType::INT8_REF:
            val = "DT_INT8_REF";
            break;
        case eOAITensorflowDataType::STRING_REF:
            val = "DT_STRING_REF";
            break;
        case eOAITensorflowDataType::COMPLEX64_REF:
            val = "DT_COMPLEX64_REF";
            break;
        case eOAITensorflowDataType::INT64_REF:
            val = "DT_INT64_REF";
            break;
        case eOAITensorflowDataType::BOOL_REF:
            val = "DT_BOOL_REF";
            break;
        case eOAITensorflowDataType::QINT8_REF:
            val = "DT_QINT8_REF";
            break;
        case eOAITensorflowDataType::QUINT8_REF:
            val = "DT_QUINT8_REF";
            break;
        case eOAITensorflowDataType::QINT32_REF:
            val = "DT_QINT32_REF";
            break;
        case eOAITensorflowDataType::BFLOAT16_REF:
            val = "DT_BFLOAT16_REF";
            break;
        case eOAITensorflowDataType::QINT16_REF:
            val = "DT_QINT16_REF";
            break;
        case eOAITensorflowDataType::QUINT16_REF:
            val = "DT_QUINT16_REF";
            break;
        case eOAITensorflowDataType::UINT16_REF:
            val = "DT_UINT16_REF";
            break;
        case eOAITensorflowDataType::COMPLEX128_REF:
            val = "DT_COMPLEX128_REF";
            break;
        case eOAITensorflowDataType::HALF_REF:
            val = "DT_HALF_REF";
            break;
        case eOAITensorflowDataType::RESOURCE_REF:
            val = "DT_RESOURCE_REF";
            break;
        case eOAITensorflowDataType::VARIANT_REF:
            val = "DT_VARIANT_REF";
            break;
        case eOAITensorflowDataType::UINT32_REF:
            val = "DT_UINT32_REF";
            break;
        case eOAITensorflowDataType::UINT64_REF:
            val = "DT_UINT64_REF";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITensorflowDataType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITensorflowDataType::eOAITensorflowDataType OAITensorflowDataType::getValue() const {
    return m_value;
}

void OAITensorflowDataType::setValue(const OAITensorflowDataType::eOAITensorflowDataType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITensorflowDataType::isSet() const {
    
    return m_value_isSet;
}

bool OAITensorflowDataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
