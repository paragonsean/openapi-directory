/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITensor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITensor::OAITensor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITensor::OAITensor() {
    this->initializeModel();
}

OAITensor::~OAITensor() {}

void OAITensor::initializeModel() {

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAITensor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITensor::fromJsonObject(QJsonObject json) {

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAITensor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITensor::asJsonObject() const {
    QJsonObject obj;
    if (m_shape.size() > 0) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList<qint32> OAITensor::getShape() const {
    return m_shape;
}
void OAITensor::setShape(const QList<qint32> &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAITensor::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAITensor::is_shape_Valid() const{
    return m_shape_isValid;
}

QList<double> OAITensor::getValues() const {
    return m_values;
}
void OAITensor::setValues(const QList<double> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAITensor::is_values_Set() const{
    return m_values_isSet;
}

bool OAITensor::is_values_Valid() const{
    return m_values_isValid;
}

bool OAITensor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shape.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITensor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
