/**
 * Seldon External API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITensorflowTensorProto.h
 *
 * Protocol buffer representing a tensor.
 */

#ifndef OAITensorflowTensorProto_H
#define OAITensorflowTensorProto_H

#include <QJsonObject>

#include "OAITensorflowDataType.h"
#include "OAITensorflowResourceHandleProto.h"
#include "OAITensorflowTensorShapeProto.h"
#include "OAITensorflowVariantTensorDataProto.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITensorflowResourceHandleProto;
class OAITensorflowTensorShapeProto;
class OAITensorflowVariantTensorDataProto;

class OAITensorflowTensorProto : public OAIObject {
public:
    OAITensorflowTensorProto();
    OAITensorflowTensorProto(QString json);
    ~OAITensorflowTensorProto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<bool> getBoolVal() const;
    void setBoolVal(const QList<bool> &bool_val);
    bool is_bool_val_Set() const;
    bool is_bool_val_Valid() const;

    QList<double> getDcomplexVal() const;
    void setDcomplexVal(const QList<double> &dcomplex_val);
    bool is_dcomplex_val_Set() const;
    bool is_dcomplex_val_Valid() const;

    QList<double> getDoubleVal() const;
    void setDoubleVal(const QList<double> &double_val);
    bool is_double_val_Set() const;
    bool is_double_val_Valid() const;

    OAITensorflowDataType getDtype() const;
    void setDtype(const OAITensorflowDataType &dtype);
    bool is_dtype_Set() const;
    bool is_dtype_Valid() const;

    QList<float> getFloatVal() const;
    void setFloatVal(const QList<float> &float_val);
    bool is_float_val_Set() const;
    bool is_float_val_Valid() const;

    QList<qint32> getHalfVal() const;
    void setHalfVal(const QList<qint32> &half_val);
    bool is_half_val_Set() const;
    bool is_half_val_Valid() const;

    QList<QString> getInt64Val() const;
    void setInt64Val(const QList<QString> &int64_val);
    bool is_int64_val_Set() const;
    bool is_int64_val_Valid() const;

    QList<qint32> getIntVal() const;
    void setIntVal(const QList<qint32> &int_val);
    bool is_int_val_Set() const;
    bool is_int_val_Valid() const;

    QList<OAITensorflowResourceHandleProto> getResourceHandleVal() const;
    void setResourceHandleVal(const QList<OAITensorflowResourceHandleProto> &resource_handle_val);
    bool is_resource_handle_val_Set() const;
    bool is_resource_handle_val_Valid() const;

    QList<float> getScomplexVal() const;
    void setScomplexVal(const QList<float> &scomplex_val);
    bool is_scomplex_val_Set() const;
    bool is_scomplex_val_Valid() const;

    QList<QByteArray> getStringVal() const;
    void setStringVal(const QList<QByteArray> &string_val);
    bool is_string_val_Set() const;
    bool is_string_val_Valid() const;

    QByteArray getTensorContent() const;
    void setTensorContent(const QByteArray &tensor_content);
    bool is_tensor_content_Set() const;
    bool is_tensor_content_Valid() const;

    OAITensorflowTensorShapeProto getTensorShape() const;
    void setTensorShape(const OAITensorflowTensorShapeProto &tensor_shape);
    bool is_tensor_shape_Set() const;
    bool is_tensor_shape_Valid() const;

    QList<qint64> getUint32Val() const;
    void setUint32Val(const QList<qint64> &uint32_val);
    bool is_uint32_val_Set() const;
    bool is_uint32_val_Valid() const;

    QList<QString> getUint64Val() const;
    void setUint64Val(const QList<QString> &uint64_val);
    bool is_uint64_val_Set() const;
    bool is_uint64_val_Valid() const;

    QList<OAITensorflowVariantTensorDataProto> getVariantVal() const;
    void setVariantVal(const QList<OAITensorflowVariantTensorDataProto> &variant_val);
    bool is_variant_val_Set() const;
    bool is_variant_val_Valid() const;

    qint32 getVersionNumber() const;
    void setVersionNumber(const qint32 &version_number);
    bool is_version_number_Set() const;
    bool is_version_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<bool> m_bool_val;
    bool m_bool_val_isSet;
    bool m_bool_val_isValid;

    QList<double> m_dcomplex_val;
    bool m_dcomplex_val_isSet;
    bool m_dcomplex_val_isValid;

    QList<double> m_double_val;
    bool m_double_val_isSet;
    bool m_double_val_isValid;

    OAITensorflowDataType m_dtype;
    bool m_dtype_isSet;
    bool m_dtype_isValid;

    QList<float> m_float_val;
    bool m_float_val_isSet;
    bool m_float_val_isValid;

    QList<qint32> m_half_val;
    bool m_half_val_isSet;
    bool m_half_val_isValid;

    QList<QString> m_int64_val;
    bool m_int64_val_isSet;
    bool m_int64_val_isValid;

    QList<qint32> m_int_val;
    bool m_int_val_isSet;
    bool m_int_val_isValid;

    QList<OAITensorflowResourceHandleProto> m_resource_handle_val;
    bool m_resource_handle_val_isSet;
    bool m_resource_handle_val_isValid;

    QList<float> m_scomplex_val;
    bool m_scomplex_val_isSet;
    bool m_scomplex_val_isValid;

    QList<QByteArray> m_string_val;
    bool m_string_val_isSet;
    bool m_string_val_isValid;

    QByteArray m_tensor_content;
    bool m_tensor_content_isSet;
    bool m_tensor_content_isValid;

    OAITensorflowTensorShapeProto m_tensor_shape;
    bool m_tensor_shape_isSet;
    bool m_tensor_shape_isValid;

    QList<qint64> m_uint32_val;
    bool m_uint32_val_isSet;
    bool m_uint32_val_isValid;

    QList<QString> m_uint64_val;
    bool m_uint64_val_isSet;
    bool m_uint64_val_isValid;

    QList<OAITensorflowVariantTensorDataProto> m_variant_val;
    bool m_variant_val_isSet;
    bool m_variant_val_isValid;

    qint32 m_version_number;
    bool m_version_number_isSet;
    bool m_version_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITensorflowTensorProto)

#endif // OAITensorflowTensorProto_H
