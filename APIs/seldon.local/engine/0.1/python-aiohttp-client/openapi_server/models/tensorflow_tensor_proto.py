# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tensorflow_data_type import TensorflowDataType
from openapi_server.models.tensorflow_resource_handle_proto import TensorflowResourceHandleProto
from openapi_server.models.tensorflow_tensor_shape_proto import TensorflowTensorShapeProto
from openapi_server.models.tensorflow_variant_tensor_data_proto import TensorflowVariantTensorDataProto
import re
from openapi_server import util


class TensorflowTensorProto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_val: List[bool]=None, dcomplex_val: List[float]=None, double_val: List[float]=None, dtype: TensorflowDataType=TensorflowDataType.INVALID, float_val: List[float]=None, half_val: List[int]=None, int64_val: List[str]=None, int_val: List[int]=None, resource_handle_val: List[TensorflowResourceHandleProto]=None, scomplex_val: List[float]=None, string_val: List[str]=None, tensor_content: str=None, tensor_shape: TensorflowTensorShapeProto=None, uint32_val: List[int]=None, uint64_val: List[str]=None, variant_val: List[TensorflowVariantTensorDataProto]=None, version_number: int=None):
        """TensorflowTensorProto - a model defined in OpenAPI

        :param bool_val: The bool_val of this TensorflowTensorProto.
        :param dcomplex_val: The dcomplex_val of this TensorflowTensorProto.
        :param double_val: The double_val of this TensorflowTensorProto.
        :param dtype: The dtype of this TensorflowTensorProto.
        :param float_val: The float_val of this TensorflowTensorProto.
        :param half_val: The half_val of this TensorflowTensorProto.
        :param int64_val: The int64_val of this TensorflowTensorProto.
        :param int_val: The int_val of this TensorflowTensorProto.
        :param resource_handle_val: The resource_handle_val of this TensorflowTensorProto.
        :param scomplex_val: The scomplex_val of this TensorflowTensorProto.
        :param string_val: The string_val of this TensorflowTensorProto.
        :param tensor_content: The tensor_content of this TensorflowTensorProto.
        :param tensor_shape: The tensor_shape of this TensorflowTensorProto.
        :param uint32_val: The uint32_val of this TensorflowTensorProto.
        :param uint64_val: The uint64_val of this TensorflowTensorProto.
        :param variant_val: The variant_val of this TensorflowTensorProto.
        :param version_number: The version_number of this TensorflowTensorProto.
        """
        self.openapi_types = {
            'bool_val': List[bool],
            'dcomplex_val': List[float],
            'double_val': List[float],
            'dtype': TensorflowDataType,
            'float_val': List[float],
            'half_val': List[int],
            'int64_val': List[str],
            'int_val': List[int],
            'resource_handle_val': List[TensorflowResourceHandleProto],
            'scomplex_val': List[float],
            'string_val': List[str],
            'tensor_content': str,
            'tensor_shape': TensorflowTensorShapeProto,
            'uint32_val': List[int],
            'uint64_val': List[str],
            'variant_val': List[TensorflowVariantTensorDataProto],
            'version_number': int
        }

        self.attribute_map = {
            'bool_val': 'bool_val',
            'dcomplex_val': 'dcomplex_val',
            'double_val': 'double_val',
            'dtype': 'dtype',
            'float_val': 'float_val',
            'half_val': 'half_val',
            'int64_val': 'int64_val',
            'int_val': 'int_val',
            'resource_handle_val': 'resource_handle_val',
            'scomplex_val': 'scomplex_val',
            'string_val': 'string_val',
            'tensor_content': 'tensor_content',
            'tensor_shape': 'tensor_shape',
            'uint32_val': 'uint32_val',
            'uint64_val': 'uint64_val',
            'variant_val': 'variant_val',
            'version_number': 'version_number'
        }

        self._bool_val = bool_val
        self._dcomplex_val = dcomplex_val
        self._double_val = double_val
        self._dtype = dtype
        self._float_val = float_val
        self._half_val = half_val
        self._int64_val = int64_val
        self._int_val = int_val
        self._resource_handle_val = resource_handle_val
        self._scomplex_val = scomplex_val
        self._string_val = string_val
        self._tensor_content = tensor_content
        self._tensor_shape = tensor_shape
        self._uint32_val = uint32_val
        self._uint64_val = uint64_val
        self._variant_val = variant_val
        self._version_number = version_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TensorflowTensorProto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TensorflowTensorProto of this TensorflowTensorProto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_val(self):
        """Gets the bool_val of this TensorflowTensorProto.


        :return: The bool_val of this TensorflowTensorProto.
        :rtype: List[bool]
        """
        return self._bool_val

    @bool_val.setter
    def bool_val(self, bool_val):
        """Sets the bool_val of this TensorflowTensorProto.


        :param bool_val: The bool_val of this TensorflowTensorProto.
        :type bool_val: List[bool]
        """
        if bool_val is not None and len(bool_val) > 2097152:
            raise ValueError("Invalid value for `bool_val`, number of items must be less than or equal to `2097152`")

        self._bool_val = bool_val

    @property
    def dcomplex_val(self):
        """Gets the dcomplex_val of this TensorflowTensorProto.

        DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real and imaginary parts of i-th double precision complex.

        :return: The dcomplex_val of this TensorflowTensorProto.
        :rtype: List[float]
        """
        return self._dcomplex_val

    @dcomplex_val.setter
    def dcomplex_val(self, dcomplex_val):
        """Sets the dcomplex_val of this TensorflowTensorProto.

        DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real and imaginary parts of i-th double precision complex.

        :param dcomplex_val: The dcomplex_val of this TensorflowTensorProto.
        :type dcomplex_val: List[float]
        """
        if dcomplex_val is not None and len(dcomplex_val) > 2097152:
            raise ValueError("Invalid value for `dcomplex_val`, number of items must be less than or equal to `2097152`")

        self._dcomplex_val = dcomplex_val

    @property
    def double_val(self):
        """Gets the double_val of this TensorflowTensorProto.

        DT_DOUBLE.

        :return: The double_val of this TensorflowTensorProto.
        :rtype: List[float]
        """
        return self._double_val

    @double_val.setter
    def double_val(self, double_val):
        """Sets the double_val of this TensorflowTensorProto.

        DT_DOUBLE.

        :param double_val: The double_val of this TensorflowTensorProto.
        :type double_val: List[float]
        """
        if double_val is not None and len(double_val) > 2097152:
            raise ValueError("Invalid value for `double_val`, number of items must be less than or equal to `2097152`")

        self._double_val = double_val

    @property
    def dtype(self):
        """Gets the dtype of this TensorflowTensorProto.


        :return: The dtype of this TensorflowTensorProto.
        :rtype: TensorflowDataType
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this TensorflowTensorProto.


        :param dtype: The dtype of this TensorflowTensorProto.
        :type dtype: TensorflowDataType
        """

        self._dtype = dtype

    @property
    def float_val(self):
        """Gets the float_val of this TensorflowTensorProto.

        DT_FLOAT.

        :return: The float_val of this TensorflowTensorProto.
        :rtype: List[float]
        """
        return self._float_val

    @float_val.setter
    def float_val(self, float_val):
        """Sets the float_val of this TensorflowTensorProto.

        DT_FLOAT.

        :param float_val: The float_val of this TensorflowTensorProto.
        :type float_val: List[float]
        """
        if float_val is not None and len(float_val) > 2097152:
            raise ValueError("Invalid value for `float_val`, number of items must be less than or equal to `2097152`")

        self._float_val = float_val

    @property
    def half_val(self):
        """Gets the half_val of this TensorflowTensorProto.

        DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll have some pointless zero padding for each value here.

        :return: The half_val of this TensorflowTensorProto.
        :rtype: List[int]
        """
        return self._half_val

    @half_val.setter
    def half_val(self, half_val):
        """Sets the half_val of this TensorflowTensorProto.

        DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll have some pointless zero padding for each value here.

        :param half_val: The half_val of this TensorflowTensorProto.
        :type half_val: List[int]
        """
        if half_val is not None and len(half_val) > 2097152:
            raise ValueError("Invalid value for `half_val`, number of items must be less than or equal to `2097152`")

        self._half_val = half_val

    @property
    def int64_val(self):
        """Gets the int64_val of this TensorflowTensorProto.


        :return: The int64_val of this TensorflowTensorProto.
        :rtype: List[str]
        """
        return self._int64_val

    @int64_val.setter
    def int64_val(self, int64_val):
        """Sets the int64_val of this TensorflowTensorProto.


        :param int64_val: The int64_val of this TensorflowTensorProto.
        :type int64_val: List[str]
        """
        if int64_val is not None and len(int64_val) > 2097152:
            raise ValueError("Invalid value for `int64_val`, number of items must be less than or equal to `2097152`")

        self._int64_val = int64_val

    @property
    def int_val(self):
        """Gets the int_val of this TensorflowTensorProto.

        DT_INT32, DT_INT16, DT_INT8, DT_UINT8.

        :return: The int_val of this TensorflowTensorProto.
        :rtype: List[int]
        """
        return self._int_val

    @int_val.setter
    def int_val(self, int_val):
        """Sets the int_val of this TensorflowTensorProto.

        DT_INT32, DT_INT16, DT_INT8, DT_UINT8.

        :param int_val: The int_val of this TensorflowTensorProto.
        :type int_val: List[int]
        """
        if int_val is not None and len(int_val) > 2097152:
            raise ValueError("Invalid value for `int_val`, number of items must be less than or equal to `2097152`")

        self._int_val = int_val

    @property
    def resource_handle_val(self):
        """Gets the resource_handle_val of this TensorflowTensorProto.


        :return: The resource_handle_val of this TensorflowTensorProto.
        :rtype: List[TensorflowResourceHandleProto]
        """
        return self._resource_handle_val

    @resource_handle_val.setter
    def resource_handle_val(self, resource_handle_val):
        """Sets the resource_handle_val of this TensorflowTensorProto.


        :param resource_handle_val: The resource_handle_val of this TensorflowTensorProto.
        :type resource_handle_val: List[TensorflowResourceHandleProto]
        """
        if resource_handle_val is not None and len(resource_handle_val) > 2097152:
            raise ValueError("Invalid value for `resource_handle_val`, number of items must be less than or equal to `2097152`")

        self._resource_handle_val = resource_handle_val

    @property
    def scomplex_val(self):
        """Gets the scomplex_val of this TensorflowTensorProto.

        DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real and imaginary parts of i-th single precision complex.

        :return: The scomplex_val of this TensorflowTensorProto.
        :rtype: List[float]
        """
        return self._scomplex_val

    @scomplex_val.setter
    def scomplex_val(self, scomplex_val):
        """Sets the scomplex_val of this TensorflowTensorProto.

        DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real and imaginary parts of i-th single precision complex.

        :param scomplex_val: The scomplex_val of this TensorflowTensorProto.
        :type scomplex_val: List[float]
        """
        if scomplex_val is not None and len(scomplex_val) > 2097152:
            raise ValueError("Invalid value for `scomplex_val`, number of items must be less than or equal to `2097152`")

        self._scomplex_val = scomplex_val

    @property
    def string_val(self):
        """Gets the string_val of this TensorflowTensorProto.


        :return: The string_val of this TensorflowTensorProto.
        :rtype: List[str]
        """
        return self._string_val

    @string_val.setter
    def string_val(self, string_val):
        """Sets the string_val of this TensorflowTensorProto.


        :param string_val: The string_val of this TensorflowTensorProto.
        :type string_val: List[str]
        """
        if string_val is not None and len(string_val) > 2097152:
            raise ValueError("Invalid value for `string_val`, number of items must be less than or equal to `2097152`")

        self._string_val = string_val

    @property
    def tensor_content(self):
        """Gets the tensor_content of this TensorflowTensorProto.

        Serialized raw tensor content from either Tensor::AsProtoTensorContent or memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation can be used for all tensor types. The purpose of this representation is to reduce serialization overhead during RPC call by avoiding serialization of many repeated small items.

        :return: The tensor_content of this TensorflowTensorProto.
        :rtype: str
        """
        return self._tensor_content

    @tensor_content.setter
    def tensor_content(self, tensor_content):
        """Sets the tensor_content of this TensorflowTensorProto.

        Serialized raw tensor content from either Tensor::AsProtoTensorContent or memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation can be used for all tensor types. The purpose of this representation is to reduce serialization overhead during RPC call by avoiding serialization of many repeated small items.

        :param tensor_content: The tensor_content of this TensorflowTensorProto.
        :type tensor_content: str
        """
        if tensor_content is not None and not re.search(r'.* maxLength: 2097152', tensor_content):
            raise ValueError("Invalid value for `tensor_content`, must be a follow pattern or equal to `/.* maxLength: 2097152/`")

        self._tensor_content = tensor_content

    @property
    def tensor_shape(self):
        """Gets the tensor_shape of this TensorflowTensorProto.


        :return: The tensor_shape of this TensorflowTensorProto.
        :rtype: TensorflowTensorShapeProto
        """
        return self._tensor_shape

    @tensor_shape.setter
    def tensor_shape(self, tensor_shape):
        """Sets the tensor_shape of this TensorflowTensorProto.


        :param tensor_shape: The tensor_shape of this TensorflowTensorProto.
        :type tensor_shape: TensorflowTensorShapeProto
        """

        self._tensor_shape = tensor_shape

    @property
    def uint32_val(self):
        """Gets the uint32_val of this TensorflowTensorProto.


        :return: The uint32_val of this TensorflowTensorProto.
        :rtype: List[int]
        """
        return self._uint32_val

    @uint32_val.setter
    def uint32_val(self, uint32_val):
        """Sets the uint32_val of this TensorflowTensorProto.


        :param uint32_val: The uint32_val of this TensorflowTensorProto.
        :type uint32_val: List[int]
        """
        if uint32_val is not None and len(uint32_val) > 2097152:
            raise ValueError("Invalid value for `uint32_val`, number of items must be less than or equal to `2097152`")

        self._uint32_val = uint32_val

    @property
    def uint64_val(self):
        """Gets the uint64_val of this TensorflowTensorProto.


        :return: The uint64_val of this TensorflowTensorProto.
        :rtype: List[str]
        """
        return self._uint64_val

    @uint64_val.setter
    def uint64_val(self, uint64_val):
        """Sets the uint64_val of this TensorflowTensorProto.


        :param uint64_val: The uint64_val of this TensorflowTensorProto.
        :type uint64_val: List[str]
        """
        if uint64_val is not None and len(uint64_val) > 2097152:
            raise ValueError("Invalid value for `uint64_val`, number of items must be less than or equal to `2097152`")

        self._uint64_val = uint64_val

    @property
    def variant_val(self):
        """Gets the variant_val of this TensorflowTensorProto.


        :return: The variant_val of this TensorflowTensorProto.
        :rtype: List[TensorflowVariantTensorDataProto]
        """
        return self._variant_val

    @variant_val.setter
    def variant_val(self, variant_val):
        """Sets the variant_val of this TensorflowTensorProto.


        :param variant_val: The variant_val of this TensorflowTensorProto.
        :type variant_val: List[TensorflowVariantTensorDataProto]
        """
        if variant_val is not None and len(variant_val) > 2097152:
            raise ValueError("Invalid value for `variant_val`, number of items must be less than or equal to `2097152`")

        self._variant_val = variant_val

    @property
    def version_number(self):
        """Gets the version_number of this TensorflowTensorProto.

        Version number. In version 0, if the \"repeated xxx\" representations contain only one element, that element is repeated to fill the shape.  This makes it easy to represent a constant Tensor with a single value.

        :return: The version_number of this TensorflowTensorProto.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this TensorflowTensorProto.

        Version number. In version 0, if the \"repeated xxx\" representations contain only one element, that element is repeated to fill the shape.  This makes it easy to represent a constant Tensor with a single value.

        :param version_number: The version_number of this TensorflowTensorProto.
        :type version_number: int
        """

        self._version_number = version_number
