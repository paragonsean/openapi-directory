/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GraphRbacManagementClient);
  }
}(this, function(expect, GraphRbacManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GraphRbacManagementClient.ServicePrincipal();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServicePrincipal', function() {
    it('should create an instance of ServicePrincipal', function() {
      // uncomment below and update the code to test ServicePrincipal
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be.a(GraphRbacManagementClient.ServicePrincipal);
    });

    it('should have the property accountEnabled (base name: "accountEnabled")', function() {
      // uncomment below and update the code to test the property accountEnabled
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property alternativeNames (base name: "alternativeNames")', function() {
      // uncomment below and update the code to test the property alternativeNames
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property appDisplayName (base name: "appDisplayName")', function() {
      // uncomment below and update the code to test the property appDisplayName
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property appId (base name: "appId")', function() {
      // uncomment below and update the code to test the property appId
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property appOwnerTenantId (base name: "appOwnerTenantId")', function() {
      // uncomment below and update the code to test the property appOwnerTenantId
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property appRoleAssignmentRequired (base name: "appRoleAssignmentRequired")', function() {
      // uncomment below and update the code to test the property appRoleAssignmentRequired
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property appRoles (base name: "appRoles")', function() {
      // uncomment below and update the code to test the property appRoles
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property errorUrl (base name: "errorUrl")', function() {
      // uncomment below and update the code to test the property errorUrl
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property homepage (base name: "homepage")', function() {
      // uncomment below and update the code to test the property homepage
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property keyCredentials (base name: "keyCredentials")', function() {
      // uncomment below and update the code to test the property keyCredentials
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property logoutUrl (base name: "logoutUrl")', function() {
      // uncomment below and update the code to test the property logoutUrl
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property oauth2Permissions (base name: "oauth2Permissions")', function() {
      // uncomment below and update the code to test the property oauth2Permissions
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property passwordCredentials (base name: "passwordCredentials")', function() {
      // uncomment below and update the code to test the property passwordCredentials
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property preferredTokenSigningKeyThumbprint (base name: "preferredTokenSigningKeyThumbprint")', function() {
      // uncomment below and update the code to test the property preferredTokenSigningKeyThumbprint
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property publisherName (base name: "publisherName")', function() {
      // uncomment below and update the code to test the property publisherName
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property replyUrls (base name: "replyUrls")', function() {
      // uncomment below and update the code to test the property replyUrls
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property samlMetadataUrl (base name: "samlMetadataUrl")', function() {
      // uncomment below and update the code to test the property samlMetadataUrl
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property servicePrincipalNames (base name: "servicePrincipalNames")', function() {
      // uncomment below and update the code to test the property servicePrincipalNames
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property servicePrincipalType (base name: "servicePrincipalType")', function() {
      // uncomment below and update the code to test the property servicePrincipalType
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new GraphRbacManagementClient.ServicePrincipal();
      //expect(instance).to.be();
    });

  });

}));
