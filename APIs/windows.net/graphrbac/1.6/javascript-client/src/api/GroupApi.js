/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ADGroup from '../model/ADGroup';
import CheckGroupMembershipParameters from '../model/CheckGroupMembershipParameters';
import CheckGroupMembershipResult from '../model/CheckGroupMembershipResult';
import DirectoryObjectListResult from '../model/DirectoryObjectListResult';
import GraphError from '../model/GraphError';
import GroupAddMemberParameters from '../model/GroupAddMemberParameters';
import GroupCreateParameters from '../model/GroupCreateParameters';
import GroupGetMemberGroupsParameters from '../model/GroupGetMemberGroupsParameters';
import GroupGetMemberGroupsResult from '../model/GroupGetMemberGroupsResult';
import GroupListResult from '../model/GroupListResult';

/**
* Group service.
* @module api/GroupApi
* @version 1.6
*/
export default class GroupApi {

    /**
    * Constructs a new GroupApi. 
    * @alias module:api/GroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the groupsAddMember operation.
     * @callback module:api/GroupApi~groupsAddMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a member to a group.
     * @param {String} groupObjectId The object ID of the group to which to add the member.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/GroupAddMemberParameters} groupAddMemberParameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param {module:api/GroupApi~groupsAddMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    groupsAddMember(groupObjectId, apiVersion, tenantID, groupAddMemberParameters, callback) {
      let postBody = groupAddMemberParameters;
      // verify the required parameter 'groupObjectId' is set
      if (groupObjectId === undefined || groupObjectId === null) {
        throw new Error("Missing the required parameter 'groupObjectId' when calling groupsAddMember");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsAddMember");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsAddMember");
      }
      // verify the required parameter 'groupAddMemberParameters' is set
      if (groupAddMemberParameters === undefined || groupAddMemberParameters === null) {
        throw new Error("Missing the required parameter 'groupAddMemberParameters' when calling groupsAddMember");
      }

      let pathParams = {
        'groupObjectId': groupObjectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{tenantID}/groups/{groupObjectId}/$links/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsCreate operation.
     * @callback module:api/GroupApi~groupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ADGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group in the directory.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/GroupCreateParameters} groupCreateParameters The parameters for the group to create.
     * @param {module:api/GroupApi~groupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ADGroup}
     */
    groupsCreate(apiVersion, tenantID, groupCreateParameters, callback) {
      let postBody = groupCreateParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsCreate");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsCreate");
      }
      // verify the required parameter 'groupCreateParameters' is set
      if (groupCreateParameters === undefined || groupCreateParameters === null) {
        throw new Error("Missing the required parameter 'groupCreateParameters' when calling groupsCreate");
      }

      let pathParams = {
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ADGroup;
      return this.apiClient.callApi(
        '/{tenantID}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsDelete operation.
     * @callback module:api/GroupApi~groupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group from the directory.
     * @param {String} objectId The object ID of the group to delete.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:api/GroupApi~groupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    groupsDelete(objectId, apiVersion, tenantID, callback) {
      let postBody = null;
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling groupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsDelete");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsDelete");
      }

      let pathParams = {
        'objectId': objectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{tenantID}/groups/{objectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGet operation.
     * @callback module:api/GroupApi~groupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ADGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets group information from the directory.
     * @param {String} objectId The object ID of the user for which to get group information.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:api/GroupApi~groupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ADGroup}
     */
    groupsGet(objectId, apiVersion, tenantID, callback) {
      let postBody = null;
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling groupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsGet");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsGet");
      }

      let pathParams = {
        'objectId': objectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ADGroup;
      return this.apiClient.callApi(
        '/{tenantID}/groups/{objectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetGroupMembers operation.
     * @callback module:api/GroupApi~groupsGetGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DirectoryObjectListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the members of a group.
     * @param {String} objectId The object ID of the group whose members should be retrieved.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:api/GroupApi~groupsGetGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DirectoryObjectListResult}
     */
    groupsGetGroupMembers(objectId, apiVersion, tenantID, callback) {
      let postBody = null;
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling groupsGetGroupMembers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsGetGroupMembers");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsGetGroupMembers");
      }

      let pathParams = {
        'objectId': objectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DirectoryObjectListResult;
      return this.apiClient.callApi(
        '/{tenantID}/groups/{objectId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetMemberGroups operation.
     * @callback module:api/GroupApi~groupsGetMemberGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupGetMemberGroupsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a collection of object IDs of groups of which the specified group is a member.
     * @param {String} objectId The object ID of the group for which to get group membership.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/GroupGetMemberGroupsParameters} groupGetMemberGroupsParameters Group filtering parameters.
     * @param {module:api/GroupApi~groupsGetMemberGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupGetMemberGroupsResult}
     */
    groupsGetMemberGroups(objectId, apiVersion, tenantID, groupGetMemberGroupsParameters, callback) {
      let postBody = groupGetMemberGroupsParameters;
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling groupsGetMemberGroups");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsGetMemberGroups");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsGetMemberGroups");
      }
      // verify the required parameter 'groupGetMemberGroupsParameters' is set
      if (groupGetMemberGroupsParameters === undefined || groupGetMemberGroupsParameters === null) {
        throw new Error("Missing the required parameter 'groupGetMemberGroupsParameters' when calling groupsGetMemberGroups");
      }

      let pathParams = {
        'objectId': objectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = GroupGetMemberGroupsResult;
      return this.apiClient.callApi(
        '/{tenantID}/groups/{objectId}/getMemberGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIsMemberOf operation.
     * @callback module:api/GroupApi~groupsIsMemberOfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckGroupMembershipResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/CheckGroupMembershipParameters} checkGroupMembershipParameters The check group membership parameters.
     * @param {module:api/GroupApi~groupsIsMemberOfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckGroupMembershipResult}
     */
    groupsIsMemberOf(apiVersion, tenantID, checkGroupMembershipParameters, callback) {
      let postBody = checkGroupMembershipParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsIsMemberOf");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsIsMemberOf");
      }
      // verify the required parameter 'checkGroupMembershipParameters' is set
      if (checkGroupMembershipParameters === undefined || checkGroupMembershipParameters === null) {
        throw new Error("Missing the required parameter 'checkGroupMembershipParameters' when calling groupsIsMemberOf");
      }

      let pathParams = {
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = CheckGroupMembershipResult;
      return this.apiClient.callApi(
        '/{tenantID}/isMemberOf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsList operation.
     * @callback module:api/GroupApi~groupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of groups for the current tenant.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply to the operation.
     * @param {module:api/GroupApi~groupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupListResult}
     */
    groupsList(apiVersion, tenantID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsList");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsList");
      }

      let pathParams = {
        'tenantID': tenantID
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = GroupListResult;
      return this.apiClient.callApi(
        '/{tenantID}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsRemoveMember operation.
     * @callback module:api/GroupApi~groupsRemoveMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a member from a group.
     * @param {String} groupObjectId The object ID of the group from which to remove the member.
     * @param {String} memberObjectId Member object id
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:api/GroupApi~groupsRemoveMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    groupsRemoveMember(groupObjectId, memberObjectId, apiVersion, tenantID, callback) {
      let postBody = null;
      // verify the required parameter 'groupObjectId' is set
      if (groupObjectId === undefined || groupObjectId === null) {
        throw new Error("Missing the required parameter 'groupObjectId' when calling groupsRemoveMember");
      }
      // verify the required parameter 'memberObjectId' is set
      if (memberObjectId === undefined || memberObjectId === null) {
        throw new Error("Missing the required parameter 'memberObjectId' when calling groupsRemoveMember");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsRemoveMember");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling groupsRemoveMember");
      }

      let pathParams = {
        'groupObjectId': groupObjectId,
        'memberObjectId': memberObjectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
