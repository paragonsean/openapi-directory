/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GraphError from '../model/GraphError';
import ServicePrincipal from '../model/ServicePrincipal';
import ServicePrincipalCreateParameters from '../model/ServicePrincipalCreateParameters';
import ServicePrincipalListResult from '../model/ServicePrincipalListResult';
import ServicePrincipalUpdateParameters from '../model/ServicePrincipalUpdateParameters';

/**
* ServicePrincipal service.
* @module api/ServicePrincipalApi
* @version 1.6
*/
export default class ServicePrincipalApi {

    /**
    * Constructs a new ServicePrincipalApi. 
    * @alias module:api/ServicePrincipalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the servicePrincipalsCreate operation.
     * @callback module:api/ServicePrincipalApi~servicePrincipalsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicePrincipal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a service principal in the directory.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/ServicePrincipalCreateParameters} servicePrincipalCreateParameters Parameters to create a service principal.
     * @param {module:api/ServicePrincipalApi~servicePrincipalsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicePrincipal}
     */
    servicePrincipalsCreate(apiVersion, tenantID, servicePrincipalCreateParameters, callback) {
      let postBody = servicePrincipalCreateParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicePrincipalsCreate");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling servicePrincipalsCreate");
      }
      // verify the required parameter 'servicePrincipalCreateParameters' is set
      if (servicePrincipalCreateParameters === undefined || servicePrincipalCreateParameters === null) {
        throw new Error("Missing the required parameter 'servicePrincipalCreateParameters' when calling servicePrincipalsCreate");
      }

      let pathParams = {
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServicePrincipal;
      return this.apiClient.callApi(
        '/{tenantID}/servicePrincipals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicePrincipalsDelete operation.
     * @callback module:api/ServicePrincipalApi~servicePrincipalsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a service principal from the directory.
     * @param {String} objectId The object ID of the service principal to delete.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:api/ServicePrincipalApi~servicePrincipalsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicePrincipalsDelete(objectId, apiVersion, tenantID, callback) {
      let postBody = null;
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling servicePrincipalsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicePrincipalsDelete");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling servicePrincipalsDelete");
      }

      let pathParams = {
        'objectId': objectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{tenantID}/servicePrincipals/{objectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicePrincipalsGet operation.
     * @callback module:api/ServicePrincipalApi~servicePrincipalsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicePrincipal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets service principal information from the directory. Query by objectId or pass a filter to query by appId
     * @param {String} objectId The object ID of the service principal to get.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:api/ServicePrincipalApi~servicePrincipalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicePrincipal}
     */
    servicePrincipalsGet(objectId, apiVersion, tenantID, callback) {
      let postBody = null;
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling servicePrincipalsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicePrincipalsGet");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling servicePrincipalsGet");
      }

      let pathParams = {
        'objectId': objectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServicePrincipal;
      return this.apiClient.callApi(
        '/{tenantID}/servicePrincipals/{objectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicePrincipalsList operation.
     * @callback module:api/ServicePrincipalApi~servicePrincipalsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicePrincipalListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of service principals from the current tenant.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply to the operation.
     * @param {module:api/ServicePrincipalApi~servicePrincipalsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicePrincipalListResult}
     */
    servicePrincipalsList(apiVersion, tenantID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicePrincipalsList");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling servicePrincipalsList");
      }

      let pathParams = {
        'tenantID': tenantID
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServicePrincipalListResult;
      return this.apiClient.callApi(
        '/{tenantID}/servicePrincipals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicePrincipalsUpdate operation.
     * @callback module:api/ServicePrincipalApi~servicePrincipalsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a service principal in the directory.
     * @param {String} objectId The object ID of the service principal to delete.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/ServicePrincipalUpdateParameters} servicePrincipalUpdateParameters Parameters to update a service principal.
     * @param {module:api/ServicePrincipalApi~servicePrincipalsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicePrincipalsUpdate(objectId, apiVersion, tenantID, servicePrincipalUpdateParameters, callback) {
      let postBody = servicePrincipalUpdateParameters;
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling servicePrincipalsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicePrincipalsUpdate");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling servicePrincipalsUpdate");
      }
      // verify the required parameter 'servicePrincipalUpdateParameters' is set
      if (servicePrincipalUpdateParameters === undefined || servicePrincipalUpdateParameters === null) {
        throw new Error("Missing the required parameter 'servicePrincipalUpdateParameters' when calling servicePrincipalsUpdate");
      }

      let pathParams = {
        'objectId': objectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{tenantID}/servicePrincipals/{objectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
