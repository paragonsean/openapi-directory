/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GraphError from '../model/GraphError';
import User from '../model/User';
import UserCreateParameters from '../model/UserCreateParameters';
import UserGetMemberGroupsParameters from '../model/UserGetMemberGroupsParameters';
import UserGetMemberGroupsResult from '../model/UserGetMemberGroupsResult';
import UserListResult from '../model/UserListResult';
import UserUpdateParameters from '../model/UserUpdateParameters';

/**
* User service.
* @module api/UserApi
* @version 1.6
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersCreate operation.
     * @callback module:api/UserApi~usersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/UserCreateParameters} userCreateParameters Parameters to create a user.
     * @param {module:api/UserApi~usersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersCreate(apiVersion, tenantID, userCreateParameters, callback) {
      let postBody = userCreateParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersCreate");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling usersCreate");
      }
      // verify the required parameter 'userCreateParameters' is set
      if (userCreateParameters === undefined || userCreateParameters === null) {
        throw new Error("Missing the required parameter 'userCreateParameters' when calling usersCreate");
      }

      let pathParams = {
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/{tenantID}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDelete operation.
     * @callback module:api/UserApi~usersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user.
     * @param {String} upnOrObjectId The object ID or principal name of the user to delete.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:api/UserApi~usersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDelete(upnOrObjectId, apiVersion, tenantID, callback) {
      let postBody = null;
      // verify the required parameter 'upnOrObjectId' is set
      if (upnOrObjectId === undefined || upnOrObjectId === null) {
        throw new Error("Missing the required parameter 'upnOrObjectId' when calling usersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersDelete");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling usersDelete");
      }

      let pathParams = {
        'upnOrObjectId': upnOrObjectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{tenantID}/users/{upnOrObjectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UserApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets user information from the directory.
     * @param {String} upnOrObjectId The object ID or principal name of the user for which to get information.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:api/UserApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersGet(upnOrObjectId, apiVersion, tenantID, callback) {
      let postBody = null;
      // verify the required parameter 'upnOrObjectId' is set
      if (upnOrObjectId === undefined || upnOrObjectId === null) {
        throw new Error("Missing the required parameter 'upnOrObjectId' when calling usersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGet");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling usersGet");
      }

      let pathParams = {
        'upnOrObjectId': upnOrObjectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/{tenantID}/users/{upnOrObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetMemberGroups operation.
     * @callback module:api/UserApi~usersGetMemberGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGetMemberGroupsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     * @param {String} objectId The object ID of the user for which to get group membership.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/UserGetMemberGroupsParameters} userGetMemberGroupsParameters User filtering parameters.
     * @param {module:api/UserApi~usersGetMemberGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGetMemberGroupsResult}
     */
    usersGetMemberGroups(objectId, apiVersion, tenantID, userGetMemberGroupsParameters, callback) {
      let postBody = userGetMemberGroupsParameters;
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling usersGetMemberGroups");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetMemberGroups");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling usersGetMemberGroups");
      }
      // verify the required parameter 'userGetMemberGroupsParameters' is set
      if (userGetMemberGroupsParameters === undefined || userGetMemberGroupsParameters === null) {
        throw new Error("Missing the required parameter 'userGetMemberGroupsParameters' when calling usersGetMemberGroups");
      }

      let pathParams = {
        'objectId': objectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = UserGetMemberGroupsResult;
      return this.apiClient.callApi(
        '/{tenantID}/users/{objectId}/getMemberGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersList operation.
     * @callback module:api/UserApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of users for the current tenant.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply to the operation.
     * @param {String} [expand] The expand value for the operation result.
     * @param {Number} [top = 100)] (Optional) Set the maximum number of results per response.
     * @param {module:api/UserApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserListResult}
     */
    usersList(apiVersion, tenantID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersList");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling usersList");
      }

      let pathParams = {
        'tenantID': tenantID
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$expand': opts['expand'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = UserListResult;
      return this.apiClient.callApi(
        '/{tenantID}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdate operation.
     * @callback module:api/UserApi~usersUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user.
     * @param {String} upnOrObjectId The object ID or principal name of the user to update.
     * @param {String} apiVersion Client API version.
     * @param {String} tenantID The tenant ID.
     * @param {module:model/UserUpdateParameters} userUpdateParameters Parameters to update an existing user.
     * @param {module:api/UserApi~usersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUpdate(upnOrObjectId, apiVersion, tenantID, userUpdateParameters, callback) {
      let postBody = userUpdateParameters;
      // verify the required parameter 'upnOrObjectId' is set
      if (upnOrObjectId === undefined || upnOrObjectId === null) {
        throw new Error("Missing the required parameter 'upnOrObjectId' when calling usersUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersUpdate");
      }
      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling usersUpdate");
      }
      // verify the required parameter 'userUpdateParameters' is set
      if (userUpdateParameters === undefined || userUpdateParameters === null) {
        throw new Error("Missing the required parameter 'userUpdateParameters' when calling usersUpdate");
      }

      let pathParams = {
        'upnOrObjectId': upnOrObjectId,
        'tenantID': tenantID
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{tenantID}/users/{upnOrObjectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
