/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyCredential from './KeyCredential';
import PasswordCredential from './PasswordCredential';
import ServicePrincipalBase from './ServicePrincipalBase';

/**
 * The ServicePrincipalUpdateParameters model module.
 * @module model/ServicePrincipalUpdateParameters
 * @version 1.6
 */
class ServicePrincipalUpdateParameters {
    /**
     * Constructs a new <code>ServicePrincipalUpdateParameters</code>.
     * Request parameters for update an existing service principal.
     * @alias module:model/ServicePrincipalUpdateParameters
     * @implements module:model/ServicePrincipalBase
     */
    constructor() { 
        ServicePrincipalBase.initialize(this);
        ServicePrincipalUpdateParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServicePrincipalUpdateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServicePrincipalUpdateParameters} obj Optional instance to populate.
     * @return {module:model/ServicePrincipalUpdateParameters} The populated <code>ServicePrincipalUpdateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServicePrincipalUpdateParameters();
            ServicePrincipalBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('accountEnabled')) {
                obj['accountEnabled'] = ApiClient.convertToType(data['accountEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('appRoleAssignmentRequired')) {
                obj['appRoleAssignmentRequired'] = ApiClient.convertToType(data['appRoleAssignmentRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('keyCredentials')) {
                obj['keyCredentials'] = ApiClient.convertToType(data['keyCredentials'], [KeyCredential]);
            }
            if (data.hasOwnProperty('passwordCredentials')) {
                obj['passwordCredentials'] = ApiClient.convertToType(data['passwordCredentials'], [PasswordCredential]);
            }
            if (data.hasOwnProperty('servicePrincipalType')) {
                obj['servicePrincipalType'] = ApiClient.convertToType(data['servicePrincipalType'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServicePrincipalUpdateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServicePrincipalUpdateParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['keyCredentials'])) {
            throw new Error("Expected the field `keyCredentials` to be an array in the JSON data but got " + data['keyCredentials']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['passwordCredentials'])) {
            throw new Error("Expected the field `passwordCredentials` to be an array in the JSON data but got " + data['passwordCredentials']);
        }
        // ensure the json data is a string
        if (data['servicePrincipalType'] && !(typeof data['servicePrincipalType'] === 'string' || data['servicePrincipalType'] instanceof String)) {
            throw new Error("Expected the field `servicePrincipalType` to be a primitive type in the JSON string but got " + data['servicePrincipalType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * whether or not the service principal account is enabled
 * @member {Boolean} accountEnabled
 */
ServicePrincipalUpdateParameters.prototype['accountEnabled'] = undefined;

/**
 * Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.
 * @member {Boolean} appRoleAssignmentRequired
 */
ServicePrincipalUpdateParameters.prototype['appRoleAssignmentRequired'] = undefined;

/**
 * The collection of key credentials associated with the service principal.
 * @member {Array.<module:model/KeyCredential>} keyCredentials
 */
ServicePrincipalUpdateParameters.prototype['keyCredentials'] = undefined;

/**
 * The collection of password credentials associated with the service principal.
 * @member {Array.<module:model/PasswordCredential>} passwordCredentials
 */
ServicePrincipalUpdateParameters.prototype['passwordCredentials'] = undefined;

/**
 * the type of the service principal
 * @member {String} servicePrincipalType
 */
ServicePrincipalUpdateParameters.prototype['servicePrincipalType'] = undefined;

/**
 * Optional list of tags that you can apply to your service principals. Not nullable.
 * @member {Array.<String>} tags
 */
ServicePrincipalUpdateParameters.prototype['tags'] = undefined;


// Implement ServicePrincipalBase interface:
/**
 * whether or not the service principal account is enabled
 * @member {Boolean} accountEnabled
 */
ServicePrincipalBase.prototype['accountEnabled'] = undefined;
/**
 * Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.
 * @member {Boolean} appRoleAssignmentRequired
 */
ServicePrincipalBase.prototype['appRoleAssignmentRequired'] = undefined;
/**
 * The collection of key credentials associated with the service principal.
 * @member {Array.<module:model/KeyCredential>} keyCredentials
 */
ServicePrincipalBase.prototype['keyCredentials'] = undefined;
/**
 * The collection of password credentials associated with the service principal.
 * @member {Array.<module:model/PasswordCredential>} passwordCredentials
 */
ServicePrincipalBase.prototype['passwordCredentials'] = undefined;
/**
 * the type of the service principal
 * @member {String} servicePrincipalType
 */
ServicePrincipalBase.prototype['servicePrincipalType'] = undefined;
/**
 * Optional list of tags that you can apply to your service principals. Not nullable.
 * @member {Array.<String>} tags
 */
ServicePrincipalBase.prototype['tags'] = undefined;




export default ServicePrincipalUpdateParameters;

