/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OAuth2PermissionGrant model module.
 * @module model/OAuth2PermissionGrant
 * @version 1.6
 */
class OAuth2PermissionGrant {
    /**
     * Constructs a new <code>OAuth2PermissionGrant</code>.
     * @alias module:model/OAuth2PermissionGrant
     */
    constructor() { 
        
        OAuth2PermissionGrant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OAuth2PermissionGrant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OAuth2PermissionGrant} obj Optional instance to populate.
     * @return {module:model/OAuth2PermissionGrant} The populated <code>OAuth2PermissionGrant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuth2PermissionGrant();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('consentType')) {
                obj['consentType'] = ApiClient.convertToType(data['consentType'], 'String');
            }
            if (data.hasOwnProperty('expiryTime')) {
                obj['expiryTime'] = ApiClient.convertToType(data['expiryTime'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('odata.type')) {
                obj['odata.type'] = ApiClient.convertToType(data['odata.type'], 'String');
            }
            if (data.hasOwnProperty('principalId')) {
                obj['principalId'] = ApiClient.convertToType(data['principalId'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OAuth2PermissionGrant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OAuth2PermissionGrant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['consentType'] && !(typeof data['consentType'] === 'string' || data['consentType'] instanceof String)) {
            throw new Error("Expected the field `consentType` to be a primitive type in the JSON string but got " + data['consentType']);
        }
        // ensure the json data is a string
        if (data['expiryTime'] && !(typeof data['expiryTime'] === 'string' || data['expiryTime'] instanceof String)) {
            throw new Error("Expected the field `expiryTime` to be a primitive type in the JSON string but got " + data['expiryTime']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['odata.type'] && !(typeof data['odata.type'] === 'string' || data['odata.type'] instanceof String)) {
            throw new Error("Expected the field `odata.type` to be a primitive type in the JSON string but got " + data['odata.type']);
        }
        // ensure the json data is a string
        if (data['principalId'] && !(typeof data['principalId'] === 'string' || data['principalId'] instanceof String)) {
            throw new Error("Expected the field `principalId` to be a primitive type in the JSON string but got " + data['principalId']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * The id of the resource's service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property).
 * @member {String} clientId
 */
OAuth2PermissionGrant.prototype['clientId'] = undefined;

/**
 * Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.
 * @member {module:model/OAuth2PermissionGrant.ConsentTypeEnum} consentType
 */
OAuth2PermissionGrant.prototype['consentType'] = undefined;

/**
 * Expiry time for TTL
 * @member {String} expiryTime
 */
OAuth2PermissionGrant.prototype['expiryTime'] = undefined;

/**
 * The id of the permission grant
 * @member {String} objectId
 */
OAuth2PermissionGrant.prototype['objectId'] = undefined;

/**
 * Microsoft.DirectoryServices.OAuth2PermissionGrant
 * @member {String} odata.type
 */
OAuth2PermissionGrant.prototype['odata.type'] = undefined;

/**
 * When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user.
 * @member {String} principalId
 */
OAuth2PermissionGrant.prototype['principalId'] = undefined;

/**
 * Object Id of the resource you want to grant
 * @member {String} resourceId
 */
OAuth2PermissionGrant.prototype['resourceId'] = undefined;

/**
 * Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read
 * @member {String} scope
 */
OAuth2PermissionGrant.prototype['scope'] = undefined;

/**
 * Start time for TTL
 * @member {String} startTime
 */
OAuth2PermissionGrant.prototype['startTime'] = undefined;





/**
 * Allowed values for the <code>consentType</code> property.
 * @enum {String}
 * @readonly
 */
OAuth2PermissionGrant['ConsentTypeEnum'] = {

    /**
     * value: "AllPrincipals"
     * @const
     */
    "AllPrincipals": "AllPrincipals",

    /**
     * value: "Principal"
     * @const
     */
    "Principal": "Principal"
};



export default OAuth2PermissionGrant;

