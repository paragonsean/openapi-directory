/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectoryObject from './DirectoryObject';

/**
 * The AppRoleAssignment model module.
 * @module model/AppRoleAssignment
 * @version 1.6
 */
class AppRoleAssignment {
    /**
     * Constructs a new <code>AppRoleAssignment</code>.
     * AppRoleAssignment information.
     * @alias module:model/AppRoleAssignment
     * @extends module:model/DirectoryObject
     * @implements module:model/DirectoryObject
     * @param objectType {String} The object type.
     */
    constructor(objectType) { 
        DirectoryObject.initialize(this, objectType);
        AppRoleAssignment.initialize(this, objectType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectType) { 
    }

    /**
     * Constructs a <code>AppRoleAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppRoleAssignment} obj Optional instance to populate.
     * @return {module:model/AppRoleAssignment} The populated <code>AppRoleAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppRoleAssignment();
            DirectoryObject.constructFromObject(data, obj);
            DirectoryObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('principalDisplayName')) {
                obj['principalDisplayName'] = ApiClient.convertToType(data['principalDisplayName'], 'String');
            }
            if (data.hasOwnProperty('principalId')) {
                obj['principalId'] = ApiClient.convertToType(data['principalId'], 'String');
            }
            if (data.hasOwnProperty('principalType')) {
                obj['principalType'] = ApiClient.convertToType(data['principalType'], 'String');
            }
            if (data.hasOwnProperty('resourceDisplayName')) {
                obj['resourceDisplayName'] = ApiClient.convertToType(data['resourceDisplayName'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppRoleAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppRoleAssignment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppRoleAssignment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['principalDisplayName'] && !(typeof data['principalDisplayName'] === 'string' || data['principalDisplayName'] instanceof String)) {
            throw new Error("Expected the field `principalDisplayName` to be a primitive type in the JSON string but got " + data['principalDisplayName']);
        }
        // ensure the json data is a string
        if (data['principalId'] && !(typeof data['principalId'] === 'string' || data['principalId'] instanceof String)) {
            throw new Error("Expected the field `principalId` to be a primitive type in the JSON string but got " + data['principalId']);
        }
        // ensure the json data is a string
        if (data['principalType'] && !(typeof data['principalType'] === 'string' || data['principalType'] instanceof String)) {
            throw new Error("Expected the field `principalType` to be a primitive type in the JSON string but got " + data['principalType']);
        }
        // ensure the json data is a string
        if (data['resourceDisplayName'] && !(typeof data['resourceDisplayName'] === 'string' || data['resourceDisplayName'] instanceof String)) {
            throw new Error("Expected the field `resourceDisplayName` to be a primitive type in the JSON string but got " + data['resourceDisplayName']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }

        return true;
    }


}

AppRoleAssignment.RequiredProperties = ["objectType"];

/**
 * The role id that was assigned to the principal. This role must be declared by the target resource application resourceId in its appRoles property.
 * @member {String} id
 */
AppRoleAssignment.prototype['id'] = undefined;

/**
 * The display name of the principal that was granted the access.
 * @member {String} principalDisplayName
 */
AppRoleAssignment.prototype['principalDisplayName'] = undefined;

/**
 * The unique identifier (objectId) for the principal being granted the access.
 * @member {String} principalId
 */
AppRoleAssignment.prototype['principalId'] = undefined;

/**
 * The type of principal. This can either be \"User\", \"Group\" or \"ServicePrincipal\".
 * @member {String} principalType
 */
AppRoleAssignment.prototype['principalType'] = undefined;

/**
 * The display name of the resource to which the assignment was made.
 * @member {String} resourceDisplayName
 */
AppRoleAssignment.prototype['resourceDisplayName'] = undefined;

/**
 * The unique identifier (objectId) for the target resource (service principal) for which the assignment was made.
 * @member {String} resourceId
 */
AppRoleAssignment.prototype['resourceId'] = undefined;


// Implement DirectoryObject interface:
/**
 * The time at which the directory object was deleted.
 * @member {Date} deletionTimestamp
 */
DirectoryObject.prototype['deletionTimestamp'] = undefined;
/**
 * The object ID.
 * @member {String} objectId
 */
DirectoryObject.prototype['objectId'] = undefined;
/**
 * The object type.
 * @member {String} objectType
 */
DirectoryObject.prototype['objectType'] = undefined;




export default AppRoleAssignment;

