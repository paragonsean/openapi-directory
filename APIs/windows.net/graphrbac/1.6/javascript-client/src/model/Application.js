/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppRole from './AppRole';
import DirectoryObject from './DirectoryObject';
import GroupMembershipClaims from './GroupMembershipClaims';
import InformationalUrl from './InformationalUrl';
import KeyCredential from './KeyCredential';
import OAuth2Permission from './OAuth2Permission';
import OptionalClaims from './OptionalClaims';
import PasswordCredential from './PasswordCredential';
import PreAuthorizedApplication from './PreAuthorizedApplication';
import RequiredResourceAccess from './RequiredResourceAccess';

/**
 * The Application model module.
 * @module model/Application
 * @version 1.6
 */
class Application {
    /**
     * Constructs a new <code>Application</code>.
     * Active Directory application information.
     * @alias module:model/Application
     * @extends module:model/DirectoryObject
     * @implements module:model/DirectoryObject
     * @param objectType {String} The object type.
     */
    constructor(objectType) { 
        DirectoryObject.initialize(this, objectType);
        Application.initialize(this, objectType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectType) { 
    }

    /**
     * Constructs a <code>Application</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Application} obj Optional instance to populate.
     * @return {module:model/Application} The populated <code>Application</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Application();
            DirectoryObject.constructFromObject(data, obj);
            DirectoryObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('allowGuestsSignIn')) {
                obj['allowGuestsSignIn'] = ApiClient.convertToType(data['allowGuestsSignIn'], 'Boolean');
            }
            if (data.hasOwnProperty('allowPassthroughUsers')) {
                obj['allowPassthroughUsers'] = ApiClient.convertToType(data['allowPassthroughUsers'], 'Boolean');
            }
            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('appLogoUrl')) {
                obj['appLogoUrl'] = ApiClient.convertToType(data['appLogoUrl'], 'String');
            }
            if (data.hasOwnProperty('appPermissions')) {
                obj['appPermissions'] = ApiClient.convertToType(data['appPermissions'], ['String']);
            }
            if (data.hasOwnProperty('appRoles')) {
                obj['appRoles'] = ApiClient.convertToType(data['appRoles'], [AppRole]);
            }
            if (data.hasOwnProperty('availableToOtherTenants')) {
                obj['availableToOtherTenants'] = ApiClient.convertToType(data['availableToOtherTenants'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('errorUrl')) {
                obj['errorUrl'] = ApiClient.convertToType(data['errorUrl'], 'String');
            }
            if (data.hasOwnProperty('groupMembershipClaims')) {
                obj['groupMembershipClaims'] = GroupMembershipClaims.constructFromObject(data['groupMembershipClaims']);
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('identifierUris')) {
                obj['identifierUris'] = ApiClient.convertToType(data['identifierUris'], ['String']);
            }
            if (data.hasOwnProperty('informationalUrls')) {
                obj['informationalUrls'] = InformationalUrl.constructFromObject(data['informationalUrls']);
            }
            if (data.hasOwnProperty('isDeviceOnlyAuthSupported')) {
                obj['isDeviceOnlyAuthSupported'] = ApiClient.convertToType(data['isDeviceOnlyAuthSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('keyCredentials')) {
                obj['keyCredentials'] = ApiClient.convertToType(data['keyCredentials'], [KeyCredential]);
            }
            if (data.hasOwnProperty('knownClientApplications')) {
                obj['knownClientApplications'] = ApiClient.convertToType(data['knownClientApplications'], ['String']);
            }
            if (data.hasOwnProperty('logoutUrl')) {
                obj['logoutUrl'] = ApiClient.convertToType(data['logoutUrl'], 'String');
            }
            if (data.hasOwnProperty('oauth2AllowImplicitFlow')) {
                obj['oauth2AllowImplicitFlow'] = ApiClient.convertToType(data['oauth2AllowImplicitFlow'], 'Boolean');
            }
            if (data.hasOwnProperty('oauth2AllowUrlPathMatching')) {
                obj['oauth2AllowUrlPathMatching'] = ApiClient.convertToType(data['oauth2AllowUrlPathMatching'], 'Boolean');
            }
            if (data.hasOwnProperty('oauth2Permissions')) {
                obj['oauth2Permissions'] = ApiClient.convertToType(data['oauth2Permissions'], [OAuth2Permission]);
            }
            if (data.hasOwnProperty('oauth2RequirePostResponse')) {
                obj['oauth2RequirePostResponse'] = ApiClient.convertToType(data['oauth2RequirePostResponse'], 'Boolean');
            }
            if (data.hasOwnProperty('optionalClaims')) {
                obj['optionalClaims'] = OptionalClaims.constructFromObject(data['optionalClaims']);
            }
            if (data.hasOwnProperty('orgRestrictions')) {
                obj['orgRestrictions'] = ApiClient.convertToType(data['orgRestrictions'], ['String']);
            }
            if (data.hasOwnProperty('passwordCredentials')) {
                obj['passwordCredentials'] = ApiClient.convertToType(data['passwordCredentials'], [PasswordCredential]);
            }
            if (data.hasOwnProperty('preAuthorizedApplications')) {
                obj['preAuthorizedApplications'] = ApiClient.convertToType(data['preAuthorizedApplications'], [PreAuthorizedApplication]);
            }
            if (data.hasOwnProperty('publicClient')) {
                obj['publicClient'] = ApiClient.convertToType(data['publicClient'], 'Boolean');
            }
            if (data.hasOwnProperty('publisherDomain')) {
                obj['publisherDomain'] = ApiClient.convertToType(data['publisherDomain'], 'String');
            }
            if (data.hasOwnProperty('replyUrls')) {
                obj['replyUrls'] = ApiClient.convertToType(data['replyUrls'], ['String']);
            }
            if (data.hasOwnProperty('requiredResourceAccess')) {
                obj['requiredResourceAccess'] = ApiClient.convertToType(data['requiredResourceAccess'], [RequiredResourceAccess]);
            }
            if (data.hasOwnProperty('samlMetadataUrl')) {
                obj['samlMetadataUrl'] = ApiClient.convertToType(data['samlMetadataUrl'], 'String');
            }
            if (data.hasOwnProperty('signInAudience')) {
                obj['signInAudience'] = ApiClient.convertToType(data['signInAudience'], 'String');
            }
            if (data.hasOwnProperty('wwwHomepage')) {
                obj['wwwHomepage'] = ApiClient.convertToType(data['wwwHomepage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Application</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Application</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Application.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['appLogoUrl'] && !(typeof data['appLogoUrl'] === 'string' || data['appLogoUrl'] instanceof String)) {
            throw new Error("Expected the field `appLogoUrl` to be a primitive type in the JSON string but got " + data['appLogoUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['appPermissions'])) {
            throw new Error("Expected the field `appPermissions` to be an array in the JSON data but got " + data['appPermissions']);
        }
        if (data['appRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appRoles'])) {
                throw new Error("Expected the field `appRoles` to be an array in the JSON data but got " + data['appRoles']);
            }
            // validate the optional field `appRoles` (array)
            for (const item of data['appRoles']) {
                AppRole.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['errorUrl'] && !(typeof data['errorUrl'] === 'string' || data['errorUrl'] instanceof String)) {
            throw new Error("Expected the field `errorUrl` to be a primitive type in the JSON string but got " + data['errorUrl']);
        }
        // ensure the json data is a string
        if (data['homepage'] && !(typeof data['homepage'] === 'string' || data['homepage'] instanceof String)) {
            throw new Error("Expected the field `homepage` to be a primitive type in the JSON string but got " + data['homepage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['identifierUris'])) {
            throw new Error("Expected the field `identifierUris` to be an array in the JSON data but got " + data['identifierUris']);
        }
        // validate the optional field `informationalUrls`
        if (data['informationalUrls']) { // data not null
          InformationalUrl.validateJSON(data['informationalUrls']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keyCredentials'])) {
            throw new Error("Expected the field `keyCredentials` to be an array in the JSON data but got " + data['keyCredentials']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['knownClientApplications'])) {
            throw new Error("Expected the field `knownClientApplications` to be an array in the JSON data but got " + data['knownClientApplications']);
        }
        // ensure the json data is a string
        if (data['logoutUrl'] && !(typeof data['logoutUrl'] === 'string' || data['logoutUrl'] instanceof String)) {
            throw new Error("Expected the field `logoutUrl` to be a primitive type in the JSON string but got " + data['logoutUrl']);
        }
        if (data['oauth2Permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['oauth2Permissions'])) {
                throw new Error("Expected the field `oauth2Permissions` to be an array in the JSON data but got " + data['oauth2Permissions']);
            }
            // validate the optional field `oauth2Permissions` (array)
            for (const item of data['oauth2Permissions']) {
                OAuth2Permission.validateJSON(item);
            };
        }
        // validate the optional field `optionalClaims`
        if (data['optionalClaims']) { // data not null
          OptionalClaims.validateJSON(data['optionalClaims']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['orgRestrictions'])) {
            throw new Error("Expected the field `orgRestrictions` to be an array in the JSON data but got " + data['orgRestrictions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['passwordCredentials'])) {
            throw new Error("Expected the field `passwordCredentials` to be an array in the JSON data but got " + data['passwordCredentials']);
        }
        if (data['preAuthorizedApplications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['preAuthorizedApplications'])) {
                throw new Error("Expected the field `preAuthorizedApplications` to be an array in the JSON data but got " + data['preAuthorizedApplications']);
            }
            // validate the optional field `preAuthorizedApplications` (array)
            for (const item of data['preAuthorizedApplications']) {
                PreAuthorizedApplication.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['publisherDomain'] && !(typeof data['publisherDomain'] === 'string' || data['publisherDomain'] instanceof String)) {
            throw new Error("Expected the field `publisherDomain` to be a primitive type in the JSON string but got " + data['publisherDomain']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['replyUrls'])) {
            throw new Error("Expected the field `replyUrls` to be an array in the JSON data but got " + data['replyUrls']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requiredResourceAccess'])) {
            throw new Error("Expected the field `requiredResourceAccess` to be an array in the JSON data but got " + data['requiredResourceAccess']);
        }
        // ensure the json data is a string
        if (data['samlMetadataUrl'] && !(typeof data['samlMetadataUrl'] === 'string' || data['samlMetadataUrl'] instanceof String)) {
            throw new Error("Expected the field `samlMetadataUrl` to be a primitive type in the JSON string but got " + data['samlMetadataUrl']);
        }
        // ensure the json data is a string
        if (data['signInAudience'] && !(typeof data['signInAudience'] === 'string' || data['signInAudience'] instanceof String)) {
            throw new Error("Expected the field `signInAudience` to be a primitive type in the JSON string but got " + data['signInAudience']);
        }
        // ensure the json data is a string
        if (data['wwwHomepage'] && !(typeof data['wwwHomepage'] === 'string' || data['wwwHomepage'] instanceof String)) {
            throw new Error("Expected the field `wwwHomepage` to be a primitive type in the JSON string but got " + data['wwwHomepage']);
        }

        return true;
    }


}

Application.RequiredProperties = ["objectType"];

/**
 * A property on the application to indicate if the application accepts other IDPs or not or partially accepts.
 * @member {Boolean} allowGuestsSignIn
 */
Application.prototype['allowGuestsSignIn'] = undefined;

/**
 * Indicates that the application supports pass through users who have no presence in the resource tenant.
 * @member {Boolean} allowPassthroughUsers
 */
Application.prototype['allowPassthroughUsers'] = undefined;

/**
 * The application ID.
 * @member {String} appId
 */
Application.prototype['appId'] = undefined;

/**
 * The url for the application logo image stored in a CDN.
 * @member {String} appLogoUrl
 */
Application.prototype['appLogoUrl'] = undefined;

/**
 * The application permissions.
 * @member {Array.<String>} appPermissions
 */
Application.prototype['appPermissions'] = undefined;

/**
 * The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.
 * @member {Array.<module:model/AppRole>} appRoles
 */
Application.prototype['appRoles'] = undefined;

/**
 * Whether the application is available to other tenants.
 * @member {Boolean} availableToOtherTenants
 */
Application.prototype['availableToOtherTenants'] = undefined;

/**
 * The display name of the application.
 * @member {String} displayName
 */
Application.prototype['displayName'] = undefined;

/**
 * A URL provided by the author of the application to report errors when using the application.
 * @member {String} errorUrl
 */
Application.prototype['errorUrl'] = undefined;

/**
 * @member {module:model/GroupMembershipClaims} groupMembershipClaims
 */
Application.prototype['groupMembershipClaims'] = undefined;

/**
 * The home page of the application.
 * @member {String} homepage
 */
Application.prototype['homepage'] = undefined;

/**
 * A collection of URIs for the application.
 * @member {Array.<String>} identifierUris
 */
Application.prototype['identifierUris'] = undefined;

/**
 * @member {module:model/InformationalUrl} informationalUrls
 */
Application.prototype['informationalUrls'] = undefined;

/**
 * Specifies whether this application supports device authentication without a user. The default is false.
 * @member {Boolean} isDeviceOnlyAuthSupported
 */
Application.prototype['isDeviceOnlyAuthSupported'] = undefined;

/**
 * A collection of KeyCredential objects.
 * @member {Array.<module:model/KeyCredential>} keyCredentials
 */
Application.prototype['keyCredentials'] = undefined;

/**
 * Client applications that are tied to this resource application. Consent to any of the known client applications will result in implicit consent to the resource application through a combined consent dialog (showing the OAuth permission scopes required by the client and the resource).
 * @member {Array.<String>} knownClientApplications
 */
Application.prototype['knownClientApplications'] = undefined;

/**
 * the url of the logout page
 * @member {String} logoutUrl
 */
Application.prototype['logoutUrl'] = undefined;

/**
 * Whether to allow implicit grant flow for OAuth2
 * @member {Boolean} oauth2AllowImplicitFlow
 */
Application.prototype['oauth2AllowImplicitFlow'] = undefined;

/**
 * Specifies whether during a token Request Azure AD will allow path matching of the redirect URI against the applications collection of replyURLs. The default is false.
 * @member {Boolean} oauth2AllowUrlPathMatching
 */
Application.prototype['oauth2AllowUrlPathMatching'] = undefined;

/**
 * The collection of OAuth 2.0 permission scopes that the web API (resource) application exposes to client applications. These permission scopes may be granted to client applications during consent.
 * @member {Array.<module:model/OAuth2Permission>} oauth2Permissions
 */
Application.prototype['oauth2Permissions'] = undefined;

/**
 * Specifies whether, as part of OAuth 2.0 token requests, Azure AD will allow POST requests, as opposed to GET requests. The default is false, which specifies that only GET requests will be allowed.
 * @member {Boolean} oauth2RequirePostResponse
 */
Application.prototype['oauth2RequirePostResponse'] = undefined;

/**
 * @member {module:model/OptionalClaims} optionalClaims
 */
Application.prototype['optionalClaims'] = undefined;

/**
 * A list of tenants allowed to access application.
 * @member {Array.<String>} orgRestrictions
 */
Application.prototype['orgRestrictions'] = undefined;

/**
 * A collection of PasswordCredential objects
 * @member {Array.<module:model/PasswordCredential>} passwordCredentials
 */
Application.prototype['passwordCredentials'] = undefined;

/**
 * list of pre-authorized applications.
 * @member {Array.<module:model/PreAuthorizedApplication>} preAuthorizedApplications
 */
Application.prototype['preAuthorizedApplications'] = undefined;

/**
 * Specifies whether this application is a public client (such as an installed application running on a mobile device). Default is false.
 * @member {Boolean} publicClient
 */
Application.prototype['publicClient'] = undefined;

/**
 * Reliable domain which can be used to identify an application.
 * @member {String} publisherDomain
 */
Application.prototype['publisherDomain'] = undefined;

/**
 * A collection of reply URLs for the application.
 * @member {Array.<String>} replyUrls
 */
Application.prototype['replyUrls'] = undefined;

/**
 * Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.
 * @member {Array.<module:model/RequiredResourceAccess>} requiredResourceAccess
 */
Application.prototype['requiredResourceAccess'] = undefined;

/**
 * The URL to the SAML metadata for the application.
 * @member {String} samlMetadataUrl
 */
Application.prototype['samlMetadataUrl'] = undefined;

/**
 * Audience for signing in to the application (AzureADMyOrganization, AzureADAllOrganizations, AzureADAndMicrosoftAccounts).
 * @member {String} signInAudience
 */
Application.prototype['signInAudience'] = undefined;

/**
 * The primary Web page.
 * @member {String} wwwHomepage
 */
Application.prototype['wwwHomepage'] = undefined;


// Implement DirectoryObject interface:
/**
 * The time at which the directory object was deleted.
 * @member {Date} deletionTimestamp
 */
DirectoryObject.prototype['deletionTimestamp'] = undefined;
/**
 * The object ID.
 * @member {String} objectId
 */
DirectoryObject.prototype['objectId'] = undefined;
/**
 * The object type.
 * @member {String} objectType
 */
DirectoryObject.prototype['objectType'] = undefined;




export default Application;

