/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupCreateParameters model module.
 * @module model/GroupCreateParameters
 * @version 1.6
 */
class GroupCreateParameters {
    /**
     * Constructs a new <code>GroupCreateParameters</code>.
     * Request parameters for creating a new group.
     * @alias module:model/GroupCreateParameters
     * @extends Object
     * @param displayName {String} Group display name
     * @param mailEnabled {module:model/GroupCreateParameters.MailEnabledEnum} Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.
     * @param mailNickname {String} Mail nickname
     * @param securityEnabled {module:model/GroupCreateParameters.SecurityEnabledEnum} Whether the group is a security group. Must be true. This is because only pure security groups can be created using the Graph API.
     */
    constructor(displayName, mailEnabled, mailNickname, securityEnabled) { 
        
        GroupCreateParameters.initialize(this, displayName, mailEnabled, mailNickname, securityEnabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, mailEnabled, mailNickname, securityEnabled) { 
        obj['displayName'] = displayName;
        obj['mailEnabled'] = mailEnabled;
        obj['mailNickname'] = mailNickname;
        obj['securityEnabled'] = securityEnabled;
    }

    /**
     * Constructs a <code>GroupCreateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupCreateParameters} obj Optional instance to populate.
     * @return {module:model/GroupCreateParameters} The populated <code>GroupCreateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupCreateParameters();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('mailEnabled')) {
                obj['mailEnabled'] = ApiClient.convertToType(data['mailEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('mailNickname')) {
                obj['mailNickname'] = ApiClient.convertToType(data['mailNickname'], 'String');
            }
            if (data.hasOwnProperty('securityEnabled')) {
                obj['securityEnabled'] = ApiClient.convertToType(data['securityEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupCreateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupCreateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupCreateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['mailNickname'] && !(typeof data['mailNickname'] === 'string' || data['mailNickname'] instanceof String)) {
            throw new Error("Expected the field `mailNickname` to be a primitive type in the JSON string but got " + data['mailNickname']);
        }

        return true;
    }


}

GroupCreateParameters.RequiredProperties = ["displayName", "mailEnabled", "mailNickname", "securityEnabled"];

/**
 * Group display name
 * @member {String} displayName
 */
GroupCreateParameters.prototype['displayName'] = undefined;

/**
 * Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.
 * @member {module:model/GroupCreateParameters.MailEnabledEnum} mailEnabled
 */
GroupCreateParameters.prototype['mailEnabled'] = undefined;

/**
 * Mail nickname
 * @member {String} mailNickname
 */
GroupCreateParameters.prototype['mailNickname'] = undefined;

/**
 * Whether the group is a security group. Must be true. This is because only pure security groups can be created using the Graph API.
 * @member {module:model/GroupCreateParameters.SecurityEnabledEnum} securityEnabled
 */
GroupCreateParameters.prototype['securityEnabled'] = undefined;





/**
 * Allowed values for the <code>mailEnabled</code> property.
 * @enum {Boolean}
 * @readonly
 */
GroupCreateParameters['MailEnabledEnum'] = {

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};


/**
 * Allowed values for the <code>securityEnabled</code> property.
 * @enum {Boolean}
 * @readonly
 */
GroupCreateParameters['SecurityEnabledEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true"
};



export default GroupCreateParameters;

