/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignInName model module.
 * @module model/SignInName
 * @version 1.6
 */
class SignInName {
    /**
     * Constructs a new <code>SignInName</code>.
     * Contains information about a sign-in name of a local account user in an Azure Active Directory B2C tenant.
     * @alias module:model/SignInName
     * @extends Object
     */
    constructor() { 
        
        SignInName.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SignInName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignInName} obj Optional instance to populate.
     * @return {module:model/SignInName} The populated <code>SignInName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignInName();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignInName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignInName</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * A string value that can be used to classify user sign-in types in your directory, such as 'emailAddress' or 'userName'.
 * @member {String} type
 */
SignInName.prototype['type'] = undefined;

/**
 * The sign-in used by the local account. Must be unique across the company/tenant. For example, 'johnc@example.com'.
 * @member {String} value
 */
SignInName.prototype['value'] = undefined;






export default SignInName;

