/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OptionalClaim from './OptionalClaim';

/**
 * The OptionalClaims model module.
 * @module model/OptionalClaims
 * @version 1.6
 */
class OptionalClaims {
    /**
     * Constructs a new <code>OptionalClaims</code>.
     * Specifying the claims to be included in the token.
     * @alias module:model/OptionalClaims
     */
    constructor() { 
        
        OptionalClaims.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OptionalClaims</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OptionalClaims} obj Optional instance to populate.
     * @return {module:model/OptionalClaims} The populated <code>OptionalClaims</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OptionalClaims();

            if (data.hasOwnProperty('accessToken')) {
                obj['accessToken'] = ApiClient.convertToType(data['accessToken'], [OptionalClaim]);
            }
            if (data.hasOwnProperty('idToken')) {
                obj['idToken'] = ApiClient.convertToType(data['idToken'], [OptionalClaim]);
            }
            if (data.hasOwnProperty('samlToken')) {
                obj['samlToken'] = ApiClient.convertToType(data['samlToken'], [OptionalClaim]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OptionalClaims</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OptionalClaims</code>.
     */
    static validateJSON(data) {
        if (data['accessToken']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accessToken'])) {
                throw new Error("Expected the field `accessToken` to be an array in the JSON data but got " + data['accessToken']);
            }
            // validate the optional field `accessToken` (array)
            for (const item of data['accessToken']) {
                OptionalClaim.validateJSON(item);
            };
        }
        if (data['idToken']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['idToken'])) {
                throw new Error("Expected the field `idToken` to be an array in the JSON data but got " + data['idToken']);
            }
            // validate the optional field `idToken` (array)
            for (const item of data['idToken']) {
                OptionalClaim.validateJSON(item);
            };
        }
        if (data['samlToken']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['samlToken'])) {
                throw new Error("Expected the field `samlToken` to be an array in the JSON data but got " + data['samlToken']);
            }
            // validate the optional field `samlToken` (array)
            for (const item of data['samlToken']) {
                OptionalClaim.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional claims requested to be included in the access token.
 * @member {Array.<module:model/OptionalClaim>} accessToken
 */
OptionalClaims.prototype['accessToken'] = undefined;

/**
 * Optional claims requested to be included in the id token.
 * @member {Array.<module:model/OptionalClaim>} idToken
 */
OptionalClaims.prototype['idToken'] = undefined;

/**
 * Optional claims requested to be included in the saml token.
 * @member {Array.<module:model/OptionalClaim>} samlToken
 */
OptionalClaims.prototype['samlToken'] = undefined;






export default OptionalClaims;

