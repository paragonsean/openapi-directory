/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppRole from './AppRole';
import DirectoryObject from './DirectoryObject';
import KeyCredential from './KeyCredential';
import OAuth2Permission from './OAuth2Permission';
import PasswordCredential from './PasswordCredential';

/**
 * The ServicePrincipal model module.
 * @module model/ServicePrincipal
 * @version 1.6
 */
class ServicePrincipal {
    /**
     * Constructs a new <code>ServicePrincipal</code>.
     * Active Directory service principal information.
     * @alias module:model/ServicePrincipal
     * @extends module:model/DirectoryObject
     * @implements module:model/DirectoryObject
     * @param objectType {String} The object type.
     */
    constructor(objectType) { 
        DirectoryObject.initialize(this, objectType);
        ServicePrincipal.initialize(this, objectType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectType) { 
    }

    /**
     * Constructs a <code>ServicePrincipal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServicePrincipal} obj Optional instance to populate.
     * @return {module:model/ServicePrincipal} The populated <code>ServicePrincipal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServicePrincipal();
            DirectoryObject.constructFromObject(data, obj);
            DirectoryObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('accountEnabled')) {
                obj['accountEnabled'] = ApiClient.convertToType(data['accountEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('alternativeNames')) {
                obj['alternativeNames'] = ApiClient.convertToType(data['alternativeNames'], ['String']);
            }
            if (data.hasOwnProperty('appDisplayName')) {
                obj['appDisplayName'] = ApiClient.convertToType(data['appDisplayName'], 'String');
            }
            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('appOwnerTenantId')) {
                obj['appOwnerTenantId'] = ApiClient.convertToType(data['appOwnerTenantId'], 'String');
            }
            if (data.hasOwnProperty('appRoleAssignmentRequired')) {
                obj['appRoleAssignmentRequired'] = ApiClient.convertToType(data['appRoleAssignmentRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('appRoles')) {
                obj['appRoles'] = ApiClient.convertToType(data['appRoles'], [AppRole]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('errorUrl')) {
                obj['errorUrl'] = ApiClient.convertToType(data['errorUrl'], 'String');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('keyCredentials')) {
                obj['keyCredentials'] = ApiClient.convertToType(data['keyCredentials'], [KeyCredential]);
            }
            if (data.hasOwnProperty('logoutUrl')) {
                obj['logoutUrl'] = ApiClient.convertToType(data['logoutUrl'], 'String');
            }
            if (data.hasOwnProperty('oauth2Permissions')) {
                obj['oauth2Permissions'] = ApiClient.convertToType(data['oauth2Permissions'], [OAuth2Permission]);
            }
            if (data.hasOwnProperty('passwordCredentials')) {
                obj['passwordCredentials'] = ApiClient.convertToType(data['passwordCredentials'], [PasswordCredential]);
            }
            if (data.hasOwnProperty('preferredTokenSigningKeyThumbprint')) {
                obj['preferredTokenSigningKeyThumbprint'] = ApiClient.convertToType(data['preferredTokenSigningKeyThumbprint'], 'String');
            }
            if (data.hasOwnProperty('publisherName')) {
                obj['publisherName'] = ApiClient.convertToType(data['publisherName'], 'String');
            }
            if (data.hasOwnProperty('replyUrls')) {
                obj['replyUrls'] = ApiClient.convertToType(data['replyUrls'], ['String']);
            }
            if (data.hasOwnProperty('samlMetadataUrl')) {
                obj['samlMetadataUrl'] = ApiClient.convertToType(data['samlMetadataUrl'], 'String');
            }
            if (data.hasOwnProperty('servicePrincipalNames')) {
                obj['servicePrincipalNames'] = ApiClient.convertToType(data['servicePrincipalNames'], ['String']);
            }
            if (data.hasOwnProperty('servicePrincipalType')) {
                obj['servicePrincipalType'] = ApiClient.convertToType(data['servicePrincipalType'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServicePrincipal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServicePrincipal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServicePrincipal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alternativeNames'])) {
            throw new Error("Expected the field `alternativeNames` to be an array in the JSON data but got " + data['alternativeNames']);
        }
        // ensure the json data is a string
        if (data['appDisplayName'] && !(typeof data['appDisplayName'] === 'string' || data['appDisplayName'] instanceof String)) {
            throw new Error("Expected the field `appDisplayName` to be a primitive type in the JSON string but got " + data['appDisplayName']);
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['appOwnerTenantId'] && !(typeof data['appOwnerTenantId'] === 'string' || data['appOwnerTenantId'] instanceof String)) {
            throw new Error("Expected the field `appOwnerTenantId` to be a primitive type in the JSON string but got " + data['appOwnerTenantId']);
        }
        if (data['appRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appRoles'])) {
                throw new Error("Expected the field `appRoles` to be an array in the JSON data but got " + data['appRoles']);
            }
            // validate the optional field `appRoles` (array)
            for (const item of data['appRoles']) {
                AppRole.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['errorUrl'] && !(typeof data['errorUrl'] === 'string' || data['errorUrl'] instanceof String)) {
            throw new Error("Expected the field `errorUrl` to be a primitive type in the JSON string but got " + data['errorUrl']);
        }
        // ensure the json data is a string
        if (data['homepage'] && !(typeof data['homepage'] === 'string' || data['homepage'] instanceof String)) {
            throw new Error("Expected the field `homepage` to be a primitive type in the JSON string but got " + data['homepage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keyCredentials'])) {
            throw new Error("Expected the field `keyCredentials` to be an array in the JSON data but got " + data['keyCredentials']);
        }
        // ensure the json data is a string
        if (data['logoutUrl'] && !(typeof data['logoutUrl'] === 'string' || data['logoutUrl'] instanceof String)) {
            throw new Error("Expected the field `logoutUrl` to be a primitive type in the JSON string but got " + data['logoutUrl']);
        }
        if (data['oauth2Permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['oauth2Permissions'])) {
                throw new Error("Expected the field `oauth2Permissions` to be an array in the JSON data but got " + data['oauth2Permissions']);
            }
            // validate the optional field `oauth2Permissions` (array)
            for (const item of data['oauth2Permissions']) {
                OAuth2Permission.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['passwordCredentials'])) {
            throw new Error("Expected the field `passwordCredentials` to be an array in the JSON data but got " + data['passwordCredentials']);
        }
        // ensure the json data is a string
        if (data['preferredTokenSigningKeyThumbprint'] && !(typeof data['preferredTokenSigningKeyThumbprint'] === 'string' || data['preferredTokenSigningKeyThumbprint'] instanceof String)) {
            throw new Error("Expected the field `preferredTokenSigningKeyThumbprint` to be a primitive type in the JSON string but got " + data['preferredTokenSigningKeyThumbprint']);
        }
        // ensure the json data is a string
        if (data['publisherName'] && !(typeof data['publisherName'] === 'string' || data['publisherName'] instanceof String)) {
            throw new Error("Expected the field `publisherName` to be a primitive type in the JSON string but got " + data['publisherName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['replyUrls'])) {
            throw new Error("Expected the field `replyUrls` to be an array in the JSON data but got " + data['replyUrls']);
        }
        // ensure the json data is a string
        if (data['samlMetadataUrl'] && !(typeof data['samlMetadataUrl'] === 'string' || data['samlMetadataUrl'] instanceof String)) {
            throw new Error("Expected the field `samlMetadataUrl` to be a primitive type in the JSON string but got " + data['samlMetadataUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['servicePrincipalNames'])) {
            throw new Error("Expected the field `servicePrincipalNames` to be an array in the JSON data but got " + data['servicePrincipalNames']);
        }
        // ensure the json data is a string
        if (data['servicePrincipalType'] && !(typeof data['servicePrincipalType'] === 'string' || data['servicePrincipalType'] instanceof String)) {
            throw new Error("Expected the field `servicePrincipalType` to be a primitive type in the JSON string but got " + data['servicePrincipalType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

ServicePrincipal.RequiredProperties = ["objectType"];

/**
 * whether or not the service principal account is enabled
 * @member {Boolean} accountEnabled
 */
ServicePrincipal.prototype['accountEnabled'] = undefined;

/**
 * alternative names
 * @member {Array.<String>} alternativeNames
 */
ServicePrincipal.prototype['alternativeNames'] = undefined;

/**
 * The display name exposed by the associated application.
 * @member {String} appDisplayName
 */
ServicePrincipal.prototype['appDisplayName'] = undefined;

/**
 * The application ID.
 * @member {String} appId
 */
ServicePrincipal.prototype['appId'] = undefined;

/**
 * @member {String} appOwnerTenantId
 */
ServicePrincipal.prototype['appOwnerTenantId'] = undefined;

/**
 * Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.
 * @member {Boolean} appRoleAssignmentRequired
 */
ServicePrincipal.prototype['appRoleAssignmentRequired'] = undefined;

/**
 * The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.
 * @member {Array.<module:model/AppRole>} appRoles
 */
ServicePrincipal.prototype['appRoles'] = undefined;

/**
 * The display name of the service principal.
 * @member {String} displayName
 */
ServicePrincipal.prototype['displayName'] = undefined;

/**
 * A URL provided by the author of the associated application to report errors when using the application.
 * @member {String} errorUrl
 */
ServicePrincipal.prototype['errorUrl'] = undefined;

/**
 * The URL to the homepage of the associated application.
 * @member {String} homepage
 */
ServicePrincipal.prototype['homepage'] = undefined;

/**
 * The collection of key credentials associated with the service principal.
 * @member {Array.<module:model/KeyCredential>} keyCredentials
 */
ServicePrincipal.prototype['keyCredentials'] = undefined;

/**
 * A URL provided by the author of the associated application to logout
 * @member {String} logoutUrl
 */
ServicePrincipal.prototype['logoutUrl'] = undefined;

/**
 * The OAuth 2.0 permissions exposed by the associated application.
 * @member {Array.<module:model/OAuth2Permission>} oauth2Permissions
 */
ServicePrincipal.prototype['oauth2Permissions'] = undefined;

/**
 * The collection of password credentials associated with the service principal.
 * @member {Array.<module:model/PasswordCredential>} passwordCredentials
 */
ServicePrincipal.prototype['passwordCredentials'] = undefined;

/**
 * The thumbprint of preferred certificate to sign the token
 * @member {String} preferredTokenSigningKeyThumbprint
 */
ServicePrincipal.prototype['preferredTokenSigningKeyThumbprint'] = undefined;

/**
 * The publisher's name of the associated application
 * @member {String} publisherName
 */
ServicePrincipal.prototype['publisherName'] = undefined;

/**
 * The URLs that user tokens are sent to for sign in with the associated application.  The redirect URIs that the oAuth 2.0 authorization code and access tokens are sent to for the associated application.
 * @member {Array.<String>} replyUrls
 */
ServicePrincipal.prototype['replyUrls'] = undefined;

/**
 * The URL to the SAML metadata of the associated application
 * @member {String} samlMetadataUrl
 */
ServicePrincipal.prototype['samlMetadataUrl'] = undefined;

/**
 * A collection of service principal names.
 * @member {Array.<String>} servicePrincipalNames
 */
ServicePrincipal.prototype['servicePrincipalNames'] = undefined;

/**
 * the type of the service principal
 * @member {String} servicePrincipalType
 */
ServicePrincipal.prototype['servicePrincipalType'] = undefined;

/**
 * Optional list of tags that you can apply to your service principals. Not nullable.
 * @member {Array.<String>} tags
 */
ServicePrincipal.prototype['tags'] = undefined;


// Implement DirectoryObject interface:
/**
 * The time at which the directory object was deleted.
 * @member {Date} deletionTimestamp
 */
DirectoryObject.prototype['deletionTimestamp'] = undefined;
/**
 * The object ID.
 * @member {String} objectId
 */
DirectoryObject.prototype['objectId'] = undefined;
/**
 * The object type.
 * @member {String} objectType
 */
DirectoryObject.prototype['objectType'] = undefined;




export default ServicePrincipal;

