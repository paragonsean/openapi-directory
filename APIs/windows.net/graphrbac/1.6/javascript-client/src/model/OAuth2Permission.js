/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OAuth2Permission model module.
 * @module model/OAuth2Permission
 * @version 1.6
 */
class OAuth2Permission {
    /**
     * Constructs a new <code>OAuth2Permission</code>.
     * Represents an OAuth 2.0 delegated permission scope. The specified OAuth 2.0 delegated permission scopes may be requested by client applications (through the requiredResourceAccess collection on the Application object) when calling a resource application. The oauth2Permissions property of the ServicePrincipal entity and of the Application entity is a collection of OAuth2Permission.
     * @alias module:model/OAuth2Permission
     */
    constructor() { 
        
        OAuth2Permission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OAuth2Permission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OAuth2Permission} obj Optional instance to populate.
     * @return {module:model/OAuth2Permission} The populated <code>OAuth2Permission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuth2Permission();

            if (data.hasOwnProperty('adminConsentDescription')) {
                obj['adminConsentDescription'] = ApiClient.convertToType(data['adminConsentDescription'], 'String');
            }
            if (data.hasOwnProperty('adminConsentDisplayName')) {
                obj['adminConsentDisplayName'] = ApiClient.convertToType(data['adminConsentDisplayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userConsentDescription')) {
                obj['userConsentDescription'] = ApiClient.convertToType(data['userConsentDescription'], 'String');
            }
            if (data.hasOwnProperty('userConsentDisplayName')) {
                obj['userConsentDisplayName'] = ApiClient.convertToType(data['userConsentDisplayName'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OAuth2Permission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OAuth2Permission</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adminConsentDescription'] && !(typeof data['adminConsentDescription'] === 'string' || data['adminConsentDescription'] instanceof String)) {
            throw new Error("Expected the field `adminConsentDescription` to be a primitive type in the JSON string but got " + data['adminConsentDescription']);
        }
        // ensure the json data is a string
        if (data['adminConsentDisplayName'] && !(typeof data['adminConsentDisplayName'] === 'string' || data['adminConsentDisplayName'] instanceof String)) {
            throw new Error("Expected the field `adminConsentDisplayName` to be a primitive type in the JSON string but got " + data['adminConsentDisplayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userConsentDescription'] && !(typeof data['userConsentDescription'] === 'string' || data['userConsentDescription'] instanceof String)) {
            throw new Error("Expected the field `userConsentDescription` to be a primitive type in the JSON string but got " + data['userConsentDescription']);
        }
        // ensure the json data is a string
        if (data['userConsentDisplayName'] && !(typeof data['userConsentDisplayName'] === 'string' || data['userConsentDisplayName'] instanceof String)) {
            throw new Error("Expected the field `userConsentDisplayName` to be a primitive type in the JSON string but got " + data['userConsentDisplayName']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Permission help text that appears in the admin consent and app assignment experiences.
 * @member {String} adminConsentDescription
 */
OAuth2Permission.prototype['adminConsentDescription'] = undefined;

/**
 * Display name for the permission that appears in the admin consent and app assignment experiences.
 * @member {String} adminConsentDisplayName
 */
OAuth2Permission.prototype['adminConsentDisplayName'] = undefined;

/**
 * Unique scope permission identifier inside the oauth2Permissions collection.
 * @member {String} id
 */
OAuth2Permission.prototype['id'] = undefined;

/**
 * When creating or updating a permission, this property must be set to true (which is the default). To delete a permission, this property must first be set to false. At that point, in a subsequent call, the permission may be removed. 
 * @member {Boolean} isEnabled
 */
OAuth2Permission.prototype['isEnabled'] = undefined;

/**
 * Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by a Company Administrator. Possible values are \"User\" or \"Admin\".
 * @member {String} type
 */
OAuth2Permission.prototype['type'] = undefined;

/**
 * Permission help text that appears in the end user consent experience.
 * @member {String} userConsentDescription
 */
OAuth2Permission.prototype['userConsentDescription'] = undefined;

/**
 * Display name for the permission that appears in the end user consent experience.
 * @member {String} userConsentDisplayName
 */
OAuth2Permission.prototype['userConsentDisplayName'] = undefined;

/**
 * The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
 * @member {String} value
 */
OAuth2Permission.prototype['value'] = undefined;






export default OAuth2Permission;

