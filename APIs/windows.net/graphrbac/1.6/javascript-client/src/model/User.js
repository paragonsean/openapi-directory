/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectoryObject from './DirectoryObject';
import SignInName from './SignInName';

/**
 * The User model module.
 * @module model/User
 * @version 1.6
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * Active Directory user information.
     * @alias module:model/User
     * @extends module:model/DirectoryObject
     * @implements module:model/DirectoryObject
     * @param objectType {String} The object type.
     */
    constructor(objectType) { 
        DirectoryObject.initialize(this, objectType);
        User.initialize(this, objectType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectType) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();
            DirectoryObject.constructFromObject(data, obj);
            DirectoryObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('accountEnabled')) {
                obj['accountEnabled'] = ApiClient.convertToType(data['accountEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
            if (data.hasOwnProperty('immutableId')) {
                obj['immutableId'] = ApiClient.convertToType(data['immutableId'], 'String');
            }
            if (data.hasOwnProperty('mail')) {
                obj['mail'] = ApiClient.convertToType(data['mail'], 'String');
            }
            if (data.hasOwnProperty('mailNickname')) {
                obj['mailNickname'] = ApiClient.convertToType(data['mailNickname'], 'String');
            }
            if (data.hasOwnProperty('signInNames')) {
                obj['signInNames'] = ApiClient.convertToType(data['signInNames'], [SignInName]);
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
            if (data.hasOwnProperty('usageLocation')) {
                obj['usageLocation'] = ApiClient.convertToType(data['usageLocation'], 'String');
            }
            if (data.hasOwnProperty('userPrincipalName')) {
                obj['userPrincipalName'] = ApiClient.convertToType(data['userPrincipalName'], 'String');
            }
            if (data.hasOwnProperty('userType')) {
                obj['userType'] = ApiClient.convertToType(data['userType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }
        // ensure the json data is a string
        if (data['immutableId'] && !(typeof data['immutableId'] === 'string' || data['immutableId'] instanceof String)) {
            throw new Error("Expected the field `immutableId` to be a primitive type in the JSON string but got " + data['immutableId']);
        }
        // ensure the json data is a string
        if (data['mail'] && !(typeof data['mail'] === 'string' || data['mail'] instanceof String)) {
            throw new Error("Expected the field `mail` to be a primitive type in the JSON string but got " + data['mail']);
        }
        // ensure the json data is a string
        if (data['mailNickname'] && !(typeof data['mailNickname'] === 'string' || data['mailNickname'] instanceof String)) {
            throw new Error("Expected the field `mailNickname` to be a primitive type in the JSON string but got " + data['mailNickname']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['signInNames'])) {
            throw new Error("Expected the field `signInNames` to be an array in the JSON data but got " + data['signInNames']);
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }
        // ensure the json data is a string
        if (data['usageLocation'] && !(typeof data['usageLocation'] === 'string' || data['usageLocation'] instanceof String)) {
            throw new Error("Expected the field `usageLocation` to be a primitive type in the JSON string but got " + data['usageLocation']);
        }
        // ensure the json data is a string
        if (data['userPrincipalName'] && !(typeof data['userPrincipalName'] === 'string' || data['userPrincipalName'] instanceof String)) {
            throw new Error("Expected the field `userPrincipalName` to be a primitive type in the JSON string but got " + data['userPrincipalName']);
        }
        // ensure the json data is a string
        if (data['userType'] && !(typeof data['userType'] === 'string' || data['userType'] instanceof String)) {
            throw new Error("Expected the field `userType` to be a primitive type in the JSON string but got " + data['userType']);
        }

        return true;
    }


}

User.RequiredProperties = ["objectType"];

/**
 * Whether the account is enabled.
 * @member {Boolean} accountEnabled
 */
User.prototype['accountEnabled'] = undefined;

/**
 * The display name of the user.
 * @member {String} displayName
 */
User.prototype['displayName'] = undefined;

/**
 * The given name for the user.
 * @member {String} givenName
 */
User.prototype['givenName'] = undefined;

/**
 * This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.
 * @member {String} immutableId
 */
User.prototype['immutableId'] = undefined;

/**
 * The primary email address of the user.
 * @member {String} mail
 */
User.prototype['mail'] = undefined;

/**
 * The mail alias for the user.
 * @member {String} mailNickname
 */
User.prototype['mailNickname'] = undefined;

/**
 * The sign-in names of the user.
 * @member {Array.<module:model/SignInName>} signInNames
 */
User.prototype['signInNames'] = undefined;

/**
 * The user's surname (family name or last name).
 * @member {String} surname
 */
User.prototype['surname'] = undefined;

/**
 * A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: \"US\", \"JP\", and \"GB\".
 * @member {String} usageLocation
 */
User.prototype['usageLocation'] = undefined;

/**
 * The principal name of the user.
 * @member {String} userPrincipalName
 */
User.prototype['userPrincipalName'] = undefined;

/**
 * A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'.
 * @member {module:model/User.UserTypeEnum} userType
 */
User.prototype['userType'] = undefined;


// Implement DirectoryObject interface:
/**
 * The time at which the directory object was deleted.
 * @member {Date} deletionTimestamp
 */
DirectoryObject.prototype['deletionTimestamp'] = undefined;
/**
 * The object ID.
 * @member {String} objectId
 */
DirectoryObject.prototype['objectId'] = undefined;
/**
 * The object type.
 * @member {String} objectType
 */
DirectoryObject.prototype['objectType'] = undefined;



/**
 * Allowed values for the <code>userType</code> property.
 * @enum {String}
 * @readonly
 */
User['UserTypeEnum'] = {

    /**
     * value: "Member"
     * @const
     */
    "Member": "Member",

    /**
     * value: "Guest"
     * @const
     */
    "Guest": "Guest"
};



export default User;

