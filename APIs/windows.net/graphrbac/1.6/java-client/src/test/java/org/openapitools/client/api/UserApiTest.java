/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GraphError;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCreateParameters;
import org.openapitools.client.model.UserGetMemberGroupsParameters;
import org.openapitools.client.model.UserGetMemberGroupsResult;
import org.openapitools.client.model.UserListResult;
import org.openapitools.client.model.UserUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Create a new user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersCreateTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        UserCreateParameters userCreateParameters = null;
        User response = api.usersCreate(apiVersion, tenantID, userCreateParameters);
        // TODO: test validations
    }

    /**
     * Delete a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersDeleteTest() throws ApiException {
        String upnOrObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        api.usersDelete(upnOrObjectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Gets user information from the directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String upnOrObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        User response = api.usersGet(upnOrObjectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetMemberGroupsTest() throws ApiException {
        String objectId = null;
        String apiVersion = null;
        String tenantID = null;
        UserGetMemberGroupsParameters userGetMemberGroupsParameters = null;
        UserGetMemberGroupsResult response = api.usersGetMemberGroups(objectId, apiVersion, tenantID, userGetMemberGroupsParameters);
        // TODO: test validations
    }

    /**
     * Gets list of users for the current tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersListTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        String $filter = null;
        String $expand = null;
        Integer $top = null;
        UserListResult response = api.usersList(apiVersion, tenantID, $filter, $expand, $top);
        // TODO: test validations
    }

    /**
     * Updates a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUpdateTest() throws ApiException {
        String upnOrObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        UserUpdateParameters userUpdateParameters = null;
        api.usersUpdate(upnOrObjectId, apiVersion, tenantID, userUpdateParameters);
        // TODO: test validations
    }

}
