/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.ApplicationCreateParameters;
import org.openapitools.client.model.ApplicationListResult;
import org.openapitools.client.model.ApplicationUpdateParameters;
import org.openapitools.client.model.GraphError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Disabled
public class ApplicationApiTest {

    private final ApplicationApi api = new ApplicationApi();

    /**
     * Create a new application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsCreateTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        ApplicationCreateParameters applicationCreateParameters = null;
        Application response = api.applicationsCreate(apiVersion, tenantID, applicationCreateParameters);
        // TODO: test validations
    }

    /**
     * Delete an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsDeleteTest() throws ApiException {
        String applicationObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        api.applicationsDelete(applicationObjectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Get an application by object ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsGetTest() throws ApiException {
        String applicationObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        Application response = api.applicationsGet(applicationObjectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Lists applications by filter parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsListTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        String $filter = null;
        ApplicationListResult response = api.applicationsList(apiVersion, tenantID, $filter);
        // TODO: test validations
    }

    /**
     * Update an existing application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsPatchTest() throws ApiException {
        String applicationObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        ApplicationUpdateParameters applicationUpdateParameters = null;
        api.applicationsPatch(applicationObjectId, apiVersion, tenantID, applicationUpdateParameters);
        // TODO: test validations
    }

    /**
     * Hard-delete an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletedApplicationsHardDeleteTest() throws ApiException {
        String applicationObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        api.deletedApplicationsHardDelete(applicationObjectId, apiVersion, tenantID);
        // TODO: test validations
    }

}
