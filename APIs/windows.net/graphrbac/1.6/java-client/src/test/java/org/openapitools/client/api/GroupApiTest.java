/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ADGroup;
import org.openapitools.client.model.CheckGroupMembershipParameters;
import org.openapitools.client.model.CheckGroupMembershipResult;
import org.openapitools.client.model.DirectoryObjectListResult;
import org.openapitools.client.model.GraphError;
import org.openapitools.client.model.GroupAddMemberParameters;
import org.openapitools.client.model.GroupCreateParameters;
import org.openapitools.client.model.GroupGetMemberGroupsParameters;
import org.openapitools.client.model.GroupGetMemberGroupsResult;
import org.openapitools.client.model.GroupListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupApi
 */
@Disabled
public class GroupApiTest {

    private final GroupApi api = new GroupApi();

    /**
     * Add a member to a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsAddMemberTest() throws ApiException {
        String groupObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        GroupAddMemberParameters groupAddMemberParameters = null;
        api.groupsAddMember(groupObjectId, apiVersion, tenantID, groupAddMemberParameters);
        // TODO: test validations
    }

    /**
     * Create a group in the directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsCreateTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        GroupCreateParameters groupCreateParameters = null;
        ADGroup response = api.groupsCreate(apiVersion, tenantID, groupCreateParameters);
        // TODO: test validations
    }

    /**
     * Delete a group from the directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsDeleteTest() throws ApiException {
        String objectId = null;
        String apiVersion = null;
        String tenantID = null;
        api.groupsDelete(objectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Gets group information from the directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetTest() throws ApiException {
        String objectId = null;
        String apiVersion = null;
        String tenantID = null;
        ADGroup response = api.groupsGet(objectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Gets the members of a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetGroupMembersTest() throws ApiException {
        String objectId = null;
        String apiVersion = null;
        String tenantID = null;
        DirectoryObjectListResult response = api.groupsGetGroupMembers(objectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Gets a collection of object IDs of groups of which the specified group is a member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetMemberGroupsTest() throws ApiException {
        String objectId = null;
        String apiVersion = null;
        String tenantID = null;
        GroupGetMemberGroupsParameters groupGetMemberGroupsParameters = null;
        GroupGetMemberGroupsResult response = api.groupsGetMemberGroups(objectId, apiVersion, tenantID, groupGetMemberGroupsParameters);
        // TODO: test validations
    }

    /**
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIsMemberOfTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        CheckGroupMembershipParameters checkGroupMembershipParameters = null;
        CheckGroupMembershipResult response = api.groupsIsMemberOf(apiVersion, tenantID, checkGroupMembershipParameters);
        // TODO: test validations
    }

    /**
     * Gets list of groups for the current tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsListTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        String $filter = null;
        GroupListResult response = api.groupsList(apiVersion, tenantID, $filter);
        // TODO: test validations
    }

    /**
     * Remove a member from a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsRemoveMemberTest() throws ApiException {
        String groupObjectId = null;
        String memberObjectId = null;
        String apiVersion = null;
        String tenantID = null;
        api.groupsRemoveMember(groupObjectId, memberObjectId, apiVersion, tenantID);
        // TODO: test validations
    }

}
