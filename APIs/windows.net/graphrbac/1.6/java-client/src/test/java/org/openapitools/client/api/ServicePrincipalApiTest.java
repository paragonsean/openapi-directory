/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GraphError;
import org.openapitools.client.model.ServicePrincipal;
import org.openapitools.client.model.ServicePrincipalCreateParameters;
import org.openapitools.client.model.ServicePrincipalListResult;
import org.openapitools.client.model.ServicePrincipalUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicePrincipalApi
 */
@Disabled
public class ServicePrincipalApiTest {

    private final ServicePrincipalApi api = new ServicePrincipalApi();

    /**
     * Creates a service principal in the directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicePrincipalsCreateTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        ServicePrincipalCreateParameters servicePrincipalCreateParameters = null;
        ServicePrincipal response = api.servicePrincipalsCreate(apiVersion, tenantID, servicePrincipalCreateParameters);
        // TODO: test validations
    }

    /**
     * Deletes a service principal from the directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicePrincipalsDeleteTest() throws ApiException {
        String objectId = null;
        String apiVersion = null;
        String tenantID = null;
        api.servicePrincipalsDelete(objectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Gets service principal information from the directory. Query by objectId or pass a filter to query by appId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicePrincipalsGetTest() throws ApiException {
        String objectId = null;
        String apiVersion = null;
        String tenantID = null;
        ServicePrincipal response = api.servicePrincipalsGet(objectId, apiVersion, tenantID);
        // TODO: test validations
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicePrincipalsListTest() throws ApiException {
        String apiVersion = null;
        String tenantID = null;
        String $filter = null;
        ServicePrincipalListResult response = api.servicePrincipalsList(apiVersion, tenantID, $filter);
        // TODO: test validations
    }

    /**
     * Updates a service principal in the directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicePrincipalsUpdateTest() throws ApiException {
        String objectId = null;
        String apiVersion = null;
        String tenantID = null;
        ServicePrincipalUpdateParameters servicePrincipalUpdateParameters = null;
        api.servicePrincipalsUpdate(objectId, apiVersion, tenantID, servicePrincipalUpdateParameters);
        // TODO: test validations
    }

}
