/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyCredential;
import org.openapitools.client.model.PasswordCredential;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request parameters for update an existing service principal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServicePrincipalUpdateParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_ENABLED = "accountEnabled";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ENABLED)
  private Boolean accountEnabled;

  public static final String SERIALIZED_NAME_APP_ROLE_ASSIGNMENT_REQUIRED = "appRoleAssignmentRequired";
  @SerializedName(SERIALIZED_NAME_APP_ROLE_ASSIGNMENT_REQUIRED)
  private Boolean appRoleAssignmentRequired;

  public static final String SERIALIZED_NAME_KEY_CREDENTIALS = "keyCredentials";
  @SerializedName(SERIALIZED_NAME_KEY_CREDENTIALS)
  private List<KeyCredential> keyCredentials = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD_CREDENTIALS = "passwordCredentials";
  @SerializedName(SERIALIZED_NAME_PASSWORD_CREDENTIALS)
  private List<PasswordCredential> passwordCredentials = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_TYPE = "servicePrincipalType";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_TYPE)
  private String servicePrincipalType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public ServicePrincipalUpdateParameters() {
  }

  public ServicePrincipalUpdateParameters accountEnabled(Boolean accountEnabled) {
    this.accountEnabled = accountEnabled;
    return this;
  }

  /**
   * whether or not the service principal account is enabled
   * @return accountEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAccountEnabled() {
    return accountEnabled;
  }

  public void setAccountEnabled(Boolean accountEnabled) {
    this.accountEnabled = accountEnabled;
  }


  public ServicePrincipalUpdateParameters appRoleAssignmentRequired(Boolean appRoleAssignmentRequired) {
    this.appRoleAssignmentRequired = appRoleAssignmentRequired;
    return this;
  }

  /**
   * Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.
   * @return appRoleAssignmentRequired
   */
  @javax.annotation.Nullable
  public Boolean getAppRoleAssignmentRequired() {
    return appRoleAssignmentRequired;
  }

  public void setAppRoleAssignmentRequired(Boolean appRoleAssignmentRequired) {
    this.appRoleAssignmentRequired = appRoleAssignmentRequired;
  }


  public ServicePrincipalUpdateParameters keyCredentials(List<KeyCredential> keyCredentials) {
    this.keyCredentials = keyCredentials;
    return this;
  }

  public ServicePrincipalUpdateParameters addKeyCredentialsItem(KeyCredential keyCredentialsItem) {
    if (this.keyCredentials == null) {
      this.keyCredentials = new ArrayList<>();
    }
    this.keyCredentials.add(keyCredentialsItem);
    return this;
  }

  /**
   * The collection of key credentials associated with the service principal.
   * @return keyCredentials
   */
  @javax.annotation.Nullable
  public List<KeyCredential> getKeyCredentials() {
    return keyCredentials;
  }

  public void setKeyCredentials(List<KeyCredential> keyCredentials) {
    this.keyCredentials = keyCredentials;
  }


  public ServicePrincipalUpdateParameters passwordCredentials(List<PasswordCredential> passwordCredentials) {
    this.passwordCredentials = passwordCredentials;
    return this;
  }

  public ServicePrincipalUpdateParameters addPasswordCredentialsItem(PasswordCredential passwordCredentialsItem) {
    if (this.passwordCredentials == null) {
      this.passwordCredentials = new ArrayList<>();
    }
    this.passwordCredentials.add(passwordCredentialsItem);
    return this;
  }

  /**
   * The collection of password credentials associated with the service principal.
   * @return passwordCredentials
   */
  @javax.annotation.Nullable
  public List<PasswordCredential> getPasswordCredentials() {
    return passwordCredentials;
  }

  public void setPasswordCredentials(List<PasswordCredential> passwordCredentials) {
    this.passwordCredentials = passwordCredentials;
  }


  public ServicePrincipalUpdateParameters servicePrincipalType(String servicePrincipalType) {
    this.servicePrincipalType = servicePrincipalType;
    return this;
  }

  /**
   * the type of the service principal
   * @return servicePrincipalType
   */
  @javax.annotation.Nullable
  public String getServicePrincipalType() {
    return servicePrincipalType;
  }

  public void setServicePrincipalType(String servicePrincipalType) {
    this.servicePrincipalType = servicePrincipalType;
  }


  public ServicePrincipalUpdateParameters tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ServicePrincipalUpdateParameters addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Optional list of tags that you can apply to your service principals. Not nullable.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServicePrincipalUpdateParameters servicePrincipalUpdateParameters = (ServicePrincipalUpdateParameters) o;
    return Objects.equals(this.accountEnabled, servicePrincipalUpdateParameters.accountEnabled) &&
        Objects.equals(this.appRoleAssignmentRequired, servicePrincipalUpdateParameters.appRoleAssignmentRequired) &&
        Objects.equals(this.keyCredentials, servicePrincipalUpdateParameters.keyCredentials) &&
        Objects.equals(this.passwordCredentials, servicePrincipalUpdateParameters.passwordCredentials) &&
        Objects.equals(this.servicePrincipalType, servicePrincipalUpdateParameters.servicePrincipalType) &&
        Objects.equals(this.tags, servicePrincipalUpdateParameters.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountEnabled, appRoleAssignmentRequired, keyCredentials, passwordCredentials, servicePrincipalType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServicePrincipalUpdateParameters {\n");
    sb.append("    accountEnabled: ").append(toIndentedString(accountEnabled)).append("\n");
    sb.append("    appRoleAssignmentRequired: ").append(toIndentedString(appRoleAssignmentRequired)).append("\n");
    sb.append("    keyCredentials: ").append(toIndentedString(keyCredentials)).append("\n");
    sb.append("    passwordCredentials: ").append(toIndentedString(passwordCredentials)).append("\n");
    sb.append("    servicePrincipalType: ").append(toIndentedString(servicePrincipalType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountEnabled");
    openapiFields.add("appRoleAssignmentRequired");
    openapiFields.add("keyCredentials");
    openapiFields.add("passwordCredentials");
    openapiFields.add("servicePrincipalType");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServicePrincipalUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServicePrincipalUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServicePrincipalUpdateParameters is not found in the empty JSON string", ServicePrincipalUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServicePrincipalUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServicePrincipalUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("keyCredentials") != null && !jsonObj.get("keyCredentials").isJsonNull() && !jsonObj.get("keyCredentials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyCredentials` to be an array in the JSON string but got `%s`", jsonObj.get("keyCredentials").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("passwordCredentials") != null && !jsonObj.get("passwordCredentials").isJsonNull() && !jsonObj.get("passwordCredentials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordCredentials` to be an array in the JSON string but got `%s`", jsonObj.get("passwordCredentials").toString()));
      }
      if ((jsonObj.get("servicePrincipalType") != null && !jsonObj.get("servicePrincipalType").isJsonNull()) && !jsonObj.get("servicePrincipalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicePrincipalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicePrincipalType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServicePrincipalUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServicePrincipalUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServicePrincipalUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServicePrincipalUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ServicePrincipalUpdateParameters>() {
           @Override
           public void write(JsonWriter out, ServicePrincipalUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServicePrincipalUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServicePrincipalUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServicePrincipalUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to ServicePrincipalUpdateParameters
   */
  public static ServicePrincipalUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServicePrincipalUpdateParameters.class);
  }

  /**
   * Convert an instance of ServicePrincipalUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

