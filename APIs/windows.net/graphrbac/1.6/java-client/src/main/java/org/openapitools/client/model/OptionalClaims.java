/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OptionalClaim;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifying the claims to be included in the token.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OptionalClaims {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private List<OptionalClaim> accessToken = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private List<OptionalClaim> idToken = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAML_TOKEN = "samlToken";
  @SerializedName(SERIALIZED_NAME_SAML_TOKEN)
  private List<OptionalClaim> samlToken = new ArrayList<>();

  public OptionalClaims() {
  }

  public OptionalClaims accessToken(List<OptionalClaim> accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public OptionalClaims addAccessTokenItem(OptionalClaim accessTokenItem) {
    if (this.accessToken == null) {
      this.accessToken = new ArrayList<>();
    }
    this.accessToken.add(accessTokenItem);
    return this;
  }

  /**
   * Optional claims requested to be included in the access token.
   * @return accessToken
   */
  @javax.annotation.Nullable
  public List<OptionalClaim> getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(List<OptionalClaim> accessToken) {
    this.accessToken = accessToken;
  }


  public OptionalClaims idToken(List<OptionalClaim> idToken) {
    this.idToken = idToken;
    return this;
  }

  public OptionalClaims addIdTokenItem(OptionalClaim idTokenItem) {
    if (this.idToken == null) {
      this.idToken = new ArrayList<>();
    }
    this.idToken.add(idTokenItem);
    return this;
  }

  /**
   * Optional claims requested to be included in the id token.
   * @return idToken
   */
  @javax.annotation.Nullable
  public List<OptionalClaim> getIdToken() {
    return idToken;
  }

  public void setIdToken(List<OptionalClaim> idToken) {
    this.idToken = idToken;
  }


  public OptionalClaims samlToken(List<OptionalClaim> samlToken) {
    this.samlToken = samlToken;
    return this;
  }

  public OptionalClaims addSamlTokenItem(OptionalClaim samlTokenItem) {
    if (this.samlToken == null) {
      this.samlToken = new ArrayList<>();
    }
    this.samlToken.add(samlTokenItem);
    return this;
  }

  /**
   * Optional claims requested to be included in the saml token.
   * @return samlToken
   */
  @javax.annotation.Nullable
  public List<OptionalClaim> getSamlToken() {
    return samlToken;
  }

  public void setSamlToken(List<OptionalClaim> samlToken) {
    this.samlToken = samlToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptionalClaims optionalClaims = (OptionalClaims) o;
    return Objects.equals(this.accessToken, optionalClaims.accessToken) &&
        Objects.equals(this.idToken, optionalClaims.idToken) &&
        Objects.equals(this.samlToken, optionalClaims.samlToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, idToken, samlToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptionalClaims {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    samlToken: ").append(toIndentedString(samlToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessToken");
    openapiFields.add("idToken");
    openapiFields.add("samlToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OptionalClaims
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OptionalClaims.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OptionalClaims is not found in the empty JSON string", OptionalClaims.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OptionalClaims.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OptionalClaims` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) {
        JsonArray jsonArrayaccessToken = jsonObj.getAsJsonArray("accessToken");
        if (jsonArrayaccessToken != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accessToken").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accessToken` to be an array in the JSON string but got `%s`", jsonObj.get("accessToken").toString()));
          }

          // validate the optional field `accessToken` (array)
          for (int i = 0; i < jsonArrayaccessToken.size(); i++) {
            OptionalClaim.validateJsonElement(jsonArrayaccessToken.get(i));
          };
        }
      }
      if (jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) {
        JsonArray jsonArrayidToken = jsonObj.getAsJsonArray("idToken");
        if (jsonArrayidToken != null) {
          // ensure the json data is an array
          if (!jsonObj.get("idToken").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `idToken` to be an array in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
          }

          // validate the optional field `idToken` (array)
          for (int i = 0; i < jsonArrayidToken.size(); i++) {
            OptionalClaim.validateJsonElement(jsonArrayidToken.get(i));
          };
        }
      }
      if (jsonObj.get("samlToken") != null && !jsonObj.get("samlToken").isJsonNull()) {
        JsonArray jsonArraysamlToken = jsonObj.getAsJsonArray("samlToken");
        if (jsonArraysamlToken != null) {
          // ensure the json data is an array
          if (!jsonObj.get("samlToken").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `samlToken` to be an array in the JSON string but got `%s`", jsonObj.get("samlToken").toString()));
          }

          // validate the optional field `samlToken` (array)
          for (int i = 0; i < jsonArraysamlToken.size(); i++) {
            OptionalClaim.validateJsonElement(jsonArraysamlToken.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OptionalClaims.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OptionalClaims' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OptionalClaims> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OptionalClaims.class));

       return (TypeAdapter<T>) new TypeAdapter<OptionalClaims>() {
           @Override
           public void write(JsonWriter out, OptionalClaims value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OptionalClaims read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OptionalClaims given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OptionalClaims
   * @throws IOException if the JSON string is invalid with respect to OptionalClaims
   */
  public static OptionalClaims fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OptionalClaims.class);
  }

  /**
   * Convert an instance of OptionalClaims to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

