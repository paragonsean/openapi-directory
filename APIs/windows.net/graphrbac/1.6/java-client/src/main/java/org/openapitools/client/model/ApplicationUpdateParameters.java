/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppRole;
import org.openapitools.client.model.GroupMembershipClaims;
import org.openapitools.client.model.InformationalUrl;
import org.openapitools.client.model.KeyCredential;
import org.openapitools.client.model.OAuth2Permission;
import org.openapitools.client.model.OptionalClaims;
import org.openapitools.client.model.PasswordCredential;
import org.openapitools.client.model.PreAuthorizedApplication;
import org.openapitools.client.model.RequiredResourceAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request parameters for updating a new application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationUpdateParameters {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IDENTIFIER_URIS = "identifierUris";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_URIS)
  private List<String> identifierUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_GUESTS_SIGN_IN = "allowGuestsSignIn";
  @SerializedName(SERIALIZED_NAME_ALLOW_GUESTS_SIGN_IN)
  private Boolean allowGuestsSignIn;

  public static final String SERIALIZED_NAME_ALLOW_PASSTHROUGH_USERS = "allowPassthroughUsers";
  @SerializedName(SERIALIZED_NAME_ALLOW_PASSTHROUGH_USERS)
  private Boolean allowPassthroughUsers;

  public static final String SERIALIZED_NAME_APP_LOGO_URL = "appLogoUrl";
  @SerializedName(SERIALIZED_NAME_APP_LOGO_URL)
  private String appLogoUrl;

  public static final String SERIALIZED_NAME_APP_PERMISSIONS = "appPermissions";
  @SerializedName(SERIALIZED_NAME_APP_PERMISSIONS)
  private List<String> appPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_ROLES = "appRoles";
  @SerializedName(SERIALIZED_NAME_APP_ROLES)
  private List<AppRole> appRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_TO_OTHER_TENANTS = "availableToOtherTenants";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_TO_OTHER_TENANTS)
  private Boolean availableToOtherTenants;

  public static final String SERIALIZED_NAME_ERROR_URL = "errorUrl";
  @SerializedName(SERIALIZED_NAME_ERROR_URL)
  private String errorUrl;

  public static final String SERIALIZED_NAME_GROUP_MEMBERSHIP_CLAIMS = "groupMembershipClaims";
  @SerializedName(SERIALIZED_NAME_GROUP_MEMBERSHIP_CLAIMS)
  private GroupMembershipClaims groupMembershipClaims;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private String homepage;

  public static final String SERIALIZED_NAME_INFORMATIONAL_URLS = "informationalUrls";
  @SerializedName(SERIALIZED_NAME_INFORMATIONAL_URLS)
  private InformationalUrl informationalUrls;

  public static final String SERIALIZED_NAME_IS_DEVICE_ONLY_AUTH_SUPPORTED = "isDeviceOnlyAuthSupported";
  @SerializedName(SERIALIZED_NAME_IS_DEVICE_ONLY_AUTH_SUPPORTED)
  private Boolean isDeviceOnlyAuthSupported;

  public static final String SERIALIZED_NAME_KEY_CREDENTIALS = "keyCredentials";
  @SerializedName(SERIALIZED_NAME_KEY_CREDENTIALS)
  private List<KeyCredential> keyCredentials = new ArrayList<>();

  public static final String SERIALIZED_NAME_KNOWN_CLIENT_APPLICATIONS = "knownClientApplications";
  @SerializedName(SERIALIZED_NAME_KNOWN_CLIENT_APPLICATIONS)
  private List<String> knownClientApplications = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGOUT_URL = "logoutUrl";
  @SerializedName(SERIALIZED_NAME_LOGOUT_URL)
  private String logoutUrl;

  public static final String SERIALIZED_NAME_OAUTH2_ALLOW_IMPLICIT_FLOW = "oauth2AllowImplicitFlow";
  @SerializedName(SERIALIZED_NAME_OAUTH2_ALLOW_IMPLICIT_FLOW)
  private Boolean oauth2AllowImplicitFlow;

  public static final String SERIALIZED_NAME_OAUTH2_ALLOW_URL_PATH_MATCHING = "oauth2AllowUrlPathMatching";
  @SerializedName(SERIALIZED_NAME_OAUTH2_ALLOW_URL_PATH_MATCHING)
  private Boolean oauth2AllowUrlPathMatching;

  public static final String SERIALIZED_NAME_OAUTH2_PERMISSIONS = "oauth2Permissions";
  @SerializedName(SERIALIZED_NAME_OAUTH2_PERMISSIONS)
  private List<OAuth2Permission> oauth2Permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_OAUTH2_REQUIRE_POST_RESPONSE = "oauth2RequirePostResponse";
  @SerializedName(SERIALIZED_NAME_OAUTH2_REQUIRE_POST_RESPONSE)
  private Boolean oauth2RequirePostResponse;

  public static final String SERIALIZED_NAME_OPTIONAL_CLAIMS = "optionalClaims";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_CLAIMS)
  private OptionalClaims optionalClaims;

  public static final String SERIALIZED_NAME_ORG_RESTRICTIONS = "orgRestrictions";
  @SerializedName(SERIALIZED_NAME_ORG_RESTRICTIONS)
  private List<String> orgRestrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD_CREDENTIALS = "passwordCredentials";
  @SerializedName(SERIALIZED_NAME_PASSWORD_CREDENTIALS)
  private List<PasswordCredential> passwordCredentials = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRE_AUTHORIZED_APPLICATIONS = "preAuthorizedApplications";
  @SerializedName(SERIALIZED_NAME_PRE_AUTHORIZED_APPLICATIONS)
  private List<PreAuthorizedApplication> preAuthorizedApplications = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_CLIENT = "publicClient";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CLIENT)
  private Boolean publicClient;

  public static final String SERIALIZED_NAME_PUBLISHER_DOMAIN = "publisherDomain";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_DOMAIN)
  private String publisherDomain;

  public static final String SERIALIZED_NAME_REPLY_URLS = "replyUrls";
  @SerializedName(SERIALIZED_NAME_REPLY_URLS)
  private List<String> replyUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_RESOURCE_ACCESS = "requiredResourceAccess";
  @SerializedName(SERIALIZED_NAME_REQUIRED_RESOURCE_ACCESS)
  private List<RequiredResourceAccess> requiredResourceAccess = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAML_METADATA_URL = "samlMetadataUrl";
  @SerializedName(SERIALIZED_NAME_SAML_METADATA_URL)
  private String samlMetadataUrl;

  public static final String SERIALIZED_NAME_SIGN_IN_AUDIENCE = "signInAudience";
  @SerializedName(SERIALIZED_NAME_SIGN_IN_AUDIENCE)
  private String signInAudience;

  public static final String SERIALIZED_NAME_WWW_HOMEPAGE = "wwwHomepage";
  @SerializedName(SERIALIZED_NAME_WWW_HOMEPAGE)
  private String wwwHomepage;

  public ApplicationUpdateParameters() {
  }

  public ApplicationUpdateParameters displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the application.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ApplicationUpdateParameters identifierUris(List<String> identifierUris) {
    this.identifierUris = identifierUris;
    return this;
  }

  public ApplicationUpdateParameters addIdentifierUrisItem(String identifierUrisItem) {
    if (this.identifierUris == null) {
      this.identifierUris = new ArrayList<>();
    }
    this.identifierUris.add(identifierUrisItem);
    return this;
  }

  /**
   * A collection of URIs for the application.
   * @return identifierUris
   */
  @javax.annotation.Nullable
  public List<String> getIdentifierUris() {
    return identifierUris;
  }

  public void setIdentifierUris(List<String> identifierUris) {
    this.identifierUris = identifierUris;
  }


  public ApplicationUpdateParameters allowGuestsSignIn(Boolean allowGuestsSignIn) {
    this.allowGuestsSignIn = allowGuestsSignIn;
    return this;
  }

  /**
   * A property on the application to indicate if the application accepts other IDPs or not or partially accepts.
   * @return allowGuestsSignIn
   */
  @javax.annotation.Nullable
  public Boolean getAllowGuestsSignIn() {
    return allowGuestsSignIn;
  }

  public void setAllowGuestsSignIn(Boolean allowGuestsSignIn) {
    this.allowGuestsSignIn = allowGuestsSignIn;
  }


  public ApplicationUpdateParameters allowPassthroughUsers(Boolean allowPassthroughUsers) {
    this.allowPassthroughUsers = allowPassthroughUsers;
    return this;
  }

  /**
   * Indicates that the application supports pass through users who have no presence in the resource tenant.
   * @return allowPassthroughUsers
   */
  @javax.annotation.Nullable
  public Boolean getAllowPassthroughUsers() {
    return allowPassthroughUsers;
  }

  public void setAllowPassthroughUsers(Boolean allowPassthroughUsers) {
    this.allowPassthroughUsers = allowPassthroughUsers;
  }


  public ApplicationUpdateParameters appLogoUrl(String appLogoUrl) {
    this.appLogoUrl = appLogoUrl;
    return this;
  }

  /**
   * The url for the application logo image stored in a CDN.
   * @return appLogoUrl
   */
  @javax.annotation.Nullable
  public String getAppLogoUrl() {
    return appLogoUrl;
  }

  public void setAppLogoUrl(String appLogoUrl) {
    this.appLogoUrl = appLogoUrl;
  }


  public ApplicationUpdateParameters appPermissions(List<String> appPermissions) {
    this.appPermissions = appPermissions;
    return this;
  }

  public ApplicationUpdateParameters addAppPermissionsItem(String appPermissionsItem) {
    if (this.appPermissions == null) {
      this.appPermissions = new ArrayList<>();
    }
    this.appPermissions.add(appPermissionsItem);
    return this;
  }

  /**
   * The application permissions.
   * @return appPermissions
   */
  @javax.annotation.Nullable
  public List<String> getAppPermissions() {
    return appPermissions;
  }

  public void setAppPermissions(List<String> appPermissions) {
    this.appPermissions = appPermissions;
  }


  public ApplicationUpdateParameters appRoles(List<AppRole> appRoles) {
    this.appRoles = appRoles;
    return this;
  }

  public ApplicationUpdateParameters addAppRolesItem(AppRole appRolesItem) {
    if (this.appRoles == null) {
      this.appRoles = new ArrayList<>();
    }
    this.appRoles.add(appRolesItem);
    return this;
  }

  /**
   * The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.
   * @return appRoles
   */
  @javax.annotation.Nullable
  public List<AppRole> getAppRoles() {
    return appRoles;
  }

  public void setAppRoles(List<AppRole> appRoles) {
    this.appRoles = appRoles;
  }


  public ApplicationUpdateParameters availableToOtherTenants(Boolean availableToOtherTenants) {
    this.availableToOtherTenants = availableToOtherTenants;
    return this;
  }

  /**
   * Whether the application is available to other tenants.
   * @return availableToOtherTenants
   */
  @javax.annotation.Nullable
  public Boolean getAvailableToOtherTenants() {
    return availableToOtherTenants;
  }

  public void setAvailableToOtherTenants(Boolean availableToOtherTenants) {
    this.availableToOtherTenants = availableToOtherTenants;
  }


  public ApplicationUpdateParameters errorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
    return this;
  }

  /**
   * A URL provided by the author of the application to report errors when using the application.
   * @return errorUrl
   */
  @javax.annotation.Nullable
  public String getErrorUrl() {
    return errorUrl;
  }

  public void setErrorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
  }


  public ApplicationUpdateParameters groupMembershipClaims(GroupMembershipClaims groupMembershipClaims) {
    this.groupMembershipClaims = groupMembershipClaims;
    return this;
  }

  /**
   * Get groupMembershipClaims
   * @return groupMembershipClaims
   */
  @javax.annotation.Nullable
  public GroupMembershipClaims getGroupMembershipClaims() {
    return groupMembershipClaims;
  }

  public void setGroupMembershipClaims(GroupMembershipClaims groupMembershipClaims) {
    this.groupMembershipClaims = groupMembershipClaims;
  }


  public ApplicationUpdateParameters homepage(String homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * The home page of the application.
   * @return homepage
   */
  @javax.annotation.Nullable
  public String getHomepage() {
    return homepage;
  }

  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }


  public ApplicationUpdateParameters informationalUrls(InformationalUrl informationalUrls) {
    this.informationalUrls = informationalUrls;
    return this;
  }

  /**
   * Get informationalUrls
   * @return informationalUrls
   */
  @javax.annotation.Nullable
  public InformationalUrl getInformationalUrls() {
    return informationalUrls;
  }

  public void setInformationalUrls(InformationalUrl informationalUrls) {
    this.informationalUrls = informationalUrls;
  }


  public ApplicationUpdateParameters isDeviceOnlyAuthSupported(Boolean isDeviceOnlyAuthSupported) {
    this.isDeviceOnlyAuthSupported = isDeviceOnlyAuthSupported;
    return this;
  }

  /**
   * Specifies whether this application supports device authentication without a user. The default is false.
   * @return isDeviceOnlyAuthSupported
   */
  @javax.annotation.Nullable
  public Boolean getIsDeviceOnlyAuthSupported() {
    return isDeviceOnlyAuthSupported;
  }

  public void setIsDeviceOnlyAuthSupported(Boolean isDeviceOnlyAuthSupported) {
    this.isDeviceOnlyAuthSupported = isDeviceOnlyAuthSupported;
  }


  public ApplicationUpdateParameters keyCredentials(List<KeyCredential> keyCredentials) {
    this.keyCredentials = keyCredentials;
    return this;
  }

  public ApplicationUpdateParameters addKeyCredentialsItem(KeyCredential keyCredentialsItem) {
    if (this.keyCredentials == null) {
      this.keyCredentials = new ArrayList<>();
    }
    this.keyCredentials.add(keyCredentialsItem);
    return this;
  }

  /**
   * A collection of KeyCredential objects.
   * @return keyCredentials
   */
  @javax.annotation.Nullable
  public List<KeyCredential> getKeyCredentials() {
    return keyCredentials;
  }

  public void setKeyCredentials(List<KeyCredential> keyCredentials) {
    this.keyCredentials = keyCredentials;
  }


  public ApplicationUpdateParameters knownClientApplications(List<String> knownClientApplications) {
    this.knownClientApplications = knownClientApplications;
    return this;
  }

  public ApplicationUpdateParameters addKnownClientApplicationsItem(String knownClientApplicationsItem) {
    if (this.knownClientApplications == null) {
      this.knownClientApplications = new ArrayList<>();
    }
    this.knownClientApplications.add(knownClientApplicationsItem);
    return this;
  }

  /**
   * Client applications that are tied to this resource application. Consent to any of the known client applications will result in implicit consent to the resource application through a combined consent dialog (showing the OAuth permission scopes required by the client and the resource).
   * @return knownClientApplications
   */
  @javax.annotation.Nullable
  public List<String> getKnownClientApplications() {
    return knownClientApplications;
  }

  public void setKnownClientApplications(List<String> knownClientApplications) {
    this.knownClientApplications = knownClientApplications;
  }


  public ApplicationUpdateParameters logoutUrl(String logoutUrl) {
    this.logoutUrl = logoutUrl;
    return this;
  }

  /**
   * the url of the logout page
   * @return logoutUrl
   */
  @javax.annotation.Nullable
  public String getLogoutUrl() {
    return logoutUrl;
  }

  public void setLogoutUrl(String logoutUrl) {
    this.logoutUrl = logoutUrl;
  }


  public ApplicationUpdateParameters oauth2AllowImplicitFlow(Boolean oauth2AllowImplicitFlow) {
    this.oauth2AllowImplicitFlow = oauth2AllowImplicitFlow;
    return this;
  }

  /**
   * Whether to allow implicit grant flow for OAuth2
   * @return oauth2AllowImplicitFlow
   */
  @javax.annotation.Nullable
  public Boolean getOauth2AllowImplicitFlow() {
    return oauth2AllowImplicitFlow;
  }

  public void setOauth2AllowImplicitFlow(Boolean oauth2AllowImplicitFlow) {
    this.oauth2AllowImplicitFlow = oauth2AllowImplicitFlow;
  }


  public ApplicationUpdateParameters oauth2AllowUrlPathMatching(Boolean oauth2AllowUrlPathMatching) {
    this.oauth2AllowUrlPathMatching = oauth2AllowUrlPathMatching;
    return this;
  }

  /**
   * Specifies whether during a token Request Azure AD will allow path matching of the redirect URI against the applications collection of replyURLs. The default is false.
   * @return oauth2AllowUrlPathMatching
   */
  @javax.annotation.Nullable
  public Boolean getOauth2AllowUrlPathMatching() {
    return oauth2AllowUrlPathMatching;
  }

  public void setOauth2AllowUrlPathMatching(Boolean oauth2AllowUrlPathMatching) {
    this.oauth2AllowUrlPathMatching = oauth2AllowUrlPathMatching;
  }


  public ApplicationUpdateParameters oauth2Permissions(List<OAuth2Permission> oauth2Permissions) {
    this.oauth2Permissions = oauth2Permissions;
    return this;
  }

  public ApplicationUpdateParameters addOauth2PermissionsItem(OAuth2Permission oauth2PermissionsItem) {
    if (this.oauth2Permissions == null) {
      this.oauth2Permissions = new ArrayList<>();
    }
    this.oauth2Permissions.add(oauth2PermissionsItem);
    return this;
  }

  /**
   * The collection of OAuth 2.0 permission scopes that the web API (resource) application exposes to client applications. These permission scopes may be granted to client applications during consent.
   * @return oauth2Permissions
   */
  @javax.annotation.Nullable
  public List<OAuth2Permission> getOauth2Permissions() {
    return oauth2Permissions;
  }

  public void setOauth2Permissions(List<OAuth2Permission> oauth2Permissions) {
    this.oauth2Permissions = oauth2Permissions;
  }


  public ApplicationUpdateParameters oauth2RequirePostResponse(Boolean oauth2RequirePostResponse) {
    this.oauth2RequirePostResponse = oauth2RequirePostResponse;
    return this;
  }

  /**
   * Specifies whether, as part of OAuth 2.0 token requests, Azure AD will allow POST requests, as opposed to GET requests. The default is false, which specifies that only GET requests will be allowed.
   * @return oauth2RequirePostResponse
   */
  @javax.annotation.Nullable
  public Boolean getOauth2RequirePostResponse() {
    return oauth2RequirePostResponse;
  }

  public void setOauth2RequirePostResponse(Boolean oauth2RequirePostResponse) {
    this.oauth2RequirePostResponse = oauth2RequirePostResponse;
  }


  public ApplicationUpdateParameters optionalClaims(OptionalClaims optionalClaims) {
    this.optionalClaims = optionalClaims;
    return this;
  }

  /**
   * Get optionalClaims
   * @return optionalClaims
   */
  @javax.annotation.Nullable
  public OptionalClaims getOptionalClaims() {
    return optionalClaims;
  }

  public void setOptionalClaims(OptionalClaims optionalClaims) {
    this.optionalClaims = optionalClaims;
  }


  public ApplicationUpdateParameters orgRestrictions(List<String> orgRestrictions) {
    this.orgRestrictions = orgRestrictions;
    return this;
  }

  public ApplicationUpdateParameters addOrgRestrictionsItem(String orgRestrictionsItem) {
    if (this.orgRestrictions == null) {
      this.orgRestrictions = new ArrayList<>();
    }
    this.orgRestrictions.add(orgRestrictionsItem);
    return this;
  }

  /**
   * A list of tenants allowed to access application.
   * @return orgRestrictions
   */
  @javax.annotation.Nullable
  public List<String> getOrgRestrictions() {
    return orgRestrictions;
  }

  public void setOrgRestrictions(List<String> orgRestrictions) {
    this.orgRestrictions = orgRestrictions;
  }


  public ApplicationUpdateParameters passwordCredentials(List<PasswordCredential> passwordCredentials) {
    this.passwordCredentials = passwordCredentials;
    return this;
  }

  public ApplicationUpdateParameters addPasswordCredentialsItem(PasswordCredential passwordCredentialsItem) {
    if (this.passwordCredentials == null) {
      this.passwordCredentials = new ArrayList<>();
    }
    this.passwordCredentials.add(passwordCredentialsItem);
    return this;
  }

  /**
   * A collection of PasswordCredential objects
   * @return passwordCredentials
   */
  @javax.annotation.Nullable
  public List<PasswordCredential> getPasswordCredentials() {
    return passwordCredentials;
  }

  public void setPasswordCredentials(List<PasswordCredential> passwordCredentials) {
    this.passwordCredentials = passwordCredentials;
  }


  public ApplicationUpdateParameters preAuthorizedApplications(List<PreAuthorizedApplication> preAuthorizedApplications) {
    this.preAuthorizedApplications = preAuthorizedApplications;
    return this;
  }

  public ApplicationUpdateParameters addPreAuthorizedApplicationsItem(PreAuthorizedApplication preAuthorizedApplicationsItem) {
    if (this.preAuthorizedApplications == null) {
      this.preAuthorizedApplications = new ArrayList<>();
    }
    this.preAuthorizedApplications.add(preAuthorizedApplicationsItem);
    return this;
  }

  /**
   * list of pre-authorized applications.
   * @return preAuthorizedApplications
   */
  @javax.annotation.Nullable
  public List<PreAuthorizedApplication> getPreAuthorizedApplications() {
    return preAuthorizedApplications;
  }

  public void setPreAuthorizedApplications(List<PreAuthorizedApplication> preAuthorizedApplications) {
    this.preAuthorizedApplications = preAuthorizedApplications;
  }


  public ApplicationUpdateParameters publicClient(Boolean publicClient) {
    this.publicClient = publicClient;
    return this;
  }

  /**
   * Specifies whether this application is a public client (such as an installed application running on a mobile device). Default is false.
   * @return publicClient
   */
  @javax.annotation.Nullable
  public Boolean getPublicClient() {
    return publicClient;
  }

  public void setPublicClient(Boolean publicClient) {
    this.publicClient = publicClient;
  }


  public ApplicationUpdateParameters publisherDomain(String publisherDomain) {
    this.publisherDomain = publisherDomain;
    return this;
  }

  /**
   * Reliable domain which can be used to identify an application.
   * @return publisherDomain
   */
  @javax.annotation.Nullable
  public String getPublisherDomain() {
    return publisherDomain;
  }

  public void setPublisherDomain(String publisherDomain) {
    this.publisherDomain = publisherDomain;
  }


  public ApplicationUpdateParameters replyUrls(List<String> replyUrls) {
    this.replyUrls = replyUrls;
    return this;
  }

  public ApplicationUpdateParameters addReplyUrlsItem(String replyUrlsItem) {
    if (this.replyUrls == null) {
      this.replyUrls = new ArrayList<>();
    }
    this.replyUrls.add(replyUrlsItem);
    return this;
  }

  /**
   * A collection of reply URLs for the application.
   * @return replyUrls
   */
  @javax.annotation.Nullable
  public List<String> getReplyUrls() {
    return replyUrls;
  }

  public void setReplyUrls(List<String> replyUrls) {
    this.replyUrls = replyUrls;
  }


  public ApplicationUpdateParameters requiredResourceAccess(List<RequiredResourceAccess> requiredResourceAccess) {
    this.requiredResourceAccess = requiredResourceAccess;
    return this;
  }

  public ApplicationUpdateParameters addRequiredResourceAccessItem(RequiredResourceAccess requiredResourceAccessItem) {
    if (this.requiredResourceAccess == null) {
      this.requiredResourceAccess = new ArrayList<>();
    }
    this.requiredResourceAccess.add(requiredResourceAccessItem);
    return this;
  }

  /**
   * Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.
   * @return requiredResourceAccess
   */
  @javax.annotation.Nullable
  public List<RequiredResourceAccess> getRequiredResourceAccess() {
    return requiredResourceAccess;
  }

  public void setRequiredResourceAccess(List<RequiredResourceAccess> requiredResourceAccess) {
    this.requiredResourceAccess = requiredResourceAccess;
  }


  public ApplicationUpdateParameters samlMetadataUrl(String samlMetadataUrl) {
    this.samlMetadataUrl = samlMetadataUrl;
    return this;
  }

  /**
   * The URL to the SAML metadata for the application.
   * @return samlMetadataUrl
   */
  @javax.annotation.Nullable
  public String getSamlMetadataUrl() {
    return samlMetadataUrl;
  }

  public void setSamlMetadataUrl(String samlMetadataUrl) {
    this.samlMetadataUrl = samlMetadataUrl;
  }


  public ApplicationUpdateParameters signInAudience(String signInAudience) {
    this.signInAudience = signInAudience;
    return this;
  }

  /**
   * Audience for signing in to the application (AzureADMyOrganization, AzureADAllOrganizations, AzureADAndMicrosoftAccounts).
   * @return signInAudience
   */
  @javax.annotation.Nullable
  public String getSignInAudience() {
    return signInAudience;
  }

  public void setSignInAudience(String signInAudience) {
    this.signInAudience = signInAudience;
  }


  public ApplicationUpdateParameters wwwHomepage(String wwwHomepage) {
    this.wwwHomepage = wwwHomepage;
    return this;
  }

  /**
   * The primary Web page.
   * @return wwwHomepage
   */
  @javax.annotation.Nullable
  public String getWwwHomepage() {
    return wwwHomepage;
  }

  public void setWwwHomepage(String wwwHomepage) {
    this.wwwHomepage = wwwHomepage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationUpdateParameters applicationUpdateParameters = (ApplicationUpdateParameters) o;
    return Objects.equals(this.displayName, applicationUpdateParameters.displayName) &&
        Objects.equals(this.identifierUris, applicationUpdateParameters.identifierUris) &&
        Objects.equals(this.allowGuestsSignIn, applicationUpdateParameters.allowGuestsSignIn) &&
        Objects.equals(this.allowPassthroughUsers, applicationUpdateParameters.allowPassthroughUsers) &&
        Objects.equals(this.appLogoUrl, applicationUpdateParameters.appLogoUrl) &&
        Objects.equals(this.appPermissions, applicationUpdateParameters.appPermissions) &&
        Objects.equals(this.appRoles, applicationUpdateParameters.appRoles) &&
        Objects.equals(this.availableToOtherTenants, applicationUpdateParameters.availableToOtherTenants) &&
        Objects.equals(this.errorUrl, applicationUpdateParameters.errorUrl) &&
        Objects.equals(this.groupMembershipClaims, applicationUpdateParameters.groupMembershipClaims) &&
        Objects.equals(this.homepage, applicationUpdateParameters.homepage) &&
        Objects.equals(this.informationalUrls, applicationUpdateParameters.informationalUrls) &&
        Objects.equals(this.isDeviceOnlyAuthSupported, applicationUpdateParameters.isDeviceOnlyAuthSupported) &&
        Objects.equals(this.keyCredentials, applicationUpdateParameters.keyCredentials) &&
        Objects.equals(this.knownClientApplications, applicationUpdateParameters.knownClientApplications) &&
        Objects.equals(this.logoutUrl, applicationUpdateParameters.logoutUrl) &&
        Objects.equals(this.oauth2AllowImplicitFlow, applicationUpdateParameters.oauth2AllowImplicitFlow) &&
        Objects.equals(this.oauth2AllowUrlPathMatching, applicationUpdateParameters.oauth2AllowUrlPathMatching) &&
        Objects.equals(this.oauth2Permissions, applicationUpdateParameters.oauth2Permissions) &&
        Objects.equals(this.oauth2RequirePostResponse, applicationUpdateParameters.oauth2RequirePostResponse) &&
        Objects.equals(this.optionalClaims, applicationUpdateParameters.optionalClaims) &&
        Objects.equals(this.orgRestrictions, applicationUpdateParameters.orgRestrictions) &&
        Objects.equals(this.passwordCredentials, applicationUpdateParameters.passwordCredentials) &&
        Objects.equals(this.preAuthorizedApplications, applicationUpdateParameters.preAuthorizedApplications) &&
        Objects.equals(this.publicClient, applicationUpdateParameters.publicClient) &&
        Objects.equals(this.publisherDomain, applicationUpdateParameters.publisherDomain) &&
        Objects.equals(this.replyUrls, applicationUpdateParameters.replyUrls) &&
        Objects.equals(this.requiredResourceAccess, applicationUpdateParameters.requiredResourceAccess) &&
        Objects.equals(this.samlMetadataUrl, applicationUpdateParameters.samlMetadataUrl) &&
        Objects.equals(this.signInAudience, applicationUpdateParameters.signInAudience) &&
        Objects.equals(this.wwwHomepage, applicationUpdateParameters.wwwHomepage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, identifierUris, allowGuestsSignIn, allowPassthroughUsers, appLogoUrl, appPermissions, appRoles, availableToOtherTenants, errorUrl, groupMembershipClaims, homepage, informationalUrls, isDeviceOnlyAuthSupported, keyCredentials, knownClientApplications, logoutUrl, oauth2AllowImplicitFlow, oauth2AllowUrlPathMatching, oauth2Permissions, oauth2RequirePostResponse, optionalClaims, orgRestrictions, passwordCredentials, preAuthorizedApplications, publicClient, publisherDomain, replyUrls, requiredResourceAccess, samlMetadataUrl, signInAudience, wwwHomepage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationUpdateParameters {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    identifierUris: ").append(toIndentedString(identifierUris)).append("\n");
    sb.append("    allowGuestsSignIn: ").append(toIndentedString(allowGuestsSignIn)).append("\n");
    sb.append("    allowPassthroughUsers: ").append(toIndentedString(allowPassthroughUsers)).append("\n");
    sb.append("    appLogoUrl: ").append(toIndentedString(appLogoUrl)).append("\n");
    sb.append("    appPermissions: ").append(toIndentedString(appPermissions)).append("\n");
    sb.append("    appRoles: ").append(toIndentedString(appRoles)).append("\n");
    sb.append("    availableToOtherTenants: ").append(toIndentedString(availableToOtherTenants)).append("\n");
    sb.append("    errorUrl: ").append(toIndentedString(errorUrl)).append("\n");
    sb.append("    groupMembershipClaims: ").append(toIndentedString(groupMembershipClaims)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    informationalUrls: ").append(toIndentedString(informationalUrls)).append("\n");
    sb.append("    isDeviceOnlyAuthSupported: ").append(toIndentedString(isDeviceOnlyAuthSupported)).append("\n");
    sb.append("    keyCredentials: ").append(toIndentedString(keyCredentials)).append("\n");
    sb.append("    knownClientApplications: ").append(toIndentedString(knownClientApplications)).append("\n");
    sb.append("    logoutUrl: ").append(toIndentedString(logoutUrl)).append("\n");
    sb.append("    oauth2AllowImplicitFlow: ").append(toIndentedString(oauth2AllowImplicitFlow)).append("\n");
    sb.append("    oauth2AllowUrlPathMatching: ").append(toIndentedString(oauth2AllowUrlPathMatching)).append("\n");
    sb.append("    oauth2Permissions: ").append(toIndentedString(oauth2Permissions)).append("\n");
    sb.append("    oauth2RequirePostResponse: ").append(toIndentedString(oauth2RequirePostResponse)).append("\n");
    sb.append("    optionalClaims: ").append(toIndentedString(optionalClaims)).append("\n");
    sb.append("    orgRestrictions: ").append(toIndentedString(orgRestrictions)).append("\n");
    sb.append("    passwordCredentials: ").append(toIndentedString(passwordCredentials)).append("\n");
    sb.append("    preAuthorizedApplications: ").append(toIndentedString(preAuthorizedApplications)).append("\n");
    sb.append("    publicClient: ").append(toIndentedString(publicClient)).append("\n");
    sb.append("    publisherDomain: ").append(toIndentedString(publisherDomain)).append("\n");
    sb.append("    replyUrls: ").append(toIndentedString(replyUrls)).append("\n");
    sb.append("    requiredResourceAccess: ").append(toIndentedString(requiredResourceAccess)).append("\n");
    sb.append("    samlMetadataUrl: ").append(toIndentedString(samlMetadataUrl)).append("\n");
    sb.append("    signInAudience: ").append(toIndentedString(signInAudience)).append("\n");
    sb.append("    wwwHomepage: ").append(toIndentedString(wwwHomepage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowGuestsSignIn");
    openapiFields.add("allowPassthroughUsers");
    openapiFields.add("appLogoUrl");
    openapiFields.add("appPermissions");
    openapiFields.add("appRoles");
    openapiFields.add("availableToOtherTenants");
    openapiFields.add("errorUrl");
    openapiFields.add("groupMembershipClaims");
    openapiFields.add("homepage");
    openapiFields.add("informationalUrls");
    openapiFields.add("isDeviceOnlyAuthSupported");
    openapiFields.add("keyCredentials");
    openapiFields.add("knownClientApplications");
    openapiFields.add("logoutUrl");
    openapiFields.add("oauth2AllowImplicitFlow");
    openapiFields.add("oauth2AllowUrlPathMatching");
    openapiFields.add("oauth2Permissions");
    openapiFields.add("oauth2RequirePostResponse");
    openapiFields.add("optionalClaims");
    openapiFields.add("orgRestrictions");
    openapiFields.add("passwordCredentials");
    openapiFields.add("preAuthorizedApplications");
    openapiFields.add("publicClient");
    openapiFields.add("publisherDomain");
    openapiFields.add("replyUrls");
    openapiFields.add("requiredResourceAccess");
    openapiFields.add("samlMetadataUrl");
    openapiFields.add("signInAudience");
    openapiFields.add("wwwHomepage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationUpdateParameters is not found in the empty JSON string", ApplicationUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("identifierUris") != null && !jsonObj.get("identifierUris").isJsonNull() && !jsonObj.get("identifierUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifierUris` to be an array in the JSON string but got `%s`", jsonObj.get("identifierUris").toString()));
      }
      if ((jsonObj.get("appLogoUrl") != null && !jsonObj.get("appLogoUrl").isJsonNull()) && !jsonObj.get("appLogoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appLogoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appLogoUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("appPermissions") != null && !jsonObj.get("appPermissions").isJsonNull() && !jsonObj.get("appPermissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("appPermissions").toString()));
      }
      if (jsonObj.get("appRoles") != null && !jsonObj.get("appRoles").isJsonNull()) {
        JsonArray jsonArrayappRoles = jsonObj.getAsJsonArray("appRoles");
        if (jsonArrayappRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appRoles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appRoles` to be an array in the JSON string but got `%s`", jsonObj.get("appRoles").toString()));
          }

          // validate the optional field `appRoles` (array)
          for (int i = 0; i < jsonArrayappRoles.size(); i++) {
            AppRole.validateJsonElement(jsonArrayappRoles.get(i));
          };
        }
      }
      if ((jsonObj.get("errorUrl") != null && !jsonObj.get("errorUrl").isJsonNull()) && !jsonObj.get("errorUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorUrl").toString()));
      }
      // validate the optional field `groupMembershipClaims`
      if (jsonObj.get("groupMembershipClaims") != null && !jsonObj.get("groupMembershipClaims").isJsonNull()) {
        GroupMembershipClaims.validateJsonElement(jsonObj.get("groupMembershipClaims"));
      }
      if ((jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) && !jsonObj.get("homepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepage").toString()));
      }
      // validate the optional field `informationalUrls`
      if (jsonObj.get("informationalUrls") != null && !jsonObj.get("informationalUrls").isJsonNull()) {
        InformationalUrl.validateJsonElement(jsonObj.get("informationalUrls"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keyCredentials") != null && !jsonObj.get("keyCredentials").isJsonNull() && !jsonObj.get("keyCredentials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyCredentials` to be an array in the JSON string but got `%s`", jsonObj.get("keyCredentials").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("knownClientApplications") != null && !jsonObj.get("knownClientApplications").isJsonNull() && !jsonObj.get("knownClientApplications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `knownClientApplications` to be an array in the JSON string but got `%s`", jsonObj.get("knownClientApplications").toString()));
      }
      if ((jsonObj.get("logoutUrl") != null && !jsonObj.get("logoutUrl").isJsonNull()) && !jsonObj.get("logoutUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoutUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoutUrl").toString()));
      }
      if (jsonObj.get("oauth2Permissions") != null && !jsonObj.get("oauth2Permissions").isJsonNull()) {
        JsonArray jsonArrayoauth2Permissions = jsonObj.getAsJsonArray("oauth2Permissions");
        if (jsonArrayoauth2Permissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("oauth2Permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `oauth2Permissions` to be an array in the JSON string but got `%s`", jsonObj.get("oauth2Permissions").toString()));
          }

          // validate the optional field `oauth2Permissions` (array)
          for (int i = 0; i < jsonArrayoauth2Permissions.size(); i++) {
            OAuth2Permission.validateJsonElement(jsonArrayoauth2Permissions.get(i));
          };
        }
      }
      // validate the optional field `optionalClaims`
      if (jsonObj.get("optionalClaims") != null && !jsonObj.get("optionalClaims").isJsonNull()) {
        OptionalClaims.validateJsonElement(jsonObj.get("optionalClaims"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("orgRestrictions") != null && !jsonObj.get("orgRestrictions").isJsonNull() && !jsonObj.get("orgRestrictions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgRestrictions` to be an array in the JSON string but got `%s`", jsonObj.get("orgRestrictions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("passwordCredentials") != null && !jsonObj.get("passwordCredentials").isJsonNull() && !jsonObj.get("passwordCredentials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordCredentials` to be an array in the JSON string but got `%s`", jsonObj.get("passwordCredentials").toString()));
      }
      if (jsonObj.get("preAuthorizedApplications") != null && !jsonObj.get("preAuthorizedApplications").isJsonNull()) {
        JsonArray jsonArraypreAuthorizedApplications = jsonObj.getAsJsonArray("preAuthorizedApplications");
        if (jsonArraypreAuthorizedApplications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preAuthorizedApplications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preAuthorizedApplications` to be an array in the JSON string but got `%s`", jsonObj.get("preAuthorizedApplications").toString()));
          }

          // validate the optional field `preAuthorizedApplications` (array)
          for (int i = 0; i < jsonArraypreAuthorizedApplications.size(); i++) {
            PreAuthorizedApplication.validateJsonElement(jsonArraypreAuthorizedApplications.get(i));
          };
        }
      }
      if ((jsonObj.get("publisherDomain") != null && !jsonObj.get("publisherDomain").isJsonNull()) && !jsonObj.get("publisherDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherDomain").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replyUrls") != null && !jsonObj.get("replyUrls").isJsonNull() && !jsonObj.get("replyUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyUrls` to be an array in the JSON string but got `%s`", jsonObj.get("replyUrls").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requiredResourceAccess") != null && !jsonObj.get("requiredResourceAccess").isJsonNull() && !jsonObj.get("requiredResourceAccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredResourceAccess` to be an array in the JSON string but got `%s`", jsonObj.get("requiredResourceAccess").toString()));
      }
      if ((jsonObj.get("samlMetadataUrl") != null && !jsonObj.get("samlMetadataUrl").isJsonNull()) && !jsonObj.get("samlMetadataUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samlMetadataUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samlMetadataUrl").toString()));
      }
      if ((jsonObj.get("signInAudience") != null && !jsonObj.get("signInAudience").isJsonNull()) && !jsonObj.get("signInAudience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signInAudience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signInAudience").toString()));
      }
      if ((jsonObj.get("wwwHomepage") != null && !jsonObj.get("wwwHomepage").isJsonNull()) && !jsonObj.get("wwwHomepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wwwHomepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wwwHomepage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationUpdateParameters>() {
           @Override
           public void write(JsonWriter out, ApplicationUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to ApplicationUpdateParameters
   */
  public static ApplicationUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationUpdateParameters.class);
  }

  /**
   * Convert an instance of ApplicationUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

