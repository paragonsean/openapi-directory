/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an OAuth 2.0 delegated permission scope. The specified OAuth 2.0 delegated permission scopes may be requested by client applications (through the requiredResourceAccess collection on the Application object) when calling a resource application. The oauth2Permissions property of the ServicePrincipal entity and of the Application entity is a collection of OAuth2Permission.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OAuth2Permission {
  public static final String SERIALIZED_NAME_ADMIN_CONSENT_DESCRIPTION = "adminConsentDescription";
  @SerializedName(SERIALIZED_NAME_ADMIN_CONSENT_DESCRIPTION)
  private String adminConsentDescription;

  public static final String SERIALIZED_NAME_ADMIN_CONSENT_DISPLAY_NAME = "adminConsentDisplayName";
  @SerializedName(SERIALIZED_NAME_ADMIN_CONSENT_DISPLAY_NAME)
  private String adminConsentDisplayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_CONSENT_DESCRIPTION = "userConsentDescription";
  @SerializedName(SERIALIZED_NAME_USER_CONSENT_DESCRIPTION)
  private String userConsentDescription;

  public static final String SERIALIZED_NAME_USER_CONSENT_DISPLAY_NAME = "userConsentDisplayName";
  @SerializedName(SERIALIZED_NAME_USER_CONSENT_DISPLAY_NAME)
  private String userConsentDisplayName;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public OAuth2Permission() {
  }

  public OAuth2Permission adminConsentDescription(String adminConsentDescription) {
    this.adminConsentDescription = adminConsentDescription;
    return this;
  }

  /**
   * Permission help text that appears in the admin consent and app assignment experiences.
   * @return adminConsentDescription
   */
  @javax.annotation.Nullable
  public String getAdminConsentDescription() {
    return adminConsentDescription;
  }

  public void setAdminConsentDescription(String adminConsentDescription) {
    this.adminConsentDescription = adminConsentDescription;
  }


  public OAuth2Permission adminConsentDisplayName(String adminConsentDisplayName) {
    this.adminConsentDisplayName = adminConsentDisplayName;
    return this;
  }

  /**
   * Display name for the permission that appears in the admin consent and app assignment experiences.
   * @return adminConsentDisplayName
   */
  @javax.annotation.Nullable
  public String getAdminConsentDisplayName() {
    return adminConsentDisplayName;
  }

  public void setAdminConsentDisplayName(String adminConsentDisplayName) {
    this.adminConsentDisplayName = adminConsentDisplayName;
  }


  public OAuth2Permission id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique scope permission identifier inside the oauth2Permissions collection.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OAuth2Permission isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * When creating or updating a permission, this property must be set to true (which is the default). To delete a permission, this property must first be set to false. At that point, in a subsequent call, the permission may be removed. 
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public OAuth2Permission type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by a Company Administrator. Possible values are \&quot;User\&quot; or \&quot;Admin\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public OAuth2Permission userConsentDescription(String userConsentDescription) {
    this.userConsentDescription = userConsentDescription;
    return this;
  }

  /**
   * Permission help text that appears in the end user consent experience.
   * @return userConsentDescription
   */
  @javax.annotation.Nullable
  public String getUserConsentDescription() {
    return userConsentDescription;
  }

  public void setUserConsentDescription(String userConsentDescription) {
    this.userConsentDescription = userConsentDescription;
  }


  public OAuth2Permission userConsentDisplayName(String userConsentDisplayName) {
    this.userConsentDisplayName = userConsentDisplayName;
    return this;
  }

  /**
   * Display name for the permission that appears in the end user consent experience.
   * @return userConsentDisplayName
   */
  @javax.annotation.Nullable
  public String getUserConsentDisplayName() {
    return userConsentDisplayName;
  }

  public void setUserConsentDisplayName(String userConsentDisplayName) {
    this.userConsentDisplayName = userConsentDisplayName;
  }


  public OAuth2Permission value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Permission oauth2Permission = (OAuth2Permission) o;
    return Objects.equals(this.adminConsentDescription, oauth2Permission.adminConsentDescription) &&
        Objects.equals(this.adminConsentDisplayName, oauth2Permission.adminConsentDisplayName) &&
        Objects.equals(this.id, oauth2Permission.id) &&
        Objects.equals(this.isEnabled, oauth2Permission.isEnabled) &&
        Objects.equals(this.type, oauth2Permission.type) &&
        Objects.equals(this.userConsentDescription, oauth2Permission.userConsentDescription) &&
        Objects.equals(this.userConsentDisplayName, oauth2Permission.userConsentDisplayName) &&
        Objects.equals(this.value, oauth2Permission.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminConsentDescription, adminConsentDisplayName, id, isEnabled, type, userConsentDescription, userConsentDisplayName, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2Permission {\n");
    sb.append("    adminConsentDescription: ").append(toIndentedString(adminConsentDescription)).append("\n");
    sb.append("    adminConsentDisplayName: ").append(toIndentedString(adminConsentDisplayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userConsentDescription: ").append(toIndentedString(userConsentDescription)).append("\n");
    sb.append("    userConsentDisplayName: ").append(toIndentedString(userConsentDisplayName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminConsentDescription");
    openapiFields.add("adminConsentDisplayName");
    openapiFields.add("id");
    openapiFields.add("isEnabled");
    openapiFields.add("type");
    openapiFields.add("userConsentDescription");
    openapiFields.add("userConsentDisplayName");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuth2Permission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuth2Permission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuth2Permission is not found in the empty JSON string", OAuth2Permission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuth2Permission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuth2Permission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adminConsentDescription") != null && !jsonObj.get("adminConsentDescription").isJsonNull()) && !jsonObj.get("adminConsentDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminConsentDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminConsentDescription").toString()));
      }
      if ((jsonObj.get("adminConsentDisplayName") != null && !jsonObj.get("adminConsentDisplayName").isJsonNull()) && !jsonObj.get("adminConsentDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminConsentDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminConsentDisplayName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("userConsentDescription") != null && !jsonObj.get("userConsentDescription").isJsonNull()) && !jsonObj.get("userConsentDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userConsentDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userConsentDescription").toString()));
      }
      if ((jsonObj.get("userConsentDisplayName") != null && !jsonObj.get("userConsentDisplayName").isJsonNull()) && !jsonObj.get("userConsentDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userConsentDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userConsentDisplayName").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuth2Permission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuth2Permission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuth2Permission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuth2Permission.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuth2Permission>() {
           @Override
           public void write(JsonWriter out, OAuth2Permission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuth2Permission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuth2Permission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuth2Permission
   * @throws IOException if the JSON string is invalid with respect to OAuth2Permission
   */
  public static OAuth2Permission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuth2Permission.class);
  }

  /**
   * Convert an instance of OAuth2Permission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

