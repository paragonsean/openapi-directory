/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ADGroup;
import org.openapitools.client.model.CheckGroupMembershipParameters;
import org.openapitools.client.model.CheckGroupMembershipResult;
import org.openapitools.client.model.DirectoryObjectListResult;
import org.openapitools.client.model.GraphError;
import org.openapitools.client.model.GroupAddMemberParameters;
import org.openapitools.client.model.GroupCreateParameters;
import org.openapitools.client.model.GroupGetMemberGroupsParameters;
import org.openapitools.client.model.GroupGetMemberGroupsResult;
import org.openapitools.client.model.GroupListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groupsAddMember
     * @param groupObjectId The object ID of the group to which to add the member. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupAddMemberParameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Indicates success. No response body is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsAddMemberCall(String groupObjectId, String apiVersion, String tenantID, GroupAddMemberParameters groupAddMemberParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupAddMemberParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/groups/{groupObjectId}/$links/members"
            .replace("{" + "groupObjectId" + "}", localVarApiClient.escapeString(groupObjectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsAddMemberValidateBeforeCall(String groupObjectId, String apiVersion, String tenantID, GroupAddMemberParameters groupAddMemberParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupObjectId' is set
        if (groupObjectId == null) {
            throw new ApiException("Missing the required parameter 'groupObjectId' when calling groupsAddMember(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsAddMember(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsAddMember(Async)");
        }

        // verify the required parameter 'groupAddMemberParameters' is set
        if (groupAddMemberParameters == null) {
            throw new ApiException("Missing the required parameter 'groupAddMemberParameters' when calling groupsAddMember(Async)");
        }

        return groupsAddMemberCall(groupObjectId, apiVersion, tenantID, groupAddMemberParameters, _callback);

    }

    /**
     * 
     * Add a member to a group.
     * @param groupObjectId The object ID of the group to which to add the member. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupAddMemberParameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Indicates success. No response body is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void groupsAddMember(String groupObjectId, String apiVersion, String tenantID, GroupAddMemberParameters groupAddMemberParameters) throws ApiException {
        groupsAddMemberWithHttpInfo(groupObjectId, apiVersion, tenantID, groupAddMemberParameters);
    }

    /**
     * 
     * Add a member to a group.
     * @param groupObjectId The object ID of the group to which to add the member. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupAddMemberParameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Indicates success. No response body is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupsAddMemberWithHttpInfo(String groupObjectId, String apiVersion, String tenantID, GroupAddMemberParameters groupAddMemberParameters) throws ApiException {
        okhttp3.Call localVarCall = groupsAddMemberValidateBeforeCall(groupObjectId, apiVersion, tenantID, groupAddMemberParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a member to a group.
     * @param groupObjectId The object ID of the group to which to add the member. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupAddMemberParameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Indicates success. No response body is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsAddMemberAsync(String groupObjectId, String apiVersion, String tenantID, GroupAddMemberParameters groupAddMemberParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsAddMemberValidateBeforeCall(groupObjectId, apiVersion, tenantID, groupAddMemberParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsCreate
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupCreateParameters The parameters for the group to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsCreateCall(String apiVersion, String tenantID, GroupCreateParameters groupCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupCreateParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/groups"
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsCreateValidateBeforeCall(String apiVersion, String tenantID, GroupCreateParameters groupCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsCreate(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsCreate(Async)");
        }

        // verify the required parameter 'groupCreateParameters' is set
        if (groupCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'groupCreateParameters' when calling groupsCreate(Async)");
        }

        return groupsCreateCall(apiVersion, tenantID, groupCreateParameters, _callback);

    }

    /**
     * 
     * Create a group in the directory.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupCreateParameters The parameters for the group to create. (required)
     * @return ADGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ADGroup groupsCreate(String apiVersion, String tenantID, GroupCreateParameters groupCreateParameters) throws ApiException {
        ApiResponse<ADGroup> localVarResp = groupsCreateWithHttpInfo(apiVersion, tenantID, groupCreateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a group in the directory.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupCreateParameters The parameters for the group to create. (required)
     * @return ApiResponse&lt;ADGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ADGroup> groupsCreateWithHttpInfo(String apiVersion, String tenantID, GroupCreateParameters groupCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = groupsCreateValidateBeforeCall(apiVersion, tenantID, groupCreateParameters, null);
        Type localVarReturnType = new TypeToken<ADGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a group in the directory.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupCreateParameters The parameters for the group to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsCreateAsync(String apiVersion, String tenantID, GroupCreateParameters groupCreateParameters, final ApiCallback<ADGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsCreateValidateBeforeCall(apiVersion, tenantID, groupCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<ADGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsDelete
     * @param objectId The object ID of the group to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsDeleteCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/groups/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsDeleteValidateBeforeCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling groupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsDelete(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsDelete(Async)");
        }

        return groupsDeleteCall(objectId, apiVersion, tenantID, _callback);

    }

    /**
     * 
     * Delete a group from the directory.
     * @param objectId The object ID of the group to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void groupsDelete(String objectId, String apiVersion, String tenantID) throws ApiException {
        groupsDeleteWithHttpInfo(objectId, apiVersion, tenantID);
    }

    /**
     * 
     * Delete a group from the directory.
     * @param objectId The object ID of the group to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupsDeleteWithHttpInfo(String objectId, String apiVersion, String tenantID) throws ApiException {
        okhttp3.Call localVarCall = groupsDeleteValidateBeforeCall(objectId, apiVersion, tenantID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a group from the directory.
     * @param objectId The object ID of the group to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsDeleteAsync(String objectId, String apiVersion, String tenantID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsDeleteValidateBeforeCall(objectId, apiVersion, tenantID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGet
     * @param objectId The object ID of the user for which to get group information. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/groups/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetValidateBeforeCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling groupsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsGet(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsGet(Async)");
        }

        return groupsGetCall(objectId, apiVersion, tenantID, _callback);

    }

    /**
     * 
     * Gets group information from the directory.
     * @param objectId The object ID of the user for which to get group information. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ADGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ADGroup groupsGet(String objectId, String apiVersion, String tenantID) throws ApiException {
        ApiResponse<ADGroup> localVarResp = groupsGetWithHttpInfo(objectId, apiVersion, tenantID);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets group information from the directory.
     * @param objectId The object ID of the user for which to get group information. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ApiResponse&lt;ADGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ADGroup> groupsGetWithHttpInfo(String objectId, String apiVersion, String tenantID) throws ApiException {
        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(objectId, apiVersion, tenantID, null);
        Type localVarReturnType = new TypeToken<ADGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets group information from the directory.
     * @param objectId The object ID of the user for which to get group information. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetAsync(String objectId, String apiVersion, String tenantID, final ApiCallback<ADGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(objectId, apiVersion, tenantID, _callback);
        Type localVarReturnType = new TypeToken<ADGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetGroupMembers
     * @param objectId The object ID of the group whose members should be retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetGroupMembersCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/groups/{objectId}/members"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetGroupMembersValidateBeforeCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling groupsGetGroupMembers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsGetGroupMembers(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsGetGroupMembers(Async)");
        }

        return groupsGetGroupMembersCall(objectId, apiVersion, tenantID, _callback);

    }

    /**
     * 
     * Gets the members of a group.
     * @param objectId The object ID of the group whose members should be retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return DirectoryObjectListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DirectoryObjectListResult groupsGetGroupMembers(String objectId, String apiVersion, String tenantID) throws ApiException {
        ApiResponse<DirectoryObjectListResult> localVarResp = groupsGetGroupMembersWithHttpInfo(objectId, apiVersion, tenantID);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the members of a group.
     * @param objectId The object ID of the group whose members should be retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ApiResponse&lt;DirectoryObjectListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectoryObjectListResult> groupsGetGroupMembersWithHttpInfo(String objectId, String apiVersion, String tenantID) throws ApiException {
        okhttp3.Call localVarCall = groupsGetGroupMembersValidateBeforeCall(objectId, apiVersion, tenantID, null);
        Type localVarReturnType = new TypeToken<DirectoryObjectListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the members of a group.
     * @param objectId The object ID of the group whose members should be retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetGroupMembersAsync(String objectId, String apiVersion, String tenantID, final ApiCallback<DirectoryObjectListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetGroupMembersValidateBeforeCall(objectId, apiVersion, tenantID, _callback);
        Type localVarReturnType = new TypeToken<DirectoryObjectListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetMemberGroups
     * @param objectId The object ID of the group for which to get group membership. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupGetMemberGroupsParameters Group filtering parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetMemberGroupsCall(String objectId, String apiVersion, String tenantID, GroupGetMemberGroupsParameters groupGetMemberGroupsParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupGetMemberGroupsParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/groups/{objectId}/getMemberGroups"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetMemberGroupsValidateBeforeCall(String objectId, String apiVersion, String tenantID, GroupGetMemberGroupsParameters groupGetMemberGroupsParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling groupsGetMemberGroups(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsGetMemberGroups(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsGetMemberGroups(Async)");
        }

        // verify the required parameter 'groupGetMemberGroupsParameters' is set
        if (groupGetMemberGroupsParameters == null) {
            throw new ApiException("Missing the required parameter 'groupGetMemberGroupsParameters' when calling groupsGetMemberGroups(Async)");
        }

        return groupsGetMemberGroupsCall(objectId, apiVersion, tenantID, groupGetMemberGroupsParameters, _callback);

    }

    /**
     * 
     * Gets a collection of object IDs of groups of which the specified group is a member.
     * @param objectId The object ID of the group for which to get group membership. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupGetMemberGroupsParameters Group filtering parameters. (required)
     * @return GroupGetMemberGroupsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public GroupGetMemberGroupsResult groupsGetMemberGroups(String objectId, String apiVersion, String tenantID, GroupGetMemberGroupsParameters groupGetMemberGroupsParameters) throws ApiException {
        ApiResponse<GroupGetMemberGroupsResult> localVarResp = groupsGetMemberGroupsWithHttpInfo(objectId, apiVersion, tenantID, groupGetMemberGroupsParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a collection of object IDs of groups of which the specified group is a member.
     * @param objectId The object ID of the group for which to get group membership. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupGetMemberGroupsParameters Group filtering parameters. (required)
     * @return ApiResponse&lt;GroupGetMemberGroupsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupGetMemberGroupsResult> groupsGetMemberGroupsWithHttpInfo(String objectId, String apiVersion, String tenantID, GroupGetMemberGroupsParameters groupGetMemberGroupsParameters) throws ApiException {
        okhttp3.Call localVarCall = groupsGetMemberGroupsValidateBeforeCall(objectId, apiVersion, tenantID, groupGetMemberGroupsParameters, null);
        Type localVarReturnType = new TypeToken<GroupGetMemberGroupsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a collection of object IDs of groups of which the specified group is a member.
     * @param objectId The object ID of the group for which to get group membership. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param groupGetMemberGroupsParameters Group filtering parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetMemberGroupsAsync(String objectId, String apiVersion, String tenantID, GroupGetMemberGroupsParameters groupGetMemberGroupsParameters, final ApiCallback<GroupGetMemberGroupsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetMemberGroupsValidateBeforeCall(objectId, apiVersion, tenantID, groupGetMemberGroupsParameters, _callback);
        Type localVarReturnType = new TypeToken<GroupGetMemberGroupsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIsMemberOf
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param checkGroupMembershipParameters The check group membership parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Indicates success. Returns true if the user, contact, group, or service principal is a direct or a transitive member of the specified group; otherwise, false. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIsMemberOfCall(String apiVersion, String tenantID, CheckGroupMembershipParameters checkGroupMembershipParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkGroupMembershipParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/isMemberOf"
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIsMemberOfValidateBeforeCall(String apiVersion, String tenantID, CheckGroupMembershipParameters checkGroupMembershipParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsIsMemberOf(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsIsMemberOf(Async)");
        }

        // verify the required parameter 'checkGroupMembershipParameters' is set
        if (checkGroupMembershipParameters == null) {
            throw new ApiException("Missing the required parameter 'checkGroupMembershipParameters' when calling groupsIsMemberOf(Async)");
        }

        return groupsIsMemberOfCall(apiVersion, tenantID, checkGroupMembershipParameters, _callback);

    }

    /**
     * 
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param checkGroupMembershipParameters The check group membership parameters. (required)
     * @return CheckGroupMembershipResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Indicates success. Returns true if the user, contact, group, or service principal is a direct or a transitive member of the specified group; otherwise, false. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CheckGroupMembershipResult groupsIsMemberOf(String apiVersion, String tenantID, CheckGroupMembershipParameters checkGroupMembershipParameters) throws ApiException {
        ApiResponse<CheckGroupMembershipResult> localVarResp = groupsIsMemberOfWithHttpInfo(apiVersion, tenantID, checkGroupMembershipParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param checkGroupMembershipParameters The check group membership parameters. (required)
     * @return ApiResponse&lt;CheckGroupMembershipResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Indicates success. Returns true if the user, contact, group, or service principal is a direct or a transitive member of the specified group; otherwise, false. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckGroupMembershipResult> groupsIsMemberOfWithHttpInfo(String apiVersion, String tenantID, CheckGroupMembershipParameters checkGroupMembershipParameters) throws ApiException {
        okhttp3.Call localVarCall = groupsIsMemberOfValidateBeforeCall(apiVersion, tenantID, checkGroupMembershipParameters, null);
        Type localVarReturnType = new TypeToken<CheckGroupMembershipResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param checkGroupMembershipParameters The check group membership parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Indicates success. Returns true if the user, contact, group, or service principal is a direct or a transitive member of the specified group; otherwise, false. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIsMemberOfAsync(String apiVersion, String tenantID, CheckGroupMembershipParameters checkGroupMembershipParameters, final ApiCallback<CheckGroupMembershipResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIsMemberOfValidateBeforeCall(apiVersion, tenantID, checkGroupMembershipParameters, _callback);
        Type localVarReturnType = new TypeToken<CheckGroupMembershipResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsList
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsListCall(String apiVersion, String tenantID, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/groups"
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsListValidateBeforeCall(String apiVersion, String tenantID, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsList(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsList(Async)");
        }

        return groupsListCall(apiVersion, tenantID, $filter, _callback);

    }

    /**
     * 
     * Gets list of groups for the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @return GroupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public GroupListResult groupsList(String apiVersion, String tenantID, String $filter) throws ApiException {
        ApiResponse<GroupListResult> localVarResp = groupsListWithHttpInfo(apiVersion, tenantID, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets list of groups for the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @return ApiResponse&lt;GroupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupListResult> groupsListWithHttpInfo(String apiVersion, String tenantID, String $filter) throws ApiException {
        okhttp3.Call localVarCall = groupsListValidateBeforeCall(apiVersion, tenantID, $filter, null);
        Type localVarReturnType = new TypeToken<GroupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets list of groups for the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsListAsync(String apiVersion, String tenantID, String $filter, final ApiCallback<GroupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsListValidateBeforeCall(apiVersion, tenantID, $filter, _callback);
        Type localVarReturnType = new TypeToken<GroupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsRemoveMember
     * @param groupObjectId The object ID of the group from which to remove the member. (required)
     * @param memberObjectId Member object id (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Indicates success. No response body is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsRemoveMemberCall(String groupObjectId, String memberObjectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}"
            .replace("{" + "groupObjectId" + "}", localVarApiClient.escapeString(groupObjectId.toString()))
            .replace("{" + "memberObjectId" + "}", localVarApiClient.escapeString(memberObjectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsRemoveMemberValidateBeforeCall(String groupObjectId, String memberObjectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupObjectId' is set
        if (groupObjectId == null) {
            throw new ApiException("Missing the required parameter 'groupObjectId' when calling groupsRemoveMember(Async)");
        }

        // verify the required parameter 'memberObjectId' is set
        if (memberObjectId == null) {
            throw new ApiException("Missing the required parameter 'memberObjectId' when calling groupsRemoveMember(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsRemoveMember(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling groupsRemoveMember(Async)");
        }

        return groupsRemoveMemberCall(groupObjectId, memberObjectId, apiVersion, tenantID, _callback);

    }

    /**
     * 
     * Remove a member from a group.
     * @param groupObjectId The object ID of the group from which to remove the member. (required)
     * @param memberObjectId Member object id (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Indicates success. No response body is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void groupsRemoveMember(String groupObjectId, String memberObjectId, String apiVersion, String tenantID) throws ApiException {
        groupsRemoveMemberWithHttpInfo(groupObjectId, memberObjectId, apiVersion, tenantID);
    }

    /**
     * 
     * Remove a member from a group.
     * @param groupObjectId The object ID of the group from which to remove the member. (required)
     * @param memberObjectId Member object id (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Indicates success. No response body is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupsRemoveMemberWithHttpInfo(String groupObjectId, String memberObjectId, String apiVersion, String tenantID) throws ApiException {
        okhttp3.Call localVarCall = groupsRemoveMemberValidateBeforeCall(groupObjectId, memberObjectId, apiVersion, tenantID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a member from a group.
     * @param groupObjectId The object ID of the group from which to remove the member. (required)
     * @param memberObjectId Member object id (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Indicates success. No response body is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsRemoveMemberAsync(String groupObjectId, String memberObjectId, String apiVersion, String tenantID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsRemoveMemberValidateBeforeCall(groupObjectId, memberObjectId, apiVersion, tenantID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
