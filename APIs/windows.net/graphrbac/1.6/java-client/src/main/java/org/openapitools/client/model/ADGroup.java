/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DirectoryObject;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Active Directory group information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ADGroup extends DirectoryObject {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MAIL = "mail";
  @SerializedName(SERIALIZED_NAME_MAIL)
  private String mail;

  public static final String SERIALIZED_NAME_MAIL_ENABLED = "mailEnabled";
  @SerializedName(SERIALIZED_NAME_MAIL_ENABLED)
  private Boolean mailEnabled;

  public static final String SERIALIZED_NAME_MAIL_NICKNAME = "mailNickname";
  @SerializedName(SERIALIZED_NAME_MAIL_NICKNAME)
  private String mailNickname;

  public static final String SERIALIZED_NAME_SECURITY_ENABLED = "securityEnabled";
  @SerializedName(SERIALIZED_NAME_SECURITY_ENABLED)
  private Boolean securityEnabled;

  public ADGroup() {
    this.objectType = this.getClass().getSimpleName();
  }

  public ADGroup(
     OffsetDateTime deletionTimestamp, 
     String objectId
  ) {
    this();
    this.deletionTimestamp = deletionTimestamp;
    this.objectId = objectId;
  }

  public ADGroup displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the group.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ADGroup mail(String mail) {
    this.mail = mail;
    return this;
  }

  /**
   * The primary email address of the group.
   * @return mail
   */
  @javax.annotation.Nullable
  public String getMail() {
    return mail;
  }

  public void setMail(String mail) {
    this.mail = mail;
  }


  public ADGroup mailEnabled(Boolean mailEnabled) {
    this.mailEnabled = mailEnabled;
    return this;
  }

  /**
   * Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.
   * @return mailEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMailEnabled() {
    return mailEnabled;
  }

  public void setMailEnabled(Boolean mailEnabled) {
    this.mailEnabled = mailEnabled;
  }


  public ADGroup mailNickname(String mailNickname) {
    this.mailNickname = mailNickname;
    return this;
  }

  /**
   * The mail alias for the group. 
   * @return mailNickname
   */
  @javax.annotation.Nullable
  public String getMailNickname() {
    return mailNickname;
  }

  public void setMailNickname(String mailNickname) {
    this.mailNickname = mailNickname;
  }


  public ADGroup securityEnabled(Boolean securityEnabled) {
    this.securityEnabled = securityEnabled;
    return this;
  }

  /**
   * Whether the group is security-enable.
   * @return securityEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSecurityEnabled() {
    return securityEnabled;
  }

  public void setSecurityEnabled(Boolean securityEnabled) {
    this.securityEnabled = securityEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ADGroup adGroup = (ADGroup) o;
    return Objects.equals(this.displayName, adGroup.displayName) &&
        Objects.equals(this.mail, adGroup.mail) &&
        Objects.equals(this.mailEnabled, adGroup.mailEnabled) &&
        Objects.equals(this.mailNickname, adGroup.mailNickname) &&
        Objects.equals(this.securityEnabled, adGroup.securityEnabled) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, mail, mailEnabled, mailNickname, securityEnabled, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ADGroup {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    mail: ").append(toIndentedString(mail)).append("\n");
    sb.append("    mailEnabled: ").append(toIndentedString(mailEnabled)).append("\n");
    sb.append("    mailNickname: ").append(toIndentedString(mailNickname)).append("\n");
    sb.append("    securityEnabled: ").append(toIndentedString(securityEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deletionTimestamp");
    openapiFields.add("objectId");
    openapiFields.add("objectType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objectType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ADGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ADGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ADGroup is not found in the empty JSON string", ADGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ADGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ADGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ADGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ADGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ADGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ADGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ADGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ADGroup>() {
           @Override
           public void write(JsonWriter out, ADGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ADGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ADGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ADGroup
   * @throws IOException if the JSON string is invalid with respect to ADGroup
   */
  public static ADGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ADGroup.class);
  }

  /**
   * Convert an instance of ADGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

