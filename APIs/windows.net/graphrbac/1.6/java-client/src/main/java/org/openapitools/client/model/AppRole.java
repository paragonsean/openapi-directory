/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppRole
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppRole {
  public static final String SERIALIZED_NAME_ALLOWED_MEMBER_TYPES = "allowedMemberTypes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_MEMBER_TYPES)
  private List<String> allowedMemberTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public AppRole() {
  }

  public AppRole allowedMemberTypes(List<String> allowedMemberTypes) {
    this.allowedMemberTypes = allowedMemberTypes;
    return this;
  }

  public AppRole addAllowedMemberTypesItem(String allowedMemberTypesItem) {
    if (this.allowedMemberTypes == null) {
      this.allowedMemberTypes = new ArrayList<>();
    }
    this.allowedMemberTypes.add(allowedMemberTypesItem);
    return this;
  }

  /**
   * Specifies whether this app role definition can be assigned to users and groups by setting to &#39;User&#39;, or to other applications (that are accessing this application in daemon service scenarios) by setting to &#39;Application&#39;, or to both. 
   * @return allowedMemberTypes
   */
  @javax.annotation.Nullable
  public List<String> getAllowedMemberTypes() {
    return allowedMemberTypes;
  }

  public void setAllowedMemberTypes(List<String> allowedMemberTypes) {
    this.allowedMemberTypes = allowedMemberTypes;
  }


  public AppRole description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Permission help text that appears in the admin app assignment and consent experiences.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AppRole displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name for the permission that appears in the admin consent and app assignment experiences.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AppRole id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique role identifier inside the appRoles collection.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AppRole isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * When creating or updating a role definition, this must be set to true (which is the default). To delete a role, this must first be set to false. At that point, in a subsequent call, this role may be removed.
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public AppRole value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppRole appRole = (AppRole) o;
    return Objects.equals(this.allowedMemberTypes, appRole.allowedMemberTypes) &&
        Objects.equals(this.description, appRole.description) &&
        Objects.equals(this.displayName, appRole.displayName) &&
        Objects.equals(this.id, appRole.id) &&
        Objects.equals(this.isEnabled, appRole.isEnabled) &&
        Objects.equals(this.value, appRole.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedMemberTypes, description, displayName, id, isEnabled, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppRole {\n");
    sb.append("    allowedMemberTypes: ").append(toIndentedString(allowedMemberTypes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedMemberTypes");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("id");
    openapiFields.add("isEnabled");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppRole
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppRole.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppRole is not found in the empty JSON string", AppRole.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppRole.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppRole` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedMemberTypes") != null && !jsonObj.get("allowedMemberTypes").isJsonNull() && !jsonObj.get("allowedMemberTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedMemberTypes` to be an array in the JSON string but got `%s`", jsonObj.get("allowedMemberTypes").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppRole.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppRole' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppRole> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppRole.class));

       return (TypeAdapter<T>) new TypeAdapter<AppRole>() {
           @Override
           public void write(JsonWriter out, AppRole value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppRole read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppRole given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppRole
   * @throws IOException if the JSON string is invalid with respect to AppRole
   */
  public static AppRole fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppRole.class);
  }

  /**
   * Convert an instance of AppRole to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

