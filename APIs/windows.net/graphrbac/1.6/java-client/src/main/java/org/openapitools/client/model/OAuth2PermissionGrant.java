/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OAuth2PermissionGrant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OAuth2PermissionGrant {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  /**
   * Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.
   */
  @JsonAdapter(ConsentTypeEnum.Adapter.class)
  public enum ConsentTypeEnum {
    ALL_PRINCIPALS("AllPrincipals"),
    
    PRINCIPAL("Principal");

    private String value;

    ConsentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConsentTypeEnum fromValue(String value) {
      for (ConsentTypeEnum b : ConsentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConsentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConsentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConsentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConsentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConsentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONSENT_TYPE = "consentType";
  @SerializedName(SERIALIZED_NAME_CONSENT_TYPE)
  private ConsentTypeEnum consentType;

  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiryTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private String expiryTime;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_ODATA_TYPE = "odata.type";
  @SerializedName(SERIALIZED_NAME_ODATA_TYPE)
  private String odataType;

  public static final String SERIALIZED_NAME_PRINCIPAL_ID = "principalId";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ID)
  private String principalId;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public OAuth2PermissionGrant() {
  }

  public OAuth2PermissionGrant clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * The id of the resource&#39;s service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property).
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OAuth2PermissionGrant consentType(ConsentTypeEnum consentType) {
    this.consentType = consentType;
    return this;
  }

  /**
   * Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.
   * @return consentType
   */
  @javax.annotation.Nullable
  public ConsentTypeEnum getConsentType() {
    return consentType;
  }

  public void setConsentType(ConsentTypeEnum consentType) {
    this.consentType = consentType;
  }


  public OAuth2PermissionGrant expiryTime(String expiryTime) {
    this.expiryTime = expiryTime;
    return this;
  }

  /**
   * Expiry time for TTL
   * @return expiryTime
   */
  @javax.annotation.Nullable
  public String getExpiryTime() {
    return expiryTime;
  }

  public void setExpiryTime(String expiryTime) {
    this.expiryTime = expiryTime;
  }


  public OAuth2PermissionGrant objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * The id of the permission grant
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public OAuth2PermissionGrant odataType(String odataType) {
    this.odataType = odataType;
    return this;
  }

  /**
   * Microsoft.DirectoryServices.OAuth2PermissionGrant
   * @return odataType
   */
  @javax.annotation.Nullable
  public String getOdataType() {
    return odataType;
  }

  public void setOdataType(String odataType) {
    this.odataType = odataType;
  }


  public OAuth2PermissionGrant principalId(String principalId) {
    this.principalId = principalId;
    return this;
  }

  /**
   * When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user.
   * @return principalId
   */
  @javax.annotation.Nullable
  public String getPrincipalId() {
    return principalId;
  }

  public void setPrincipalId(String principalId) {
    this.principalId = principalId;
  }


  public OAuth2PermissionGrant resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Object Id of the resource you want to grant
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public OAuth2PermissionGrant scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public OAuth2PermissionGrant startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time for TTL
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2PermissionGrant oauth2PermissionGrant = (OAuth2PermissionGrant) o;
    return Objects.equals(this.clientId, oauth2PermissionGrant.clientId) &&
        Objects.equals(this.consentType, oauth2PermissionGrant.consentType) &&
        Objects.equals(this.expiryTime, oauth2PermissionGrant.expiryTime) &&
        Objects.equals(this.objectId, oauth2PermissionGrant.objectId) &&
        Objects.equals(this.odataType, oauth2PermissionGrant.odataType) &&
        Objects.equals(this.principalId, oauth2PermissionGrant.principalId) &&
        Objects.equals(this.resourceId, oauth2PermissionGrant.resourceId) &&
        Objects.equals(this.scope, oauth2PermissionGrant.scope) &&
        Objects.equals(this.startTime, oauth2PermissionGrant.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, consentType, expiryTime, objectId, odataType, principalId, resourceId, scope, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2PermissionGrant {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    consentType: ").append(toIndentedString(consentType)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    odataType: ").append(toIndentedString(odataType)).append("\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("consentType");
    openapiFields.add("expiryTime");
    openapiFields.add("objectId");
    openapiFields.add("odata.type");
    openapiFields.add("principalId");
    openapiFields.add("resourceId");
    openapiFields.add("scope");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuth2PermissionGrant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuth2PermissionGrant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuth2PermissionGrant is not found in the empty JSON string", OAuth2PermissionGrant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuth2PermissionGrant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuth2PermissionGrant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("consentType") != null && !jsonObj.get("consentType").isJsonNull()) && !jsonObj.get("consentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentType").toString()));
      }
      // validate the optional field `consentType`
      if (jsonObj.get("consentType") != null && !jsonObj.get("consentType").isJsonNull()) {
        ConsentTypeEnum.validateJsonElement(jsonObj.get("consentType"));
      }
      if ((jsonObj.get("expiryTime") != null && !jsonObj.get("expiryTime").isJsonNull()) && !jsonObj.get("expiryTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryTime").toString()));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      if ((jsonObj.get("odata.type") != null && !jsonObj.get("odata.type").isJsonNull()) && !jsonObj.get("odata.type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `odata.type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("odata.type").toString()));
      }
      if ((jsonObj.get("principalId") != null && !jsonObj.get("principalId").isJsonNull()) && !jsonObj.get("principalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalId").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuth2PermissionGrant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuth2PermissionGrant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuth2PermissionGrant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuth2PermissionGrant.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuth2PermissionGrant>() {
           @Override
           public void write(JsonWriter out, OAuth2PermissionGrant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuth2PermissionGrant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuth2PermissionGrant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuth2PermissionGrant
   * @throws IOException if the JSON string is invalid with respect to OAuth2PermissionGrant
   */
  public static OAuth2PermissionGrant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuth2PermissionGrant.class);
  }

  /**
   * Convert an instance of OAuth2PermissionGrant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

