/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GraphError;
import org.openapitools.client.model.ServicePrincipal;
import org.openapitools.client.model.ServicePrincipalCreateParameters;
import org.openapitools.client.model.ServicePrincipalListResult;
import org.openapitools.client.model.ServicePrincipalUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicePrincipalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServicePrincipalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicePrincipalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for servicePrincipalsCreate
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param servicePrincipalCreateParameters Parameters to create a service principal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The service principal was created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsCreateCall(String apiVersion, String tenantID, ServicePrincipalCreateParameters servicePrincipalCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = servicePrincipalCreateParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/servicePrincipals"
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicePrincipalsCreateValidateBeforeCall(String apiVersion, String tenantID, ServicePrincipalCreateParameters servicePrincipalCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicePrincipalsCreate(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling servicePrincipalsCreate(Async)");
        }

        // verify the required parameter 'servicePrincipalCreateParameters' is set
        if (servicePrincipalCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'servicePrincipalCreateParameters' when calling servicePrincipalsCreate(Async)");
        }

        return servicePrincipalsCreateCall(apiVersion, tenantID, servicePrincipalCreateParameters, _callback);

    }

    /**
     * 
     * Creates a service principal in the directory.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param servicePrincipalCreateParameters Parameters to create a service principal. (required)
     * @return ServicePrincipal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The service principal was created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServicePrincipal servicePrincipalsCreate(String apiVersion, String tenantID, ServicePrincipalCreateParameters servicePrincipalCreateParameters) throws ApiException {
        ApiResponse<ServicePrincipal> localVarResp = servicePrincipalsCreateWithHttpInfo(apiVersion, tenantID, servicePrincipalCreateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a service principal in the directory.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param servicePrincipalCreateParameters Parameters to create a service principal. (required)
     * @return ApiResponse&lt;ServicePrincipal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The service principal was created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicePrincipal> servicePrincipalsCreateWithHttpInfo(String apiVersion, String tenantID, ServicePrincipalCreateParameters servicePrincipalCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = servicePrincipalsCreateValidateBeforeCall(apiVersion, tenantID, servicePrincipalCreateParameters, null);
        Type localVarReturnType = new TypeToken<ServicePrincipal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a service principal in the directory.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param servicePrincipalCreateParameters Parameters to create a service principal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The service principal was created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsCreateAsync(String apiVersion, String tenantID, ServicePrincipalCreateParameters servicePrincipalCreateParameters, final ApiCallback<ServicePrincipal> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicePrincipalsCreateValidateBeforeCall(apiVersion, tenantID, servicePrincipalCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<ServicePrincipal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicePrincipalsDelete
     * @param objectId The object ID of the service principal to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsDeleteCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/servicePrincipals/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicePrincipalsDeleteValidateBeforeCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling servicePrincipalsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicePrincipalsDelete(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling servicePrincipalsDelete(Async)");
        }

        return servicePrincipalsDeleteCall(objectId, apiVersion, tenantID, _callback);

    }

    /**
     * 
     * Deletes a service principal from the directory.
     * @param objectId The object ID of the service principal to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void servicePrincipalsDelete(String objectId, String apiVersion, String tenantID) throws ApiException {
        servicePrincipalsDeleteWithHttpInfo(objectId, apiVersion, tenantID);
    }

    /**
     * 
     * Deletes a service principal from the directory.
     * @param objectId The object ID of the service principal to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicePrincipalsDeleteWithHttpInfo(String objectId, String apiVersion, String tenantID) throws ApiException {
        okhttp3.Call localVarCall = servicePrincipalsDeleteValidateBeforeCall(objectId, apiVersion, tenantID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a service principal from the directory.
     * @param objectId The object ID of the service principal to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsDeleteAsync(String objectId, String apiVersion, String tenantID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicePrincipalsDeleteValidateBeforeCall(objectId, apiVersion, tenantID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicePrincipalsGet
     * @param objectId The object ID of the service principal to get. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsGetCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/servicePrincipals/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicePrincipalsGetValidateBeforeCall(String objectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling servicePrincipalsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicePrincipalsGet(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling servicePrincipalsGet(Async)");
        }

        return servicePrincipalsGetCall(objectId, apiVersion, tenantID, _callback);

    }

    /**
     * 
     * Gets service principal information from the directory. Query by objectId or pass a filter to query by appId
     * @param objectId The object ID of the service principal to get. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ServicePrincipal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServicePrincipal servicePrincipalsGet(String objectId, String apiVersion, String tenantID) throws ApiException {
        ApiResponse<ServicePrincipal> localVarResp = servicePrincipalsGetWithHttpInfo(objectId, apiVersion, tenantID);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets service principal information from the directory. Query by objectId or pass a filter to query by appId
     * @param objectId The object ID of the service principal to get. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ApiResponse&lt;ServicePrincipal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicePrincipal> servicePrincipalsGetWithHttpInfo(String objectId, String apiVersion, String tenantID) throws ApiException {
        okhttp3.Call localVarCall = servicePrincipalsGetValidateBeforeCall(objectId, apiVersion, tenantID, null);
        Type localVarReturnType = new TypeToken<ServicePrincipal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets service principal information from the directory. Query by objectId or pass a filter to query by appId
     * @param objectId The object ID of the service principal to get. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsGetAsync(String objectId, String apiVersion, String tenantID, final ApiCallback<ServicePrincipal> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicePrincipalsGetValidateBeforeCall(objectId, apiVersion, tenantID, _callback);
        Type localVarReturnType = new TypeToken<ServicePrincipal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicePrincipalsList
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsListCall(String apiVersion, String tenantID, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/servicePrincipals"
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicePrincipalsListValidateBeforeCall(String apiVersion, String tenantID, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicePrincipalsList(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling servicePrincipalsList(Async)");
        }

        return servicePrincipalsListCall(apiVersion, tenantID, $filter, _callback);

    }

    /**
     * 
     * Gets a list of service principals from the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @return ServicePrincipalListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServicePrincipalListResult servicePrincipalsList(String apiVersion, String tenantID, String $filter) throws ApiException {
        ApiResponse<ServicePrincipalListResult> localVarResp = servicePrincipalsListWithHttpInfo(apiVersion, tenantID, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of service principals from the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @return ApiResponse&lt;ServicePrincipalListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicePrincipalListResult> servicePrincipalsListWithHttpInfo(String apiVersion, String tenantID, String $filter) throws ApiException {
        okhttp3.Call localVarCall = servicePrincipalsListValidateBeforeCall(apiVersion, tenantID, $filter, null);
        Type localVarReturnType = new TypeToken<ServicePrincipalListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of service principals from the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsListAsync(String apiVersion, String tenantID, String $filter, final ApiCallback<ServicePrincipalListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicePrincipalsListValidateBeforeCall(apiVersion, tenantID, $filter, _callback);
        Type localVarReturnType = new TypeToken<ServicePrincipalListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicePrincipalsUpdate
     * @param objectId The object ID of the service principal to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param servicePrincipalUpdateParameters Parameters to update a service principal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsUpdateCall(String objectId, String apiVersion, String tenantID, ServicePrincipalUpdateParameters servicePrincipalUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = servicePrincipalUpdateParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/servicePrincipals/{objectId}"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicePrincipalsUpdateValidateBeforeCall(String objectId, String apiVersion, String tenantID, ServicePrincipalUpdateParameters servicePrincipalUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling servicePrincipalsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicePrincipalsUpdate(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling servicePrincipalsUpdate(Async)");
        }

        // verify the required parameter 'servicePrincipalUpdateParameters' is set
        if (servicePrincipalUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'servicePrincipalUpdateParameters' when calling servicePrincipalsUpdate(Async)");
        }

        return servicePrincipalsUpdateCall(objectId, apiVersion, tenantID, servicePrincipalUpdateParameters, _callback);

    }

    /**
     * 
     * Updates a service principal in the directory.
     * @param objectId The object ID of the service principal to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param servicePrincipalUpdateParameters Parameters to update a service principal. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void servicePrincipalsUpdate(String objectId, String apiVersion, String tenantID, ServicePrincipalUpdateParameters servicePrincipalUpdateParameters) throws ApiException {
        servicePrincipalsUpdateWithHttpInfo(objectId, apiVersion, tenantID, servicePrincipalUpdateParameters);
    }

    /**
     * 
     * Updates a service principal in the directory.
     * @param objectId The object ID of the service principal to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param servicePrincipalUpdateParameters Parameters to update a service principal. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicePrincipalsUpdateWithHttpInfo(String objectId, String apiVersion, String tenantID, ServicePrincipalUpdateParameters servicePrincipalUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = servicePrincipalsUpdateValidateBeforeCall(objectId, apiVersion, tenantID, servicePrincipalUpdateParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates a service principal in the directory.
     * @param objectId The object ID of the service principal to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param servicePrincipalUpdateParameters Parameters to update a service principal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicePrincipalsUpdateAsync(String objectId, String apiVersion, String tenantID, ServicePrincipalUpdateParameters servicePrincipalUpdateParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicePrincipalsUpdateValidateBeforeCall(objectId, apiVersion, tenantID, servicePrincipalUpdateParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
