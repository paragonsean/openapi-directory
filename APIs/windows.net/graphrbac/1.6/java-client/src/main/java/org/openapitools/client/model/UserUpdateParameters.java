/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PasswordProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request parameters for updating an existing work or school account user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserUpdateParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_ENABLED = "accountEnabled";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ENABLED)
  private Boolean accountEnabled;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MAIL = "mail";
  @SerializedName(SERIALIZED_NAME_MAIL)
  private String mail;

  public static final String SERIALIZED_NAME_MAIL_NICKNAME = "mailNickname";
  @SerializedName(SERIALIZED_NAME_MAIL_NICKNAME)
  private String mailNickname;

  public static final String SERIALIZED_NAME_PASSWORD_PROFILE = "passwordProfile";
  @SerializedName(SERIALIZED_NAME_PASSWORD_PROFILE)
  private PasswordProfile passwordProfile;

  public static final String SERIALIZED_NAME_USER_PRINCIPAL_NAME = "userPrincipalName";
  @SerializedName(SERIALIZED_NAME_USER_PRINCIPAL_NAME)
  private String userPrincipalName;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_IMMUTABLE_ID = "immutableId";
  @SerializedName(SERIALIZED_NAME_IMMUTABLE_ID)
  private String immutableId;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public static final String SERIALIZED_NAME_USAGE_LOCATION = "usageLocation";
  @SerializedName(SERIALIZED_NAME_USAGE_LOCATION)
  private String usageLocation;

  /**
   * A string value that can be used to classify user types in your directory, such as &#39;Member&#39; and &#39;Guest&#39;.
   */
  @JsonAdapter(UserTypeEnum.Adapter.class)
  public enum UserTypeEnum {
    MEMBER("Member"),
    
    GUEST("Guest");

    private String value;

    UserTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserTypeEnum fromValue(String value) {
      for (UserTypeEnum b : UserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_TYPE = "userType";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private UserTypeEnum userType;

  public UserUpdateParameters() {
  }

  public UserUpdateParameters accountEnabled(Boolean accountEnabled) {
    this.accountEnabled = accountEnabled;
    return this;
  }

  /**
   * Whether the account is enabled.
   * @return accountEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAccountEnabled() {
    return accountEnabled;
  }

  public void setAccountEnabled(Boolean accountEnabled) {
    this.accountEnabled = accountEnabled;
  }


  public UserUpdateParameters displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the user.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UserUpdateParameters mail(String mail) {
    this.mail = mail;
    return this;
  }

  /**
   * The primary email address of the user.
   * @return mail
   */
  @javax.annotation.Nullable
  public String getMail() {
    return mail;
  }

  public void setMail(String mail) {
    this.mail = mail;
  }


  public UserUpdateParameters mailNickname(String mailNickname) {
    this.mailNickname = mailNickname;
    return this;
  }

  /**
   * The mail alias for the user.
   * @return mailNickname
   */
  @javax.annotation.Nullable
  public String getMailNickname() {
    return mailNickname;
  }

  public void setMailNickname(String mailNickname) {
    this.mailNickname = mailNickname;
  }


  public UserUpdateParameters passwordProfile(PasswordProfile passwordProfile) {
    this.passwordProfile = passwordProfile;
    return this;
  }

  /**
   * Get passwordProfile
   * @return passwordProfile
   */
  @javax.annotation.Nullable
  public PasswordProfile getPasswordProfile() {
    return passwordProfile;
  }

  public void setPasswordProfile(PasswordProfile passwordProfile) {
    this.passwordProfile = passwordProfile;
  }


  public UserUpdateParameters userPrincipalName(String userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
    return this;
  }

  /**
   * The user principal name (someuser@contoso.com). It must contain one of the verified domains for the tenant.
   * @return userPrincipalName
   */
  @javax.annotation.Nullable
  public String getUserPrincipalName() {
    return userPrincipalName;
  }

  public void setUserPrincipalName(String userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
  }


  public UserUpdateParameters givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * The given name for the user.
   * @return givenName
   */
  @javax.annotation.Nullable
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public UserUpdateParameters immutableId(String immutableId) {
    this.immutableId = immutableId;
    return this;
  }

  /**
   * This must be specified if you are using a federated domain for the user&#39;s userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.
   * @return immutableId
   */
  @javax.annotation.Nullable
  public String getImmutableId() {
    return immutableId;
  }

  public void setImmutableId(String immutableId) {
    this.immutableId = immutableId;
  }


  public UserUpdateParameters surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * The user&#39;s surname (family name or last name).
   * @return surname
   */
  @javax.annotation.Nullable
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }


  public UserUpdateParameters usageLocation(String usageLocation) {
    this.usageLocation = usageLocation;
    return this;
  }

  /**
   * A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: \&quot;US\&quot;, \&quot;JP\&quot;, and \&quot;GB\&quot;.
   * @return usageLocation
   */
  @javax.annotation.Nullable
  public String getUsageLocation() {
    return usageLocation;
  }

  public void setUsageLocation(String usageLocation) {
    this.usageLocation = usageLocation;
  }


  public UserUpdateParameters userType(UserTypeEnum userType) {
    this.userType = userType;
    return this;
  }

  /**
   * A string value that can be used to classify user types in your directory, such as &#39;Member&#39; and &#39;Guest&#39;.
   * @return userType
   */
  @javax.annotation.Nullable
  public UserTypeEnum getUserType() {
    return userType;
  }

  public void setUserType(UserTypeEnum userType) {
    this.userType = userType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserUpdateParameters userUpdateParameters = (UserUpdateParameters) o;
    return Objects.equals(this.accountEnabled, userUpdateParameters.accountEnabled) &&
        Objects.equals(this.displayName, userUpdateParameters.displayName) &&
        Objects.equals(this.mail, userUpdateParameters.mail) &&
        Objects.equals(this.mailNickname, userUpdateParameters.mailNickname) &&
        Objects.equals(this.passwordProfile, userUpdateParameters.passwordProfile) &&
        Objects.equals(this.userPrincipalName, userUpdateParameters.userPrincipalName) &&
        Objects.equals(this.givenName, userUpdateParameters.givenName) &&
        Objects.equals(this.immutableId, userUpdateParameters.immutableId) &&
        Objects.equals(this.surname, userUpdateParameters.surname) &&
        Objects.equals(this.usageLocation, userUpdateParameters.usageLocation) &&
        Objects.equals(this.userType, userUpdateParameters.userType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountEnabled, displayName, mail, mailNickname, passwordProfile, userPrincipalName, givenName, immutableId, surname, usageLocation, userType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserUpdateParameters {\n");
    sb.append("    accountEnabled: ").append(toIndentedString(accountEnabled)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    mail: ").append(toIndentedString(mail)).append("\n");
    sb.append("    mailNickname: ").append(toIndentedString(mailNickname)).append("\n");
    sb.append("    passwordProfile: ").append(toIndentedString(passwordProfile)).append("\n");
    sb.append("    userPrincipalName: ").append(toIndentedString(userPrincipalName)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    immutableId: ").append(toIndentedString(immutableId)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    usageLocation: ").append(toIndentedString(usageLocation)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("givenName");
    openapiFields.add("immutableId");
    openapiFields.add("surname");
    openapiFields.add("usageLocation");
    openapiFields.add("userType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserUpdateParameters is not found in the empty JSON string", UserUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("mail") != null && !jsonObj.get("mail").isJsonNull()) && !jsonObj.get("mail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mail").toString()));
      }
      if ((jsonObj.get("mailNickname") != null && !jsonObj.get("mailNickname").isJsonNull()) && !jsonObj.get("mailNickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailNickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailNickname").toString()));
      }
      if ((jsonObj.get("userPrincipalName") != null && !jsonObj.get("userPrincipalName").isJsonNull()) && !jsonObj.get("userPrincipalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userPrincipalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userPrincipalName").toString()));
      }
      if ((jsonObj.get("givenName") != null && !jsonObj.get("givenName").isJsonNull()) && !jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if ((jsonObj.get("immutableId") != null && !jsonObj.get("immutableId").isJsonNull()) && !jsonObj.get("immutableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `immutableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("immutableId").toString()));
      }
      if ((jsonObj.get("surname") != null && !jsonObj.get("surname").isJsonNull()) && !jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
      if ((jsonObj.get("usageLocation") != null && !jsonObj.get("usageLocation").isJsonNull()) && !jsonObj.get("usageLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageLocation").toString()));
      }
      if ((jsonObj.get("userType") != null && !jsonObj.get("userType").isJsonNull()) && !jsonObj.get("userType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userType").toString()));
      }
      // validate the optional field `userType`
      if (jsonObj.get("userType") != null && !jsonObj.get("userType").isJsonNull()) {
        UserTypeEnum.validateJsonElement(jsonObj.get("userType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<UserUpdateParameters>() {
           @Override
           public void write(JsonWriter out, UserUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to UserUpdateParameters
   */
  public static UserUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserUpdateParameters.class);
  }

  /**
   * Convert an instance of UserUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

