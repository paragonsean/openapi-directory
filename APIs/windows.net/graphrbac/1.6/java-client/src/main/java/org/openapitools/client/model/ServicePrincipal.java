/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppRole;
import org.openapitools.client.model.DirectoryObject;
import org.openapitools.client.model.KeyCredential;
import org.openapitools.client.model.OAuth2Permission;
import org.openapitools.client.model.PasswordCredential;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Active Directory service principal information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServicePrincipal extends DirectoryObject {
  public static final String SERIALIZED_NAME_ACCOUNT_ENABLED = "accountEnabled";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ENABLED)
  private Boolean accountEnabled;

  public static final String SERIALIZED_NAME_ALTERNATIVE_NAMES = "alternativeNames";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_NAMES)
  private List<String> alternativeNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_DISPLAY_NAME = "appDisplayName";
  @SerializedName(SERIALIZED_NAME_APP_DISPLAY_NAME)
  private String appDisplayName;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_OWNER_TENANT_ID = "appOwnerTenantId";
  @SerializedName(SERIALIZED_NAME_APP_OWNER_TENANT_ID)
  private String appOwnerTenantId;

  public static final String SERIALIZED_NAME_APP_ROLE_ASSIGNMENT_REQUIRED = "appRoleAssignmentRequired";
  @SerializedName(SERIALIZED_NAME_APP_ROLE_ASSIGNMENT_REQUIRED)
  private Boolean appRoleAssignmentRequired;

  public static final String SERIALIZED_NAME_APP_ROLES = "appRoles";
  @SerializedName(SERIALIZED_NAME_APP_ROLES)
  private List<AppRole> appRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ERROR_URL = "errorUrl";
  @SerializedName(SERIALIZED_NAME_ERROR_URL)
  private String errorUrl;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private String homepage;

  public static final String SERIALIZED_NAME_KEY_CREDENTIALS = "keyCredentials";
  @SerializedName(SERIALIZED_NAME_KEY_CREDENTIALS)
  private List<KeyCredential> keyCredentials = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGOUT_URL = "logoutUrl";
  @SerializedName(SERIALIZED_NAME_LOGOUT_URL)
  private String logoutUrl;

  public static final String SERIALIZED_NAME_OAUTH2_PERMISSIONS = "oauth2Permissions";
  @SerializedName(SERIALIZED_NAME_OAUTH2_PERMISSIONS)
  private List<OAuth2Permission> oauth2Permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD_CREDENTIALS = "passwordCredentials";
  @SerializedName(SERIALIZED_NAME_PASSWORD_CREDENTIALS)
  private List<PasswordCredential> passwordCredentials = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFERRED_TOKEN_SIGNING_KEY_THUMBPRINT = "preferredTokenSigningKeyThumbprint";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TOKEN_SIGNING_KEY_THUMBPRINT)
  private String preferredTokenSigningKeyThumbprint;

  public static final String SERIALIZED_NAME_PUBLISHER_NAME = "publisherName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAME)
  private String publisherName;

  public static final String SERIALIZED_NAME_REPLY_URLS = "replyUrls";
  @SerializedName(SERIALIZED_NAME_REPLY_URLS)
  private List<String> replyUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAML_METADATA_URL = "samlMetadataUrl";
  @SerializedName(SERIALIZED_NAME_SAML_METADATA_URL)
  private String samlMetadataUrl;

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_NAMES = "servicePrincipalNames";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_NAMES)
  private List<String> servicePrincipalNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_TYPE = "servicePrincipalType";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_TYPE)
  private String servicePrincipalType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public ServicePrincipal() {
    this.objectType = this.getClass().getSimpleName();
  }

  public ServicePrincipal(
     String appDisplayName, 
     String appOwnerTenantId, 
     List<OAuth2Permission> oauth2Permissions, 
     OffsetDateTime deletionTimestamp, 
     String objectId
  ) {
    this();
    this.appDisplayName = appDisplayName;
    this.appOwnerTenantId = appOwnerTenantId;
    this.oauth2Permissions = oauth2Permissions;
    this.deletionTimestamp = deletionTimestamp;
    this.objectId = objectId;
  }

  public ServicePrincipal accountEnabled(Boolean accountEnabled) {
    this.accountEnabled = accountEnabled;
    return this;
  }

  /**
   * whether or not the service principal account is enabled
   * @return accountEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAccountEnabled() {
    return accountEnabled;
  }

  public void setAccountEnabled(Boolean accountEnabled) {
    this.accountEnabled = accountEnabled;
  }


  public ServicePrincipal alternativeNames(List<String> alternativeNames) {
    this.alternativeNames = alternativeNames;
    return this;
  }

  public ServicePrincipal addAlternativeNamesItem(String alternativeNamesItem) {
    if (this.alternativeNames == null) {
      this.alternativeNames = new ArrayList<>();
    }
    this.alternativeNames.add(alternativeNamesItem);
    return this;
  }

  /**
   * alternative names
   * @return alternativeNames
   */
  @javax.annotation.Nullable
  public List<String> getAlternativeNames() {
    return alternativeNames;
  }

  public void setAlternativeNames(List<String> alternativeNames) {
    this.alternativeNames = alternativeNames;
  }


  /**
   * The display name exposed by the associated application.
   * @return appDisplayName
   */
  @javax.annotation.Nullable
  public String getAppDisplayName() {
    return appDisplayName;
  }



  public ServicePrincipal appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The application ID.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  /**
   * Get appOwnerTenantId
   * @return appOwnerTenantId
   */
  @javax.annotation.Nullable
  public String getAppOwnerTenantId() {
    return appOwnerTenantId;
  }



  public ServicePrincipal appRoleAssignmentRequired(Boolean appRoleAssignmentRequired) {
    this.appRoleAssignmentRequired = appRoleAssignmentRequired;
    return this;
  }

  /**
   * Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.
   * @return appRoleAssignmentRequired
   */
  @javax.annotation.Nullable
  public Boolean getAppRoleAssignmentRequired() {
    return appRoleAssignmentRequired;
  }

  public void setAppRoleAssignmentRequired(Boolean appRoleAssignmentRequired) {
    this.appRoleAssignmentRequired = appRoleAssignmentRequired;
  }


  public ServicePrincipal appRoles(List<AppRole> appRoles) {
    this.appRoles = appRoles;
    return this;
  }

  public ServicePrincipal addAppRolesItem(AppRole appRolesItem) {
    if (this.appRoles == null) {
      this.appRoles = new ArrayList<>();
    }
    this.appRoles.add(appRolesItem);
    return this;
  }

  /**
   * The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.
   * @return appRoles
   */
  @javax.annotation.Nullable
  public List<AppRole> getAppRoles() {
    return appRoles;
  }

  public void setAppRoles(List<AppRole> appRoles) {
    this.appRoles = appRoles;
  }


  public ServicePrincipal displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the service principal.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ServicePrincipal errorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
    return this;
  }

  /**
   * A URL provided by the author of the associated application to report errors when using the application.
   * @return errorUrl
   */
  @javax.annotation.Nullable
  public String getErrorUrl() {
    return errorUrl;
  }

  public void setErrorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
  }


  public ServicePrincipal homepage(String homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * The URL to the homepage of the associated application.
   * @return homepage
   */
  @javax.annotation.Nullable
  public String getHomepage() {
    return homepage;
  }

  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }


  public ServicePrincipal keyCredentials(List<KeyCredential> keyCredentials) {
    this.keyCredentials = keyCredentials;
    return this;
  }

  public ServicePrincipal addKeyCredentialsItem(KeyCredential keyCredentialsItem) {
    if (this.keyCredentials == null) {
      this.keyCredentials = new ArrayList<>();
    }
    this.keyCredentials.add(keyCredentialsItem);
    return this;
  }

  /**
   * The collection of key credentials associated with the service principal.
   * @return keyCredentials
   */
  @javax.annotation.Nullable
  public List<KeyCredential> getKeyCredentials() {
    return keyCredentials;
  }

  public void setKeyCredentials(List<KeyCredential> keyCredentials) {
    this.keyCredentials = keyCredentials;
  }


  public ServicePrincipal logoutUrl(String logoutUrl) {
    this.logoutUrl = logoutUrl;
    return this;
  }

  /**
   * A URL provided by the author of the associated application to logout
   * @return logoutUrl
   */
  @javax.annotation.Nullable
  public String getLogoutUrl() {
    return logoutUrl;
  }

  public void setLogoutUrl(String logoutUrl) {
    this.logoutUrl = logoutUrl;
  }


  /**
   * The OAuth 2.0 permissions exposed by the associated application.
   * @return oauth2Permissions
   */
  @javax.annotation.Nullable
  public List<OAuth2Permission> getOauth2Permissions() {
    return oauth2Permissions;
  }



  public ServicePrincipal passwordCredentials(List<PasswordCredential> passwordCredentials) {
    this.passwordCredentials = passwordCredentials;
    return this;
  }

  public ServicePrincipal addPasswordCredentialsItem(PasswordCredential passwordCredentialsItem) {
    if (this.passwordCredentials == null) {
      this.passwordCredentials = new ArrayList<>();
    }
    this.passwordCredentials.add(passwordCredentialsItem);
    return this;
  }

  /**
   * The collection of password credentials associated with the service principal.
   * @return passwordCredentials
   */
  @javax.annotation.Nullable
  public List<PasswordCredential> getPasswordCredentials() {
    return passwordCredentials;
  }

  public void setPasswordCredentials(List<PasswordCredential> passwordCredentials) {
    this.passwordCredentials = passwordCredentials;
  }


  public ServicePrincipal preferredTokenSigningKeyThumbprint(String preferredTokenSigningKeyThumbprint) {
    this.preferredTokenSigningKeyThumbprint = preferredTokenSigningKeyThumbprint;
    return this;
  }

  /**
   * The thumbprint of preferred certificate to sign the token
   * @return preferredTokenSigningKeyThumbprint
   */
  @javax.annotation.Nullable
  public String getPreferredTokenSigningKeyThumbprint() {
    return preferredTokenSigningKeyThumbprint;
  }

  public void setPreferredTokenSigningKeyThumbprint(String preferredTokenSigningKeyThumbprint) {
    this.preferredTokenSigningKeyThumbprint = preferredTokenSigningKeyThumbprint;
  }


  public ServicePrincipal publisherName(String publisherName) {
    this.publisherName = publisherName;
    return this;
  }

  /**
   * The publisher&#39;s name of the associated application
   * @return publisherName
   */
  @javax.annotation.Nullable
  public String getPublisherName() {
    return publisherName;
  }

  public void setPublisherName(String publisherName) {
    this.publisherName = publisherName;
  }


  public ServicePrincipal replyUrls(List<String> replyUrls) {
    this.replyUrls = replyUrls;
    return this;
  }

  public ServicePrincipal addReplyUrlsItem(String replyUrlsItem) {
    if (this.replyUrls == null) {
      this.replyUrls = new ArrayList<>();
    }
    this.replyUrls.add(replyUrlsItem);
    return this;
  }

  /**
   * The URLs that user tokens are sent to for sign in with the associated application.  The redirect URIs that the oAuth 2.0 authorization code and access tokens are sent to for the associated application.
   * @return replyUrls
   */
  @javax.annotation.Nullable
  public List<String> getReplyUrls() {
    return replyUrls;
  }

  public void setReplyUrls(List<String> replyUrls) {
    this.replyUrls = replyUrls;
  }


  public ServicePrincipal samlMetadataUrl(String samlMetadataUrl) {
    this.samlMetadataUrl = samlMetadataUrl;
    return this;
  }

  /**
   * The URL to the SAML metadata of the associated application
   * @return samlMetadataUrl
   */
  @javax.annotation.Nullable
  public String getSamlMetadataUrl() {
    return samlMetadataUrl;
  }

  public void setSamlMetadataUrl(String samlMetadataUrl) {
    this.samlMetadataUrl = samlMetadataUrl;
  }


  public ServicePrincipal servicePrincipalNames(List<String> servicePrincipalNames) {
    this.servicePrincipalNames = servicePrincipalNames;
    return this;
  }

  public ServicePrincipal addServicePrincipalNamesItem(String servicePrincipalNamesItem) {
    if (this.servicePrincipalNames == null) {
      this.servicePrincipalNames = new ArrayList<>();
    }
    this.servicePrincipalNames.add(servicePrincipalNamesItem);
    return this;
  }

  /**
   * A collection of service principal names.
   * @return servicePrincipalNames
   */
  @javax.annotation.Nullable
  public List<String> getServicePrincipalNames() {
    return servicePrincipalNames;
  }

  public void setServicePrincipalNames(List<String> servicePrincipalNames) {
    this.servicePrincipalNames = servicePrincipalNames;
  }


  public ServicePrincipal servicePrincipalType(String servicePrincipalType) {
    this.servicePrincipalType = servicePrincipalType;
    return this;
  }

  /**
   * the type of the service principal
   * @return servicePrincipalType
   */
  @javax.annotation.Nullable
  public String getServicePrincipalType() {
    return servicePrincipalType;
  }

  public void setServicePrincipalType(String servicePrincipalType) {
    this.servicePrincipalType = servicePrincipalType;
  }


  public ServicePrincipal tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ServicePrincipal addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Optional list of tags that you can apply to your service principals. Not nullable.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServicePrincipal servicePrincipal = (ServicePrincipal) o;
    return Objects.equals(this.accountEnabled, servicePrincipal.accountEnabled) &&
        Objects.equals(this.alternativeNames, servicePrincipal.alternativeNames) &&
        Objects.equals(this.appDisplayName, servicePrincipal.appDisplayName) &&
        Objects.equals(this.appId, servicePrincipal.appId) &&
        Objects.equals(this.appOwnerTenantId, servicePrincipal.appOwnerTenantId) &&
        Objects.equals(this.appRoleAssignmentRequired, servicePrincipal.appRoleAssignmentRequired) &&
        Objects.equals(this.appRoles, servicePrincipal.appRoles) &&
        Objects.equals(this.displayName, servicePrincipal.displayName) &&
        Objects.equals(this.errorUrl, servicePrincipal.errorUrl) &&
        Objects.equals(this.homepage, servicePrincipal.homepage) &&
        Objects.equals(this.keyCredentials, servicePrincipal.keyCredentials) &&
        Objects.equals(this.logoutUrl, servicePrincipal.logoutUrl) &&
        Objects.equals(this.oauth2Permissions, servicePrincipal.oauth2Permissions) &&
        Objects.equals(this.passwordCredentials, servicePrincipal.passwordCredentials) &&
        Objects.equals(this.preferredTokenSigningKeyThumbprint, servicePrincipal.preferredTokenSigningKeyThumbprint) &&
        Objects.equals(this.publisherName, servicePrincipal.publisherName) &&
        Objects.equals(this.replyUrls, servicePrincipal.replyUrls) &&
        Objects.equals(this.samlMetadataUrl, servicePrincipal.samlMetadataUrl) &&
        Objects.equals(this.servicePrincipalNames, servicePrincipal.servicePrincipalNames) &&
        Objects.equals(this.servicePrincipalType, servicePrincipal.servicePrincipalType) &&
        Objects.equals(this.tags, servicePrincipal.tags) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountEnabled, alternativeNames, appDisplayName, appId, appOwnerTenantId, appRoleAssignmentRequired, appRoles, displayName, errorUrl, homepage, keyCredentials, logoutUrl, oauth2Permissions, passwordCredentials, preferredTokenSigningKeyThumbprint, publisherName, replyUrls, samlMetadataUrl, servicePrincipalNames, servicePrincipalType, tags, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServicePrincipal {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    accountEnabled: ").append(toIndentedString(accountEnabled)).append("\n");
    sb.append("    alternativeNames: ").append(toIndentedString(alternativeNames)).append("\n");
    sb.append("    appDisplayName: ").append(toIndentedString(appDisplayName)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appOwnerTenantId: ").append(toIndentedString(appOwnerTenantId)).append("\n");
    sb.append("    appRoleAssignmentRequired: ").append(toIndentedString(appRoleAssignmentRequired)).append("\n");
    sb.append("    appRoles: ").append(toIndentedString(appRoles)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    errorUrl: ").append(toIndentedString(errorUrl)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    keyCredentials: ").append(toIndentedString(keyCredentials)).append("\n");
    sb.append("    logoutUrl: ").append(toIndentedString(logoutUrl)).append("\n");
    sb.append("    oauth2Permissions: ").append(toIndentedString(oauth2Permissions)).append("\n");
    sb.append("    passwordCredentials: ").append(toIndentedString(passwordCredentials)).append("\n");
    sb.append("    preferredTokenSigningKeyThumbprint: ").append(toIndentedString(preferredTokenSigningKeyThumbprint)).append("\n");
    sb.append("    publisherName: ").append(toIndentedString(publisherName)).append("\n");
    sb.append("    replyUrls: ").append(toIndentedString(replyUrls)).append("\n");
    sb.append("    samlMetadataUrl: ").append(toIndentedString(samlMetadataUrl)).append("\n");
    sb.append("    servicePrincipalNames: ").append(toIndentedString(servicePrincipalNames)).append("\n");
    sb.append("    servicePrincipalType: ").append(toIndentedString(servicePrincipalType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deletionTimestamp");
    openapiFields.add("objectId");
    openapiFields.add("objectType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objectType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServicePrincipal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServicePrincipal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServicePrincipal is not found in the empty JSON string", ServicePrincipal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServicePrincipal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServicePrincipal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServicePrincipal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServicePrincipal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServicePrincipal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServicePrincipal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServicePrincipal.class));

       return (TypeAdapter<T>) new TypeAdapter<ServicePrincipal>() {
           @Override
           public void write(JsonWriter out, ServicePrincipal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServicePrincipal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServicePrincipal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServicePrincipal
   * @throws IOException if the JSON string is invalid with respect to ServicePrincipal
   */
  public static ServicePrincipal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServicePrincipal.class);
  }

  /**
   * Convert an instance of ServicePrincipal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

