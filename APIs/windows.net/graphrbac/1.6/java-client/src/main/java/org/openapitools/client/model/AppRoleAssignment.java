/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DirectoryObject;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppRoleAssignment information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:35.684069-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppRoleAssignment extends DirectoryObject {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRINCIPAL_DISPLAY_NAME = "principalDisplayName";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_DISPLAY_NAME)
  private String principalDisplayName;

  public static final String SERIALIZED_NAME_PRINCIPAL_ID = "principalId";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ID)
  private String principalId;

  public static final String SERIALIZED_NAME_PRINCIPAL_TYPE = "principalType";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_TYPE)
  private String principalType;

  public static final String SERIALIZED_NAME_RESOURCE_DISPLAY_NAME = "resourceDisplayName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_DISPLAY_NAME)
  private String resourceDisplayName;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public AppRoleAssignment() {
    this.objectType = this.getClass().getSimpleName();
  }

  public AppRoleAssignment(
     OffsetDateTime deletionTimestamp, 
     String objectId
  ) {
    this();
    this.deletionTimestamp = deletionTimestamp;
    this.objectId = objectId;
  }

  public AppRoleAssignment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The role id that was assigned to the principal. This role must be declared by the target resource application resourceId in its appRoles property.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AppRoleAssignment principalDisplayName(String principalDisplayName) {
    this.principalDisplayName = principalDisplayName;
    return this;
  }

  /**
   * The display name of the principal that was granted the access.
   * @return principalDisplayName
   */
  @javax.annotation.Nullable
  public String getPrincipalDisplayName() {
    return principalDisplayName;
  }

  public void setPrincipalDisplayName(String principalDisplayName) {
    this.principalDisplayName = principalDisplayName;
  }


  public AppRoleAssignment principalId(String principalId) {
    this.principalId = principalId;
    return this;
  }

  /**
   * The unique identifier (objectId) for the principal being granted the access.
   * @return principalId
   */
  @javax.annotation.Nullable
  public String getPrincipalId() {
    return principalId;
  }

  public void setPrincipalId(String principalId) {
    this.principalId = principalId;
  }


  public AppRoleAssignment principalType(String principalType) {
    this.principalType = principalType;
    return this;
  }

  /**
   * The type of principal. This can either be \&quot;User\&quot;, \&quot;Group\&quot; or \&quot;ServicePrincipal\&quot;.
   * @return principalType
   */
  @javax.annotation.Nullable
  public String getPrincipalType() {
    return principalType;
  }

  public void setPrincipalType(String principalType) {
    this.principalType = principalType;
  }


  public AppRoleAssignment resourceDisplayName(String resourceDisplayName) {
    this.resourceDisplayName = resourceDisplayName;
    return this;
  }

  /**
   * The display name of the resource to which the assignment was made.
   * @return resourceDisplayName
   */
  @javax.annotation.Nullable
  public String getResourceDisplayName() {
    return resourceDisplayName;
  }

  public void setResourceDisplayName(String resourceDisplayName) {
    this.resourceDisplayName = resourceDisplayName;
  }


  public AppRoleAssignment resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * The unique identifier (objectId) for the target resource (service principal) for which the assignment was made.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppRoleAssignment appRoleAssignment = (AppRoleAssignment) o;
    return Objects.equals(this.id, appRoleAssignment.id) &&
        Objects.equals(this.principalDisplayName, appRoleAssignment.principalDisplayName) &&
        Objects.equals(this.principalId, appRoleAssignment.principalId) &&
        Objects.equals(this.principalType, appRoleAssignment.principalType) &&
        Objects.equals(this.resourceDisplayName, appRoleAssignment.resourceDisplayName) &&
        Objects.equals(this.resourceId, appRoleAssignment.resourceId) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, principalDisplayName, principalId, principalType, resourceDisplayName, resourceId, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppRoleAssignment {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    principalDisplayName: ").append(toIndentedString(principalDisplayName)).append("\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("    principalType: ").append(toIndentedString(principalType)).append("\n");
    sb.append("    resourceDisplayName: ").append(toIndentedString(resourceDisplayName)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deletionTimestamp");
    openapiFields.add("objectId");
    openapiFields.add("objectType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objectType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppRoleAssignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppRoleAssignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppRoleAssignment is not found in the empty JSON string", AppRoleAssignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppRoleAssignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppRoleAssignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppRoleAssignment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppRoleAssignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppRoleAssignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppRoleAssignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppRoleAssignment.class));

       return (TypeAdapter<T>) new TypeAdapter<AppRoleAssignment>() {
           @Override
           public void write(JsonWriter out, AppRoleAssignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppRoleAssignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppRoleAssignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppRoleAssignment
   * @throws IOException if the JSON string is invalid with respect to AppRoleAssignment
   */
  public static AppRoleAssignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppRoleAssignment.class);
  }

  /**
   * Convert an instance of AppRoleAssignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

