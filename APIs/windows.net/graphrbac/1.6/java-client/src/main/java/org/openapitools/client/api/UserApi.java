/*
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GraphError;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCreateParameters;
import org.openapitools.client.model.UserGetMemberGroupsParameters;
import org.openapitools.client.model.UserGetMemberGroupsResult;
import org.openapitools.client.model.UserListResult;
import org.openapitools.client.model.UserUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersCreate
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userCreateParameters Parameters to create a user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates success. The new user is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersCreateCall(String apiVersion, String tenantID, UserCreateParameters userCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCreateParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/users"
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCreateValidateBeforeCall(String apiVersion, String tenantID, UserCreateParameters userCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usersCreate(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling usersCreate(Async)");
        }

        // verify the required parameter 'userCreateParameters' is set
        if (userCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'userCreateParameters' when calling usersCreate(Async)");
        }

        return usersCreateCall(apiVersion, tenantID, userCreateParameters, _callback);

    }

    /**
     * 
     * Create a new user.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userCreateParameters Parameters to create a user. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates success. The new user is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public User usersCreate(String apiVersion, String tenantID, UserCreateParameters userCreateParameters) throws ApiException {
        ApiResponse<User> localVarResp = usersCreateWithHttpInfo(apiVersion, tenantID, userCreateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new user.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userCreateParameters Parameters to create a user. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates success. The new user is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersCreateWithHttpInfo(String apiVersion, String tenantID, UserCreateParameters userCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = usersCreateValidateBeforeCall(apiVersion, tenantID, userCreateParameters, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new user.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userCreateParameters Parameters to create a user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates success. The new user is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersCreateAsync(String apiVersion, String tenantID, UserCreateParameters userCreateParameters, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCreateValidateBeforeCall(apiVersion, tenantID, userCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDelete
     * @param upnOrObjectId The object ID or principal name of the user to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersDeleteCall(String upnOrObjectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/users/{upnOrObjectId}"
            .replace("{" + "upnOrObjectId" + "}", localVarApiClient.escapeString(upnOrObjectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeleteValidateBeforeCall(String upnOrObjectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upnOrObjectId' is set
        if (upnOrObjectId == null) {
            throw new ApiException("Missing the required parameter 'upnOrObjectId' when calling usersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usersDelete(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling usersDelete(Async)");
        }

        return usersDeleteCall(upnOrObjectId, apiVersion, tenantID, _callback);

    }

    /**
     * 
     * Delete a user.
     * @param upnOrObjectId The object ID or principal name of the user to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void usersDelete(String upnOrObjectId, String apiVersion, String tenantID) throws ApiException {
        usersDeleteWithHttpInfo(upnOrObjectId, apiVersion, tenantID);
    }

    /**
     * 
     * Delete a user.
     * @param upnOrObjectId The object ID or principal name of the user to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersDeleteWithHttpInfo(String upnOrObjectId, String apiVersion, String tenantID) throws ApiException {
        okhttp3.Call localVarCall = usersDeleteValidateBeforeCall(upnOrObjectId, apiVersion, tenantID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a user.
     * @param upnOrObjectId The object ID or principal name of the user to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersDeleteAsync(String upnOrObjectId, String apiVersion, String tenantID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeleteValidateBeforeCall(upnOrObjectId, apiVersion, tenantID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param upnOrObjectId The object ID or principal name of the user for which to get information. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(String upnOrObjectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/users/{upnOrObjectId}"
            .replace("{" + "upnOrObjectId" + "}", localVarApiClient.escapeString(upnOrObjectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(String upnOrObjectId, String apiVersion, String tenantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upnOrObjectId' is set
        if (upnOrObjectId == null) {
            throw new ApiException("Missing the required parameter 'upnOrObjectId' when calling usersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usersGet(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling usersGet(Async)");
        }

        return usersGetCall(upnOrObjectId, apiVersion, tenantID, _callback);

    }

    /**
     * 
     * Gets user information from the directory.
     * @param upnOrObjectId The object ID or principal name of the user for which to get information. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public User usersGet(String upnOrObjectId, String apiVersion, String tenantID) throws ApiException {
        ApiResponse<User> localVarResp = usersGetWithHttpInfo(upnOrObjectId, apiVersion, tenantID);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets user information from the directory.
     * @param upnOrObjectId The object ID or principal name of the user for which to get information. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersGetWithHttpInfo(String upnOrObjectId, String apiVersion, String tenantID) throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(upnOrObjectId, apiVersion, tenantID, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets user information from the directory.
     * @param upnOrObjectId The object ID or principal name of the user for which to get information. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(String upnOrObjectId, String apiVersion, String tenantID, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(upnOrObjectId, apiVersion, tenantID, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetMemberGroups
     * @param objectId The object ID of the user for which to get group membership. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userGetMemberGroupsParameters User filtering parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetMemberGroupsCall(String objectId, String apiVersion, String tenantID, UserGetMemberGroupsParameters userGetMemberGroupsParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userGetMemberGroupsParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/users/{objectId}/getMemberGroups"
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetMemberGroupsValidateBeforeCall(String objectId, String apiVersion, String tenantID, UserGetMemberGroupsParameters userGetMemberGroupsParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling usersGetMemberGroups(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usersGetMemberGroups(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling usersGetMemberGroups(Async)");
        }

        // verify the required parameter 'userGetMemberGroupsParameters' is set
        if (userGetMemberGroupsParameters == null) {
            throw new ApiException("Missing the required parameter 'userGetMemberGroupsParameters' when calling usersGetMemberGroups(Async)");
        }

        return usersGetMemberGroupsCall(objectId, apiVersion, tenantID, userGetMemberGroupsParameters, _callback);

    }

    /**
     * 
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     * @param objectId The object ID of the user for which to get group membership. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userGetMemberGroupsParameters User filtering parameters. (required)
     * @return UserGetMemberGroupsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public UserGetMemberGroupsResult usersGetMemberGroups(String objectId, String apiVersion, String tenantID, UserGetMemberGroupsParameters userGetMemberGroupsParameters) throws ApiException {
        ApiResponse<UserGetMemberGroupsResult> localVarResp = usersGetMemberGroupsWithHttpInfo(objectId, apiVersion, tenantID, userGetMemberGroupsParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     * @param objectId The object ID of the user for which to get group membership. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userGetMemberGroupsParameters User filtering parameters. (required)
     * @return ApiResponse&lt;UserGetMemberGroupsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetMemberGroupsResult> usersGetMemberGroupsWithHttpInfo(String objectId, String apiVersion, String tenantID, UserGetMemberGroupsParameters userGetMemberGroupsParameters) throws ApiException {
        okhttp3.Call localVarCall = usersGetMemberGroupsValidateBeforeCall(objectId, apiVersion, tenantID, userGetMemberGroupsParameters, null);
        Type localVarReturnType = new TypeToken<UserGetMemberGroupsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     * @param objectId The object ID of the user for which to get group membership. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userGetMemberGroupsParameters User filtering parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetMemberGroupsAsync(String objectId, String apiVersion, String tenantID, UserGetMemberGroupsParameters userGetMemberGroupsParameters, final ApiCallback<UserGetMemberGroupsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetMemberGroupsValidateBeforeCall(objectId, apiVersion, tenantID, userGetMemberGroupsParameters, _callback);
        Type localVarReturnType = new TypeToken<UserGetMemberGroupsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersList
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $expand The expand value for the operation result. (optional)
     * @param $top (Optional) Set the maximum number of results per response. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersListCall(String apiVersion, String tenantID, String $filter, String $expand, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{tenantID}/users"
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListValidateBeforeCall(String apiVersion, String tenantID, String $filter, String $expand, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usersList(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling usersList(Async)");
        }

        return usersListCall(apiVersion, tenantID, $filter, $expand, $top, _callback);

    }

    /**
     * 
     * Gets list of users for the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $expand The expand value for the operation result. (optional)
     * @param $top (Optional) Set the maximum number of results per response. (optional, default to 100)
     * @return UserListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public UserListResult usersList(String apiVersion, String tenantID, String $filter, String $expand, Integer $top) throws ApiException {
        ApiResponse<UserListResult> localVarResp = usersListWithHttpInfo(apiVersion, tenantID, $filter, $expand, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets list of users for the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $expand The expand value for the operation result. (optional)
     * @param $top (Optional) Set the maximum number of results per response. (optional, default to 100)
     * @return ApiResponse&lt;UserListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserListResult> usersListWithHttpInfo(String apiVersion, String tenantID, String $filter, String $expand, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = usersListValidateBeforeCall(apiVersion, tenantID, $filter, $expand, $top, null);
        Type localVarReturnType = new TypeToken<UserListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets list of users for the current tenant.
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $expand The expand value for the operation result. (optional)
     * @param $top (Optional) Set the maximum number of results per response. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersListAsync(String apiVersion, String tenantID, String $filter, String $expand, Integer $top, final ApiCallback<UserListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListValidateBeforeCall(apiVersion, tenantID, $filter, $expand, $top, _callback);
        Type localVarReturnType = new TypeToken<UserListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUpdate
     * @param upnOrObjectId The object ID or principal name of the user to update. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userUpdateParameters Parameters to update an existing user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateCall(String upnOrObjectId, String apiVersion, String tenantID, UserUpdateParameters userUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userUpdateParameters;

        // create path and map variables
        String localVarPath = "/{tenantID}/users/{upnOrObjectId}"
            .replace("{" + "upnOrObjectId" + "}", localVarApiClient.escapeString(upnOrObjectId.toString()))
            .replace("{" + "tenantID" + "}", localVarApiClient.escapeString(tenantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUpdateValidateBeforeCall(String upnOrObjectId, String apiVersion, String tenantID, UserUpdateParameters userUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upnOrObjectId' is set
        if (upnOrObjectId == null) {
            throw new ApiException("Missing the required parameter 'upnOrObjectId' when calling usersUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usersUpdate(Async)");
        }

        // verify the required parameter 'tenantID' is set
        if (tenantID == null) {
            throw new ApiException("Missing the required parameter 'tenantID' when calling usersUpdate(Async)");
        }

        // verify the required parameter 'userUpdateParameters' is set
        if (userUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'userUpdateParameters' when calling usersUpdate(Async)");
        }

        return usersUpdateCall(upnOrObjectId, apiVersion, tenantID, userUpdateParameters, _callback);

    }

    /**
     * 
     * Updates a user.
     * @param upnOrObjectId The object ID or principal name of the user to update. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userUpdateParameters Parameters to update an existing user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void usersUpdate(String upnOrObjectId, String apiVersion, String tenantID, UserUpdateParameters userUpdateParameters) throws ApiException {
        usersUpdateWithHttpInfo(upnOrObjectId, apiVersion, tenantID, userUpdateParameters);
    }

    /**
     * 
     * Updates a user.
     * @param upnOrObjectId The object ID or principal name of the user to update. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userUpdateParameters Parameters to update an existing user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersUpdateWithHttpInfo(String upnOrObjectId, String apiVersion, String tenantID, UserUpdateParameters userUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(upnOrObjectId, apiVersion, tenantID, userUpdateParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates a user.
     * @param upnOrObjectId The object ID or principal name of the user to update. (required)
     * @param apiVersion Client API version. (required)
     * @param tenantID The tenant ID. (required)
     * @param userUpdateParameters Parameters to update an existing user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateAsync(String upnOrObjectId, String apiVersion, String tenantID, UserUpdateParameters userUpdateParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(upnOrObjectId, apiVersion, tenantID, userUpdateParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
