# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupGetMemberGroupsParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, security_enabled_only: bool=None):
        """GroupGetMemberGroupsParameters - a model defined in OpenAPI

        :param security_enabled_only: The security_enabled_only of this GroupGetMemberGroupsParameters.
        """
        self.openapi_types = {
            'security_enabled_only': bool
        }

        self.attribute_map = {
            'security_enabled_only': 'securityEnabledOnly'
        }

        self._security_enabled_only = security_enabled_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupGetMemberGroupsParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupGetMemberGroupsParameters of this GroupGetMemberGroupsParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def security_enabled_only(self):
        """Gets the security_enabled_only of this GroupGetMemberGroupsParameters.

        If true, only membership in security-enabled groups should be checked. Otherwise, membership in all groups should be checked.

        :return: The security_enabled_only of this GroupGetMemberGroupsParameters.
        :rtype: bool
        """
        return self._security_enabled_only

    @security_enabled_only.setter
    def security_enabled_only(self, security_enabled_only):
        """Sets the security_enabled_only of this GroupGetMemberGroupsParameters.

        If true, only membership in security-enabled groups should be checked. Otherwise, membership in all groups should be checked.

        :param security_enabled_only: The security_enabled_only of this GroupGetMemberGroupsParameters.
        :type security_enabled_only: bool
        """
        if security_enabled_only is None:
            raise ValueError("Invalid value for `security_enabled_only`, must not be `None`")

        self._security_enabled_only = security_enabled_only
