# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_member_types: List[str]=None, description: str=None, display_name: str=None, id: str=None, is_enabled: bool=None, value: str=None):
        """AppRole - a model defined in OpenAPI

        :param allowed_member_types: The allowed_member_types of this AppRole.
        :param description: The description of this AppRole.
        :param display_name: The display_name of this AppRole.
        :param id: The id of this AppRole.
        :param is_enabled: The is_enabled of this AppRole.
        :param value: The value of this AppRole.
        """
        self.openapi_types = {
            'allowed_member_types': List[str],
            'description': str,
            'display_name': str,
            'id': str,
            'is_enabled': bool,
            'value': str
        }

        self.attribute_map = {
            'allowed_member_types': 'allowedMemberTypes',
            'description': 'description',
            'display_name': 'displayName',
            'id': 'id',
            'is_enabled': 'isEnabled',
            'value': 'value'
        }

        self._allowed_member_types = allowed_member_types
        self._description = description
        self._display_name = display_name
        self._id = id
        self._is_enabled = is_enabled
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppRole of this AppRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_member_types(self):
        """Gets the allowed_member_types of this AppRole.

        Specifies whether this app role definition can be assigned to users and groups by setting to 'User', or to other applications (that are accessing this application in daemon service scenarios) by setting to 'Application', or to both. 

        :return: The allowed_member_types of this AppRole.
        :rtype: List[str]
        """
        return self._allowed_member_types

    @allowed_member_types.setter
    def allowed_member_types(self, allowed_member_types):
        """Sets the allowed_member_types of this AppRole.

        Specifies whether this app role definition can be assigned to users and groups by setting to 'User', or to other applications (that are accessing this application in daemon service scenarios) by setting to 'Application', or to both. 

        :param allowed_member_types: The allowed_member_types of this AppRole.
        :type allowed_member_types: List[str]
        """

        self._allowed_member_types = allowed_member_types

    @property
    def description(self):
        """Gets the description of this AppRole.

        Permission help text that appears in the admin app assignment and consent experiences.

        :return: The description of this AppRole.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppRole.

        Permission help text that appears in the admin app assignment and consent experiences.

        :param description: The description of this AppRole.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this AppRole.

        Display name for the permission that appears in the admin consent and app assignment experiences.

        :return: The display_name of this AppRole.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppRole.

        Display name for the permission that appears in the admin consent and app assignment experiences.

        :param display_name: The display_name of this AppRole.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this AppRole.

        Unique role identifier inside the appRoles collection.

        :return: The id of this AppRole.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppRole.

        Unique role identifier inside the appRoles collection.

        :param id: The id of this AppRole.
        :type id: str
        """

        self._id = id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AppRole.

        When creating or updating a role definition, this must be set to true (which is the default). To delete a role, this must first be set to false. At that point, in a subsequent call, this role may be removed.

        :return: The is_enabled of this AppRole.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AppRole.

        When creating or updating a role definition, this must be set to true (which is the default). To delete a role, this must first be set to false. At that point, in a subsequent call, this role may be removed.

        :param is_enabled: The is_enabled of this AppRole.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def value(self):
        """Gets the value of this AppRole.

        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.

        :return: The value of this AppRole.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AppRole.

        Specifies the value of the roles claim that the application should expect in the authentication and access tokens.

        :param value: The value of this AppRole.
        :type value: str
        """

        self._value = value
