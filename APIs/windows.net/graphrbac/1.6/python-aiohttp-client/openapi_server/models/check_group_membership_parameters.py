# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckGroupMembershipParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: str=None, member_id: str=None):
        """CheckGroupMembershipParameters - a model defined in OpenAPI

        :param group_id: The group_id of this CheckGroupMembershipParameters.
        :param member_id: The member_id of this CheckGroupMembershipParameters.
        """
        self.openapi_types = {
            'group_id': str,
            'member_id': str
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'member_id': 'memberId'
        }

        self._group_id = group_id
        self._member_id = member_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckGroupMembershipParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckGroupMembershipParameters of this CheckGroupMembershipParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this CheckGroupMembershipParameters.

        The object ID of the group to check.

        :return: The group_id of this CheckGroupMembershipParameters.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CheckGroupMembershipParameters.

        The object ID of the group to check.

        :param group_id: The group_id of this CheckGroupMembershipParameters.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def member_id(self):
        """Gets the member_id of this CheckGroupMembershipParameters.

        The object ID of the contact, group, user, or service principal to check for membership in the specified group.

        :return: The member_id of this CheckGroupMembershipParameters.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this CheckGroupMembershipParameters.

        The object ID of the contact, group, user, or service principal to check for membership in the specified group.

        :param member_id: The member_id of this CheckGroupMembershipParameters.
        :type member_id: str
        """
        if member_id is None:
            raise ValueError("Invalid value for `member_id`, must not be `None`")

        self._member_id = member_id
