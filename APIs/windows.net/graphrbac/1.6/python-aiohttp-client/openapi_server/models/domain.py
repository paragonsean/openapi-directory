# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Domain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_type: str=None, is_default: bool=None, is_verified: bool=None, name: str=None):
        """Domain - a model defined in OpenAPI

        :param authentication_type: The authentication_type of this Domain.
        :param is_default: The is_default of this Domain.
        :param is_verified: The is_verified of this Domain.
        :param name: The name of this Domain.
        """
        self.openapi_types = {
            'authentication_type': str,
            'is_default': bool,
            'is_verified': bool,
            'name': str
        }

        self.attribute_map = {
            'authentication_type': 'authenticationType',
            'is_default': 'isDefault',
            'is_verified': 'isVerified',
            'name': 'name'
        }

        self._authentication_type = authentication_type
        self._is_default = is_default
        self._is_verified = is_verified
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Domain of this Domain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_type(self):
        """Gets the authentication_type of this Domain.

        the type of the authentication into the domain.

        :return: The authentication_type of this Domain.
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this Domain.

        the type of the authentication into the domain.

        :param authentication_type: The authentication_type of this Domain.
        :type authentication_type: str
        """

        self._authentication_type = authentication_type

    @property
    def is_default(self):
        """Gets the is_default of this Domain.

        if this is the default domain in the tenant.

        :return: The is_default of this Domain.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Domain.

        if this is the default domain in the tenant.

        :param is_default: The is_default of this Domain.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def is_verified(self):
        """Gets the is_verified of this Domain.

        if this domain's ownership is verified.

        :return: The is_verified of this Domain.
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this Domain.

        if this domain's ownership is verified.

        :param is_verified: The is_verified of this Domain.
        :type is_verified: bool
        """

        self._is_verified = is_verified

    @property
    def name(self):
        """Gets the name of this Domain.

        the domain name.

        :return: The name of this Domain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Domain.

        the domain name.

        :param name: The name of this Domain.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
