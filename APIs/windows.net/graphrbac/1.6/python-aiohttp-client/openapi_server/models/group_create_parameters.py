# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupCreateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, mail_enabled: bool=None, mail_nickname: str=None, security_enabled: bool=None):
        """GroupCreateParameters - a model defined in OpenAPI

        :param display_name: The display_name of this GroupCreateParameters.
        :param mail_enabled: The mail_enabled of this GroupCreateParameters.
        :param mail_nickname: The mail_nickname of this GroupCreateParameters.
        :param security_enabled: The security_enabled of this GroupCreateParameters.
        """
        self.openapi_types = {
            'display_name': str,
            'mail_enabled': bool,
            'mail_nickname': str,
            'security_enabled': bool
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'mail_enabled': 'mailEnabled',
            'mail_nickname': 'mailNickname',
            'security_enabled': 'securityEnabled'
        }

        self._display_name = display_name
        self._mail_enabled = mail_enabled
        self._mail_nickname = mail_nickname
        self._security_enabled = security_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupCreateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupCreateParameters of this GroupCreateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this GroupCreateParameters.

        Group display name

        :return: The display_name of this GroupCreateParameters.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GroupCreateParameters.

        Group display name

        :param display_name: The display_name of this GroupCreateParameters.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def mail_enabled(self):
        """Gets the mail_enabled of this GroupCreateParameters.

        Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.

        :return: The mail_enabled of this GroupCreateParameters.
        :rtype: bool
        """
        return self._mail_enabled

    @mail_enabled.setter
    def mail_enabled(self, mail_enabled):
        """Sets the mail_enabled of this GroupCreateParameters.

        Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.

        :param mail_enabled: The mail_enabled of this GroupCreateParameters.
        :type mail_enabled: bool
        """
        allowed_values = [false]  # noqa: E501
        if mail_enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `mail_enabled` ({0}), must be one of {1}"
                .format(mail_enabled, allowed_values)
            )

        self._mail_enabled = mail_enabled

    @property
    def mail_nickname(self):
        """Gets the mail_nickname of this GroupCreateParameters.

        Mail nickname

        :return: The mail_nickname of this GroupCreateParameters.
        :rtype: str
        """
        return self._mail_nickname

    @mail_nickname.setter
    def mail_nickname(self, mail_nickname):
        """Sets the mail_nickname of this GroupCreateParameters.

        Mail nickname

        :param mail_nickname: The mail_nickname of this GroupCreateParameters.
        :type mail_nickname: str
        """
        if mail_nickname is None:
            raise ValueError("Invalid value for `mail_nickname`, must not be `None`")

        self._mail_nickname = mail_nickname

    @property
    def security_enabled(self):
        """Gets the security_enabled of this GroupCreateParameters.

        Whether the group is a security group. Must be true. This is because only pure security groups can be created using the Graph API.

        :return: The security_enabled of this GroupCreateParameters.
        :rtype: bool
        """
        return self._security_enabled

    @security_enabled.setter
    def security_enabled(self, security_enabled):
        """Sets the security_enabled of this GroupCreateParameters.

        Whether the group is a security group. Must be true. This is because only pure security groups can be created using the Graph API.

        :param security_enabled: The security_enabled of this GroupCreateParameters.
        :type security_enabled: bool
        """
        allowed_values = [true]  # noqa: E501
        if security_enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `security_enabled` ({0}), must be one of {1}"
                .format(security_enabled, allowed_values)
            )

        self._security_enabled = security_enabled
