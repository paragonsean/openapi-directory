# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InformationalUrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, marketing: str=None, privacy: str=None, support: str=None, terms_of_service: str=None):
        """InformationalUrl - a model defined in OpenAPI

        :param marketing: The marketing of this InformationalUrl.
        :param privacy: The privacy of this InformationalUrl.
        :param support: The support of this InformationalUrl.
        :param terms_of_service: The terms_of_service of this InformationalUrl.
        """
        self.openapi_types = {
            'marketing': str,
            'privacy': str,
            'support': str,
            'terms_of_service': str
        }

        self.attribute_map = {
            'marketing': 'marketing',
            'privacy': 'privacy',
            'support': 'support',
            'terms_of_service': 'termsOfService'
        }

        self._marketing = marketing
        self._privacy = privacy
        self._support = support
        self._terms_of_service = terms_of_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InformationalUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InformationalUrl of this InformationalUrl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def marketing(self):
        """Gets the marketing of this InformationalUrl.

        The marketing URI

        :return: The marketing of this InformationalUrl.
        :rtype: str
        """
        return self._marketing

    @marketing.setter
    def marketing(self, marketing):
        """Sets the marketing of this InformationalUrl.

        The marketing URI

        :param marketing: The marketing of this InformationalUrl.
        :type marketing: str
        """

        self._marketing = marketing

    @property
    def privacy(self):
        """Gets the privacy of this InformationalUrl.

        The privacy policy URI

        :return: The privacy of this InformationalUrl.
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this InformationalUrl.

        The privacy policy URI

        :param privacy: The privacy of this InformationalUrl.
        :type privacy: str
        """

        self._privacy = privacy

    @property
    def support(self):
        """Gets the support of this InformationalUrl.

        The support URI

        :return: The support of this InformationalUrl.
        :rtype: str
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this InformationalUrl.

        The support URI

        :param support: The support of this InformationalUrl.
        :type support: str
        """

        self._support = support

    @property
    def terms_of_service(self):
        """Gets the terms_of_service of this InformationalUrl.

        The terms of service URI

        :return: The terms_of_service of this InformationalUrl.
        :rtype: str
        """
        return self._terms_of_service

    @terms_of_service.setter
    def terms_of_service(self, terms_of_service):
        """Sets the terms_of_service of this InformationalUrl.

        The terms of service URI

        :param terms_of_service: The terms_of_service of this InformationalUrl.
        :type terms_of_service: str
        """

        self._terms_of_service = terms_of_service
