# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OAuth2PermissionGrant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, consent_type: str=None, expiry_time: str=None, object_id: str=None, odata_type: str=None, principal_id: str=None, resource_id: str=None, scope: str=None, start_time: str=None):
        """OAuth2PermissionGrant - a model defined in OpenAPI

        :param client_id: The client_id of this OAuth2PermissionGrant.
        :param consent_type: The consent_type of this OAuth2PermissionGrant.
        :param expiry_time: The expiry_time of this OAuth2PermissionGrant.
        :param object_id: The object_id of this OAuth2PermissionGrant.
        :param odata_type: The odata_type of this OAuth2PermissionGrant.
        :param principal_id: The principal_id of this OAuth2PermissionGrant.
        :param resource_id: The resource_id of this OAuth2PermissionGrant.
        :param scope: The scope of this OAuth2PermissionGrant.
        :param start_time: The start_time of this OAuth2PermissionGrant.
        """
        self.openapi_types = {
            'client_id': str,
            'consent_type': str,
            'expiry_time': str,
            'object_id': str,
            'odata_type': str,
            'principal_id': str,
            'resource_id': str,
            'scope': str,
            'start_time': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'consent_type': 'consentType',
            'expiry_time': 'expiryTime',
            'object_id': 'objectId',
            'odata_type': 'odata.type',
            'principal_id': 'principalId',
            'resource_id': 'resourceId',
            'scope': 'scope',
            'start_time': 'startTime'
        }

        self._client_id = client_id
        self._consent_type = consent_type
        self._expiry_time = expiry_time
        self._object_id = object_id
        self._odata_type = odata_type
        self._principal_id = principal_id
        self._resource_id = resource_id
        self._scope = scope
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuth2PermissionGrant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuth2PermissionGrant of this OAuth2PermissionGrant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this OAuth2PermissionGrant.

        The id of the resource's service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property).

        :return: The client_id of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuth2PermissionGrant.

        The id of the resource's service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property).

        :param client_id: The client_id of this OAuth2PermissionGrant.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def consent_type(self):
        """Gets the consent_type of this OAuth2PermissionGrant.

        Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.

        :return: The consent_type of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._consent_type

    @consent_type.setter
    def consent_type(self, consent_type):
        """Sets the consent_type of this OAuth2PermissionGrant.

        Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.

        :param consent_type: The consent_type of this OAuth2PermissionGrant.
        :type consent_type: str
        """
        allowed_values = ["AllPrincipals", "Principal"]  # noqa: E501
        if consent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `consent_type` ({0}), must be one of {1}"
                .format(consent_type, allowed_values)
            )

        self._consent_type = consent_type

    @property
    def expiry_time(self):
        """Gets the expiry_time of this OAuth2PermissionGrant.

        Expiry time for TTL

        :return: The expiry_time of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this OAuth2PermissionGrant.

        Expiry time for TTL

        :param expiry_time: The expiry_time of this OAuth2PermissionGrant.
        :type expiry_time: str
        """

        self._expiry_time = expiry_time

    @property
    def object_id(self):
        """Gets the object_id of this OAuth2PermissionGrant.

        The id of the permission grant

        :return: The object_id of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this OAuth2PermissionGrant.

        The id of the permission grant

        :param object_id: The object_id of this OAuth2PermissionGrant.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def odata_type(self):
        """Gets the odata_type of this OAuth2PermissionGrant.

        Microsoft.DirectoryServices.OAuth2PermissionGrant

        :return: The odata_type of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this OAuth2PermissionGrant.

        Microsoft.DirectoryServices.OAuth2PermissionGrant

        :param odata_type: The odata_type of this OAuth2PermissionGrant.
        :type odata_type: str
        """

        self._odata_type = odata_type

    @property
    def principal_id(self):
        """Gets the principal_id of this OAuth2PermissionGrant.

        When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user.

        :return: The principal_id of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this OAuth2PermissionGrant.

        When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user.

        :param principal_id: The principal_id of this OAuth2PermissionGrant.
        :type principal_id: str
        """

        self._principal_id = principal_id

    @property
    def resource_id(self):
        """Gets the resource_id of this OAuth2PermissionGrant.

        Object Id of the resource you want to grant

        :return: The resource_id of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this OAuth2PermissionGrant.

        Object Id of the resource you want to grant

        :param resource_id: The resource_id of this OAuth2PermissionGrant.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def scope(self):
        """Gets the scope of this OAuth2PermissionGrant.

        Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read

        :return: The scope of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OAuth2PermissionGrant.

        Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read

        :param scope: The scope of this OAuth2PermissionGrant.
        :type scope: str
        """

        self._scope = scope

    @property
    def start_time(self):
        """Gets the start_time of this OAuth2PermissionGrant.

        Start time for TTL

        :return: The start_time of this OAuth2PermissionGrant.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this OAuth2PermissionGrant.

        Start time for TTL

        :param start_time: The start_time of this OAuth2PermissionGrant.
        :type start_time: str
        """

        self._start_time = start_time
