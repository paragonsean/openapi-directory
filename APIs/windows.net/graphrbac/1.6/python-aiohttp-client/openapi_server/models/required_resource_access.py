# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_access import ResourceAccess
from openapi_server import util


class RequiredResourceAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_access: List[ResourceAccess]=None, resource_app_id: str=None):
        """RequiredResourceAccess - a model defined in OpenAPI

        :param resource_access: The resource_access of this RequiredResourceAccess.
        :param resource_app_id: The resource_app_id of this RequiredResourceAccess.
        """
        self.openapi_types = {
            'resource_access': List[ResourceAccess],
            'resource_app_id': str
        }

        self.attribute_map = {
            'resource_access': 'resourceAccess',
            'resource_app_id': 'resourceAppId'
        }

        self._resource_access = resource_access
        self._resource_app_id = resource_app_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequiredResourceAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequiredResourceAccess of this RequiredResourceAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_access(self):
        """Gets the resource_access of this RequiredResourceAccess.

        The list of OAuth2.0 permission scopes and app roles that the application requires from the specified resource.

        :return: The resource_access of this RequiredResourceAccess.
        :rtype: List[ResourceAccess]
        """
        return self._resource_access

    @resource_access.setter
    def resource_access(self, resource_access):
        """Sets the resource_access of this RequiredResourceAccess.

        The list of OAuth2.0 permission scopes and app roles that the application requires from the specified resource.

        :param resource_access: The resource_access of this RequiredResourceAccess.
        :type resource_access: List[ResourceAccess]
        """
        if resource_access is None:
            raise ValueError("Invalid value for `resource_access`, must not be `None`")

        self._resource_access = resource_access

    @property
    def resource_app_id(self):
        """Gets the resource_app_id of this RequiredResourceAccess.

        The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.

        :return: The resource_app_id of this RequiredResourceAccess.
        :rtype: str
        """
        return self._resource_app_id

    @resource_app_id.setter
    def resource_app_id(self, resource_app_id):
        """Sets the resource_app_id of this RequiredResourceAccess.

        The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.

        :param resource_app_id: The resource_app_id of this RequiredResourceAccess.
        :type resource_app_id: str
        """

        self._resource_app_id = resource_app_id
