# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.password_profile import PasswordProfile
from openapi_server import util


class UserUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_enabled: bool=None, display_name: str=None, mail: str=None, mail_nickname: str=None, password_profile: PasswordProfile=None, user_principal_name: str=None, given_name: str=None, immutable_id: str=None, surname: str=None, usage_location: str=None, user_type: str=None):
        """UserUpdateParameters - a model defined in OpenAPI

        :param account_enabled: The account_enabled of this UserUpdateParameters.
        :param display_name: The display_name of this UserUpdateParameters.
        :param mail: The mail of this UserUpdateParameters.
        :param mail_nickname: The mail_nickname of this UserUpdateParameters.
        :param password_profile: The password_profile of this UserUpdateParameters.
        :param user_principal_name: The user_principal_name of this UserUpdateParameters.
        :param given_name: The given_name of this UserUpdateParameters.
        :param immutable_id: The immutable_id of this UserUpdateParameters.
        :param surname: The surname of this UserUpdateParameters.
        :param usage_location: The usage_location of this UserUpdateParameters.
        :param user_type: The user_type of this UserUpdateParameters.
        """
        self.openapi_types = {
            'account_enabled': bool,
            'display_name': str,
            'mail': str,
            'mail_nickname': str,
            'password_profile': PasswordProfile,
            'user_principal_name': str,
            'given_name': str,
            'immutable_id': str,
            'surname': str,
            'usage_location': str,
            'user_type': str
        }

        self.attribute_map = {
            'account_enabled': 'accountEnabled',
            'display_name': 'displayName',
            'mail': 'mail',
            'mail_nickname': 'mailNickname',
            'password_profile': 'passwordProfile',
            'user_principal_name': 'userPrincipalName',
            'given_name': 'givenName',
            'immutable_id': 'immutableId',
            'surname': 'surname',
            'usage_location': 'usageLocation',
            'user_type': 'userType'
        }

        self._account_enabled = account_enabled
        self._display_name = display_name
        self._mail = mail
        self._mail_nickname = mail_nickname
        self._password_profile = password_profile
        self._user_principal_name = user_principal_name
        self._given_name = given_name
        self._immutable_id = immutable_id
        self._surname = surname
        self._usage_location = usage_location
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserUpdateParameters of this UserUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_enabled(self):
        """Gets the account_enabled of this UserUpdateParameters.

        Whether the account is enabled.

        :return: The account_enabled of this UserUpdateParameters.
        :rtype: bool
        """
        return self._account_enabled

    @account_enabled.setter
    def account_enabled(self, account_enabled):
        """Sets the account_enabled of this UserUpdateParameters.

        Whether the account is enabled.

        :param account_enabled: The account_enabled of this UserUpdateParameters.
        :type account_enabled: bool
        """

        self._account_enabled = account_enabled

    @property
    def display_name(self):
        """Gets the display_name of this UserUpdateParameters.

        The display name of the user.

        :return: The display_name of this UserUpdateParameters.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserUpdateParameters.

        The display name of the user.

        :param display_name: The display_name of this UserUpdateParameters.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def mail(self):
        """Gets the mail of this UserUpdateParameters.

        The primary email address of the user.

        :return: The mail of this UserUpdateParameters.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this UserUpdateParameters.

        The primary email address of the user.

        :param mail: The mail of this UserUpdateParameters.
        :type mail: str
        """

        self._mail = mail

    @property
    def mail_nickname(self):
        """Gets the mail_nickname of this UserUpdateParameters.

        The mail alias for the user.

        :return: The mail_nickname of this UserUpdateParameters.
        :rtype: str
        """
        return self._mail_nickname

    @mail_nickname.setter
    def mail_nickname(self, mail_nickname):
        """Sets the mail_nickname of this UserUpdateParameters.

        The mail alias for the user.

        :param mail_nickname: The mail_nickname of this UserUpdateParameters.
        :type mail_nickname: str
        """

        self._mail_nickname = mail_nickname

    @property
    def password_profile(self):
        """Gets the password_profile of this UserUpdateParameters.


        :return: The password_profile of this UserUpdateParameters.
        :rtype: PasswordProfile
        """
        return self._password_profile

    @password_profile.setter
    def password_profile(self, password_profile):
        """Sets the password_profile of this UserUpdateParameters.


        :param password_profile: The password_profile of this UserUpdateParameters.
        :type password_profile: PasswordProfile
        """

        self._password_profile = password_profile

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this UserUpdateParameters.

        The user principal name (someuser@contoso.com). It must contain one of the verified domains for the tenant.

        :return: The user_principal_name of this UserUpdateParameters.
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this UserUpdateParameters.

        The user principal name (someuser@contoso.com). It must contain one of the verified domains for the tenant.

        :param user_principal_name: The user_principal_name of this UserUpdateParameters.
        :type user_principal_name: str
        """

        self._user_principal_name = user_principal_name

    @property
    def given_name(self):
        """Gets the given_name of this UserUpdateParameters.

        The given name for the user.

        :return: The given_name of this UserUpdateParameters.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UserUpdateParameters.

        The given name for the user.

        :param given_name: The given_name of this UserUpdateParameters.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def immutable_id(self):
        """Gets the immutable_id of this UserUpdateParameters.

        This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.

        :return: The immutable_id of this UserUpdateParameters.
        :rtype: str
        """
        return self._immutable_id

    @immutable_id.setter
    def immutable_id(self, immutable_id):
        """Sets the immutable_id of this UserUpdateParameters.

        This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.

        :param immutable_id: The immutable_id of this UserUpdateParameters.
        :type immutable_id: str
        """

        self._immutable_id = immutable_id

    @property
    def surname(self):
        """Gets the surname of this UserUpdateParameters.

        The user's surname (family name or last name).

        :return: The surname of this UserUpdateParameters.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this UserUpdateParameters.

        The user's surname (family name or last name).

        :param surname: The surname of this UserUpdateParameters.
        :type surname: str
        """

        self._surname = surname

    @property
    def usage_location(self):
        """Gets the usage_location of this UserUpdateParameters.

        A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: \"US\", \"JP\", and \"GB\".

        :return: The usage_location of this UserUpdateParameters.
        :rtype: str
        """
        return self._usage_location

    @usage_location.setter
    def usage_location(self, usage_location):
        """Sets the usage_location of this UserUpdateParameters.

        A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: \"US\", \"JP\", and \"GB\".

        :param usage_location: The usage_location of this UserUpdateParameters.
        :type usage_location: str
        """

        self._usage_location = usage_location

    @property
    def user_type(self):
        """Gets the user_type of this UserUpdateParameters.

        A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'.

        :return: The user_type of this UserUpdateParameters.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserUpdateParameters.

        A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'.

        :param user_type: The user_type of this UserUpdateParameters.
        :type user_type: str
        """
        allowed_values = ["Member", "Guest"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"
                .format(user_type, allowed_values)
            )

        self._user_type = user_type
