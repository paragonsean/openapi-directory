# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directory_object import DirectoryObject
from openapi_server import util


class ADGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, mail: str=None, mail_enabled: bool=None, mail_nickname: str=None, security_enabled: bool=None, deletion_timestamp: datetime=None, object_id: str=None, object_type: str=None):
        """ADGroup - a model defined in OpenAPI

        :param display_name: The display_name of this ADGroup.
        :param mail: The mail of this ADGroup.
        :param mail_enabled: The mail_enabled of this ADGroup.
        :param mail_nickname: The mail_nickname of this ADGroup.
        :param security_enabled: The security_enabled of this ADGroup.
        :param deletion_timestamp: The deletion_timestamp of this ADGroup.
        :param object_id: The object_id of this ADGroup.
        :param object_type: The object_type of this ADGroup.
        """
        self.openapi_types = {
            'display_name': str,
            'mail': str,
            'mail_enabled': bool,
            'mail_nickname': str,
            'security_enabled': bool,
            'deletion_timestamp': datetime,
            'object_id': str,
            'object_type': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'mail': 'mail',
            'mail_enabled': 'mailEnabled',
            'mail_nickname': 'mailNickname',
            'security_enabled': 'securityEnabled',
            'deletion_timestamp': 'deletionTimestamp',
            'object_id': 'objectId',
            'object_type': 'objectType'
        }

        self._display_name = display_name
        self._mail = mail
        self._mail_enabled = mail_enabled
        self._mail_nickname = mail_nickname
        self._security_enabled = security_enabled
        self._deletion_timestamp = deletion_timestamp
        self._object_id = object_id
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ADGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ADGroup of this ADGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ADGroup.

        The display name of the group.

        :return: The display_name of this ADGroup.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ADGroup.

        The display name of the group.

        :param display_name: The display_name of this ADGroup.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def mail(self):
        """Gets the mail of this ADGroup.

        The primary email address of the group.

        :return: The mail of this ADGroup.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this ADGroup.

        The primary email address of the group.

        :param mail: The mail of this ADGroup.
        :type mail: str
        """

        self._mail = mail

    @property
    def mail_enabled(self):
        """Gets the mail_enabled of this ADGroup.

        Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.

        :return: The mail_enabled of this ADGroup.
        :rtype: bool
        """
        return self._mail_enabled

    @mail_enabled.setter
    def mail_enabled(self, mail_enabled):
        """Sets the mail_enabled of this ADGroup.

        Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.

        :param mail_enabled: The mail_enabled of this ADGroup.
        :type mail_enabled: bool
        """

        self._mail_enabled = mail_enabled

    @property
    def mail_nickname(self):
        """Gets the mail_nickname of this ADGroup.

        The mail alias for the group. 

        :return: The mail_nickname of this ADGroup.
        :rtype: str
        """
        return self._mail_nickname

    @mail_nickname.setter
    def mail_nickname(self, mail_nickname):
        """Sets the mail_nickname of this ADGroup.

        The mail alias for the group. 

        :param mail_nickname: The mail_nickname of this ADGroup.
        :type mail_nickname: str
        """

        self._mail_nickname = mail_nickname

    @property
    def security_enabled(self):
        """Gets the security_enabled of this ADGroup.

        Whether the group is security-enable.

        :return: The security_enabled of this ADGroup.
        :rtype: bool
        """
        return self._security_enabled

    @security_enabled.setter
    def security_enabled(self, security_enabled):
        """Sets the security_enabled of this ADGroup.

        Whether the group is security-enable.

        :param security_enabled: The security_enabled of this ADGroup.
        :type security_enabled: bool
        """

        self._security_enabled = security_enabled

    @property
    def deletion_timestamp(self):
        """Gets the deletion_timestamp of this ADGroup.

        The time at which the directory object was deleted.

        :return: The deletion_timestamp of this ADGroup.
        :rtype: datetime
        """
        return self._deletion_timestamp

    @deletion_timestamp.setter
    def deletion_timestamp(self, deletion_timestamp):
        """Sets the deletion_timestamp of this ADGroup.

        The time at which the directory object was deleted.

        :param deletion_timestamp: The deletion_timestamp of this ADGroup.
        :type deletion_timestamp: datetime
        """

        self._deletion_timestamp = deletion_timestamp

    @property
    def object_id(self):
        """Gets the object_id of this ADGroup.

        The object ID.

        :return: The object_id of this ADGroup.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ADGroup.

        The object ID.

        :param object_id: The object_id of this ADGroup.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this ADGroup.

        The object type.

        :return: The object_type of this ADGroup.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ADGroup.

        The object type.

        :param object_type: The object_type of this ADGroup.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type
