# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OAuth2Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_consent_description: str=None, admin_consent_display_name: str=None, id: str=None, is_enabled: bool=None, type: str=None, user_consent_description: str=None, user_consent_display_name: str=None, value: str=None):
        """OAuth2Permission - a model defined in OpenAPI

        :param admin_consent_description: The admin_consent_description of this OAuth2Permission.
        :param admin_consent_display_name: The admin_consent_display_name of this OAuth2Permission.
        :param id: The id of this OAuth2Permission.
        :param is_enabled: The is_enabled of this OAuth2Permission.
        :param type: The type of this OAuth2Permission.
        :param user_consent_description: The user_consent_description of this OAuth2Permission.
        :param user_consent_display_name: The user_consent_display_name of this OAuth2Permission.
        :param value: The value of this OAuth2Permission.
        """
        self.openapi_types = {
            'admin_consent_description': str,
            'admin_consent_display_name': str,
            'id': str,
            'is_enabled': bool,
            'type': str,
            'user_consent_description': str,
            'user_consent_display_name': str,
            'value': str
        }

        self.attribute_map = {
            'admin_consent_description': 'adminConsentDescription',
            'admin_consent_display_name': 'adminConsentDisplayName',
            'id': 'id',
            'is_enabled': 'isEnabled',
            'type': 'type',
            'user_consent_description': 'userConsentDescription',
            'user_consent_display_name': 'userConsentDisplayName',
            'value': 'value'
        }

        self._admin_consent_description = admin_consent_description
        self._admin_consent_display_name = admin_consent_display_name
        self._id = id
        self._is_enabled = is_enabled
        self._type = type
        self._user_consent_description = user_consent_description
        self._user_consent_display_name = user_consent_display_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuth2Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuth2Permission of this OAuth2Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_consent_description(self):
        """Gets the admin_consent_description of this OAuth2Permission.

        Permission help text that appears in the admin consent and app assignment experiences.

        :return: The admin_consent_description of this OAuth2Permission.
        :rtype: str
        """
        return self._admin_consent_description

    @admin_consent_description.setter
    def admin_consent_description(self, admin_consent_description):
        """Sets the admin_consent_description of this OAuth2Permission.

        Permission help text that appears in the admin consent and app assignment experiences.

        :param admin_consent_description: The admin_consent_description of this OAuth2Permission.
        :type admin_consent_description: str
        """

        self._admin_consent_description = admin_consent_description

    @property
    def admin_consent_display_name(self):
        """Gets the admin_consent_display_name of this OAuth2Permission.

        Display name for the permission that appears in the admin consent and app assignment experiences.

        :return: The admin_consent_display_name of this OAuth2Permission.
        :rtype: str
        """
        return self._admin_consent_display_name

    @admin_consent_display_name.setter
    def admin_consent_display_name(self, admin_consent_display_name):
        """Sets the admin_consent_display_name of this OAuth2Permission.

        Display name for the permission that appears in the admin consent and app assignment experiences.

        :param admin_consent_display_name: The admin_consent_display_name of this OAuth2Permission.
        :type admin_consent_display_name: str
        """

        self._admin_consent_display_name = admin_consent_display_name

    @property
    def id(self):
        """Gets the id of this OAuth2Permission.

        Unique scope permission identifier inside the oauth2Permissions collection.

        :return: The id of this OAuth2Permission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OAuth2Permission.

        Unique scope permission identifier inside the oauth2Permissions collection.

        :param id: The id of this OAuth2Permission.
        :type id: str
        """

        self._id = id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this OAuth2Permission.

        When creating or updating a permission, this property must be set to true (which is the default). To delete a permission, this property must first be set to false. At that point, in a subsequent call, the permission may be removed. 

        :return: The is_enabled of this OAuth2Permission.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this OAuth2Permission.

        When creating or updating a permission, this property must be set to true (which is the default). To delete a permission, this property must first be set to false. At that point, in a subsequent call, the permission may be removed. 

        :param is_enabled: The is_enabled of this OAuth2Permission.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def type(self):
        """Gets the type of this OAuth2Permission.

        Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by a Company Administrator. Possible values are \"User\" or \"Admin\".

        :return: The type of this OAuth2Permission.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OAuth2Permission.

        Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by a Company Administrator. Possible values are \"User\" or \"Admin\".

        :param type: The type of this OAuth2Permission.
        :type type: str
        """

        self._type = type

    @property
    def user_consent_description(self):
        """Gets the user_consent_description of this OAuth2Permission.

        Permission help text that appears in the end user consent experience.

        :return: The user_consent_description of this OAuth2Permission.
        :rtype: str
        """
        return self._user_consent_description

    @user_consent_description.setter
    def user_consent_description(self, user_consent_description):
        """Sets the user_consent_description of this OAuth2Permission.

        Permission help text that appears in the end user consent experience.

        :param user_consent_description: The user_consent_description of this OAuth2Permission.
        :type user_consent_description: str
        """

        self._user_consent_description = user_consent_description

    @property
    def user_consent_display_name(self):
        """Gets the user_consent_display_name of this OAuth2Permission.

        Display name for the permission that appears in the end user consent experience.

        :return: The user_consent_display_name of this OAuth2Permission.
        :rtype: str
        """
        return self._user_consent_display_name

    @user_consent_display_name.setter
    def user_consent_display_name(self, user_consent_display_name):
        """Sets the user_consent_display_name of this OAuth2Permission.

        Display name for the permission that appears in the end user consent experience.

        :param user_consent_display_name: The user_consent_display_name of this OAuth2Permission.
        :type user_consent_display_name: str
        """

        self._user_consent_display_name = user_consent_display_name

    @property
    def value(self):
        """Gets the value of this OAuth2Permission.

        The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.

        :return: The value of this OAuth2Permission.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OAuth2Permission.

        The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.

        :param value: The value of this OAuth2Permission.
        :type value: str
        """

        self._value = value
