# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.optional_claim import OptionalClaim
from openapi_server import util


class OptionalClaims(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: List[OptionalClaim]=None, id_token: List[OptionalClaim]=None, saml_token: List[OptionalClaim]=None):
        """OptionalClaims - a model defined in OpenAPI

        :param access_token: The access_token of this OptionalClaims.
        :param id_token: The id_token of this OptionalClaims.
        :param saml_token: The saml_token of this OptionalClaims.
        """
        self.openapi_types = {
            'access_token': List[OptionalClaim],
            'id_token': List[OptionalClaim],
            'saml_token': List[OptionalClaim]
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'id_token': 'idToken',
            'saml_token': 'samlToken'
        }

        self._access_token = access_token
        self._id_token = id_token
        self._saml_token = saml_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptionalClaims':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptionalClaims of this OptionalClaims.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this OptionalClaims.

        Optional claims requested to be included in the access token.

        :return: The access_token of this OptionalClaims.
        :rtype: List[OptionalClaim]
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this OptionalClaims.

        Optional claims requested to be included in the access token.

        :param access_token: The access_token of this OptionalClaims.
        :type access_token: List[OptionalClaim]
        """

        self._access_token = access_token

    @property
    def id_token(self):
        """Gets the id_token of this OptionalClaims.

        Optional claims requested to be included in the id token.

        :return: The id_token of this OptionalClaims.
        :rtype: List[OptionalClaim]
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this OptionalClaims.

        Optional claims requested to be included in the id token.

        :param id_token: The id_token of this OptionalClaims.
        :type id_token: List[OptionalClaim]
        """

        self._id_token = id_token

    @property
    def saml_token(self):
        """Gets the saml_token of this OptionalClaims.

        Optional claims requested to be included in the saml token.

        :return: The saml_token of this OptionalClaims.
        :rtype: List[OptionalClaim]
        """
        return self._saml_token

    @saml_token.setter
    def saml_token(self, saml_token):
        """Sets the saml_token of this OptionalClaims.

        Optional claims requested to be included in the saml token.

        :param saml_token: The saml_token of this OptionalClaims.
        :type saml_token: List[OptionalClaim]
        """

        self._saml_token = saml_token
