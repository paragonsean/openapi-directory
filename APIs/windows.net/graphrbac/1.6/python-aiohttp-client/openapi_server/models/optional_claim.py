# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OptionalClaim(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_properties: object=None, essential: bool=None, name: str=None, source: str=None):
        """OptionalClaim - a model defined in OpenAPI

        :param additional_properties: The additional_properties of this OptionalClaim.
        :param essential: The essential of this OptionalClaim.
        :param name: The name of this OptionalClaim.
        :param source: The source of this OptionalClaim.
        """
        self.openapi_types = {
            'additional_properties': object,
            'essential': bool,
            'name': str,
            'source': str
        }

        self.attribute_map = {
            'additional_properties': 'additionalProperties',
            'essential': 'essential',
            'name': 'name',
            'source': 'source'
        }

        self._additional_properties = additional_properties
        self._essential = essential
        self._name = name
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptionalClaim':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptionalClaim of this OptionalClaim.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_properties(self):
        """Gets the additional_properties of this OptionalClaim.


        :return: The additional_properties of this OptionalClaim.
        :rtype: object
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this OptionalClaim.


        :param additional_properties: The additional_properties of this OptionalClaim.
        :type additional_properties: object
        """

        self._additional_properties = additional_properties

    @property
    def essential(self):
        """Gets the essential of this OptionalClaim.

        Is this a required claim.

        :return: The essential of this OptionalClaim.
        :rtype: bool
        """
        return self._essential

    @essential.setter
    def essential(self, essential):
        """Sets the essential of this OptionalClaim.

        Is this a required claim.

        :param essential: The essential of this OptionalClaim.
        :type essential: bool
        """

        self._essential = essential

    @property
    def name(self):
        """Gets the name of this OptionalClaim.

        Claim name.

        :return: The name of this OptionalClaim.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OptionalClaim.

        Claim name.

        :param name: The name of this OptionalClaim.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this OptionalClaim.

        Claim source.

        :return: The source of this OptionalClaim.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this OptionalClaim.

        Claim source.

        :param source: The source of this OptionalClaim.
        :type source: str
        """

        self._source = source
