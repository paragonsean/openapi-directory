# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directory_object import DirectoryObject
from openapi_server import util


class AppRoleAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, principal_display_name: str=None, principal_id: str=None, principal_type: str=None, resource_display_name: str=None, resource_id: str=None, deletion_timestamp: datetime=None, object_id: str=None, object_type: str=None):
        """AppRoleAssignment - a model defined in OpenAPI

        :param id: The id of this AppRoleAssignment.
        :param principal_display_name: The principal_display_name of this AppRoleAssignment.
        :param principal_id: The principal_id of this AppRoleAssignment.
        :param principal_type: The principal_type of this AppRoleAssignment.
        :param resource_display_name: The resource_display_name of this AppRoleAssignment.
        :param resource_id: The resource_id of this AppRoleAssignment.
        :param deletion_timestamp: The deletion_timestamp of this AppRoleAssignment.
        :param object_id: The object_id of this AppRoleAssignment.
        :param object_type: The object_type of this AppRoleAssignment.
        """
        self.openapi_types = {
            'id': str,
            'principal_display_name': str,
            'principal_id': str,
            'principal_type': str,
            'resource_display_name': str,
            'resource_id': str,
            'deletion_timestamp': datetime,
            'object_id': str,
            'object_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'principal_display_name': 'principalDisplayName',
            'principal_id': 'principalId',
            'principal_type': 'principalType',
            'resource_display_name': 'resourceDisplayName',
            'resource_id': 'resourceId',
            'deletion_timestamp': 'deletionTimestamp',
            'object_id': 'objectId',
            'object_type': 'objectType'
        }

        self._id = id
        self._principal_display_name = principal_display_name
        self._principal_id = principal_id
        self._principal_type = principal_type
        self._resource_display_name = resource_display_name
        self._resource_id = resource_id
        self._deletion_timestamp = deletion_timestamp
        self._object_id = object_id
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppRoleAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppRoleAssignment of this AppRoleAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AppRoleAssignment.

        The role id that was assigned to the principal. This role must be declared by the target resource application resourceId in its appRoles property.

        :return: The id of this AppRoleAssignment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppRoleAssignment.

        The role id that was assigned to the principal. This role must be declared by the target resource application resourceId in its appRoles property.

        :param id: The id of this AppRoleAssignment.
        :type id: str
        """

        self._id = id

    @property
    def principal_display_name(self):
        """Gets the principal_display_name of this AppRoleAssignment.

        The display name of the principal that was granted the access.

        :return: The principal_display_name of this AppRoleAssignment.
        :rtype: str
        """
        return self._principal_display_name

    @principal_display_name.setter
    def principal_display_name(self, principal_display_name):
        """Sets the principal_display_name of this AppRoleAssignment.

        The display name of the principal that was granted the access.

        :param principal_display_name: The principal_display_name of this AppRoleAssignment.
        :type principal_display_name: str
        """

        self._principal_display_name = principal_display_name

    @property
    def principal_id(self):
        """Gets the principal_id of this AppRoleAssignment.

        The unique identifier (objectId) for the principal being granted the access.

        :return: The principal_id of this AppRoleAssignment.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this AppRoleAssignment.

        The unique identifier (objectId) for the principal being granted the access.

        :param principal_id: The principal_id of this AppRoleAssignment.
        :type principal_id: str
        """

        self._principal_id = principal_id

    @property
    def principal_type(self):
        """Gets the principal_type of this AppRoleAssignment.

        The type of principal. This can either be \"User\", \"Group\" or \"ServicePrincipal\".

        :return: The principal_type of this AppRoleAssignment.
        :rtype: str
        """
        return self._principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        """Sets the principal_type of this AppRoleAssignment.

        The type of principal. This can either be \"User\", \"Group\" or \"ServicePrincipal\".

        :param principal_type: The principal_type of this AppRoleAssignment.
        :type principal_type: str
        """

        self._principal_type = principal_type

    @property
    def resource_display_name(self):
        """Gets the resource_display_name of this AppRoleAssignment.

        The display name of the resource to which the assignment was made.

        :return: The resource_display_name of this AppRoleAssignment.
        :rtype: str
        """
        return self._resource_display_name

    @resource_display_name.setter
    def resource_display_name(self, resource_display_name):
        """Sets the resource_display_name of this AppRoleAssignment.

        The display name of the resource to which the assignment was made.

        :param resource_display_name: The resource_display_name of this AppRoleAssignment.
        :type resource_display_name: str
        """

        self._resource_display_name = resource_display_name

    @property
    def resource_id(self):
        """Gets the resource_id of this AppRoleAssignment.

        The unique identifier (objectId) for the target resource (service principal) for which the assignment was made.

        :return: The resource_id of this AppRoleAssignment.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AppRoleAssignment.

        The unique identifier (objectId) for the target resource (service principal) for which the assignment was made.

        :param resource_id: The resource_id of this AppRoleAssignment.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def deletion_timestamp(self):
        """Gets the deletion_timestamp of this AppRoleAssignment.

        The time at which the directory object was deleted.

        :return: The deletion_timestamp of this AppRoleAssignment.
        :rtype: datetime
        """
        return self._deletion_timestamp

    @deletion_timestamp.setter
    def deletion_timestamp(self, deletion_timestamp):
        """Sets the deletion_timestamp of this AppRoleAssignment.

        The time at which the directory object was deleted.

        :param deletion_timestamp: The deletion_timestamp of this AppRoleAssignment.
        :type deletion_timestamp: datetime
        """

        self._deletion_timestamp = deletion_timestamp

    @property
    def object_id(self):
        """Gets the object_id of this AppRoleAssignment.

        The object ID.

        :return: The object_id of this AppRoleAssignment.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this AppRoleAssignment.

        The object ID.

        :param object_id: The object_id of this AppRoleAssignment.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this AppRoleAssignment.

        The object type.

        :return: The object_type of this AppRoleAssignment.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this AppRoleAssignment.

        The object type.

        :param object_type: The object_type of this AppRoleAssignment.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type
