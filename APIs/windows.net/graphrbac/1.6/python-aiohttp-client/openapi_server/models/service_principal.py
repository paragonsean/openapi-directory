# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_role import AppRole
from openapi_server.models.directory_object import DirectoryObject
from openapi_server.models.key_credential import KeyCredential
from openapi_server.models.o_auth2_permission import OAuth2Permission
from openapi_server.models.password_credential import PasswordCredential
from openapi_server import util


class ServicePrincipal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_enabled: bool=None, alternative_names: List[str]=None, app_display_name: str=None, app_id: str=None, app_owner_tenant_id: str=None, app_role_assignment_required: bool=None, app_roles: List[AppRole]=None, display_name: str=None, error_url: str=None, homepage: str=None, key_credentials: List[KeyCredential]=None, logout_url: str=None, oauth2_permissions: List[OAuth2Permission]=None, password_credentials: List[PasswordCredential]=None, preferred_token_signing_key_thumbprint: str=None, publisher_name: str=None, reply_urls: List[str]=None, saml_metadata_url: str=None, service_principal_names: List[str]=None, service_principal_type: str=None, tags: List[str]=None, deletion_timestamp: datetime=None, object_id: str=None, object_type: str=None):
        """ServicePrincipal - a model defined in OpenAPI

        :param account_enabled: The account_enabled of this ServicePrincipal.
        :param alternative_names: The alternative_names of this ServicePrincipal.
        :param app_display_name: The app_display_name of this ServicePrincipal.
        :param app_id: The app_id of this ServicePrincipal.
        :param app_owner_tenant_id: The app_owner_tenant_id of this ServicePrincipal.
        :param app_role_assignment_required: The app_role_assignment_required of this ServicePrincipal.
        :param app_roles: The app_roles of this ServicePrincipal.
        :param display_name: The display_name of this ServicePrincipal.
        :param error_url: The error_url of this ServicePrincipal.
        :param homepage: The homepage of this ServicePrincipal.
        :param key_credentials: The key_credentials of this ServicePrincipal.
        :param logout_url: The logout_url of this ServicePrincipal.
        :param oauth2_permissions: The oauth2_permissions of this ServicePrincipal.
        :param password_credentials: The password_credentials of this ServicePrincipal.
        :param preferred_token_signing_key_thumbprint: The preferred_token_signing_key_thumbprint of this ServicePrincipal.
        :param publisher_name: The publisher_name of this ServicePrincipal.
        :param reply_urls: The reply_urls of this ServicePrincipal.
        :param saml_metadata_url: The saml_metadata_url of this ServicePrincipal.
        :param service_principal_names: The service_principal_names of this ServicePrincipal.
        :param service_principal_type: The service_principal_type of this ServicePrincipal.
        :param tags: The tags of this ServicePrincipal.
        :param deletion_timestamp: The deletion_timestamp of this ServicePrincipal.
        :param object_id: The object_id of this ServicePrincipal.
        :param object_type: The object_type of this ServicePrincipal.
        """
        self.openapi_types = {
            'account_enabled': bool,
            'alternative_names': List[str],
            'app_display_name': str,
            'app_id': str,
            'app_owner_tenant_id': str,
            'app_role_assignment_required': bool,
            'app_roles': List[AppRole],
            'display_name': str,
            'error_url': str,
            'homepage': str,
            'key_credentials': List[KeyCredential],
            'logout_url': str,
            'oauth2_permissions': List[OAuth2Permission],
            'password_credentials': List[PasswordCredential],
            'preferred_token_signing_key_thumbprint': str,
            'publisher_name': str,
            'reply_urls': List[str],
            'saml_metadata_url': str,
            'service_principal_names': List[str],
            'service_principal_type': str,
            'tags': List[str],
            'deletion_timestamp': datetime,
            'object_id': str,
            'object_type': str
        }

        self.attribute_map = {
            'account_enabled': 'accountEnabled',
            'alternative_names': 'alternativeNames',
            'app_display_name': 'appDisplayName',
            'app_id': 'appId',
            'app_owner_tenant_id': 'appOwnerTenantId',
            'app_role_assignment_required': 'appRoleAssignmentRequired',
            'app_roles': 'appRoles',
            'display_name': 'displayName',
            'error_url': 'errorUrl',
            'homepage': 'homepage',
            'key_credentials': 'keyCredentials',
            'logout_url': 'logoutUrl',
            'oauth2_permissions': 'oauth2Permissions',
            'password_credentials': 'passwordCredentials',
            'preferred_token_signing_key_thumbprint': 'preferredTokenSigningKeyThumbprint',
            'publisher_name': 'publisherName',
            'reply_urls': 'replyUrls',
            'saml_metadata_url': 'samlMetadataUrl',
            'service_principal_names': 'servicePrincipalNames',
            'service_principal_type': 'servicePrincipalType',
            'tags': 'tags',
            'deletion_timestamp': 'deletionTimestamp',
            'object_id': 'objectId',
            'object_type': 'objectType'
        }

        self._account_enabled = account_enabled
        self._alternative_names = alternative_names
        self._app_display_name = app_display_name
        self._app_id = app_id
        self._app_owner_tenant_id = app_owner_tenant_id
        self._app_role_assignment_required = app_role_assignment_required
        self._app_roles = app_roles
        self._display_name = display_name
        self._error_url = error_url
        self._homepage = homepage
        self._key_credentials = key_credentials
        self._logout_url = logout_url
        self._oauth2_permissions = oauth2_permissions
        self._password_credentials = password_credentials
        self._preferred_token_signing_key_thumbprint = preferred_token_signing_key_thumbprint
        self._publisher_name = publisher_name
        self._reply_urls = reply_urls
        self._saml_metadata_url = saml_metadata_url
        self._service_principal_names = service_principal_names
        self._service_principal_type = service_principal_type
        self._tags = tags
        self._deletion_timestamp = deletion_timestamp
        self._object_id = object_id
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicePrincipal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicePrincipal of this ServicePrincipal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_enabled(self):
        """Gets the account_enabled of this ServicePrincipal.

        whether or not the service principal account is enabled

        :return: The account_enabled of this ServicePrincipal.
        :rtype: bool
        """
        return self._account_enabled

    @account_enabled.setter
    def account_enabled(self, account_enabled):
        """Sets the account_enabled of this ServicePrincipal.

        whether or not the service principal account is enabled

        :param account_enabled: The account_enabled of this ServicePrincipal.
        :type account_enabled: bool
        """

        self._account_enabled = account_enabled

    @property
    def alternative_names(self):
        """Gets the alternative_names of this ServicePrincipal.

        alternative names

        :return: The alternative_names of this ServicePrincipal.
        :rtype: List[str]
        """
        return self._alternative_names

    @alternative_names.setter
    def alternative_names(self, alternative_names):
        """Sets the alternative_names of this ServicePrincipal.

        alternative names

        :param alternative_names: The alternative_names of this ServicePrincipal.
        :type alternative_names: List[str]
        """

        self._alternative_names = alternative_names

    @property
    def app_display_name(self):
        """Gets the app_display_name of this ServicePrincipal.

        The display name exposed by the associated application.

        :return: The app_display_name of this ServicePrincipal.
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this ServicePrincipal.

        The display name exposed by the associated application.

        :param app_display_name: The app_display_name of this ServicePrincipal.
        :type app_display_name: str
        """

        self._app_display_name = app_display_name

    @property
    def app_id(self):
        """Gets the app_id of this ServicePrincipal.

        The application ID.

        :return: The app_id of this ServicePrincipal.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ServicePrincipal.

        The application ID.

        :param app_id: The app_id of this ServicePrincipal.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def app_owner_tenant_id(self):
        """Gets the app_owner_tenant_id of this ServicePrincipal.


        :return: The app_owner_tenant_id of this ServicePrincipal.
        :rtype: str
        """
        return self._app_owner_tenant_id

    @app_owner_tenant_id.setter
    def app_owner_tenant_id(self, app_owner_tenant_id):
        """Sets the app_owner_tenant_id of this ServicePrincipal.


        :param app_owner_tenant_id: The app_owner_tenant_id of this ServicePrincipal.
        :type app_owner_tenant_id: str
        """

        self._app_owner_tenant_id = app_owner_tenant_id

    @property
    def app_role_assignment_required(self):
        """Gets the app_role_assignment_required of this ServicePrincipal.

        Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.

        :return: The app_role_assignment_required of this ServicePrincipal.
        :rtype: bool
        """
        return self._app_role_assignment_required

    @app_role_assignment_required.setter
    def app_role_assignment_required(self, app_role_assignment_required):
        """Sets the app_role_assignment_required of this ServicePrincipal.

        Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.

        :param app_role_assignment_required: The app_role_assignment_required of this ServicePrincipal.
        :type app_role_assignment_required: bool
        """

        self._app_role_assignment_required = app_role_assignment_required

    @property
    def app_roles(self):
        """Gets the app_roles of this ServicePrincipal.

        The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.

        :return: The app_roles of this ServicePrincipal.
        :rtype: List[AppRole]
        """
        return self._app_roles

    @app_roles.setter
    def app_roles(self, app_roles):
        """Sets the app_roles of this ServicePrincipal.

        The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.

        :param app_roles: The app_roles of this ServicePrincipal.
        :type app_roles: List[AppRole]
        """

        self._app_roles = app_roles

    @property
    def display_name(self):
        """Gets the display_name of this ServicePrincipal.

        The display name of the service principal.

        :return: The display_name of this ServicePrincipal.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ServicePrincipal.

        The display name of the service principal.

        :param display_name: The display_name of this ServicePrincipal.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def error_url(self):
        """Gets the error_url of this ServicePrincipal.

        A URL provided by the author of the associated application to report errors when using the application.

        :return: The error_url of this ServicePrincipal.
        :rtype: str
        """
        return self._error_url

    @error_url.setter
    def error_url(self, error_url):
        """Sets the error_url of this ServicePrincipal.

        A URL provided by the author of the associated application to report errors when using the application.

        :param error_url: The error_url of this ServicePrincipal.
        :type error_url: str
        """

        self._error_url = error_url

    @property
    def homepage(self):
        """Gets the homepage of this ServicePrincipal.

        The URL to the homepage of the associated application.

        :return: The homepage of this ServicePrincipal.
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this ServicePrincipal.

        The URL to the homepage of the associated application.

        :param homepage: The homepage of this ServicePrincipal.
        :type homepage: str
        """

        self._homepage = homepage

    @property
    def key_credentials(self):
        """Gets the key_credentials of this ServicePrincipal.

        The collection of key credentials associated with the service principal.

        :return: The key_credentials of this ServicePrincipal.
        :rtype: List[KeyCredential]
        """
        return self._key_credentials

    @key_credentials.setter
    def key_credentials(self, key_credentials):
        """Sets the key_credentials of this ServicePrincipal.

        The collection of key credentials associated with the service principal.

        :param key_credentials: The key_credentials of this ServicePrincipal.
        :type key_credentials: List[KeyCredential]
        """

        self._key_credentials = key_credentials

    @property
    def logout_url(self):
        """Gets the logout_url of this ServicePrincipal.

        A URL provided by the author of the associated application to logout

        :return: The logout_url of this ServicePrincipal.
        :rtype: str
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this ServicePrincipal.

        A URL provided by the author of the associated application to logout

        :param logout_url: The logout_url of this ServicePrincipal.
        :type logout_url: str
        """

        self._logout_url = logout_url

    @property
    def oauth2_permissions(self):
        """Gets the oauth2_permissions of this ServicePrincipal.

        The OAuth 2.0 permissions exposed by the associated application.

        :return: The oauth2_permissions of this ServicePrincipal.
        :rtype: List[OAuth2Permission]
        """
        return self._oauth2_permissions

    @oauth2_permissions.setter
    def oauth2_permissions(self, oauth2_permissions):
        """Sets the oauth2_permissions of this ServicePrincipal.

        The OAuth 2.0 permissions exposed by the associated application.

        :param oauth2_permissions: The oauth2_permissions of this ServicePrincipal.
        :type oauth2_permissions: List[OAuth2Permission]
        """

        self._oauth2_permissions = oauth2_permissions

    @property
    def password_credentials(self):
        """Gets the password_credentials of this ServicePrincipal.

        The collection of password credentials associated with the service principal.

        :return: The password_credentials of this ServicePrincipal.
        :rtype: List[PasswordCredential]
        """
        return self._password_credentials

    @password_credentials.setter
    def password_credentials(self, password_credentials):
        """Sets the password_credentials of this ServicePrincipal.

        The collection of password credentials associated with the service principal.

        :param password_credentials: The password_credentials of this ServicePrincipal.
        :type password_credentials: List[PasswordCredential]
        """

        self._password_credentials = password_credentials

    @property
    def preferred_token_signing_key_thumbprint(self):
        """Gets the preferred_token_signing_key_thumbprint of this ServicePrincipal.

        The thumbprint of preferred certificate to sign the token

        :return: The preferred_token_signing_key_thumbprint of this ServicePrincipal.
        :rtype: str
        """
        return self._preferred_token_signing_key_thumbprint

    @preferred_token_signing_key_thumbprint.setter
    def preferred_token_signing_key_thumbprint(self, preferred_token_signing_key_thumbprint):
        """Sets the preferred_token_signing_key_thumbprint of this ServicePrincipal.

        The thumbprint of preferred certificate to sign the token

        :param preferred_token_signing_key_thumbprint: The preferred_token_signing_key_thumbprint of this ServicePrincipal.
        :type preferred_token_signing_key_thumbprint: str
        """

        self._preferred_token_signing_key_thumbprint = preferred_token_signing_key_thumbprint

    @property
    def publisher_name(self):
        """Gets the publisher_name of this ServicePrincipal.

        The publisher's name of the associated application

        :return: The publisher_name of this ServicePrincipal.
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this ServicePrincipal.

        The publisher's name of the associated application

        :param publisher_name: The publisher_name of this ServicePrincipal.
        :type publisher_name: str
        """

        self._publisher_name = publisher_name

    @property
    def reply_urls(self):
        """Gets the reply_urls of this ServicePrincipal.

        The URLs that user tokens are sent to for sign in with the associated application.  The redirect URIs that the oAuth 2.0 authorization code and access tokens are sent to for the associated application.

        :return: The reply_urls of this ServicePrincipal.
        :rtype: List[str]
        """
        return self._reply_urls

    @reply_urls.setter
    def reply_urls(self, reply_urls):
        """Sets the reply_urls of this ServicePrincipal.

        The URLs that user tokens are sent to for sign in with the associated application.  The redirect URIs that the oAuth 2.0 authorization code and access tokens are sent to for the associated application.

        :param reply_urls: The reply_urls of this ServicePrincipal.
        :type reply_urls: List[str]
        """

        self._reply_urls = reply_urls

    @property
    def saml_metadata_url(self):
        """Gets the saml_metadata_url of this ServicePrincipal.

        The URL to the SAML metadata of the associated application

        :return: The saml_metadata_url of this ServicePrincipal.
        :rtype: str
        """
        return self._saml_metadata_url

    @saml_metadata_url.setter
    def saml_metadata_url(self, saml_metadata_url):
        """Sets the saml_metadata_url of this ServicePrincipal.

        The URL to the SAML metadata of the associated application

        :param saml_metadata_url: The saml_metadata_url of this ServicePrincipal.
        :type saml_metadata_url: str
        """

        self._saml_metadata_url = saml_metadata_url

    @property
    def service_principal_names(self):
        """Gets the service_principal_names of this ServicePrincipal.

        A collection of service principal names.

        :return: The service_principal_names of this ServicePrincipal.
        :rtype: List[str]
        """
        return self._service_principal_names

    @service_principal_names.setter
    def service_principal_names(self, service_principal_names):
        """Sets the service_principal_names of this ServicePrincipal.

        A collection of service principal names.

        :param service_principal_names: The service_principal_names of this ServicePrincipal.
        :type service_principal_names: List[str]
        """

        self._service_principal_names = service_principal_names

    @property
    def service_principal_type(self):
        """Gets the service_principal_type of this ServicePrincipal.

        the type of the service principal

        :return: The service_principal_type of this ServicePrincipal.
        :rtype: str
        """
        return self._service_principal_type

    @service_principal_type.setter
    def service_principal_type(self, service_principal_type):
        """Sets the service_principal_type of this ServicePrincipal.

        the type of the service principal

        :param service_principal_type: The service_principal_type of this ServicePrincipal.
        :type service_principal_type: str
        """

        self._service_principal_type = service_principal_type

    @property
    def tags(self):
        """Gets the tags of this ServicePrincipal.

        Optional list of tags that you can apply to your service principals. Not nullable.

        :return: The tags of this ServicePrincipal.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServicePrincipal.

        Optional list of tags that you can apply to your service principals. Not nullable.

        :param tags: The tags of this ServicePrincipal.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def deletion_timestamp(self):
        """Gets the deletion_timestamp of this ServicePrincipal.

        The time at which the directory object was deleted.

        :return: The deletion_timestamp of this ServicePrincipal.
        :rtype: datetime
        """
        return self._deletion_timestamp

    @deletion_timestamp.setter
    def deletion_timestamp(self, deletion_timestamp):
        """Sets the deletion_timestamp of this ServicePrincipal.

        The time at which the directory object was deleted.

        :param deletion_timestamp: The deletion_timestamp of this ServicePrincipal.
        :type deletion_timestamp: datetime
        """

        self._deletion_timestamp = deletion_timestamp

    @property
    def object_id(self):
        """Gets the object_id of this ServicePrincipal.

        The object ID.

        :return: The object_id of this ServicePrincipal.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ServicePrincipal.

        The object ID.

        :param object_id: The object_id of this ServicePrincipal.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this ServicePrincipal.

        The object type.

        :return: The object_type of this ServicePrincipal.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ServicePrincipal.

        The object type.

        :param object_type: The object_type of this ServicePrincipal.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type
