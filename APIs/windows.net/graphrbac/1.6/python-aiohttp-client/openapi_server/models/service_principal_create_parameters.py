# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_credential import KeyCredential
from openapi_server.models.password_credential import PasswordCredential
from openapi_server import util


class ServicePrincipalCreateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, account_enabled: bool=None, app_role_assignment_required: bool=None, key_credentials: List[KeyCredential]=None, password_credentials: List[PasswordCredential]=None, service_principal_type: str=None, tags: List[str]=None):
        """ServicePrincipalCreateParameters - a model defined in OpenAPI

        :param app_id: The app_id of this ServicePrincipalCreateParameters.
        :param account_enabled: The account_enabled of this ServicePrincipalCreateParameters.
        :param app_role_assignment_required: The app_role_assignment_required of this ServicePrincipalCreateParameters.
        :param key_credentials: The key_credentials of this ServicePrincipalCreateParameters.
        :param password_credentials: The password_credentials of this ServicePrincipalCreateParameters.
        :param service_principal_type: The service_principal_type of this ServicePrincipalCreateParameters.
        :param tags: The tags of this ServicePrincipalCreateParameters.
        """
        self.openapi_types = {
            'app_id': str,
            'account_enabled': bool,
            'app_role_assignment_required': bool,
            'key_credentials': List[KeyCredential],
            'password_credentials': List[PasswordCredential],
            'service_principal_type': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'app_id': 'appId',
            'account_enabled': 'accountEnabled',
            'app_role_assignment_required': 'appRoleAssignmentRequired',
            'key_credentials': 'keyCredentials',
            'password_credentials': 'passwordCredentials',
            'service_principal_type': 'servicePrincipalType',
            'tags': 'tags'
        }

        self._app_id = app_id
        self._account_enabled = account_enabled
        self._app_role_assignment_required = app_role_assignment_required
        self._key_credentials = key_credentials
        self._password_credentials = password_credentials
        self._service_principal_type = service_principal_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicePrincipalCreateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicePrincipalCreateParameters of this ServicePrincipalCreateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ServicePrincipalCreateParameters.

        The application ID.

        :return: The app_id of this ServicePrincipalCreateParameters.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ServicePrincipalCreateParameters.

        The application ID.

        :param app_id: The app_id of this ServicePrincipalCreateParameters.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def account_enabled(self):
        """Gets the account_enabled of this ServicePrincipalCreateParameters.

        whether or not the service principal account is enabled

        :return: The account_enabled of this ServicePrincipalCreateParameters.
        :rtype: bool
        """
        return self._account_enabled

    @account_enabled.setter
    def account_enabled(self, account_enabled):
        """Sets the account_enabled of this ServicePrincipalCreateParameters.

        whether or not the service principal account is enabled

        :param account_enabled: The account_enabled of this ServicePrincipalCreateParameters.
        :type account_enabled: bool
        """

        self._account_enabled = account_enabled

    @property
    def app_role_assignment_required(self):
        """Gets the app_role_assignment_required of this ServicePrincipalCreateParameters.

        Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.

        :return: The app_role_assignment_required of this ServicePrincipalCreateParameters.
        :rtype: bool
        """
        return self._app_role_assignment_required

    @app_role_assignment_required.setter
    def app_role_assignment_required(self, app_role_assignment_required):
        """Sets the app_role_assignment_required of this ServicePrincipalCreateParameters.

        Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application.

        :param app_role_assignment_required: The app_role_assignment_required of this ServicePrincipalCreateParameters.
        :type app_role_assignment_required: bool
        """

        self._app_role_assignment_required = app_role_assignment_required

    @property
    def key_credentials(self):
        """Gets the key_credentials of this ServicePrincipalCreateParameters.

        The collection of key credentials associated with the service principal.

        :return: The key_credentials of this ServicePrincipalCreateParameters.
        :rtype: List[KeyCredential]
        """
        return self._key_credentials

    @key_credentials.setter
    def key_credentials(self, key_credentials):
        """Sets the key_credentials of this ServicePrincipalCreateParameters.

        The collection of key credentials associated with the service principal.

        :param key_credentials: The key_credentials of this ServicePrincipalCreateParameters.
        :type key_credentials: List[KeyCredential]
        """

        self._key_credentials = key_credentials

    @property
    def password_credentials(self):
        """Gets the password_credentials of this ServicePrincipalCreateParameters.

        The collection of password credentials associated with the service principal.

        :return: The password_credentials of this ServicePrincipalCreateParameters.
        :rtype: List[PasswordCredential]
        """
        return self._password_credentials

    @password_credentials.setter
    def password_credentials(self, password_credentials):
        """Sets the password_credentials of this ServicePrincipalCreateParameters.

        The collection of password credentials associated with the service principal.

        :param password_credentials: The password_credentials of this ServicePrincipalCreateParameters.
        :type password_credentials: List[PasswordCredential]
        """

        self._password_credentials = password_credentials

    @property
    def service_principal_type(self):
        """Gets the service_principal_type of this ServicePrincipalCreateParameters.

        the type of the service principal

        :return: The service_principal_type of this ServicePrincipalCreateParameters.
        :rtype: str
        """
        return self._service_principal_type

    @service_principal_type.setter
    def service_principal_type(self, service_principal_type):
        """Sets the service_principal_type of this ServicePrincipalCreateParameters.

        the type of the service principal

        :param service_principal_type: The service_principal_type of this ServicePrincipalCreateParameters.
        :type service_principal_type: str
        """

        self._service_principal_type = service_principal_type

    @property
    def tags(self):
        """Gets the tags of this ServicePrincipalCreateParameters.

        Optional list of tags that you can apply to your service principals. Not nullable.

        :return: The tags of this ServicePrincipalCreateParameters.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServicePrincipalCreateParameters.

        Optional list of tags that you can apply to your service principals. Not nullable.

        :param tags: The tags of this ServicePrincipalCreateParameters.
        :type tags: List[str]
        """

        self._tags = tags
