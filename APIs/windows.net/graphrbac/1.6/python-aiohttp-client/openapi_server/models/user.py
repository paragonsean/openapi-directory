# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directory_object import DirectoryObject
from openapi_server.models.sign_in_name import SignInName
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_enabled: bool=None, display_name: str=None, given_name: str=None, immutable_id: str=None, mail: str=None, mail_nickname: str=None, sign_in_names: List[SignInName]=None, surname: str=None, usage_location: str=None, user_principal_name: str=None, user_type: str=None, deletion_timestamp: datetime=None, object_id: str=None, object_type: str=None):
        """User - a model defined in OpenAPI

        :param account_enabled: The account_enabled of this User.
        :param display_name: The display_name of this User.
        :param given_name: The given_name of this User.
        :param immutable_id: The immutable_id of this User.
        :param mail: The mail of this User.
        :param mail_nickname: The mail_nickname of this User.
        :param sign_in_names: The sign_in_names of this User.
        :param surname: The surname of this User.
        :param usage_location: The usage_location of this User.
        :param user_principal_name: The user_principal_name of this User.
        :param user_type: The user_type of this User.
        :param deletion_timestamp: The deletion_timestamp of this User.
        :param object_id: The object_id of this User.
        :param object_type: The object_type of this User.
        """
        self.openapi_types = {
            'account_enabled': bool,
            'display_name': str,
            'given_name': str,
            'immutable_id': str,
            'mail': str,
            'mail_nickname': str,
            'sign_in_names': List[SignInName],
            'surname': str,
            'usage_location': str,
            'user_principal_name': str,
            'user_type': str,
            'deletion_timestamp': datetime,
            'object_id': str,
            'object_type': str
        }

        self.attribute_map = {
            'account_enabled': 'accountEnabled',
            'display_name': 'displayName',
            'given_name': 'givenName',
            'immutable_id': 'immutableId',
            'mail': 'mail',
            'mail_nickname': 'mailNickname',
            'sign_in_names': 'signInNames',
            'surname': 'surname',
            'usage_location': 'usageLocation',
            'user_principal_name': 'userPrincipalName',
            'user_type': 'userType',
            'deletion_timestamp': 'deletionTimestamp',
            'object_id': 'objectId',
            'object_type': 'objectType'
        }

        self._account_enabled = account_enabled
        self._display_name = display_name
        self._given_name = given_name
        self._immutable_id = immutable_id
        self._mail = mail
        self._mail_nickname = mail_nickname
        self._sign_in_names = sign_in_names
        self._surname = surname
        self._usage_location = usage_location
        self._user_principal_name = user_principal_name
        self._user_type = user_type
        self._deletion_timestamp = deletion_timestamp
        self._object_id = object_id
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_enabled(self):
        """Gets the account_enabled of this User.

        Whether the account is enabled.

        :return: The account_enabled of this User.
        :rtype: bool
        """
        return self._account_enabled

    @account_enabled.setter
    def account_enabled(self, account_enabled):
        """Sets the account_enabled of this User.

        Whether the account is enabled.

        :param account_enabled: The account_enabled of this User.
        :type account_enabled: bool
        """

        self._account_enabled = account_enabled

    @property
    def display_name(self):
        """Gets the display_name of this User.

        The display name of the user.

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        The display name of the user.

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def given_name(self):
        """Gets the given_name of this User.

        The given name for the user.

        :return: The given_name of this User.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this User.

        The given name for the user.

        :param given_name: The given_name of this User.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def immutable_id(self):
        """Gets the immutable_id of this User.

        This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.

        :return: The immutable_id of this User.
        :rtype: str
        """
        return self._immutable_id

    @immutable_id.setter
    def immutable_id(self, immutable_id):
        """Sets the immutable_id of this User.

        This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.

        :param immutable_id: The immutable_id of this User.
        :type immutable_id: str
        """

        self._immutable_id = immutable_id

    @property
    def mail(self):
        """Gets the mail of this User.

        The primary email address of the user.

        :return: The mail of this User.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this User.

        The primary email address of the user.

        :param mail: The mail of this User.
        :type mail: str
        """

        self._mail = mail

    @property
    def mail_nickname(self):
        """Gets the mail_nickname of this User.

        The mail alias for the user.

        :return: The mail_nickname of this User.
        :rtype: str
        """
        return self._mail_nickname

    @mail_nickname.setter
    def mail_nickname(self, mail_nickname):
        """Sets the mail_nickname of this User.

        The mail alias for the user.

        :param mail_nickname: The mail_nickname of this User.
        :type mail_nickname: str
        """

        self._mail_nickname = mail_nickname

    @property
    def sign_in_names(self):
        """Gets the sign_in_names of this User.

        The sign-in names of the user.

        :return: The sign_in_names of this User.
        :rtype: List[SignInName]
        """
        return self._sign_in_names

    @sign_in_names.setter
    def sign_in_names(self, sign_in_names):
        """Sets the sign_in_names of this User.

        The sign-in names of the user.

        :param sign_in_names: The sign_in_names of this User.
        :type sign_in_names: List[SignInName]
        """

        self._sign_in_names = sign_in_names

    @property
    def surname(self):
        """Gets the surname of this User.

        The user's surname (family name or last name).

        :return: The surname of this User.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this User.

        The user's surname (family name or last name).

        :param surname: The surname of this User.
        :type surname: str
        """

        self._surname = surname

    @property
    def usage_location(self):
        """Gets the usage_location of this User.

        A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: \"US\", \"JP\", and \"GB\".

        :return: The usage_location of this User.
        :rtype: str
        """
        return self._usage_location

    @usage_location.setter
    def usage_location(self, usage_location):
        """Sets the usage_location of this User.

        A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: \"US\", \"JP\", and \"GB\".

        :param usage_location: The usage_location of this User.
        :type usage_location: str
        """

        self._usage_location = usage_location

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this User.

        The principal name of the user.

        :return: The user_principal_name of this User.
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this User.

        The principal name of the user.

        :param user_principal_name: The user_principal_name of this User.
        :type user_principal_name: str
        """

        self._user_principal_name = user_principal_name

    @property
    def user_type(self):
        """Gets the user_type of this User.

        A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'.

        :return: The user_type of this User.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this User.

        A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'.

        :param user_type: The user_type of this User.
        :type user_type: str
        """
        allowed_values = ["Member", "Guest"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"
                .format(user_type, allowed_values)
            )

        self._user_type = user_type

    @property
    def deletion_timestamp(self):
        """Gets the deletion_timestamp of this User.

        The time at which the directory object was deleted.

        :return: The deletion_timestamp of this User.
        :rtype: datetime
        """
        return self._deletion_timestamp

    @deletion_timestamp.setter
    def deletion_timestamp(self, deletion_timestamp):
        """Sets the deletion_timestamp of this User.

        The time at which the directory object was deleted.

        :param deletion_timestamp: The deletion_timestamp of this User.
        :type deletion_timestamp: datetime
        """

        self._deletion_timestamp = deletion_timestamp

    @property
    def object_id(self):
        """Gets the object_id of this User.

        The object ID.

        :return: The object_id of this User.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this User.

        The object ID.

        :param object_id: The object_id of this User.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this User.

        The object type.

        :return: The object_type of this User.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this User.

        The object type.

        :param object_type: The object_type of this User.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type
