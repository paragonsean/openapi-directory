/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationApi_H
#define OAI_OAIApplicationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication.h"
#include "OAIApplicationCreateParameters.h"
#include "OAIApplicationListResult.h"
#include "OAIApplicationUpdateParameters.h"
#include "OAIGraphError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationApi(const int timeOut = 0);
    ~OAIApplicationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_application_create_parameters OAIApplicationCreateParameters [required]
    */
    virtual void applicationsCreate(const QString &api_version, const QString &tenant_id, const OAIApplicationCreateParameters &oai_application_create_parameters);

    /**
    * @param[in]  application_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void applicationsDelete(const QString &application_object_id, const QString &api_version, const QString &tenant_id);

    /**
    * @param[in]  application_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void applicationsGet(const QString &application_object_id, const QString &api_version, const QString &tenant_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void applicationsList(const QString &api_version, const QString &tenant_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_application_update_parameters OAIApplicationUpdateParameters [required]
    */
    virtual void applicationsPatch(const QString &application_object_id, const QString &api_version, const QString &tenant_id, const OAIApplicationUpdateParameters &oai_application_update_parameters);

    /**
    * @param[in]  application_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void deletedApplicationsHardDelete(const QString &application_object_id, const QString &api_version, const QString &tenant_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicationsCreateCallback(OAIHttpRequestWorker *worker);
    void applicationsDeleteCallback(OAIHttpRequestWorker *worker);
    void applicationsGetCallback(OAIHttpRequestWorker *worker);
    void applicationsListCallback(OAIHttpRequestWorker *worker);
    void applicationsPatchCallback(OAIHttpRequestWorker *worker);
    void deletedApplicationsHardDeleteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicationsCreateSignal(OAIApplication summary);
    void applicationsDeleteSignal();
    void applicationsGetSignal(OAIApplication summary);
    void applicationsListSignal(OAIApplicationListResult summary);
    void applicationsPatchSignal();
    void deletedApplicationsHardDeleteSignal();


    void applicationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void applicationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void applicationsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void applicationsListSignalFull(OAIHttpRequestWorker *worker, OAIApplicationListResult summary);
    void applicationsPatchSignalFull(OAIHttpRequestWorker *worker);
    void deletedApplicationsHardDeleteSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use applicationsCreateSignalError() instead")
    void applicationsCreateSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsCreateSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsDeleteSignalError() instead")
    void applicationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsGetSignalError() instead")
    void applicationsGetSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsGetSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsListSignalError() instead")
    void applicationsListSignalE(OAIApplicationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsListSignalError(OAIApplicationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsPatchSignalError() instead")
    void applicationsPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletedApplicationsHardDeleteSignalError() instead")
    void deletedApplicationsHardDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletedApplicationsHardDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicationsCreateSignalErrorFull() instead")
    void applicationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsDeleteSignalErrorFull() instead")
    void applicationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsGetSignalErrorFull() instead")
    void applicationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsListSignalErrorFull() instead")
    void applicationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsPatchSignalErrorFull() instead")
    void applicationsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletedApplicationsHardDeleteSignalErrorFull() instead")
    void deletedApplicationsHardDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletedApplicationsHardDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
