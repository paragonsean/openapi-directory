/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServicePrincipalCreateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServicePrincipalCreateParameters::OAIServicePrincipalCreateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServicePrincipalCreateParameters::OAIServicePrincipalCreateParameters() {
    this->initializeModel();
}

OAIServicePrincipalCreateParameters::~OAIServicePrincipalCreateParameters() {}

void OAIServicePrincipalCreateParameters::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_account_enabled_isSet = false;
    m_account_enabled_isValid = false;

    m_app_role_assignment_required_isSet = false;
    m_app_role_assignment_required_isValid = false;

    m_key_credentials_isSet = false;
    m_key_credentials_isValid = false;

    m_password_credentials_isSet = false;
    m_password_credentials_isValid = false;

    m_service_principal_type_isSet = false;
    m_service_principal_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIServicePrincipalCreateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServicePrincipalCreateParameters::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_account_enabled_isValid = ::OpenAPI::fromJsonValue(m_account_enabled, json[QString("accountEnabled")]);
    m_account_enabled_isSet = !json[QString("accountEnabled")].isNull() && m_account_enabled_isValid;

    m_app_role_assignment_required_isValid = ::OpenAPI::fromJsonValue(m_app_role_assignment_required, json[QString("appRoleAssignmentRequired")]);
    m_app_role_assignment_required_isSet = !json[QString("appRoleAssignmentRequired")].isNull() && m_app_role_assignment_required_isValid;

    m_key_credentials_isValid = ::OpenAPI::fromJsonValue(m_key_credentials, json[QString("keyCredentials")]);
    m_key_credentials_isSet = !json[QString("keyCredentials")].isNull() && m_key_credentials_isValid;

    m_password_credentials_isValid = ::OpenAPI::fromJsonValue(m_password_credentials, json[QString("passwordCredentials")]);
    m_password_credentials_isSet = !json[QString("passwordCredentials")].isNull() && m_password_credentials_isValid;

    m_service_principal_type_isValid = ::OpenAPI::fromJsonValue(m_service_principal_type, json[QString("servicePrincipalType")]);
    m_service_principal_type_isSet = !json[QString("servicePrincipalType")].isNull() && m_service_principal_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIServicePrincipalCreateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServicePrincipalCreateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_account_enabled_isSet) {
        obj.insert(QString("accountEnabled"), ::OpenAPI::toJsonValue(m_account_enabled));
    }
    if (m_app_role_assignment_required_isSet) {
        obj.insert(QString("appRoleAssignmentRequired"), ::OpenAPI::toJsonValue(m_app_role_assignment_required));
    }
    if (m_key_credentials.size() > 0) {
        obj.insert(QString("keyCredentials"), ::OpenAPI::toJsonValue(m_key_credentials));
    }
    if (m_password_credentials.size() > 0) {
        obj.insert(QString("passwordCredentials"), ::OpenAPI::toJsonValue(m_password_credentials));
    }
    if (m_service_principal_type_isSet) {
        obj.insert(QString("servicePrincipalType"), ::OpenAPI::toJsonValue(m_service_principal_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIServicePrincipalCreateParameters::getAppId() const {
    return m_app_id;
}
void OAIServicePrincipalCreateParameters::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIServicePrincipalCreateParameters::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIServicePrincipalCreateParameters::is_app_id_Valid() const{
    return m_app_id_isValid;
}

bool OAIServicePrincipalCreateParameters::isAccountEnabled() const {
    return m_account_enabled;
}
void OAIServicePrincipalCreateParameters::setAccountEnabled(const bool &account_enabled) {
    m_account_enabled = account_enabled;
    m_account_enabled_isSet = true;
}

bool OAIServicePrincipalCreateParameters::is_account_enabled_Set() const{
    return m_account_enabled_isSet;
}

bool OAIServicePrincipalCreateParameters::is_account_enabled_Valid() const{
    return m_account_enabled_isValid;
}

bool OAIServicePrincipalCreateParameters::isAppRoleAssignmentRequired() const {
    return m_app_role_assignment_required;
}
void OAIServicePrincipalCreateParameters::setAppRoleAssignmentRequired(const bool &app_role_assignment_required) {
    m_app_role_assignment_required = app_role_assignment_required;
    m_app_role_assignment_required_isSet = true;
}

bool OAIServicePrincipalCreateParameters::is_app_role_assignment_required_Set() const{
    return m_app_role_assignment_required_isSet;
}

bool OAIServicePrincipalCreateParameters::is_app_role_assignment_required_Valid() const{
    return m_app_role_assignment_required_isValid;
}

QList<OAIKeyCredential> OAIServicePrincipalCreateParameters::getKeyCredentials() const {
    return m_key_credentials;
}
void OAIServicePrincipalCreateParameters::setKeyCredentials(const QList<OAIKeyCredential> &key_credentials) {
    m_key_credentials = key_credentials;
    m_key_credentials_isSet = true;
}

bool OAIServicePrincipalCreateParameters::is_key_credentials_Set() const{
    return m_key_credentials_isSet;
}

bool OAIServicePrincipalCreateParameters::is_key_credentials_Valid() const{
    return m_key_credentials_isValid;
}

QList<OAIPasswordCredential> OAIServicePrincipalCreateParameters::getPasswordCredentials() const {
    return m_password_credentials;
}
void OAIServicePrincipalCreateParameters::setPasswordCredentials(const QList<OAIPasswordCredential> &password_credentials) {
    m_password_credentials = password_credentials;
    m_password_credentials_isSet = true;
}

bool OAIServicePrincipalCreateParameters::is_password_credentials_Set() const{
    return m_password_credentials_isSet;
}

bool OAIServicePrincipalCreateParameters::is_password_credentials_Valid() const{
    return m_password_credentials_isValid;
}

QString OAIServicePrincipalCreateParameters::getServicePrincipalType() const {
    return m_service_principal_type;
}
void OAIServicePrincipalCreateParameters::setServicePrincipalType(const QString &service_principal_type) {
    m_service_principal_type = service_principal_type;
    m_service_principal_type_isSet = true;
}

bool OAIServicePrincipalCreateParameters::is_service_principal_type_Set() const{
    return m_service_principal_type_isSet;
}

bool OAIServicePrincipalCreateParameters::is_service_principal_type_Valid() const{
    return m_service_principal_type_isValid;
}

QList<QString> OAIServicePrincipalCreateParameters::getTags() const {
    return m_tags;
}
void OAIServicePrincipalCreateParameters::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIServicePrincipalCreateParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIServicePrincipalCreateParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIServicePrincipalCreateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_role_assignment_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServicePrincipalCreateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && true;
}

} // namespace OpenAPI
