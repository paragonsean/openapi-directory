/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupApi_H
#define OAI_OAIGroupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIADGroup.h"
#include "OAICheckGroupMembershipParameters.h"
#include "OAICheckGroupMembershipResult.h"
#include "OAIDirectoryObjectListResult.h"
#include "OAIGraphError.h"
#include "OAIGroupAddMemberParameters.h"
#include "OAIGroupCreateParameters.h"
#include "OAIGroupGetMemberGroupsParameters.h"
#include "OAIGroupGetMemberGroupsResult.h"
#include "OAIGroupListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupApi : public QObject {
    Q_OBJECT

public:
    OAIGroupApi(const int timeOut = 0);
    ~OAIGroupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_group_add_member_parameters OAIGroupAddMemberParameters [required]
    */
    virtual void groupsAddMember(const QString &group_object_id, const QString &api_version, const QString &tenant_id, const OAIGroupAddMemberParameters &oai_group_add_member_parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_group_create_parameters OAIGroupCreateParameters [required]
    */
    virtual void groupsCreate(const QString &api_version, const QString &tenant_id, const OAIGroupCreateParameters &oai_group_create_parameters);

    /**
    * @param[in]  object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void groupsDelete(const QString &object_id, const QString &api_version, const QString &tenant_id);

    /**
    * @param[in]  object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void groupsGet(const QString &object_id, const QString &api_version, const QString &tenant_id);

    /**
    * @param[in]  object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void groupsGetGroupMembers(const QString &object_id, const QString &api_version, const QString &tenant_id);

    /**
    * @param[in]  object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_group_get_member_groups_parameters OAIGroupGetMemberGroupsParameters [required]
    */
    virtual void groupsGetMemberGroups(const QString &object_id, const QString &api_version, const QString &tenant_id, const OAIGroupGetMemberGroupsParameters &oai_group_get_member_groups_parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_check_group_membership_parameters OAICheckGroupMembershipParameters [required]
    */
    virtual void groupsIsMemberOf(const QString &api_version, const QString &tenant_id, const OAICheckGroupMembershipParameters &oai_check_group_membership_parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void groupsList(const QString &api_version, const QString &tenant_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_object_id QString [required]
    * @param[in]  member_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void groupsRemoveMember(const QString &group_object_id, const QString &member_object_id, const QString &api_version, const QString &tenant_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void groupsAddMemberCallback(OAIHttpRequestWorker *worker);
    void groupsCreateCallback(OAIHttpRequestWorker *worker);
    void groupsDeleteCallback(OAIHttpRequestWorker *worker);
    void groupsGetCallback(OAIHttpRequestWorker *worker);
    void groupsGetGroupMembersCallback(OAIHttpRequestWorker *worker);
    void groupsGetMemberGroupsCallback(OAIHttpRequestWorker *worker);
    void groupsIsMemberOfCallback(OAIHttpRequestWorker *worker);
    void groupsListCallback(OAIHttpRequestWorker *worker);
    void groupsRemoveMemberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void groupsAddMemberSignal();
    void groupsCreateSignal(OAIADGroup summary);
    void groupsDeleteSignal();
    void groupsGetSignal(OAIADGroup summary);
    void groupsGetGroupMembersSignal(OAIDirectoryObjectListResult summary);
    void groupsGetMemberGroupsSignal(OAIGroupGetMemberGroupsResult summary);
    void groupsIsMemberOfSignal(OAICheckGroupMembershipResult summary);
    void groupsListSignal(OAIGroupListResult summary);
    void groupsRemoveMemberSignal();


    void groupsAddMemberSignalFull(OAIHttpRequestWorker *worker);
    void groupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIADGroup summary);
    void groupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void groupsGetSignalFull(OAIHttpRequestWorker *worker, OAIADGroup summary);
    void groupsGetGroupMembersSignalFull(OAIHttpRequestWorker *worker, OAIDirectoryObjectListResult summary);
    void groupsGetMemberGroupsSignalFull(OAIHttpRequestWorker *worker, OAIGroupGetMemberGroupsResult summary);
    void groupsIsMemberOfSignalFull(OAIHttpRequestWorker *worker, OAICheckGroupMembershipResult summary);
    void groupsListSignalFull(OAIHttpRequestWorker *worker, OAIGroupListResult summary);
    void groupsRemoveMemberSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use groupsAddMemberSignalError() instead")
    void groupsAddMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void groupsAddMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsCreateSignalError() instead")
    void groupsCreateSignalE(OAIADGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsCreateSignalError(OAIADGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsDeleteSignalError() instead")
    void groupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void groupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetSignalError() instead")
    void groupsGetSignalE(OAIADGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalError(OAIADGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetGroupMembersSignalError() instead")
    void groupsGetGroupMembersSignalE(OAIDirectoryObjectListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetGroupMembersSignalError(OAIDirectoryObjectListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetMemberGroupsSignalError() instead")
    void groupsGetMemberGroupsSignalE(OAIGroupGetMemberGroupsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetMemberGroupsSignalError(OAIGroupGetMemberGroupsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIsMemberOfSignalError() instead")
    void groupsIsMemberOfSignalE(OAICheckGroupMembershipResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIsMemberOfSignalError(OAICheckGroupMembershipResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsListSignalError() instead")
    void groupsListSignalE(OAIGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsListSignalError(OAIGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsRemoveMemberSignalError() instead")
    void groupsRemoveMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void groupsRemoveMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use groupsAddMemberSignalErrorFull() instead")
    void groupsAddMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsAddMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsCreateSignalErrorFull() instead")
    void groupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsDeleteSignalErrorFull() instead")
    void groupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetSignalErrorFull() instead")
    void groupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetGroupMembersSignalErrorFull() instead")
    void groupsGetGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetMemberGroupsSignalErrorFull() instead")
    void groupsGetMemberGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetMemberGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIsMemberOfSignalErrorFull() instead")
    void groupsIsMemberOfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIsMemberOfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsListSignalErrorFull() instead")
    void groupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsRemoveMemberSignalErrorFull() instead")
    void groupsRemoveMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsRemoveMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
