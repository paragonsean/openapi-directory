/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_account_enabled_isSet = false;
    m_account_enabled_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_immutable_id_isSet = false;
    m_immutable_id_isValid = false;

    m_mail_isSet = false;
    m_mail_isValid = false;

    m_mail_nickname_isSet = false;
    m_mail_nickname_isValid = false;

    m_sign_in_names_isSet = false;
    m_sign_in_names_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;

    m_usage_location_isSet = false;
    m_usage_location_isValid = false;

    m_user_principal_name_isSet = false;
    m_user_principal_name_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_deletion_timestamp_isSet = false;
    m_deletion_timestamp_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_account_enabled_isValid = ::OpenAPI::fromJsonValue(m_account_enabled, json[QString("accountEnabled")]);
    m_account_enabled_isSet = !json[QString("accountEnabled")].isNull() && m_account_enabled_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_immutable_id_isValid = ::OpenAPI::fromJsonValue(m_immutable_id, json[QString("immutableId")]);
    m_immutable_id_isSet = !json[QString("immutableId")].isNull() && m_immutable_id_isValid;

    m_mail_isValid = ::OpenAPI::fromJsonValue(m_mail, json[QString("mail")]);
    m_mail_isSet = !json[QString("mail")].isNull() && m_mail_isValid;

    m_mail_nickname_isValid = ::OpenAPI::fromJsonValue(m_mail_nickname, json[QString("mailNickname")]);
    m_mail_nickname_isSet = !json[QString("mailNickname")].isNull() && m_mail_nickname_isValid;

    m_sign_in_names_isValid = ::OpenAPI::fromJsonValue(m_sign_in_names, json[QString("signInNames")]);
    m_sign_in_names_isSet = !json[QString("signInNames")].isNull() && m_sign_in_names_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;

    m_usage_location_isValid = ::OpenAPI::fromJsonValue(m_usage_location, json[QString("usageLocation")]);
    m_usage_location_isSet = !json[QString("usageLocation")].isNull() && m_usage_location_isValid;

    m_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_user_principal_name, json[QString("userPrincipalName")]);
    m_user_principal_name_isSet = !json[QString("userPrincipalName")].isNull() && m_user_principal_name_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;

    m_deletion_timestamp_isValid = ::OpenAPI::fromJsonValue(m_deletion_timestamp, json[QString("deletionTimestamp")]);
    m_deletion_timestamp_isSet = !json[QString("deletionTimestamp")].isNull() && m_deletion_timestamp_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_account_enabled_isSet) {
        obj.insert(QString("accountEnabled"), ::OpenAPI::toJsonValue(m_account_enabled));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_immutable_id_isSet) {
        obj.insert(QString("immutableId"), ::OpenAPI::toJsonValue(m_immutable_id));
    }
    if (m_mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(m_mail));
    }
    if (m_mail_nickname_isSet) {
        obj.insert(QString("mailNickname"), ::OpenAPI::toJsonValue(m_mail_nickname));
    }
    if (m_sign_in_names.size() > 0) {
        obj.insert(QString("signInNames"), ::OpenAPI::toJsonValue(m_sign_in_names));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    if (m_usage_location_isSet) {
        obj.insert(QString("usageLocation"), ::OpenAPI::toJsonValue(m_usage_location));
    }
    if (m_user_principal_name_isSet) {
        obj.insert(QString("userPrincipalName"), ::OpenAPI::toJsonValue(m_user_principal_name));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::OpenAPI::toJsonValue(m_user_type));
    }
    if (m_deletion_timestamp_isSet) {
        obj.insert(QString("deletionTimestamp"), ::OpenAPI::toJsonValue(m_deletion_timestamp));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

bool OAIUser::isAccountEnabled() const {
    return m_account_enabled;
}
void OAIUser::setAccountEnabled(const bool &account_enabled) {
    m_account_enabled = account_enabled;
    m_account_enabled_isSet = true;
}

bool OAIUser::is_account_enabled_Set() const{
    return m_account_enabled_isSet;
}

bool OAIUser::is_account_enabled_Valid() const{
    return m_account_enabled_isValid;
}

QString OAIUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUser::getGivenName() const {
    return m_given_name;
}
void OAIUser::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIUser::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIUser::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAIUser::getImmutableId() const {
    return m_immutable_id;
}
void OAIUser::setImmutableId(const QString &immutable_id) {
    m_immutable_id = immutable_id;
    m_immutable_id_isSet = true;
}

bool OAIUser::is_immutable_id_Set() const{
    return m_immutable_id_isSet;
}

bool OAIUser::is_immutable_id_Valid() const{
    return m_immutable_id_isValid;
}

QString OAIUser::getMail() const {
    return m_mail;
}
void OAIUser::setMail(const QString &mail) {
    m_mail = mail;
    m_mail_isSet = true;
}

bool OAIUser::is_mail_Set() const{
    return m_mail_isSet;
}

bool OAIUser::is_mail_Valid() const{
    return m_mail_isValid;
}

QString OAIUser::getMailNickname() const {
    return m_mail_nickname;
}
void OAIUser::setMailNickname(const QString &mail_nickname) {
    m_mail_nickname = mail_nickname;
    m_mail_nickname_isSet = true;
}

bool OAIUser::is_mail_nickname_Set() const{
    return m_mail_nickname_isSet;
}

bool OAIUser::is_mail_nickname_Valid() const{
    return m_mail_nickname_isValid;
}

QList<OAISignInName> OAIUser::getSignInNames() const {
    return m_sign_in_names;
}
void OAIUser::setSignInNames(const QList<OAISignInName> &sign_in_names) {
    m_sign_in_names = sign_in_names;
    m_sign_in_names_isSet = true;
}

bool OAIUser::is_sign_in_names_Set() const{
    return m_sign_in_names_isSet;
}

bool OAIUser::is_sign_in_names_Valid() const{
    return m_sign_in_names_isValid;
}

QString OAIUser::getSurname() const {
    return m_surname;
}
void OAIUser::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAIUser::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIUser::is_surname_Valid() const{
    return m_surname_isValid;
}

QString OAIUser::getUsageLocation() const {
    return m_usage_location;
}
void OAIUser::setUsageLocation(const QString &usage_location) {
    m_usage_location = usage_location;
    m_usage_location_isSet = true;
}

bool OAIUser::is_usage_location_Set() const{
    return m_usage_location_isSet;
}

bool OAIUser::is_usage_location_Valid() const{
    return m_usage_location_isValid;
}

QString OAIUser::getUserPrincipalName() const {
    return m_user_principal_name;
}
void OAIUser::setUserPrincipalName(const QString &user_principal_name) {
    m_user_principal_name = user_principal_name;
    m_user_principal_name_isSet = true;
}

bool OAIUser::is_user_principal_name_Set() const{
    return m_user_principal_name_isSet;
}

bool OAIUser::is_user_principal_name_Valid() const{
    return m_user_principal_name_isValid;
}

QString OAIUser::getUserType() const {
    return m_user_type;
}
void OAIUser::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIUser::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIUser::is_user_type_Valid() const{
    return m_user_type_isValid;
}

QDateTime OAIUser::getDeletionTimestamp() const {
    return m_deletion_timestamp;
}
void OAIUser::setDeletionTimestamp(const QDateTime &deletion_timestamp) {
    m_deletion_timestamp = deletion_timestamp;
    m_deletion_timestamp_isSet = true;
}

bool OAIUser::is_deletion_timestamp_Set() const{
    return m_deletion_timestamp_isSet;
}

bool OAIUser::is_deletion_timestamp_Valid() const{
    return m_deletion_timestamp_isValid;
}

QString OAIUser::getObjectId() const {
    return m_object_id;
}
void OAIUser::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIUser::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIUser::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIUser::getObjectType() const {
    return m_object_type;
}
void OAIUser::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIUser::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIUser::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immutable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
