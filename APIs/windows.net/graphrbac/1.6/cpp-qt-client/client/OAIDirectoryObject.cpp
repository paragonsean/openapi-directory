/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectoryObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectoryObject::OAIDirectoryObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectoryObject::OAIDirectoryObject() {
    this->initializeModel();
}

OAIDirectoryObject::~OAIDirectoryObject() {}

void OAIDirectoryObject::initializeModel() {

    m_deletion_timestamp_isSet = false;
    m_deletion_timestamp_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIDirectoryObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectoryObject::fromJsonObject(QJsonObject json) {

    m_deletion_timestamp_isValid = ::OpenAPI::fromJsonValue(m_deletion_timestamp, json[QString("deletionTimestamp")]);
    m_deletion_timestamp_isSet = !json[QString("deletionTimestamp")].isNull() && m_deletion_timestamp_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIDirectoryObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectoryObject::asJsonObject() const {
    QJsonObject obj;
    if (m_deletion_timestamp_isSet) {
        obj.insert(QString("deletionTimestamp"), ::OpenAPI::toJsonValue(m_deletion_timestamp));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QDateTime OAIDirectoryObject::getDeletionTimestamp() const {
    return m_deletion_timestamp;
}
void OAIDirectoryObject::setDeletionTimestamp(const QDateTime &deletion_timestamp) {
    m_deletion_timestamp = deletion_timestamp;
    m_deletion_timestamp_isSet = true;
}

bool OAIDirectoryObject::is_deletion_timestamp_Set() const{
    return m_deletion_timestamp_isSet;
}

bool OAIDirectoryObject::is_deletion_timestamp_Valid() const{
    return m_deletion_timestamp_isValid;
}

QString OAIDirectoryObject::getObjectId() const {
    return m_object_id;
}
void OAIDirectoryObject::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIDirectoryObject::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIDirectoryObject::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIDirectoryObject::getObjectType() const {
    return m_object_type;
}
void OAIDirectoryObject::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIDirectoryObject::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIDirectoryObject::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIDirectoryObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deletion_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectoryObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
