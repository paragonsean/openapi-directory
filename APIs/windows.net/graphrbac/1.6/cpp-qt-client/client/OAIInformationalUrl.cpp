/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInformationalUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInformationalUrl::OAIInformationalUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInformationalUrl::OAIInformationalUrl() {
    this->initializeModel();
}

OAIInformationalUrl::~OAIInformationalUrl() {}

void OAIInformationalUrl::initializeModel() {

    m_marketing_isSet = false;
    m_marketing_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_support_isSet = false;
    m_support_isValid = false;

    m_terms_of_service_isSet = false;
    m_terms_of_service_isValid = false;
}

void OAIInformationalUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInformationalUrl::fromJsonObject(QJsonObject json) {

    m_marketing_isValid = ::OpenAPI::fromJsonValue(m_marketing, json[QString("marketing")]);
    m_marketing_isSet = !json[QString("marketing")].isNull() && m_marketing_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_support_isValid = ::OpenAPI::fromJsonValue(m_support, json[QString("support")]);
    m_support_isSet = !json[QString("support")].isNull() && m_support_isValid;

    m_terms_of_service_isValid = ::OpenAPI::fromJsonValue(m_terms_of_service, json[QString("termsOfService")]);
    m_terms_of_service_isSet = !json[QString("termsOfService")].isNull() && m_terms_of_service_isValid;
}

QString OAIInformationalUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInformationalUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_marketing_isSet) {
        obj.insert(QString("marketing"), ::OpenAPI::toJsonValue(m_marketing));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_support_isSet) {
        obj.insert(QString("support"), ::OpenAPI::toJsonValue(m_support));
    }
    if (m_terms_of_service_isSet) {
        obj.insert(QString("termsOfService"), ::OpenAPI::toJsonValue(m_terms_of_service));
    }
    return obj;
}

QString OAIInformationalUrl::getMarketing() const {
    return m_marketing;
}
void OAIInformationalUrl::setMarketing(const QString &marketing) {
    m_marketing = marketing;
    m_marketing_isSet = true;
}

bool OAIInformationalUrl::is_marketing_Set() const{
    return m_marketing_isSet;
}

bool OAIInformationalUrl::is_marketing_Valid() const{
    return m_marketing_isValid;
}

QString OAIInformationalUrl::getPrivacy() const {
    return m_privacy;
}
void OAIInformationalUrl::setPrivacy(const QString &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIInformationalUrl::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIInformationalUrl::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIInformationalUrl::getSupport() const {
    return m_support;
}
void OAIInformationalUrl::setSupport(const QString &support) {
    m_support = support;
    m_support_isSet = true;
}

bool OAIInformationalUrl::is_support_Set() const{
    return m_support_isSet;
}

bool OAIInformationalUrl::is_support_Valid() const{
    return m_support_isValid;
}

QString OAIInformationalUrl::getTermsOfService() const {
    return m_terms_of_service;
}
void OAIInformationalUrl::setTermsOfService(const QString &terms_of_service) {
    m_terms_of_service = terms_of_service;
    m_terms_of_service_isSet = true;
}

bool OAIInformationalUrl::is_terms_of_service_Set() const{
    return m_terms_of_service_isSet;
}

bool OAIInformationalUrl::is_terms_of_service_Valid() const{
    return m_terms_of_service_isValid;
}

bool OAIInformationalUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marketing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_of_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInformationalUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
