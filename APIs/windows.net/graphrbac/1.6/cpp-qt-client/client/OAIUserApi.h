/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGraphError.h"
#include "OAIUser.h"
#include "OAIUserCreateParameters.h"
#include "OAIUserGetMemberGroupsParameters.h"
#include "OAIUserGetMemberGroupsResult.h"
#include "OAIUserListResult.h"
#include "OAIUserUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_user_create_parameters OAIUserCreateParameters [required]
    */
    virtual void usersCreate(const QString &api_version, const QString &tenant_id, const OAIUserCreateParameters &oai_user_create_parameters);

    /**
    * @param[in]  upn_or_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void usersDelete(const QString &upn_or_object_id, const QString &api_version, const QString &tenant_id);

    /**
    * @param[in]  upn_or_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    */
    virtual void usersGet(const QString &upn_or_object_id, const QString &api_version, const QString &tenant_id);

    /**
    * @param[in]  object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_user_get_member_groups_parameters OAIUserGetMemberGroupsParameters [required]
    */
    virtual void usersGetMemberGroups(const QString &object_id, const QString &api_version, const QString &tenant_id, const OAIUserGetMemberGroupsParameters &oai_user_get_member_groups_parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usersList(const QString &api_version, const QString &tenant_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  upn_or_object_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tenant_id QString [required]
    * @param[in]  oai_user_update_parameters OAIUserUpdateParameters [required]
    */
    virtual void usersUpdate(const QString &upn_or_object_id, const QString &api_version, const QString &tenant_id, const OAIUserUpdateParameters &oai_user_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersCreateCallback(OAIHttpRequestWorker *worker);
    void usersDeleteCallback(OAIHttpRequestWorker *worker);
    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersGetMemberGroupsCallback(OAIHttpRequestWorker *worker);
    void usersListCallback(OAIHttpRequestWorker *worker);
    void usersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersCreateSignal(OAIUser summary);
    void usersDeleteSignal();
    void usersGetSignal(OAIUser summary);
    void usersGetMemberGroupsSignal(OAIUserGetMemberGroupsResult summary);
    void usersListSignal(OAIUserListResult summary);
    void usersUpdateSignal();


    void usersCreateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersGetMemberGroupsSignalFull(OAIHttpRequestWorker *worker, OAIUserGetMemberGroupsResult summary);
    void usersListSignalFull(OAIHttpRequestWorker *worker, OAIUserListResult summary);
    void usersUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use usersCreateSignalError() instead")
    void usersCreateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersCreateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalError() instead")
    void usersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetMemberGroupsSignalError() instead")
    void usersGetMemberGroupsSignalE(OAIUserGetMemberGroupsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetMemberGroupsSignalError(OAIUserGetMemberGroupsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalError() instead")
    void usersListSignalE(OAIUserListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalError(OAIUserListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateSignalError() instead")
    void usersUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersCreateSignalErrorFull() instead")
    void usersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalErrorFull() instead")
    void usersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetMemberGroupsSignalErrorFull() instead")
    void usersGetMemberGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetMemberGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalErrorFull() instead")
    void usersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateSignalErrorFull() instead")
    void usersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
