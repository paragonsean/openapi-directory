/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserBase::OAIUserBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserBase::OAIUserBase() {
    this->initializeModel();
}

OAIUserBase::~OAIUserBase() {}

void OAIUserBase::initializeModel() {

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_immutable_id_isSet = false;
    m_immutable_id_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;

    m_usage_location_isSet = false;
    m_usage_location_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;
}

void OAIUserBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserBase::fromJsonObject(QJsonObject json) {

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_immutable_id_isValid = ::OpenAPI::fromJsonValue(m_immutable_id, json[QString("immutableId")]);
    m_immutable_id_isSet = !json[QString("immutableId")].isNull() && m_immutable_id_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;

    m_usage_location_isValid = ::OpenAPI::fromJsonValue(m_usage_location, json[QString("usageLocation")]);
    m_usage_location_isSet = !json[QString("usageLocation")].isNull() && m_usage_location_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;
}

QString OAIUserBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserBase::asJsonObject() const {
    QJsonObject obj;
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_immutable_id_isSet) {
        obj.insert(QString("immutableId"), ::OpenAPI::toJsonValue(m_immutable_id));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    if (m_usage_location_isSet) {
        obj.insert(QString("usageLocation"), ::OpenAPI::toJsonValue(m_usage_location));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::OpenAPI::toJsonValue(m_user_type));
    }
    return obj;
}

QString OAIUserBase::getGivenName() const {
    return m_given_name;
}
void OAIUserBase::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIUserBase::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIUserBase::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAIUserBase::getImmutableId() const {
    return m_immutable_id;
}
void OAIUserBase::setImmutableId(const QString &immutable_id) {
    m_immutable_id = immutable_id;
    m_immutable_id_isSet = true;
}

bool OAIUserBase::is_immutable_id_Set() const{
    return m_immutable_id_isSet;
}

bool OAIUserBase::is_immutable_id_Valid() const{
    return m_immutable_id_isValid;
}

QString OAIUserBase::getSurname() const {
    return m_surname;
}
void OAIUserBase::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAIUserBase::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIUserBase::is_surname_Valid() const{
    return m_surname_isValid;
}

QString OAIUserBase::getUsageLocation() const {
    return m_usage_location;
}
void OAIUserBase::setUsageLocation(const QString &usage_location) {
    m_usage_location = usage_location;
    m_usage_location_isSet = true;
}

bool OAIUserBase::is_usage_location_Set() const{
    return m_usage_location_isSet;
}

bool OAIUserBase::is_usage_location_Valid() const{
    return m_usage_location_isValid;
}

QString OAIUserBase::getUserType() const {
    return m_user_type;
}
void OAIUserBase::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIUserBase::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIUserBase::is_user_type_Valid() const{
    return m_user_type_isValid;
}

bool OAIUserBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immutable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
