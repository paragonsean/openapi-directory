/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyCredential.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyCredential::OAIKeyCredential(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyCredential::OAIKeyCredential() {
    this->initializeModel();
}

OAIKeyCredential::~OAIKeyCredential() {}

void OAIKeyCredential::initializeModel() {

    m_custom_key_identifier_isSet = false;
    m_custom_key_identifier_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIKeyCredential::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyCredential::fromJsonObject(QJsonObject json) {

    m_custom_key_identifier_isValid = ::OpenAPI::fromJsonValue(m_custom_key_identifier, json[QString("customKeyIdentifier")]);
    m_custom_key_identifier_isSet = !json[QString("customKeyIdentifier")].isNull() && m_custom_key_identifier_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("keyId")]);
    m_key_id_isSet = !json[QString("keyId")].isNull() && m_key_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIKeyCredential::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyCredential::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_key_identifier_isSet) {
        obj.insert(QString("customKeyIdentifier"), ::OpenAPI::toJsonValue(m_custom_key_identifier));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_key_id_isSet) {
        obj.insert(QString("keyId"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIKeyCredential::getCustomKeyIdentifier() const {
    return m_custom_key_identifier;
}
void OAIKeyCredential::setCustomKeyIdentifier(const QString &custom_key_identifier) {
    m_custom_key_identifier = custom_key_identifier;
    m_custom_key_identifier_isSet = true;
}

bool OAIKeyCredential::is_custom_key_identifier_Set() const{
    return m_custom_key_identifier_isSet;
}

bool OAIKeyCredential::is_custom_key_identifier_Valid() const{
    return m_custom_key_identifier_isValid;
}

QDateTime OAIKeyCredential::getEndDate() const {
    return m_end_date;
}
void OAIKeyCredential::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIKeyCredential::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIKeyCredential::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIKeyCredential::getKeyId() const {
    return m_key_id;
}
void OAIKeyCredential::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAIKeyCredential::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAIKeyCredential::is_key_id_Valid() const{
    return m_key_id_isValid;
}

QDateTime OAIKeyCredential::getStartDate() const {
    return m_start_date;
}
void OAIKeyCredential::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIKeyCredential::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIKeyCredential::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIKeyCredential::getType() const {
    return m_type;
}
void OAIKeyCredential::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIKeyCredential::is_type_Set() const{
    return m_type_isSet;
}

bool OAIKeyCredential::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIKeyCredential::getUsage() const {
    return m_usage;
}
void OAIKeyCredential::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIKeyCredential::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIKeyCredential::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIKeyCredential::getValue() const {
    return m_value;
}
void OAIKeyCredential::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIKeyCredential::is_value_Set() const{
    return m_value_isSet;
}

bool OAIKeyCredential::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIKeyCredential::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_key_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyCredential::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
