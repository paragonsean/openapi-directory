/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuth2Permission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuth2Permission::OAIOAuth2Permission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuth2Permission::OAIOAuth2Permission() {
    this->initializeModel();
}

OAIOAuth2Permission::~OAIOAuth2Permission() {}

void OAIOAuth2Permission::initializeModel() {

    m_admin_consent_description_isSet = false;
    m_admin_consent_description_isValid = false;

    m_admin_consent_display_name_isSet = false;
    m_admin_consent_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_consent_description_isSet = false;
    m_user_consent_description_isValid = false;

    m_user_consent_display_name_isSet = false;
    m_user_consent_display_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOAuth2Permission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuth2Permission::fromJsonObject(QJsonObject json) {

    m_admin_consent_description_isValid = ::OpenAPI::fromJsonValue(m_admin_consent_description, json[QString("adminConsentDescription")]);
    m_admin_consent_description_isSet = !json[QString("adminConsentDescription")].isNull() && m_admin_consent_description_isValid;

    m_admin_consent_display_name_isValid = ::OpenAPI::fromJsonValue(m_admin_consent_display_name, json[QString("adminConsentDisplayName")]);
    m_admin_consent_display_name_isSet = !json[QString("adminConsentDisplayName")].isNull() && m_admin_consent_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_consent_description_isValid = ::OpenAPI::fromJsonValue(m_user_consent_description, json[QString("userConsentDescription")]);
    m_user_consent_description_isSet = !json[QString("userConsentDescription")].isNull() && m_user_consent_description_isValid;

    m_user_consent_display_name_isValid = ::OpenAPI::fromJsonValue(m_user_consent_display_name, json[QString("userConsentDisplayName")]);
    m_user_consent_display_name_isSet = !json[QString("userConsentDisplayName")].isNull() && m_user_consent_display_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOAuth2Permission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuth2Permission::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_consent_description_isSet) {
        obj.insert(QString("adminConsentDescription"), ::OpenAPI::toJsonValue(m_admin_consent_description));
    }
    if (m_admin_consent_display_name_isSet) {
        obj.insert(QString("adminConsentDisplayName"), ::OpenAPI::toJsonValue(m_admin_consent_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_consent_description_isSet) {
        obj.insert(QString("userConsentDescription"), ::OpenAPI::toJsonValue(m_user_consent_description));
    }
    if (m_user_consent_display_name_isSet) {
        obj.insert(QString("userConsentDisplayName"), ::OpenAPI::toJsonValue(m_user_consent_display_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIOAuth2Permission::getAdminConsentDescription() const {
    return m_admin_consent_description;
}
void OAIOAuth2Permission::setAdminConsentDescription(const QString &admin_consent_description) {
    m_admin_consent_description = admin_consent_description;
    m_admin_consent_description_isSet = true;
}

bool OAIOAuth2Permission::is_admin_consent_description_Set() const{
    return m_admin_consent_description_isSet;
}

bool OAIOAuth2Permission::is_admin_consent_description_Valid() const{
    return m_admin_consent_description_isValid;
}

QString OAIOAuth2Permission::getAdminConsentDisplayName() const {
    return m_admin_consent_display_name;
}
void OAIOAuth2Permission::setAdminConsentDisplayName(const QString &admin_consent_display_name) {
    m_admin_consent_display_name = admin_consent_display_name;
    m_admin_consent_display_name_isSet = true;
}

bool OAIOAuth2Permission::is_admin_consent_display_name_Set() const{
    return m_admin_consent_display_name_isSet;
}

bool OAIOAuth2Permission::is_admin_consent_display_name_Valid() const{
    return m_admin_consent_display_name_isValid;
}

QString OAIOAuth2Permission::getId() const {
    return m_id;
}
void OAIOAuth2Permission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOAuth2Permission::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOAuth2Permission::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIOAuth2Permission::isIsEnabled() const {
    return m_is_enabled;
}
void OAIOAuth2Permission::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIOAuth2Permission::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIOAuth2Permission::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QString OAIOAuth2Permission::getType() const {
    return m_type;
}
void OAIOAuth2Permission::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOAuth2Permission::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOAuth2Permission::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOAuth2Permission::getUserConsentDescription() const {
    return m_user_consent_description;
}
void OAIOAuth2Permission::setUserConsentDescription(const QString &user_consent_description) {
    m_user_consent_description = user_consent_description;
    m_user_consent_description_isSet = true;
}

bool OAIOAuth2Permission::is_user_consent_description_Set() const{
    return m_user_consent_description_isSet;
}

bool OAIOAuth2Permission::is_user_consent_description_Valid() const{
    return m_user_consent_description_isValid;
}

QString OAIOAuth2Permission::getUserConsentDisplayName() const {
    return m_user_consent_display_name;
}
void OAIOAuth2Permission::setUserConsentDisplayName(const QString &user_consent_display_name) {
    m_user_consent_display_name = user_consent_display_name;
    m_user_consent_display_name_isSet = true;
}

bool OAIOAuth2Permission::is_user_consent_display_name_Set() const{
    return m_user_consent_display_name_isSet;
}

bool OAIOAuth2Permission::is_user_consent_display_name_Valid() const{
    return m_user_consent_display_name_isValid;
}

QString OAIOAuth2Permission::getValue() const {
    return m_value;
}
void OAIOAuth2Permission::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOAuth2Permission::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOAuth2Permission::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOAuth2Permission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_consent_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_consent_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_consent_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_consent_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuth2Permission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
