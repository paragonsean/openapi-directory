/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuth2PermissionGrant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuth2PermissionGrant::OAIOAuth2PermissionGrant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuth2PermissionGrant::OAIOAuth2PermissionGrant() {
    this->initializeModel();
}

OAIOAuth2PermissionGrant::~OAIOAuth2PermissionGrant() {}

void OAIOAuth2PermissionGrant::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_consent_type_isSet = false;
    m_consent_type_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIOAuth2PermissionGrant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuth2PermissionGrant::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_consent_type_isValid = ::OpenAPI::fromJsonValue(m_consent_type, json[QString("consentType")]);
    m_consent_type_isSet = !json[QString("consentType")].isNull() && m_consent_type_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiryTime")]);
    m_expiry_time_isSet = !json[QString("expiryTime")].isNull() && m_expiry_time_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("odata.type")]);
    m_odata_type_isSet = !json[QString("odata.type")].isNull() && m_odata_type_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIOAuth2PermissionGrant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuth2PermissionGrant::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_consent_type_isSet) {
        obj.insert(QString("consentType"), ::OpenAPI::toJsonValue(m_consent_type));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiryTime"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIOAuth2PermissionGrant::getClientId() const {
    return m_client_id;
}
void OAIOAuth2PermissionGrant::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOAuth2PermissionGrant::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOAuth2PermissionGrant::getConsentType() const {
    return m_consent_type;
}
void OAIOAuth2PermissionGrant::setConsentType(const QString &consent_type) {
    m_consent_type = consent_type;
    m_consent_type_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_consent_type_Set() const{
    return m_consent_type_isSet;
}

bool OAIOAuth2PermissionGrant::is_consent_type_Valid() const{
    return m_consent_type_isValid;
}

QString OAIOAuth2PermissionGrant::getExpiryTime() const {
    return m_expiry_time;
}
void OAIOAuth2PermissionGrant::setExpiryTime(const QString &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIOAuth2PermissionGrant::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

QString OAIOAuth2PermissionGrant::getObjectId() const {
    return m_object_id;
}
void OAIOAuth2PermissionGrant::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIOAuth2PermissionGrant::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIOAuth2PermissionGrant::getOdataType() const {
    return m_odata_type;
}
void OAIOAuth2PermissionGrant::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIOAuth2PermissionGrant::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIOAuth2PermissionGrant::getPrincipalId() const {
    return m_principal_id;
}
void OAIOAuth2PermissionGrant::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIOAuth2PermissionGrant::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAIOAuth2PermissionGrant::getResourceId() const {
    return m_resource_id;
}
void OAIOAuth2PermissionGrant::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIOAuth2PermissionGrant::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIOAuth2PermissionGrant::getScope() const {
    return m_scope;
}
void OAIOAuth2PermissionGrant::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIOAuth2PermissionGrant::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIOAuth2PermissionGrant::getStartTime() const {
    return m_start_time;
}
void OAIOAuth2PermissionGrant::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIOAuth2PermissionGrant::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIOAuth2PermissionGrant::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIOAuth2PermissionGrant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuth2PermissionGrant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
