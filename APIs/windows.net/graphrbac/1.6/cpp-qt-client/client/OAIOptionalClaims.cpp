/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptionalClaims.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptionalClaims::OAIOptionalClaims(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptionalClaims::OAIOptionalClaims() {
    this->initializeModel();
}

OAIOptionalClaims::~OAIOptionalClaims() {}

void OAIOptionalClaims::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_saml_token_isSet = false;
    m_saml_token_isValid = false;
}

void OAIOptionalClaims::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptionalClaims::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_saml_token_isValid = ::OpenAPI::fromJsonValue(m_saml_token, json[QString("samlToken")]);
    m_saml_token_isSet = !json[QString("samlToken")].isNull() && m_saml_token_isValid;
}

QString OAIOptionalClaims::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptionalClaims::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token.size() > 0) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_id_token.size() > 0) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_saml_token.size() > 0) {
        obj.insert(QString("samlToken"), ::OpenAPI::toJsonValue(m_saml_token));
    }
    return obj;
}

QList<OAIOptionalClaim> OAIOptionalClaims::getAccessToken() const {
    return m_access_token;
}
void OAIOptionalClaims::setAccessToken(const QList<OAIOptionalClaim> &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIOptionalClaims::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIOptionalClaims::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QList<OAIOptionalClaim> OAIOptionalClaims::getIdToken() const {
    return m_id_token;
}
void OAIOptionalClaims::setIdToken(const QList<OAIOptionalClaim> &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIOptionalClaims::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIOptionalClaims::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QList<OAIOptionalClaim> OAIOptionalClaims::getSamlToken() const {
    return m_saml_token;
}
void OAIOptionalClaims::setSamlToken(const QList<OAIOptionalClaim> &saml_token) {
    m_saml_token = saml_token;
    m_saml_token_isSet = true;
}

bool OAIOptionalClaims::is_saml_token_Set() const{
    return m_saml_token_isSet;
}

bool OAIOptionalClaims::is_saml_token_Valid() const{
    return m_saml_token_isValid;
}

bool OAIOptionalClaims::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_token.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptionalClaims::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
