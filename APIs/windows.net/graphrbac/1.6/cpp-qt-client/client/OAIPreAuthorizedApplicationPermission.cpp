/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreAuthorizedApplicationPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreAuthorizedApplicationPermission::OAIPreAuthorizedApplicationPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreAuthorizedApplicationPermission::OAIPreAuthorizedApplicationPermission() {
    this->initializeModel();
}

OAIPreAuthorizedApplicationPermission::~OAIPreAuthorizedApplicationPermission() {}

void OAIPreAuthorizedApplicationPermission::initializeModel() {

    m_access_grants_isSet = false;
    m_access_grants_isValid = false;

    m_direct_access_grant_isSet = false;
    m_direct_access_grant_isValid = false;
}

void OAIPreAuthorizedApplicationPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreAuthorizedApplicationPermission::fromJsonObject(QJsonObject json) {

    m_access_grants_isValid = ::OpenAPI::fromJsonValue(m_access_grants, json[QString("accessGrants")]);
    m_access_grants_isSet = !json[QString("accessGrants")].isNull() && m_access_grants_isValid;

    m_direct_access_grant_isValid = ::OpenAPI::fromJsonValue(m_direct_access_grant, json[QString("directAccessGrant")]);
    m_direct_access_grant_isSet = !json[QString("directAccessGrant")].isNull() && m_direct_access_grant_isValid;
}

QString OAIPreAuthorizedApplicationPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreAuthorizedApplicationPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_access_grants.size() > 0) {
        obj.insert(QString("accessGrants"), ::OpenAPI::toJsonValue(m_access_grants));
    }
    if (m_direct_access_grant_isSet) {
        obj.insert(QString("directAccessGrant"), ::OpenAPI::toJsonValue(m_direct_access_grant));
    }
    return obj;
}

QList<QString> OAIPreAuthorizedApplicationPermission::getAccessGrants() const {
    return m_access_grants;
}
void OAIPreAuthorizedApplicationPermission::setAccessGrants(const QList<QString> &access_grants) {
    m_access_grants = access_grants;
    m_access_grants_isSet = true;
}

bool OAIPreAuthorizedApplicationPermission::is_access_grants_Set() const{
    return m_access_grants_isSet;
}

bool OAIPreAuthorizedApplicationPermission::is_access_grants_Valid() const{
    return m_access_grants_isValid;
}

bool OAIPreAuthorizedApplicationPermission::isDirectAccessGrant() const {
    return m_direct_access_grant;
}
void OAIPreAuthorizedApplicationPermission::setDirectAccessGrant(const bool &direct_access_grant) {
    m_direct_access_grant = direct_access_grant;
    m_direct_access_grant_isSet = true;
}

bool OAIPreAuthorizedApplicationPermission::is_direct_access_grant_Set() const{
    return m_direct_access_grant_isSet;
}

bool OAIPreAuthorizedApplicationPermission::is_direct_access_grant_Valid() const{
    return m_direct_access_grant_isValid;
}

bool OAIPreAuthorizedApplicationPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_grants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_access_grant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreAuthorizedApplicationPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
