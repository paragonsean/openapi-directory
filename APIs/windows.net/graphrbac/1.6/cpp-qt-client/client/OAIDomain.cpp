/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomain::OAIDomain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomain::OAIDomain() {
    this->initializeModel();
}

OAIDomain::~OAIDomain() {}

void OAIDomain::initializeModel() {

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_verified_isSet = false;
    m_is_verified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDomain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomain::fromJsonObject(QJsonObject json) {

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("authenticationType")]);
    m_authentication_type_isSet = !json[QString("authenticationType")].isNull() && m_authentication_type_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_verified_isValid = ::OpenAPI::fromJsonValue(m_is_verified, json[QString("isVerified")]);
    m_is_verified_isSet = !json[QString("isVerified")].isNull() && m_is_verified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDomain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomain::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_type_isSet) {
        obj.insert(QString("authenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_verified_isSet) {
        obj.insert(QString("isVerified"), ::OpenAPI::toJsonValue(m_is_verified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIDomain::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIDomain::setAuthenticationType(const QString &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIDomain::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIDomain::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

bool OAIDomain::isIsDefault() const {
    return m_is_default;
}
void OAIDomain::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIDomain::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIDomain::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIDomain::isIsVerified() const {
    return m_is_verified;
}
void OAIDomain::setIsVerified(const bool &is_verified) {
    m_is_verified = is_verified;
    m_is_verified_isSet = true;
}

bool OAIDomain::is_is_verified_Set() const{
    return m_is_verified_isSet;
}

bool OAIDomain::is_is_verified_Valid() const{
    return m_is_verified_isValid;
}

QString OAIDomain::getName() const {
    return m_name;
}
void OAIDomain::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDomain::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDomain::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDomain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomain::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
