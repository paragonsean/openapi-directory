/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppRoleAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppRoleAssignment::OAIAppRoleAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppRoleAssignment::OAIAppRoleAssignment() {
    this->initializeModel();
}

OAIAppRoleAssignment::~OAIAppRoleAssignment() {}

void OAIAppRoleAssignment::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_principal_display_name_isSet = false;
    m_principal_display_name_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_principal_type_isSet = false;
    m_principal_type_isValid = false;

    m_resource_display_name_isSet = false;
    m_resource_display_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_deletion_timestamp_isSet = false;
    m_deletion_timestamp_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIAppRoleAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppRoleAssignment::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_principal_display_name_isValid = ::OpenAPI::fromJsonValue(m_principal_display_name, json[QString("principalDisplayName")]);
    m_principal_display_name_isSet = !json[QString("principalDisplayName")].isNull() && m_principal_display_name_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_principal_type_isValid = ::OpenAPI::fromJsonValue(m_principal_type, json[QString("principalType")]);
    m_principal_type_isSet = !json[QString("principalType")].isNull() && m_principal_type_isValid;

    m_resource_display_name_isValid = ::OpenAPI::fromJsonValue(m_resource_display_name, json[QString("resourceDisplayName")]);
    m_resource_display_name_isSet = !json[QString("resourceDisplayName")].isNull() && m_resource_display_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_deletion_timestamp_isValid = ::OpenAPI::fromJsonValue(m_deletion_timestamp, json[QString("deletionTimestamp")]);
    m_deletion_timestamp_isSet = !json[QString("deletionTimestamp")].isNull() && m_deletion_timestamp_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIAppRoleAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppRoleAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_principal_display_name_isSet) {
        obj.insert(QString("principalDisplayName"), ::OpenAPI::toJsonValue(m_principal_display_name));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_principal_type_isSet) {
        obj.insert(QString("principalType"), ::OpenAPI::toJsonValue(m_principal_type));
    }
    if (m_resource_display_name_isSet) {
        obj.insert(QString("resourceDisplayName"), ::OpenAPI::toJsonValue(m_resource_display_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_deletion_timestamp_isSet) {
        obj.insert(QString("deletionTimestamp"), ::OpenAPI::toJsonValue(m_deletion_timestamp));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QString OAIAppRoleAssignment::getId() const {
    return m_id;
}
void OAIAppRoleAssignment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppRoleAssignment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppRoleAssignment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAppRoleAssignment::getPrincipalDisplayName() const {
    return m_principal_display_name;
}
void OAIAppRoleAssignment::setPrincipalDisplayName(const QString &principal_display_name) {
    m_principal_display_name = principal_display_name;
    m_principal_display_name_isSet = true;
}

bool OAIAppRoleAssignment::is_principal_display_name_Set() const{
    return m_principal_display_name_isSet;
}

bool OAIAppRoleAssignment::is_principal_display_name_Valid() const{
    return m_principal_display_name_isValid;
}

QString OAIAppRoleAssignment::getPrincipalId() const {
    return m_principal_id;
}
void OAIAppRoleAssignment::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIAppRoleAssignment::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIAppRoleAssignment::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAIAppRoleAssignment::getPrincipalType() const {
    return m_principal_type;
}
void OAIAppRoleAssignment::setPrincipalType(const QString &principal_type) {
    m_principal_type = principal_type;
    m_principal_type_isSet = true;
}

bool OAIAppRoleAssignment::is_principal_type_Set() const{
    return m_principal_type_isSet;
}

bool OAIAppRoleAssignment::is_principal_type_Valid() const{
    return m_principal_type_isValid;
}

QString OAIAppRoleAssignment::getResourceDisplayName() const {
    return m_resource_display_name;
}
void OAIAppRoleAssignment::setResourceDisplayName(const QString &resource_display_name) {
    m_resource_display_name = resource_display_name;
    m_resource_display_name_isSet = true;
}

bool OAIAppRoleAssignment::is_resource_display_name_Set() const{
    return m_resource_display_name_isSet;
}

bool OAIAppRoleAssignment::is_resource_display_name_Valid() const{
    return m_resource_display_name_isValid;
}

QString OAIAppRoleAssignment::getResourceId() const {
    return m_resource_id;
}
void OAIAppRoleAssignment::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAppRoleAssignment::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAppRoleAssignment::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QDateTime OAIAppRoleAssignment::getDeletionTimestamp() const {
    return m_deletion_timestamp;
}
void OAIAppRoleAssignment::setDeletionTimestamp(const QDateTime &deletion_timestamp) {
    m_deletion_timestamp = deletion_timestamp;
    m_deletion_timestamp_isSet = true;
}

bool OAIAppRoleAssignment::is_deletion_timestamp_Set() const{
    return m_deletion_timestamp_isSet;
}

bool OAIAppRoleAssignment::is_deletion_timestamp_Valid() const{
    return m_deletion_timestamp_isValid;
}

QString OAIAppRoleAssignment::getObjectId() const {
    return m_object_id;
}
void OAIAppRoleAssignment::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIAppRoleAssignment::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIAppRoleAssignment::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIAppRoleAssignment::getObjectType() const {
    return m_object_type;
}
void OAIAppRoleAssignment::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIAppRoleAssignment::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAppRoleAssignment::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIAppRoleAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppRoleAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
