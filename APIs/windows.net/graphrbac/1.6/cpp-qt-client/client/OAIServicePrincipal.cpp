/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServicePrincipal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServicePrincipal::OAIServicePrincipal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServicePrincipal::OAIServicePrincipal() {
    this->initializeModel();
}

OAIServicePrincipal::~OAIServicePrincipal() {}

void OAIServicePrincipal::initializeModel() {

    m_account_enabled_isSet = false;
    m_account_enabled_isValid = false;

    m_alternative_names_isSet = false;
    m_alternative_names_isValid = false;

    m_app_display_name_isSet = false;
    m_app_display_name_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_owner_tenant_id_isSet = false;
    m_app_owner_tenant_id_isValid = false;

    m_app_role_assignment_required_isSet = false;
    m_app_role_assignment_required_isValid = false;

    m_app_roles_isSet = false;
    m_app_roles_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_error_url_isSet = false;
    m_error_url_isValid = false;

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_key_credentials_isSet = false;
    m_key_credentials_isValid = false;

    m_logout_url_isSet = false;
    m_logout_url_isValid = false;

    m_oauth2_permissions_isSet = false;
    m_oauth2_permissions_isValid = false;

    m_password_credentials_isSet = false;
    m_password_credentials_isValid = false;

    m_preferred_token_signing_key_thumbprint_isSet = false;
    m_preferred_token_signing_key_thumbprint_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_reply_urls_isSet = false;
    m_reply_urls_isValid = false;

    m_saml_metadata_url_isSet = false;
    m_saml_metadata_url_isValid = false;

    m_service_principal_names_isSet = false;
    m_service_principal_names_isValid = false;

    m_service_principal_type_isSet = false;
    m_service_principal_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_deletion_timestamp_isSet = false;
    m_deletion_timestamp_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIServicePrincipal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServicePrincipal::fromJsonObject(QJsonObject json) {

    m_account_enabled_isValid = ::OpenAPI::fromJsonValue(m_account_enabled, json[QString("accountEnabled")]);
    m_account_enabled_isSet = !json[QString("accountEnabled")].isNull() && m_account_enabled_isValid;

    m_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_alternative_names, json[QString("alternativeNames")]);
    m_alternative_names_isSet = !json[QString("alternativeNames")].isNull() && m_alternative_names_isValid;

    m_app_display_name_isValid = ::OpenAPI::fromJsonValue(m_app_display_name, json[QString("appDisplayName")]);
    m_app_display_name_isSet = !json[QString("appDisplayName")].isNull() && m_app_display_name_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_owner_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_app_owner_tenant_id, json[QString("appOwnerTenantId")]);
    m_app_owner_tenant_id_isSet = !json[QString("appOwnerTenantId")].isNull() && m_app_owner_tenant_id_isValid;

    m_app_role_assignment_required_isValid = ::OpenAPI::fromJsonValue(m_app_role_assignment_required, json[QString("appRoleAssignmentRequired")]);
    m_app_role_assignment_required_isSet = !json[QString("appRoleAssignmentRequired")].isNull() && m_app_role_assignment_required_isValid;

    m_app_roles_isValid = ::OpenAPI::fromJsonValue(m_app_roles, json[QString("appRoles")]);
    m_app_roles_isSet = !json[QString("appRoles")].isNull() && m_app_roles_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_error_url_isValid = ::OpenAPI::fromJsonValue(m_error_url, json[QString("errorUrl")]);
    m_error_url_isSet = !json[QString("errorUrl")].isNull() && m_error_url_isValid;

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_key_credentials_isValid = ::OpenAPI::fromJsonValue(m_key_credentials, json[QString("keyCredentials")]);
    m_key_credentials_isSet = !json[QString("keyCredentials")].isNull() && m_key_credentials_isValid;

    m_logout_url_isValid = ::OpenAPI::fromJsonValue(m_logout_url, json[QString("logoutUrl")]);
    m_logout_url_isSet = !json[QString("logoutUrl")].isNull() && m_logout_url_isValid;

    m_oauth2_permissions_isValid = ::OpenAPI::fromJsonValue(m_oauth2_permissions, json[QString("oauth2Permissions")]);
    m_oauth2_permissions_isSet = !json[QString("oauth2Permissions")].isNull() && m_oauth2_permissions_isValid;

    m_password_credentials_isValid = ::OpenAPI::fromJsonValue(m_password_credentials, json[QString("passwordCredentials")]);
    m_password_credentials_isSet = !json[QString("passwordCredentials")].isNull() && m_password_credentials_isValid;

    m_preferred_token_signing_key_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_preferred_token_signing_key_thumbprint, json[QString("preferredTokenSigningKeyThumbprint")]);
    m_preferred_token_signing_key_thumbprint_isSet = !json[QString("preferredTokenSigningKeyThumbprint")].isNull() && m_preferred_token_signing_key_thumbprint_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisherName")]);
    m_publisher_name_isSet = !json[QString("publisherName")].isNull() && m_publisher_name_isValid;

    m_reply_urls_isValid = ::OpenAPI::fromJsonValue(m_reply_urls, json[QString("replyUrls")]);
    m_reply_urls_isSet = !json[QString("replyUrls")].isNull() && m_reply_urls_isValid;

    m_saml_metadata_url_isValid = ::OpenAPI::fromJsonValue(m_saml_metadata_url, json[QString("samlMetadataUrl")]);
    m_saml_metadata_url_isSet = !json[QString("samlMetadataUrl")].isNull() && m_saml_metadata_url_isValid;

    m_service_principal_names_isValid = ::OpenAPI::fromJsonValue(m_service_principal_names, json[QString("servicePrincipalNames")]);
    m_service_principal_names_isSet = !json[QString("servicePrincipalNames")].isNull() && m_service_principal_names_isValid;

    m_service_principal_type_isValid = ::OpenAPI::fromJsonValue(m_service_principal_type, json[QString("servicePrincipalType")]);
    m_service_principal_type_isSet = !json[QString("servicePrincipalType")].isNull() && m_service_principal_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_deletion_timestamp_isValid = ::OpenAPI::fromJsonValue(m_deletion_timestamp, json[QString("deletionTimestamp")]);
    m_deletion_timestamp_isSet = !json[QString("deletionTimestamp")].isNull() && m_deletion_timestamp_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIServicePrincipal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServicePrincipal::asJsonObject() const {
    QJsonObject obj;
    if (m_account_enabled_isSet) {
        obj.insert(QString("accountEnabled"), ::OpenAPI::toJsonValue(m_account_enabled));
    }
    if (m_alternative_names.size() > 0) {
        obj.insert(QString("alternativeNames"), ::OpenAPI::toJsonValue(m_alternative_names));
    }
    if (m_app_display_name_isSet) {
        obj.insert(QString("appDisplayName"), ::OpenAPI::toJsonValue(m_app_display_name));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_owner_tenant_id_isSet) {
        obj.insert(QString("appOwnerTenantId"), ::OpenAPI::toJsonValue(m_app_owner_tenant_id));
    }
    if (m_app_role_assignment_required_isSet) {
        obj.insert(QString("appRoleAssignmentRequired"), ::OpenAPI::toJsonValue(m_app_role_assignment_required));
    }
    if (m_app_roles.size() > 0) {
        obj.insert(QString("appRoles"), ::OpenAPI::toJsonValue(m_app_roles));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_error_url_isSet) {
        obj.insert(QString("errorUrl"), ::OpenAPI::toJsonValue(m_error_url));
    }
    if (m_homepage_isSet) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_key_credentials.size() > 0) {
        obj.insert(QString("keyCredentials"), ::OpenAPI::toJsonValue(m_key_credentials));
    }
    if (m_logout_url_isSet) {
        obj.insert(QString("logoutUrl"), ::OpenAPI::toJsonValue(m_logout_url));
    }
    if (m_oauth2_permissions.size() > 0) {
        obj.insert(QString("oauth2Permissions"), ::OpenAPI::toJsonValue(m_oauth2_permissions));
    }
    if (m_password_credentials.size() > 0) {
        obj.insert(QString("passwordCredentials"), ::OpenAPI::toJsonValue(m_password_credentials));
    }
    if (m_preferred_token_signing_key_thumbprint_isSet) {
        obj.insert(QString("preferredTokenSigningKeyThumbprint"), ::OpenAPI::toJsonValue(m_preferred_token_signing_key_thumbprint));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_reply_urls.size() > 0) {
        obj.insert(QString("replyUrls"), ::OpenAPI::toJsonValue(m_reply_urls));
    }
    if (m_saml_metadata_url_isSet) {
        obj.insert(QString("samlMetadataUrl"), ::OpenAPI::toJsonValue(m_saml_metadata_url));
    }
    if (m_service_principal_names.size() > 0) {
        obj.insert(QString("servicePrincipalNames"), ::OpenAPI::toJsonValue(m_service_principal_names));
    }
    if (m_service_principal_type_isSet) {
        obj.insert(QString("servicePrincipalType"), ::OpenAPI::toJsonValue(m_service_principal_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_deletion_timestamp_isSet) {
        obj.insert(QString("deletionTimestamp"), ::OpenAPI::toJsonValue(m_deletion_timestamp));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

bool OAIServicePrincipal::isAccountEnabled() const {
    return m_account_enabled;
}
void OAIServicePrincipal::setAccountEnabled(const bool &account_enabled) {
    m_account_enabled = account_enabled;
    m_account_enabled_isSet = true;
}

bool OAIServicePrincipal::is_account_enabled_Set() const{
    return m_account_enabled_isSet;
}

bool OAIServicePrincipal::is_account_enabled_Valid() const{
    return m_account_enabled_isValid;
}

QList<QString> OAIServicePrincipal::getAlternativeNames() const {
    return m_alternative_names;
}
void OAIServicePrincipal::setAlternativeNames(const QList<QString> &alternative_names) {
    m_alternative_names = alternative_names;
    m_alternative_names_isSet = true;
}

bool OAIServicePrincipal::is_alternative_names_Set() const{
    return m_alternative_names_isSet;
}

bool OAIServicePrincipal::is_alternative_names_Valid() const{
    return m_alternative_names_isValid;
}

QString OAIServicePrincipal::getAppDisplayName() const {
    return m_app_display_name;
}
void OAIServicePrincipal::setAppDisplayName(const QString &app_display_name) {
    m_app_display_name = app_display_name;
    m_app_display_name_isSet = true;
}

bool OAIServicePrincipal::is_app_display_name_Set() const{
    return m_app_display_name_isSet;
}

bool OAIServicePrincipal::is_app_display_name_Valid() const{
    return m_app_display_name_isValid;
}

QString OAIServicePrincipal::getAppId() const {
    return m_app_id;
}
void OAIServicePrincipal::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIServicePrincipal::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIServicePrincipal::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIServicePrincipal::getAppOwnerTenantId() const {
    return m_app_owner_tenant_id;
}
void OAIServicePrincipal::setAppOwnerTenantId(const QString &app_owner_tenant_id) {
    m_app_owner_tenant_id = app_owner_tenant_id;
    m_app_owner_tenant_id_isSet = true;
}

bool OAIServicePrincipal::is_app_owner_tenant_id_Set() const{
    return m_app_owner_tenant_id_isSet;
}

bool OAIServicePrincipal::is_app_owner_tenant_id_Valid() const{
    return m_app_owner_tenant_id_isValid;
}

bool OAIServicePrincipal::isAppRoleAssignmentRequired() const {
    return m_app_role_assignment_required;
}
void OAIServicePrincipal::setAppRoleAssignmentRequired(const bool &app_role_assignment_required) {
    m_app_role_assignment_required = app_role_assignment_required;
    m_app_role_assignment_required_isSet = true;
}

bool OAIServicePrincipal::is_app_role_assignment_required_Set() const{
    return m_app_role_assignment_required_isSet;
}

bool OAIServicePrincipal::is_app_role_assignment_required_Valid() const{
    return m_app_role_assignment_required_isValid;
}

QList<OAIAppRole> OAIServicePrincipal::getAppRoles() const {
    return m_app_roles;
}
void OAIServicePrincipal::setAppRoles(const QList<OAIAppRole> &app_roles) {
    m_app_roles = app_roles;
    m_app_roles_isSet = true;
}

bool OAIServicePrincipal::is_app_roles_Set() const{
    return m_app_roles_isSet;
}

bool OAIServicePrincipal::is_app_roles_Valid() const{
    return m_app_roles_isValid;
}

QString OAIServicePrincipal::getDisplayName() const {
    return m_display_name;
}
void OAIServicePrincipal::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIServicePrincipal::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIServicePrincipal::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIServicePrincipal::getErrorUrl() const {
    return m_error_url;
}
void OAIServicePrincipal::setErrorUrl(const QString &error_url) {
    m_error_url = error_url;
    m_error_url_isSet = true;
}

bool OAIServicePrincipal::is_error_url_Set() const{
    return m_error_url_isSet;
}

bool OAIServicePrincipal::is_error_url_Valid() const{
    return m_error_url_isValid;
}

QString OAIServicePrincipal::getHomepage() const {
    return m_homepage;
}
void OAIServicePrincipal::setHomepage(const QString &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAIServicePrincipal::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAIServicePrincipal::is_homepage_Valid() const{
    return m_homepage_isValid;
}

QList<OAIKeyCredential> OAIServicePrincipal::getKeyCredentials() const {
    return m_key_credentials;
}
void OAIServicePrincipal::setKeyCredentials(const QList<OAIKeyCredential> &key_credentials) {
    m_key_credentials = key_credentials;
    m_key_credentials_isSet = true;
}

bool OAIServicePrincipal::is_key_credentials_Set() const{
    return m_key_credentials_isSet;
}

bool OAIServicePrincipal::is_key_credentials_Valid() const{
    return m_key_credentials_isValid;
}

QString OAIServicePrincipal::getLogoutUrl() const {
    return m_logout_url;
}
void OAIServicePrincipal::setLogoutUrl(const QString &logout_url) {
    m_logout_url = logout_url;
    m_logout_url_isSet = true;
}

bool OAIServicePrincipal::is_logout_url_Set() const{
    return m_logout_url_isSet;
}

bool OAIServicePrincipal::is_logout_url_Valid() const{
    return m_logout_url_isValid;
}

QList<OAIOAuth2Permission> OAIServicePrincipal::getOauth2Permissions() const {
    return m_oauth2_permissions;
}
void OAIServicePrincipal::setOauth2Permissions(const QList<OAIOAuth2Permission> &oauth2_permissions) {
    m_oauth2_permissions = oauth2_permissions;
    m_oauth2_permissions_isSet = true;
}

bool OAIServicePrincipal::is_oauth2_permissions_Set() const{
    return m_oauth2_permissions_isSet;
}

bool OAIServicePrincipal::is_oauth2_permissions_Valid() const{
    return m_oauth2_permissions_isValid;
}

QList<OAIPasswordCredential> OAIServicePrincipal::getPasswordCredentials() const {
    return m_password_credentials;
}
void OAIServicePrincipal::setPasswordCredentials(const QList<OAIPasswordCredential> &password_credentials) {
    m_password_credentials = password_credentials;
    m_password_credentials_isSet = true;
}

bool OAIServicePrincipal::is_password_credentials_Set() const{
    return m_password_credentials_isSet;
}

bool OAIServicePrincipal::is_password_credentials_Valid() const{
    return m_password_credentials_isValid;
}

QString OAIServicePrincipal::getPreferredTokenSigningKeyThumbprint() const {
    return m_preferred_token_signing_key_thumbprint;
}
void OAIServicePrincipal::setPreferredTokenSigningKeyThumbprint(const QString &preferred_token_signing_key_thumbprint) {
    m_preferred_token_signing_key_thumbprint = preferred_token_signing_key_thumbprint;
    m_preferred_token_signing_key_thumbprint_isSet = true;
}

bool OAIServicePrincipal::is_preferred_token_signing_key_thumbprint_Set() const{
    return m_preferred_token_signing_key_thumbprint_isSet;
}

bool OAIServicePrincipal::is_preferred_token_signing_key_thumbprint_Valid() const{
    return m_preferred_token_signing_key_thumbprint_isValid;
}

QString OAIServicePrincipal::getPublisherName() const {
    return m_publisher_name;
}
void OAIServicePrincipal::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIServicePrincipal::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIServicePrincipal::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

QList<QString> OAIServicePrincipal::getReplyUrls() const {
    return m_reply_urls;
}
void OAIServicePrincipal::setReplyUrls(const QList<QString> &reply_urls) {
    m_reply_urls = reply_urls;
    m_reply_urls_isSet = true;
}

bool OAIServicePrincipal::is_reply_urls_Set() const{
    return m_reply_urls_isSet;
}

bool OAIServicePrincipal::is_reply_urls_Valid() const{
    return m_reply_urls_isValid;
}

QString OAIServicePrincipal::getSamlMetadataUrl() const {
    return m_saml_metadata_url;
}
void OAIServicePrincipal::setSamlMetadataUrl(const QString &saml_metadata_url) {
    m_saml_metadata_url = saml_metadata_url;
    m_saml_metadata_url_isSet = true;
}

bool OAIServicePrincipal::is_saml_metadata_url_Set() const{
    return m_saml_metadata_url_isSet;
}

bool OAIServicePrincipal::is_saml_metadata_url_Valid() const{
    return m_saml_metadata_url_isValid;
}

QList<QString> OAIServicePrincipal::getServicePrincipalNames() const {
    return m_service_principal_names;
}
void OAIServicePrincipal::setServicePrincipalNames(const QList<QString> &service_principal_names) {
    m_service_principal_names = service_principal_names;
    m_service_principal_names_isSet = true;
}

bool OAIServicePrincipal::is_service_principal_names_Set() const{
    return m_service_principal_names_isSet;
}

bool OAIServicePrincipal::is_service_principal_names_Valid() const{
    return m_service_principal_names_isValid;
}

QString OAIServicePrincipal::getServicePrincipalType() const {
    return m_service_principal_type;
}
void OAIServicePrincipal::setServicePrincipalType(const QString &service_principal_type) {
    m_service_principal_type = service_principal_type;
    m_service_principal_type_isSet = true;
}

bool OAIServicePrincipal::is_service_principal_type_Set() const{
    return m_service_principal_type_isSet;
}

bool OAIServicePrincipal::is_service_principal_type_Valid() const{
    return m_service_principal_type_isValid;
}

QList<QString> OAIServicePrincipal::getTags() const {
    return m_tags;
}
void OAIServicePrincipal::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIServicePrincipal::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIServicePrincipal::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIServicePrincipal::getDeletionTimestamp() const {
    return m_deletion_timestamp;
}
void OAIServicePrincipal::setDeletionTimestamp(const QDateTime &deletion_timestamp) {
    m_deletion_timestamp = deletion_timestamp;
    m_deletion_timestamp_isSet = true;
}

bool OAIServicePrincipal::is_deletion_timestamp_Set() const{
    return m_deletion_timestamp_isSet;
}

bool OAIServicePrincipal::is_deletion_timestamp_Valid() const{
    return m_deletion_timestamp_isValid;
}

QString OAIServicePrincipal::getObjectId() const {
    return m_object_id;
}
void OAIServicePrincipal::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIServicePrincipal::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIServicePrincipal::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIServicePrincipal::getObjectType() const {
    return m_object_type;
}
void OAIServicePrincipal::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIServicePrincipal::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIServicePrincipal::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIServicePrincipal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_owner_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_role_assignment_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_token_signing_key_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_metadata_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServicePrincipal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
