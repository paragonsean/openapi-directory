/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppRole.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppRole::OAIAppRole(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppRole::OAIAppRole() {
    this->initializeModel();
}

OAIAppRole::~OAIAppRole() {}

void OAIAppRole::initializeModel() {

    m_allowed_member_types_isSet = false;
    m_allowed_member_types_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAppRole::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppRole::fromJsonObject(QJsonObject json) {

    m_allowed_member_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_member_types, json[QString("allowedMemberTypes")]);
    m_allowed_member_types_isSet = !json[QString("allowedMemberTypes")].isNull() && m_allowed_member_types_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAppRole::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppRole::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_member_types.size() > 0) {
        obj.insert(QString("allowedMemberTypes"), ::OpenAPI::toJsonValue(m_allowed_member_types));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<QString> OAIAppRole::getAllowedMemberTypes() const {
    return m_allowed_member_types;
}
void OAIAppRole::setAllowedMemberTypes(const QList<QString> &allowed_member_types) {
    m_allowed_member_types = allowed_member_types;
    m_allowed_member_types_isSet = true;
}

bool OAIAppRole::is_allowed_member_types_Set() const{
    return m_allowed_member_types_isSet;
}

bool OAIAppRole::is_allowed_member_types_Valid() const{
    return m_allowed_member_types_isValid;
}

QString OAIAppRole::getDescription() const {
    return m_description;
}
void OAIAppRole::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAppRole::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAppRole::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAppRole::getDisplayName() const {
    return m_display_name;
}
void OAIAppRole::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAppRole::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAppRole::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAppRole::getId() const {
    return m_id;
}
void OAIAppRole::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppRole::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppRole::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAppRole::isIsEnabled() const {
    return m_is_enabled;
}
void OAIAppRole::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIAppRole::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIAppRole::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QString OAIAppRole::getValue() const {
    return m_value;
}
void OAIAppRole::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAppRole::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAppRole::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAppRole::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_member_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppRole::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
