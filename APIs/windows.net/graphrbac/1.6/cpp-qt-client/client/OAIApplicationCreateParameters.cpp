/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationCreateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationCreateParameters::OAIApplicationCreateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationCreateParameters::OAIApplicationCreateParameters() {
    this->initializeModel();
}

OAIApplicationCreateParameters::~OAIApplicationCreateParameters() {}

void OAIApplicationCreateParameters::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_identifier_uris_isSet = false;
    m_identifier_uris_isValid = false;

    m_allow_guests_sign_in_isSet = false;
    m_allow_guests_sign_in_isValid = false;

    m_allow_passthrough_users_isSet = false;
    m_allow_passthrough_users_isValid = false;

    m_app_logo_url_isSet = false;
    m_app_logo_url_isValid = false;

    m_app_permissions_isSet = false;
    m_app_permissions_isValid = false;

    m_app_roles_isSet = false;
    m_app_roles_isValid = false;

    m_available_to_other_tenants_isSet = false;
    m_available_to_other_tenants_isValid = false;

    m_error_url_isSet = false;
    m_error_url_isValid = false;

    m_group_membership_claims_isSet = false;
    m_group_membership_claims_isValid = false;

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_informational_urls_isSet = false;
    m_informational_urls_isValid = false;

    m_is_device_only_auth_supported_isSet = false;
    m_is_device_only_auth_supported_isValid = false;

    m_key_credentials_isSet = false;
    m_key_credentials_isValid = false;

    m_known_client_applications_isSet = false;
    m_known_client_applications_isValid = false;

    m_logout_url_isSet = false;
    m_logout_url_isValid = false;

    m_oauth2_allow_implicit_flow_isSet = false;
    m_oauth2_allow_implicit_flow_isValid = false;

    m_oauth2_allow_url_path_matching_isSet = false;
    m_oauth2_allow_url_path_matching_isValid = false;

    m_oauth2_permissions_isSet = false;
    m_oauth2_permissions_isValid = false;

    m_oauth2_require_post_response_isSet = false;
    m_oauth2_require_post_response_isValid = false;

    m_optional_claims_isSet = false;
    m_optional_claims_isValid = false;

    m_org_restrictions_isSet = false;
    m_org_restrictions_isValid = false;

    m_password_credentials_isSet = false;
    m_password_credentials_isValid = false;

    m_pre_authorized_applications_isSet = false;
    m_pre_authorized_applications_isValid = false;

    m_public_client_isSet = false;
    m_public_client_isValid = false;

    m_publisher_domain_isSet = false;
    m_publisher_domain_isValid = false;

    m_reply_urls_isSet = false;
    m_reply_urls_isValid = false;

    m_required_resource_access_isSet = false;
    m_required_resource_access_isValid = false;

    m_saml_metadata_url_isSet = false;
    m_saml_metadata_url_isValid = false;

    m_sign_in_audience_isSet = false;
    m_sign_in_audience_isValid = false;

    m_www_homepage_isSet = false;
    m_www_homepage_isValid = false;
}

void OAIApplicationCreateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationCreateParameters::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_identifier_uris_isValid = ::OpenAPI::fromJsonValue(m_identifier_uris, json[QString("identifierUris")]);
    m_identifier_uris_isSet = !json[QString("identifierUris")].isNull() && m_identifier_uris_isValid;

    m_allow_guests_sign_in_isValid = ::OpenAPI::fromJsonValue(m_allow_guests_sign_in, json[QString("allowGuestsSignIn")]);
    m_allow_guests_sign_in_isSet = !json[QString("allowGuestsSignIn")].isNull() && m_allow_guests_sign_in_isValid;

    m_allow_passthrough_users_isValid = ::OpenAPI::fromJsonValue(m_allow_passthrough_users, json[QString("allowPassthroughUsers")]);
    m_allow_passthrough_users_isSet = !json[QString("allowPassthroughUsers")].isNull() && m_allow_passthrough_users_isValid;

    m_app_logo_url_isValid = ::OpenAPI::fromJsonValue(m_app_logo_url, json[QString("appLogoUrl")]);
    m_app_logo_url_isSet = !json[QString("appLogoUrl")].isNull() && m_app_logo_url_isValid;

    m_app_permissions_isValid = ::OpenAPI::fromJsonValue(m_app_permissions, json[QString("appPermissions")]);
    m_app_permissions_isSet = !json[QString("appPermissions")].isNull() && m_app_permissions_isValid;

    m_app_roles_isValid = ::OpenAPI::fromJsonValue(m_app_roles, json[QString("appRoles")]);
    m_app_roles_isSet = !json[QString("appRoles")].isNull() && m_app_roles_isValid;

    m_available_to_other_tenants_isValid = ::OpenAPI::fromJsonValue(m_available_to_other_tenants, json[QString("availableToOtherTenants")]);
    m_available_to_other_tenants_isSet = !json[QString("availableToOtherTenants")].isNull() && m_available_to_other_tenants_isValid;

    m_error_url_isValid = ::OpenAPI::fromJsonValue(m_error_url, json[QString("errorUrl")]);
    m_error_url_isSet = !json[QString("errorUrl")].isNull() && m_error_url_isValid;

    m_group_membership_claims_isValid = ::OpenAPI::fromJsonValue(m_group_membership_claims, json[QString("groupMembershipClaims")]);
    m_group_membership_claims_isSet = !json[QString("groupMembershipClaims")].isNull() && m_group_membership_claims_isValid;

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_informational_urls_isValid = ::OpenAPI::fromJsonValue(m_informational_urls, json[QString("informationalUrls")]);
    m_informational_urls_isSet = !json[QString("informationalUrls")].isNull() && m_informational_urls_isValid;

    m_is_device_only_auth_supported_isValid = ::OpenAPI::fromJsonValue(m_is_device_only_auth_supported, json[QString("isDeviceOnlyAuthSupported")]);
    m_is_device_only_auth_supported_isSet = !json[QString("isDeviceOnlyAuthSupported")].isNull() && m_is_device_only_auth_supported_isValid;

    m_key_credentials_isValid = ::OpenAPI::fromJsonValue(m_key_credentials, json[QString("keyCredentials")]);
    m_key_credentials_isSet = !json[QString("keyCredentials")].isNull() && m_key_credentials_isValid;

    m_known_client_applications_isValid = ::OpenAPI::fromJsonValue(m_known_client_applications, json[QString("knownClientApplications")]);
    m_known_client_applications_isSet = !json[QString("knownClientApplications")].isNull() && m_known_client_applications_isValid;

    m_logout_url_isValid = ::OpenAPI::fromJsonValue(m_logout_url, json[QString("logoutUrl")]);
    m_logout_url_isSet = !json[QString("logoutUrl")].isNull() && m_logout_url_isValid;

    m_oauth2_allow_implicit_flow_isValid = ::OpenAPI::fromJsonValue(m_oauth2_allow_implicit_flow, json[QString("oauth2AllowImplicitFlow")]);
    m_oauth2_allow_implicit_flow_isSet = !json[QString("oauth2AllowImplicitFlow")].isNull() && m_oauth2_allow_implicit_flow_isValid;

    m_oauth2_allow_url_path_matching_isValid = ::OpenAPI::fromJsonValue(m_oauth2_allow_url_path_matching, json[QString("oauth2AllowUrlPathMatching")]);
    m_oauth2_allow_url_path_matching_isSet = !json[QString("oauth2AllowUrlPathMatching")].isNull() && m_oauth2_allow_url_path_matching_isValid;

    m_oauth2_permissions_isValid = ::OpenAPI::fromJsonValue(m_oauth2_permissions, json[QString("oauth2Permissions")]);
    m_oauth2_permissions_isSet = !json[QString("oauth2Permissions")].isNull() && m_oauth2_permissions_isValid;

    m_oauth2_require_post_response_isValid = ::OpenAPI::fromJsonValue(m_oauth2_require_post_response, json[QString("oauth2RequirePostResponse")]);
    m_oauth2_require_post_response_isSet = !json[QString("oauth2RequirePostResponse")].isNull() && m_oauth2_require_post_response_isValid;

    m_optional_claims_isValid = ::OpenAPI::fromJsonValue(m_optional_claims, json[QString("optionalClaims")]);
    m_optional_claims_isSet = !json[QString("optionalClaims")].isNull() && m_optional_claims_isValid;

    m_org_restrictions_isValid = ::OpenAPI::fromJsonValue(m_org_restrictions, json[QString("orgRestrictions")]);
    m_org_restrictions_isSet = !json[QString("orgRestrictions")].isNull() && m_org_restrictions_isValid;

    m_password_credentials_isValid = ::OpenAPI::fromJsonValue(m_password_credentials, json[QString("passwordCredentials")]);
    m_password_credentials_isSet = !json[QString("passwordCredentials")].isNull() && m_password_credentials_isValid;

    m_pre_authorized_applications_isValid = ::OpenAPI::fromJsonValue(m_pre_authorized_applications, json[QString("preAuthorizedApplications")]);
    m_pre_authorized_applications_isSet = !json[QString("preAuthorizedApplications")].isNull() && m_pre_authorized_applications_isValid;

    m_public_client_isValid = ::OpenAPI::fromJsonValue(m_public_client, json[QString("publicClient")]);
    m_public_client_isSet = !json[QString("publicClient")].isNull() && m_public_client_isValid;

    m_publisher_domain_isValid = ::OpenAPI::fromJsonValue(m_publisher_domain, json[QString("publisherDomain")]);
    m_publisher_domain_isSet = !json[QString("publisherDomain")].isNull() && m_publisher_domain_isValid;

    m_reply_urls_isValid = ::OpenAPI::fromJsonValue(m_reply_urls, json[QString("replyUrls")]);
    m_reply_urls_isSet = !json[QString("replyUrls")].isNull() && m_reply_urls_isValid;

    m_required_resource_access_isValid = ::OpenAPI::fromJsonValue(m_required_resource_access, json[QString("requiredResourceAccess")]);
    m_required_resource_access_isSet = !json[QString("requiredResourceAccess")].isNull() && m_required_resource_access_isValid;

    m_saml_metadata_url_isValid = ::OpenAPI::fromJsonValue(m_saml_metadata_url, json[QString("samlMetadataUrl")]);
    m_saml_metadata_url_isSet = !json[QString("samlMetadataUrl")].isNull() && m_saml_metadata_url_isValid;

    m_sign_in_audience_isValid = ::OpenAPI::fromJsonValue(m_sign_in_audience, json[QString("signInAudience")]);
    m_sign_in_audience_isSet = !json[QString("signInAudience")].isNull() && m_sign_in_audience_isValid;

    m_www_homepage_isValid = ::OpenAPI::fromJsonValue(m_www_homepage, json[QString("wwwHomepage")]);
    m_www_homepage_isSet = !json[QString("wwwHomepage")].isNull() && m_www_homepage_isValid;
}

QString OAIApplicationCreateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationCreateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_identifier_uris.size() > 0) {
        obj.insert(QString("identifierUris"), ::OpenAPI::toJsonValue(m_identifier_uris));
    }
    if (m_allow_guests_sign_in_isSet) {
        obj.insert(QString("allowGuestsSignIn"), ::OpenAPI::toJsonValue(m_allow_guests_sign_in));
    }
    if (m_allow_passthrough_users_isSet) {
        obj.insert(QString("allowPassthroughUsers"), ::OpenAPI::toJsonValue(m_allow_passthrough_users));
    }
    if (m_app_logo_url_isSet) {
        obj.insert(QString("appLogoUrl"), ::OpenAPI::toJsonValue(m_app_logo_url));
    }
    if (m_app_permissions.size() > 0) {
        obj.insert(QString("appPermissions"), ::OpenAPI::toJsonValue(m_app_permissions));
    }
    if (m_app_roles.size() > 0) {
        obj.insert(QString("appRoles"), ::OpenAPI::toJsonValue(m_app_roles));
    }
    if (m_available_to_other_tenants_isSet) {
        obj.insert(QString("availableToOtherTenants"), ::OpenAPI::toJsonValue(m_available_to_other_tenants));
    }
    if (m_error_url_isSet) {
        obj.insert(QString("errorUrl"), ::OpenAPI::toJsonValue(m_error_url));
    }
    if (m_group_membership_claims.isSet()) {
        obj.insert(QString("groupMembershipClaims"), ::OpenAPI::toJsonValue(m_group_membership_claims));
    }
    if (m_homepage_isSet) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_informational_urls.isSet()) {
        obj.insert(QString("informationalUrls"), ::OpenAPI::toJsonValue(m_informational_urls));
    }
    if (m_is_device_only_auth_supported_isSet) {
        obj.insert(QString("isDeviceOnlyAuthSupported"), ::OpenAPI::toJsonValue(m_is_device_only_auth_supported));
    }
    if (m_key_credentials.size() > 0) {
        obj.insert(QString("keyCredentials"), ::OpenAPI::toJsonValue(m_key_credentials));
    }
    if (m_known_client_applications.size() > 0) {
        obj.insert(QString("knownClientApplications"), ::OpenAPI::toJsonValue(m_known_client_applications));
    }
    if (m_logout_url_isSet) {
        obj.insert(QString("logoutUrl"), ::OpenAPI::toJsonValue(m_logout_url));
    }
    if (m_oauth2_allow_implicit_flow_isSet) {
        obj.insert(QString("oauth2AllowImplicitFlow"), ::OpenAPI::toJsonValue(m_oauth2_allow_implicit_flow));
    }
    if (m_oauth2_allow_url_path_matching_isSet) {
        obj.insert(QString("oauth2AllowUrlPathMatching"), ::OpenAPI::toJsonValue(m_oauth2_allow_url_path_matching));
    }
    if (m_oauth2_permissions.size() > 0) {
        obj.insert(QString("oauth2Permissions"), ::OpenAPI::toJsonValue(m_oauth2_permissions));
    }
    if (m_oauth2_require_post_response_isSet) {
        obj.insert(QString("oauth2RequirePostResponse"), ::OpenAPI::toJsonValue(m_oauth2_require_post_response));
    }
    if (m_optional_claims.isSet()) {
        obj.insert(QString("optionalClaims"), ::OpenAPI::toJsonValue(m_optional_claims));
    }
    if (m_org_restrictions.size() > 0) {
        obj.insert(QString("orgRestrictions"), ::OpenAPI::toJsonValue(m_org_restrictions));
    }
    if (m_password_credentials.size() > 0) {
        obj.insert(QString("passwordCredentials"), ::OpenAPI::toJsonValue(m_password_credentials));
    }
    if (m_pre_authorized_applications.size() > 0) {
        obj.insert(QString("preAuthorizedApplications"), ::OpenAPI::toJsonValue(m_pre_authorized_applications));
    }
    if (m_public_client_isSet) {
        obj.insert(QString("publicClient"), ::OpenAPI::toJsonValue(m_public_client));
    }
    if (m_publisher_domain_isSet) {
        obj.insert(QString("publisherDomain"), ::OpenAPI::toJsonValue(m_publisher_domain));
    }
    if (m_reply_urls.size() > 0) {
        obj.insert(QString("replyUrls"), ::OpenAPI::toJsonValue(m_reply_urls));
    }
    if (m_required_resource_access.size() > 0) {
        obj.insert(QString("requiredResourceAccess"), ::OpenAPI::toJsonValue(m_required_resource_access));
    }
    if (m_saml_metadata_url_isSet) {
        obj.insert(QString("samlMetadataUrl"), ::OpenAPI::toJsonValue(m_saml_metadata_url));
    }
    if (m_sign_in_audience_isSet) {
        obj.insert(QString("signInAudience"), ::OpenAPI::toJsonValue(m_sign_in_audience));
    }
    if (m_www_homepage_isSet) {
        obj.insert(QString("wwwHomepage"), ::OpenAPI::toJsonValue(m_www_homepage));
    }
    return obj;
}

QString OAIApplicationCreateParameters::getDisplayName() const {
    return m_display_name;
}
void OAIApplicationCreateParameters::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApplicationCreateParameters::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApplicationCreateParameters::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIApplicationCreateParameters::getIdentifierUris() const {
    return m_identifier_uris;
}
void OAIApplicationCreateParameters::setIdentifierUris(const QList<QString> &identifier_uris) {
    m_identifier_uris = identifier_uris;
    m_identifier_uris_isSet = true;
}

bool OAIApplicationCreateParameters::is_identifier_uris_Set() const{
    return m_identifier_uris_isSet;
}

bool OAIApplicationCreateParameters::is_identifier_uris_Valid() const{
    return m_identifier_uris_isValid;
}

bool OAIApplicationCreateParameters::isAllowGuestsSignIn() const {
    return m_allow_guests_sign_in;
}
void OAIApplicationCreateParameters::setAllowGuestsSignIn(const bool &allow_guests_sign_in) {
    m_allow_guests_sign_in = allow_guests_sign_in;
    m_allow_guests_sign_in_isSet = true;
}

bool OAIApplicationCreateParameters::is_allow_guests_sign_in_Set() const{
    return m_allow_guests_sign_in_isSet;
}

bool OAIApplicationCreateParameters::is_allow_guests_sign_in_Valid() const{
    return m_allow_guests_sign_in_isValid;
}

bool OAIApplicationCreateParameters::isAllowPassthroughUsers() const {
    return m_allow_passthrough_users;
}
void OAIApplicationCreateParameters::setAllowPassthroughUsers(const bool &allow_passthrough_users) {
    m_allow_passthrough_users = allow_passthrough_users;
    m_allow_passthrough_users_isSet = true;
}

bool OAIApplicationCreateParameters::is_allow_passthrough_users_Set() const{
    return m_allow_passthrough_users_isSet;
}

bool OAIApplicationCreateParameters::is_allow_passthrough_users_Valid() const{
    return m_allow_passthrough_users_isValid;
}

QString OAIApplicationCreateParameters::getAppLogoUrl() const {
    return m_app_logo_url;
}
void OAIApplicationCreateParameters::setAppLogoUrl(const QString &app_logo_url) {
    m_app_logo_url = app_logo_url;
    m_app_logo_url_isSet = true;
}

bool OAIApplicationCreateParameters::is_app_logo_url_Set() const{
    return m_app_logo_url_isSet;
}

bool OAIApplicationCreateParameters::is_app_logo_url_Valid() const{
    return m_app_logo_url_isValid;
}

QList<QString> OAIApplicationCreateParameters::getAppPermissions() const {
    return m_app_permissions;
}
void OAIApplicationCreateParameters::setAppPermissions(const QList<QString> &app_permissions) {
    m_app_permissions = app_permissions;
    m_app_permissions_isSet = true;
}

bool OAIApplicationCreateParameters::is_app_permissions_Set() const{
    return m_app_permissions_isSet;
}

bool OAIApplicationCreateParameters::is_app_permissions_Valid() const{
    return m_app_permissions_isValid;
}

QList<OAIAppRole> OAIApplicationCreateParameters::getAppRoles() const {
    return m_app_roles;
}
void OAIApplicationCreateParameters::setAppRoles(const QList<OAIAppRole> &app_roles) {
    m_app_roles = app_roles;
    m_app_roles_isSet = true;
}

bool OAIApplicationCreateParameters::is_app_roles_Set() const{
    return m_app_roles_isSet;
}

bool OAIApplicationCreateParameters::is_app_roles_Valid() const{
    return m_app_roles_isValid;
}

bool OAIApplicationCreateParameters::isAvailableToOtherTenants() const {
    return m_available_to_other_tenants;
}
void OAIApplicationCreateParameters::setAvailableToOtherTenants(const bool &available_to_other_tenants) {
    m_available_to_other_tenants = available_to_other_tenants;
    m_available_to_other_tenants_isSet = true;
}

bool OAIApplicationCreateParameters::is_available_to_other_tenants_Set() const{
    return m_available_to_other_tenants_isSet;
}

bool OAIApplicationCreateParameters::is_available_to_other_tenants_Valid() const{
    return m_available_to_other_tenants_isValid;
}

QString OAIApplicationCreateParameters::getErrorUrl() const {
    return m_error_url;
}
void OAIApplicationCreateParameters::setErrorUrl(const QString &error_url) {
    m_error_url = error_url;
    m_error_url_isSet = true;
}

bool OAIApplicationCreateParameters::is_error_url_Set() const{
    return m_error_url_isSet;
}

bool OAIApplicationCreateParameters::is_error_url_Valid() const{
    return m_error_url_isValid;
}

OAIGroupMembershipClaims OAIApplicationCreateParameters::getGroupMembershipClaims() const {
    return m_group_membership_claims;
}
void OAIApplicationCreateParameters::setGroupMembershipClaims(const OAIGroupMembershipClaims &group_membership_claims) {
    m_group_membership_claims = group_membership_claims;
    m_group_membership_claims_isSet = true;
}

bool OAIApplicationCreateParameters::is_group_membership_claims_Set() const{
    return m_group_membership_claims_isSet;
}

bool OAIApplicationCreateParameters::is_group_membership_claims_Valid() const{
    return m_group_membership_claims_isValid;
}

QString OAIApplicationCreateParameters::getHomepage() const {
    return m_homepage;
}
void OAIApplicationCreateParameters::setHomepage(const QString &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAIApplicationCreateParameters::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAIApplicationCreateParameters::is_homepage_Valid() const{
    return m_homepage_isValid;
}

OAIInformationalUrl OAIApplicationCreateParameters::getInformationalUrls() const {
    return m_informational_urls;
}
void OAIApplicationCreateParameters::setInformationalUrls(const OAIInformationalUrl &informational_urls) {
    m_informational_urls = informational_urls;
    m_informational_urls_isSet = true;
}

bool OAIApplicationCreateParameters::is_informational_urls_Set() const{
    return m_informational_urls_isSet;
}

bool OAIApplicationCreateParameters::is_informational_urls_Valid() const{
    return m_informational_urls_isValid;
}

bool OAIApplicationCreateParameters::isIsDeviceOnlyAuthSupported() const {
    return m_is_device_only_auth_supported;
}
void OAIApplicationCreateParameters::setIsDeviceOnlyAuthSupported(const bool &is_device_only_auth_supported) {
    m_is_device_only_auth_supported = is_device_only_auth_supported;
    m_is_device_only_auth_supported_isSet = true;
}

bool OAIApplicationCreateParameters::is_is_device_only_auth_supported_Set() const{
    return m_is_device_only_auth_supported_isSet;
}

bool OAIApplicationCreateParameters::is_is_device_only_auth_supported_Valid() const{
    return m_is_device_only_auth_supported_isValid;
}

QList<OAIKeyCredential> OAIApplicationCreateParameters::getKeyCredentials() const {
    return m_key_credentials;
}
void OAIApplicationCreateParameters::setKeyCredentials(const QList<OAIKeyCredential> &key_credentials) {
    m_key_credentials = key_credentials;
    m_key_credentials_isSet = true;
}

bool OAIApplicationCreateParameters::is_key_credentials_Set() const{
    return m_key_credentials_isSet;
}

bool OAIApplicationCreateParameters::is_key_credentials_Valid() const{
    return m_key_credentials_isValid;
}

QList<QString> OAIApplicationCreateParameters::getKnownClientApplications() const {
    return m_known_client_applications;
}
void OAIApplicationCreateParameters::setKnownClientApplications(const QList<QString> &known_client_applications) {
    m_known_client_applications = known_client_applications;
    m_known_client_applications_isSet = true;
}

bool OAIApplicationCreateParameters::is_known_client_applications_Set() const{
    return m_known_client_applications_isSet;
}

bool OAIApplicationCreateParameters::is_known_client_applications_Valid() const{
    return m_known_client_applications_isValid;
}

QString OAIApplicationCreateParameters::getLogoutUrl() const {
    return m_logout_url;
}
void OAIApplicationCreateParameters::setLogoutUrl(const QString &logout_url) {
    m_logout_url = logout_url;
    m_logout_url_isSet = true;
}

bool OAIApplicationCreateParameters::is_logout_url_Set() const{
    return m_logout_url_isSet;
}

bool OAIApplicationCreateParameters::is_logout_url_Valid() const{
    return m_logout_url_isValid;
}

bool OAIApplicationCreateParameters::isOauth2AllowImplicitFlow() const {
    return m_oauth2_allow_implicit_flow;
}
void OAIApplicationCreateParameters::setOauth2AllowImplicitFlow(const bool &oauth2_allow_implicit_flow) {
    m_oauth2_allow_implicit_flow = oauth2_allow_implicit_flow;
    m_oauth2_allow_implicit_flow_isSet = true;
}

bool OAIApplicationCreateParameters::is_oauth2_allow_implicit_flow_Set() const{
    return m_oauth2_allow_implicit_flow_isSet;
}

bool OAIApplicationCreateParameters::is_oauth2_allow_implicit_flow_Valid() const{
    return m_oauth2_allow_implicit_flow_isValid;
}

bool OAIApplicationCreateParameters::isOauth2AllowUrlPathMatching() const {
    return m_oauth2_allow_url_path_matching;
}
void OAIApplicationCreateParameters::setOauth2AllowUrlPathMatching(const bool &oauth2_allow_url_path_matching) {
    m_oauth2_allow_url_path_matching = oauth2_allow_url_path_matching;
    m_oauth2_allow_url_path_matching_isSet = true;
}

bool OAIApplicationCreateParameters::is_oauth2_allow_url_path_matching_Set() const{
    return m_oauth2_allow_url_path_matching_isSet;
}

bool OAIApplicationCreateParameters::is_oauth2_allow_url_path_matching_Valid() const{
    return m_oauth2_allow_url_path_matching_isValid;
}

QList<OAIOAuth2Permission> OAIApplicationCreateParameters::getOauth2Permissions() const {
    return m_oauth2_permissions;
}
void OAIApplicationCreateParameters::setOauth2Permissions(const QList<OAIOAuth2Permission> &oauth2_permissions) {
    m_oauth2_permissions = oauth2_permissions;
    m_oauth2_permissions_isSet = true;
}

bool OAIApplicationCreateParameters::is_oauth2_permissions_Set() const{
    return m_oauth2_permissions_isSet;
}

bool OAIApplicationCreateParameters::is_oauth2_permissions_Valid() const{
    return m_oauth2_permissions_isValid;
}

bool OAIApplicationCreateParameters::isOauth2RequirePostResponse() const {
    return m_oauth2_require_post_response;
}
void OAIApplicationCreateParameters::setOauth2RequirePostResponse(const bool &oauth2_require_post_response) {
    m_oauth2_require_post_response = oauth2_require_post_response;
    m_oauth2_require_post_response_isSet = true;
}

bool OAIApplicationCreateParameters::is_oauth2_require_post_response_Set() const{
    return m_oauth2_require_post_response_isSet;
}

bool OAIApplicationCreateParameters::is_oauth2_require_post_response_Valid() const{
    return m_oauth2_require_post_response_isValid;
}

OAIOptionalClaims OAIApplicationCreateParameters::getOptionalClaims() const {
    return m_optional_claims;
}
void OAIApplicationCreateParameters::setOptionalClaims(const OAIOptionalClaims &optional_claims) {
    m_optional_claims = optional_claims;
    m_optional_claims_isSet = true;
}

bool OAIApplicationCreateParameters::is_optional_claims_Set() const{
    return m_optional_claims_isSet;
}

bool OAIApplicationCreateParameters::is_optional_claims_Valid() const{
    return m_optional_claims_isValid;
}

QList<QString> OAIApplicationCreateParameters::getOrgRestrictions() const {
    return m_org_restrictions;
}
void OAIApplicationCreateParameters::setOrgRestrictions(const QList<QString> &org_restrictions) {
    m_org_restrictions = org_restrictions;
    m_org_restrictions_isSet = true;
}

bool OAIApplicationCreateParameters::is_org_restrictions_Set() const{
    return m_org_restrictions_isSet;
}

bool OAIApplicationCreateParameters::is_org_restrictions_Valid() const{
    return m_org_restrictions_isValid;
}

QList<OAIPasswordCredential> OAIApplicationCreateParameters::getPasswordCredentials() const {
    return m_password_credentials;
}
void OAIApplicationCreateParameters::setPasswordCredentials(const QList<OAIPasswordCredential> &password_credentials) {
    m_password_credentials = password_credentials;
    m_password_credentials_isSet = true;
}

bool OAIApplicationCreateParameters::is_password_credentials_Set() const{
    return m_password_credentials_isSet;
}

bool OAIApplicationCreateParameters::is_password_credentials_Valid() const{
    return m_password_credentials_isValid;
}

QList<OAIPreAuthorizedApplication> OAIApplicationCreateParameters::getPreAuthorizedApplications() const {
    return m_pre_authorized_applications;
}
void OAIApplicationCreateParameters::setPreAuthorizedApplications(const QList<OAIPreAuthorizedApplication> &pre_authorized_applications) {
    m_pre_authorized_applications = pre_authorized_applications;
    m_pre_authorized_applications_isSet = true;
}

bool OAIApplicationCreateParameters::is_pre_authorized_applications_Set() const{
    return m_pre_authorized_applications_isSet;
}

bool OAIApplicationCreateParameters::is_pre_authorized_applications_Valid() const{
    return m_pre_authorized_applications_isValid;
}

bool OAIApplicationCreateParameters::isPublicClient() const {
    return m_public_client;
}
void OAIApplicationCreateParameters::setPublicClient(const bool &public_client) {
    m_public_client = public_client;
    m_public_client_isSet = true;
}

bool OAIApplicationCreateParameters::is_public_client_Set() const{
    return m_public_client_isSet;
}

bool OAIApplicationCreateParameters::is_public_client_Valid() const{
    return m_public_client_isValid;
}

QString OAIApplicationCreateParameters::getPublisherDomain() const {
    return m_publisher_domain;
}
void OAIApplicationCreateParameters::setPublisherDomain(const QString &publisher_domain) {
    m_publisher_domain = publisher_domain;
    m_publisher_domain_isSet = true;
}

bool OAIApplicationCreateParameters::is_publisher_domain_Set() const{
    return m_publisher_domain_isSet;
}

bool OAIApplicationCreateParameters::is_publisher_domain_Valid() const{
    return m_publisher_domain_isValid;
}

QList<QString> OAIApplicationCreateParameters::getReplyUrls() const {
    return m_reply_urls;
}
void OAIApplicationCreateParameters::setReplyUrls(const QList<QString> &reply_urls) {
    m_reply_urls = reply_urls;
    m_reply_urls_isSet = true;
}

bool OAIApplicationCreateParameters::is_reply_urls_Set() const{
    return m_reply_urls_isSet;
}

bool OAIApplicationCreateParameters::is_reply_urls_Valid() const{
    return m_reply_urls_isValid;
}

QList<OAIRequiredResourceAccess> OAIApplicationCreateParameters::getRequiredResourceAccess() const {
    return m_required_resource_access;
}
void OAIApplicationCreateParameters::setRequiredResourceAccess(const QList<OAIRequiredResourceAccess> &required_resource_access) {
    m_required_resource_access = required_resource_access;
    m_required_resource_access_isSet = true;
}

bool OAIApplicationCreateParameters::is_required_resource_access_Set() const{
    return m_required_resource_access_isSet;
}

bool OAIApplicationCreateParameters::is_required_resource_access_Valid() const{
    return m_required_resource_access_isValid;
}

QString OAIApplicationCreateParameters::getSamlMetadataUrl() const {
    return m_saml_metadata_url;
}
void OAIApplicationCreateParameters::setSamlMetadataUrl(const QString &saml_metadata_url) {
    m_saml_metadata_url = saml_metadata_url;
    m_saml_metadata_url_isSet = true;
}

bool OAIApplicationCreateParameters::is_saml_metadata_url_Set() const{
    return m_saml_metadata_url_isSet;
}

bool OAIApplicationCreateParameters::is_saml_metadata_url_Valid() const{
    return m_saml_metadata_url_isValid;
}

QString OAIApplicationCreateParameters::getSignInAudience() const {
    return m_sign_in_audience;
}
void OAIApplicationCreateParameters::setSignInAudience(const QString &sign_in_audience) {
    m_sign_in_audience = sign_in_audience;
    m_sign_in_audience_isSet = true;
}

bool OAIApplicationCreateParameters::is_sign_in_audience_Set() const{
    return m_sign_in_audience_isSet;
}

bool OAIApplicationCreateParameters::is_sign_in_audience_Valid() const{
    return m_sign_in_audience_isValid;
}

QString OAIApplicationCreateParameters::getWwwHomepage() const {
    return m_www_homepage;
}
void OAIApplicationCreateParameters::setWwwHomepage(const QString &www_homepage) {
    m_www_homepage = www_homepage;
    m_www_homepage_isSet = true;
}

bool OAIApplicationCreateParameters::is_www_homepage_Set() const{
    return m_www_homepage_isSet;
}

bool OAIApplicationCreateParameters::is_www_homepage_Valid() const{
    return m_www_homepage_isValid;
}

bool OAIApplicationCreateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_guests_sign_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_passthrough_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_to_other_tenants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_membership_claims.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_informational_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_device_only_auth_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_client_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_allow_implicit_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_allow_url_path_matching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_require_post_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_claims.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_authorized_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_resource_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_metadata_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_www_homepage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationCreateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && true;
}

} // namespace OpenAPI
