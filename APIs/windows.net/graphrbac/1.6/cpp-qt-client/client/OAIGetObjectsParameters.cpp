/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetObjectsParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetObjectsParameters::OAIGetObjectsParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetObjectsParameters::OAIGetObjectsParameters() {
    this->initializeModel();
}

OAIGetObjectsParameters::~OAIGetObjectsParameters() {}

void OAIGetObjectsParameters::initializeModel() {

    m_include_directory_object_references_isSet = false;
    m_include_directory_object_references_isValid = false;

    m_object_ids_isSet = false;
    m_object_ids_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIGetObjectsParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetObjectsParameters::fromJsonObject(QJsonObject json) {

    m_include_directory_object_references_isValid = ::OpenAPI::fromJsonValue(m_include_directory_object_references, json[QString("includeDirectoryObjectReferences")]);
    m_include_directory_object_references_isSet = !json[QString("includeDirectoryObjectReferences")].isNull() && m_include_directory_object_references_isValid;

    m_object_ids_isValid = ::OpenAPI::fromJsonValue(m_object_ids, json[QString("objectIds")]);
    m_object_ids_isSet = !json[QString("objectIds")].isNull() && m_object_ids_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIGetObjectsParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetObjectsParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_include_directory_object_references_isSet) {
        obj.insert(QString("includeDirectoryObjectReferences"), ::OpenAPI::toJsonValue(m_include_directory_object_references));
    }
    if (m_object_ids.size() > 0) {
        obj.insert(QString("objectIds"), ::OpenAPI::toJsonValue(m_object_ids));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

bool OAIGetObjectsParameters::isIncludeDirectoryObjectReferences() const {
    return m_include_directory_object_references;
}
void OAIGetObjectsParameters::setIncludeDirectoryObjectReferences(const bool &include_directory_object_references) {
    m_include_directory_object_references = include_directory_object_references;
    m_include_directory_object_references_isSet = true;
}

bool OAIGetObjectsParameters::is_include_directory_object_references_Set() const{
    return m_include_directory_object_references_isSet;
}

bool OAIGetObjectsParameters::is_include_directory_object_references_Valid() const{
    return m_include_directory_object_references_isValid;
}

QList<QString> OAIGetObjectsParameters::getObjectIds() const {
    return m_object_ids;
}
void OAIGetObjectsParameters::setObjectIds(const QList<QString> &object_ids) {
    m_object_ids = object_ids;
    m_object_ids_isSet = true;
}

bool OAIGetObjectsParameters::is_object_ids_Set() const{
    return m_object_ids_isSet;
}

bool OAIGetObjectsParameters::is_object_ids_Valid() const{
    return m_object_ids_isValid;
}

QList<QString> OAIGetObjectsParameters::getTypes() const {
    return m_types;
}
void OAIGetObjectsParameters::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIGetObjectsParameters::is_types_Set() const{
    return m_types_isSet;
}

bool OAIGetObjectsParameters::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIGetObjectsParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_directory_object_references_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetObjectsParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
