/**
 * GraphRbacManagementClient
 * The Graph RBAC Management Client
 *
 * The version of the OpenAPI document: 1.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequiredResourceAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequiredResourceAccess::OAIRequiredResourceAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequiredResourceAccess::OAIRequiredResourceAccess() {
    this->initializeModel();
}

OAIRequiredResourceAccess::~OAIRequiredResourceAccess() {}

void OAIRequiredResourceAccess::initializeModel() {

    m_resource_access_isSet = false;
    m_resource_access_isValid = false;

    m_resource_app_id_isSet = false;
    m_resource_app_id_isValid = false;
}

void OAIRequiredResourceAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequiredResourceAccess::fromJsonObject(QJsonObject json) {

    m_resource_access_isValid = ::OpenAPI::fromJsonValue(m_resource_access, json[QString("resourceAccess")]);
    m_resource_access_isSet = !json[QString("resourceAccess")].isNull() && m_resource_access_isValid;

    m_resource_app_id_isValid = ::OpenAPI::fromJsonValue(m_resource_app_id, json[QString("resourceAppId")]);
    m_resource_app_id_isSet = !json[QString("resourceAppId")].isNull() && m_resource_app_id_isValid;
}

QString OAIRequiredResourceAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequiredResourceAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_access.size() > 0) {
        obj.insert(QString("resourceAccess"), ::OpenAPI::toJsonValue(m_resource_access));
    }
    if (m_resource_app_id_isSet) {
        obj.insert(QString("resourceAppId"), ::OpenAPI::toJsonValue(m_resource_app_id));
    }
    return obj;
}

QList<OAIResourceAccess> OAIRequiredResourceAccess::getResourceAccess() const {
    return m_resource_access;
}
void OAIRequiredResourceAccess::setResourceAccess(const QList<OAIResourceAccess> &resource_access) {
    m_resource_access = resource_access;
    m_resource_access_isSet = true;
}

bool OAIRequiredResourceAccess::is_resource_access_Set() const{
    return m_resource_access_isSet;
}

bool OAIRequiredResourceAccess::is_resource_access_Valid() const{
    return m_resource_access_isValid;
}

QString OAIRequiredResourceAccess::getResourceAppId() const {
    return m_resource_app_id;
}
void OAIRequiredResourceAccess::setResourceAppId(const QString &resource_app_id) {
    m_resource_app_id = resource_app_id;
    m_resource_app_id_isSet = true;
}

bool OAIRequiredResourceAccess::is_resource_app_id_Set() const{
    return m_resource_app_id_isSet;
}

bool OAIRequiredResourceAccess::is_resource_app_id_Valid() const{
    return m_resource_app_id_isValid;
}

bool OAIRequiredResourceAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequiredResourceAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_access_isValid && true;
}

} // namespace OpenAPI
