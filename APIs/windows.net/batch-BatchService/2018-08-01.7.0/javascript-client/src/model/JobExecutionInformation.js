/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobSchedulingError from './JobSchedulingError';

/**
 * The JobExecutionInformation model module.
 * @module model/JobExecutionInformation
 * @version 2018-08-01.7.0
 */
class JobExecutionInformation {
    /**
     * Constructs a new <code>JobExecutionInformation</code>.
     * @alias module:model/JobExecutionInformation
     * @param startTime {Date} This is the time at which the job was created.
     */
    constructor(startTime) { 
        
        JobExecutionInformation.initialize(this, startTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startTime) { 
        obj['startTime'] = startTime;
    }

    /**
     * Constructs a <code>JobExecutionInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobExecutionInformation} obj Optional instance to populate.
     * @return {module:model/JobExecutionInformation} The populated <code>JobExecutionInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobExecutionInformation();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('poolId')) {
                obj['poolId'] = ApiClient.convertToType(data['poolId'], 'String');
            }
            if (data.hasOwnProperty('schedulingError')) {
                obj['schedulingError'] = JobSchedulingError.constructFromObject(data['schedulingError']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('terminateReason')) {
                obj['terminateReason'] = ApiClient.convertToType(data['terminateReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobExecutionInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobExecutionInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobExecutionInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['poolId'] && !(typeof data['poolId'] === 'string' || data['poolId'] instanceof String)) {
            throw new Error("Expected the field `poolId` to be a primitive type in the JSON string but got " + data['poolId']);
        }
        // validate the optional field `schedulingError`
        if (data['schedulingError']) { // data not null
          JobSchedulingError.validateJSON(data['schedulingError']);
        }
        // ensure the json data is a string
        if (data['terminateReason'] && !(typeof data['terminateReason'] === 'string' || data['terminateReason'] instanceof String)) {
            throw new Error("Expected the field `terminateReason` to be a primitive type in the JSON string but got " + data['terminateReason']);
        }

        return true;
    }


}

JobExecutionInformation.RequiredProperties = ["startTime"];

/**
 * This property is set only if the job is in the completed state.
 * @member {Date} endTime
 */
JobExecutionInformation.prototype['endTime'] = undefined;

/**
 * This element contains the actual pool where the job is assigned. When you get job details from the service, they also contain a poolInfo element, which contains the pool configuration data from when the job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the job ran on an auto pool, and this property contains the ID of that auto pool.
 * @member {String} poolId
 */
JobExecutionInformation.prototype['poolId'] = undefined;

/**
 * @member {module:model/JobSchedulingError} schedulingError
 */
JobExecutionInformation.prototype['schedulingError'] = undefined;

/**
 * This is the time at which the job was created.
 * @member {Date} startTime
 */
JobExecutionInformation.prototype['startTime'] = undefined;

/**
 * This property is set only if the job is in the completed state. If the Batch service terminates the job, it sets the reason as follows: JMComplete - the Job Manager task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the job reached its maxWallClockTime constraint. TerminateJobSchedule - the job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the job's onAllTasksComplete attribute is set to terminatejob, and all tasks in the job are complete. TaskFailed - the job's onTaskFailure attribute is set to performExitOptionsJobAction, and a task in the job failed with an exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in a call to the 'Terminate a job' operation.
 * @member {String} terminateReason
 */
JobExecutionInformation.prototype['terminateReason'] = undefined;






export default JobExecutionInformation;

