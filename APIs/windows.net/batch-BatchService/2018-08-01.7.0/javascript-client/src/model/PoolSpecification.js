/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationPackageReference from './ApplicationPackageReference';
import CertificateReference from './CertificateReference';
import CloudServiceConfiguration from './CloudServiceConfiguration';
import MetadataItem from './MetadataItem';
import NetworkConfiguration from './NetworkConfiguration';
import StartTask from './StartTask';
import TaskSchedulingPolicy from './TaskSchedulingPolicy';
import UserAccount from './UserAccount';
import VirtualMachineConfiguration from './VirtualMachineConfiguration';

/**
 * The PoolSpecification model module.
 * @module model/PoolSpecification
 * @version 2018-08-01.7.0
 */
class PoolSpecification {
    /**
     * Constructs a new <code>PoolSpecification</code>.
     * @alias module:model/PoolSpecification
     * @param vmSize {String} For information about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
     */
    constructor(vmSize) { 
        
        PoolSpecification.initialize(this, vmSize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, vmSize) { 
        obj['vmSize'] = vmSize;
    }

    /**
     * Constructs a <code>PoolSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PoolSpecification} obj Optional instance to populate.
     * @return {module:model/PoolSpecification} The populated <code>PoolSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PoolSpecification();

            if (data.hasOwnProperty('applicationLicenses')) {
                obj['applicationLicenses'] = ApiClient.convertToType(data['applicationLicenses'], ['String']);
            }
            if (data.hasOwnProperty('applicationPackageReferences')) {
                obj['applicationPackageReferences'] = ApiClient.convertToType(data['applicationPackageReferences'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('autoScaleEvaluationInterval')) {
                obj['autoScaleEvaluationInterval'] = ApiClient.convertToType(data['autoScaleEvaluationInterval'], 'String');
            }
            if (data.hasOwnProperty('autoScaleFormula')) {
                obj['autoScaleFormula'] = ApiClient.convertToType(data['autoScaleFormula'], 'String');
            }
            if (data.hasOwnProperty('certificateReferences')) {
                obj['certificateReferences'] = ApiClient.convertToType(data['certificateReferences'], [CertificateReference]);
            }
            if (data.hasOwnProperty('cloudServiceConfiguration')) {
                obj['cloudServiceConfiguration'] = CloudServiceConfiguration.constructFromObject(data['cloudServiceConfiguration']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enableAutoScale')) {
                obj['enableAutoScale'] = ApiClient.convertToType(data['enableAutoScale'], 'Boolean');
            }
            if (data.hasOwnProperty('enableInterNodeCommunication')) {
                obj['enableInterNodeCommunication'] = ApiClient.convertToType(data['enableInterNodeCommunication'], 'Boolean');
            }
            if (data.hasOwnProperty('maxTasksPerNode')) {
                obj['maxTasksPerNode'] = ApiClient.convertToType(data['maxTasksPerNode'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('networkConfiguration')) {
                obj['networkConfiguration'] = NetworkConfiguration.constructFromObject(data['networkConfiguration']);
            }
            if (data.hasOwnProperty('resizeTimeout')) {
                obj['resizeTimeout'] = ApiClient.convertToType(data['resizeTimeout'], 'String');
            }
            if (data.hasOwnProperty('startTask')) {
                obj['startTask'] = StartTask.constructFromObject(data['startTask']);
            }
            if (data.hasOwnProperty('targetDedicatedNodes')) {
                obj['targetDedicatedNodes'] = ApiClient.convertToType(data['targetDedicatedNodes'], 'Number');
            }
            if (data.hasOwnProperty('targetLowPriorityNodes')) {
                obj['targetLowPriorityNodes'] = ApiClient.convertToType(data['targetLowPriorityNodes'], 'Number');
            }
            if (data.hasOwnProperty('taskSchedulingPolicy')) {
                obj['taskSchedulingPolicy'] = TaskSchedulingPolicy.constructFromObject(data['taskSchedulingPolicy']);
            }
            if (data.hasOwnProperty('userAccounts')) {
                obj['userAccounts'] = ApiClient.convertToType(data['userAccounts'], [UserAccount]);
            }
            if (data.hasOwnProperty('virtualMachineConfiguration')) {
                obj['virtualMachineConfiguration'] = VirtualMachineConfiguration.constructFromObject(data['virtualMachineConfiguration']);
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PoolSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PoolSpecification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PoolSpecification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['applicationLicenses'])) {
            throw new Error("Expected the field `applicationLicenses` to be an array in the JSON data but got " + data['applicationLicenses']);
        }
        if (data['applicationPackageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackageReferences'])) {
                throw new Error("Expected the field `applicationPackageReferences` to be an array in the JSON data but got " + data['applicationPackageReferences']);
            }
            // validate the optional field `applicationPackageReferences` (array)
            for (const item of data['applicationPackageReferences']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['autoScaleEvaluationInterval'] && !(typeof data['autoScaleEvaluationInterval'] === 'string' || data['autoScaleEvaluationInterval'] instanceof String)) {
            throw new Error("Expected the field `autoScaleEvaluationInterval` to be a primitive type in the JSON string but got " + data['autoScaleEvaluationInterval']);
        }
        // ensure the json data is a string
        if (data['autoScaleFormula'] && !(typeof data['autoScaleFormula'] === 'string' || data['autoScaleFormula'] instanceof String)) {
            throw new Error("Expected the field `autoScaleFormula` to be a primitive type in the JSON string but got " + data['autoScaleFormula']);
        }
        if (data['certificateReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificateReferences'])) {
                throw new Error("Expected the field `certificateReferences` to be an array in the JSON data but got " + data['certificateReferences']);
            }
            // validate the optional field `certificateReferences` (array)
            for (const item of data['certificateReferences']) {
                CertificateReference.validateJSON(item);
            };
        }
        // validate the optional field `cloudServiceConfiguration`
        if (data['cloudServiceConfiguration']) { // data not null
          CloudServiceConfiguration.validateJSON(data['cloudServiceConfiguration']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // validate the optional field `networkConfiguration`
        if (data['networkConfiguration']) { // data not null
          NetworkConfiguration.validateJSON(data['networkConfiguration']);
        }
        // ensure the json data is a string
        if (data['resizeTimeout'] && !(typeof data['resizeTimeout'] === 'string' || data['resizeTimeout'] instanceof String)) {
            throw new Error("Expected the field `resizeTimeout` to be a primitive type in the JSON string but got " + data['resizeTimeout']);
        }
        // validate the optional field `startTask`
        if (data['startTask']) { // data not null
          StartTask.validateJSON(data['startTask']);
        }
        // validate the optional field `taskSchedulingPolicy`
        if (data['taskSchedulingPolicy']) { // data not null
          TaskSchedulingPolicy.validateJSON(data['taskSchedulingPolicy']);
        }
        if (data['userAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userAccounts'])) {
                throw new Error("Expected the field `userAccounts` to be an array in the JSON data but got " + data['userAccounts']);
            }
            // validate the optional field `userAccounts` (array)
            for (const item of data['userAccounts']) {
                UserAccount.validateJSON(item);
            };
        }
        // validate the optional field `virtualMachineConfiguration`
        if (data['virtualMachineConfiguration']) { // data not null
          VirtualMachineConfiguration.validateJSON(data['virtualMachineConfiguration']);
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }

        return true;
    }


}

PoolSpecification.RequiredProperties = ["vmSize"];

/**
 * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail. The permitted licenses available on the pool are 'maya', 'vray', '3dsmax', 'arnold'. An additional charge applies for each application license added to the pool.
 * @member {Array.<String>} applicationLicenses
 */
PoolSpecification.prototype['applicationLicenses'] = undefined;

/**
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackageReferences
 */
PoolSpecification.prototype['applicationPackageReferences'] = undefined;

/**
 * The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
 * @member {String} autoScaleEvaluationInterval
 */
PoolSpecification.prototype['autoScaleEvaluationInterval'] = undefined;

/**
 * This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information.
 * @member {String} autoScaleFormula
 */
PoolSpecification.prototype['autoScaleFormula'] = undefined;

/**
 * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
 * @member {Array.<module:model/CertificateReference>} certificateReferences
 */
PoolSpecification.prototype['certificateReferences'] = undefined;

/**
 * @member {module:model/CloudServiceConfiguration} cloudServiceConfiguration
 */
PoolSpecification.prototype['cloudServiceConfiguration'] = undefined;

/**
 * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
 * @member {String} displayName
 */
PoolSpecification.prototype['displayName'] = undefined;

/**
 * If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula element is required. The pool automatically resizes according to the formula. The default value is false.
 * @member {Boolean} enableAutoScale
 */
PoolSpecification.prototype['enableAutoScale'] = undefined;

/**
 * Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false.
 * @member {Boolean} enableInterNodeCommunication
 */
PoolSpecification.prototype['enableInterNodeCommunication'] = undefined;

/**
 * The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).
 * @member {Number} maxTasksPerNode
 */
PoolSpecification.prototype['maxTasksPerNode'] = undefined;

/**
 * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
PoolSpecification.prototype['metadata'] = undefined;

/**
 * @member {module:model/NetworkConfiguration} networkConfiguration
 */
PoolSpecification.prototype['networkConfiguration'] = undefined;

/**
 * This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
 * @member {String} resizeTimeout
 */
PoolSpecification.prototype['resizeTimeout'] = undefined;

/**
 * @member {module:model/StartTask} startTask
 */
PoolSpecification.prototype['startTask'] = undefined;

/**
 * This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
 * @member {Number} targetDedicatedNodes
 */
PoolSpecification.prototype['targetDedicatedNodes'] = undefined;

/**
 * This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
 * @member {Number} targetLowPriorityNodes
 */
PoolSpecification.prototype['targetLowPriorityNodes'] = undefined;

/**
 * @member {module:model/TaskSchedulingPolicy} taskSchedulingPolicy
 */
PoolSpecification.prototype['taskSchedulingPolicy'] = undefined;

/**
 * @member {Array.<module:model/UserAccount>} userAccounts
 */
PoolSpecification.prototype['userAccounts'] = undefined;

/**
 * @member {module:model/VirtualMachineConfiguration} virtualMachineConfiguration
 */
PoolSpecification.prototype['virtualMachineConfiguration'] = undefined;

/**
 * For information about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
 * @member {String} vmSize
 */
PoolSpecification.prototype['vmSize'] = undefined;






export default PoolSpecification;

