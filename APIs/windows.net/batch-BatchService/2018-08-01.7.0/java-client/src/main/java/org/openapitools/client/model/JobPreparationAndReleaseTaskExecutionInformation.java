/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JobPreparationTaskExecutionInformation;
import org.openapitools.client.model.JobReleaseTaskExecutionInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobPreparationAndReleaseTaskExecutionInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:50.848294-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobPreparationAndReleaseTaskExecutionInformation {
  public static final String SERIALIZED_NAME_JOB_PREPARATION_TASK_EXECUTION_INFO = "jobPreparationTaskExecutionInfo";
  @SerializedName(SERIALIZED_NAME_JOB_PREPARATION_TASK_EXECUTION_INFO)
  private JobPreparationTaskExecutionInformation jobPreparationTaskExecutionInfo;

  public static final String SERIALIZED_NAME_JOB_RELEASE_TASK_EXECUTION_INFO = "jobReleaseTaskExecutionInfo";
  @SerializedName(SERIALIZED_NAME_JOB_RELEASE_TASK_EXECUTION_INFO)
  private JobReleaseTaskExecutionInformation jobReleaseTaskExecutionInfo;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NODE_URL = "nodeUrl";
  @SerializedName(SERIALIZED_NAME_NODE_URL)
  private String nodeUrl;

  public static final String SERIALIZED_NAME_POOL_ID = "poolId";
  @SerializedName(SERIALIZED_NAME_POOL_ID)
  private String poolId;

  public JobPreparationAndReleaseTaskExecutionInformation() {
  }

  public JobPreparationAndReleaseTaskExecutionInformation jobPreparationTaskExecutionInfo(JobPreparationTaskExecutionInformation jobPreparationTaskExecutionInfo) {
    this.jobPreparationTaskExecutionInfo = jobPreparationTaskExecutionInfo;
    return this;
  }

  /**
   * Get jobPreparationTaskExecutionInfo
   * @return jobPreparationTaskExecutionInfo
   */
  @javax.annotation.Nullable
  public JobPreparationTaskExecutionInformation getJobPreparationTaskExecutionInfo() {
    return jobPreparationTaskExecutionInfo;
  }

  public void setJobPreparationTaskExecutionInfo(JobPreparationTaskExecutionInformation jobPreparationTaskExecutionInfo) {
    this.jobPreparationTaskExecutionInfo = jobPreparationTaskExecutionInfo;
  }


  public JobPreparationAndReleaseTaskExecutionInformation jobReleaseTaskExecutionInfo(JobReleaseTaskExecutionInformation jobReleaseTaskExecutionInfo) {
    this.jobReleaseTaskExecutionInfo = jobReleaseTaskExecutionInfo;
    return this;
  }

  /**
   * Get jobReleaseTaskExecutionInfo
   * @return jobReleaseTaskExecutionInfo
   */
  @javax.annotation.Nullable
  public JobReleaseTaskExecutionInformation getJobReleaseTaskExecutionInfo() {
    return jobReleaseTaskExecutionInfo;
  }

  public void setJobReleaseTaskExecutionInfo(JobReleaseTaskExecutionInformation jobReleaseTaskExecutionInfo) {
    this.jobReleaseTaskExecutionInfo = jobReleaseTaskExecutionInfo;
  }


  public JobPreparationAndReleaseTaskExecutionInformation nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public JobPreparationAndReleaseTaskExecutionInformation nodeUrl(String nodeUrl) {
    this.nodeUrl = nodeUrl;
    return this;
  }

  /**
   * Get nodeUrl
   * @return nodeUrl
   */
  @javax.annotation.Nullable
  public String getNodeUrl() {
    return nodeUrl;
  }

  public void setNodeUrl(String nodeUrl) {
    this.nodeUrl = nodeUrl;
  }


  public JobPreparationAndReleaseTaskExecutionInformation poolId(String poolId) {
    this.poolId = poolId;
    return this;
  }

  /**
   * Get poolId
   * @return poolId
   */
  @javax.annotation.Nullable
  public String getPoolId() {
    return poolId;
  }

  public void setPoolId(String poolId) {
    this.poolId = poolId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobPreparationAndReleaseTaskExecutionInformation jobPreparationAndReleaseTaskExecutionInformation = (JobPreparationAndReleaseTaskExecutionInformation) o;
    return Objects.equals(this.jobPreparationTaskExecutionInfo, jobPreparationAndReleaseTaskExecutionInformation.jobPreparationTaskExecutionInfo) &&
        Objects.equals(this.jobReleaseTaskExecutionInfo, jobPreparationAndReleaseTaskExecutionInformation.jobReleaseTaskExecutionInfo) &&
        Objects.equals(this.nodeId, jobPreparationAndReleaseTaskExecutionInformation.nodeId) &&
        Objects.equals(this.nodeUrl, jobPreparationAndReleaseTaskExecutionInformation.nodeUrl) &&
        Objects.equals(this.poolId, jobPreparationAndReleaseTaskExecutionInformation.poolId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobPreparationTaskExecutionInfo, jobReleaseTaskExecutionInfo, nodeId, nodeUrl, poolId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobPreparationAndReleaseTaskExecutionInformation {\n");
    sb.append("    jobPreparationTaskExecutionInfo: ").append(toIndentedString(jobPreparationTaskExecutionInfo)).append("\n");
    sb.append("    jobReleaseTaskExecutionInfo: ").append(toIndentedString(jobReleaseTaskExecutionInfo)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeUrl: ").append(toIndentedString(nodeUrl)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobPreparationTaskExecutionInfo");
    openapiFields.add("jobReleaseTaskExecutionInfo");
    openapiFields.add("nodeId");
    openapiFields.add("nodeUrl");
    openapiFields.add("poolId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobPreparationAndReleaseTaskExecutionInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobPreparationAndReleaseTaskExecutionInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobPreparationAndReleaseTaskExecutionInformation is not found in the empty JSON string", JobPreparationAndReleaseTaskExecutionInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobPreparationAndReleaseTaskExecutionInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobPreparationAndReleaseTaskExecutionInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `jobPreparationTaskExecutionInfo`
      if (jsonObj.get("jobPreparationTaskExecutionInfo") != null && !jsonObj.get("jobPreparationTaskExecutionInfo").isJsonNull()) {
        JobPreparationTaskExecutionInformation.validateJsonElement(jsonObj.get("jobPreparationTaskExecutionInfo"));
      }
      // validate the optional field `jobReleaseTaskExecutionInfo`
      if (jsonObj.get("jobReleaseTaskExecutionInfo") != null && !jsonObj.get("jobReleaseTaskExecutionInfo").isJsonNull()) {
        JobReleaseTaskExecutionInformation.validateJsonElement(jsonObj.get("jobReleaseTaskExecutionInfo"));
      }
      if ((jsonObj.get("nodeId") != null && !jsonObj.get("nodeId").isJsonNull()) && !jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      if ((jsonObj.get("nodeUrl") != null && !jsonObj.get("nodeUrl").isJsonNull()) && !jsonObj.get("nodeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeUrl").toString()));
      }
      if ((jsonObj.get("poolId") != null && !jsonObj.get("poolId").isJsonNull()) && !jsonObj.get("poolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobPreparationAndReleaseTaskExecutionInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobPreparationAndReleaseTaskExecutionInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobPreparationAndReleaseTaskExecutionInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobPreparationAndReleaseTaskExecutionInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<JobPreparationAndReleaseTaskExecutionInformation>() {
           @Override
           public void write(JsonWriter out, JobPreparationAndReleaseTaskExecutionInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobPreparationAndReleaseTaskExecutionInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobPreparationAndReleaseTaskExecutionInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobPreparationAndReleaseTaskExecutionInformation
   * @throws IOException if the JSON string is invalid with respect to JobPreparationAndReleaseTaskExecutionInformation
   */
  public static JobPreparationAndReleaseTaskExecutionInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobPreparationAndReleaseTaskExecutionInformation.class);
  }

  /**
   * Convert an instance of JobPreparationAndReleaseTaskExecutionInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

