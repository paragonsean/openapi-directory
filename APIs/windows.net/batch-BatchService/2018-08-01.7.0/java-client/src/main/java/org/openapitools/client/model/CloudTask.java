/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AffinityInformation;
import org.openapitools.client.model.ApplicationPackageReference;
import org.openapitools.client.model.AuthenticationTokenSettings;
import org.openapitools.client.model.ComputeNodeInformation;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.ExitConditions;
import org.openapitools.client.model.MultiInstanceSettings;
import org.openapitools.client.model.OutputFile;
import org.openapitools.client.model.ResourceFile;
import org.openapitools.client.model.TaskConstraints;
import org.openapitools.client.model.TaskContainerSettings;
import org.openapitools.client.model.TaskDependencies;
import org.openapitools.client.model.TaskExecutionInformation;
import org.openapitools.client.model.TaskState;
import org.openapitools.client.model.TaskStatistics;
import org.openapitools.client.model.UserIdentity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:50.848294-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudTask {
  public static final String SERIALIZED_NAME_AFFINITY_INFO = "affinityInfo";
  @SerializedName(SERIALIZED_NAME_AFFINITY_INFO)
  private AffinityInformation affinityInfo;

  public static final String SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES = "applicationPackageReferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES)
  private List<ApplicationPackageReference> applicationPackageReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHENTICATION_TOKEN_SETTINGS = "authenticationTokenSettings";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TOKEN_SETTINGS)
  private AuthenticationTokenSettings authenticationTokenSettings;

  public static final String SERIALIZED_NAME_COMMAND_LINE = "commandLine";
  @SerializedName(SERIALIZED_NAME_COMMAND_LINE)
  private String commandLine;

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private TaskConstraints constraints;

  public static final String SERIALIZED_NAME_CONTAINER_SETTINGS = "containerSettings";
  @SerializedName(SERIALIZED_NAME_CONTAINER_SETTINGS)
  private TaskContainerSettings containerSettings;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DEPENDS_ON = "dependsOn";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private TaskDependencies dependsOn;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_E_TAG = "eTag";
  @SerializedName(SERIALIZED_NAME_E_TAG)
  private String eTag;

  public static final String SERIALIZED_NAME_ENVIRONMENT_SETTINGS = "environmentSettings";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> environmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXECUTION_INFO = "executionInfo";
  @SerializedName(SERIALIZED_NAME_EXECUTION_INFO)
  private TaskExecutionInformation executionInfo;

  public static final String SERIALIZED_NAME_EXIT_CONDITIONS = "exitConditions";
  @SerializedName(SERIALIZED_NAME_EXIT_CONDITIONS)
  private ExitConditions exitConditions;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_MULTI_INSTANCE_SETTINGS = "multiInstanceSettings";
  @SerializedName(SERIALIZED_NAME_MULTI_INSTANCE_SETTINGS)
  private MultiInstanceSettings multiInstanceSettings;

  public static final String SERIALIZED_NAME_NODE_INFO = "nodeInfo";
  @SerializedName(SERIALIZED_NAME_NODE_INFO)
  private ComputeNodeInformation nodeInfo;

  public static final String SERIALIZED_NAME_OUTPUT_FILES = "outputFiles";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILES)
  private List<OutputFile> outputFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREVIOUS_STATE = "previousState";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE)
  private TaskState previousState;

  public static final String SERIALIZED_NAME_PREVIOUS_STATE_TRANSITION_TIME = "previousStateTransitionTime";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE_TRANSITION_TIME)
  private OffsetDateTime previousStateTransitionTime;

  public static final String SERIALIZED_NAME_RESOURCE_FILES = "resourceFiles";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILES)
  private List<ResourceFile> resourceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private TaskState state;

  public static final String SERIALIZED_NAME_STATE_TRANSITION_TIME = "stateTransitionTime";
  @SerializedName(SERIALIZED_NAME_STATE_TRANSITION_TIME)
  private OffsetDateTime stateTransitionTime;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private TaskStatistics stats;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_IDENTITY = "userIdentity";
  @SerializedName(SERIALIZED_NAME_USER_IDENTITY)
  private UserIdentity userIdentity;

  public CloudTask() {
  }

  public CloudTask affinityInfo(AffinityInformation affinityInfo) {
    this.affinityInfo = affinityInfo;
    return this;
  }

  /**
   * Get affinityInfo
   * @return affinityInfo
   */
  @javax.annotation.Nullable
  public AffinityInformation getAffinityInfo() {
    return affinityInfo;
  }

  public void setAffinityInfo(AffinityInformation affinityInfo) {
    this.affinityInfo = affinityInfo;
  }


  public CloudTask applicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
    return this;
  }

  public CloudTask addApplicationPackageReferencesItem(ApplicationPackageReference applicationPackageReferencesItem) {
    if (this.applicationPackageReferences == null) {
      this.applicationPackageReferences = new ArrayList<>();
    }
    this.applicationPackageReferences.add(applicationPackageReferencesItem);
    return this;
  }

  /**
   * Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.
   * @return applicationPackageReferences
   */
  @javax.annotation.Nullable
  public List<ApplicationPackageReference> getApplicationPackageReferences() {
    return applicationPackageReferences;
  }

  public void setApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
  }


  public CloudTask authenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings) {
    this.authenticationTokenSettings = authenticationTokenSettings;
    return this;
  }

  /**
   * Get authenticationTokenSettings
   * @return authenticationTokenSettings
   */
  @javax.annotation.Nullable
  public AuthenticationTokenSettings getAuthenticationTokenSettings() {
    return authenticationTokenSettings;
  }

  public void setAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings) {
    this.authenticationTokenSettings = authenticationTokenSettings;
  }


  public CloudTask commandLine(String commandLine) {
    this.commandLine = commandLine;
    return this;
  }

  /**
   * For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \&quot;cmd /c MyCommand\&quot; in Windows or \&quot;/bin/sh -c MyCommand\&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   * @return commandLine
   */
  @javax.annotation.Nullable
  public String getCommandLine() {
    return commandLine;
  }

  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public CloudTask constraints(TaskConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public TaskConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(TaskConstraints constraints) {
    this.constraints = constraints;
  }


  public CloudTask containerSettings(TaskContainerSettings containerSettings) {
    this.containerSettings = containerSettings;
    return this;
  }

  /**
   * Get containerSettings
   * @return containerSettings
   */
  @javax.annotation.Nullable
  public TaskContainerSettings getContainerSettings() {
    return containerSettings;
  }

  public void setContainerSettings(TaskContainerSettings containerSettings) {
    this.containerSettings = containerSettings;
  }


  public CloudTask creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public CloudTask dependsOn(TaskDependencies dependsOn) {
    this.dependsOn = dependsOn;
    return this;
  }

  /**
   * Get dependsOn
   * @return dependsOn
   */
  @javax.annotation.Nullable
  public TaskDependencies getDependsOn() {
    return dependsOn;
  }

  public void setDependsOn(TaskDependencies dependsOn) {
    this.dependsOn = dependsOn;
  }


  public CloudTask displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CloudTask eTag(String eTag) {
    this.eTag = eTag;
    return this;
  }

  /**
   * This is an opaque string. You can use it to detect whether the task has changed between requests. In particular, you can be pass the ETag when updating a task to specify that your changes should take effect only if nobody else has modified the task in the meantime.
   * @return eTag
   */
  @javax.annotation.Nullable
  public String geteTag() {
    return eTag;
  }

  public void seteTag(String eTag) {
    this.eTag = eTag;
  }


  public CloudTask environmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
    return this;
  }

  public CloudTask addEnvironmentSettingsItem(EnvironmentSetting environmentSettingsItem) {
    if (this.environmentSettings == null) {
      this.environmentSettings = new ArrayList<>();
    }
    this.environmentSettings.add(environmentSettingsItem);
    return this;
  }

  /**
   * Get environmentSettings
   * @return environmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getEnvironmentSettings() {
    return environmentSettings;
  }

  public void setEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
  }


  public CloudTask executionInfo(TaskExecutionInformation executionInfo) {
    this.executionInfo = executionInfo;
    return this;
  }

  /**
   * Get executionInfo
   * @return executionInfo
   */
  @javax.annotation.Nullable
  public TaskExecutionInformation getExecutionInfo() {
    return executionInfo;
  }

  public void setExecutionInfo(TaskExecutionInformation executionInfo) {
    this.executionInfo = executionInfo;
  }


  public CloudTask exitConditions(ExitConditions exitConditions) {
    this.exitConditions = exitConditions;
    return this;
  }

  /**
   * Get exitConditions
   * @return exitConditions
   */
  @javax.annotation.Nullable
  public ExitConditions getExitConditions() {
    return exitConditions;
  }

  public void setExitConditions(ExitConditions exitConditions) {
    this.exitConditions = exitConditions;
  }


  public CloudTask id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CloudTask lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public CloudTask multiInstanceSettings(MultiInstanceSettings multiInstanceSettings) {
    this.multiInstanceSettings = multiInstanceSettings;
    return this;
  }

  /**
   * Get multiInstanceSettings
   * @return multiInstanceSettings
   */
  @javax.annotation.Nullable
  public MultiInstanceSettings getMultiInstanceSettings() {
    return multiInstanceSettings;
  }

  public void setMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings) {
    this.multiInstanceSettings = multiInstanceSettings;
  }


  public CloudTask nodeInfo(ComputeNodeInformation nodeInfo) {
    this.nodeInfo = nodeInfo;
    return this;
  }

  /**
   * Get nodeInfo
   * @return nodeInfo
   */
  @javax.annotation.Nullable
  public ComputeNodeInformation getNodeInfo() {
    return nodeInfo;
  }

  public void setNodeInfo(ComputeNodeInformation nodeInfo) {
    this.nodeInfo = nodeInfo;
  }


  public CloudTask outputFiles(List<OutputFile> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  public CloudTask addOutputFilesItem(OutputFile outputFilesItem) {
    if (this.outputFiles == null) {
      this.outputFiles = new ArrayList<>();
    }
    this.outputFiles.add(outputFilesItem);
    return this;
  }

  /**
   * For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
   * @return outputFiles
   */
  @javax.annotation.Nullable
  public List<OutputFile> getOutputFiles() {
    return outputFiles;
  }

  public void setOutputFiles(List<OutputFile> outputFiles) {
    this.outputFiles = outputFiles;
  }


  public CloudTask previousState(TaskState previousState) {
    this.previousState = previousState;
    return this;
  }

  /**
   * Get previousState
   * @return previousState
   */
  @javax.annotation.Nullable
  public TaskState getPreviousState() {
    return previousState;
  }

  public void setPreviousState(TaskState previousState) {
    this.previousState = previousState;
  }


  public CloudTask previousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
    this.previousStateTransitionTime = previousStateTransitionTime;
    return this;
  }

  /**
   * This property is not set if the task is in its initial Active state.
   * @return previousStateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreviousStateTransitionTime() {
    return previousStateTransitionTime;
  }

  public void setPreviousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
    this.previousStateTransitionTime = previousStateTransitionTime;
  }


  public CloudTask resourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
    return this;
  }

  public CloudTask addResourceFilesItem(ResourceFile resourceFilesItem) {
    if (this.resourceFiles == null) {
      this.resourceFiles = new ArrayList<>();
    }
    this.resourceFiles.add(resourceFilesItem);
    return this;
  }

  /**
   * For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
   * @return resourceFiles
   */
  @javax.annotation.Nullable
  public List<ResourceFile> getResourceFiles() {
    return resourceFiles;
  }

  public void setResourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
  }


  public CloudTask state(TaskState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public TaskState getState() {
    return state;
  }

  public void setState(TaskState state) {
    this.state = state;
  }


  public CloudTask stateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
    return this;
  }

  /**
   * Get stateTransitionTime
   * @return stateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateTransitionTime() {
    return stateTransitionTime;
  }

  public void setStateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
  }


  public CloudTask stats(TaskStatistics stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public TaskStatistics getStats() {
    return stats;
  }

  public void setStats(TaskStatistics stats) {
    this.stats = stats;
  }


  public CloudTask url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CloudTask userIdentity(UserIdentity userIdentity) {
    this.userIdentity = userIdentity;
    return this;
  }

  /**
   * Get userIdentity
   * @return userIdentity
   */
  @javax.annotation.Nullable
  public UserIdentity getUserIdentity() {
    return userIdentity;
  }

  public void setUserIdentity(UserIdentity userIdentity) {
    this.userIdentity = userIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudTask cloudTask = (CloudTask) o;
    return Objects.equals(this.affinityInfo, cloudTask.affinityInfo) &&
        Objects.equals(this.applicationPackageReferences, cloudTask.applicationPackageReferences) &&
        Objects.equals(this.authenticationTokenSettings, cloudTask.authenticationTokenSettings) &&
        Objects.equals(this.commandLine, cloudTask.commandLine) &&
        Objects.equals(this.constraints, cloudTask.constraints) &&
        Objects.equals(this.containerSettings, cloudTask.containerSettings) &&
        Objects.equals(this.creationTime, cloudTask.creationTime) &&
        Objects.equals(this.dependsOn, cloudTask.dependsOn) &&
        Objects.equals(this.displayName, cloudTask.displayName) &&
        Objects.equals(this.eTag, cloudTask.eTag) &&
        Objects.equals(this.environmentSettings, cloudTask.environmentSettings) &&
        Objects.equals(this.executionInfo, cloudTask.executionInfo) &&
        Objects.equals(this.exitConditions, cloudTask.exitConditions) &&
        Objects.equals(this.id, cloudTask.id) &&
        Objects.equals(this.lastModified, cloudTask.lastModified) &&
        Objects.equals(this.multiInstanceSettings, cloudTask.multiInstanceSettings) &&
        Objects.equals(this.nodeInfo, cloudTask.nodeInfo) &&
        Objects.equals(this.outputFiles, cloudTask.outputFiles) &&
        Objects.equals(this.previousState, cloudTask.previousState) &&
        Objects.equals(this.previousStateTransitionTime, cloudTask.previousStateTransitionTime) &&
        Objects.equals(this.resourceFiles, cloudTask.resourceFiles) &&
        Objects.equals(this.state, cloudTask.state) &&
        Objects.equals(this.stateTransitionTime, cloudTask.stateTransitionTime) &&
        Objects.equals(this.stats, cloudTask.stats) &&
        Objects.equals(this.url, cloudTask.url) &&
        Objects.equals(this.userIdentity, cloudTask.userIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affinityInfo, applicationPackageReferences, authenticationTokenSettings, commandLine, constraints, containerSettings, creationTime, dependsOn, displayName, eTag, environmentSettings, executionInfo, exitConditions, id, lastModified, multiInstanceSettings, nodeInfo, outputFiles, previousState, previousStateTransitionTime, resourceFiles, state, stateTransitionTime, stats, url, userIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudTask {\n");
    sb.append("    affinityInfo: ").append(toIndentedString(affinityInfo)).append("\n");
    sb.append("    applicationPackageReferences: ").append(toIndentedString(applicationPackageReferences)).append("\n");
    sb.append("    authenticationTokenSettings: ").append(toIndentedString(authenticationTokenSettings)).append("\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    containerSettings: ").append(toIndentedString(containerSettings)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eTag: ").append(toIndentedString(eTag)).append("\n");
    sb.append("    environmentSettings: ").append(toIndentedString(environmentSettings)).append("\n");
    sb.append("    executionInfo: ").append(toIndentedString(executionInfo)).append("\n");
    sb.append("    exitConditions: ").append(toIndentedString(exitConditions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    multiInstanceSettings: ").append(toIndentedString(multiInstanceSettings)).append("\n");
    sb.append("    nodeInfo: ").append(toIndentedString(nodeInfo)).append("\n");
    sb.append("    outputFiles: ").append(toIndentedString(outputFiles)).append("\n");
    sb.append("    previousState: ").append(toIndentedString(previousState)).append("\n");
    sb.append("    previousStateTransitionTime: ").append(toIndentedString(previousStateTransitionTime)).append("\n");
    sb.append("    resourceFiles: ").append(toIndentedString(resourceFiles)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateTransitionTime: ").append(toIndentedString(stateTransitionTime)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userIdentity: ").append(toIndentedString(userIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affinityInfo");
    openapiFields.add("applicationPackageReferences");
    openapiFields.add("authenticationTokenSettings");
    openapiFields.add("commandLine");
    openapiFields.add("constraints");
    openapiFields.add("containerSettings");
    openapiFields.add("creationTime");
    openapiFields.add("dependsOn");
    openapiFields.add("displayName");
    openapiFields.add("eTag");
    openapiFields.add("environmentSettings");
    openapiFields.add("executionInfo");
    openapiFields.add("exitConditions");
    openapiFields.add("id");
    openapiFields.add("lastModified");
    openapiFields.add("multiInstanceSettings");
    openapiFields.add("nodeInfo");
    openapiFields.add("outputFiles");
    openapiFields.add("previousState");
    openapiFields.add("previousStateTransitionTime");
    openapiFields.add("resourceFiles");
    openapiFields.add("state");
    openapiFields.add("stateTransitionTime");
    openapiFields.add("stats");
    openapiFields.add("url");
    openapiFields.add("userIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudTask is not found in the empty JSON string", CloudTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `affinityInfo`
      if (jsonObj.get("affinityInfo") != null && !jsonObj.get("affinityInfo").isJsonNull()) {
        AffinityInformation.validateJsonElement(jsonObj.get("affinityInfo"));
      }
      if (jsonObj.get("applicationPackageReferences") != null && !jsonObj.get("applicationPackageReferences").isJsonNull()) {
        JsonArray jsonArrayapplicationPackageReferences = jsonObj.getAsJsonArray("applicationPackageReferences");
        if (jsonArrayapplicationPackageReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicationPackageReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicationPackageReferences` to be an array in the JSON string but got `%s`", jsonObj.get("applicationPackageReferences").toString()));
          }

          // validate the optional field `applicationPackageReferences` (array)
          for (int i = 0; i < jsonArrayapplicationPackageReferences.size(); i++) {
            ApplicationPackageReference.validateJsonElement(jsonArrayapplicationPackageReferences.get(i));
          };
        }
      }
      // validate the optional field `authenticationTokenSettings`
      if (jsonObj.get("authenticationTokenSettings") != null && !jsonObj.get("authenticationTokenSettings").isJsonNull()) {
        AuthenticationTokenSettings.validateJsonElement(jsonObj.get("authenticationTokenSettings"));
      }
      if ((jsonObj.get("commandLine") != null && !jsonObj.get("commandLine").isJsonNull()) && !jsonObj.get("commandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandLine").toString()));
      }
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        TaskConstraints.validateJsonElement(jsonObj.get("constraints"));
      }
      // validate the optional field `containerSettings`
      if (jsonObj.get("containerSettings") != null && !jsonObj.get("containerSettings").isJsonNull()) {
        TaskContainerSettings.validateJsonElement(jsonObj.get("containerSettings"));
      }
      // validate the optional field `dependsOn`
      if (jsonObj.get("dependsOn") != null && !jsonObj.get("dependsOn").isJsonNull()) {
        TaskDependencies.validateJsonElement(jsonObj.get("dependsOn"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("eTag") != null && !jsonObj.get("eTag").isJsonNull()) && !jsonObj.get("eTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eTag").toString()));
      }
      if (jsonObj.get("environmentSettings") != null && !jsonObj.get("environmentSettings").isJsonNull()) {
        JsonArray jsonArrayenvironmentSettings = jsonObj.getAsJsonArray("environmentSettings");
        if (jsonArrayenvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSettings").toString()));
          }

          // validate the optional field `environmentSettings` (array)
          for (int i = 0; i < jsonArrayenvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArrayenvironmentSettings.get(i));
          };
        }
      }
      // validate the optional field `executionInfo`
      if (jsonObj.get("executionInfo") != null && !jsonObj.get("executionInfo").isJsonNull()) {
        TaskExecutionInformation.validateJsonElement(jsonObj.get("executionInfo"));
      }
      // validate the optional field `exitConditions`
      if (jsonObj.get("exitConditions") != null && !jsonObj.get("exitConditions").isJsonNull()) {
        ExitConditions.validateJsonElement(jsonObj.get("exitConditions"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `multiInstanceSettings`
      if (jsonObj.get("multiInstanceSettings") != null && !jsonObj.get("multiInstanceSettings").isJsonNull()) {
        MultiInstanceSettings.validateJsonElement(jsonObj.get("multiInstanceSettings"));
      }
      // validate the optional field `nodeInfo`
      if (jsonObj.get("nodeInfo") != null && !jsonObj.get("nodeInfo").isJsonNull()) {
        ComputeNodeInformation.validateJsonElement(jsonObj.get("nodeInfo"));
      }
      if (jsonObj.get("outputFiles") != null && !jsonObj.get("outputFiles").isJsonNull()) {
        JsonArray jsonArrayoutputFiles = jsonObj.getAsJsonArray("outputFiles");
        if (jsonArrayoutputFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputFiles` to be an array in the JSON string but got `%s`", jsonObj.get("outputFiles").toString()));
          }

          // validate the optional field `outputFiles` (array)
          for (int i = 0; i < jsonArrayoutputFiles.size(); i++) {
            OutputFile.validateJsonElement(jsonArrayoutputFiles.get(i));
          };
        }
      }
      // validate the optional field `previousState`
      if (jsonObj.get("previousState") != null && !jsonObj.get("previousState").isJsonNull()) {
        TaskState.validateJsonElement(jsonObj.get("previousState"));
      }
      if (jsonObj.get("resourceFiles") != null && !jsonObj.get("resourceFiles").isJsonNull()) {
        JsonArray jsonArrayresourceFiles = jsonObj.getAsJsonArray("resourceFiles");
        if (jsonArrayresourceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("resourceFiles").toString()));
          }

          // validate the optional field `resourceFiles` (array)
          for (int i = 0; i < jsonArrayresourceFiles.size(); i++) {
            ResourceFile.validateJsonElement(jsonArrayresourceFiles.get(i));
          };
        }
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        TaskState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        TaskStatistics.validateJsonElement(jsonObj.get("stats"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `userIdentity`
      if (jsonObj.get("userIdentity") != null && !jsonObj.get("userIdentity").isJsonNull()) {
        UserIdentity.validateJsonElement(jsonObj.get("userIdentity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudTask.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudTask>() {
           @Override
           public void write(JsonWriter out, CloudTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudTask
   * @throws IOException if the JSON string is invalid with respect to CloudTask
   */
  public static CloudTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudTask.class);
  }

  /**
   * Convert an instance of CloudTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

