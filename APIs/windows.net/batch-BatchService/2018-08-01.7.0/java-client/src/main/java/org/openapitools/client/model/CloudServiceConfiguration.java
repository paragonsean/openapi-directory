/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CloudServiceConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:50.848294-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudServiceConfiguration {
  public static final String SERIALIZED_NAME_CURRENT_O_S_VERSION = "currentOSVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_O_S_VERSION)
  private String currentOSVersion;

  public static final String SERIALIZED_NAME_OS_FAMILY = "osFamily";
  @SerializedName(SERIALIZED_NAME_OS_FAMILY)
  private String osFamily;

  public static final String SERIALIZED_NAME_TARGET_O_S_VERSION = "targetOSVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_O_S_VERSION)
  private String targetOSVersion;

  public CloudServiceConfiguration() {
  }

  public CloudServiceConfiguration(
     String currentOSVersion
  ) {
    this();
    this.currentOSVersion = currentOSVersion;
  }

  /**
   * This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
   * @return currentOSVersion
   */
  @javax.annotation.Nullable
  public String getCurrentOSVersion() {
    return currentOSVersion;
  }



  public CloudServiceConfiguration osFamily(String osFamily) {
    this.osFamily = osFamily;
    return this;
  }

  /**
   * Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
   * @return osFamily
   */
  @javax.annotation.Nonnull
  public String getOsFamily() {
    return osFamily;
  }

  public void setOsFamily(String osFamily) {
    this.osFamily = osFamily;
  }


  public CloudServiceConfiguration targetOSVersion(String targetOSVersion) {
    this.targetOSVersion = targetOSVersion;
    return this;
  }

  /**
   * The default value is * which specifies the latest operating system version for the specified OS family.
   * @return targetOSVersion
   */
  @javax.annotation.Nullable
  public String getTargetOSVersion() {
    return targetOSVersion;
  }

  public void setTargetOSVersion(String targetOSVersion) {
    this.targetOSVersion = targetOSVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudServiceConfiguration cloudServiceConfiguration = (CloudServiceConfiguration) o;
    return Objects.equals(this.currentOSVersion, cloudServiceConfiguration.currentOSVersion) &&
        Objects.equals(this.osFamily, cloudServiceConfiguration.osFamily) &&
        Objects.equals(this.targetOSVersion, cloudServiceConfiguration.targetOSVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentOSVersion, osFamily, targetOSVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudServiceConfiguration {\n");
    sb.append("    currentOSVersion: ").append(toIndentedString(currentOSVersion)).append("\n");
    sb.append("    osFamily: ").append(toIndentedString(osFamily)).append("\n");
    sb.append("    targetOSVersion: ").append(toIndentedString(targetOSVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentOSVersion");
    openapiFields.add("osFamily");
    openapiFields.add("targetOSVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("osFamily");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudServiceConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudServiceConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudServiceConfiguration is not found in the empty JSON string", CloudServiceConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudServiceConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudServiceConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CloudServiceConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentOSVersion") != null && !jsonObj.get("currentOSVersion").isJsonNull()) && !jsonObj.get("currentOSVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentOSVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentOSVersion").toString()));
      }
      if (!jsonObj.get("osFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osFamily").toString()));
      }
      if ((jsonObj.get("targetOSVersion") != null && !jsonObj.get("targetOSVersion").isJsonNull()) && !jsonObj.get("targetOSVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetOSVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetOSVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudServiceConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudServiceConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudServiceConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudServiceConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudServiceConfiguration>() {
           @Override
           public void write(JsonWriter out, CloudServiceConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudServiceConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudServiceConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudServiceConfiguration
   * @throws IOException if the JSON string is invalid with respect to CloudServiceConfiguration
   */
  public static CloudServiceConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudServiceConfiguration.class);
  }

  /**
   * Convert an instance of CloudServiceConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

