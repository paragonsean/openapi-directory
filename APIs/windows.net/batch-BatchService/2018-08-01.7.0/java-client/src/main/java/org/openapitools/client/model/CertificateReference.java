/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateReference
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:50.848294-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateReference {
  /**
   * The default value is currentuser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of &#39;remoteUser&#39;, a &#39;certs&#39; directory is created in the user&#39;s home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
   */
  @JsonAdapter(StoreLocationEnum.Adapter.class)
  public enum StoreLocationEnum {
    CURRENTUSER("currentuser"),
    
    LOCALMACHINE("localmachine");

    private String value;

    StoreLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StoreLocationEnum fromValue(String value) {
      for (StoreLocationEnum b : StoreLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StoreLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StoreLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StoreLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StoreLocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StoreLocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORE_LOCATION = "storeLocation";
  @SerializedName(SERIALIZED_NAME_STORE_LOCATION)
  private StoreLocationEnum storeLocation;

  public static final String SERIALIZED_NAME_STORE_NAME = "storeName";
  @SerializedName(SERIALIZED_NAME_STORE_NAME)
  private String storeName;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_THUMBPRINT_ALGORITHM = "thumbprintAlgorithm";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT_ALGORITHM)
  private String thumbprintAlgorithm;

  /**
   * Gets or Sets visibility
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    STARTTASK("starttask"),
    
    TASK("task"),
    
    REMOTEUSER("remoteuser");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private List<VisibilityEnum> visibility = new ArrayList<>();

  public CertificateReference() {
  }

  public CertificateReference storeLocation(StoreLocationEnum storeLocation) {
    this.storeLocation = storeLocation;
    return this;
  }

  /**
   * The default value is currentuser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of &#39;remoteUser&#39;, a &#39;certs&#39; directory is created in the user&#39;s home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
   * @return storeLocation
   */
  @javax.annotation.Nullable
  public StoreLocationEnum getStoreLocation() {
    return storeLocation;
  }

  public void setStoreLocation(StoreLocationEnum storeLocation) {
    this.storeLocation = storeLocation;
  }


  public CertificateReference storeName(String storeName) {
    this.storeName = storeName;
    return this;
  }

  /**
   * This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
   * @return storeName
   */
  @javax.annotation.Nullable
  public String getStoreName() {
    return storeName;
  }

  public void setStoreName(String storeName) {
    this.storeName = storeName;
  }


  public CertificateReference thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Get thumbprint
   * @return thumbprint
   */
  @javax.annotation.Nonnull
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public CertificateReference thumbprintAlgorithm(String thumbprintAlgorithm) {
    this.thumbprintAlgorithm = thumbprintAlgorithm;
    return this;
  }

  /**
   * Get thumbprintAlgorithm
   * @return thumbprintAlgorithm
   */
  @javax.annotation.Nonnull
  public String getThumbprintAlgorithm() {
    return thumbprintAlgorithm;
  }

  public void setThumbprintAlgorithm(String thumbprintAlgorithm) {
    this.thumbprintAlgorithm = thumbprintAlgorithm;
  }


  public CertificateReference visibility(List<VisibilityEnum> visibility) {
    this.visibility = visibility;
    return this;
  }

  public CertificateReference addVisibilityItem(VisibilityEnum visibilityItem) {
    if (this.visibility == null) {
      this.visibility = new ArrayList<>();
    }
    this.visibility.add(visibilityItem);
    return this;
  }

  /**
   * You can specify more than one visibility in this collection. The default is all accounts.
   * @return visibility
   */
  @javax.annotation.Nullable
  public List<VisibilityEnum> getVisibility() {
    return visibility;
  }

  public void setVisibility(List<VisibilityEnum> visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateReference certificateReference = (CertificateReference) o;
    return Objects.equals(this.storeLocation, certificateReference.storeLocation) &&
        Objects.equals(this.storeName, certificateReference.storeName) &&
        Objects.equals(this.thumbprint, certificateReference.thumbprint) &&
        Objects.equals(this.thumbprintAlgorithm, certificateReference.thumbprintAlgorithm) &&
        Objects.equals(this.visibility, certificateReference.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storeLocation, storeName, thumbprint, thumbprintAlgorithm, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateReference {\n");
    sb.append("    storeLocation: ").append(toIndentedString(storeLocation)).append("\n");
    sb.append("    storeName: ").append(toIndentedString(storeName)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    thumbprintAlgorithm: ").append(toIndentedString(thumbprintAlgorithm)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("storeLocation");
    openapiFields.add("storeName");
    openapiFields.add("thumbprint");
    openapiFields.add("thumbprintAlgorithm");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("thumbprint");
    openapiRequiredFields.add("thumbprintAlgorithm");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateReference is not found in the empty JSON string", CertificateReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateReference.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("storeLocation") != null && !jsonObj.get("storeLocation").isJsonNull()) && !jsonObj.get("storeLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeLocation").toString()));
      }
      // validate the optional field `storeLocation`
      if (jsonObj.get("storeLocation") != null && !jsonObj.get("storeLocation").isJsonNull()) {
        StoreLocationEnum.validateJsonElement(jsonObj.get("storeLocation"));
      }
      if ((jsonObj.get("storeName") != null && !jsonObj.get("storeName").isJsonNull()) && !jsonObj.get("storeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeName").toString()));
      }
      if (!jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if (!jsonObj.get("thumbprintAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprintAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprintAlgorithm").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull() && !jsonObj.get("visibility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be an array in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateReference.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateReference>() {
           @Override
           public void write(JsonWriter out, CertificateReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateReference
   * @throws IOException if the JSON string is invalid with respect to CertificateReference
   */
  public static CertificateReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateReference.class);
  }

  /**
   * Convert an instance of CertificateReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

