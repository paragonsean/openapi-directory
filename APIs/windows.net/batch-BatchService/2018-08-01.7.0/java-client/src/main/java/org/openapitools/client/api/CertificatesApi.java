/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateAddParameter;
import org.openapitools.client.model.CertificateListResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificateAdd
     * @param apiVersion Client API Version. (required)
     * @param certificate The certificate to be added. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * DataServiceId - The OData ID of the resource to which the request applied. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateAddCall(String apiVersion, CertificateAddParameter certificate, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificate;

        // create path and map variables
        String localVarPath = "/certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; odata=minimalmetadata"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateAddValidateBeforeCall(String apiVersion, CertificateAddParameter certificate, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateAdd(Async)");
        }

        // verify the required parameter 'certificate' is set
        if (certificate == null) {
            throw new ApiException("Missing the required parameter 'certificate' when calling certificateAdd(Async)");
        }

        return certificateAddCall(apiVersion, certificate, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * Adds a certificate to the specified account.
     * 
     * @param apiVersion Client API Version. (required)
     * @param certificate The certificate to be added. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * DataServiceId - The OData ID of the resource to which the request applied. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public void certificateAdd(String apiVersion, CertificateAddParameter certificate, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        certificateAddWithHttpInfo(apiVersion, certificate, timeout, clientRequestId, returnClientRequestId, ocpDate);
    }

    /**
     * Adds a certificate to the specified account.
     * 
     * @param apiVersion Client API Version. (required)
     * @param certificate The certificate to be added. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * DataServiceId - The OData ID of the resource to which the request applied. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateAddWithHttpInfo(String apiVersion, CertificateAddParameter certificate, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateAddValidateBeforeCall(apiVersion, certificate, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds a certificate to the specified account. (asynchronously)
     * 
     * @param apiVersion Client API Version. (required)
     * @param certificate The certificate to be added. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * DataServiceId - The OData ID of the resource to which the request applied. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateAddAsync(String apiVersion, CertificateAddParameter certificate, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateAddValidateBeforeCall(apiVersion, certificate, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateCancelDeletion
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate being deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * DataServiceId - The OData ID of the resource to which the request applied. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateCancelDeletionCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete"
            .replace("{" + "thumbprintAlgorithm" + "}", localVarApiClient.escapeString(thumbprintAlgorithm.toString()))
            .replace("{" + "thumbprint" + "}", localVarApiClient.escapeString(thumbprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateCancelDeletionValidateBeforeCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thumbprintAlgorithm' is set
        if (thumbprintAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'thumbprintAlgorithm' when calling certificateCancelDeletion(Async)");
        }

        // verify the required parameter 'thumbprint' is set
        if (thumbprint == null) {
            throw new ApiException("Missing the required parameter 'thumbprint' when calling certificateCancelDeletion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateCancelDeletion(Async)");
        }

        return certificateCancelDeletionCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * Cancels a failed deletion of a certificate from the specified account.
     * If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate being deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * DataServiceId - The OData ID of the resource to which the request applied. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public void certificateCancelDeletion(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        certificateCancelDeletionWithHttpInfo(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
    }

    /**
     * Cancels a failed deletion of a certificate from the specified account.
     * If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate being deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * DataServiceId - The OData ID of the resource to which the request applied. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateCancelDeletionWithHttpInfo(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateCancelDeletionValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancels a failed deletion of a certificate from the specified account. (asynchronously)
     * If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate being deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * DataServiceId - The OData ID of the resource to which the request applied. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateCancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateCancelDeletionValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateDelete
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateDeleteCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})"
            .replace("{" + "thumbprintAlgorithm" + "}", localVarApiClient.escapeString(thumbprintAlgorithm.toString()))
            .replace("{" + "thumbprint" + "}", localVarApiClient.escapeString(thumbprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateDeleteValidateBeforeCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thumbprintAlgorithm' is set
        if (thumbprintAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'thumbprintAlgorithm' when calling certificateDelete(Async)");
        }

        // verify the required parameter 'thumbprint' is set
        if (thumbprint == null) {
            throw new ApiException("Missing the required parameter 'thumbprint' when calling certificateDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateDelete(Async)");
        }

        return certificateDeleteCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * Deletes a certificate from the specified account.
     * You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public void certificateDelete(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        certificateDeleteWithHttpInfo(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
    }

    /**
     * Deletes a certificate from the specified account.
     * You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateDeleteWithHttpInfo(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateDeleteValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a certificate from the specified account. (asynchronously)
     * You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request to the Batch service was successful. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateDeleteAsync(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateDeleteValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateGet
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to get. (required)
     * @param apiVersion Client API Version. (required)
     * @param $select An OData $select clause. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the certificate. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateGetCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})"
            .replace("{" + "thumbprintAlgorithm" + "}", localVarApiClient.escapeString(thumbprintAlgorithm.toString()))
            .replace("{" + "thumbprint" + "}", localVarApiClient.escapeString(thumbprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateGetValidateBeforeCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thumbprintAlgorithm' is set
        if (thumbprintAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'thumbprintAlgorithm' when calling certificateGet(Async)");
        }

        // verify the required parameter 'thumbprint' is set
        if (thumbprint == null) {
            throw new ApiException("Missing the required parameter 'thumbprint' when calling certificateGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateGet(Async)");
        }

        return certificateGetCall(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * 
     * Gets information about the specified certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to get. (required)
     * @param apiVersion Client API Version. (required)
     * @param $select An OData $select clause. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the certificate. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificateGet(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificateGetWithHttpInfo(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to get. (required)
     * @param apiVersion Client API Version. (required)
     * @param $select An OData $select clause. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the certificate. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificateGetWithHttpInfo(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateGetValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to get. (required)
     * @param apiVersion Client API Version. (required)
     * @param $select An OData $select clause. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the certificate. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateGetAsync(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateGetValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateList
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates. (optional)
     * @param $select An OData $select clause. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 certificates can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of certificates. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateListCall(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateListValidateBeforeCall(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateList(Async)");
        }

        return certificateListCall(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * Lists all of the certificates that have been added to the specified account.
     * 
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates. (optional)
     * @param $select An OData $select clause. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 certificates can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return CertificateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of certificates. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public CertificateListResult certificateList(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        ApiResponse<CertificateListResult> localVarResp = certificateListWithHttpInfo(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        return localVarResp.getData();
    }

    /**
     * Lists all of the certificates that have been added to the specified account.
     * 
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates. (optional)
     * @param $select An OData $select clause. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 certificates can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;CertificateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of certificates. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateListResult> certificateListWithHttpInfo(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateListValidateBeforeCall(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        Type localVarReturnType = new TypeToken<CertificateListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all of the certificates that have been added to the specified account. (asynchronously)
     * 
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates. (optional)
     * @param $select An OData $select clause. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 certificates can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of certificates. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateListAsync(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<CertificateListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateListValidateBeforeCall(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        Type localVarReturnType = new TypeToken<CertificateListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
