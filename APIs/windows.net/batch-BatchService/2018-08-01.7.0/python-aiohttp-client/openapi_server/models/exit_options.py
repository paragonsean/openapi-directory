# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExitOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependency_action: str=None, job_action: str=None):
        """ExitOptions - a model defined in OpenAPI

        :param dependency_action: The dependency_action of this ExitOptions.
        :param job_action: The job_action of this ExitOptions.
        """
        self.openapi_types = {
            'dependency_action': str,
            'job_action': str
        }

        self.attribute_map = {
            'dependency_action': 'dependencyAction',
            'job_action': 'jobAction'
        }

        self._dependency_action = dependency_action
        self._job_action = job_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExitOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExitOptions of this ExitOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependency_action(self):
        """Gets the dependency_action of this ExitOptions.

        The default is 'satisfy' for exit code 0, and 'block' for all other exit conditions. If the job's usesTaskDependencies property is set to false, then specifying the dependencyAction property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400  (Bad Request).

        :return: The dependency_action of this ExitOptions.
        :rtype: str
        """
        return self._dependency_action

    @dependency_action.setter
    def dependency_action(self, dependency_action):
        """Sets the dependency_action of this ExitOptions.

        The default is 'satisfy' for exit code 0, and 'block' for all other exit conditions. If the job's usesTaskDependencies property is set to false, then specifying the dependencyAction property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400  (Bad Request).

        :param dependency_action: The dependency_action of this ExitOptions.
        :type dependency_action: str
        """
        allowed_values = ["satisfy", "block"]  # noqa: E501
        if dependency_action not in allowed_values:
            raise ValueError(
                "Invalid value for `dependency_action` ({0}), must be one of {1}"
                .format(dependency_action, allowed_values)
            )

        self._dependency_action = dependency_action

    @property
    def job_action(self):
        """Gets the job_action of this ExitOptions.

        The default is none for exit code 0 and terminate for all other exit conditions. If the job's onTaskFailed property is noAction, then specifying this property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).

        :return: The job_action of this ExitOptions.
        :rtype: str
        """
        return self._job_action

    @job_action.setter
    def job_action(self, job_action):
        """Sets the job_action of this ExitOptions.

        The default is none for exit code 0 and terminate for all other exit conditions. If the job's onTaskFailed property is noAction, then specifying this property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).

        :param job_action: The job_action of this ExitOptions.
        :type job_action: str
        """
        allowed_values = ["none", "disable", "terminate"]  # noqa: E501
        if job_action not in allowed_values:
            raise ValueError(
                "Invalid value for `job_action` ({0}), must be one of {1}"
                .format(job_action, allowed_values)
            )

        self._job_action = job_action
