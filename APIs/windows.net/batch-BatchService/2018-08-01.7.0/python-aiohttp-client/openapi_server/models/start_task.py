# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_container_settings import TaskContainerSettings
from openapi_server.models.user_identity import UserIdentity
from openapi_server import util


class StartTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_line: str=None, container_settings: TaskContainerSettings=None, environment_settings: List[EnvironmentSetting]=None, max_task_retry_count: int=None, resource_files: List[ResourceFile]=None, user_identity: UserIdentity=None, wait_for_success: bool=None):
        """StartTask - a model defined in OpenAPI

        :param command_line: The command_line of this StartTask.
        :param container_settings: The container_settings of this StartTask.
        :param environment_settings: The environment_settings of this StartTask.
        :param max_task_retry_count: The max_task_retry_count of this StartTask.
        :param resource_files: The resource_files of this StartTask.
        :param user_identity: The user_identity of this StartTask.
        :param wait_for_success: The wait_for_success of this StartTask.
        """
        self.openapi_types = {
            'command_line': str,
            'container_settings': TaskContainerSettings,
            'environment_settings': List[EnvironmentSetting],
            'max_task_retry_count': int,
            'resource_files': List[ResourceFile],
            'user_identity': UserIdentity,
            'wait_for_success': bool
        }

        self.attribute_map = {
            'command_line': 'commandLine',
            'container_settings': 'containerSettings',
            'environment_settings': 'environmentSettings',
            'max_task_retry_count': 'maxTaskRetryCount',
            'resource_files': 'resourceFiles',
            'user_identity': 'userIdentity',
            'wait_for_success': 'waitForSuccess'
        }

        self._command_line = command_line
        self._container_settings = container_settings
        self._environment_settings = environment_settings
        self._max_task_retry_count = max_task_retry_count
        self._resource_files = resource_files
        self._user_identity = user_identity
        self._wait_for_success = wait_for_success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTask of this StartTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_line(self):
        """Gets the command_line of this StartTask.

        The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).

        :return: The command_line of this StartTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this StartTask.

        The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).

        :param command_line: The command_line of this StartTask.
        :type command_line: str
        """
        if command_line is None:
            raise ValueError("Invalid value for `command_line`, must not be `None`")

        self._command_line = command_line

    @property
    def container_settings(self):
        """Gets the container_settings of this StartTask.


        :return: The container_settings of this StartTask.
        :rtype: TaskContainerSettings
        """
        return self._container_settings

    @container_settings.setter
    def container_settings(self, container_settings):
        """Sets the container_settings of this StartTask.


        :param container_settings: The container_settings of this StartTask.
        :type container_settings: TaskContainerSettings
        """

        self._container_settings = container_settings

    @property
    def environment_settings(self):
        """Gets the environment_settings of this StartTask.


        :return: The environment_settings of this StartTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this StartTask.


        :param environment_settings: The environment_settings of this StartTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def max_task_retry_count(self):
        """Gets the max_task_retry_count of this StartTask.

        The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.

        :return: The max_task_retry_count of this StartTask.
        :rtype: int
        """
        return self._max_task_retry_count

    @max_task_retry_count.setter
    def max_task_retry_count(self, max_task_retry_count):
        """Sets the max_task_retry_count of this StartTask.

        The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.

        :param max_task_retry_count: The max_task_retry_count of this StartTask.
        :type max_task_retry_count: int
        """

        self._max_task_retry_count = max_task_retry_count

    @property
    def resource_files(self):
        """Gets the resource_files of this StartTask.

        Files listed under this element are located in the task's working directory.

        :return: The resource_files of this StartTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this StartTask.

        Files listed under this element are located in the task's working directory.

        :param resource_files: The resource_files of this StartTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def user_identity(self):
        """Gets the user_identity of this StartTask.


        :return: The user_identity of this StartTask.
        :rtype: UserIdentity
        """
        return self._user_identity

    @user_identity.setter
    def user_identity(self, user_identity):
        """Sets the user_identity of this StartTask.


        :param user_identity: The user_identity of this StartTask.
        :type user_identity: UserIdentity
        """

        self._user_identity = user_identity

    @property
    def wait_for_success(self):
        """Gets the wait_for_success of this StartTask.

        If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.

        :return: The wait_for_success of this StartTask.
        :rtype: bool
        """
        return self._wait_for_success

    @wait_for_success.setter
    def wait_for_success(self, wait_for_success):
        """Sets the wait_for_success of this StartTask.

        If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.

        :param wait_for_success: The wait_for_success of this StartTask.
        :type wait_for_success: bool
        """

        self._wait_for_success = wait_for_success
