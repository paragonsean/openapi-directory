# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output_file_upload_condition import OutputFileUploadCondition
from openapi_server import util


class OutputFileUploadOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, upload_condition: OutputFileUploadCondition=None):
        """OutputFileUploadOptions - a model defined in OpenAPI

        :param upload_condition: The upload_condition of this OutputFileUploadOptions.
        """
        self.openapi_types = {
            'upload_condition': OutputFileUploadCondition
        }

        self.attribute_map = {
            'upload_condition': 'uploadCondition'
        }

        self._upload_condition = upload_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputFileUploadOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputFileUploadOptions of this OutputFileUploadOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def upload_condition(self):
        """Gets the upload_condition of this OutputFileUploadOptions.


        :return: The upload_condition of this OutputFileUploadOptions.
        :rtype: OutputFileUploadCondition
        """
        return self._upload_condition

    @upload_condition.setter
    def upload_condition(self, upload_condition):
        """Sets the upload_condition of this OutputFileUploadOptions.


        :param upload_condition: The upload_condition of this OutputFileUploadOptions.
        :type upload_condition: OutputFileUploadCondition
        """
        if upload_condition is None:
            raise ValueError("Invalid value for `upload_condition`, must not be `None`")

        self._upload_condition = upload_condition
