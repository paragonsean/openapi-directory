# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elevation_level import ElevationLevel
from openapi_server import util


class AutoUserSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elevation_level: ElevationLevel=None, scope: str=None):
        """AutoUserSpecification - a model defined in OpenAPI

        :param elevation_level: The elevation_level of this AutoUserSpecification.
        :param scope: The scope of this AutoUserSpecification.
        """
        self.openapi_types = {
            'elevation_level': ElevationLevel,
            'scope': str
        }

        self.attribute_map = {
            'elevation_level': 'elevationLevel',
            'scope': 'scope'
        }

        self._elevation_level = elevation_level
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoUserSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoUserSpecification of this AutoUserSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elevation_level(self):
        """Gets the elevation_level of this AutoUserSpecification.


        :return: The elevation_level of this AutoUserSpecification.
        :rtype: ElevationLevel
        """
        return self._elevation_level

    @elevation_level.setter
    def elevation_level(self, elevation_level):
        """Sets the elevation_level of this AutoUserSpecification.


        :param elevation_level: The elevation_level of this AutoUserSpecification.
        :type elevation_level: ElevationLevel
        """

        self._elevation_level = elevation_level

    @property
    def scope(self):
        """Gets the scope of this AutoUserSpecification.

        The default value is task.

        :return: The scope of this AutoUserSpecification.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AutoUserSpecification.

        The default value is task.

        :param scope: The scope of this AutoUserSpecification.
        :type scope: str
        """
        allowed_values = ["task", "pool"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
