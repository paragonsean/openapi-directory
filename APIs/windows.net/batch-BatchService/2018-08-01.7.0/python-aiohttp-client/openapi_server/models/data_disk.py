# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.caching_type import CachingType
from openapi_server.models.storage_account_type import StorageAccountType
from openapi_server import util


class DataDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caching: CachingType=None, disk_size_gb: int=None, lun: int=None, storage_account_type: StorageAccountType=None):
        """DataDisk - a model defined in OpenAPI

        :param caching: The caching of this DataDisk.
        :param disk_size_gb: The disk_size_gb of this DataDisk.
        :param lun: The lun of this DataDisk.
        :param storage_account_type: The storage_account_type of this DataDisk.
        """
        self.openapi_types = {
            'caching': CachingType,
            'disk_size_gb': int,
            'lun': int,
            'storage_account_type': StorageAccountType
        }

        self.attribute_map = {
            'caching': 'caching',
            'disk_size_gb': 'diskSizeGB',
            'lun': 'lun',
            'storage_account_type': 'storageAccountType'
        }

        self._caching = caching
        self._disk_size_gb = disk_size_gb
        self._lun = lun
        self._storage_account_type = storage_account_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataDisk of this DataDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caching(self):
        """Gets the caching of this DataDisk.


        :return: The caching of this DataDisk.
        :rtype: CachingType
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this DataDisk.


        :param caching: The caching of this DataDisk.
        :type caching: CachingType
        """

        self._caching = caching

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this DataDisk.


        :return: The disk_size_gb of this DataDisk.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this DataDisk.


        :param disk_size_gb: The disk_size_gb of this DataDisk.
        :type disk_size_gb: int
        """
        if disk_size_gb is None:
            raise ValueError("Invalid value for `disk_size_gb`, must not be `None`")

        self._disk_size_gb = disk_size_gb

    @property
    def lun(self):
        """Gets the lun of this DataDisk.

        The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.

        :return: The lun of this DataDisk.
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this DataDisk.

        The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.

        :param lun: The lun of this DataDisk.
        :type lun: int
        """
        if lun is None:
            raise ValueError("Invalid value for `lun`, must not be `None`")

        self._lun = lun

    @property
    def storage_account_type(self):
        """Gets the storage_account_type of this DataDisk.


        :return: The storage_account_type of this DataDisk.
        :rtype: StorageAccountType
        """
        return self._storage_account_type

    @storage_account_type.setter
    def storage_account_type(self, storage_account_type):
        """Sets the storage_account_type of this DataDisk.


        :param storage_account_type: The storage_account_type of this DataDisk.
        :type storage_account_type: StorageAccountType
        """

        self._storage_account_type = storage_account_type
