# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_container_execution_information import TaskContainerExecutionInformation
from openapi_server.models.task_execution_result import TaskExecutionResult
from openapi_server.models.task_failure_information import TaskFailureInformation
from openapi_server import util


class TaskExecutionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_info: TaskContainerExecutionInformation=None, end_time: datetime=None, exit_code: int=None, failure_info: TaskFailureInformation=None, last_requeue_time: datetime=None, last_retry_time: datetime=None, requeue_count: int=None, result: TaskExecutionResult=None, retry_count: int=None, start_time: datetime=None):
        """TaskExecutionInformation - a model defined in OpenAPI

        :param container_info: The container_info of this TaskExecutionInformation.
        :param end_time: The end_time of this TaskExecutionInformation.
        :param exit_code: The exit_code of this TaskExecutionInformation.
        :param failure_info: The failure_info of this TaskExecutionInformation.
        :param last_requeue_time: The last_requeue_time of this TaskExecutionInformation.
        :param last_retry_time: The last_retry_time of this TaskExecutionInformation.
        :param requeue_count: The requeue_count of this TaskExecutionInformation.
        :param result: The result of this TaskExecutionInformation.
        :param retry_count: The retry_count of this TaskExecutionInformation.
        :param start_time: The start_time of this TaskExecutionInformation.
        """
        self.openapi_types = {
            'container_info': TaskContainerExecutionInformation,
            'end_time': datetime,
            'exit_code': int,
            'failure_info': TaskFailureInformation,
            'last_requeue_time': datetime,
            'last_retry_time': datetime,
            'requeue_count': int,
            'result': TaskExecutionResult,
            'retry_count': int,
            'start_time': datetime
        }

        self.attribute_map = {
            'container_info': 'containerInfo',
            'end_time': 'endTime',
            'exit_code': 'exitCode',
            'failure_info': 'failureInfo',
            'last_requeue_time': 'lastRequeueTime',
            'last_retry_time': 'lastRetryTime',
            'requeue_count': 'requeueCount',
            'result': 'result',
            'retry_count': 'retryCount',
            'start_time': 'startTime'
        }

        self._container_info = container_info
        self._end_time = end_time
        self._exit_code = exit_code
        self._failure_info = failure_info
        self._last_requeue_time = last_requeue_time
        self._last_retry_time = last_retry_time
        self._requeue_count = requeue_count
        self._result = result
        self._retry_count = retry_count
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskExecutionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskExecutionInformation of this TaskExecutionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_info(self):
        """Gets the container_info of this TaskExecutionInformation.


        :return: The container_info of this TaskExecutionInformation.
        :rtype: TaskContainerExecutionInformation
        """
        return self._container_info

    @container_info.setter
    def container_info(self, container_info):
        """Sets the container_info of this TaskExecutionInformation.


        :param container_info: The container_info of this TaskExecutionInformation.
        :type container_info: TaskContainerExecutionInformation
        """

        self._container_info = container_info

    @property
    def end_time(self):
        """Gets the end_time of this TaskExecutionInformation.

        This property is set only if the task is in the Completed state.

        :return: The end_time of this TaskExecutionInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaskExecutionInformation.

        This property is set only if the task is in the Completed state.

        :param end_time: The end_time of this TaskExecutionInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def exit_code(self):
        """Gets the exit_code of this TaskExecutionInformation.

        This property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.

        :return: The exit_code of this TaskExecutionInformation.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this TaskExecutionInformation.

        This property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.

        :param exit_code: The exit_code of this TaskExecutionInformation.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def failure_info(self):
        """Gets the failure_info of this TaskExecutionInformation.


        :return: The failure_info of this TaskExecutionInformation.
        :rtype: TaskFailureInformation
        """
        return self._failure_info

    @failure_info.setter
    def failure_info(self, failure_info):
        """Sets the failure_info of this TaskExecutionInformation.


        :param failure_info: The failure_info of this TaskExecutionInformation.
        :type failure_info: TaskFailureInformation
        """

        self._failure_info = failure_info

    @property
    def last_requeue_time(self):
        """Gets the last_requeue_time of this TaskExecutionInformation.

        This property is set only if the requeueCount is nonzero.

        :return: The last_requeue_time of this TaskExecutionInformation.
        :rtype: datetime
        """
        return self._last_requeue_time

    @last_requeue_time.setter
    def last_requeue_time(self, last_requeue_time):
        """Sets the last_requeue_time of this TaskExecutionInformation.

        This property is set only if the requeueCount is nonzero.

        :param last_requeue_time: The last_requeue_time of this TaskExecutionInformation.
        :type last_requeue_time: datetime
        """

        self._last_requeue_time = last_requeue_time

    @property
    def last_retry_time(self):
        """Gets the last_retry_time of this TaskExecutionInformation.

        This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.

        :return: The last_retry_time of this TaskExecutionInformation.
        :rtype: datetime
        """
        return self._last_retry_time

    @last_retry_time.setter
    def last_retry_time(self, last_retry_time):
        """Sets the last_retry_time of this TaskExecutionInformation.

        This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.

        :param last_retry_time: The last_retry_time of this TaskExecutionInformation.
        :type last_retry_time: datetime
        """

        self._last_retry_time = last_retry_time

    @property
    def requeue_count(self):
        """Gets the requeue_count of this TaskExecutionInformation.

        When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.

        :return: The requeue_count of this TaskExecutionInformation.
        :rtype: int
        """
        return self._requeue_count

    @requeue_count.setter
    def requeue_count(self, requeue_count):
        """Sets the requeue_count of this TaskExecutionInformation.

        When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.

        :param requeue_count: The requeue_count of this TaskExecutionInformation.
        :type requeue_count: int
        """
        if requeue_count is None:
            raise ValueError("Invalid value for `requeue_count`, must not be `None`")

        self._requeue_count = requeue_count

    @property
    def result(self):
        """Gets the result of this TaskExecutionInformation.


        :return: The result of this TaskExecutionInformation.
        :rtype: TaskExecutionResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TaskExecutionInformation.


        :param result: The result of this TaskExecutionInformation.
        :type result: TaskExecutionResult
        """

        self._result = result

    @property
    def retry_count(self):
        """Gets the retry_count of this TaskExecutionInformation.

        Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.

        :return: The retry_count of this TaskExecutionInformation.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this TaskExecutionInformation.

        Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.

        :param retry_count: The retry_count of this TaskExecutionInformation.
        :type retry_count: int
        """
        if retry_count is None:
            raise ValueError("Invalid value for `retry_count`, must not be `None`")

        self._retry_count = retry_count

    @property
    def start_time(self):
        """Gets the start_time of this TaskExecutionInformation.

        'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.

        :return: The start_time of this TaskExecutionInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskExecutionInformation.

        'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.

        :param start_time: The start_time of this TaskExecutionInformation.
        :type start_time: datetime
        """

        self._start_time = start_time
