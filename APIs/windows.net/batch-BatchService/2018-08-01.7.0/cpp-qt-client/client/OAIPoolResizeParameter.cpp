/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoolResizeParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoolResizeParameter::OAIPoolResizeParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoolResizeParameter::OAIPoolResizeParameter() {
    this->initializeModel();
}

OAIPoolResizeParameter::~OAIPoolResizeParameter() {}

void OAIPoolResizeParameter::initializeModel() {

    m_node_deallocation_option_isSet = false;
    m_node_deallocation_option_isValid = false;

    m_resize_timeout_isSet = false;
    m_resize_timeout_isValid = false;

    m_target_dedicated_nodes_isSet = false;
    m_target_dedicated_nodes_isValid = false;

    m_target_low_priority_nodes_isSet = false;
    m_target_low_priority_nodes_isValid = false;
}

void OAIPoolResizeParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoolResizeParameter::fromJsonObject(QJsonObject json) {

    m_node_deallocation_option_isValid = ::OpenAPI::fromJsonValue(m_node_deallocation_option, json[QString("nodeDeallocationOption")]);
    m_node_deallocation_option_isSet = !json[QString("nodeDeallocationOption")].isNull() && m_node_deallocation_option_isValid;

    m_resize_timeout_isValid = ::OpenAPI::fromJsonValue(m_resize_timeout, json[QString("resizeTimeout")]);
    m_resize_timeout_isSet = !json[QString("resizeTimeout")].isNull() && m_resize_timeout_isValid;

    m_target_dedicated_nodes_isValid = ::OpenAPI::fromJsonValue(m_target_dedicated_nodes, json[QString("targetDedicatedNodes")]);
    m_target_dedicated_nodes_isSet = !json[QString("targetDedicatedNodes")].isNull() && m_target_dedicated_nodes_isValid;

    m_target_low_priority_nodes_isValid = ::OpenAPI::fromJsonValue(m_target_low_priority_nodes, json[QString("targetLowPriorityNodes")]);
    m_target_low_priority_nodes_isSet = !json[QString("targetLowPriorityNodes")].isNull() && m_target_low_priority_nodes_isValid;
}

QString OAIPoolResizeParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoolResizeParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_node_deallocation_option.isSet()) {
        obj.insert(QString("nodeDeallocationOption"), ::OpenAPI::toJsonValue(m_node_deallocation_option));
    }
    if (m_resize_timeout_isSet) {
        obj.insert(QString("resizeTimeout"), ::OpenAPI::toJsonValue(m_resize_timeout));
    }
    if (m_target_dedicated_nodes_isSet) {
        obj.insert(QString("targetDedicatedNodes"), ::OpenAPI::toJsonValue(m_target_dedicated_nodes));
    }
    if (m_target_low_priority_nodes_isSet) {
        obj.insert(QString("targetLowPriorityNodes"), ::OpenAPI::toJsonValue(m_target_low_priority_nodes));
    }
    return obj;
}

OAIComputeNodeDeallocationOption OAIPoolResizeParameter::getNodeDeallocationOption() const {
    return m_node_deallocation_option;
}
void OAIPoolResizeParameter::setNodeDeallocationOption(const OAIComputeNodeDeallocationOption &node_deallocation_option) {
    m_node_deallocation_option = node_deallocation_option;
    m_node_deallocation_option_isSet = true;
}

bool OAIPoolResizeParameter::is_node_deallocation_option_Set() const{
    return m_node_deallocation_option_isSet;
}

bool OAIPoolResizeParameter::is_node_deallocation_option_Valid() const{
    return m_node_deallocation_option_isValid;
}

QString OAIPoolResizeParameter::getResizeTimeout() const {
    return m_resize_timeout;
}
void OAIPoolResizeParameter::setResizeTimeout(const QString &resize_timeout) {
    m_resize_timeout = resize_timeout;
    m_resize_timeout_isSet = true;
}

bool OAIPoolResizeParameter::is_resize_timeout_Set() const{
    return m_resize_timeout_isSet;
}

bool OAIPoolResizeParameter::is_resize_timeout_Valid() const{
    return m_resize_timeout_isValid;
}

qint32 OAIPoolResizeParameter::getTargetDedicatedNodes() const {
    return m_target_dedicated_nodes;
}
void OAIPoolResizeParameter::setTargetDedicatedNodes(const qint32 &target_dedicated_nodes) {
    m_target_dedicated_nodes = target_dedicated_nodes;
    m_target_dedicated_nodes_isSet = true;
}

bool OAIPoolResizeParameter::is_target_dedicated_nodes_Set() const{
    return m_target_dedicated_nodes_isSet;
}

bool OAIPoolResizeParameter::is_target_dedicated_nodes_Valid() const{
    return m_target_dedicated_nodes_isValid;
}

qint32 OAIPoolResizeParameter::getTargetLowPriorityNodes() const {
    return m_target_low_priority_nodes;
}
void OAIPoolResizeParameter::setTargetLowPriorityNodes(const qint32 &target_low_priority_nodes) {
    m_target_low_priority_nodes = target_low_priority_nodes;
    m_target_low_priority_nodes_isSet = true;
}

bool OAIPoolResizeParameter::is_target_low_priority_nodes_Set() const{
    return m_target_low_priority_nodes_isSet;
}

bool OAIPoolResizeParameter::is_target_low_priority_nodes_Valid() const{
    return m_target_low_priority_nodes_isValid;
}

bool OAIPoolResizeParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_deallocation_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_dedicated_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_low_priority_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoolResizeParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
