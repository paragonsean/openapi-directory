/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartTask.h
 *
 * Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing.
 */

#ifndef OAIStartTask_H
#define OAIStartTask_H

#include <QJsonObject>

#include "OAIEnvironmentSetting.h"
#include "OAIResourceFile.h"
#include "OAITaskContainerSettings.h"
#include "OAIUserIdentity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITaskContainerSettings;
class OAIEnvironmentSetting;
class OAIResourceFile;
class OAIUserIdentity;

class OAIStartTask : public OAIObject {
public:
    OAIStartTask();
    OAIStartTask(QString json);
    ~OAIStartTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommandLine() const;
    void setCommandLine(const QString &command_line);
    bool is_command_line_Set() const;
    bool is_command_line_Valid() const;

    OAITaskContainerSettings getContainerSettings() const;
    void setContainerSettings(const OAITaskContainerSettings &container_settings);
    bool is_container_settings_Set() const;
    bool is_container_settings_Valid() const;

    QList<OAIEnvironmentSetting> getEnvironmentSettings() const;
    void setEnvironmentSettings(const QList<OAIEnvironmentSetting> &environment_settings);
    bool is_environment_settings_Set() const;
    bool is_environment_settings_Valid() const;

    qint32 getMaxTaskRetryCount() const;
    void setMaxTaskRetryCount(const qint32 &max_task_retry_count);
    bool is_max_task_retry_count_Set() const;
    bool is_max_task_retry_count_Valid() const;

    QList<OAIResourceFile> getResourceFiles() const;
    void setResourceFiles(const QList<OAIResourceFile> &resource_files);
    bool is_resource_files_Set() const;
    bool is_resource_files_Valid() const;

    OAIUserIdentity getUserIdentity() const;
    void setUserIdentity(const OAIUserIdentity &user_identity);
    bool is_user_identity_Set() const;
    bool is_user_identity_Valid() const;

    bool isWaitForSuccess() const;
    void setWaitForSuccess(const bool &wait_for_success);
    bool is_wait_for_success_Set() const;
    bool is_wait_for_success_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_command_line;
    bool m_command_line_isSet;
    bool m_command_line_isValid;

    OAITaskContainerSettings m_container_settings;
    bool m_container_settings_isSet;
    bool m_container_settings_isValid;

    QList<OAIEnvironmentSetting> m_environment_settings;
    bool m_environment_settings_isSet;
    bool m_environment_settings_isValid;

    qint32 m_max_task_retry_count;
    bool m_max_task_retry_count_isSet;
    bool m_max_task_retry_count_isValid;

    QList<OAIResourceFile> m_resource_files;
    bool m_resource_files_isSet;
    bool m_resource_files_isValid;

    OAIUserIdentity m_user_identity;
    bool m_user_identity_isSet;
    bool m_user_identity_isValid;

    bool m_wait_for_success;
    bool m_wait_for_success_isSet;
    bool m_wait_for_success_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartTask)

#endif // OAIStartTask_H
