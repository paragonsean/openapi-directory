/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobPreparationTaskExecutionInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobPreparationTaskExecutionInformation::OAIJobPreparationTaskExecutionInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobPreparationTaskExecutionInformation::OAIJobPreparationTaskExecutionInformation() {
    this->initializeModel();
}

OAIJobPreparationTaskExecutionInformation::~OAIJobPreparationTaskExecutionInformation() {}

void OAIJobPreparationTaskExecutionInformation::initializeModel() {

    m_container_info_isSet = false;
    m_container_info_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_failure_info_isSet = false;
    m_failure_info_isValid = false;

    m_last_retry_time_isSet = false;
    m_last_retry_time_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_task_root_directory_isSet = false;
    m_task_root_directory_isValid = false;

    m_task_root_directory_url_isSet = false;
    m_task_root_directory_url_isValid = false;
}

void OAIJobPreparationTaskExecutionInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobPreparationTaskExecutionInformation::fromJsonObject(QJsonObject json) {

    m_container_info_isValid = ::OpenAPI::fromJsonValue(m_container_info, json[QString("containerInfo")]);
    m_container_info_isSet = !json[QString("containerInfo")].isNull() && m_container_info_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_failure_info_isValid = ::OpenAPI::fromJsonValue(m_failure_info, json[QString("failureInfo")]);
    m_failure_info_isSet = !json[QString("failureInfo")].isNull() && m_failure_info_isValid;

    m_last_retry_time_isValid = ::OpenAPI::fromJsonValue(m_last_retry_time, json[QString("lastRetryTime")]);
    m_last_retry_time_isSet = !json[QString("lastRetryTime")].isNull() && m_last_retry_time_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("retryCount")]);
    m_retry_count_isSet = !json[QString("retryCount")].isNull() && m_retry_count_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_task_root_directory_isValid = ::OpenAPI::fromJsonValue(m_task_root_directory, json[QString("taskRootDirectory")]);
    m_task_root_directory_isSet = !json[QString("taskRootDirectory")].isNull() && m_task_root_directory_isValid;

    m_task_root_directory_url_isValid = ::OpenAPI::fromJsonValue(m_task_root_directory_url, json[QString("taskRootDirectoryUrl")]);
    m_task_root_directory_url_isSet = !json[QString("taskRootDirectoryUrl")].isNull() && m_task_root_directory_url_isValid;
}

QString OAIJobPreparationTaskExecutionInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobPreparationTaskExecutionInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_container_info.isSet()) {
        obj.insert(QString("containerInfo"), ::OpenAPI::toJsonValue(m_container_info));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_failure_info.isSet()) {
        obj.insert(QString("failureInfo"), ::OpenAPI::toJsonValue(m_failure_info));
    }
    if (m_last_retry_time_isSet) {
        obj.insert(QString("lastRetryTime"), ::OpenAPI::toJsonValue(m_last_retry_time));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_retry_count_isSet) {
        obj.insert(QString("retryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_task_root_directory_isSet) {
        obj.insert(QString("taskRootDirectory"), ::OpenAPI::toJsonValue(m_task_root_directory));
    }
    if (m_task_root_directory_url_isSet) {
        obj.insert(QString("taskRootDirectoryUrl"), ::OpenAPI::toJsonValue(m_task_root_directory_url));
    }
    return obj;
}

OAITaskContainerExecutionInformation OAIJobPreparationTaskExecutionInformation::getContainerInfo() const {
    return m_container_info;
}
void OAIJobPreparationTaskExecutionInformation::setContainerInfo(const OAITaskContainerExecutionInformation &container_info) {
    m_container_info = container_info;
    m_container_info_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_container_info_Set() const{
    return m_container_info_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_container_info_Valid() const{
    return m_container_info_isValid;
}

QDateTime OAIJobPreparationTaskExecutionInformation::getEndTime() const {
    return m_end_time;
}
void OAIJobPreparationTaskExecutionInformation::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIJobPreparationTaskExecutionInformation::getExitCode() const {
    return m_exit_code;
}
void OAIJobPreparationTaskExecutionInformation::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

OAITaskFailureInformation OAIJobPreparationTaskExecutionInformation::getFailureInfo() const {
    return m_failure_info;
}
void OAIJobPreparationTaskExecutionInformation::setFailureInfo(const OAITaskFailureInformation &failure_info) {
    m_failure_info = failure_info;
    m_failure_info_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_failure_info_Set() const{
    return m_failure_info_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_failure_info_Valid() const{
    return m_failure_info_isValid;
}

QDateTime OAIJobPreparationTaskExecutionInformation::getLastRetryTime() const {
    return m_last_retry_time;
}
void OAIJobPreparationTaskExecutionInformation::setLastRetryTime(const QDateTime &last_retry_time) {
    m_last_retry_time = last_retry_time;
    m_last_retry_time_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_last_retry_time_Set() const{
    return m_last_retry_time_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_last_retry_time_Valid() const{
    return m_last_retry_time_isValid;
}

OAITaskExecutionResult OAIJobPreparationTaskExecutionInformation::getResult() const {
    return m_result;
}
void OAIJobPreparationTaskExecutionInformation::setResult(const OAITaskExecutionResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_result_Set() const{
    return m_result_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_result_Valid() const{
    return m_result_isValid;
}

qint32 OAIJobPreparationTaskExecutionInformation::getRetryCount() const {
    return m_retry_count;
}
void OAIJobPreparationTaskExecutionInformation::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

QDateTime OAIJobPreparationTaskExecutionInformation::getStartTime() const {
    return m_start_time;
}
void OAIJobPreparationTaskExecutionInformation::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJobPreparationTaskExecutionInformation::getState() const {
    return m_state;
}
void OAIJobPreparationTaskExecutionInformation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIJobPreparationTaskExecutionInformation::getTaskRootDirectory() const {
    return m_task_root_directory;
}
void OAIJobPreparationTaskExecutionInformation::setTaskRootDirectory(const QString &task_root_directory) {
    m_task_root_directory = task_root_directory;
    m_task_root_directory_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_task_root_directory_Set() const{
    return m_task_root_directory_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_task_root_directory_Valid() const{
    return m_task_root_directory_isValid;
}

QString OAIJobPreparationTaskExecutionInformation::getTaskRootDirectoryUrl() const {
    return m_task_root_directory_url;
}
void OAIJobPreparationTaskExecutionInformation::setTaskRootDirectoryUrl(const QString &task_root_directory_url) {
    m_task_root_directory_url = task_root_directory_url;
    m_task_root_directory_url_isSet = true;
}

bool OAIJobPreparationTaskExecutionInformation::is_task_root_directory_url_Set() const{
    return m_task_root_directory_url_isSet;
}

bool OAIJobPreparationTaskExecutionInformation::is_task_root_directory_url_Valid() const{
    return m_task_root_directory_url_isValid;
}

bool OAIJobPreparationTaskExecutionInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_retry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_root_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_root_directory_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobPreparationTaskExecutionInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_retry_count_isValid && m_start_time_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
