/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobPreparationTask.h
 *
 * You can use Job Preparation to prepare a compute node to run tasks for the job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in the job. The Job Preparation task can download these common resource files to the shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR\\shared), or starting a local service on the compute node so that all tasks of that job can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any task of the job. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing.
 */

#ifndef OAIJobPreparationTask_H
#define OAIJobPreparationTask_H

#include <QJsonObject>

#include "OAIEnvironmentSetting.h"
#include "OAIResourceFile.h"
#include "OAITaskConstraints.h"
#include "OAITaskContainerSettings.h"
#include "OAIUserIdentity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITaskConstraints;
class OAITaskContainerSettings;
class OAIEnvironmentSetting;
class OAIResourceFile;
class OAIUserIdentity;

class OAIJobPreparationTask : public OAIObject {
public:
    OAIJobPreparationTask();
    OAIJobPreparationTask(QString json);
    ~OAIJobPreparationTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommandLine() const;
    void setCommandLine(const QString &command_line);
    bool is_command_line_Set() const;
    bool is_command_line_Valid() const;

    OAITaskConstraints getConstraints() const;
    void setConstraints(const OAITaskConstraints &constraints);
    bool is_constraints_Set() const;
    bool is_constraints_Valid() const;

    OAITaskContainerSettings getContainerSettings() const;
    void setContainerSettings(const OAITaskContainerSettings &container_settings);
    bool is_container_settings_Set() const;
    bool is_container_settings_Valid() const;

    QList<OAIEnvironmentSetting> getEnvironmentSettings() const;
    void setEnvironmentSettings(const QList<OAIEnvironmentSetting> &environment_settings);
    bool is_environment_settings_Set() const;
    bool is_environment_settings_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isRerunOnNodeRebootAfterSuccess() const;
    void setRerunOnNodeRebootAfterSuccess(const bool &rerun_on_node_reboot_after_success);
    bool is_rerun_on_node_reboot_after_success_Set() const;
    bool is_rerun_on_node_reboot_after_success_Valid() const;

    QList<OAIResourceFile> getResourceFiles() const;
    void setResourceFiles(const QList<OAIResourceFile> &resource_files);
    bool is_resource_files_Set() const;
    bool is_resource_files_Valid() const;

    OAIUserIdentity getUserIdentity() const;
    void setUserIdentity(const OAIUserIdentity &user_identity);
    bool is_user_identity_Set() const;
    bool is_user_identity_Valid() const;

    bool isWaitForSuccess() const;
    void setWaitForSuccess(const bool &wait_for_success);
    bool is_wait_for_success_Set() const;
    bool is_wait_for_success_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_command_line;
    bool m_command_line_isSet;
    bool m_command_line_isValid;

    OAITaskConstraints m_constraints;
    bool m_constraints_isSet;
    bool m_constraints_isValid;

    OAITaskContainerSettings m_container_settings;
    bool m_container_settings_isSet;
    bool m_container_settings_isValid;

    QList<OAIEnvironmentSetting> m_environment_settings;
    bool m_environment_settings_isSet;
    bool m_environment_settings_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_rerun_on_node_reboot_after_success;
    bool m_rerun_on_node_reboot_after_success_isSet;
    bool m_rerun_on_node_reboot_after_success_isValid;

    QList<OAIResourceFile> m_resource_files;
    bool m_resource_files_isSet;
    bool m_resource_files_isValid;

    OAIUserIdentity m_user_identity;
    bool m_user_identity_isSet;
    bool m_user_identity_isValid;

    bool m_wait_for_success;
    bool m_wait_for_success_isSet;
    bool m_wait_for_success_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobPreparationTask)

#endif // OAIJobPreparationTask_H
