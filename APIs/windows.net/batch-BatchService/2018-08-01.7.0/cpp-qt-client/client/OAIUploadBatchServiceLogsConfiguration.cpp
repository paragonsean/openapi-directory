/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadBatchServiceLogsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadBatchServiceLogsConfiguration::OAIUploadBatchServiceLogsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadBatchServiceLogsConfiguration::OAIUploadBatchServiceLogsConfiguration() {
    this->initializeModel();
}

OAIUploadBatchServiceLogsConfiguration::~OAIUploadBatchServiceLogsConfiguration() {}

void OAIUploadBatchServiceLogsConfiguration::initializeModel() {

    m_container_url_isSet = false;
    m_container_url_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIUploadBatchServiceLogsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadBatchServiceLogsConfiguration::fromJsonObject(QJsonObject json) {

    m_container_url_isValid = ::OpenAPI::fromJsonValue(m_container_url, json[QString("containerUrl")]);
    m_container_url_isSet = !json[QString("containerUrl")].isNull() && m_container_url_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIUploadBatchServiceLogsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadBatchServiceLogsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_container_url_isSet) {
        obj.insert(QString("containerUrl"), ::OpenAPI::toJsonValue(m_container_url));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIUploadBatchServiceLogsConfiguration::getContainerUrl() const {
    return m_container_url;
}
void OAIUploadBatchServiceLogsConfiguration::setContainerUrl(const QString &container_url) {
    m_container_url = container_url;
    m_container_url_isSet = true;
}

bool OAIUploadBatchServiceLogsConfiguration::is_container_url_Set() const{
    return m_container_url_isSet;
}

bool OAIUploadBatchServiceLogsConfiguration::is_container_url_Valid() const{
    return m_container_url_isValid;
}

QDateTime OAIUploadBatchServiceLogsConfiguration::getEndTime() const {
    return m_end_time;
}
void OAIUploadBatchServiceLogsConfiguration::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIUploadBatchServiceLogsConfiguration::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIUploadBatchServiceLogsConfiguration::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIUploadBatchServiceLogsConfiguration::getStartTime() const {
    return m_start_time;
}
void OAIUploadBatchServiceLogsConfiguration::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIUploadBatchServiceLogsConfiguration::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIUploadBatchServiceLogsConfiguration::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIUploadBatchServiceLogsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadBatchServiceLogsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_url_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
