/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskStatistics::OAITaskStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskStatistics::OAITaskStatistics() {
    this->initializeModel();
}

OAITaskStatistics::~OAITaskStatistics() {}

void OAITaskStatistics::initializeModel() {

    m_kernel_cpu_time_isSet = false;
    m_kernel_cpu_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_read_iogi_b_isSet = false;
    m_read_iogi_b_isValid = false;

    m_read_i_ops_isSet = false;
    m_read_i_ops_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_cpu_time_isSet = false;
    m_user_cpu_time_isValid = false;

    m_wait_time_isSet = false;
    m_wait_time_isValid = false;

    m_wall_clock_time_isSet = false;
    m_wall_clock_time_isValid = false;

    m_write_iogi_b_isSet = false;
    m_write_iogi_b_isValid = false;

    m_write_i_ops_isSet = false;
    m_write_i_ops_isValid = false;
}

void OAITaskStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskStatistics::fromJsonObject(QJsonObject json) {

    m_kernel_cpu_time_isValid = ::OpenAPI::fromJsonValue(m_kernel_cpu_time, json[QString("kernelCPUTime")]);
    m_kernel_cpu_time_isSet = !json[QString("kernelCPUTime")].isNull() && m_kernel_cpu_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_read_iogi_b_isValid = ::OpenAPI::fromJsonValue(m_read_iogi_b, json[QString("readIOGiB")]);
    m_read_iogi_b_isSet = !json[QString("readIOGiB")].isNull() && m_read_iogi_b_isValid;

    m_read_i_ops_isValid = ::OpenAPI::fromJsonValue(m_read_i_ops, json[QString("readIOps")]);
    m_read_i_ops_isSet = !json[QString("readIOps")].isNull() && m_read_i_ops_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_cpu_time_isValid = ::OpenAPI::fromJsonValue(m_user_cpu_time, json[QString("userCPUTime")]);
    m_user_cpu_time_isSet = !json[QString("userCPUTime")].isNull() && m_user_cpu_time_isValid;

    m_wait_time_isValid = ::OpenAPI::fromJsonValue(m_wait_time, json[QString("waitTime")]);
    m_wait_time_isSet = !json[QString("waitTime")].isNull() && m_wait_time_isValid;

    m_wall_clock_time_isValid = ::OpenAPI::fromJsonValue(m_wall_clock_time, json[QString("wallClockTime")]);
    m_wall_clock_time_isSet = !json[QString("wallClockTime")].isNull() && m_wall_clock_time_isValid;

    m_write_iogi_b_isValid = ::OpenAPI::fromJsonValue(m_write_iogi_b, json[QString("writeIOGiB")]);
    m_write_iogi_b_isSet = !json[QString("writeIOGiB")].isNull() && m_write_iogi_b_isValid;

    m_write_i_ops_isValid = ::OpenAPI::fromJsonValue(m_write_i_ops, json[QString("writeIOps")]);
    m_write_i_ops_isSet = !json[QString("writeIOps")].isNull() && m_write_i_ops_isValid;
}

QString OAITaskStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_kernel_cpu_time_isSet) {
        obj.insert(QString("kernelCPUTime"), ::OpenAPI::toJsonValue(m_kernel_cpu_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_read_iogi_b_isSet) {
        obj.insert(QString("readIOGiB"), ::OpenAPI::toJsonValue(m_read_iogi_b));
    }
    if (m_read_i_ops_isSet) {
        obj.insert(QString("readIOps"), ::OpenAPI::toJsonValue(m_read_i_ops));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_cpu_time_isSet) {
        obj.insert(QString("userCPUTime"), ::OpenAPI::toJsonValue(m_user_cpu_time));
    }
    if (m_wait_time_isSet) {
        obj.insert(QString("waitTime"), ::OpenAPI::toJsonValue(m_wait_time));
    }
    if (m_wall_clock_time_isSet) {
        obj.insert(QString("wallClockTime"), ::OpenAPI::toJsonValue(m_wall_clock_time));
    }
    if (m_write_iogi_b_isSet) {
        obj.insert(QString("writeIOGiB"), ::OpenAPI::toJsonValue(m_write_iogi_b));
    }
    if (m_write_i_ops_isSet) {
        obj.insert(QString("writeIOps"), ::OpenAPI::toJsonValue(m_write_i_ops));
    }
    return obj;
}

QString OAITaskStatistics::getKernelCpuTime() const {
    return m_kernel_cpu_time;
}
void OAITaskStatistics::setKernelCpuTime(const QString &kernel_cpu_time) {
    m_kernel_cpu_time = kernel_cpu_time;
    m_kernel_cpu_time_isSet = true;
}

bool OAITaskStatistics::is_kernel_cpu_time_Set() const{
    return m_kernel_cpu_time_isSet;
}

bool OAITaskStatistics::is_kernel_cpu_time_Valid() const{
    return m_kernel_cpu_time_isValid;
}

QDateTime OAITaskStatistics::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAITaskStatistics::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAITaskStatistics::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAITaskStatistics::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

double OAITaskStatistics::getReadIogiB() const {
    return m_read_iogi_b;
}
void OAITaskStatistics::setReadIogiB(const double &read_iogi_b) {
    m_read_iogi_b = read_iogi_b;
    m_read_iogi_b_isSet = true;
}

bool OAITaskStatistics::is_read_iogi_b_Set() const{
    return m_read_iogi_b_isSet;
}

bool OAITaskStatistics::is_read_iogi_b_Valid() const{
    return m_read_iogi_b_isValid;
}

qint64 OAITaskStatistics::getReadIOps() const {
    return m_read_i_ops;
}
void OAITaskStatistics::setReadIOps(const qint64 &read_i_ops) {
    m_read_i_ops = read_i_ops;
    m_read_i_ops_isSet = true;
}

bool OAITaskStatistics::is_read_i_ops_Set() const{
    return m_read_i_ops_isSet;
}

bool OAITaskStatistics::is_read_i_ops_Valid() const{
    return m_read_i_ops_isValid;
}

QDateTime OAITaskStatistics::getStartTime() const {
    return m_start_time;
}
void OAITaskStatistics::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITaskStatistics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITaskStatistics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAITaskStatistics::getUrl() const {
    return m_url;
}
void OAITaskStatistics::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITaskStatistics::is_url_Set() const{
    return m_url_isSet;
}

bool OAITaskStatistics::is_url_Valid() const{
    return m_url_isValid;
}

QString OAITaskStatistics::getUserCpuTime() const {
    return m_user_cpu_time;
}
void OAITaskStatistics::setUserCpuTime(const QString &user_cpu_time) {
    m_user_cpu_time = user_cpu_time;
    m_user_cpu_time_isSet = true;
}

bool OAITaskStatistics::is_user_cpu_time_Set() const{
    return m_user_cpu_time_isSet;
}

bool OAITaskStatistics::is_user_cpu_time_Valid() const{
    return m_user_cpu_time_isValid;
}

QString OAITaskStatistics::getWaitTime() const {
    return m_wait_time;
}
void OAITaskStatistics::setWaitTime(const QString &wait_time) {
    m_wait_time = wait_time;
    m_wait_time_isSet = true;
}

bool OAITaskStatistics::is_wait_time_Set() const{
    return m_wait_time_isSet;
}

bool OAITaskStatistics::is_wait_time_Valid() const{
    return m_wait_time_isValid;
}

QString OAITaskStatistics::getWallClockTime() const {
    return m_wall_clock_time;
}
void OAITaskStatistics::setWallClockTime(const QString &wall_clock_time) {
    m_wall_clock_time = wall_clock_time;
    m_wall_clock_time_isSet = true;
}

bool OAITaskStatistics::is_wall_clock_time_Set() const{
    return m_wall_clock_time_isSet;
}

bool OAITaskStatistics::is_wall_clock_time_Valid() const{
    return m_wall_clock_time_isValid;
}

double OAITaskStatistics::getWriteIogiB() const {
    return m_write_iogi_b;
}
void OAITaskStatistics::setWriteIogiB(const double &write_iogi_b) {
    m_write_iogi_b = write_iogi_b;
    m_write_iogi_b_isSet = true;
}

bool OAITaskStatistics::is_write_iogi_b_Set() const{
    return m_write_iogi_b_isSet;
}

bool OAITaskStatistics::is_write_iogi_b_Valid() const{
    return m_write_iogi_b_isValid;
}

qint64 OAITaskStatistics::getWriteIOps() const {
    return m_write_i_ops;
}
void OAITaskStatistics::setWriteIOps(const qint64 &write_i_ops) {
    m_write_i_ops = write_i_ops;
    m_write_i_ops_isSet = true;
}

bool OAITaskStatistics::is_write_i_ops_Set() const{
    return m_write_i_ops_isSet;
}

bool OAITaskStatistics::is_write_i_ops_Valid() const{
    return m_write_i_ops_isValid;
}

bool OAITaskStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kernel_cpu_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_iogi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_i_ops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_cpu_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wall_clock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_iogi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_i_ops_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kernel_cpu_time_isValid && m_last_update_time_isValid && m_read_iogi_b_isValid && m_read_i_ops_isValid && m_start_time_isValid && m_url_isValid && m_user_cpu_time_isValid && m_wait_time_isValid && m_wall_clock_time_isValid && m_write_iogi_b_isValid && m_write_i_ops_isValid && true;
}

} // namespace OpenAPI
