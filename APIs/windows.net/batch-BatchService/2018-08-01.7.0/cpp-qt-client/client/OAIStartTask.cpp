/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTask::OAIStartTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTask::OAIStartTask() {
    this->initializeModel();
}

OAIStartTask::~OAIStartTask() {}

void OAIStartTask::initializeModel() {

    m_command_line_isSet = false;
    m_command_line_isValid = false;

    m_container_settings_isSet = false;
    m_container_settings_isValid = false;

    m_environment_settings_isSet = false;
    m_environment_settings_isValid = false;

    m_max_task_retry_count_isSet = false;
    m_max_task_retry_count_isValid = false;

    m_resource_files_isSet = false;
    m_resource_files_isValid = false;

    m_user_identity_isSet = false;
    m_user_identity_isValid = false;

    m_wait_for_success_isSet = false;
    m_wait_for_success_isValid = false;
}

void OAIStartTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTask::fromJsonObject(QJsonObject json) {

    m_command_line_isValid = ::OpenAPI::fromJsonValue(m_command_line, json[QString("commandLine")]);
    m_command_line_isSet = !json[QString("commandLine")].isNull() && m_command_line_isValid;

    m_container_settings_isValid = ::OpenAPI::fromJsonValue(m_container_settings, json[QString("containerSettings")]);
    m_container_settings_isSet = !json[QString("containerSettings")].isNull() && m_container_settings_isValid;

    m_environment_settings_isValid = ::OpenAPI::fromJsonValue(m_environment_settings, json[QString("environmentSettings")]);
    m_environment_settings_isSet = !json[QString("environmentSettings")].isNull() && m_environment_settings_isValid;

    m_max_task_retry_count_isValid = ::OpenAPI::fromJsonValue(m_max_task_retry_count, json[QString("maxTaskRetryCount")]);
    m_max_task_retry_count_isSet = !json[QString("maxTaskRetryCount")].isNull() && m_max_task_retry_count_isValid;

    m_resource_files_isValid = ::OpenAPI::fromJsonValue(m_resource_files, json[QString("resourceFiles")]);
    m_resource_files_isSet = !json[QString("resourceFiles")].isNull() && m_resource_files_isValid;

    m_user_identity_isValid = ::OpenAPI::fromJsonValue(m_user_identity, json[QString("userIdentity")]);
    m_user_identity_isSet = !json[QString("userIdentity")].isNull() && m_user_identity_isValid;

    m_wait_for_success_isValid = ::OpenAPI::fromJsonValue(m_wait_for_success, json[QString("waitForSuccess")]);
    m_wait_for_success_isSet = !json[QString("waitForSuccess")].isNull() && m_wait_for_success_isValid;
}

QString OAIStartTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTask::asJsonObject() const {
    QJsonObject obj;
    if (m_command_line_isSet) {
        obj.insert(QString("commandLine"), ::OpenAPI::toJsonValue(m_command_line));
    }
    if (m_container_settings.isSet()) {
        obj.insert(QString("containerSettings"), ::OpenAPI::toJsonValue(m_container_settings));
    }
    if (m_environment_settings.size() > 0) {
        obj.insert(QString("environmentSettings"), ::OpenAPI::toJsonValue(m_environment_settings));
    }
    if (m_max_task_retry_count_isSet) {
        obj.insert(QString("maxTaskRetryCount"), ::OpenAPI::toJsonValue(m_max_task_retry_count));
    }
    if (m_resource_files.size() > 0) {
        obj.insert(QString("resourceFiles"), ::OpenAPI::toJsonValue(m_resource_files));
    }
    if (m_user_identity.isSet()) {
        obj.insert(QString("userIdentity"), ::OpenAPI::toJsonValue(m_user_identity));
    }
    if (m_wait_for_success_isSet) {
        obj.insert(QString("waitForSuccess"), ::OpenAPI::toJsonValue(m_wait_for_success));
    }
    return obj;
}

QString OAIStartTask::getCommandLine() const {
    return m_command_line;
}
void OAIStartTask::setCommandLine(const QString &command_line) {
    m_command_line = command_line;
    m_command_line_isSet = true;
}

bool OAIStartTask::is_command_line_Set() const{
    return m_command_line_isSet;
}

bool OAIStartTask::is_command_line_Valid() const{
    return m_command_line_isValid;
}

OAITaskContainerSettings OAIStartTask::getContainerSettings() const {
    return m_container_settings;
}
void OAIStartTask::setContainerSettings(const OAITaskContainerSettings &container_settings) {
    m_container_settings = container_settings;
    m_container_settings_isSet = true;
}

bool OAIStartTask::is_container_settings_Set() const{
    return m_container_settings_isSet;
}

bool OAIStartTask::is_container_settings_Valid() const{
    return m_container_settings_isValid;
}

QList<OAIEnvironmentSetting> OAIStartTask::getEnvironmentSettings() const {
    return m_environment_settings;
}
void OAIStartTask::setEnvironmentSettings(const QList<OAIEnvironmentSetting> &environment_settings) {
    m_environment_settings = environment_settings;
    m_environment_settings_isSet = true;
}

bool OAIStartTask::is_environment_settings_Set() const{
    return m_environment_settings_isSet;
}

bool OAIStartTask::is_environment_settings_Valid() const{
    return m_environment_settings_isValid;
}

qint32 OAIStartTask::getMaxTaskRetryCount() const {
    return m_max_task_retry_count;
}
void OAIStartTask::setMaxTaskRetryCount(const qint32 &max_task_retry_count) {
    m_max_task_retry_count = max_task_retry_count;
    m_max_task_retry_count_isSet = true;
}

bool OAIStartTask::is_max_task_retry_count_Set() const{
    return m_max_task_retry_count_isSet;
}

bool OAIStartTask::is_max_task_retry_count_Valid() const{
    return m_max_task_retry_count_isValid;
}

QList<OAIResourceFile> OAIStartTask::getResourceFiles() const {
    return m_resource_files;
}
void OAIStartTask::setResourceFiles(const QList<OAIResourceFile> &resource_files) {
    m_resource_files = resource_files;
    m_resource_files_isSet = true;
}

bool OAIStartTask::is_resource_files_Set() const{
    return m_resource_files_isSet;
}

bool OAIStartTask::is_resource_files_Valid() const{
    return m_resource_files_isValid;
}

OAIUserIdentity OAIStartTask::getUserIdentity() const {
    return m_user_identity;
}
void OAIStartTask::setUserIdentity(const OAIUserIdentity &user_identity) {
    m_user_identity = user_identity;
    m_user_identity_isSet = true;
}

bool OAIStartTask::is_user_identity_Set() const{
    return m_user_identity_isSet;
}

bool OAIStartTask::is_user_identity_Valid() const{
    return m_user_identity_isValid;
}

bool OAIStartTask::isWaitForSuccess() const {
    return m_wait_for_success;
}
void OAIStartTask::setWaitForSuccess(const bool &wait_for_success) {
    m_wait_for_success = wait_for_success;
    m_wait_for_success_isSet = true;
}

bool OAIStartTask::is_wait_for_success_Set() const{
    return m_wait_for_success_isSet;
}

bool OAIStartTask::is_wait_for_success_Valid() const{
    return m_wait_for_success_isValid;
}

bool OAIStartTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_task_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_for_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_command_line_isValid && true;
}

} // namespace OpenAPI
