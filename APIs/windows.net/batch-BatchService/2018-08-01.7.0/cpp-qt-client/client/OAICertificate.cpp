/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate::OAICertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate::OAICertificate() {
    this->initializeModel();
}

OAICertificate::~OAICertificate() {}

void OAICertificate::initializeModel() {

    m_delete_certificate_error_isSet = false;
    m_delete_certificate_error_isValid = false;

    m_previous_state_isSet = false;
    m_previous_state_isValid = false;

    m_previous_state_transition_time_isSet = false;
    m_previous_state_transition_time_isValid = false;

    m_public_data_isSet = false;
    m_public_data_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_transition_time_isSet = false;
    m_state_transition_time_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_thumbprint_algorithm_isSet = false;
    m_thumbprint_algorithm_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate::fromJsonObject(QJsonObject json) {

    m_delete_certificate_error_isValid = ::OpenAPI::fromJsonValue(m_delete_certificate_error, json[QString("deleteCertificateError")]);
    m_delete_certificate_error_isSet = !json[QString("deleteCertificateError")].isNull() && m_delete_certificate_error_isValid;

    m_previous_state_isValid = ::OpenAPI::fromJsonValue(m_previous_state, json[QString("previousState")]);
    m_previous_state_isSet = !json[QString("previousState")].isNull() && m_previous_state_isValid;

    m_previous_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_previous_state_transition_time, json[QString("previousStateTransitionTime")]);
    m_previous_state_transition_time_isSet = !json[QString("previousStateTransitionTime")].isNull() && m_previous_state_transition_time_isValid;

    m_public_data_isValid = ::OpenAPI::fromJsonValue(m_public_data, json[QString("publicData")]);
    m_public_data_isSet = !json[QString("publicData")].isNull() && m_public_data_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_state_transition_time, json[QString("stateTransitionTime")]);
    m_state_transition_time_isSet = !json[QString("stateTransitionTime")].isNull() && m_state_transition_time_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_thumbprint_algorithm_isValid = ::OpenAPI::fromJsonValue(m_thumbprint_algorithm, json[QString("thumbprintAlgorithm")]);
    m_thumbprint_algorithm_isSet = !json[QString("thumbprintAlgorithm")].isNull() && m_thumbprint_algorithm_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_delete_certificate_error.isSet()) {
        obj.insert(QString("deleteCertificateError"), ::OpenAPI::toJsonValue(m_delete_certificate_error));
    }
    if (m_previous_state.isSet()) {
        obj.insert(QString("previousState"), ::OpenAPI::toJsonValue(m_previous_state));
    }
    if (m_previous_state_transition_time_isSet) {
        obj.insert(QString("previousStateTransitionTime"), ::OpenAPI::toJsonValue(m_previous_state_transition_time));
    }
    if (m_public_data_isSet) {
        obj.insert(QString("publicData"), ::OpenAPI::toJsonValue(m_public_data));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_transition_time_isSet) {
        obj.insert(QString("stateTransitionTime"), ::OpenAPI::toJsonValue(m_state_transition_time));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_thumbprint_algorithm_isSet) {
        obj.insert(QString("thumbprintAlgorithm"), ::OpenAPI::toJsonValue(m_thumbprint_algorithm));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIDeleteCertificateError OAICertificate::getDeleteCertificateError() const {
    return m_delete_certificate_error;
}
void OAICertificate::setDeleteCertificateError(const OAIDeleteCertificateError &delete_certificate_error) {
    m_delete_certificate_error = delete_certificate_error;
    m_delete_certificate_error_isSet = true;
}

bool OAICertificate::is_delete_certificate_error_Set() const{
    return m_delete_certificate_error_isSet;
}

bool OAICertificate::is_delete_certificate_error_Valid() const{
    return m_delete_certificate_error_isValid;
}

OAICertificateState OAICertificate::getPreviousState() const {
    return m_previous_state;
}
void OAICertificate::setPreviousState(const OAICertificateState &previous_state) {
    m_previous_state = previous_state;
    m_previous_state_isSet = true;
}

bool OAICertificate::is_previous_state_Set() const{
    return m_previous_state_isSet;
}

bool OAICertificate::is_previous_state_Valid() const{
    return m_previous_state_isValid;
}

QDateTime OAICertificate::getPreviousStateTransitionTime() const {
    return m_previous_state_transition_time;
}
void OAICertificate::setPreviousStateTransitionTime(const QDateTime &previous_state_transition_time) {
    m_previous_state_transition_time = previous_state_transition_time;
    m_previous_state_transition_time_isSet = true;
}

bool OAICertificate::is_previous_state_transition_time_Set() const{
    return m_previous_state_transition_time_isSet;
}

bool OAICertificate::is_previous_state_transition_time_Valid() const{
    return m_previous_state_transition_time_isValid;
}

QString OAICertificate::getPublicData() const {
    return m_public_data;
}
void OAICertificate::setPublicData(const QString &public_data) {
    m_public_data = public_data;
    m_public_data_isSet = true;
}

bool OAICertificate::is_public_data_Set() const{
    return m_public_data_isSet;
}

bool OAICertificate::is_public_data_Valid() const{
    return m_public_data_isValid;
}

OAICertificateState OAICertificate::getState() const {
    return m_state;
}
void OAICertificate::setState(const OAICertificateState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICertificate::is_state_Set() const{
    return m_state_isSet;
}

bool OAICertificate::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICertificate::getStateTransitionTime() const {
    return m_state_transition_time;
}
void OAICertificate::setStateTransitionTime(const QDateTime &state_transition_time) {
    m_state_transition_time = state_transition_time;
    m_state_transition_time_isSet = true;
}

bool OAICertificate::is_state_transition_time_Set() const{
    return m_state_transition_time_isSet;
}

bool OAICertificate::is_state_transition_time_Valid() const{
    return m_state_transition_time_isValid;
}

QString OAICertificate::getThumbprint() const {
    return m_thumbprint;
}
void OAICertificate::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAICertificate::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAICertificate::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QString OAICertificate::getThumbprintAlgorithm() const {
    return m_thumbprint_algorithm;
}
void OAICertificate::setThumbprintAlgorithm(const QString &thumbprint_algorithm) {
    m_thumbprint_algorithm = thumbprint_algorithm;
    m_thumbprint_algorithm_isSet = true;
}

bool OAICertificate::is_thumbprint_algorithm_Set() const{
    return m_thumbprint_algorithm_isSet;
}

bool OAICertificate::is_thumbprint_algorithm_Valid() const{
    return m_thumbprint_algorithm_isValid;
}

QString OAICertificate::getUrl() const {
    return m_url;
}
void OAICertificate::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICertificate::is_url_Set() const{
    return m_url_isSet;
}

bool OAICertificate::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delete_certificate_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
