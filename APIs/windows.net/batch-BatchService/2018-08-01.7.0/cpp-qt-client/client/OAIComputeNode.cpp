/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeNode::OAIComputeNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeNode::OAIComputeNode() {
    this->initializeModel();
}

OAIComputeNode::~OAIComputeNode() {}

void OAIComputeNode::initializeModel() {

    m_affinity_id_isSet = false;
    m_affinity_id_isValid = false;

    m_allocation_time_isSet = false;
    m_allocation_time_isValid = false;

    m_certificate_references_isSet = false;
    m_certificate_references_isValid = false;

    m_endpoint_configuration_isSet = false;
    m_endpoint_configuration_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_is_dedicated_isSet = false;
    m_is_dedicated_isValid = false;

    m_last_boot_time_isSet = false;
    m_last_boot_time_isValid = false;

    m_node_agent_info_isSet = false;
    m_node_agent_info_isValid = false;

    m_recent_tasks_isSet = false;
    m_recent_tasks_isValid = false;

    m_running_tasks_count_isSet = false;
    m_running_tasks_count_isValid = false;

    m_scheduling_state_isSet = false;
    m_scheduling_state_isValid = false;

    m_start_task_isSet = false;
    m_start_task_isValid = false;

    m_start_task_info_isSet = false;
    m_start_task_info_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_transition_time_isSet = false;
    m_state_transition_time_isValid = false;

    m_total_tasks_run_isSet = false;
    m_total_tasks_run_isValid = false;

    m_total_tasks_succeeded_isSet = false;
    m_total_tasks_succeeded_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAIComputeNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputeNode::fromJsonObject(QJsonObject json) {

    m_affinity_id_isValid = ::OpenAPI::fromJsonValue(m_affinity_id, json[QString("affinityId")]);
    m_affinity_id_isSet = !json[QString("affinityId")].isNull() && m_affinity_id_isValid;

    m_allocation_time_isValid = ::OpenAPI::fromJsonValue(m_allocation_time, json[QString("allocationTime")]);
    m_allocation_time_isSet = !json[QString("allocationTime")].isNull() && m_allocation_time_isValid;

    m_certificate_references_isValid = ::OpenAPI::fromJsonValue(m_certificate_references, json[QString("certificateReferences")]);
    m_certificate_references_isSet = !json[QString("certificateReferences")].isNull() && m_certificate_references_isValid;

    m_endpoint_configuration_isValid = ::OpenAPI::fromJsonValue(m_endpoint_configuration, json[QString("endpointConfiguration")]);
    m_endpoint_configuration_isSet = !json[QString("endpointConfiguration")].isNull() && m_endpoint_configuration_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_is_dedicated_isValid = ::OpenAPI::fromJsonValue(m_is_dedicated, json[QString("isDedicated")]);
    m_is_dedicated_isSet = !json[QString("isDedicated")].isNull() && m_is_dedicated_isValid;

    m_last_boot_time_isValid = ::OpenAPI::fromJsonValue(m_last_boot_time, json[QString("lastBootTime")]);
    m_last_boot_time_isSet = !json[QString("lastBootTime")].isNull() && m_last_boot_time_isValid;

    m_node_agent_info_isValid = ::OpenAPI::fromJsonValue(m_node_agent_info, json[QString("nodeAgentInfo")]);
    m_node_agent_info_isSet = !json[QString("nodeAgentInfo")].isNull() && m_node_agent_info_isValid;

    m_recent_tasks_isValid = ::OpenAPI::fromJsonValue(m_recent_tasks, json[QString("recentTasks")]);
    m_recent_tasks_isSet = !json[QString("recentTasks")].isNull() && m_recent_tasks_isValid;

    m_running_tasks_count_isValid = ::OpenAPI::fromJsonValue(m_running_tasks_count, json[QString("runningTasksCount")]);
    m_running_tasks_count_isSet = !json[QString("runningTasksCount")].isNull() && m_running_tasks_count_isValid;

    m_scheduling_state_isValid = ::OpenAPI::fromJsonValue(m_scheduling_state, json[QString("schedulingState")]);
    m_scheduling_state_isSet = !json[QString("schedulingState")].isNull() && m_scheduling_state_isValid;

    m_start_task_isValid = ::OpenAPI::fromJsonValue(m_start_task, json[QString("startTask")]);
    m_start_task_isSet = !json[QString("startTask")].isNull() && m_start_task_isValid;

    m_start_task_info_isValid = ::OpenAPI::fromJsonValue(m_start_task_info, json[QString("startTaskInfo")]);
    m_start_task_info_isSet = !json[QString("startTaskInfo")].isNull() && m_start_task_info_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_state_transition_time, json[QString("stateTransitionTime")]);
    m_state_transition_time_isSet = !json[QString("stateTransitionTime")].isNull() && m_state_transition_time_isValid;

    m_total_tasks_run_isValid = ::OpenAPI::fromJsonValue(m_total_tasks_run, json[QString("totalTasksRun")]);
    m_total_tasks_run_isSet = !json[QString("totalTasksRun")].isNull() && m_total_tasks_run_isValid;

    m_total_tasks_succeeded_isValid = ::OpenAPI::fromJsonValue(m_total_tasks_succeeded, json[QString("totalTasksSucceeded")]);
    m_total_tasks_succeeded_isSet = !json[QString("totalTasksSucceeded")].isNull() && m_total_tasks_succeeded_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAIComputeNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputeNode::asJsonObject() const {
    QJsonObject obj;
    if (m_affinity_id_isSet) {
        obj.insert(QString("affinityId"), ::OpenAPI::toJsonValue(m_affinity_id));
    }
    if (m_allocation_time_isSet) {
        obj.insert(QString("allocationTime"), ::OpenAPI::toJsonValue(m_allocation_time));
    }
    if (m_certificate_references.size() > 0) {
        obj.insert(QString("certificateReferences"), ::OpenAPI::toJsonValue(m_certificate_references));
    }
    if (m_endpoint_configuration.isSet()) {
        obj.insert(QString("endpointConfiguration"), ::OpenAPI::toJsonValue(m_endpoint_configuration));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_is_dedicated_isSet) {
        obj.insert(QString("isDedicated"), ::OpenAPI::toJsonValue(m_is_dedicated));
    }
    if (m_last_boot_time_isSet) {
        obj.insert(QString("lastBootTime"), ::OpenAPI::toJsonValue(m_last_boot_time));
    }
    if (m_node_agent_info.isSet()) {
        obj.insert(QString("nodeAgentInfo"), ::OpenAPI::toJsonValue(m_node_agent_info));
    }
    if (m_recent_tasks.size() > 0) {
        obj.insert(QString("recentTasks"), ::OpenAPI::toJsonValue(m_recent_tasks));
    }
    if (m_running_tasks_count_isSet) {
        obj.insert(QString("runningTasksCount"), ::OpenAPI::toJsonValue(m_running_tasks_count));
    }
    if (m_scheduling_state_isSet) {
        obj.insert(QString("schedulingState"), ::OpenAPI::toJsonValue(m_scheduling_state));
    }
    if (m_start_task.isSet()) {
        obj.insert(QString("startTask"), ::OpenAPI::toJsonValue(m_start_task));
    }
    if (m_start_task_info.isSet()) {
        obj.insert(QString("startTaskInfo"), ::OpenAPI::toJsonValue(m_start_task_info));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_transition_time_isSet) {
        obj.insert(QString("stateTransitionTime"), ::OpenAPI::toJsonValue(m_state_transition_time));
    }
    if (m_total_tasks_run_isSet) {
        obj.insert(QString("totalTasksRun"), ::OpenAPI::toJsonValue(m_total_tasks_run));
    }
    if (m_total_tasks_succeeded_isSet) {
        obj.insert(QString("totalTasksSucceeded"), ::OpenAPI::toJsonValue(m_total_tasks_succeeded));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

QString OAIComputeNode::getAffinityId() const {
    return m_affinity_id;
}
void OAIComputeNode::setAffinityId(const QString &affinity_id) {
    m_affinity_id = affinity_id;
    m_affinity_id_isSet = true;
}

bool OAIComputeNode::is_affinity_id_Set() const{
    return m_affinity_id_isSet;
}

bool OAIComputeNode::is_affinity_id_Valid() const{
    return m_affinity_id_isValid;
}

QDateTime OAIComputeNode::getAllocationTime() const {
    return m_allocation_time;
}
void OAIComputeNode::setAllocationTime(const QDateTime &allocation_time) {
    m_allocation_time = allocation_time;
    m_allocation_time_isSet = true;
}

bool OAIComputeNode::is_allocation_time_Set() const{
    return m_allocation_time_isSet;
}

bool OAIComputeNode::is_allocation_time_Valid() const{
    return m_allocation_time_isValid;
}

QList<OAICertificateReference> OAIComputeNode::getCertificateReferences() const {
    return m_certificate_references;
}
void OAIComputeNode::setCertificateReferences(const QList<OAICertificateReference> &certificate_references) {
    m_certificate_references = certificate_references;
    m_certificate_references_isSet = true;
}

bool OAIComputeNode::is_certificate_references_Set() const{
    return m_certificate_references_isSet;
}

bool OAIComputeNode::is_certificate_references_Valid() const{
    return m_certificate_references_isValid;
}

OAIComputeNodeEndpointConfiguration OAIComputeNode::getEndpointConfiguration() const {
    return m_endpoint_configuration;
}
void OAIComputeNode::setEndpointConfiguration(const OAIComputeNodeEndpointConfiguration &endpoint_configuration) {
    m_endpoint_configuration = endpoint_configuration;
    m_endpoint_configuration_isSet = true;
}

bool OAIComputeNode::is_endpoint_configuration_Set() const{
    return m_endpoint_configuration_isSet;
}

bool OAIComputeNode::is_endpoint_configuration_Valid() const{
    return m_endpoint_configuration_isValid;
}

QList<OAIComputeNodeError> OAIComputeNode::getErrors() const {
    return m_errors;
}
void OAIComputeNode::setErrors(const QList<OAIComputeNodeError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIComputeNode::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIComputeNode::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIComputeNode::getId() const {
    return m_id;
}
void OAIComputeNode::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComputeNode::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComputeNode::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIComputeNode::getIpAddress() const {
    return m_ip_address;
}
void OAIComputeNode::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIComputeNode::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIComputeNode::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

bool OAIComputeNode::isIsDedicated() const {
    return m_is_dedicated;
}
void OAIComputeNode::setIsDedicated(const bool &is_dedicated) {
    m_is_dedicated = is_dedicated;
    m_is_dedicated_isSet = true;
}

bool OAIComputeNode::is_is_dedicated_Set() const{
    return m_is_dedicated_isSet;
}

bool OAIComputeNode::is_is_dedicated_Valid() const{
    return m_is_dedicated_isValid;
}

QDateTime OAIComputeNode::getLastBootTime() const {
    return m_last_boot_time;
}
void OAIComputeNode::setLastBootTime(const QDateTime &last_boot_time) {
    m_last_boot_time = last_boot_time;
    m_last_boot_time_isSet = true;
}

bool OAIComputeNode::is_last_boot_time_Set() const{
    return m_last_boot_time_isSet;
}

bool OAIComputeNode::is_last_boot_time_Valid() const{
    return m_last_boot_time_isValid;
}

OAINodeAgentInformation OAIComputeNode::getNodeAgentInfo() const {
    return m_node_agent_info;
}
void OAIComputeNode::setNodeAgentInfo(const OAINodeAgentInformation &node_agent_info) {
    m_node_agent_info = node_agent_info;
    m_node_agent_info_isSet = true;
}

bool OAIComputeNode::is_node_agent_info_Set() const{
    return m_node_agent_info_isSet;
}

bool OAIComputeNode::is_node_agent_info_Valid() const{
    return m_node_agent_info_isValid;
}

QList<OAITaskInformation> OAIComputeNode::getRecentTasks() const {
    return m_recent_tasks;
}
void OAIComputeNode::setRecentTasks(const QList<OAITaskInformation> &recent_tasks) {
    m_recent_tasks = recent_tasks;
    m_recent_tasks_isSet = true;
}

bool OAIComputeNode::is_recent_tasks_Set() const{
    return m_recent_tasks_isSet;
}

bool OAIComputeNode::is_recent_tasks_Valid() const{
    return m_recent_tasks_isValid;
}

qint32 OAIComputeNode::getRunningTasksCount() const {
    return m_running_tasks_count;
}
void OAIComputeNode::setRunningTasksCount(const qint32 &running_tasks_count) {
    m_running_tasks_count = running_tasks_count;
    m_running_tasks_count_isSet = true;
}

bool OAIComputeNode::is_running_tasks_count_Set() const{
    return m_running_tasks_count_isSet;
}

bool OAIComputeNode::is_running_tasks_count_Valid() const{
    return m_running_tasks_count_isValid;
}

QString OAIComputeNode::getSchedulingState() const {
    return m_scheduling_state;
}
void OAIComputeNode::setSchedulingState(const QString &scheduling_state) {
    m_scheduling_state = scheduling_state;
    m_scheduling_state_isSet = true;
}

bool OAIComputeNode::is_scheduling_state_Set() const{
    return m_scheduling_state_isSet;
}

bool OAIComputeNode::is_scheduling_state_Valid() const{
    return m_scheduling_state_isValid;
}

OAIStartTask OAIComputeNode::getStartTask() const {
    return m_start_task;
}
void OAIComputeNode::setStartTask(const OAIStartTask &start_task) {
    m_start_task = start_task;
    m_start_task_isSet = true;
}

bool OAIComputeNode::is_start_task_Set() const{
    return m_start_task_isSet;
}

bool OAIComputeNode::is_start_task_Valid() const{
    return m_start_task_isValid;
}

OAIStartTaskInformation OAIComputeNode::getStartTaskInfo() const {
    return m_start_task_info;
}
void OAIComputeNode::setStartTaskInfo(const OAIStartTaskInformation &start_task_info) {
    m_start_task_info = start_task_info;
    m_start_task_info_isSet = true;
}

bool OAIComputeNode::is_start_task_info_Set() const{
    return m_start_task_info_isSet;
}

bool OAIComputeNode::is_start_task_info_Valid() const{
    return m_start_task_info_isValid;
}

QString OAIComputeNode::getState() const {
    return m_state;
}
void OAIComputeNode::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIComputeNode::is_state_Set() const{
    return m_state_isSet;
}

bool OAIComputeNode::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIComputeNode::getStateTransitionTime() const {
    return m_state_transition_time;
}
void OAIComputeNode::setStateTransitionTime(const QDateTime &state_transition_time) {
    m_state_transition_time = state_transition_time;
    m_state_transition_time_isSet = true;
}

bool OAIComputeNode::is_state_transition_time_Set() const{
    return m_state_transition_time_isSet;
}

bool OAIComputeNode::is_state_transition_time_Valid() const{
    return m_state_transition_time_isValid;
}

qint32 OAIComputeNode::getTotalTasksRun() const {
    return m_total_tasks_run;
}
void OAIComputeNode::setTotalTasksRun(const qint32 &total_tasks_run) {
    m_total_tasks_run = total_tasks_run;
    m_total_tasks_run_isSet = true;
}

bool OAIComputeNode::is_total_tasks_run_Set() const{
    return m_total_tasks_run_isSet;
}

bool OAIComputeNode::is_total_tasks_run_Valid() const{
    return m_total_tasks_run_isValid;
}

qint32 OAIComputeNode::getTotalTasksSucceeded() const {
    return m_total_tasks_succeeded;
}
void OAIComputeNode::setTotalTasksSucceeded(const qint32 &total_tasks_succeeded) {
    m_total_tasks_succeeded = total_tasks_succeeded;
    m_total_tasks_succeeded_isSet = true;
}

bool OAIComputeNode::is_total_tasks_succeeded_Set() const{
    return m_total_tasks_succeeded_isSet;
}

bool OAIComputeNode::is_total_tasks_succeeded_Valid() const{
    return m_total_tasks_succeeded_isValid;
}

QString OAIComputeNode::getUrl() const {
    return m_url;
}
void OAIComputeNode::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIComputeNode::is_url_Set() const{
    return m_url_isSet;
}

bool OAIComputeNode::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIComputeNode::getVmSize() const {
    return m_vm_size;
}
void OAIComputeNode::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIComputeNode::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIComputeNode::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAIComputeNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affinity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dedicated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_boot_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_agent_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_tasks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_task_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tasks_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tasks_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputeNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
