/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerConfiguration::OAIContainerConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerConfiguration::OAIContainerConfiguration() {
    this->initializeModel();
}

OAIContainerConfiguration::~OAIContainerConfiguration() {}

void OAIContainerConfiguration::initializeModel() {

    m_container_image_names_isSet = false;
    m_container_image_names_isValid = false;

    m_container_registries_isSet = false;
    m_container_registries_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIContainerConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerConfiguration::fromJsonObject(QJsonObject json) {

    m_container_image_names_isValid = ::OpenAPI::fromJsonValue(m_container_image_names, json[QString("containerImageNames")]);
    m_container_image_names_isSet = !json[QString("containerImageNames")].isNull() && m_container_image_names_isValid;

    m_container_registries_isValid = ::OpenAPI::fromJsonValue(m_container_registries, json[QString("containerRegistries")]);
    m_container_registries_isSet = !json[QString("containerRegistries")].isNull() && m_container_registries_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIContainerConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_container_image_names.size() > 0) {
        obj.insert(QString("containerImageNames"), ::OpenAPI::toJsonValue(m_container_image_names));
    }
    if (m_container_registries.size() > 0) {
        obj.insert(QString("containerRegistries"), ::OpenAPI::toJsonValue(m_container_registries));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIContainerConfiguration::getContainerImageNames() const {
    return m_container_image_names;
}
void OAIContainerConfiguration::setContainerImageNames(const QList<QString> &container_image_names) {
    m_container_image_names = container_image_names;
    m_container_image_names_isSet = true;
}

bool OAIContainerConfiguration::is_container_image_names_Set() const{
    return m_container_image_names_isSet;
}

bool OAIContainerConfiguration::is_container_image_names_Valid() const{
    return m_container_image_names_isValid;
}

QList<OAIContainerRegistry> OAIContainerConfiguration::getContainerRegistries() const {
    return m_container_registries;
}
void OAIContainerConfiguration::setContainerRegistries(const QList<OAIContainerRegistry> &container_registries) {
    m_container_registries = container_registries;
    m_container_registries_isSet = true;
}

bool OAIContainerConfiguration::is_container_registries_Set() const{
    return m_container_registries_isSet;
}

bool OAIContainerConfiguration::is_container_registries_Valid() const{
    return m_container_registries_isValid;
}

QString OAIContainerConfiguration::getType() const {
    return m_type;
}
void OAIContainerConfiguration::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContainerConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContainerConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIContainerConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_image_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
