/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-08-01.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICloudPool.h
 *
 * 
 */

#ifndef OAICloudPool_H
#define OAICloudPool_H

#include <QJsonObject>

#include "OAIApplicationPackageReference.h"
#include "OAIAutoScaleRun.h"
#include "OAICertificateReference.h"
#include "OAICloudServiceConfiguration.h"
#include "OAIMetadataItem.h"
#include "OAINetworkConfiguration.h"
#include "OAIPoolStatistics.h"
#include "OAIResizeError.h"
#include "OAIStartTask.h"
#include "OAITaskSchedulingPolicy.h"
#include "OAIUserAccount.h"
#include "OAIVirtualMachineConfiguration.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplicationPackageReference;
class OAIAutoScaleRun;
class OAICertificateReference;
class OAICloudServiceConfiguration;
class OAIMetadataItem;
class OAINetworkConfiguration;
class OAIResizeError;
class OAIStartTask;
class OAIPoolStatistics;
class OAITaskSchedulingPolicy;
class OAIUserAccount;
class OAIVirtualMachineConfiguration;

class OAICloudPool : public OAIObject {
public:
    OAICloudPool();
    OAICloudPool(QString json);
    ~OAICloudPool() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllocationState() const;
    void setAllocationState(const QString &allocation_state);
    bool is_allocation_state_Set() const;
    bool is_allocation_state_Valid() const;

    QDateTime getAllocationStateTransitionTime() const;
    void setAllocationStateTransitionTime(const QDateTime &allocation_state_transition_time);
    bool is_allocation_state_transition_time_Set() const;
    bool is_allocation_state_transition_time_Valid() const;

    QList<QString> getApplicationLicenses() const;
    void setApplicationLicenses(const QList<QString> &application_licenses);
    bool is_application_licenses_Set() const;
    bool is_application_licenses_Valid() const;

    QList<OAIApplicationPackageReference> getApplicationPackageReferences() const;
    void setApplicationPackageReferences(const QList<OAIApplicationPackageReference> &application_package_references);
    bool is_application_package_references_Set() const;
    bool is_application_package_references_Valid() const;

    QString getAutoScaleEvaluationInterval() const;
    void setAutoScaleEvaluationInterval(const QString &auto_scale_evaluation_interval);
    bool is_auto_scale_evaluation_interval_Set() const;
    bool is_auto_scale_evaluation_interval_Valid() const;

    QString getAutoScaleFormula() const;
    void setAutoScaleFormula(const QString &auto_scale_formula);
    bool is_auto_scale_formula_Set() const;
    bool is_auto_scale_formula_Valid() const;

    OAIAutoScaleRun getAutoScaleRun() const;
    void setAutoScaleRun(const OAIAutoScaleRun &auto_scale_run);
    bool is_auto_scale_run_Set() const;
    bool is_auto_scale_run_Valid() const;

    QList<OAICertificateReference> getCertificateReferences() const;
    void setCertificateReferences(const QList<OAICertificateReference> &certificate_references);
    bool is_certificate_references_Set() const;
    bool is_certificate_references_Valid() const;

    OAICloudServiceConfiguration getCloudServiceConfiguration() const;
    void setCloudServiceConfiguration(const OAICloudServiceConfiguration &cloud_service_configuration);
    bool is_cloud_service_configuration_Set() const;
    bool is_cloud_service_configuration_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    qint32 getCurrentDedicatedNodes() const;
    void setCurrentDedicatedNodes(const qint32 &current_dedicated_nodes);
    bool is_current_dedicated_nodes_Set() const;
    bool is_current_dedicated_nodes_Valid() const;

    qint32 getCurrentLowPriorityNodes() const;
    void setCurrentLowPriorityNodes(const qint32 &current_low_priority_nodes);
    bool is_current_low_priority_nodes_Set() const;
    bool is_current_low_priority_nodes_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getETag() const;
    void setETag(const QString &e_tag);
    bool is_e_tag_Set() const;
    bool is_e_tag_Valid() const;

    bool isEnableAutoScale() const;
    void setEnableAutoScale(const bool &enable_auto_scale);
    bool is_enable_auto_scale_Set() const;
    bool is_enable_auto_scale_Valid() const;

    bool isEnableInterNodeCommunication() const;
    void setEnableInterNodeCommunication(const bool &enable_inter_node_communication);
    bool is_enable_inter_node_communication_Set() const;
    bool is_enable_inter_node_communication_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastModified() const;
    void setLastModified(const QDateTime &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    qint32 getMaxTasksPerNode() const;
    void setMaxTasksPerNode(const qint32 &max_tasks_per_node);
    bool is_max_tasks_per_node_Set() const;
    bool is_max_tasks_per_node_Valid() const;

    QList<OAIMetadataItem> getMetadata() const;
    void setMetadata(const QList<OAIMetadataItem> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    OAINetworkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAINetworkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    QList<OAIResizeError> getResizeErrors() const;
    void setResizeErrors(const QList<OAIResizeError> &resize_errors);
    bool is_resize_errors_Set() const;
    bool is_resize_errors_Valid() const;

    QString getResizeTimeout() const;
    void setResizeTimeout(const QString &resize_timeout);
    bool is_resize_timeout_Set() const;
    bool is_resize_timeout_Valid() const;

    OAIStartTask getStartTask() const;
    void setStartTask(const OAIStartTask &start_task);
    bool is_start_task_Set() const;
    bool is_start_task_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getStateTransitionTime() const;
    void setStateTransitionTime(const QDateTime &state_transition_time);
    bool is_state_transition_time_Set() const;
    bool is_state_transition_time_Valid() const;

    OAIPoolStatistics getStats() const;
    void setStats(const OAIPoolStatistics &stats);
    bool is_stats_Set() const;
    bool is_stats_Valid() const;

    qint32 getTargetDedicatedNodes() const;
    void setTargetDedicatedNodes(const qint32 &target_dedicated_nodes);
    bool is_target_dedicated_nodes_Set() const;
    bool is_target_dedicated_nodes_Valid() const;

    qint32 getTargetLowPriorityNodes() const;
    void setTargetLowPriorityNodes(const qint32 &target_low_priority_nodes);
    bool is_target_low_priority_nodes_Set() const;
    bool is_target_low_priority_nodes_Valid() const;

    OAITaskSchedulingPolicy getTaskSchedulingPolicy() const;
    void setTaskSchedulingPolicy(const OAITaskSchedulingPolicy &task_scheduling_policy);
    bool is_task_scheduling_policy_Set() const;
    bool is_task_scheduling_policy_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QList<OAIUserAccount> getUserAccounts() const;
    void setUserAccounts(const QList<OAIUserAccount> &user_accounts);
    bool is_user_accounts_Set() const;
    bool is_user_accounts_Valid() const;

    OAIVirtualMachineConfiguration getVirtualMachineConfiguration() const;
    void setVirtualMachineConfiguration(const OAIVirtualMachineConfiguration &virtual_machine_configuration);
    bool is_virtual_machine_configuration_Set() const;
    bool is_virtual_machine_configuration_Valid() const;

    QString getVmSize() const;
    void setVmSize(const QString &vm_size);
    bool is_vm_size_Set() const;
    bool is_vm_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allocation_state;
    bool m_allocation_state_isSet;
    bool m_allocation_state_isValid;

    QDateTime m_allocation_state_transition_time;
    bool m_allocation_state_transition_time_isSet;
    bool m_allocation_state_transition_time_isValid;

    QList<QString> m_application_licenses;
    bool m_application_licenses_isSet;
    bool m_application_licenses_isValid;

    QList<OAIApplicationPackageReference> m_application_package_references;
    bool m_application_package_references_isSet;
    bool m_application_package_references_isValid;

    QString m_auto_scale_evaluation_interval;
    bool m_auto_scale_evaluation_interval_isSet;
    bool m_auto_scale_evaluation_interval_isValid;

    QString m_auto_scale_formula;
    bool m_auto_scale_formula_isSet;
    bool m_auto_scale_formula_isValid;

    OAIAutoScaleRun m_auto_scale_run;
    bool m_auto_scale_run_isSet;
    bool m_auto_scale_run_isValid;

    QList<OAICertificateReference> m_certificate_references;
    bool m_certificate_references_isSet;
    bool m_certificate_references_isValid;

    OAICloudServiceConfiguration m_cloud_service_configuration;
    bool m_cloud_service_configuration_isSet;
    bool m_cloud_service_configuration_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    qint32 m_current_dedicated_nodes;
    bool m_current_dedicated_nodes_isSet;
    bool m_current_dedicated_nodes_isValid;

    qint32 m_current_low_priority_nodes;
    bool m_current_low_priority_nodes_isSet;
    bool m_current_low_priority_nodes_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_e_tag;
    bool m_e_tag_isSet;
    bool m_e_tag_isValid;

    bool m_enable_auto_scale;
    bool m_enable_auto_scale_isSet;
    bool m_enable_auto_scale_isValid;

    bool m_enable_inter_node_communication;
    bool m_enable_inter_node_communication_isSet;
    bool m_enable_inter_node_communication_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    qint32 m_max_tasks_per_node;
    bool m_max_tasks_per_node_isSet;
    bool m_max_tasks_per_node_isValid;

    QList<OAIMetadataItem> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    OAINetworkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    QList<OAIResizeError> m_resize_errors;
    bool m_resize_errors_isSet;
    bool m_resize_errors_isValid;

    QString m_resize_timeout;
    bool m_resize_timeout_isSet;
    bool m_resize_timeout_isValid;

    OAIStartTask m_start_task;
    bool m_start_task_isSet;
    bool m_start_task_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_state_transition_time;
    bool m_state_transition_time_isSet;
    bool m_state_transition_time_isValid;

    OAIPoolStatistics m_stats;
    bool m_stats_isSet;
    bool m_stats_isValid;

    qint32 m_target_dedicated_nodes;
    bool m_target_dedicated_nodes_isSet;
    bool m_target_dedicated_nodes_isValid;

    qint32 m_target_low_priority_nodes;
    bool m_target_low_priority_nodes_isSet;
    bool m_target_low_priority_nodes_isValid;

    OAITaskSchedulingPolicy m_task_scheduling_policy;
    bool m_task_scheduling_policy_isSet;
    bool m_task_scheduling_policy_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QList<OAIUserAccount> m_user_accounts;
    bool m_user_accounts_isSet;
    bool m_user_accounts_isValid;

    OAIVirtualMachineConfiguration m_virtual_machine_configuration;
    bool m_virtual_machine_configuration_isSet;
    bool m_virtual_machine_configuration_isValid;

    QString m_vm_size;
    bool m_vm_size_isSet;
    bool m_vm_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICloudPool)

#endif // OAICloudPool_H
