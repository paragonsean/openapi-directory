/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutoScaleRun;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.CloudPool;
import org.openapitools.client.model.CloudPoolListResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PoolAddParameter;
import org.openapitools.client.model.PoolEnableAutoScaleParameter;
import org.openapitools.client.model.PoolEvaluateAutoScaleParameter;
import org.openapitools.client.model.PoolListUsageMetricsResult;
import org.openapitools.client.model.PoolPatchParameter;
import org.openapitools.client.model.PoolResizeParameter;
import org.openapitools.client.model.PoolStatistics;
import org.openapitools.client.model.PoolUpdatePropertiesParameter;
import org.openapitools.client.model.PoolUpgradeOSParameter;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoolsApi
 */
@Disabled
public class PoolsApiTest {

    private final PoolsApi api = new PoolsApi();

    /**
     * Adds a pool to the specified account.
     *
     * When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolAddTest() throws ApiException {
        String apiVersion = null;
        PoolAddParameter pool = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.poolAdd(apiVersion, pool, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a pool from the specified account.
     *
     * When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolDeleteTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolDelete(poolId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Disables automatic scaling for a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolDisableAutoScaleTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.poolDisableAutoScale(poolId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Enables automatic scaling for a pool.
     *
     * You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolEnableAutoScaleTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolEnableAutoScaleParameter poolEnableAutoScaleParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolEnableAutoScale(poolId, apiVersion, poolEnableAutoScaleParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets the result of evaluating an automatic scaling formula on the pool.
     *
     * This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolEvaluateAutoScaleTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolEvaluateAutoScaleParameter poolEvaluateAutoScaleParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        AutoScaleRun response = api.poolEvaluateAutoScale(poolId, apiVersion, poolEvaluateAutoScaleParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets basic properties of a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolExistsTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolExists(poolId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets information about the specified pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolGetTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        String $select = null;
        String $expand = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        CloudPool response = api.poolGet(poolId, apiVersion, $select, $expand, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets lifetime summary statistics for all of the pools in the specified account.
     *
     * Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolGetAllLifetimeStatisticsTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        PoolStatistics response = api.poolGetAllLifetimeStatistics(apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists all of the pools in the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolListTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        Integer maxresults = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudPoolListResult response = api.poolList(apiVersion, $filter, $select, $expand, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account.
     *
     * If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolListUsageMetricsTest() throws ApiException {
        String apiVersion = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        String $filter = null;
        Integer maxresults = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        PoolListUsageMetricsResult response = api.poolListUsageMetrics(apiVersion, starttime, endtime, $filter, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Updates the properties of the specified pool.
     *
     * This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolPatchTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolPatchParameter poolPatchParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolPatch(poolId, apiVersion, poolPatchParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Changes the number of compute nodes that are assigned to a pool.
     *
     * You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool&#39;s allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolResizeTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolResizeParameter poolResizeParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolResize(poolId, apiVersion, poolResizeParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Stops an ongoing resize operation on the pool.
     *
     * This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolStopResizeTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolStopResize(poolId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Updates the properties of the specified pool.
     *
     * This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolUpdatePropertiesTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolUpdatePropertiesParameter poolUpdatePropertiesParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.poolUpdateProperties(poolId, apiVersion, poolUpdatePropertiesParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Upgrades the operating system of the specified pool.
     *
     * During an upgrade, the Batch service upgrades each compute node in the pool. When a compute node is chosen for upgrade, any tasks running on that node are removed from the node and returned to the queue to be rerun later (or on a different compute node). The node will be unavailable until the upgrade is complete. This operation results in temporarily reduced pool capacity as nodes are taken out of service to be upgraded. Although the Batch service tries to avoid upgrading all compute nodes at the same time, it does not guarantee to do this (particularly on small pools); therefore, the pool may be temporarily unavailable to run tasks. When this operation runs, the pool state changes to upgrading. When all compute nodes have finished upgrading, the pool state returns to active.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolUpgradeOSTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolUpgradeOSParameter poolUpgradeOSParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolUpgradeOS(poolId, apiVersion, poolUpgradeOSParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

}
