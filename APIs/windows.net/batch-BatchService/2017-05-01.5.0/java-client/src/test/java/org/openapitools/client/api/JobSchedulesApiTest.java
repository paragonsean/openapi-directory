/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.CloudJobSchedule;
import org.openapitools.client.model.CloudJobScheduleListResult;
import org.openapitools.client.model.JobScheduleAddParameter;
import org.openapitools.client.model.JobSchedulePatchParameter;
import org.openapitools.client.model.JobScheduleUpdateParameter;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobSchedulesApi
 */
@Disabled
public class JobSchedulesApiTest {

    private final JobSchedulesApi api = new JobSchedulesApi();

    /**
     * Adds a job schedule to the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleAddTest() throws ApiException {
        String apiVersion = null;
        JobScheduleAddParameter cloudJobSchedule = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.jobScheduleAdd(apiVersion, cloudJobSchedule, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a job schedule from the specified account.
     *
     * When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleDeleteTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobScheduleDelete(jobScheduleId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Disables a job schedule.
     *
     * No new jobs will be created until the job schedule is enabled again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleDisableTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobScheduleDisable(jobScheduleId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Enables a job schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleEnableTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobScheduleEnable(jobScheduleId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Checks the specified job schedule exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleExistsTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobScheduleExists(jobScheduleId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets information about the specified job schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleGetTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        String $select = null;
        String $expand = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        CloudJobSchedule response = api.jobScheduleGet(jobScheduleId, apiVersion, $select, $expand, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Lists all of the job schedules in the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleListTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        Integer maxresults = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudJobScheduleListResult response = api.jobScheduleList(apiVersion, $filter, $select, $expand, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Updates the properties of the specified job schedule.
     *
     * This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobSchedulePatchTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        JobSchedulePatchParameter jobSchedulePatchParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobSchedulePatch(jobScheduleId, apiVersion, jobSchedulePatchParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Terminates a job schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleTerminateTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobScheduleTerminate(jobScheduleId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Updates the properties of the specified job schedule.
     *
     * This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobScheduleUpdateTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        JobScheduleUpdateParameter jobScheduleUpdateParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobScheduleUpdate(jobScheduleId, apiVersion, jobScheduleUpdateParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

}
