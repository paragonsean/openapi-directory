/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.JobSchedulingError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobExecutionInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:55.624704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobExecutionInformation {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_POOL_ID = "poolId";
  @SerializedName(SERIALIZED_NAME_POOL_ID)
  private String poolId;

  public static final String SERIALIZED_NAME_SCHEDULING_ERROR = "schedulingError";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_ERROR)
  private JobSchedulingError schedulingError;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TERMINATE_REASON = "terminateReason";
  @SerializedName(SERIALIZED_NAME_TERMINATE_REASON)
  private String terminateReason;

  public JobExecutionInformation() {
  }

  public JobExecutionInformation endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * This property is set only if the job is in the completed state.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public JobExecutionInformation poolId(String poolId) {
    this.poolId = poolId;
    return this;
  }

  /**
   * This element contains the actual pool where the job is assigned. When you get job details from the service, they also contain a poolInfo element, which contains the pool configuration data from when the job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the job ran on an auto pool, and this property contains the id of that auto pool.
   * @return poolId
   */
  @javax.annotation.Nullable
  public String getPoolId() {
    return poolId;
  }

  public void setPoolId(String poolId) {
    this.poolId = poolId;
  }


  public JobExecutionInformation schedulingError(JobSchedulingError schedulingError) {
    this.schedulingError = schedulingError;
    return this;
  }

  /**
   * Get schedulingError
   * @return schedulingError
   */
  @javax.annotation.Nullable
  public JobSchedulingError getSchedulingError() {
    return schedulingError;
  }

  public void setSchedulingError(JobSchedulingError schedulingError) {
    this.schedulingError = schedulingError;
  }


  public JobExecutionInformation startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * This is the time at which the job was created.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public JobExecutionInformation terminateReason(String terminateReason) {
    this.terminateReason = terminateReason;
    return this;
  }

  /**
   * This property is set only if the job is in the completed state. If the Batch service terminates the job, it sets the reason as follows: JMComplete - the Job Manager task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the job reached its maxWallClockTime constraint. TerminateJobSchedule - the job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the job&#39;s onAllTasksComplete attribute is set to terminateJob, and all tasks in the job are complete. TaskFailed - the job&#39;s onTaskFailure attribute is set to performExitOptionsJobAction, and a task in the job failed with an exit condition that specified a jobAction of terminateJob. Any other string is a user-defined reason specified in a call to the &#39;Terminate a job&#39; operation.
   * @return terminateReason
   */
  @javax.annotation.Nullable
  public String getTerminateReason() {
    return terminateReason;
  }

  public void setTerminateReason(String terminateReason) {
    this.terminateReason = terminateReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobExecutionInformation jobExecutionInformation = (JobExecutionInformation) o;
    return Objects.equals(this.endTime, jobExecutionInformation.endTime) &&
        Objects.equals(this.poolId, jobExecutionInformation.poolId) &&
        Objects.equals(this.schedulingError, jobExecutionInformation.schedulingError) &&
        Objects.equals(this.startTime, jobExecutionInformation.startTime) &&
        Objects.equals(this.terminateReason, jobExecutionInformation.terminateReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, poolId, schedulingError, startTime, terminateReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobExecutionInformation {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("    schedulingError: ").append(toIndentedString(schedulingError)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    terminateReason: ").append(toIndentedString(terminateReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("poolId");
    openapiFields.add("schedulingError");
    openapiFields.add("startTime");
    openapiFields.add("terminateReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobExecutionInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobExecutionInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobExecutionInformation is not found in the empty JSON string", JobExecutionInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobExecutionInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobExecutionInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobExecutionInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("poolId") != null && !jsonObj.get("poolId").isJsonNull()) && !jsonObj.get("poolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolId").toString()));
      }
      // validate the optional field `schedulingError`
      if (jsonObj.get("schedulingError") != null && !jsonObj.get("schedulingError").isJsonNull()) {
        JobSchedulingError.validateJsonElement(jsonObj.get("schedulingError"));
      }
      if ((jsonObj.get("terminateReason") != null && !jsonObj.get("terminateReason").isJsonNull()) && !jsonObj.get("terminateReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminateReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminateReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobExecutionInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobExecutionInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobExecutionInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobExecutionInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<JobExecutionInformation>() {
           @Override
           public void write(JsonWriter out, JobExecutionInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobExecutionInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobExecutionInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobExecutionInformation
   * @throws IOException if the JSON string is invalid with respect to JobExecutionInformation
   */
  public static JobExecutionInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobExecutionInformation.class);
  }

  /**
   * Convert an instance of JobExecutionInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

