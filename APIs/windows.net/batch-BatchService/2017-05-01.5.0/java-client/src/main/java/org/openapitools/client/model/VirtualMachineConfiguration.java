/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageReference;
import org.openapitools.client.model.OSDisk;
import org.openapitools.client.model.WindowsConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualMachineConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:55.624704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineConfiguration {
  public static final String SERIALIZED_NAME_IMAGE_REFERENCE = "imageReference";
  @SerializedName(SERIALIZED_NAME_IMAGE_REFERENCE)
  private ImageReference imageReference;

  public static final String SERIALIZED_NAME_NODE_AGENT_S_K_U_ID = "nodeAgentSKUId";
  @SerializedName(SERIALIZED_NAME_NODE_AGENT_S_K_U_ID)
  private String nodeAgentSKUId;

  public static final String SERIALIZED_NAME_OS_DISK = "osDisk";
  @SerializedName(SERIALIZED_NAME_OS_DISK)
  private OSDisk osDisk;

  public static final String SERIALIZED_NAME_WINDOWS_CONFIGURATION = "windowsConfiguration";
  @SerializedName(SERIALIZED_NAME_WINDOWS_CONFIGURATION)
  private WindowsConfiguration windowsConfiguration;

  public VirtualMachineConfiguration() {
  }

  public VirtualMachineConfiguration imageReference(ImageReference imageReference) {
    this.imageReference = imageReference;
    return this;
  }

  /**
   * Get imageReference
   * @return imageReference
   */
  @javax.annotation.Nullable
  public ImageReference getImageReference() {
    return imageReference;
  }

  public void setImageReference(ImageReference imageReference) {
    this.imageReference = imageReference;
  }


  public VirtualMachineConfiguration nodeAgentSKUId(String nodeAgentSKUId) {
    this.nodeAgentSKUId = nodeAgentSKUId;
    return this;
  }

  /**
   * The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &#39;List supported node agent SKUs&#39; operation.
   * @return nodeAgentSKUId
   */
  @javax.annotation.Nonnull
  public String getNodeAgentSKUId() {
    return nodeAgentSKUId;
  }

  public void setNodeAgentSKUId(String nodeAgentSKUId) {
    this.nodeAgentSKUId = nodeAgentSKUId;
  }


  public VirtualMachineConfiguration osDisk(OSDisk osDisk) {
    this.osDisk = osDisk;
    return this;
  }

  /**
   * Get osDisk
   * @return osDisk
   */
  @javax.annotation.Nullable
  public OSDisk getOsDisk() {
    return osDisk;
  }

  public void setOsDisk(OSDisk osDisk) {
    this.osDisk = osDisk;
  }


  public VirtualMachineConfiguration windowsConfiguration(WindowsConfiguration windowsConfiguration) {
    this.windowsConfiguration = windowsConfiguration;
    return this;
  }

  /**
   * Get windowsConfiguration
   * @return windowsConfiguration
   */
  @javax.annotation.Nullable
  public WindowsConfiguration getWindowsConfiguration() {
    return windowsConfiguration;
  }

  public void setWindowsConfiguration(WindowsConfiguration windowsConfiguration) {
    this.windowsConfiguration = windowsConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineConfiguration virtualMachineConfiguration = (VirtualMachineConfiguration) o;
    return Objects.equals(this.imageReference, virtualMachineConfiguration.imageReference) &&
        Objects.equals(this.nodeAgentSKUId, virtualMachineConfiguration.nodeAgentSKUId) &&
        Objects.equals(this.osDisk, virtualMachineConfiguration.osDisk) &&
        Objects.equals(this.windowsConfiguration, virtualMachineConfiguration.windowsConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageReference, nodeAgentSKUId, osDisk, windowsConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineConfiguration {\n");
    sb.append("    imageReference: ").append(toIndentedString(imageReference)).append("\n");
    sb.append("    nodeAgentSKUId: ").append(toIndentedString(nodeAgentSKUId)).append("\n");
    sb.append("    osDisk: ").append(toIndentedString(osDisk)).append("\n");
    sb.append("    windowsConfiguration: ").append(toIndentedString(windowsConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageReference");
    openapiFields.add("nodeAgentSKUId");
    openapiFields.add("osDisk");
    openapiFields.add("windowsConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nodeAgentSKUId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineConfiguration is not found in the empty JSON string", VirtualMachineConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualMachineConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `imageReference`
      if (jsonObj.get("imageReference") != null && !jsonObj.get("imageReference").isJsonNull()) {
        ImageReference.validateJsonElement(jsonObj.get("imageReference"));
      }
      if (!jsonObj.get("nodeAgentSKUId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeAgentSKUId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeAgentSKUId").toString()));
      }
      // validate the optional field `osDisk`
      if (jsonObj.get("osDisk") != null && !jsonObj.get("osDisk").isJsonNull()) {
        OSDisk.validateJsonElement(jsonObj.get("osDisk"));
      }
      // validate the optional field `windowsConfiguration`
      if (jsonObj.get("windowsConfiguration") != null && !jsonObj.get("windowsConfiguration").isJsonNull()) {
        WindowsConfiguration.validateJsonElement(jsonObj.get("windowsConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineConfiguration>() {
           @Override
           public void write(JsonWriter out, VirtualMachineConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineConfiguration
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineConfiguration
   */
  public static VirtualMachineConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineConfiguration.class);
  }

  /**
   * Convert an instance of VirtualMachineConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

