/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobSpecification;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.Schedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobSchedulePatchParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:55.624704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobSchedulePatchParameter {
  public static final String SERIALIZED_NAME_JOB_SPECIFICATION = "jobSpecification";
  @SerializedName(SERIALIZED_NAME_JOB_SPECIFICATION)
  private JobSpecification jobSpecification;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Schedule schedule;

  public JobSchedulePatchParameter() {
  }

  public JobSchedulePatchParameter jobSpecification(JobSpecification jobSpecification) {
    this.jobSpecification = jobSpecification;
    return this;
  }

  /**
   * Get jobSpecification
   * @return jobSpecification
   */
  @javax.annotation.Nullable
  public JobSpecification getJobSpecification() {
    return jobSpecification;
  }

  public void setJobSpecification(JobSpecification jobSpecification) {
    this.jobSpecification = jobSpecification;
  }


  public JobSchedulePatchParameter metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public JobSchedulePatchParameter addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * If you do not specify this element, existing metadata is left unchanged.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public JobSchedulePatchParameter schedule(Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public Schedule getSchedule() {
    return schedule;
  }

  public void setSchedule(Schedule schedule) {
    this.schedule = schedule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSchedulePatchParameter jobSchedulePatchParameter = (JobSchedulePatchParameter) o;
    return Objects.equals(this.jobSpecification, jobSchedulePatchParameter.jobSpecification) &&
        Objects.equals(this.metadata, jobSchedulePatchParameter.metadata) &&
        Objects.equals(this.schedule, jobSchedulePatchParameter.schedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobSpecification, metadata, schedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSchedulePatchParameter {\n");
    sb.append("    jobSpecification: ").append(toIndentedString(jobSpecification)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobSpecification");
    openapiFields.add("metadata");
    openapiFields.add("schedule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobSchedulePatchParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobSchedulePatchParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobSchedulePatchParameter is not found in the empty JSON string", JobSchedulePatchParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobSchedulePatchParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobSchedulePatchParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `jobSpecification`
      if (jsonObj.get("jobSpecification") != null && !jsonObj.get("jobSpecification").isJsonNull()) {
        JobSpecification.validateJsonElement(jsonObj.get("jobSpecification"));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        Schedule.validateJsonElement(jsonObj.get("schedule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobSchedulePatchParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobSchedulePatchParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobSchedulePatchParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobSchedulePatchParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<JobSchedulePatchParameter>() {
           @Override
           public void write(JsonWriter out, JobSchedulePatchParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobSchedulePatchParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobSchedulePatchParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobSchedulePatchParameter
   * @throws IOException if the JSON string is invalid with respect to JobSchedulePatchParameter
   */
  public static JobSchedulePatchParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobSchedulePatchParameter.class);
  }

  /**
   * Convert an instance of JobSchedulePatchParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

