/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TaskExecutionInformation;
import org.openapitools.client.model.TaskState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:55.624704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskInformation {
  public static final String SERIALIZED_NAME_EXECUTION_INFO = "executionInfo";
  @SerializedName(SERIALIZED_NAME_EXECUTION_INFO)
  private TaskExecutionInformation executionInfo;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_SUBTASK_ID = "subtaskId";
  @SerializedName(SERIALIZED_NAME_SUBTASK_ID)
  private Integer subtaskId;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_TASK_STATE = "taskState";
  @SerializedName(SERIALIZED_NAME_TASK_STATE)
  private TaskState taskState;

  public static final String SERIALIZED_NAME_TASK_URL = "taskUrl";
  @SerializedName(SERIALIZED_NAME_TASK_URL)
  private String taskUrl;

  public TaskInformation() {
  }

  public TaskInformation executionInfo(TaskExecutionInformation executionInfo) {
    this.executionInfo = executionInfo;
    return this;
  }

  /**
   * Get executionInfo
   * @return executionInfo
   */
  @javax.annotation.Nullable
  public TaskExecutionInformation getExecutionInfo() {
    return executionInfo;
  }

  public void setExecutionInfo(TaskExecutionInformation executionInfo) {
    this.executionInfo = executionInfo;
  }


  public TaskInformation jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public TaskInformation subtaskId(Integer subtaskId) {
    this.subtaskId = subtaskId;
    return this;
  }

  /**
   * Get subtaskId
   * @return subtaskId
   */
  @javax.annotation.Nullable
  public Integer getSubtaskId() {
    return subtaskId;
  }

  public void setSubtaskId(Integer subtaskId) {
    this.subtaskId = subtaskId;
  }


  public TaskInformation taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * Get taskId
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public TaskInformation taskState(TaskState taskState) {
    this.taskState = taskState;
    return this;
  }

  /**
   * Get taskState
   * @return taskState
   */
  @javax.annotation.Nonnull
  public TaskState getTaskState() {
    return taskState;
  }

  public void setTaskState(TaskState taskState) {
    this.taskState = taskState;
  }


  public TaskInformation taskUrl(String taskUrl) {
    this.taskUrl = taskUrl;
    return this;
  }

  /**
   * Get taskUrl
   * @return taskUrl
   */
  @javax.annotation.Nullable
  public String getTaskUrl() {
    return taskUrl;
  }

  public void setTaskUrl(String taskUrl) {
    this.taskUrl = taskUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskInformation taskInformation = (TaskInformation) o;
    return Objects.equals(this.executionInfo, taskInformation.executionInfo) &&
        Objects.equals(this.jobId, taskInformation.jobId) &&
        Objects.equals(this.subtaskId, taskInformation.subtaskId) &&
        Objects.equals(this.taskId, taskInformation.taskId) &&
        Objects.equals(this.taskState, taskInformation.taskState) &&
        Objects.equals(this.taskUrl, taskInformation.taskUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionInfo, jobId, subtaskId, taskId, taskState, taskUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskInformation {\n");
    sb.append("    executionInfo: ").append(toIndentedString(executionInfo)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    subtaskId: ").append(toIndentedString(subtaskId)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    taskState: ").append(toIndentedString(taskState)).append("\n");
    sb.append("    taskUrl: ").append(toIndentedString(taskUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionInfo");
    openapiFields.add("jobId");
    openapiFields.add("subtaskId");
    openapiFields.add("taskId");
    openapiFields.add("taskState");
    openapiFields.add("taskUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("taskState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskInformation is not found in the empty JSON string", TaskInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaskInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `executionInfo`
      if (jsonObj.get("executionInfo") != null && !jsonObj.get("executionInfo").isJsonNull()) {
        TaskExecutionInformation.validateJsonElement(jsonObj.get("executionInfo"));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      // validate the required field `taskState`
      TaskState.validateJsonElement(jsonObj.get("taskState"));
      if ((jsonObj.get("taskUrl") != null && !jsonObj.get("taskUrl").isJsonNull()) && !jsonObj.get("taskUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskInformation>() {
           @Override
           public void write(JsonWriter out, TaskInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskInformation
   * @throws IOException if the JSON string is invalid with respect to TaskInformation
   */
  public static TaskInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskInformation.class);
  }

  /**
   * Convert an instance of TaskInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

