# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elevation_level import ElevationLevel
from openapi_server.models.linux_user_configuration import LinuxUserConfiguration
from openapi_server import util


class UserAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elevation_level: ElevationLevel=None, linux_user_configuration: LinuxUserConfiguration=None, name: str=None, password: str=None):
        """UserAccount - a model defined in OpenAPI

        :param elevation_level: The elevation_level of this UserAccount.
        :param linux_user_configuration: The linux_user_configuration of this UserAccount.
        :param name: The name of this UserAccount.
        :param password: The password of this UserAccount.
        """
        self.openapi_types = {
            'elevation_level': ElevationLevel,
            'linux_user_configuration': LinuxUserConfiguration,
            'name': str,
            'password': str
        }

        self.attribute_map = {
            'elevation_level': 'elevationLevel',
            'linux_user_configuration': 'linuxUserConfiguration',
            'name': 'name',
            'password': 'password'
        }

        self._elevation_level = elevation_level
        self._linux_user_configuration = linux_user_configuration
        self._name = name
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAccount of this UserAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elevation_level(self):
        """Gets the elevation_level of this UserAccount.


        :return: The elevation_level of this UserAccount.
        :rtype: ElevationLevel
        """
        return self._elevation_level

    @elevation_level.setter
    def elevation_level(self, elevation_level):
        """Sets the elevation_level of this UserAccount.


        :param elevation_level: The elevation_level of this UserAccount.
        :type elevation_level: ElevationLevel
        """

        self._elevation_level = elevation_level

    @property
    def linux_user_configuration(self):
        """Gets the linux_user_configuration of this UserAccount.


        :return: The linux_user_configuration of this UserAccount.
        :rtype: LinuxUserConfiguration
        """
        return self._linux_user_configuration

    @linux_user_configuration.setter
    def linux_user_configuration(self, linux_user_configuration):
        """Sets the linux_user_configuration of this UserAccount.


        :param linux_user_configuration: The linux_user_configuration of this UserAccount.
        :type linux_user_configuration: LinuxUserConfiguration
        """

        self._linux_user_configuration = linux_user_configuration

    @property
    def name(self):
        """Gets the name of this UserAccount.


        :return: The name of this UserAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserAccount.


        :param name: The name of this UserAccount.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this UserAccount.


        :return: The password of this UserAccount.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserAccount.


        :param password: The password of this UserAccount.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
