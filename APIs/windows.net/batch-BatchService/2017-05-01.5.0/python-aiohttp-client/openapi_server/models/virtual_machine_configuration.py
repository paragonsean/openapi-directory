# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_reference import ImageReference
from openapi_server.models.os_disk import OSDisk
from openapi_server.models.windows_configuration import WindowsConfiguration
from openapi_server import util


class VirtualMachineConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_reference: ImageReference=None, node_agent_skuid: str=None, os_disk: OSDisk=None, windows_configuration: WindowsConfiguration=None):
        """VirtualMachineConfiguration - a model defined in OpenAPI

        :param image_reference: The image_reference of this VirtualMachineConfiguration.
        :param node_agent_skuid: The node_agent_skuid of this VirtualMachineConfiguration.
        :param os_disk: The os_disk of this VirtualMachineConfiguration.
        :param windows_configuration: The windows_configuration of this VirtualMachineConfiguration.
        """
        self.openapi_types = {
            'image_reference': ImageReference,
            'node_agent_skuid': str,
            'os_disk': OSDisk,
            'windows_configuration': WindowsConfiguration
        }

        self.attribute_map = {
            'image_reference': 'imageReference',
            'node_agent_skuid': 'nodeAgentSKUId',
            'os_disk': 'osDisk',
            'windows_configuration': 'windowsConfiguration'
        }

        self._image_reference = image_reference
        self._node_agent_skuid = node_agent_skuid
        self._os_disk = os_disk
        self._windows_configuration = windows_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineConfiguration of this VirtualMachineConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_reference(self):
        """Gets the image_reference of this VirtualMachineConfiguration.


        :return: The image_reference of this VirtualMachineConfiguration.
        :rtype: ImageReference
        """
        return self._image_reference

    @image_reference.setter
    def image_reference(self, image_reference):
        """Sets the image_reference of this VirtualMachineConfiguration.


        :param image_reference: The image_reference of this VirtualMachineConfiguration.
        :type image_reference: ImageReference
        """

        self._image_reference = image_reference

    @property
    def node_agent_skuid(self):
        """Gets the node_agent_skuid of this VirtualMachineConfiguration.

        The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.

        :return: The node_agent_skuid of this VirtualMachineConfiguration.
        :rtype: str
        """
        return self._node_agent_skuid

    @node_agent_skuid.setter
    def node_agent_skuid(self, node_agent_skuid):
        """Sets the node_agent_skuid of this VirtualMachineConfiguration.

        The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.

        :param node_agent_skuid: The node_agent_skuid of this VirtualMachineConfiguration.
        :type node_agent_skuid: str
        """
        if node_agent_skuid is None:
            raise ValueError("Invalid value for `node_agent_skuid`, must not be `None`")

        self._node_agent_skuid = node_agent_skuid

    @property
    def os_disk(self):
        """Gets the os_disk of this VirtualMachineConfiguration.


        :return: The os_disk of this VirtualMachineConfiguration.
        :rtype: OSDisk
        """
        return self._os_disk

    @os_disk.setter
    def os_disk(self, os_disk):
        """Sets the os_disk of this VirtualMachineConfiguration.


        :param os_disk: The os_disk of this VirtualMachineConfiguration.
        :type os_disk: OSDisk
        """

        self._os_disk = os_disk

    @property
    def windows_configuration(self):
        """Gets the windows_configuration of this VirtualMachineConfiguration.


        :return: The windows_configuration of this VirtualMachineConfiguration.
        :rtype: WindowsConfiguration
        """
        return self._windows_configuration

    @windows_configuration.setter
    def windows_configuration(self, windows_configuration):
        """Sets the windows_configuration of this VirtualMachineConfiguration.


        :param windows_configuration: The windows_configuration of this VirtualMachineConfiguration.
        :type windows_configuration: WindowsConfiguration
        """

        self._windows_configuration = windows_configuration
