# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputFileBlobContainerDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_url: str=None, path: str=None):
        """OutputFileBlobContainerDestination - a model defined in OpenAPI

        :param container_url: The container_url of this OutputFileBlobContainerDestination.
        :param path: The path of this OutputFileBlobContainerDestination.
        """
        self.openapi_types = {
            'container_url': str,
            'path': str
        }

        self.attribute_map = {
            'container_url': 'containerUrl',
            'path': 'path'
        }

        self._container_url = container_url
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputFileBlobContainerDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputFileBlobContainerDestination of this OutputFileBlobContainerDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_url(self):
        """Gets the container_url of this OutputFileBlobContainerDestination.

        The URL must include a Shared Access Signature (SAS) granting write permissions to the container.

        :return: The container_url of this OutputFileBlobContainerDestination.
        :rtype: str
        """
        return self._container_url

    @container_url.setter
    def container_url(self, container_url):
        """Sets the container_url of this OutputFileBlobContainerDestination.

        The URL must include a Shared Access Signature (SAS) granting write permissions to the container.

        :param container_url: The container_url of this OutputFileBlobContainerDestination.
        :type container_url: str
        """
        if container_url is None:
            raise ValueError("Invalid value for `container_url`, must not be `None`")

        self._container_url = container_url

    @property
    def path(self):
        """Gets the path of this OutputFileBlobContainerDestination.

        If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.

        :return: The path of this OutputFileBlobContainerDestination.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this OutputFileBlobContainerDestination.

        If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.

        :param path: The path of this OutputFileBlobContainerDestination.
        :type path: str
        """

        self._path = path
