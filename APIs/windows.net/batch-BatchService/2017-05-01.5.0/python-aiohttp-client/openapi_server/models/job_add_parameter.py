# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.job_constraints import JobConstraints
from openapi_server.models.job_manager_task import JobManagerTask
from openapi_server.models.job_preparation_task import JobPreparationTask
from openapi_server.models.job_release_task import JobReleaseTask
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.on_all_tasks_complete import OnAllTasksComplete
from openapi_server.models.on_task_failure import OnTaskFailure
from openapi_server.models.pool_information import PoolInformation
from openapi_server import util


class JobAddParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_environment_settings: List[EnvironmentSetting]=None, constraints: JobConstraints=None, display_name: str=None, id: str=None, job_manager_task: JobManagerTask=None, job_preparation_task: JobPreparationTask=None, job_release_task: JobReleaseTask=None, metadata: List[MetadataItem]=None, on_all_tasks_complete: OnAllTasksComplete=None, on_task_failure: OnTaskFailure=None, pool_info: PoolInformation=None, priority: int=None, uses_task_dependencies: bool=None):
        """JobAddParameter - a model defined in OpenAPI

        :param common_environment_settings: The common_environment_settings of this JobAddParameter.
        :param constraints: The constraints of this JobAddParameter.
        :param display_name: The display_name of this JobAddParameter.
        :param id: The id of this JobAddParameter.
        :param job_manager_task: The job_manager_task of this JobAddParameter.
        :param job_preparation_task: The job_preparation_task of this JobAddParameter.
        :param job_release_task: The job_release_task of this JobAddParameter.
        :param metadata: The metadata of this JobAddParameter.
        :param on_all_tasks_complete: The on_all_tasks_complete of this JobAddParameter.
        :param on_task_failure: The on_task_failure of this JobAddParameter.
        :param pool_info: The pool_info of this JobAddParameter.
        :param priority: The priority of this JobAddParameter.
        :param uses_task_dependencies: The uses_task_dependencies of this JobAddParameter.
        """
        self.openapi_types = {
            'common_environment_settings': List[EnvironmentSetting],
            'constraints': JobConstraints,
            'display_name': str,
            'id': str,
            'job_manager_task': JobManagerTask,
            'job_preparation_task': JobPreparationTask,
            'job_release_task': JobReleaseTask,
            'metadata': List[MetadataItem],
            'on_all_tasks_complete': OnAllTasksComplete,
            'on_task_failure': OnTaskFailure,
            'pool_info': PoolInformation,
            'priority': int,
            'uses_task_dependencies': bool
        }

        self.attribute_map = {
            'common_environment_settings': 'commonEnvironmentSettings',
            'constraints': 'constraints',
            'display_name': 'displayName',
            'id': 'id',
            'job_manager_task': 'jobManagerTask',
            'job_preparation_task': 'jobPreparationTask',
            'job_release_task': 'jobReleaseTask',
            'metadata': 'metadata',
            'on_all_tasks_complete': 'onAllTasksComplete',
            'on_task_failure': 'onTaskFailure',
            'pool_info': 'poolInfo',
            'priority': 'priority',
            'uses_task_dependencies': 'usesTaskDependencies'
        }

        self._common_environment_settings = common_environment_settings
        self._constraints = constraints
        self._display_name = display_name
        self._id = id
        self._job_manager_task = job_manager_task
        self._job_preparation_task = job_preparation_task
        self._job_release_task = job_release_task
        self._metadata = metadata
        self._on_all_tasks_complete = on_all_tasks_complete
        self._on_task_failure = on_task_failure
        self._pool_info = pool_info
        self._priority = priority
        self._uses_task_dependencies = uses_task_dependencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobAddParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobAddParameter of this JobAddParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_environment_settings(self):
        """Gets the common_environment_settings of this JobAddParameter.


        :return: The common_environment_settings of this JobAddParameter.
        :rtype: List[EnvironmentSetting]
        """
        return self._common_environment_settings

    @common_environment_settings.setter
    def common_environment_settings(self, common_environment_settings):
        """Sets the common_environment_settings of this JobAddParameter.


        :param common_environment_settings: The common_environment_settings of this JobAddParameter.
        :type common_environment_settings: List[EnvironmentSetting]
        """

        self._common_environment_settings = common_environment_settings

    @property
    def constraints(self):
        """Gets the constraints of this JobAddParameter.


        :return: The constraints of this JobAddParameter.
        :rtype: JobConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this JobAddParameter.


        :param constraints: The constraints of this JobAddParameter.
        :type constraints: JobConstraints
        """

        self._constraints = constraints

    @property
    def display_name(self):
        """Gets the display_name of this JobAddParameter.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :return: The display_name of this JobAddParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this JobAddParameter.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :param display_name: The display_name of this JobAddParameter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this JobAddParameter.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.

        :return: The id of this JobAddParameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobAddParameter.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.

        :param id: The id of this JobAddParameter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def job_manager_task(self):
        """Gets the job_manager_task of this JobAddParameter.


        :return: The job_manager_task of this JobAddParameter.
        :rtype: JobManagerTask
        """
        return self._job_manager_task

    @job_manager_task.setter
    def job_manager_task(self, job_manager_task):
        """Sets the job_manager_task of this JobAddParameter.


        :param job_manager_task: The job_manager_task of this JobAddParameter.
        :type job_manager_task: JobManagerTask
        """

        self._job_manager_task = job_manager_task

    @property
    def job_preparation_task(self):
        """Gets the job_preparation_task of this JobAddParameter.


        :return: The job_preparation_task of this JobAddParameter.
        :rtype: JobPreparationTask
        """
        return self._job_preparation_task

    @job_preparation_task.setter
    def job_preparation_task(self, job_preparation_task):
        """Sets the job_preparation_task of this JobAddParameter.


        :param job_preparation_task: The job_preparation_task of this JobAddParameter.
        :type job_preparation_task: JobPreparationTask
        """

        self._job_preparation_task = job_preparation_task

    @property
    def job_release_task(self):
        """Gets the job_release_task of this JobAddParameter.


        :return: The job_release_task of this JobAddParameter.
        :rtype: JobReleaseTask
        """
        return self._job_release_task

    @job_release_task.setter
    def job_release_task(self, job_release_task):
        """Sets the job_release_task of this JobAddParameter.


        :param job_release_task: The job_release_task of this JobAddParameter.
        :type job_release_task: JobReleaseTask
        """

        self._job_release_task = job_release_task

    @property
    def metadata(self):
        """Gets the metadata of this JobAddParameter.

        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.

        :return: The metadata of this JobAddParameter.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this JobAddParameter.

        The Batch service does not assign any meaning to metadata; it is solely for the use of user code.

        :param metadata: The metadata of this JobAddParameter.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def on_all_tasks_complete(self):
        """Gets the on_all_tasks_complete of this JobAddParameter.


        :return: The on_all_tasks_complete of this JobAddParameter.
        :rtype: OnAllTasksComplete
        """
        return self._on_all_tasks_complete

    @on_all_tasks_complete.setter
    def on_all_tasks_complete(self, on_all_tasks_complete):
        """Sets the on_all_tasks_complete of this JobAddParameter.


        :param on_all_tasks_complete: The on_all_tasks_complete of this JobAddParameter.
        :type on_all_tasks_complete: OnAllTasksComplete
        """

        self._on_all_tasks_complete = on_all_tasks_complete

    @property
    def on_task_failure(self):
        """Gets the on_task_failure of this JobAddParameter.


        :return: The on_task_failure of this JobAddParameter.
        :rtype: OnTaskFailure
        """
        return self._on_task_failure

    @on_task_failure.setter
    def on_task_failure(self, on_task_failure):
        """Sets the on_task_failure of this JobAddParameter.


        :param on_task_failure: The on_task_failure of this JobAddParameter.
        :type on_task_failure: OnTaskFailure
        """

        self._on_task_failure = on_task_failure

    @property
    def pool_info(self):
        """Gets the pool_info of this JobAddParameter.


        :return: The pool_info of this JobAddParameter.
        :rtype: PoolInformation
        """
        return self._pool_info

    @pool_info.setter
    def pool_info(self, pool_info):
        """Sets the pool_info of this JobAddParameter.


        :param pool_info: The pool_info of this JobAddParameter.
        :type pool_info: PoolInformation
        """
        if pool_info is None:
            raise ValueError("Invalid value for `pool_info`, must not be `None`")

        self._pool_info = pool_info

    @property
    def priority(self):
        """Gets the priority of this JobAddParameter.

        Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.

        :return: The priority of this JobAddParameter.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobAddParameter.

        Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.

        :param priority: The priority of this JobAddParameter.
        :type priority: int
        """

        self._priority = priority

    @property
    def uses_task_dependencies(self):
        """Gets the uses_task_dependencies of this JobAddParameter.


        :return: The uses_task_dependencies of this JobAddParameter.
        :rtype: bool
        """
        return self._uses_task_dependencies

    @uses_task_dependencies.setter
    def uses_task_dependencies(self, uses_task_dependencies):
        """Sets the uses_task_dependencies of this JobAddParameter.


        :param uses_task_dependencies: The uses_task_dependencies of this JobAddParameter.
        :type uses_task_dependencies: bool
        """

        self._uses_task_dependencies = uses_task_dependencies
