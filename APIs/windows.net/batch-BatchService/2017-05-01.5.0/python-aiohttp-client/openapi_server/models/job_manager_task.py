# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_package_reference import ApplicationPackageReference
from openapi_server.models.authentication_token_settings import AuthenticationTokenSettings
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.output_file import OutputFile
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_constraints import TaskConstraints
from openapi_server.models.user_identity import UserIdentity
from openapi_server import util


class JobManagerTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_low_priority_node: bool=None, application_package_references: List[ApplicationPackageReference]=None, authentication_token_settings: AuthenticationTokenSettings=None, command_line: str=None, constraints: TaskConstraints=None, display_name: str=None, environment_settings: List[EnvironmentSetting]=None, id: str=None, kill_job_on_completion: bool=None, output_files: List[OutputFile]=None, resource_files: List[ResourceFile]=None, run_exclusive: bool=None, user_identity: UserIdentity=None):
        """JobManagerTask - a model defined in OpenAPI

        :param allow_low_priority_node: The allow_low_priority_node of this JobManagerTask.
        :param application_package_references: The application_package_references of this JobManagerTask.
        :param authentication_token_settings: The authentication_token_settings of this JobManagerTask.
        :param command_line: The command_line of this JobManagerTask.
        :param constraints: The constraints of this JobManagerTask.
        :param display_name: The display_name of this JobManagerTask.
        :param environment_settings: The environment_settings of this JobManagerTask.
        :param id: The id of this JobManagerTask.
        :param kill_job_on_completion: The kill_job_on_completion of this JobManagerTask.
        :param output_files: The output_files of this JobManagerTask.
        :param resource_files: The resource_files of this JobManagerTask.
        :param run_exclusive: The run_exclusive of this JobManagerTask.
        :param user_identity: The user_identity of this JobManagerTask.
        """
        self.openapi_types = {
            'allow_low_priority_node': bool,
            'application_package_references': List[ApplicationPackageReference],
            'authentication_token_settings': AuthenticationTokenSettings,
            'command_line': str,
            'constraints': TaskConstraints,
            'display_name': str,
            'environment_settings': List[EnvironmentSetting],
            'id': str,
            'kill_job_on_completion': bool,
            'output_files': List[OutputFile],
            'resource_files': List[ResourceFile],
            'run_exclusive': bool,
            'user_identity': UserIdentity
        }

        self.attribute_map = {
            'allow_low_priority_node': 'allowLowPriorityNode',
            'application_package_references': 'applicationPackageReferences',
            'authentication_token_settings': 'authenticationTokenSettings',
            'command_line': 'commandLine',
            'constraints': 'constraints',
            'display_name': 'displayName',
            'environment_settings': 'environmentSettings',
            'id': 'id',
            'kill_job_on_completion': 'killJobOnCompletion',
            'output_files': 'outputFiles',
            'resource_files': 'resourceFiles',
            'run_exclusive': 'runExclusive',
            'user_identity': 'userIdentity'
        }

        self._allow_low_priority_node = allow_low_priority_node
        self._application_package_references = application_package_references
        self._authentication_token_settings = authentication_token_settings
        self._command_line = command_line
        self._constraints = constraints
        self._display_name = display_name
        self._environment_settings = environment_settings
        self._id = id
        self._kill_job_on_completion = kill_job_on_completion
        self._output_files = output_files
        self._resource_files = resource_files
        self._run_exclusive = run_exclusive
        self._user_identity = user_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobManagerTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobManagerTask of this JobManagerTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_low_priority_node(self):
        """Gets the allow_low_priority_node of this JobManagerTask.

        The default value is false.

        :return: The allow_low_priority_node of this JobManagerTask.
        :rtype: bool
        """
        return self._allow_low_priority_node

    @allow_low_priority_node.setter
    def allow_low_priority_node(self, allow_low_priority_node):
        """Sets the allow_low_priority_node of this JobManagerTask.

        The default value is false.

        :param allow_low_priority_node: The allow_low_priority_node of this JobManagerTask.
        :type allow_low_priority_node: bool
        """

        self._allow_low_priority_node = allow_low_priority_node

    @property
    def application_package_references(self):
        """Gets the application_package_references of this JobManagerTask.

        Application packages are downloaded and deployed to a shared directory, not the task directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails with a scheduling error. This property is currently not supported on jobs running on pools created using the virtualMachineConfiguration (IaaS) property. If a task specifying applicationPackageReferences runs on such a pool, it fails with a scheduling error with code TaskSchedulingConstraintFailed.

        :return: The application_package_references of this JobManagerTask.
        :rtype: List[ApplicationPackageReference]
        """
        return self._application_package_references

    @application_package_references.setter
    def application_package_references(self, application_package_references):
        """Sets the application_package_references of this JobManagerTask.

        Application packages are downloaded and deployed to a shared directory, not the task directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails with a scheduling error. This property is currently not supported on jobs running on pools created using the virtualMachineConfiguration (IaaS) property. If a task specifying applicationPackageReferences runs on such a pool, it fails with a scheduling error with code TaskSchedulingConstraintFailed.

        :param application_package_references: The application_package_references of this JobManagerTask.
        :type application_package_references: List[ApplicationPackageReference]
        """

        self._application_package_references = application_package_references

    @property
    def authentication_token_settings(self):
        """Gets the authentication_token_settings of this JobManagerTask.


        :return: The authentication_token_settings of this JobManagerTask.
        :rtype: AuthenticationTokenSettings
        """
        return self._authentication_token_settings

    @authentication_token_settings.setter
    def authentication_token_settings(self, authentication_token_settings):
        """Sets the authentication_token_settings of this JobManagerTask.


        :param authentication_token_settings: The authentication_token_settings of this JobManagerTask.
        :type authentication_token_settings: AuthenticationTokenSettings
        """

        self._authentication_token_settings = authentication_token_settings

    @property
    def command_line(self):
        """Gets the command_line of this JobManagerTask.

        The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.

        :return: The command_line of this JobManagerTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this JobManagerTask.

        The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.

        :param command_line: The command_line of this JobManagerTask.
        :type command_line: str
        """
        if command_line is None:
            raise ValueError("Invalid value for `command_line`, must not be `None`")

        self._command_line = command_line

    @property
    def constraints(self):
        """Gets the constraints of this JobManagerTask.


        :return: The constraints of this JobManagerTask.
        :rtype: TaskConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this JobManagerTask.


        :param constraints: The constraints of this JobManagerTask.
        :type constraints: TaskConstraints
        """

        self._constraints = constraints

    @property
    def display_name(self):
        """Gets the display_name of this JobManagerTask.

        It need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :return: The display_name of this JobManagerTask.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this JobManagerTask.

        It need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :param display_name: The display_name of this JobManagerTask.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def environment_settings(self):
        """Gets the environment_settings of this JobManagerTask.


        :return: The environment_settings of this JobManagerTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this JobManagerTask.


        :param environment_settings: The environment_settings of this JobManagerTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def id(self):
        """Gets the id of this JobManagerTask.

        The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.

        :return: The id of this JobManagerTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobManagerTask.

        The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.

        :param id: The id of this JobManagerTask.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def kill_job_on_completion(self):
        """Gets the kill_job_on_completion of this JobManagerTask.

        If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.

        :return: The kill_job_on_completion of this JobManagerTask.
        :rtype: bool
        """
        return self._kill_job_on_completion

    @kill_job_on_completion.setter
    def kill_job_on_completion(self, kill_job_on_completion):
        """Sets the kill_job_on_completion of this JobManagerTask.

        If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.

        :param kill_job_on_completion: The kill_job_on_completion of this JobManagerTask.
        :type kill_job_on_completion: bool
        """

        self._kill_job_on_completion = kill_job_on_completion

    @property
    def output_files(self):
        """Gets the output_files of this JobManagerTask.


        :return: The output_files of this JobManagerTask.
        :rtype: List[OutputFile]
        """
        return self._output_files

    @output_files.setter
    def output_files(self, output_files):
        """Sets the output_files of this JobManagerTask.


        :param output_files: The output_files of this JobManagerTask.
        :type output_files: List[OutputFile]
        """

        self._output_files = output_files

    @property
    def resource_files(self):
        """Gets the resource_files of this JobManagerTask.

        Files listed under this element are located in the task's working directory.

        :return: The resource_files of this JobManagerTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this JobManagerTask.

        Files listed under this element are located in the task's working directory.

        :param resource_files: The resource_files of this JobManagerTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def run_exclusive(self):
        """Gets the run_exclusive of this JobManagerTask.

        If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.

        :return: The run_exclusive of this JobManagerTask.
        :rtype: bool
        """
        return self._run_exclusive

    @run_exclusive.setter
    def run_exclusive(self, run_exclusive):
        """Sets the run_exclusive of this JobManagerTask.

        If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.

        :param run_exclusive: The run_exclusive of this JobManagerTask.
        :type run_exclusive: bool
        """

        self._run_exclusive = run_exclusive

    @property
    def user_identity(self):
        """Gets the user_identity of this JobManagerTask.


        :return: The user_identity of this JobManagerTask.
        :rtype: UserIdentity
        """
        return self._user_identity

    @user_identity.setter
    def user_identity(self, user_identity):
        """Sets the user_identity of this JobManagerTask.


        :param user_identity: The user_identity of this JobManagerTask.
        :type user_identity: UserIdentity
        """

        self._user_identity = user_identity
