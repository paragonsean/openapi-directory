/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskExecutionResult from './TaskExecutionResult';
import TaskFailureInformation from './TaskFailureInformation';

/**
 * The TaskExecutionInformation model module.
 * @module model/TaskExecutionInformation
 * @version 2017-05-01.5.0
 */
class TaskExecutionInformation {
    /**
     * Constructs a new <code>TaskExecutionInformation</code>.
     * @alias module:model/TaskExecutionInformation
     * @param requeueCount {Number} When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.
     * @param retryCount {Number} The number of times the task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.
     */
    constructor(requeueCount, retryCount) { 
        
        TaskExecutionInformation.initialize(this, requeueCount, retryCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, requeueCount, retryCount) { 
        obj['requeueCount'] = requeueCount;
        obj['retryCount'] = retryCount;
    }

    /**
     * Constructs a <code>TaskExecutionInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskExecutionInformation} obj Optional instance to populate.
     * @return {module:model/TaskExecutionInformation} The populated <code>TaskExecutionInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskExecutionInformation();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('exitCode')) {
                obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Number');
            }
            if (data.hasOwnProperty('failureInfo')) {
                obj['failureInfo'] = TaskFailureInformation.constructFromObject(data['failureInfo']);
            }
            if (data.hasOwnProperty('lastRequeueTime')) {
                obj['lastRequeueTime'] = ApiClient.convertToType(data['lastRequeueTime'], 'Date');
            }
            if (data.hasOwnProperty('lastRetryTime')) {
                obj['lastRetryTime'] = ApiClient.convertToType(data['lastRetryTime'], 'Date');
            }
            if (data.hasOwnProperty('requeueCount')) {
                obj['requeueCount'] = ApiClient.convertToType(data['requeueCount'], 'Number');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = TaskExecutionResult.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('retryCount')) {
                obj['retryCount'] = ApiClient.convertToType(data['retryCount'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskExecutionInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskExecutionInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskExecutionInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `failureInfo`
        if (data['failureInfo']) { // data not null
          TaskFailureInformation.validateJSON(data['failureInfo']);
        }

        return true;
    }


}

TaskExecutionInformation.RequiredProperties = ["requeueCount", "retryCount"];

/**
 * This property is set only if the task is in the Completed state.
 * @member {Date} endTime
 */
TaskExecutionInformation.prototype['endTime'] = undefined;

/**
 * This property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
 * @member {Number} exitCode
 */
TaskExecutionInformation.prototype['exitCode'] = undefined;

/**
 * @member {module:model/TaskFailureInformation} failureInfo
 */
TaskExecutionInformation.prototype['failureInfo'] = undefined;

/**
 * This property is set only if the requeueCount is nonzero.
 * @member {Date} lastRequeueTime
 */
TaskExecutionInformation.prototype['lastRequeueTime'] = undefined;

/**
 * This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
 * @member {Date} lastRetryTime
 */
TaskExecutionInformation.prototype['lastRetryTime'] = undefined;

/**
 * When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.
 * @member {Number} requeueCount
 */
TaskExecutionInformation.prototype['requeueCount'] = undefined;

/**
 * @member {module:model/TaskExecutionResult} result
 */
TaskExecutionInformation.prototype['result'] = undefined;

/**
 * The number of times the task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.
 * @member {Number} retryCount
 */
TaskExecutionInformation.prototype['retryCount'] = undefined;

/**
 * 'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.
 * @member {Date} startTime
 */
TaskExecutionInformation.prototype['startTime'] = undefined;






export default TaskExecutionInformation;

