/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OutputFileBlobContainerDestination model module.
 * @module model/OutputFileBlobContainerDestination
 * @version 2017-05-01.5.0
 */
class OutputFileBlobContainerDestination {
    /**
     * Constructs a new <code>OutputFileBlobContainerDestination</code>.
     * @alias module:model/OutputFileBlobContainerDestination
     * @param containerUrl {String} The URL must include a Shared Access Signature (SAS) granting write permissions to the container.
     */
    constructor(containerUrl) { 
        
        OutputFileBlobContainerDestination.initialize(this, containerUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containerUrl) { 
        obj['containerUrl'] = containerUrl;
    }

    /**
     * Constructs a <code>OutputFileBlobContainerDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputFileBlobContainerDestination} obj Optional instance to populate.
     * @return {module:model/OutputFileBlobContainerDestination} The populated <code>OutputFileBlobContainerDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputFileBlobContainerDestination();

            if (data.hasOwnProperty('containerUrl')) {
                obj['containerUrl'] = ApiClient.convertToType(data['containerUrl'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputFileBlobContainerDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputFileBlobContainerDestination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutputFileBlobContainerDestination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['containerUrl'] && !(typeof data['containerUrl'] === 'string' || data['containerUrl'] instanceof String)) {
            throw new Error("Expected the field `containerUrl` to be a primitive type in the JSON string but got " + data['containerUrl']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}

OutputFileBlobContainerDestination.RequiredProperties = ["containerUrl"];

/**
 * The URL must include a Shared Access Signature (SAS) granting write permissions to the container.
 * @member {String} containerUrl
 */
OutputFileBlobContainerDestination.prototype['containerUrl'] = undefined;

/**
 * If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.
 * @member {String} path
 */
OutputFileBlobContainerDestination.prototype['path'] = undefined;






export default OutputFileBlobContainerDestination;

