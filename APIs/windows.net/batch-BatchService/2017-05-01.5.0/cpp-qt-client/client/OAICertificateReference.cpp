/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateReference::OAICertificateReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateReference::OAICertificateReference() {
    this->initializeModel();
}

OAICertificateReference::~OAICertificateReference() {}

void OAICertificateReference::initializeModel() {

    m_store_location_isSet = false;
    m_store_location_isValid = false;

    m_store_name_isSet = false;
    m_store_name_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_thumbprint_algorithm_isSet = false;
    m_thumbprint_algorithm_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAICertificateReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateReference::fromJsonObject(QJsonObject json) {

    m_store_location_isValid = ::OpenAPI::fromJsonValue(m_store_location, json[QString("storeLocation")]);
    m_store_location_isSet = !json[QString("storeLocation")].isNull() && m_store_location_isValid;

    m_store_name_isValid = ::OpenAPI::fromJsonValue(m_store_name, json[QString("storeName")]);
    m_store_name_isSet = !json[QString("storeName")].isNull() && m_store_name_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_thumbprint_algorithm_isValid = ::OpenAPI::fromJsonValue(m_thumbprint_algorithm, json[QString("thumbprintAlgorithm")]);
    m_thumbprint_algorithm_isSet = !json[QString("thumbprintAlgorithm")].isNull() && m_thumbprint_algorithm_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAICertificateReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateReference::asJsonObject() const {
    QJsonObject obj;
    if (m_store_location_isSet) {
        obj.insert(QString("storeLocation"), ::OpenAPI::toJsonValue(m_store_location));
    }
    if (m_store_name_isSet) {
        obj.insert(QString("storeName"), ::OpenAPI::toJsonValue(m_store_name));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_thumbprint_algorithm_isSet) {
        obj.insert(QString("thumbprintAlgorithm"), ::OpenAPI::toJsonValue(m_thumbprint_algorithm));
    }
    if (m_visibility.size() > 0) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAICertificateReference::getStoreLocation() const {
    return m_store_location;
}
void OAICertificateReference::setStoreLocation(const QString &store_location) {
    m_store_location = store_location;
    m_store_location_isSet = true;
}

bool OAICertificateReference::is_store_location_Set() const{
    return m_store_location_isSet;
}

bool OAICertificateReference::is_store_location_Valid() const{
    return m_store_location_isValid;
}

QString OAICertificateReference::getStoreName() const {
    return m_store_name;
}
void OAICertificateReference::setStoreName(const QString &store_name) {
    m_store_name = store_name;
    m_store_name_isSet = true;
}

bool OAICertificateReference::is_store_name_Set() const{
    return m_store_name_isSet;
}

bool OAICertificateReference::is_store_name_Valid() const{
    return m_store_name_isValid;
}

QString OAICertificateReference::getThumbprint() const {
    return m_thumbprint;
}
void OAICertificateReference::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAICertificateReference::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAICertificateReference::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QString OAICertificateReference::getThumbprintAlgorithm() const {
    return m_thumbprint_algorithm;
}
void OAICertificateReference::setThumbprintAlgorithm(const QString &thumbprint_algorithm) {
    m_thumbprint_algorithm = thumbprint_algorithm;
    m_thumbprint_algorithm_isSet = true;
}

bool OAICertificateReference::is_thumbprint_algorithm_Set() const{
    return m_thumbprint_algorithm_isSet;
}

bool OAICertificateReference::is_thumbprint_algorithm_Valid() const{
    return m_thumbprint_algorithm_isValid;
}

QList<QString> OAICertificateReference::getVisibility() const {
    return m_visibility;
}
void OAICertificateReference::setVisibility(const QList<QString> &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAICertificateReference::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAICertificateReference::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAICertificateReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_store_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_thumbprint_isValid && m_thumbprint_algorithm_isValid && true;
}

} // namespace OpenAPI
