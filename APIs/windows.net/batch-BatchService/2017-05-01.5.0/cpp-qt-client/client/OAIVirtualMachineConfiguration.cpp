/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-05-01.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineConfiguration::OAIVirtualMachineConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineConfiguration::OAIVirtualMachineConfiguration() {
    this->initializeModel();
}

OAIVirtualMachineConfiguration::~OAIVirtualMachineConfiguration() {}

void OAIVirtualMachineConfiguration::initializeModel() {

    m_image_reference_isSet = false;
    m_image_reference_isValid = false;

    m_node_agent_skuid_isSet = false;
    m_node_agent_skuid_isValid = false;

    m_os_disk_isSet = false;
    m_os_disk_isValid = false;

    m_windows_configuration_isSet = false;
    m_windows_configuration_isValid = false;
}

void OAIVirtualMachineConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineConfiguration::fromJsonObject(QJsonObject json) {

    m_image_reference_isValid = ::OpenAPI::fromJsonValue(m_image_reference, json[QString("imageReference")]);
    m_image_reference_isSet = !json[QString("imageReference")].isNull() && m_image_reference_isValid;

    m_node_agent_skuid_isValid = ::OpenAPI::fromJsonValue(m_node_agent_skuid, json[QString("nodeAgentSKUId")]);
    m_node_agent_skuid_isSet = !json[QString("nodeAgentSKUId")].isNull() && m_node_agent_skuid_isValid;

    m_os_disk_isValid = ::OpenAPI::fromJsonValue(m_os_disk, json[QString("osDisk")]);
    m_os_disk_isSet = !json[QString("osDisk")].isNull() && m_os_disk_isValid;

    m_windows_configuration_isValid = ::OpenAPI::fromJsonValue(m_windows_configuration, json[QString("windowsConfiguration")]);
    m_windows_configuration_isSet = !json[QString("windowsConfiguration")].isNull() && m_windows_configuration_isValid;
}

QString OAIVirtualMachineConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_image_reference.isSet()) {
        obj.insert(QString("imageReference"), ::OpenAPI::toJsonValue(m_image_reference));
    }
    if (m_node_agent_skuid_isSet) {
        obj.insert(QString("nodeAgentSKUId"), ::OpenAPI::toJsonValue(m_node_agent_skuid));
    }
    if (m_os_disk.isSet()) {
        obj.insert(QString("osDisk"), ::OpenAPI::toJsonValue(m_os_disk));
    }
    if (m_windows_configuration.isSet()) {
        obj.insert(QString("windowsConfiguration"), ::OpenAPI::toJsonValue(m_windows_configuration));
    }
    return obj;
}

OAIImageReference OAIVirtualMachineConfiguration::getImageReference() const {
    return m_image_reference;
}
void OAIVirtualMachineConfiguration::setImageReference(const OAIImageReference &image_reference) {
    m_image_reference = image_reference;
    m_image_reference_isSet = true;
}

bool OAIVirtualMachineConfiguration::is_image_reference_Set() const{
    return m_image_reference_isSet;
}

bool OAIVirtualMachineConfiguration::is_image_reference_Valid() const{
    return m_image_reference_isValid;
}

QString OAIVirtualMachineConfiguration::getNodeAgentSkuid() const {
    return m_node_agent_skuid;
}
void OAIVirtualMachineConfiguration::setNodeAgentSkuid(const QString &node_agent_skuid) {
    m_node_agent_skuid = node_agent_skuid;
    m_node_agent_skuid_isSet = true;
}

bool OAIVirtualMachineConfiguration::is_node_agent_skuid_Set() const{
    return m_node_agent_skuid_isSet;
}

bool OAIVirtualMachineConfiguration::is_node_agent_skuid_Valid() const{
    return m_node_agent_skuid_isValid;
}

OAIOSDisk OAIVirtualMachineConfiguration::getOsDisk() const {
    return m_os_disk;
}
void OAIVirtualMachineConfiguration::setOsDisk(const OAIOSDisk &os_disk) {
    m_os_disk = os_disk;
    m_os_disk_isSet = true;
}

bool OAIVirtualMachineConfiguration::is_os_disk_Set() const{
    return m_os_disk_isSet;
}

bool OAIVirtualMachineConfiguration::is_os_disk_Valid() const{
    return m_os_disk_isValid;
}

OAIWindowsConfiguration OAIVirtualMachineConfiguration::getWindowsConfiguration() const {
    return m_windows_configuration;
}
void OAIVirtualMachineConfiguration::setWindowsConfiguration(const OAIWindowsConfiguration &windows_configuration) {
    m_windows_configuration = windows_configuration;
    m_windows_configuration_isSet = true;
}

bool OAIVirtualMachineConfiguration::is_windows_configuration_Set() const{
    return m_windows_configuration_isSet;
}

bool OAIVirtualMachineConfiguration::is_windows_configuration_Valid() const{
    return m_windows_configuration_isValid;
}

bool OAIVirtualMachineConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_agent_skuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_agent_skuid_isValid && true;
}

} // namespace OpenAPI
