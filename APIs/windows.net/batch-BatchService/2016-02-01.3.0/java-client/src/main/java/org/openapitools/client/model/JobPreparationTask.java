/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.ResourceFile;
import org.openapitools.client.model.TaskConstraints;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Job Preparation task to run before any tasks of the job on any given compute node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.102636-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobPreparationTask {
  public static final String SERIALIZED_NAME_COMMAND_LINE = "commandLine";
  @SerializedName(SERIALIZED_NAME_COMMAND_LINE)
  private String commandLine;

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private TaskConstraints constraints;

  public static final String SERIALIZED_NAME_ENVIRONMENT_SETTINGS = "environmentSettings";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> environmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RERUN_ON_NODE_REBOOT_AFTER_SUCCESS = "rerunOnNodeRebootAfterSuccess";
  @SerializedName(SERIALIZED_NAME_RERUN_ON_NODE_REBOOT_AFTER_SUCCESS)
  private Boolean rerunOnNodeRebootAfterSuccess;

  public static final String SERIALIZED_NAME_RESOURCE_FILES = "resourceFiles";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILES)
  private List<ResourceFile> resourceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_ELEVATED = "runElevated";
  @SerializedName(SERIALIZED_NAME_RUN_ELEVATED)
  private Boolean runElevated;

  public static final String SERIALIZED_NAME_WAIT_FOR_SUCCESS = "waitForSuccess";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR_SUCCESS)
  private Boolean waitForSuccess;

  public JobPreparationTask() {
  }

  public JobPreparationTask commandLine(String commandLine) {
    this.commandLine = commandLine;
    return this;
  }

  /**
   * The command line of the Job Preparation task.
   * @return commandLine
   */
  @javax.annotation.Nullable
  public String getCommandLine() {
    return commandLine;
  }

  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public JobPreparationTask constraints(TaskConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public TaskConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(TaskConstraints constraints) {
    this.constraints = constraints;
  }


  public JobPreparationTask environmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
    return this;
  }

  public JobPreparationTask addEnvironmentSettingsItem(EnvironmentSetting environmentSettingsItem) {
    if (this.environmentSettings == null) {
      this.environmentSettings = new ArrayList<>();
    }
    this.environmentSettings.add(environmentSettingsItem);
    return this;
  }

  /**
   * A list of environment variable settings for the Job Preparation task.
   * @return environmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getEnvironmentSettings() {
    return environmentSettings;
  }

  public void setEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
  }


  public JobPreparationTask id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A string that uniquely identifies the job preparation task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JobPreparationTask rerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess) {
    this.rerunOnNodeRebootAfterSuccess = rerunOnNodeRebootAfterSuccess;
    return this;
  }

  /**
   * Whether the Batch service should rerun the Job Preparation task after a compute node reboots. Note that the Job Preparation task should still be written to be idempotent because it can be rerun if the compute node is rebooted while Job Preparation task is still running. The default value is true.
   * @return rerunOnNodeRebootAfterSuccess
   */
  @javax.annotation.Nullable
  public Boolean getRerunOnNodeRebootAfterSuccess() {
    return rerunOnNodeRebootAfterSuccess;
  }

  public void setRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess) {
    this.rerunOnNodeRebootAfterSuccess = rerunOnNodeRebootAfterSuccess;
  }


  public JobPreparationTask resourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
    return this;
  }

  public JobPreparationTask addResourceFilesItem(ResourceFile resourceFilesItem) {
    if (this.resourceFiles == null) {
      this.resourceFiles = new ArrayList<>();
    }
    this.resourceFiles.add(resourceFilesItem);
    return this;
  }

  /**
   * A list of files that the Batch service will download to the compute node before running the command line.
   * @return resourceFiles
   */
  @javax.annotation.Nullable
  public List<ResourceFile> getResourceFiles() {
    return resourceFiles;
  }

  public void setResourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
  }


  public JobPreparationTask runElevated(Boolean runElevated) {
    this.runElevated = runElevated;
    return this;
  }

  /**
   * Whether to run the Job Preparation task in elevated mode. The default value is false.
   * @return runElevated
   */
  @javax.annotation.Nullable
  public Boolean getRunElevated() {
    return runElevated;
  }

  public void setRunElevated(Boolean runElevated) {
    this.runElevated = runElevated;
  }


  public JobPreparationTask waitForSuccess(Boolean waitForSuccess) {
    this.waitForSuccess = waitForSuccess;
    return this;
  }

  /**
   * Whether the Batch service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node.
   * @return waitForSuccess
   */
  @javax.annotation.Nullable
  public Boolean getWaitForSuccess() {
    return waitForSuccess;
  }

  public void setWaitForSuccess(Boolean waitForSuccess) {
    this.waitForSuccess = waitForSuccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobPreparationTask jobPreparationTask = (JobPreparationTask) o;
    return Objects.equals(this.commandLine, jobPreparationTask.commandLine) &&
        Objects.equals(this.constraints, jobPreparationTask.constraints) &&
        Objects.equals(this.environmentSettings, jobPreparationTask.environmentSettings) &&
        Objects.equals(this.id, jobPreparationTask.id) &&
        Objects.equals(this.rerunOnNodeRebootAfterSuccess, jobPreparationTask.rerunOnNodeRebootAfterSuccess) &&
        Objects.equals(this.resourceFiles, jobPreparationTask.resourceFiles) &&
        Objects.equals(this.runElevated, jobPreparationTask.runElevated) &&
        Objects.equals(this.waitForSuccess, jobPreparationTask.waitForSuccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandLine, constraints, environmentSettings, id, rerunOnNodeRebootAfterSuccess, resourceFiles, runElevated, waitForSuccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobPreparationTask {\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    environmentSettings: ").append(toIndentedString(environmentSettings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rerunOnNodeRebootAfterSuccess: ").append(toIndentedString(rerunOnNodeRebootAfterSuccess)).append("\n");
    sb.append("    resourceFiles: ").append(toIndentedString(resourceFiles)).append("\n");
    sb.append("    runElevated: ").append(toIndentedString(runElevated)).append("\n");
    sb.append("    waitForSuccess: ").append(toIndentedString(waitForSuccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commandLine");
    openapiFields.add("constraints");
    openapiFields.add("environmentSettings");
    openapiFields.add("id");
    openapiFields.add("rerunOnNodeRebootAfterSuccess");
    openapiFields.add("resourceFiles");
    openapiFields.add("runElevated");
    openapiFields.add("waitForSuccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobPreparationTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobPreparationTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobPreparationTask is not found in the empty JSON string", JobPreparationTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobPreparationTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobPreparationTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commandLine") != null && !jsonObj.get("commandLine").isJsonNull()) && !jsonObj.get("commandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandLine").toString()));
      }
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        TaskConstraints.validateJsonElement(jsonObj.get("constraints"));
      }
      if (jsonObj.get("environmentSettings") != null && !jsonObj.get("environmentSettings").isJsonNull()) {
        JsonArray jsonArrayenvironmentSettings = jsonObj.getAsJsonArray("environmentSettings");
        if (jsonArrayenvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSettings").toString()));
          }

          // validate the optional field `environmentSettings` (array)
          for (int i = 0; i < jsonArrayenvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArrayenvironmentSettings.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("resourceFiles") != null && !jsonObj.get("resourceFiles").isJsonNull()) {
        JsonArray jsonArrayresourceFiles = jsonObj.getAsJsonArray("resourceFiles");
        if (jsonArrayresourceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("resourceFiles").toString()));
          }

          // validate the optional field `resourceFiles` (array)
          for (int i = 0; i < jsonArrayresourceFiles.size(); i++) {
            ResourceFile.validateJsonElement(jsonArrayresourceFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobPreparationTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobPreparationTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobPreparationTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobPreparationTask.class));

       return (TypeAdapter<T>) new TypeAdapter<JobPreparationTask>() {
           @Override
           public void write(JsonWriter out, JobPreparationTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobPreparationTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobPreparationTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobPreparationTask
   * @throws IOException if the JSON string is invalid with respect to JobPreparationTask
   */
  public static JobPreparationTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobPreparationTask.class);
  }

  /**
   * Convert an instance of JobPreparationTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

