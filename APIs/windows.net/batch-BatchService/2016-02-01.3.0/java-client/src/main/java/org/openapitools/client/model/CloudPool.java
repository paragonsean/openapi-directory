/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationPackageReference;
import org.openapitools.client.model.AutoScaleRun;
import org.openapitools.client.model.CertificateReference;
import org.openapitools.client.model.CloudServiceConfiguration;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.PoolStatistics;
import org.openapitools.client.model.ResizeError;
import org.openapitools.client.model.StartTask;
import org.openapitools.client.model.TaskSchedulingPolicy;
import org.openapitools.client.model.VirtualMachineConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A pool in the Azure Batch service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.102636-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudPool {
  /**
   * Whether the pool is resizing.
   */
  @JsonAdapter(AllocationStateEnum.Adapter.class)
  public enum AllocationStateEnum {
    STEADY("steady"),
    
    RESIZING("resizing"),
    
    STOPPING("stopping");

    private String value;

    AllocationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllocationStateEnum fromValue(String value) {
      for (AllocationStateEnum b : AllocationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllocationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllocationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllocationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllocationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllocationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOCATION_STATE = "allocationState";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_STATE)
  private AllocationStateEnum allocationState;

  public static final String SERIALIZED_NAME_ALLOCATION_STATE_TRANSITION_TIME = "allocationStateTransitionTime";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_STATE_TRANSITION_TIME)
  private OffsetDateTime allocationStateTransitionTime;

  public static final String SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES = "applicationPackageReferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES)
  private List<ApplicationPackageReference> applicationPackageReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_SCALE_EVALUATION_INTERVAL = "autoScaleEvaluationInterval";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_EVALUATION_INTERVAL)
  private String autoScaleEvaluationInterval;

  public static final String SERIALIZED_NAME_AUTO_SCALE_FORMULA = "autoScaleFormula";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_FORMULA)
  private String autoScaleFormula;

  public static final String SERIALIZED_NAME_AUTO_SCALE_RUN = "autoScaleRun";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_RUN)
  private AutoScaleRun autoScaleRun;

  public static final String SERIALIZED_NAME_CERTIFICATE_REFERENCES = "certificateReferences";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_REFERENCES)
  private List<CertificateReference> certificateReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_SERVICE_CONFIGURATION = "cloudServiceConfiguration";
  @SerializedName(SERIALIZED_NAME_CLOUD_SERVICE_CONFIGURATION)
  private CloudServiceConfiguration cloudServiceConfiguration;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_CURRENT_DEDICATED = "currentDedicated";
  @SerializedName(SERIALIZED_NAME_CURRENT_DEDICATED)
  private Integer currentDedicated;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_E_TAG = "eTag";
  @SerializedName(SERIALIZED_NAME_E_TAG)
  private String eTag;

  public static final String SERIALIZED_NAME_ENABLE_AUTO_SCALE = "enableAutoScale";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTO_SCALE)
  private Boolean enableAutoScale;

  public static final String SERIALIZED_NAME_ENABLE_INTER_NODE_COMMUNICATION = "enableInterNodeCommunication";
  @SerializedName(SERIALIZED_NAME_ENABLE_INTER_NODE_COMMUNICATION)
  private Boolean enableInterNodeCommunication;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_MAX_TASKS_PER_NODE = "maxTasksPerNode";
  @SerializedName(SERIALIZED_NAME_MAX_TASKS_PER_NODE)
  private Integer maxTasksPerNode;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESIZE_ERROR = "resizeError";
  @SerializedName(SERIALIZED_NAME_RESIZE_ERROR)
  private ResizeError resizeError;

  public static final String SERIALIZED_NAME_RESIZE_TIMEOUT = "resizeTimeout";
  @SerializedName(SERIALIZED_NAME_RESIZE_TIMEOUT)
  private String resizeTimeout;

  public static final String SERIALIZED_NAME_START_TASK = "startTask";
  @SerializedName(SERIALIZED_NAME_START_TASK)
  private StartTask startTask;

  /**
   * The current state of the pool.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("active"),
    
    DELETING("deleting"),
    
    UPGRADING("upgrading");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_TRANSITION_TIME = "stateTransitionTime";
  @SerializedName(SERIALIZED_NAME_STATE_TRANSITION_TIME)
  private OffsetDateTime stateTransitionTime;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private PoolStatistics stats;

  public static final String SERIALIZED_NAME_TARGET_DEDICATED = "targetDedicated";
  @SerializedName(SERIALIZED_NAME_TARGET_DEDICATED)
  private Integer targetDedicated;

  public static final String SERIALIZED_NAME_TASK_SCHEDULING_POLICY = "taskSchedulingPolicy";
  @SerializedName(SERIALIZED_NAME_TASK_SCHEDULING_POLICY)
  private TaskSchedulingPolicy taskSchedulingPolicy;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINE_CONFIGURATION = "virtualMachineConfiguration";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE_CONFIGURATION)
  private VirtualMachineConfiguration virtualMachineConfiguration;

  public static final String SERIALIZED_NAME_VM_SIZE = "vmSize";
  @SerializedName(SERIALIZED_NAME_VM_SIZE)
  private String vmSize;

  public CloudPool() {
  }

  public CloudPool allocationState(AllocationStateEnum allocationState) {
    this.allocationState = allocationState;
    return this;
  }

  /**
   * Whether the pool is resizing.
   * @return allocationState
   */
  @javax.annotation.Nullable
  public AllocationStateEnum getAllocationState() {
    return allocationState;
  }

  public void setAllocationState(AllocationStateEnum allocationState) {
    this.allocationState = allocationState;
  }


  public CloudPool allocationStateTransitionTime(OffsetDateTime allocationStateTransitionTime) {
    this.allocationStateTransitionTime = allocationStateTransitionTime;
    return this;
  }

  /**
   * The time at which the pool entered its current allocation state.
   * @return allocationStateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAllocationStateTransitionTime() {
    return allocationStateTransitionTime;
  }

  public void setAllocationStateTransitionTime(OffsetDateTime allocationStateTransitionTime) {
    this.allocationStateTransitionTime = allocationStateTransitionTime;
  }


  public CloudPool applicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
    return this;
  }

  public CloudPool addApplicationPackageReferencesItem(ApplicationPackageReference applicationPackageReferencesItem) {
    if (this.applicationPackageReferences == null) {
      this.applicationPackageReferences = new ArrayList<>();
    }
    this.applicationPackageReferences.add(applicationPackageReferencesItem);
    return this;
  }

  /**
   * The list of application packages to be installed on each compute node in the pool.
   * @return applicationPackageReferences
   */
  @javax.annotation.Nullable
  public List<ApplicationPackageReference> getApplicationPackageReferences() {
    return applicationPackageReferences;
  }

  public void setApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
  }


  public CloudPool autoScaleEvaluationInterval(String autoScaleEvaluationInterval) {
    this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
    return this;
  }

  /**
   * A time interval for the desired AutoScale evaluation period in the pool.
   * @return autoScaleEvaluationInterval
   */
  @javax.annotation.Nullable
  public String getAutoScaleEvaluationInterval() {
    return autoScaleEvaluationInterval;
  }

  public void setAutoScaleEvaluationInterval(String autoScaleEvaluationInterval) {
    this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
  }


  public CloudPool autoScaleFormula(String autoScaleFormula) {
    this.autoScaleFormula = autoScaleFormula;
    return this;
  }

  /**
   * A formula for the desired number of compute nodes in the pool.
   * @return autoScaleFormula
   */
  @javax.annotation.Nullable
  public String getAutoScaleFormula() {
    return autoScaleFormula;
  }

  public void setAutoScaleFormula(String autoScaleFormula) {
    this.autoScaleFormula = autoScaleFormula;
  }


  public CloudPool autoScaleRun(AutoScaleRun autoScaleRun) {
    this.autoScaleRun = autoScaleRun;
    return this;
  }

  /**
   * Get autoScaleRun
   * @return autoScaleRun
   */
  @javax.annotation.Nullable
  public AutoScaleRun getAutoScaleRun() {
    return autoScaleRun;
  }

  public void setAutoScaleRun(AutoScaleRun autoScaleRun) {
    this.autoScaleRun = autoScaleRun;
  }


  public CloudPool certificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
    return this;
  }

  public CloudPool addCertificateReferencesItem(CertificateReference certificateReferencesItem) {
    if (this.certificateReferences == null) {
      this.certificateReferences = new ArrayList<>();
    }
    this.certificateReferences.add(certificateReferencesItem);
    return this;
  }

  /**
   * The list of certificates to be installed on each compute node in the pool.
   * @return certificateReferences
   */
  @javax.annotation.Nullable
  public List<CertificateReference> getCertificateReferences() {
    return certificateReferences;
  }

  public void setCertificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
  }


  public CloudPool cloudServiceConfiguration(CloudServiceConfiguration cloudServiceConfiguration) {
    this.cloudServiceConfiguration = cloudServiceConfiguration;
    return this;
  }

  /**
   * Get cloudServiceConfiguration
   * @return cloudServiceConfiguration
   */
  @javax.annotation.Nullable
  public CloudServiceConfiguration getCloudServiceConfiguration() {
    return cloudServiceConfiguration;
  }

  public void setCloudServiceConfiguration(CloudServiceConfiguration cloudServiceConfiguration) {
    this.cloudServiceConfiguration = cloudServiceConfiguration;
  }


  public CloudPool creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The creation time of the pool.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public CloudPool currentDedicated(Integer currentDedicated) {
    this.currentDedicated = currentDedicated;
    return this;
  }

  /**
   * The number of compute nodes currently in the pool.
   * @return currentDedicated
   */
  @javax.annotation.Nullable
  public Integer getCurrentDedicated() {
    return currentDedicated;
  }

  public void setCurrentDedicated(Integer currentDedicated) {
    this.currentDedicated = currentDedicated;
  }


  public CloudPool displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for the pool.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CloudPool eTag(String eTag) {
    this.eTag = eTag;
    return this;
  }

  /**
   * The ETag of the pool.
   * @return eTag
   */
  @javax.annotation.Nullable
  public String geteTag() {
    return eTag;
  }

  public void seteTag(String eTag) {
    this.eTag = eTag;
  }


  public CloudPool enableAutoScale(Boolean enableAutoScale) {
    this.enableAutoScale = enableAutoScale;
    return this;
  }

  /**
   * Whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.
   * @return enableAutoScale
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutoScale() {
    return enableAutoScale;
  }

  public void setEnableAutoScale(Boolean enableAutoScale) {
    this.enableAutoScale = enableAutoScale;
  }


  public CloudPool enableInterNodeCommunication(Boolean enableInterNodeCommunication) {
    this.enableInterNodeCommunication = enableInterNodeCommunication;
    return this;
  }

  /**
   * Whether the pool permits direct communication between nodes.
   * @return enableInterNodeCommunication
   */
  @javax.annotation.Nullable
  public Boolean getEnableInterNodeCommunication() {
    return enableInterNodeCommunication;
  }

  public void setEnableInterNodeCommunication(Boolean enableInterNodeCommunication) {
    this.enableInterNodeCommunication = enableInterNodeCommunication;
  }


  public CloudPool id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CloudPool lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * The last modified time of the pool.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public CloudPool maxTasksPerNode(Integer maxTasksPerNode) {
    this.maxTasksPerNode = maxTasksPerNode;
    return this;
  }

  /**
   * The maximum number of tasks that can run concurrently on a single compute node in the pool.
   * @return maxTasksPerNode
   */
  @javax.annotation.Nullable
  public Integer getMaxTasksPerNode() {
    return maxTasksPerNode;
  }

  public void setMaxTasksPerNode(Integer maxTasksPerNode) {
    this.maxTasksPerNode = maxTasksPerNode;
  }


  public CloudPool metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public CloudPool addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * A list of name-value pairs associated with the pool as metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public CloudPool resizeError(ResizeError resizeError) {
    this.resizeError = resizeError;
    return this;
  }

  /**
   * Get resizeError
   * @return resizeError
   */
  @javax.annotation.Nullable
  public ResizeError getResizeError() {
    return resizeError;
  }

  public void setResizeError(ResizeError resizeError) {
    this.resizeError = resizeError;
  }


  public CloudPool resizeTimeout(String resizeTimeout) {
    this.resizeTimeout = resizeTimeout;
    return this;
  }

  /**
   * The timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.
   * @return resizeTimeout
   */
  @javax.annotation.Nullable
  public String getResizeTimeout() {
    return resizeTimeout;
  }

  public void setResizeTimeout(String resizeTimeout) {
    this.resizeTimeout = resizeTimeout;
  }


  public CloudPool startTask(StartTask startTask) {
    this.startTask = startTask;
    return this;
  }

  /**
   * Get startTask
   * @return startTask
   */
  @javax.annotation.Nullable
  public StartTask getStartTask() {
    return startTask;
  }

  public void setStartTask(StartTask startTask) {
    this.startTask = startTask;
  }


  public CloudPool state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the pool.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public CloudPool stateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
    return this;
  }

  /**
   * The time at which the pool entered its current state.
   * @return stateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateTransitionTime() {
    return stateTransitionTime;
  }

  public void setStateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
  }


  public CloudPool stats(PoolStatistics stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public PoolStatistics getStats() {
    return stats;
  }

  public void setStats(PoolStatistics stats) {
    this.stats = stats;
  }


  public CloudPool targetDedicated(Integer targetDedicated) {
    this.targetDedicated = targetDedicated;
    return this;
  }

  /**
   * The desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.
   * @return targetDedicated
   */
  @javax.annotation.Nullable
  public Integer getTargetDedicated() {
    return targetDedicated;
  }

  public void setTargetDedicated(Integer targetDedicated) {
    this.targetDedicated = targetDedicated;
  }


  public CloudPool taskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy) {
    this.taskSchedulingPolicy = taskSchedulingPolicy;
    return this;
  }

  /**
   * Get taskSchedulingPolicy
   * @return taskSchedulingPolicy
   */
  @javax.annotation.Nullable
  public TaskSchedulingPolicy getTaskSchedulingPolicy() {
    return taskSchedulingPolicy;
  }

  public void setTaskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy) {
    this.taskSchedulingPolicy = taskSchedulingPolicy;
  }


  public CloudPool url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of the pool.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CloudPool virtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
    this.virtualMachineConfiguration = virtualMachineConfiguration;
    return this;
  }

  /**
   * Get virtualMachineConfiguration
   * @return virtualMachineConfiguration
   */
  @javax.annotation.Nullable
  public VirtualMachineConfiguration getVirtualMachineConfiguration() {
    return virtualMachineConfiguration;
  }

  public void setVirtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
    this.virtualMachineConfiguration = virtualMachineConfiguration;
  }


  public CloudPool vmSize(String vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  /**
   * The size of virtual machines in the pool. All virtual machines in a pool are the same size.
   * @return vmSize
   */
  @javax.annotation.Nullable
  public String getVmSize() {
    return vmSize;
  }

  public void setVmSize(String vmSize) {
    this.vmSize = vmSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudPool cloudPool = (CloudPool) o;
    return Objects.equals(this.allocationState, cloudPool.allocationState) &&
        Objects.equals(this.allocationStateTransitionTime, cloudPool.allocationStateTransitionTime) &&
        Objects.equals(this.applicationPackageReferences, cloudPool.applicationPackageReferences) &&
        Objects.equals(this.autoScaleEvaluationInterval, cloudPool.autoScaleEvaluationInterval) &&
        Objects.equals(this.autoScaleFormula, cloudPool.autoScaleFormula) &&
        Objects.equals(this.autoScaleRun, cloudPool.autoScaleRun) &&
        Objects.equals(this.certificateReferences, cloudPool.certificateReferences) &&
        Objects.equals(this.cloudServiceConfiguration, cloudPool.cloudServiceConfiguration) &&
        Objects.equals(this.creationTime, cloudPool.creationTime) &&
        Objects.equals(this.currentDedicated, cloudPool.currentDedicated) &&
        Objects.equals(this.displayName, cloudPool.displayName) &&
        Objects.equals(this.eTag, cloudPool.eTag) &&
        Objects.equals(this.enableAutoScale, cloudPool.enableAutoScale) &&
        Objects.equals(this.enableInterNodeCommunication, cloudPool.enableInterNodeCommunication) &&
        Objects.equals(this.id, cloudPool.id) &&
        Objects.equals(this.lastModified, cloudPool.lastModified) &&
        Objects.equals(this.maxTasksPerNode, cloudPool.maxTasksPerNode) &&
        Objects.equals(this.metadata, cloudPool.metadata) &&
        Objects.equals(this.resizeError, cloudPool.resizeError) &&
        Objects.equals(this.resizeTimeout, cloudPool.resizeTimeout) &&
        Objects.equals(this.startTask, cloudPool.startTask) &&
        Objects.equals(this.state, cloudPool.state) &&
        Objects.equals(this.stateTransitionTime, cloudPool.stateTransitionTime) &&
        Objects.equals(this.stats, cloudPool.stats) &&
        Objects.equals(this.targetDedicated, cloudPool.targetDedicated) &&
        Objects.equals(this.taskSchedulingPolicy, cloudPool.taskSchedulingPolicy) &&
        Objects.equals(this.url, cloudPool.url) &&
        Objects.equals(this.virtualMachineConfiguration, cloudPool.virtualMachineConfiguration) &&
        Objects.equals(this.vmSize, cloudPool.vmSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocationState, allocationStateTransitionTime, applicationPackageReferences, autoScaleEvaluationInterval, autoScaleFormula, autoScaleRun, certificateReferences, cloudServiceConfiguration, creationTime, currentDedicated, displayName, eTag, enableAutoScale, enableInterNodeCommunication, id, lastModified, maxTasksPerNode, metadata, resizeError, resizeTimeout, startTask, state, stateTransitionTime, stats, targetDedicated, taskSchedulingPolicy, url, virtualMachineConfiguration, vmSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudPool {\n");
    sb.append("    allocationState: ").append(toIndentedString(allocationState)).append("\n");
    sb.append("    allocationStateTransitionTime: ").append(toIndentedString(allocationStateTransitionTime)).append("\n");
    sb.append("    applicationPackageReferences: ").append(toIndentedString(applicationPackageReferences)).append("\n");
    sb.append("    autoScaleEvaluationInterval: ").append(toIndentedString(autoScaleEvaluationInterval)).append("\n");
    sb.append("    autoScaleFormula: ").append(toIndentedString(autoScaleFormula)).append("\n");
    sb.append("    autoScaleRun: ").append(toIndentedString(autoScaleRun)).append("\n");
    sb.append("    certificateReferences: ").append(toIndentedString(certificateReferences)).append("\n");
    sb.append("    cloudServiceConfiguration: ").append(toIndentedString(cloudServiceConfiguration)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    currentDedicated: ").append(toIndentedString(currentDedicated)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eTag: ").append(toIndentedString(eTag)).append("\n");
    sb.append("    enableAutoScale: ").append(toIndentedString(enableAutoScale)).append("\n");
    sb.append("    enableInterNodeCommunication: ").append(toIndentedString(enableInterNodeCommunication)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    maxTasksPerNode: ").append(toIndentedString(maxTasksPerNode)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    resizeError: ").append(toIndentedString(resizeError)).append("\n");
    sb.append("    resizeTimeout: ").append(toIndentedString(resizeTimeout)).append("\n");
    sb.append("    startTask: ").append(toIndentedString(startTask)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateTransitionTime: ").append(toIndentedString(stateTransitionTime)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    targetDedicated: ").append(toIndentedString(targetDedicated)).append("\n");
    sb.append("    taskSchedulingPolicy: ").append(toIndentedString(taskSchedulingPolicy)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    virtualMachineConfiguration: ").append(toIndentedString(virtualMachineConfiguration)).append("\n");
    sb.append("    vmSize: ").append(toIndentedString(vmSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocationState");
    openapiFields.add("allocationStateTransitionTime");
    openapiFields.add("applicationPackageReferences");
    openapiFields.add("autoScaleEvaluationInterval");
    openapiFields.add("autoScaleFormula");
    openapiFields.add("autoScaleRun");
    openapiFields.add("certificateReferences");
    openapiFields.add("cloudServiceConfiguration");
    openapiFields.add("creationTime");
    openapiFields.add("currentDedicated");
    openapiFields.add("displayName");
    openapiFields.add("eTag");
    openapiFields.add("enableAutoScale");
    openapiFields.add("enableInterNodeCommunication");
    openapiFields.add("id");
    openapiFields.add("lastModified");
    openapiFields.add("maxTasksPerNode");
    openapiFields.add("metadata");
    openapiFields.add("resizeError");
    openapiFields.add("resizeTimeout");
    openapiFields.add("startTask");
    openapiFields.add("state");
    openapiFields.add("stateTransitionTime");
    openapiFields.add("stats");
    openapiFields.add("targetDedicated");
    openapiFields.add("taskSchedulingPolicy");
    openapiFields.add("url");
    openapiFields.add("virtualMachineConfiguration");
    openapiFields.add("vmSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudPool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudPool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudPool is not found in the empty JSON string", CloudPool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudPool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudPool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allocationState") != null && !jsonObj.get("allocationState").isJsonNull()) && !jsonObj.get("allocationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocationState").toString()));
      }
      // validate the optional field `allocationState`
      if (jsonObj.get("allocationState") != null && !jsonObj.get("allocationState").isJsonNull()) {
        AllocationStateEnum.validateJsonElement(jsonObj.get("allocationState"));
      }
      if (jsonObj.get("applicationPackageReferences") != null && !jsonObj.get("applicationPackageReferences").isJsonNull()) {
        JsonArray jsonArrayapplicationPackageReferences = jsonObj.getAsJsonArray("applicationPackageReferences");
        if (jsonArrayapplicationPackageReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicationPackageReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicationPackageReferences` to be an array in the JSON string but got `%s`", jsonObj.get("applicationPackageReferences").toString()));
          }

          // validate the optional field `applicationPackageReferences` (array)
          for (int i = 0; i < jsonArrayapplicationPackageReferences.size(); i++) {
            ApplicationPackageReference.validateJsonElement(jsonArrayapplicationPackageReferences.get(i));
          };
        }
      }
      if ((jsonObj.get("autoScaleEvaluationInterval") != null && !jsonObj.get("autoScaleEvaluationInterval").isJsonNull()) && !jsonObj.get("autoScaleEvaluationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoScaleEvaluationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoScaleEvaluationInterval").toString()));
      }
      if ((jsonObj.get("autoScaleFormula") != null && !jsonObj.get("autoScaleFormula").isJsonNull()) && !jsonObj.get("autoScaleFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoScaleFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoScaleFormula").toString()));
      }
      // validate the optional field `autoScaleRun`
      if (jsonObj.get("autoScaleRun") != null && !jsonObj.get("autoScaleRun").isJsonNull()) {
        AutoScaleRun.validateJsonElement(jsonObj.get("autoScaleRun"));
      }
      if (jsonObj.get("certificateReferences") != null && !jsonObj.get("certificateReferences").isJsonNull()) {
        JsonArray jsonArraycertificateReferences = jsonObj.getAsJsonArray("certificateReferences");
        if (jsonArraycertificateReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("certificateReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `certificateReferences` to be an array in the JSON string but got `%s`", jsonObj.get("certificateReferences").toString()));
          }

          // validate the optional field `certificateReferences` (array)
          for (int i = 0; i < jsonArraycertificateReferences.size(); i++) {
            CertificateReference.validateJsonElement(jsonArraycertificateReferences.get(i));
          };
        }
      }
      // validate the optional field `cloudServiceConfiguration`
      if (jsonObj.get("cloudServiceConfiguration") != null && !jsonObj.get("cloudServiceConfiguration").isJsonNull()) {
        CloudServiceConfiguration.validateJsonElement(jsonObj.get("cloudServiceConfiguration"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("eTag") != null && !jsonObj.get("eTag").isJsonNull()) && !jsonObj.get("eTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eTag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the optional field `resizeError`
      if (jsonObj.get("resizeError") != null && !jsonObj.get("resizeError").isJsonNull()) {
        ResizeError.validateJsonElement(jsonObj.get("resizeError"));
      }
      if ((jsonObj.get("resizeTimeout") != null && !jsonObj.get("resizeTimeout").isJsonNull()) && !jsonObj.get("resizeTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resizeTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resizeTimeout").toString()));
      }
      // validate the optional field `startTask`
      if (jsonObj.get("startTask") != null && !jsonObj.get("startTask").isJsonNull()) {
        StartTask.validateJsonElement(jsonObj.get("startTask"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        PoolStatistics.validateJsonElement(jsonObj.get("stats"));
      }
      // validate the optional field `taskSchedulingPolicy`
      if (jsonObj.get("taskSchedulingPolicy") != null && !jsonObj.get("taskSchedulingPolicy").isJsonNull()) {
        TaskSchedulingPolicy.validateJsonElement(jsonObj.get("taskSchedulingPolicy"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `virtualMachineConfiguration`
      if (jsonObj.get("virtualMachineConfiguration") != null && !jsonObj.get("virtualMachineConfiguration").isJsonNull()) {
        VirtualMachineConfiguration.validateJsonElement(jsonObj.get("virtualMachineConfiguration"));
      }
      if ((jsonObj.get("vmSize") != null && !jsonObj.get("vmSize").isJsonNull()) && !jsonObj.get("vmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudPool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudPool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudPool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudPool.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudPool>() {
           @Override
           public void write(JsonWriter out, CloudPool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudPool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudPool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudPool
   * @throws IOException if the JSON string is invalid with respect to CloudPool
   */
  public static CloudPool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudPool.class);
  }

  /**
   * Convert an instance of CloudPool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

