/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.ResourceFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.102636-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTask {
  public static final String SERIALIZED_NAME_COMMAND_LINE = "commandLine";
  @SerializedName(SERIALIZED_NAME_COMMAND_LINE)
  private String commandLine;

  public static final String SERIALIZED_NAME_ENVIRONMENT_SETTINGS = "environmentSettings";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> environmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_TASK_RETRY_COUNT = "maxTaskRetryCount";
  @SerializedName(SERIALIZED_NAME_MAX_TASK_RETRY_COUNT)
  private Integer maxTaskRetryCount;

  public static final String SERIALIZED_NAME_RESOURCE_FILES = "resourceFiles";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILES)
  private List<ResourceFile> resourceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_ELEVATED = "runElevated";
  @SerializedName(SERIALIZED_NAME_RUN_ELEVATED)
  private Boolean runElevated;

  public static final String SERIALIZED_NAME_WAIT_FOR_SUCCESS = "waitForSuccess";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR_SUCCESS)
  private Boolean waitForSuccess;

  public StartTask() {
  }

  public StartTask commandLine(String commandLine) {
    this.commandLine = commandLine;
    return this;
  }

  /**
   * The command line of the start task.
   * @return commandLine
   */
  @javax.annotation.Nullable
  public String getCommandLine() {
    return commandLine;
  }

  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public StartTask environmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
    return this;
  }

  public StartTask addEnvironmentSettingsItem(EnvironmentSetting environmentSettingsItem) {
    if (this.environmentSettings == null) {
      this.environmentSettings = new ArrayList<>();
    }
    this.environmentSettings.add(environmentSettingsItem);
    return this;
  }

  /**
   * A list of environment variable settings for the start task.
   * @return environmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getEnvironmentSettings() {
    return environmentSettings;
  }

  public void setEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
  }


  public StartTask maxTaskRetryCount(Integer maxTaskRetryCount) {
    this.maxTaskRetryCount = maxTaskRetryCount;
    return this;
  }

  /**
   * The maximum number of times the task may be retried.
   * @return maxTaskRetryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxTaskRetryCount() {
    return maxTaskRetryCount;
  }

  public void setMaxTaskRetryCount(Integer maxTaskRetryCount) {
    this.maxTaskRetryCount = maxTaskRetryCount;
  }


  public StartTask resourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
    return this;
  }

  public StartTask addResourceFilesItem(ResourceFile resourceFilesItem) {
    if (this.resourceFiles == null) {
      this.resourceFiles = new ArrayList<>();
    }
    this.resourceFiles.add(resourceFilesItem);
    return this;
  }

  /**
   * A list of files that the Batch service will download to the compute node before running the command line.
   * @return resourceFiles
   */
  @javax.annotation.Nullable
  public List<ResourceFile> getResourceFiles() {
    return resourceFiles;
  }

  public void setResourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
  }


  public StartTask runElevated(Boolean runElevated) {
    this.runElevated = runElevated;
    return this;
  }

  /**
   * Whether to run the start task in elevated mode. The default value is false.
   * @return runElevated
   */
  @javax.annotation.Nullable
  public Boolean getRunElevated() {
    return runElevated;
  }

  public void setRunElevated(Boolean runElevated) {
    this.runElevated = runElevated;
  }


  public StartTask waitForSuccess(Boolean waitForSuccess) {
    this.waitForSuccess = waitForSuccess;
    return this;
  }

  /**
   * Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.
   * @return waitForSuccess
   */
  @javax.annotation.Nullable
  public Boolean getWaitForSuccess() {
    return waitForSuccess;
  }

  public void setWaitForSuccess(Boolean waitForSuccess) {
    this.waitForSuccess = waitForSuccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTask startTask = (StartTask) o;
    return Objects.equals(this.commandLine, startTask.commandLine) &&
        Objects.equals(this.environmentSettings, startTask.environmentSettings) &&
        Objects.equals(this.maxTaskRetryCount, startTask.maxTaskRetryCount) &&
        Objects.equals(this.resourceFiles, startTask.resourceFiles) &&
        Objects.equals(this.runElevated, startTask.runElevated) &&
        Objects.equals(this.waitForSuccess, startTask.waitForSuccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandLine, environmentSettings, maxTaskRetryCount, resourceFiles, runElevated, waitForSuccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTask {\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    environmentSettings: ").append(toIndentedString(environmentSettings)).append("\n");
    sb.append("    maxTaskRetryCount: ").append(toIndentedString(maxTaskRetryCount)).append("\n");
    sb.append("    resourceFiles: ").append(toIndentedString(resourceFiles)).append("\n");
    sb.append("    runElevated: ").append(toIndentedString(runElevated)).append("\n");
    sb.append("    waitForSuccess: ").append(toIndentedString(waitForSuccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commandLine");
    openapiFields.add("environmentSettings");
    openapiFields.add("maxTaskRetryCount");
    openapiFields.add("resourceFiles");
    openapiFields.add("runElevated");
    openapiFields.add("waitForSuccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTask is not found in the empty JSON string", StartTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commandLine") != null && !jsonObj.get("commandLine").isJsonNull()) && !jsonObj.get("commandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandLine").toString()));
      }
      if (jsonObj.get("environmentSettings") != null && !jsonObj.get("environmentSettings").isJsonNull()) {
        JsonArray jsonArrayenvironmentSettings = jsonObj.getAsJsonArray("environmentSettings");
        if (jsonArrayenvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSettings").toString()));
          }

          // validate the optional field `environmentSettings` (array)
          for (int i = 0; i < jsonArrayenvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArrayenvironmentSettings.get(i));
          };
        }
      }
      if (jsonObj.get("resourceFiles") != null && !jsonObj.get("resourceFiles").isJsonNull()) {
        JsonArray jsonArrayresourceFiles = jsonObj.getAsJsonArray("resourceFiles");
        if (jsonArrayresourceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("resourceFiles").toString()));
          }

          // validate the optional field `resourceFiles` (array)
          for (int i = 0; i < jsonArrayresourceFiles.size(); i++) {
            ResourceFile.validateJsonElement(jsonArrayresourceFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTask.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTask>() {
           @Override
           public void write(JsonWriter out, StartTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTask
   * @throws IOException if the JSON string is invalid with respect to StartTask
   */
  public static StartTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTask.class);
  }

  /**
   * Convert an instance of StartTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

