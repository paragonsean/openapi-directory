/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.JobConstraints;
import org.openapitools.client.model.JobManagerTask;
import org.openapitools.client.model.JobPreparationTask;
import org.openapitools.client.model.JobReleaseTask;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.PoolInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Azure Batch job to add.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.102636-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobAddParameter {
  public static final String SERIALIZED_NAME_COMMON_ENVIRONMENT_SETTINGS = "commonEnvironmentSettings";
  @SerializedName(SERIALIZED_NAME_COMMON_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> commonEnvironmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private JobConstraints constraints;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_MANAGER_TASK = "jobManagerTask";
  @SerializedName(SERIALIZED_NAME_JOB_MANAGER_TASK)
  private JobManagerTask jobManagerTask;

  public static final String SERIALIZED_NAME_JOB_PREPARATION_TASK = "jobPreparationTask";
  @SerializedName(SERIALIZED_NAME_JOB_PREPARATION_TASK)
  private JobPreparationTask jobPreparationTask;

  public static final String SERIALIZED_NAME_JOB_RELEASE_TASK = "jobReleaseTask";
  @SerializedName(SERIALIZED_NAME_JOB_RELEASE_TASK)
  private JobReleaseTask jobReleaseTask;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_POOL_INFO = "poolInfo";
  @SerializedName(SERIALIZED_NAME_POOL_INFO)
  private PoolInformation poolInfo;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_USES_TASK_DEPENDENCIES = "usesTaskDependencies";
  @SerializedName(SERIALIZED_NAME_USES_TASK_DEPENDENCIES)
  private Boolean usesTaskDependencies;

  public JobAddParameter() {
  }

  public JobAddParameter commonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings) {
    this.commonEnvironmentSettings = commonEnvironmentSettings;
    return this;
  }

  public JobAddParameter addCommonEnvironmentSettingsItem(EnvironmentSetting commonEnvironmentSettingsItem) {
    if (this.commonEnvironmentSettings == null) {
      this.commonEnvironmentSettings = new ArrayList<>();
    }
    this.commonEnvironmentSettings.add(commonEnvironmentSettingsItem);
    return this;
  }

  /**
   * The list of common environment variable settings. These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
   * @return commonEnvironmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getCommonEnvironmentSettings() {
    return commonEnvironmentSettings;
  }

  public void setCommonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings) {
    this.commonEnvironmentSettings = commonEnvironmentSettings;
  }


  public JobAddParameter constraints(JobConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public JobConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(JobConstraints constraints) {
    this.constraints = constraints;
  }


  public JobAddParameter displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for the job.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public JobAddParameter id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JobAddParameter jobManagerTask(JobManagerTask jobManagerTask) {
    this.jobManagerTask = jobManagerTask;
    return this;
  }

  /**
   * Get jobManagerTask
   * @return jobManagerTask
   */
  @javax.annotation.Nullable
  public JobManagerTask getJobManagerTask() {
    return jobManagerTask;
  }

  public void setJobManagerTask(JobManagerTask jobManagerTask) {
    this.jobManagerTask = jobManagerTask;
  }


  public JobAddParameter jobPreparationTask(JobPreparationTask jobPreparationTask) {
    this.jobPreparationTask = jobPreparationTask;
    return this;
  }

  /**
   * Get jobPreparationTask
   * @return jobPreparationTask
   */
  @javax.annotation.Nullable
  public JobPreparationTask getJobPreparationTask() {
    return jobPreparationTask;
  }

  public void setJobPreparationTask(JobPreparationTask jobPreparationTask) {
    this.jobPreparationTask = jobPreparationTask;
  }


  public JobAddParameter jobReleaseTask(JobReleaseTask jobReleaseTask) {
    this.jobReleaseTask = jobReleaseTask;
    return this;
  }

  /**
   * Get jobReleaseTask
   * @return jobReleaseTask
   */
  @javax.annotation.Nullable
  public JobReleaseTask getJobReleaseTask() {
    return jobReleaseTask;
  }

  public void setJobReleaseTask(JobReleaseTask jobReleaseTask) {
    this.jobReleaseTask = jobReleaseTask;
  }


  public JobAddParameter metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public JobAddParameter addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * A list of name-value pairs associated with the job as metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public JobAddParameter poolInfo(PoolInformation poolInfo) {
    this.poolInfo = poolInfo;
    return this;
  }

  /**
   * Get poolInfo
   * @return poolInfo
   */
  @javax.annotation.Nonnull
  public PoolInformation getPoolInfo() {
    return poolInfo;
  }

  public void setPoolInfo(PoolInformation poolInfo) {
    this.poolInfo = poolInfo;
  }


  public JobAddParameter priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public JobAddParameter usesTaskDependencies(Boolean usesTaskDependencies) {
    this.usesTaskDependencies = usesTaskDependencies;
    return this;
  }

  /**
   * The flag that determines if this job will use tasks with dependencies.
   * @return usesTaskDependencies
   */
  @javax.annotation.Nullable
  public Boolean getUsesTaskDependencies() {
    return usesTaskDependencies;
  }

  public void setUsesTaskDependencies(Boolean usesTaskDependencies) {
    this.usesTaskDependencies = usesTaskDependencies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobAddParameter jobAddParameter = (JobAddParameter) o;
    return Objects.equals(this.commonEnvironmentSettings, jobAddParameter.commonEnvironmentSettings) &&
        Objects.equals(this.constraints, jobAddParameter.constraints) &&
        Objects.equals(this.displayName, jobAddParameter.displayName) &&
        Objects.equals(this.id, jobAddParameter.id) &&
        Objects.equals(this.jobManagerTask, jobAddParameter.jobManagerTask) &&
        Objects.equals(this.jobPreparationTask, jobAddParameter.jobPreparationTask) &&
        Objects.equals(this.jobReleaseTask, jobAddParameter.jobReleaseTask) &&
        Objects.equals(this.metadata, jobAddParameter.metadata) &&
        Objects.equals(this.poolInfo, jobAddParameter.poolInfo) &&
        Objects.equals(this.priority, jobAddParameter.priority) &&
        Objects.equals(this.usesTaskDependencies, jobAddParameter.usesTaskDependencies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonEnvironmentSettings, constraints, displayName, id, jobManagerTask, jobPreparationTask, jobReleaseTask, metadata, poolInfo, priority, usesTaskDependencies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobAddParameter {\n");
    sb.append("    commonEnvironmentSettings: ").append(toIndentedString(commonEnvironmentSettings)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobManagerTask: ").append(toIndentedString(jobManagerTask)).append("\n");
    sb.append("    jobPreparationTask: ").append(toIndentedString(jobPreparationTask)).append("\n");
    sb.append("    jobReleaseTask: ").append(toIndentedString(jobReleaseTask)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    poolInfo: ").append(toIndentedString(poolInfo)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    usesTaskDependencies: ").append(toIndentedString(usesTaskDependencies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonEnvironmentSettings");
    openapiFields.add("constraints");
    openapiFields.add("displayName");
    openapiFields.add("id");
    openapiFields.add("jobManagerTask");
    openapiFields.add("jobPreparationTask");
    openapiFields.add("jobReleaseTask");
    openapiFields.add("metadata");
    openapiFields.add("poolInfo");
    openapiFields.add("priority");
    openapiFields.add("usesTaskDependencies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("poolInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobAddParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobAddParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobAddParameter is not found in the empty JSON string", JobAddParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobAddParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobAddParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobAddParameter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("commonEnvironmentSettings") != null && !jsonObj.get("commonEnvironmentSettings").isJsonNull()) {
        JsonArray jsonArraycommonEnvironmentSettings = jsonObj.getAsJsonArray("commonEnvironmentSettings");
        if (jsonArraycommonEnvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commonEnvironmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commonEnvironmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("commonEnvironmentSettings").toString()));
          }

          // validate the optional field `commonEnvironmentSettings` (array)
          for (int i = 0; i < jsonArraycommonEnvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArraycommonEnvironmentSettings.get(i));
          };
        }
      }
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        JobConstraints.validateJsonElement(jsonObj.get("constraints"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `jobManagerTask`
      if (jsonObj.get("jobManagerTask") != null && !jsonObj.get("jobManagerTask").isJsonNull()) {
        JobManagerTask.validateJsonElement(jsonObj.get("jobManagerTask"));
      }
      // validate the optional field `jobPreparationTask`
      if (jsonObj.get("jobPreparationTask") != null && !jsonObj.get("jobPreparationTask").isJsonNull()) {
        JobPreparationTask.validateJsonElement(jsonObj.get("jobPreparationTask"));
      }
      // validate the optional field `jobReleaseTask`
      if (jsonObj.get("jobReleaseTask") != null && !jsonObj.get("jobReleaseTask").isJsonNull()) {
        JobReleaseTask.validateJsonElement(jsonObj.get("jobReleaseTask"));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the required field `poolInfo`
      PoolInformation.validateJsonElement(jsonObj.get("poolInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobAddParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobAddParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobAddParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobAddParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<JobAddParameter>() {
           @Override
           public void write(JsonWriter out, JobAddParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobAddParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobAddParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobAddParameter
   * @throws IOException if the JSON string is invalid with respect to JobAddParameter
   */
  public static JobAddParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobAddParameter.class);
  }

  /**
   * Convert an instance of JobAddParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

