/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics related to resource consumption by compute nodes in a pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.102636-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceStatistics {
  public static final String SERIALIZED_NAME_AVG_C_P_U_PERCENTAGE = "avgCPUPercentage";
  @SerializedName(SERIALIZED_NAME_AVG_C_P_U_PERCENTAGE)
  private Double avgCPUPercentage;

  public static final String SERIALIZED_NAME_AVG_DISK_GI_B = "avgDiskGiB";
  @SerializedName(SERIALIZED_NAME_AVG_DISK_GI_B)
  private Double avgDiskGiB;

  public static final String SERIALIZED_NAME_AVG_MEMORY_GI_B = "avgMemoryGiB";
  @SerializedName(SERIALIZED_NAME_AVG_MEMORY_GI_B)
  private Double avgMemoryGiB;

  public static final String SERIALIZED_NAME_DISK_READ_GI_B = "diskReadGiB";
  @SerializedName(SERIALIZED_NAME_DISK_READ_GI_B)
  private Double diskReadGiB;

  public static final String SERIALIZED_NAME_DISK_READ_I_OPS = "diskReadIOps";
  @SerializedName(SERIALIZED_NAME_DISK_READ_I_OPS)
  private Long diskReadIOps;

  public static final String SERIALIZED_NAME_DISK_WRITE_GI_B = "diskWriteGiB";
  @SerializedName(SERIALIZED_NAME_DISK_WRITE_GI_B)
  private Double diskWriteGiB;

  public static final String SERIALIZED_NAME_DISK_WRITE_I_OPS = "diskWriteIOps";
  @SerializedName(SERIALIZED_NAME_DISK_WRITE_I_OPS)
  private Long diskWriteIOps;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public static final String SERIALIZED_NAME_NETWORK_READ_GI_B = "networkReadGiB";
  @SerializedName(SERIALIZED_NAME_NETWORK_READ_GI_B)
  private Double networkReadGiB;

  public static final String SERIALIZED_NAME_NETWORK_WRITE_GI_B = "networkWriteGiB";
  @SerializedName(SERIALIZED_NAME_NETWORK_WRITE_GI_B)
  private Double networkWriteGiB;

  public static final String SERIALIZED_NAME_PEAK_DISK_GI_B = "peakDiskGiB";
  @SerializedName(SERIALIZED_NAME_PEAK_DISK_GI_B)
  private Double peakDiskGiB;

  public static final String SERIALIZED_NAME_PEAK_MEMORY_GI_B = "peakMemoryGiB";
  @SerializedName(SERIALIZED_NAME_PEAK_MEMORY_GI_B)
  private Double peakMemoryGiB;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public ResourceStatistics() {
  }

  public ResourceStatistics avgCPUPercentage(Double avgCPUPercentage) {
    this.avgCPUPercentage = avgCPUPercentage;
    return this;
  }

  /**
   * The average CPU usage across all nodes in the pool (percentage per node).
   * @return avgCPUPercentage
   */
  @javax.annotation.Nonnull
  public Double getAvgCPUPercentage() {
    return avgCPUPercentage;
  }

  public void setAvgCPUPercentage(Double avgCPUPercentage) {
    this.avgCPUPercentage = avgCPUPercentage;
  }


  public ResourceStatistics avgDiskGiB(Double avgDiskGiB) {
    this.avgDiskGiB = avgDiskGiB;
    return this;
  }

  /**
   * The average used disk space in GiB across all nodes in the pool.
   * @return avgDiskGiB
   */
  @javax.annotation.Nonnull
  public Double getAvgDiskGiB() {
    return avgDiskGiB;
  }

  public void setAvgDiskGiB(Double avgDiskGiB) {
    this.avgDiskGiB = avgDiskGiB;
  }


  public ResourceStatistics avgMemoryGiB(Double avgMemoryGiB) {
    this.avgMemoryGiB = avgMemoryGiB;
    return this;
  }

  /**
   * The average memory usage in GiB across all nodes in the pool.
   * @return avgMemoryGiB
   */
  @javax.annotation.Nonnull
  public Double getAvgMemoryGiB() {
    return avgMemoryGiB;
  }

  public void setAvgMemoryGiB(Double avgMemoryGiB) {
    this.avgMemoryGiB = avgMemoryGiB;
  }


  public ResourceStatistics diskReadGiB(Double diskReadGiB) {
    this.diskReadGiB = diskReadGiB;
    return this;
  }

  /**
   * The total amount of data in GiB of disk reads across all nodes in the pool.
   * @return diskReadGiB
   */
  @javax.annotation.Nonnull
  public Double getDiskReadGiB() {
    return diskReadGiB;
  }

  public void setDiskReadGiB(Double diskReadGiB) {
    this.diskReadGiB = diskReadGiB;
  }


  public ResourceStatistics diskReadIOps(Long diskReadIOps) {
    this.diskReadIOps = diskReadIOps;
    return this;
  }

  /**
   * The total number of disk read operations across all nodes in the pool.
   * @return diskReadIOps
   */
  @javax.annotation.Nonnull
  public Long getDiskReadIOps() {
    return diskReadIOps;
  }

  public void setDiskReadIOps(Long diskReadIOps) {
    this.diskReadIOps = diskReadIOps;
  }


  public ResourceStatistics diskWriteGiB(Double diskWriteGiB) {
    this.diskWriteGiB = diskWriteGiB;
    return this;
  }

  /**
   * The total amount of data in GiB of disk writes across all nodes in the pool.
   * @return diskWriteGiB
   */
  @javax.annotation.Nonnull
  public Double getDiskWriteGiB() {
    return diskWriteGiB;
  }

  public void setDiskWriteGiB(Double diskWriteGiB) {
    this.diskWriteGiB = diskWriteGiB;
  }


  public ResourceStatistics diskWriteIOps(Long diskWriteIOps) {
    this.diskWriteIOps = diskWriteIOps;
    return this;
  }

  /**
   * The total number of disk write operations across all nodes in the pool.
   * @return diskWriteIOps
   */
  @javax.annotation.Nonnull
  public Long getDiskWriteIOps() {
    return diskWriteIOps;
  }

  public void setDiskWriteIOps(Long diskWriteIOps) {
    this.diskWriteIOps = diskWriteIOps;
  }


  public ResourceStatistics lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
   * @return lastUpdateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public ResourceStatistics networkReadGiB(Double networkReadGiB) {
    this.networkReadGiB = networkReadGiB;
    return this;
  }

  /**
   * The total amount of data in GiB of network reads across all nodes in the pool.
   * @return networkReadGiB
   */
  @javax.annotation.Nonnull
  public Double getNetworkReadGiB() {
    return networkReadGiB;
  }

  public void setNetworkReadGiB(Double networkReadGiB) {
    this.networkReadGiB = networkReadGiB;
  }


  public ResourceStatistics networkWriteGiB(Double networkWriteGiB) {
    this.networkWriteGiB = networkWriteGiB;
    return this;
  }

  /**
   * The total amount of data in GiB of network writes across all nodes in the pool.
   * @return networkWriteGiB
   */
  @javax.annotation.Nonnull
  public Double getNetworkWriteGiB() {
    return networkWriteGiB;
  }

  public void setNetworkWriteGiB(Double networkWriteGiB) {
    this.networkWriteGiB = networkWriteGiB;
  }


  public ResourceStatistics peakDiskGiB(Double peakDiskGiB) {
    this.peakDiskGiB = peakDiskGiB;
    return this;
  }

  /**
   * The peak used disk space in GiB across all nodes in the pool.
   * @return peakDiskGiB
   */
  @javax.annotation.Nonnull
  public Double getPeakDiskGiB() {
    return peakDiskGiB;
  }

  public void setPeakDiskGiB(Double peakDiskGiB) {
    this.peakDiskGiB = peakDiskGiB;
  }


  public ResourceStatistics peakMemoryGiB(Double peakMemoryGiB) {
    this.peakMemoryGiB = peakMemoryGiB;
    return this;
  }

  /**
   * The peak memory usage in GiB across all nodes in the pool.
   * @return peakMemoryGiB
   */
  @javax.annotation.Nonnull
  public Double getPeakMemoryGiB() {
    return peakMemoryGiB;
  }

  public void setPeakMemoryGiB(Double peakMemoryGiB) {
    this.peakMemoryGiB = peakMemoryGiB;
  }


  public ResourceStatistics startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the time range covered by the statistics.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceStatistics resourceStatistics = (ResourceStatistics) o;
    return Objects.equals(this.avgCPUPercentage, resourceStatistics.avgCPUPercentage) &&
        Objects.equals(this.avgDiskGiB, resourceStatistics.avgDiskGiB) &&
        Objects.equals(this.avgMemoryGiB, resourceStatistics.avgMemoryGiB) &&
        Objects.equals(this.diskReadGiB, resourceStatistics.diskReadGiB) &&
        Objects.equals(this.diskReadIOps, resourceStatistics.diskReadIOps) &&
        Objects.equals(this.diskWriteGiB, resourceStatistics.diskWriteGiB) &&
        Objects.equals(this.diskWriteIOps, resourceStatistics.diskWriteIOps) &&
        Objects.equals(this.lastUpdateTime, resourceStatistics.lastUpdateTime) &&
        Objects.equals(this.networkReadGiB, resourceStatistics.networkReadGiB) &&
        Objects.equals(this.networkWriteGiB, resourceStatistics.networkWriteGiB) &&
        Objects.equals(this.peakDiskGiB, resourceStatistics.peakDiskGiB) &&
        Objects.equals(this.peakMemoryGiB, resourceStatistics.peakMemoryGiB) &&
        Objects.equals(this.startTime, resourceStatistics.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgCPUPercentage, avgDiskGiB, avgMemoryGiB, diskReadGiB, diskReadIOps, diskWriteGiB, diskWriteIOps, lastUpdateTime, networkReadGiB, networkWriteGiB, peakDiskGiB, peakMemoryGiB, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceStatistics {\n");
    sb.append("    avgCPUPercentage: ").append(toIndentedString(avgCPUPercentage)).append("\n");
    sb.append("    avgDiskGiB: ").append(toIndentedString(avgDiskGiB)).append("\n");
    sb.append("    avgMemoryGiB: ").append(toIndentedString(avgMemoryGiB)).append("\n");
    sb.append("    diskReadGiB: ").append(toIndentedString(diskReadGiB)).append("\n");
    sb.append("    diskReadIOps: ").append(toIndentedString(diskReadIOps)).append("\n");
    sb.append("    diskWriteGiB: ").append(toIndentedString(diskWriteGiB)).append("\n");
    sb.append("    diskWriteIOps: ").append(toIndentedString(diskWriteIOps)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    networkReadGiB: ").append(toIndentedString(networkReadGiB)).append("\n");
    sb.append("    networkWriteGiB: ").append(toIndentedString(networkWriteGiB)).append("\n");
    sb.append("    peakDiskGiB: ").append(toIndentedString(peakDiskGiB)).append("\n");
    sb.append("    peakMemoryGiB: ").append(toIndentedString(peakMemoryGiB)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avgCPUPercentage");
    openapiFields.add("avgDiskGiB");
    openapiFields.add("avgMemoryGiB");
    openapiFields.add("diskReadGiB");
    openapiFields.add("diskReadIOps");
    openapiFields.add("diskWriteGiB");
    openapiFields.add("diskWriteIOps");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("networkReadGiB");
    openapiFields.add("networkWriteGiB");
    openapiFields.add("peakDiskGiB");
    openapiFields.add("peakMemoryGiB");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avgCPUPercentage");
    openapiRequiredFields.add("avgDiskGiB");
    openapiRequiredFields.add("avgMemoryGiB");
    openapiRequiredFields.add("diskReadGiB");
    openapiRequiredFields.add("diskReadIOps");
    openapiRequiredFields.add("diskWriteGiB");
    openapiRequiredFields.add("diskWriteIOps");
    openapiRequiredFields.add("lastUpdateTime");
    openapiRequiredFields.add("networkReadGiB");
    openapiRequiredFields.add("networkWriteGiB");
    openapiRequiredFields.add("peakDiskGiB");
    openapiRequiredFields.add("peakMemoryGiB");
    openapiRequiredFields.add("startTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceStatistics is not found in the empty JSON string", ResourceStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResourceStatistics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceStatistics>() {
           @Override
           public void write(JsonWriter out, ResourceStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceStatistics
   * @throws IOException if the JSON string is invalid with respect to ResourceStatistics
   */
  public static ResourceStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceStatistics.class);
  }

  /**
   * Convert an instance of ResourceStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

