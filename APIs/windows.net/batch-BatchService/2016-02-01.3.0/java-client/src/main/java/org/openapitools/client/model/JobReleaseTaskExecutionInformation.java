/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TaskSchedulingError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the execution of a Job Release task on a compute node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.102636-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobReleaseTaskExecutionInformation {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXIT_CODE = "exitCode";
  @SerializedName(SERIALIZED_NAME_EXIT_CODE)
  private Integer exitCode;

  public static final String SERIALIZED_NAME_SCHEDULING_ERROR = "schedulingError";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_ERROR)
  private TaskSchedulingError schedulingError;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * The current state of the Job Release task.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    RUNNING("running"),
    
    COMPLETED("completed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TASK_ROOT_DIRECTORY = "taskRootDirectory";
  @SerializedName(SERIALIZED_NAME_TASK_ROOT_DIRECTORY)
  private String taskRootDirectory;

  public static final String SERIALIZED_NAME_TASK_ROOT_DIRECTORY_URL = "taskRootDirectoryUrl";
  @SerializedName(SERIALIZED_NAME_TASK_ROOT_DIRECTORY_URL)
  private String taskRootDirectoryUrl;

  public JobReleaseTaskExecutionInformation() {
  }

  public JobReleaseTaskExecutionInformation endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time at which the Job Release task completed. This property is set only if the task is in the Completed state.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public JobReleaseTaskExecutionInformation exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * The exit code of the Job Release task. This property is set only if the task is in the Completed state.
   * @return exitCode
   */
  @javax.annotation.Nullable
  public Integer getExitCode() {
    return exitCode;
  }

  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  public JobReleaseTaskExecutionInformation schedulingError(TaskSchedulingError schedulingError) {
    this.schedulingError = schedulingError;
    return this;
  }

  /**
   * Get schedulingError
   * @return schedulingError
   */
  @javax.annotation.Nullable
  public TaskSchedulingError getSchedulingError() {
    return schedulingError;
  }

  public void setSchedulingError(TaskSchedulingError schedulingError) {
    this.schedulingError = schedulingError;
  }


  public JobReleaseTaskExecutionInformation startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time at which the task started running. Note that every time the task is restarted, this value is updated.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public JobReleaseTaskExecutionInformation state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the Job Release task.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public JobReleaseTaskExecutionInformation taskRootDirectory(String taskRootDirectory) {
    this.taskRootDirectory = taskRootDirectory;
    return this;
  }

  /**
   * The root directory of the Job Release task on the compute node. You can use this path to retrieve files created by the task, such as log files.
   * @return taskRootDirectory
   */
  @javax.annotation.Nullable
  public String getTaskRootDirectory() {
    return taskRootDirectory;
  }

  public void setTaskRootDirectory(String taskRootDirectory) {
    this.taskRootDirectory = taskRootDirectory;
  }


  public JobReleaseTaskExecutionInformation taskRootDirectoryUrl(String taskRootDirectoryUrl) {
    this.taskRootDirectoryUrl = taskRootDirectoryUrl;
    return this;
  }

  /**
   * The URL to the root directory of the Job Release task on the compute node.
   * @return taskRootDirectoryUrl
   */
  @javax.annotation.Nullable
  public String getTaskRootDirectoryUrl() {
    return taskRootDirectoryUrl;
  }

  public void setTaskRootDirectoryUrl(String taskRootDirectoryUrl) {
    this.taskRootDirectoryUrl = taskRootDirectoryUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobReleaseTaskExecutionInformation jobReleaseTaskExecutionInformation = (JobReleaseTaskExecutionInformation) o;
    return Objects.equals(this.endTime, jobReleaseTaskExecutionInformation.endTime) &&
        Objects.equals(this.exitCode, jobReleaseTaskExecutionInformation.exitCode) &&
        Objects.equals(this.schedulingError, jobReleaseTaskExecutionInformation.schedulingError) &&
        Objects.equals(this.startTime, jobReleaseTaskExecutionInformation.startTime) &&
        Objects.equals(this.state, jobReleaseTaskExecutionInformation.state) &&
        Objects.equals(this.taskRootDirectory, jobReleaseTaskExecutionInformation.taskRootDirectory) &&
        Objects.equals(this.taskRootDirectoryUrl, jobReleaseTaskExecutionInformation.taskRootDirectoryUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, exitCode, schedulingError, startTime, state, taskRootDirectory, taskRootDirectoryUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobReleaseTaskExecutionInformation {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    schedulingError: ").append(toIndentedString(schedulingError)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    taskRootDirectory: ").append(toIndentedString(taskRootDirectory)).append("\n");
    sb.append("    taskRootDirectoryUrl: ").append(toIndentedString(taskRootDirectoryUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("exitCode");
    openapiFields.add("schedulingError");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("taskRootDirectory");
    openapiFields.add("taskRootDirectoryUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobReleaseTaskExecutionInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobReleaseTaskExecutionInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobReleaseTaskExecutionInformation is not found in the empty JSON string", JobReleaseTaskExecutionInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobReleaseTaskExecutionInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobReleaseTaskExecutionInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobReleaseTaskExecutionInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `schedulingError`
      if (jsonObj.get("schedulingError") != null && !jsonObj.get("schedulingError").isJsonNull()) {
        TaskSchedulingError.validateJsonElement(jsonObj.get("schedulingError"));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if ((jsonObj.get("taskRootDirectory") != null && !jsonObj.get("taskRootDirectory").isJsonNull()) && !jsonObj.get("taskRootDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskRootDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskRootDirectory").toString()));
      }
      if ((jsonObj.get("taskRootDirectoryUrl") != null && !jsonObj.get("taskRootDirectoryUrl").isJsonNull()) && !jsonObj.get("taskRootDirectoryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskRootDirectoryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskRootDirectoryUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobReleaseTaskExecutionInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobReleaseTaskExecutionInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobReleaseTaskExecutionInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobReleaseTaskExecutionInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<JobReleaseTaskExecutionInformation>() {
           @Override
           public void write(JsonWriter out, JobReleaseTaskExecutionInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobReleaseTaskExecutionInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobReleaseTaskExecutionInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobReleaseTaskExecutionInformation
   * @throws IOException if the JSON string is invalid with respect to JobReleaseTaskExecutionInformation
   */
  public static JobReleaseTaskExecutionInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobReleaseTaskExecutionInformation.class);
  }

  /**
   * Convert an instance of JobReleaseTaskExecutionInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

