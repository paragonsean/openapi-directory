/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A node agent SKU supported by the Batch service. The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.102636-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeAgentSku {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The type of operating system compatible with the node agent SKU.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    LINUX("linux"),
    
    WINDOWS("windows"),
    
    UNMAPPED("unmapped");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_VERIFIED_IMAGE_REFERENCES = "verifiedImageReferences";
  @SerializedName(SERIALIZED_NAME_VERIFIED_IMAGE_REFERENCES)
  private List<ImageReference> verifiedImageReferences = new ArrayList<>();

  public NodeAgentSku() {
  }

  public NodeAgentSku id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The node agent SKU id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NodeAgentSku osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The type of operating system compatible with the node agent SKU.
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public NodeAgentSku verifiedImageReferences(List<ImageReference> verifiedImageReferences) {
    this.verifiedImageReferences = verifiedImageReferences;
    return this;
  }

  public NodeAgentSku addVerifiedImageReferencesItem(ImageReference verifiedImageReferencesItem) {
    if (this.verifiedImageReferences == null) {
      this.verifiedImageReferences = new ArrayList<>();
    }
    this.verifiedImageReferences.add(verifiedImageReferencesItem);
    return this;
  }

  /**
   * The list of images verified to be compatible with this node agent SKU. This collection is not exhaustive (the node agent may be compatible with other images).
   * @return verifiedImageReferences
   */
  @javax.annotation.Nullable
  public List<ImageReference> getVerifiedImageReferences() {
    return verifiedImageReferences;
  }

  public void setVerifiedImageReferences(List<ImageReference> verifiedImageReferences) {
    this.verifiedImageReferences = verifiedImageReferences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeAgentSku nodeAgentSku = (NodeAgentSku) o;
    return Objects.equals(this.id, nodeAgentSku.id) &&
        Objects.equals(this.osType, nodeAgentSku.osType) &&
        Objects.equals(this.verifiedImageReferences, nodeAgentSku.verifiedImageReferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, osType, verifiedImageReferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeAgentSku {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    verifiedImageReferences: ").append(toIndentedString(verifiedImageReferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("osType");
    openapiFields.add("verifiedImageReferences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeAgentSku
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeAgentSku.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeAgentSku is not found in the empty JSON string", NodeAgentSku.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeAgentSku.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeAgentSku` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
      if (jsonObj.get("verifiedImageReferences") != null && !jsonObj.get("verifiedImageReferences").isJsonNull()) {
        JsonArray jsonArrayverifiedImageReferences = jsonObj.getAsJsonArray("verifiedImageReferences");
        if (jsonArrayverifiedImageReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("verifiedImageReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `verifiedImageReferences` to be an array in the JSON string but got `%s`", jsonObj.get("verifiedImageReferences").toString()));
          }

          // validate the optional field `verifiedImageReferences` (array)
          for (int i = 0; i < jsonArrayverifiedImageReferences.size(); i++) {
            ImageReference.validateJsonElement(jsonArrayverifiedImageReferences.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeAgentSku.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeAgentSku' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeAgentSku> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeAgentSku.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeAgentSku>() {
           @Override
           public void write(JsonWriter out, NodeAgentSku value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeAgentSku read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeAgentSku given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeAgentSku
   * @throws IOException if the JSON string is invalid with respect to NodeAgentSku
   */
  public static NodeAgentSku fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeAgentSku.class);
  }

  /**
   * Convert an instance of NodeAgentSku to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

