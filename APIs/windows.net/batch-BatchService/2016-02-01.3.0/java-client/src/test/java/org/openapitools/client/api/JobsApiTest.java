/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.CloudJob;
import org.openapitools.client.model.CloudJobListPreparationAndReleaseTaskStatusResult;
import org.openapitools.client.model.CloudJobListResult;
import org.openapitools.client.model.JobAddParameter;
import org.openapitools.client.model.JobDisableParameter;
import org.openapitools.client.model.JobPatchParameter;
import org.openapitools.client.model.JobStatistics;
import org.openapitools.client.model.JobTerminateParameter;
import org.openapitools.client.model.JobUpdateParameter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Disabled
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    /**
     * Adds a job to the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobAddTest() throws ApiException {
        String apiVersion = null;
        JobAddParameter jobAddParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.jobAdd(apiVersion, jobAddParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobDeleteTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobDelete(jobId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Disables the specified job, preventing new tasks from running.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobDisableTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        JobDisableParameter jobDisableParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobDisable(jobId, apiVersion, jobDisableParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Enables the specified job, allowing new tasks to run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobEnableTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobEnable(jobId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets information about the specified job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobGetTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        String $select = null;
        String $expand = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudJob response = api.jobGet(jobId, apiVersion, $select, $expand, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobGetAllJobsLifetimeStatisticsTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        JobStatistics response = api.jobGetAllJobsLifetimeStatistics(apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists all of the jobs in the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobListTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudJobListResult response = api.jobList(apiVersion, $filter, $select, $expand, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists the jobs that have been created under the specified job schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobListFromJobScheduleTest() throws ApiException {
        String jobScheduleId = null;
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudJobListResult response = api.jobListFromJobSchedule(jobScheduleId, apiVersion, $filter, $select, $expand, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobListPreparationAndReleaseTaskStatusTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudJobListPreparationAndReleaseTaskStatusResult response = api.jobListPreparationAndReleaseTaskStatus(jobId, apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Updates the properties of a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobPatchTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        JobPatchParameter jobPatchParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobPatch(jobId, apiVersion, jobPatchParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Terminates the specified job, marking it as completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobTerminateTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        JobTerminateParameter jobTerminateParameter = null;
        api.jobTerminate(jobId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince, jobTerminateParameter);
        // TODO: test validations
    }

    /**
     * Updates the properties of a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobUpdateTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        JobUpdateParameter jobUpdateParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.jobUpdate(jobId, apiVersion, jobUpdateParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

}
