/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.CloudTask;
import org.openapitools.client.model.CloudTaskListResult;
import org.openapitools.client.model.CloudTaskListSubtasksResult;
import org.openapitools.client.model.TaskAddCollectionParameter;
import org.openapitools.client.model.TaskAddCollectionResult;
import org.openapitools.client.model.TaskAddParameter;
import org.openapitools.client.model.TaskUpdateParameter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Disabled
public class TasksApiTest {

    private final TasksApi api = new TasksApi();

    /**
     * Adds a task to the specified job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskAddTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        TaskAddParameter taskAddParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.taskAdd(jobId, apiVersion, taskAddParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Adds a collection of tasks to the specified job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskAddCollectionTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        TaskAddCollectionParameter taskAddCollectionParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        TaskAddCollectionResult response = api.taskAddCollection(jobId, apiVersion, taskAddCollectionParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a task from the specified job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskDeleteTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.taskDelete(jobId, taskId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets information about the specified task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskGetTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        String $select = null;
        String $expand = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        CloudTask response = api.taskGet(jobId, taskId, apiVersion, $select, $expand, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Lists all of the tasks that are associated with the specified job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskListTest() throws ApiException {
        String jobId = null;
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudTaskListResult response = api.taskList(jobId, apiVersion, $filter, $select, $expand, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskListSubtasksTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        String $select = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudTaskListSubtasksResult response = api.taskListSubtasks(jobId, taskId, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Terminates the specified task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskTerminateTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.taskTerminate(jobId, taskId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Updates the properties of the specified task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskUpdateTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        TaskUpdateParameter taskUpdateParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.taskUpdate(jobId, taskId, apiVersion, taskUpdateParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

}
