/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutoScaleRun;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.CloudPool;
import org.openapitools.client.model.CloudPoolListResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PoolAddParameter;
import org.openapitools.client.model.PoolEnableAutoScaleParameter;
import org.openapitools.client.model.PoolEvaluateAutoScaleParameter;
import org.openapitools.client.model.PoolListPoolUsageMetricsResult;
import org.openapitools.client.model.PoolPatchParameter;
import org.openapitools.client.model.PoolResizeParameter;
import org.openapitools.client.model.PoolStatistics;
import org.openapitools.client.model.PoolUpdatePropertiesParameter;
import org.openapitools.client.model.PoolUpgradeOSParameter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoolsApi
 */
@Disabled
public class PoolsApiTest {

    private final PoolsApi api = new PoolsApi();

    /**
     * Adds a pool to the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolAddTest() throws ApiException {
        String apiVersion = null;
        PoolAddParameter poolAddParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.poolAdd(apiVersion, poolAddParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a pool from the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolDeleteTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolDelete(poolId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Disables automatic scaling for a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolDisableAutoScaleTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.poolDisableAutoScale(poolId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Enables automatic scaling for a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolEnableAutoScaleTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolEnableAutoScaleParameter poolEnableAutoScaleParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolEnableAutoScale(poolId, apiVersion, poolEnableAutoScaleParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets the result of evaluating an automatic scaling formula on the pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolEvaluateAutoScaleTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolEvaluateAutoScaleParameter poolEvaluateAutoScaleParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        AutoScaleRun response = api.poolEvaluateAutoScale(poolId, apiVersion, poolEvaluateAutoScaleParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets basic properties of a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolExistsTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolExists(poolId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets information about the specified pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolGetTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        String $select = null;
        String $expand = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        CloudPool response = api.poolGet(poolId, apiVersion, $select, $expand, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolGetAllPoolsLifetimeStatisticsTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        PoolStatistics response = api.poolGetAllPoolsLifetimeStatistics(apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists all of the pools in the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolListTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        CloudPoolListResult response = api.poolList(apiVersion, $filter, $select, $expand, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolListPoolUsageMetricsTest() throws ApiException {
        String apiVersion = null;
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        String $filter = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        PoolListPoolUsageMetricsResult response = api.poolListPoolUsageMetrics(apiVersion, starttime, endtime, $filter, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Updates the properties of a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolPatchTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolPatchParameter poolPatchParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolPatch(poolId, apiVersion, poolPatchParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Changes the number of compute nodes that are assigned to a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolResizeTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolResizeParameter poolResizeParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolResize(poolId, apiVersion, poolResizeParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolStopResizeTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolStopResize(poolId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Updates the properties of a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolUpdatePropertiesTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolUpdatePropertiesParameter poolUpdatePropertiesParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.poolUpdateProperties(poolId, apiVersion, poolUpdatePropertiesParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Upgrades the operating system of the specified pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolUpgradeOSTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        PoolUpgradeOSParameter poolUpgradeOSParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolUpgradeOS(poolId, apiVersion, poolUpgradeOSParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

}
