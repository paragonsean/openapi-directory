/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.ComputeNode;
import org.openapitools.client.model.ComputeNodeGetRemoteLoginSettingsResult;
import org.openapitools.client.model.ComputeNodeListResult;
import org.openapitools.client.model.ComputeNodeUser;
import java.io.File;
import org.openapitools.client.model.NodeDisableSchedulingParameter;
import org.openapitools.client.model.NodeRebootParameter;
import org.openapitools.client.model.NodeReimageParameter;
import org.openapitools.client.model.NodeRemoveParameter;
import org.openapitools.client.model.NodeUpdateUserParameter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ComputeNodesApi
 */
@Disabled
public class ComputeNodesApiTest {

    private final ComputeNodesApi api = new ComputeNodesApi();

    /**
     * Adds a user account to the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeAddUserTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        ComputeNodeUser computeNodeUser = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.computeNodeAddUser(poolId, nodeId, apiVersion, computeNodeUser, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a user account from the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeDeleteUserTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String userName = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.computeNodeDeleteUser(poolId, nodeId, userName, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Disable task scheduling of the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeDisableSchedulingTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        NodeDisableSchedulingParameter nodeDisableSchedulingParameter = null;
        api.computeNodeDisableScheduling(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, nodeDisableSchedulingParameter);
        // TODO: test validations
    }

    /**
     * Enable task scheduling of the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeEnableSchedulingTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.computeNodeEnableScheduling(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets information about the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeGetTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        String $select = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        ComputeNode response = api.computeNodeGet(poolId, nodeId, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets the Remote Desktop Protocol file for the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeGetRemoteDesktopTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        File response = api.computeNodeGetRemoteDesktop(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets the settings required for remote login to a compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeGetRemoteLoginSettingsTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        ComputeNodeGetRemoteLoginSettingsResult response = api.computeNodeGetRemoteLoginSettings(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists the compute nodes in the specified pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeListTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        ComputeNodeListResult response = api.computeNodeList(poolId, apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Restarts the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeRebootTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        NodeRebootParameter nodeRebootParameter = null;
        api.computeNodeReboot(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, nodeRebootParameter);
        // TODO: test validations
    }

    /**
     * Reinstalls the operating system on the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeReimageTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        NodeReimageParameter nodeReimageParameter = null;
        api.computeNodeReimage(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, nodeReimageParameter);
        // TODO: test validations
    }

    /**
     * Updates the password or expiration time of a user account on the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeUpdateUserTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String userName = null;
        String apiVersion = null;
        NodeUpdateUserParameter nodeUpdateUserParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.computeNodeUpdateUser(poolId, nodeId, userName, apiVersion, nodeUpdateUserParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Removes compute nodes from the specified pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolRemoveNodesTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        NodeRemoveParameter nodeRemoveParameter = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolRemoveNodes(poolId, apiVersion, nodeRemoveParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

}
