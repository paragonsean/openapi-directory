/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskSchedulingError from './TaskSchedulingError';

/**
 * The JobPreparationTaskExecutionInformation model module.
 * @module model/JobPreparationTaskExecutionInformation
 * @version 2016-02-01.3.0
 */
class JobPreparationTaskExecutionInformation {
    /**
     * Constructs a new <code>JobPreparationTaskExecutionInformation</code>.
     * Contains information about the execution of a Job Preparation task on a compute node.
     * @alias module:model/JobPreparationTaskExecutionInformation
     * @param retryCount {Number} The number of times the task has been retried by the Batch service. Every time the task exits with a non-zero exit code, it is deemed a task failure. The Batch service will retry the task up to the limit specified by the constraints.
     * @param startTime {Date} The time at which the task started running. Note that every time the task is restarted, this value is updated.
     * @param state {module:model/JobPreparationTaskExecutionInformation.StateEnum} The current state of the Job Preparation task.
     */
    constructor(retryCount, startTime, state) { 
        
        JobPreparationTaskExecutionInformation.initialize(this, retryCount, startTime, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, retryCount, startTime, state) { 
        obj['retryCount'] = retryCount;
        obj['startTime'] = startTime;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>JobPreparationTaskExecutionInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobPreparationTaskExecutionInformation} obj Optional instance to populate.
     * @return {module:model/JobPreparationTaskExecutionInformation} The populated <code>JobPreparationTaskExecutionInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobPreparationTaskExecutionInformation();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('exitCode')) {
                obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Number');
            }
            if (data.hasOwnProperty('lastRetryTime')) {
                obj['lastRetryTime'] = ApiClient.convertToType(data['lastRetryTime'], 'Date');
            }
            if (data.hasOwnProperty('retryCount')) {
                obj['retryCount'] = ApiClient.convertToType(data['retryCount'], 'Number');
            }
            if (data.hasOwnProperty('schedulingError')) {
                obj['schedulingError'] = TaskSchedulingError.constructFromObject(data['schedulingError']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('taskRootDirectory')) {
                obj['taskRootDirectory'] = ApiClient.convertToType(data['taskRootDirectory'], 'String');
            }
            if (data.hasOwnProperty('taskRootDirectoryUrl')) {
                obj['taskRootDirectoryUrl'] = ApiClient.convertToType(data['taskRootDirectoryUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobPreparationTaskExecutionInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobPreparationTaskExecutionInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobPreparationTaskExecutionInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `schedulingError`
        if (data['schedulingError']) { // data not null
          TaskSchedulingError.validateJSON(data['schedulingError']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['taskRootDirectory'] && !(typeof data['taskRootDirectory'] === 'string' || data['taskRootDirectory'] instanceof String)) {
            throw new Error("Expected the field `taskRootDirectory` to be a primitive type in the JSON string but got " + data['taskRootDirectory']);
        }
        // ensure the json data is a string
        if (data['taskRootDirectoryUrl'] && !(typeof data['taskRootDirectoryUrl'] === 'string' || data['taskRootDirectoryUrl'] instanceof String)) {
            throw new Error("Expected the field `taskRootDirectoryUrl` to be a primitive type in the JSON string but got " + data['taskRootDirectoryUrl']);
        }

        return true;
    }


}

JobPreparationTaskExecutionInformation.RequiredProperties = ["retryCount", "startTime", "state"];

/**
 * The time at which the Job Preparation task completed. This property is set only if the task is in the Completed state.
 * @member {Date} endTime
 */
JobPreparationTaskExecutionInformation.prototype['endTime'] = undefined;

/**
 * The exit code of the Job Preparation task. This property is set only if the task is in the Completed state.
 * @member {Number} exitCode
 */
JobPreparationTaskExecutionInformation.prototype['exitCode'] = undefined;

/**
 * The most recent time at which a retry of the Job Preparation task started running. This property is set only if the task was retried (i.e. retryCount is nonzero).
 * @member {Date} lastRetryTime
 */
JobPreparationTaskExecutionInformation.prototype['lastRetryTime'] = undefined;

/**
 * The number of times the task has been retried by the Batch service. Every time the task exits with a non-zero exit code, it is deemed a task failure. The Batch service will retry the task up to the limit specified by the constraints.
 * @member {Number} retryCount
 */
JobPreparationTaskExecutionInformation.prototype['retryCount'] = undefined;

/**
 * @member {module:model/TaskSchedulingError} schedulingError
 */
JobPreparationTaskExecutionInformation.prototype['schedulingError'] = undefined;

/**
 * The time at which the task started running. Note that every time the task is restarted, this value is updated.
 * @member {Date} startTime
 */
JobPreparationTaskExecutionInformation.prototype['startTime'] = undefined;

/**
 * The current state of the Job Preparation task.
 * @member {module:model/JobPreparationTaskExecutionInformation.StateEnum} state
 */
JobPreparationTaskExecutionInformation.prototype['state'] = undefined;

/**
 * The root directory of the Job Preparation task on the compute node. You can use this path to retrieve files created by the task, such as log files.
 * @member {String} taskRootDirectory
 */
JobPreparationTaskExecutionInformation.prototype['taskRootDirectory'] = undefined;

/**
 * The URL to the root directory of the Job Preparation task on the compute node.
 * @member {String} taskRootDirectoryUrl
 */
JobPreparationTaskExecutionInformation.prototype['taskRootDirectoryUrl'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
JobPreparationTaskExecutionInformation['StateEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};



export default JobPreparationTaskExecutionInformation;

