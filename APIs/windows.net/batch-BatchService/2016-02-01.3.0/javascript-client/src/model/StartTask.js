/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentSetting from './EnvironmentSetting';
import ResourceFile from './ResourceFile';

/**
 * The StartTask model module.
 * @module model/StartTask
 * @version 2016-02-01.3.0
 */
class StartTask {
    /**
     * Constructs a new <code>StartTask</code>.
     * A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
     * @alias module:model/StartTask
     */
    constructor() { 
        
        StartTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StartTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTask} obj Optional instance to populate.
     * @return {module:model/StartTask} The populated <code>StartTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTask();

            if (data.hasOwnProperty('commandLine')) {
                obj['commandLine'] = ApiClient.convertToType(data['commandLine'], 'String');
            }
            if (data.hasOwnProperty('environmentSettings')) {
                obj['environmentSettings'] = ApiClient.convertToType(data['environmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('maxTaskRetryCount')) {
                obj['maxTaskRetryCount'] = ApiClient.convertToType(data['maxTaskRetryCount'], 'Number');
            }
            if (data.hasOwnProperty('resourceFiles')) {
                obj['resourceFiles'] = ApiClient.convertToType(data['resourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('runElevated')) {
                obj['runElevated'] = ApiClient.convertToType(data['runElevated'], 'Boolean');
            }
            if (data.hasOwnProperty('waitForSuccess')) {
                obj['waitForSuccess'] = ApiClient.convertToType(data['waitForSuccess'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commandLine'] && !(typeof data['commandLine'] === 'string' || data['commandLine'] instanceof String)) {
            throw new Error("Expected the field `commandLine` to be a primitive type in the JSON string but got " + data['commandLine']);
        }
        if (data['environmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentSettings'])) {
                throw new Error("Expected the field `environmentSettings` to be an array in the JSON data but got " + data['environmentSettings']);
            }
            // validate the optional field `environmentSettings` (array)
            for (const item of data['environmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        if (data['resourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceFiles'])) {
                throw new Error("Expected the field `resourceFiles` to be an array in the JSON data but got " + data['resourceFiles']);
            }
            // validate the optional field `resourceFiles` (array)
            for (const item of data['resourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The command line of the start task.
 * @member {String} commandLine
 */
StartTask.prototype['commandLine'] = undefined;

/**
 * A list of environment variable settings for the start task.
 * @member {Array.<module:model/EnvironmentSetting>} environmentSettings
 */
StartTask.prototype['environmentSettings'] = undefined;

/**
 * The maximum number of times the task may be retried.
 * @member {Number} maxTaskRetryCount
 */
StartTask.prototype['maxTaskRetryCount'] = undefined;

/**
 * A list of files that the Batch service will download to the compute node before running the command line.
 * @member {Array.<module:model/ResourceFile>} resourceFiles
 */
StartTask.prototype['resourceFiles'] = undefined;

/**
 * Whether to run the start task in elevated mode. The default value is false.
 * @member {Boolean} runElevated
 */
StartTask.prototype['runElevated'] = undefined;

/**
 * Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.
 * @member {Boolean} waitForSuccess
 */
StartTask.prototype['waitForSuccess'] = undefined;






export default StartTask;

