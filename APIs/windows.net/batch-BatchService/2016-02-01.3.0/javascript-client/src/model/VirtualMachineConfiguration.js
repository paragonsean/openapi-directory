/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageReference from './ImageReference';
import WindowsConfiguration from './WindowsConfiguration';

/**
 * The VirtualMachineConfiguration model module.
 * @module model/VirtualMachineConfiguration
 * @version 2016-02-01.3.0
 */
class VirtualMachineConfiguration {
    /**
     * Constructs a new <code>VirtualMachineConfiguration</code>.
     * The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.
     * @alias module:model/VirtualMachineConfiguration
     * @param imageReference {module:model/ImageReference} 
     * @param nodeAgentSKUId {String} The SKU of Batch Node Agent to be provisioned on the compute node. The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
     */
    constructor(imageReference, nodeAgentSKUId) { 
        
        VirtualMachineConfiguration.initialize(this, imageReference, nodeAgentSKUId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageReference, nodeAgentSKUId) { 
        obj['imageReference'] = imageReference;
        obj['nodeAgentSKUId'] = nodeAgentSKUId;
    }

    /**
     * Constructs a <code>VirtualMachineConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineConfiguration} obj Optional instance to populate.
     * @return {module:model/VirtualMachineConfiguration} The populated <code>VirtualMachineConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineConfiguration();

            if (data.hasOwnProperty('imageReference')) {
                obj['imageReference'] = ImageReference.constructFromObject(data['imageReference']);
            }
            if (data.hasOwnProperty('nodeAgentSKUId')) {
                obj['nodeAgentSKUId'] = ApiClient.convertToType(data['nodeAgentSKUId'], 'String');
            }
            if (data.hasOwnProperty('windowsConfiguration')) {
                obj['windowsConfiguration'] = WindowsConfiguration.constructFromObject(data['windowsConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualMachineConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `imageReference`
        if (data['imageReference']) { // data not null
          ImageReference.validateJSON(data['imageReference']);
        }
        // ensure the json data is a string
        if (data['nodeAgentSKUId'] && !(typeof data['nodeAgentSKUId'] === 'string' || data['nodeAgentSKUId'] instanceof String)) {
            throw new Error("Expected the field `nodeAgentSKUId` to be a primitive type in the JSON string but got " + data['nodeAgentSKUId']);
        }
        // validate the optional field `windowsConfiguration`
        if (data['windowsConfiguration']) { // data not null
          WindowsConfiguration.validateJSON(data['windowsConfiguration']);
        }

        return true;
    }


}

VirtualMachineConfiguration.RequiredProperties = ["imageReference", "nodeAgentSKUId"];

/**
 * @member {module:model/ImageReference} imageReference
 */
VirtualMachineConfiguration.prototype['imageReference'] = undefined;

/**
 * The SKU of Batch Node Agent to be provisioned on the compute node. The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
 * @member {String} nodeAgentSKUId
 */
VirtualMachineConfiguration.prototype['nodeAgentSKUId'] = undefined;

/**
 * @member {module:model/WindowsConfiguration} windowsConfiguration
 */
VirtualMachineConfiguration.prototype['windowsConfiguration'] = undefined;






export default VirtualMachineConfiguration;

