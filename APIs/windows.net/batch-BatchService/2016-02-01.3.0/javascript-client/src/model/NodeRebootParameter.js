/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeRebootParameter model module.
 * @module model/NodeRebootParameter
 * @version 2016-02-01.3.0
 */
class NodeRebootParameter {
    /**
     * Constructs a new <code>NodeRebootParameter</code>.
     * Parameters for a ComputeNodeOperations.Reboot request.
     * @alias module:model/NodeRebootParameter
     */
    constructor() { 
        
        NodeRebootParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeRebootParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeRebootParameter} obj Optional instance to populate.
     * @return {module:model/NodeRebootParameter} The populated <code>NodeRebootParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeRebootParameter();

            if (data.hasOwnProperty('nodeRebootOption')) {
                obj['nodeRebootOption'] = ApiClient.convertToType(data['nodeRebootOption'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeRebootParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeRebootParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nodeRebootOption'] && !(typeof data['nodeRebootOption'] === 'string' || data['nodeRebootOption'] instanceof String)) {
            throw new Error("Expected the field `nodeRebootOption` to be a primitive type in the JSON string but got " + data['nodeRebootOption']);
        }

        return true;
    }


}



/**
 * When to reboot the compute node and what to do with currently running tasks. The default value is requeue.
 * @member {module:model/NodeRebootParameter.NodeRebootOptionEnum} nodeRebootOption
 */
NodeRebootParameter.prototype['nodeRebootOption'] = undefined;





/**
 * Allowed values for the <code>nodeRebootOption</code> property.
 * @enum {String}
 * @readonly
 */
NodeRebootParameter['NodeRebootOptionEnum'] = {

    /**
     * value: "requeue"
     * @const
     */
    "requeue": "requeue",

    /**
     * value: "terminate"
     * @const
     */
    "terminate": "terminate",

    /**
     * value: "taskcompletion"
     * @const
     */
    "taskcompletion": "taskcompletion",

    /**
     * value: "retaineddata"
     * @const
     */
    "retaineddata": "retaineddata"
};



export default NodeRebootParameter;

