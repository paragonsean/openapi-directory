/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchError from './BatchError';

/**
 * The TaskAddResult model module.
 * @module model/TaskAddResult
 * @version 2016-02-01.3.0
 */
class TaskAddResult {
    /**
     * Constructs a new <code>TaskAddResult</code>.
     * Result for a single task added as part of an add task collection operation.
     * @alias module:model/TaskAddResult
     * @param status {module:model/TaskAddResult.StatusEnum} The status of the add task request.
     * @param taskId {String} The id of the task for which this is the result.
     */
    constructor(status, taskId) { 
        
        TaskAddResult.initialize(this, status, taskId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, taskId) { 
        obj['status'] = status;
        obj['taskId'] = taskId;
    }

    /**
     * Constructs a <code>TaskAddResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskAddResult} obj Optional instance to populate.
     * @return {module:model/TaskAddResult} The populated <code>TaskAddResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskAddResult();

            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = BatchError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskAddResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskAddResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskAddResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          BatchError.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }

        return true;
    }


}

TaskAddResult.RequiredProperties = ["status", "taskId"];

/**
 * The ETag of the task, if the task was successfully added.
 * @member {String} eTag
 */
TaskAddResult.prototype['eTag'] = undefined;

/**
 * @member {module:model/BatchError} error
 */
TaskAddResult.prototype['error'] = undefined;

/**
 * The last modified time of the task.
 * @member {Date} lastModified
 */
TaskAddResult.prototype['lastModified'] = undefined;

/**
 * The URL of the task, if the task was successfully added.
 * @member {String} location
 */
TaskAddResult.prototype['location'] = undefined;

/**
 * The status of the add task request.
 * @member {module:model/TaskAddResult.StatusEnum} status
 */
TaskAddResult.prototype['status'] = undefined;

/**
 * The id of the task for which this is the result.
 * @member {String} taskId
 */
TaskAddResult.prototype['taskId'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TaskAddResult['StatusEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "clienterror"
     * @const
     */
    "clienterror": "clienterror",

    /**
     * value: "servererror"
     * @const
     */
    "servererror": "servererror",

    /**
     * value: "unmapped"
     * @const
     */
    "unmapped": "unmapped"
};



export default TaskAddResult;

