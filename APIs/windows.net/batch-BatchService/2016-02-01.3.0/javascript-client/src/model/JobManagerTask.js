/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentSetting from './EnvironmentSetting';
import ResourceFile from './ResourceFile';
import TaskConstraints from './TaskConstraints';

/**
 * The JobManagerTask model module.
 * @module model/JobManagerTask
 * @version 2016-02-01.3.0
 */
class JobManagerTask {
    /**
     * Constructs a new <code>JobManagerTask</code>.
     * Specifies details of a Job Manager task.
     * @alias module:model/JobManagerTask
     */
    constructor() { 
        
        JobManagerTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobManagerTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobManagerTask} obj Optional instance to populate.
     * @return {module:model/JobManagerTask} The populated <code>JobManagerTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobManagerTask();

            if (data.hasOwnProperty('commandLine')) {
                obj['commandLine'] = ApiClient.convertToType(data['commandLine'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = TaskConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('environmentSettings')) {
                obj['environmentSettings'] = ApiClient.convertToType(data['environmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('killJobOnCompletion')) {
                obj['killJobOnCompletion'] = ApiClient.convertToType(data['killJobOnCompletion'], 'Boolean');
            }
            if (data.hasOwnProperty('resourceFiles')) {
                obj['resourceFiles'] = ApiClient.convertToType(data['resourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('runElevated')) {
                obj['runElevated'] = ApiClient.convertToType(data['runElevated'], 'Boolean');
            }
            if (data.hasOwnProperty('runExclusive')) {
                obj['runExclusive'] = ApiClient.convertToType(data['runExclusive'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobManagerTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobManagerTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commandLine'] && !(typeof data['commandLine'] === 'string' || data['commandLine'] instanceof String)) {
            throw new Error("Expected the field `commandLine` to be a primitive type in the JSON string but got " + data['commandLine']);
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          TaskConstraints.validateJSON(data['constraints']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['environmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentSettings'])) {
                throw new Error("Expected the field `environmentSettings` to be an array in the JSON data but got " + data['environmentSettings']);
            }
            // validate the optional field `environmentSettings` (array)
            for (const item of data['environmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['resourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceFiles'])) {
                throw new Error("Expected the field `resourceFiles` to be an array in the JSON data but got " + data['resourceFiles']);
            }
            // validate the optional field `resourceFiles` (array)
            for (const item of data['resourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The command line of the Job Manager task.
 * @member {String} commandLine
 */
JobManagerTask.prototype['commandLine'] = undefined;

/**
 * @member {module:model/TaskConstraints} constraints
 */
JobManagerTask.prototype['constraints'] = undefined;

/**
 * The display name of the Job Manager task.
 * @member {String} displayName
 */
JobManagerTask.prototype['displayName'] = undefined;

/**
 * A list of environment variable settings for the Job Manager task.
 * @member {Array.<module:model/EnvironmentSetting>} environmentSettings
 */
JobManagerTask.prototype['environmentSettings'] = undefined;

/**
 * A string that uniquely identifies the Job Manager task. A GUID is recommended.
 * @member {String} id
 */
JobManagerTask.prototype['id'] = undefined;

/**
 * Whether completion of the Job Manager task signifies completion of the entire job.
 * @member {Boolean} killJobOnCompletion
 */
JobManagerTask.prototype['killJobOnCompletion'] = undefined;

/**
 * A list of files that the Batch service will download to the compute node before running the command line.
 * @member {Array.<module:model/ResourceFile>} resourceFiles
 */
JobManagerTask.prototype['resourceFiles'] = undefined;

/**
 * Whether to run the Job Manager task in elevated mode. The default value is false.
 * @member {Boolean} runElevated
 */
JobManagerTask.prototype['runElevated'] = undefined;

/**
 * Whether the Job Manager task requires exclusive use of the compute node where it runs. If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. (The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks.)
 * @member {Boolean} runExclusive
 */
JobManagerTask.prototype['runExclusive'] = undefined;






export default JobManagerTask;

