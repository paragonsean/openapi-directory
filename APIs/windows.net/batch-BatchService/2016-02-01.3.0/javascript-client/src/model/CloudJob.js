/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentSetting from './EnvironmentSetting';
import JobConstraints from './JobConstraints';
import JobExecutionInformation from './JobExecutionInformation';
import JobManagerTask from './JobManagerTask';
import JobPreparationTask from './JobPreparationTask';
import JobReleaseTask from './JobReleaseTask';
import JobStatistics from './JobStatistics';
import MetadataItem from './MetadataItem';
import PoolInformation from './PoolInformation';

/**
 * The CloudJob model module.
 * @module model/CloudJob
 * @version 2016-02-01.3.0
 */
class CloudJob {
    /**
     * Constructs a new <code>CloudJob</code>.
     * An Azure Batch job.
     * @alias module:model/CloudJob
     */
    constructor() { 
        
        CloudJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudJob} obj Optional instance to populate.
     * @return {module:model/CloudJob} The populated <code>CloudJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudJob();

            if (data.hasOwnProperty('commonEnvironmentSettings')) {
                obj['commonEnvironmentSettings'] = ApiClient.convertToType(data['commonEnvironmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = JobConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('executionInfo')) {
                obj['executionInfo'] = JobExecutionInformation.constructFromObject(data['executionInfo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('jobManagerTask')) {
                obj['jobManagerTask'] = JobManagerTask.constructFromObject(data['jobManagerTask']);
            }
            if (data.hasOwnProperty('jobPreparationTask')) {
                obj['jobPreparationTask'] = JobPreparationTask.constructFromObject(data['jobPreparationTask']);
            }
            if (data.hasOwnProperty('jobReleaseTask')) {
                obj['jobReleaseTask'] = JobReleaseTask.constructFromObject(data['jobReleaseTask']);
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('poolInfo')) {
                obj['poolInfo'] = PoolInformation.constructFromObject(data['poolInfo']);
            }
            if (data.hasOwnProperty('previousState')) {
                obj['previousState'] = ApiClient.convertToType(data['previousState'], 'String');
            }
            if (data.hasOwnProperty('previousStateTransitionTime')) {
                obj['previousStateTransitionTime'] = ApiClient.convertToType(data['previousStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateTransitionTime')) {
                obj['stateTransitionTime'] = ApiClient.convertToType(data['stateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = JobStatistics.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('usesTaskDependencies')) {
                obj['usesTaskDependencies'] = ApiClient.convertToType(data['usesTaskDependencies'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudJob</code>.
     */
    static validateJSON(data) {
        if (data['commonEnvironmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commonEnvironmentSettings'])) {
                throw new Error("Expected the field `commonEnvironmentSettings` to be an array in the JSON data but got " + data['commonEnvironmentSettings']);
            }
            // validate the optional field `commonEnvironmentSettings` (array)
            for (const item of data['commonEnvironmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          JobConstraints.validateJSON(data['constraints']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        // validate the optional field `executionInfo`
        if (data['executionInfo']) { // data not null
          JobExecutionInformation.validateJSON(data['executionInfo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `jobManagerTask`
        if (data['jobManagerTask']) { // data not null
          JobManagerTask.validateJSON(data['jobManagerTask']);
        }
        // validate the optional field `jobPreparationTask`
        if (data['jobPreparationTask']) { // data not null
          JobPreparationTask.validateJSON(data['jobPreparationTask']);
        }
        // validate the optional field `jobReleaseTask`
        if (data['jobReleaseTask']) { // data not null
          JobReleaseTask.validateJSON(data['jobReleaseTask']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // validate the optional field `poolInfo`
        if (data['poolInfo']) { // data not null
          PoolInformation.validateJSON(data['poolInfo']);
        }
        // ensure the json data is a string
        if (data['previousState'] && !(typeof data['previousState'] === 'string' || data['previousState'] instanceof String)) {
            throw new Error("Expected the field `previousState` to be a primitive type in the JSON string but got " + data['previousState']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          JobStatistics.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The list of common environment variable settings. These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
 * @member {Array.<module:model/EnvironmentSetting>} commonEnvironmentSettings
 */
CloudJob.prototype['commonEnvironmentSettings'] = undefined;

/**
 * @member {module:model/JobConstraints} constraints
 */
CloudJob.prototype['constraints'] = undefined;

/**
 * The creation time of the job.
 * @member {Date} creationTime
 */
CloudJob.prototype['creationTime'] = undefined;

/**
 * The display name for the job.
 * @member {String} displayName
 */
CloudJob.prototype['displayName'] = undefined;

/**
 * The ETag of the job.
 * @member {String} eTag
 */
CloudJob.prototype['eTag'] = undefined;

/**
 * @member {module:model/JobExecutionInformation} executionInfo
 */
CloudJob.prototype['executionInfo'] = undefined;

/**
 * A string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
 * @member {String} id
 */
CloudJob.prototype['id'] = undefined;

/**
 * @member {module:model/JobManagerTask} jobManagerTask
 */
CloudJob.prototype['jobManagerTask'] = undefined;

/**
 * @member {module:model/JobPreparationTask} jobPreparationTask
 */
CloudJob.prototype['jobPreparationTask'] = undefined;

/**
 * @member {module:model/JobReleaseTask} jobReleaseTask
 */
CloudJob.prototype['jobReleaseTask'] = undefined;

/**
 * The last modified time of the job.
 * @member {Date} lastModified
 */
CloudJob.prototype['lastModified'] = undefined;

/**
 * A list of name-value pairs associated with the job as metadata.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
CloudJob.prototype['metadata'] = undefined;

/**
 * @member {module:model/PoolInformation} poolInfo
 */
CloudJob.prototype['poolInfo'] = undefined;

/**
 * The previous state of the job. This property is not set if the job is in its initial Active state.
 * @member {module:model/CloudJob.PreviousStateEnum} previousState
 */
CloudJob.prototype['previousState'] = undefined;

/**
 * The time at which the job entered its previous state. This property is not set if the job is in its initial Active state.
 * @member {Date} previousStateTransitionTime
 */
CloudJob.prototype['previousStateTransitionTime'] = undefined;

/**
 * The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
 * @member {Number} priority
 */
CloudJob.prototype['priority'] = undefined;

/**
 * The current state of the job.
 * @member {module:model/CloudJob.StateEnum} state
 */
CloudJob.prototype['state'] = undefined;

/**
 * The time at which the job entered its current state.
 * @member {Date} stateTransitionTime
 */
CloudJob.prototype['stateTransitionTime'] = undefined;

/**
 * @member {module:model/JobStatistics} stats
 */
CloudJob.prototype['stats'] = undefined;

/**
 * The URL of the job.
 * @member {String} url
 */
CloudJob.prototype['url'] = undefined;

/**
 * The flag that determines if this job will use tasks with dependencies.
 * @member {Boolean} usesTaskDependencies
 */
CloudJob.prototype['usesTaskDependencies'] = undefined;





/**
 * Allowed values for the <code>previousState</code> property.
 * @enum {String}
 * @readonly
 */
CloudJob['PreviousStateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "disabling"
     * @const
     */
    "disabling": "disabling",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "enabling"
     * @const
     */
    "enabling": "enabling",

    /**
     * value: "terminating"
     * @const
     */
    "terminating": "terminating",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "deleting"
     * @const
     */
    "deleting": "deleting"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CloudJob['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "disabling"
     * @const
     */
    "disabling": "disabling",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "enabling"
     * @const
     */
    "enabling": "enabling",

    /**
     * value: "terminating"
     * @const
     */
    "terminating": "terminating",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "deleting"
     * @const
     */
    "deleting": "deleting"
};



export default CloudJob;

