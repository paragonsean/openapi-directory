/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AffinityInformation from './AffinityInformation';
import ComputeNodeInformation from './ComputeNodeInformation';
import EnvironmentSetting from './EnvironmentSetting';
import MultiInstanceSettings from './MultiInstanceSettings';
import ResourceFile from './ResourceFile';
import TaskConstraints from './TaskConstraints';
import TaskDependencies from './TaskDependencies';
import TaskExecutionInformation from './TaskExecutionInformation';
import TaskStatistics from './TaskStatistics';

/**
 * The CloudTask model module.
 * @module model/CloudTask
 * @version 2016-02-01.3.0
 */
class CloudTask {
    /**
     * Constructs a new <code>CloudTask</code>.
     * An Azure Batch task.
     * @alias module:model/CloudTask
     */
    constructor() { 
        
        CloudTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudTask} obj Optional instance to populate.
     * @return {module:model/CloudTask} The populated <code>CloudTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudTask();

            if (data.hasOwnProperty('affinityInfo')) {
                obj['affinityInfo'] = AffinityInformation.constructFromObject(data['affinityInfo']);
            }
            if (data.hasOwnProperty('commandLine')) {
                obj['commandLine'] = ApiClient.convertToType(data['commandLine'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = TaskConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('dependsOn')) {
                obj['dependsOn'] = TaskDependencies.constructFromObject(data['dependsOn']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('environmentSettings')) {
                obj['environmentSettings'] = ApiClient.convertToType(data['environmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('executionInfo')) {
                obj['executionInfo'] = TaskExecutionInformation.constructFromObject(data['executionInfo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('multiInstanceSettings')) {
                obj['multiInstanceSettings'] = MultiInstanceSettings.constructFromObject(data['multiInstanceSettings']);
            }
            if (data.hasOwnProperty('nodeInfo')) {
                obj['nodeInfo'] = ComputeNodeInformation.constructFromObject(data['nodeInfo']);
            }
            if (data.hasOwnProperty('previousState')) {
                obj['previousState'] = ApiClient.convertToType(data['previousState'], 'String');
            }
            if (data.hasOwnProperty('previousStateTransitionTime')) {
                obj['previousStateTransitionTime'] = ApiClient.convertToType(data['previousStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('resourceFiles')) {
                obj['resourceFiles'] = ApiClient.convertToType(data['resourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('runElevated')) {
                obj['runElevated'] = ApiClient.convertToType(data['runElevated'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateTransitionTime')) {
                obj['stateTransitionTime'] = ApiClient.convertToType(data['stateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = TaskStatistics.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudTask</code>.
     */
    static validateJSON(data) {
        // validate the optional field `affinityInfo`
        if (data['affinityInfo']) { // data not null
          AffinityInformation.validateJSON(data['affinityInfo']);
        }
        // ensure the json data is a string
        if (data['commandLine'] && !(typeof data['commandLine'] === 'string' || data['commandLine'] instanceof String)) {
            throw new Error("Expected the field `commandLine` to be a primitive type in the JSON string but got " + data['commandLine']);
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          TaskConstraints.validateJSON(data['constraints']);
        }
        // validate the optional field `dependsOn`
        if (data['dependsOn']) { // data not null
          TaskDependencies.validateJSON(data['dependsOn']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        if (data['environmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentSettings'])) {
                throw new Error("Expected the field `environmentSettings` to be an array in the JSON data but got " + data['environmentSettings']);
            }
            // validate the optional field `environmentSettings` (array)
            for (const item of data['environmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // validate the optional field `executionInfo`
        if (data['executionInfo']) { // data not null
          TaskExecutionInformation.validateJSON(data['executionInfo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `multiInstanceSettings`
        if (data['multiInstanceSettings']) { // data not null
          MultiInstanceSettings.validateJSON(data['multiInstanceSettings']);
        }
        // validate the optional field `nodeInfo`
        if (data['nodeInfo']) { // data not null
          ComputeNodeInformation.validateJSON(data['nodeInfo']);
        }
        // ensure the json data is a string
        if (data['previousState'] && !(typeof data['previousState'] === 'string' || data['previousState'] instanceof String)) {
            throw new Error("Expected the field `previousState` to be a primitive type in the JSON string but got " + data['previousState']);
        }
        if (data['resourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceFiles'])) {
                throw new Error("Expected the field `resourceFiles` to be an array in the JSON data but got " + data['resourceFiles']);
            }
            // validate the optional field `resourceFiles` (array)
            for (const item of data['resourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          TaskStatistics.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/AffinityInformation} affinityInfo
 */
CloudTask.prototype['affinityInfo'] = undefined;

/**
 * The command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line.
 * @member {String} commandLine
 */
CloudTask.prototype['commandLine'] = undefined;

/**
 * @member {module:model/TaskConstraints} constraints
 */
CloudTask.prototype['constraints'] = undefined;

/**
 * The creation time of the task.
 * @member {Date} creationTime
 */
CloudTask.prototype['creationTime'] = undefined;

/**
 * @member {module:model/TaskDependencies} dependsOn
 */
CloudTask.prototype['dependsOn'] = undefined;

/**
 * A display name for the task.
 * @member {String} displayName
 */
CloudTask.prototype['displayName'] = undefined;

/**
 * The ETag of the task.
 * @member {String} eTag
 */
CloudTask.prototype['eTag'] = undefined;

/**
 * A list of environment variable settings for the task.
 * @member {Array.<module:model/EnvironmentSetting>} environmentSettings
 */
CloudTask.prototype['environmentSettings'] = undefined;

/**
 * @member {module:model/TaskExecutionInformation} executionInfo
 */
CloudTask.prototype['executionInfo'] = undefined;

/**
 * A string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
 * @member {String} id
 */
CloudTask.prototype['id'] = undefined;

/**
 * The last modified time of the task.
 * @member {Date} lastModified
 */
CloudTask.prototype['lastModified'] = undefined;

/**
 * @member {module:model/MultiInstanceSettings} multiInstanceSettings
 */
CloudTask.prototype['multiInstanceSettings'] = undefined;

/**
 * @member {module:model/ComputeNodeInformation} nodeInfo
 */
CloudTask.prototype['nodeInfo'] = undefined;

/**
 * The previous state of the task. This property is not set if the task is in its initial Active state.
 * @member {module:model/CloudTask.PreviousStateEnum} previousState
 */
CloudTask.prototype['previousState'] = undefined;

/**
 * The time at which the task entered its previous state. This property is not set if the task is in its initial Active state.
 * @member {Date} previousStateTransitionTime
 */
CloudTask.prototype['previousStateTransitionTime'] = undefined;

/**
 * A list of files that the Batch service will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed.
 * @member {Array.<module:model/ResourceFile>} resourceFiles
 */
CloudTask.prototype['resourceFiles'] = undefined;

/**
 * Whether to run the task in elevated mode.
 * @member {Boolean} runElevated
 */
CloudTask.prototype['runElevated'] = undefined;

/**
 * The current state of the task.
 * @member {module:model/CloudTask.StateEnum} state
 */
CloudTask.prototype['state'] = undefined;

/**
 * The time at which the task entered its current state.
 * @member {Date} stateTransitionTime
 */
CloudTask.prototype['stateTransitionTime'] = undefined;

/**
 * @member {module:model/TaskStatistics} stats
 */
CloudTask.prototype['stats'] = undefined;

/**
 * The URL of the task.
 * @member {String} url
 */
CloudTask.prototype['url'] = undefined;





/**
 * Allowed values for the <code>previousState</code> property.
 * @enum {String}
 * @readonly
 */
CloudTask['PreviousStateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "preparing"
     * @const
     */
    "preparing": "preparing",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CloudTask['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "preparing"
     * @const
     */
    "preparing": "preparing",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};



export default CloudTask;

