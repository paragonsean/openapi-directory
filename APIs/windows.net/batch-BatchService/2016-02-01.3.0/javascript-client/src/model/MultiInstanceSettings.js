/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceFile from './ResourceFile';

/**
 * The MultiInstanceSettings model module.
 * @module model/MultiInstanceSettings
 * @version 2016-02-01.3.0
 */
class MultiInstanceSettings {
    /**
     * Constructs a new <code>MultiInstanceSettings</code>.
     * Settings which specify how to run a multi-instance task. Multi-instance tasks are commonly used to support MPI tasks.
     * @alias module:model/MultiInstanceSettings
     * @param numberOfInstances {Number} The number of compute nodes required by the multi-instance task.
     */
    constructor(numberOfInstances) { 
        
        MultiInstanceSettings.initialize(this, numberOfInstances);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, numberOfInstances) { 
        obj['numberOfInstances'] = numberOfInstances;
    }

    /**
     * Constructs a <code>MultiInstanceSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultiInstanceSettings} obj Optional instance to populate.
     * @return {module:model/MultiInstanceSettings} The populated <code>MultiInstanceSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultiInstanceSettings();

            if (data.hasOwnProperty('commonResourceFiles')) {
                obj['commonResourceFiles'] = ApiClient.convertToType(data['commonResourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('coordinationCommandLine')) {
                obj['coordinationCommandLine'] = ApiClient.convertToType(data['coordinationCommandLine'], 'String');
            }
            if (data.hasOwnProperty('numberOfInstances')) {
                obj['numberOfInstances'] = ApiClient.convertToType(data['numberOfInstances'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultiInstanceSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultiInstanceSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MultiInstanceSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['commonResourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commonResourceFiles'])) {
                throw new Error("Expected the field `commonResourceFiles` to be an array in the JSON data but got " + data['commonResourceFiles']);
            }
            // validate the optional field `commonResourceFiles` (array)
            for (const item of data['commonResourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['coordinationCommandLine'] && !(typeof data['coordinationCommandLine'] === 'string' || data['coordinationCommandLine'] instanceof String)) {
            throw new Error("Expected the field `coordinationCommandLine` to be a primitive type in the JSON string but got " + data['coordinationCommandLine']);
        }

        return true;
    }


}

MultiInstanceSettings.RequiredProperties = ["numberOfInstances"];

/**
 * A list of files that the Batch service will download before running the coordination command line. The difference between common resource files and task resource files is that common resource files are downloaded for all subtasks including the primary, whereas task resource files are downloaded only for the primary.
 * @member {Array.<module:model/ResourceFile>} commonResourceFiles
 */
MultiInstanceSettings.prototype['commonResourceFiles'] = undefined;

/**
 * The command to run on the compute node instances for coordinating among the subtasks.
 * @member {String} coordinationCommandLine
 */
MultiInstanceSettings.prototype['coordinationCommandLine'] = undefined;

/**
 * The number of compute nodes required by the multi-instance task.
 * @member {Number} numberOfInstances
 */
MultiInstanceSettings.prototype['numberOfInstances'] = undefined;






export default MultiInstanceSettings;

