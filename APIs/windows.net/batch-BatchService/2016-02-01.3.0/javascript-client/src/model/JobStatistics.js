/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JobStatistics model module.
 * @module model/JobStatistics
 * @version 2016-02-01.3.0
 */
class JobStatistics {
    /**
     * Constructs a new <code>JobStatistics</code>.
     * Resource usage statistics for a job.
     * @alias module:model/JobStatistics
     * @param kernelCPUTime {String} The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job.
     * @param lastUpdateTime {Date} The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     * @param numFailedTasks {Number} The total number of tasks in the job that failed during the given time range.
     * @param numSucceededTasks {Number} The total number of tasks successfully completed in the job during the given time range.
     * @param numTaskRetries {Number} The total number of retries on all the tasks in the job during the given time range.
     * @param readIOGiB {Number} The total gibibytes read from disk by all tasks in the job.
     * @param readIOps {Number} The total number of disk read operations made by all tasks in the job.
     * @param startTime {Date} The start time of the time range covered by the statistics.
     * @param url {String} The URL of the statistics.
     * @param userCPUTime {String} The total user mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job.
     * @param waitTime {String} The total wait time of all tasks in the job. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)
     * @param wallClockTime {String} The total wall clock time of all tasks in the job.
     * @param writeIOGiB {Number} The total gibibytes written to disk by all tasks in the job.
     * @param writeIOps {Number} The total number of disk write operations made by all tasks in the job.
     */
    constructor(kernelCPUTime, lastUpdateTime, numFailedTasks, numSucceededTasks, numTaskRetries, readIOGiB, readIOps, startTime, url, userCPUTime, waitTime, wallClockTime, writeIOGiB, writeIOps) { 
        
        JobStatistics.initialize(this, kernelCPUTime, lastUpdateTime, numFailedTasks, numSucceededTasks, numTaskRetries, readIOGiB, readIOps, startTime, url, userCPUTime, waitTime, wallClockTime, writeIOGiB, writeIOps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kernelCPUTime, lastUpdateTime, numFailedTasks, numSucceededTasks, numTaskRetries, readIOGiB, readIOps, startTime, url, userCPUTime, waitTime, wallClockTime, writeIOGiB, writeIOps) { 
        obj['kernelCPUTime'] = kernelCPUTime;
        obj['lastUpdateTime'] = lastUpdateTime;
        obj['numFailedTasks'] = numFailedTasks;
        obj['numSucceededTasks'] = numSucceededTasks;
        obj['numTaskRetries'] = numTaskRetries;
        obj['readIOGiB'] = readIOGiB;
        obj['readIOps'] = readIOps;
        obj['startTime'] = startTime;
        obj['url'] = url;
        obj['userCPUTime'] = userCPUTime;
        obj['waitTime'] = waitTime;
        obj['wallClockTime'] = wallClockTime;
        obj['writeIOGiB'] = writeIOGiB;
        obj['writeIOps'] = writeIOps;
    }

    /**
     * Constructs a <code>JobStatistics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobStatistics} obj Optional instance to populate.
     * @return {module:model/JobStatistics} The populated <code>JobStatistics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobStatistics();

            if (data.hasOwnProperty('kernelCPUTime')) {
                obj['kernelCPUTime'] = ApiClient.convertToType(data['kernelCPUTime'], 'String');
            }
            if (data.hasOwnProperty('lastUpdateTime')) {
                obj['lastUpdateTime'] = ApiClient.convertToType(data['lastUpdateTime'], 'Date');
            }
            if (data.hasOwnProperty('numFailedTasks')) {
                obj['numFailedTasks'] = ApiClient.convertToType(data['numFailedTasks'], 'Number');
            }
            if (data.hasOwnProperty('numSucceededTasks')) {
                obj['numSucceededTasks'] = ApiClient.convertToType(data['numSucceededTasks'], 'Number');
            }
            if (data.hasOwnProperty('numTaskRetries')) {
                obj['numTaskRetries'] = ApiClient.convertToType(data['numTaskRetries'], 'Number');
            }
            if (data.hasOwnProperty('readIOGiB')) {
                obj['readIOGiB'] = ApiClient.convertToType(data['readIOGiB'], 'Number');
            }
            if (data.hasOwnProperty('readIOps')) {
                obj['readIOps'] = ApiClient.convertToType(data['readIOps'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userCPUTime')) {
                obj['userCPUTime'] = ApiClient.convertToType(data['userCPUTime'], 'String');
            }
            if (data.hasOwnProperty('waitTime')) {
                obj['waitTime'] = ApiClient.convertToType(data['waitTime'], 'String');
            }
            if (data.hasOwnProperty('wallClockTime')) {
                obj['wallClockTime'] = ApiClient.convertToType(data['wallClockTime'], 'String');
            }
            if (data.hasOwnProperty('writeIOGiB')) {
                obj['writeIOGiB'] = ApiClient.convertToType(data['writeIOGiB'], 'Number');
            }
            if (data.hasOwnProperty('writeIOps')) {
                obj['writeIOps'] = ApiClient.convertToType(data['writeIOps'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobStatistics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobStatistics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobStatistics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['kernelCPUTime'] && !(typeof data['kernelCPUTime'] === 'string' || data['kernelCPUTime'] instanceof String)) {
            throw new Error("Expected the field `kernelCPUTime` to be a primitive type in the JSON string but got " + data['kernelCPUTime']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['userCPUTime'] && !(typeof data['userCPUTime'] === 'string' || data['userCPUTime'] instanceof String)) {
            throw new Error("Expected the field `userCPUTime` to be a primitive type in the JSON string but got " + data['userCPUTime']);
        }
        // ensure the json data is a string
        if (data['waitTime'] && !(typeof data['waitTime'] === 'string' || data['waitTime'] instanceof String)) {
            throw new Error("Expected the field `waitTime` to be a primitive type in the JSON string but got " + data['waitTime']);
        }
        // ensure the json data is a string
        if (data['wallClockTime'] && !(typeof data['wallClockTime'] === 'string' || data['wallClockTime'] instanceof String)) {
            throw new Error("Expected the field `wallClockTime` to be a primitive type in the JSON string but got " + data['wallClockTime']);
        }

        return true;
    }


}

JobStatistics.RequiredProperties = ["kernelCPUTime", "lastUpdateTime", "numFailedTasks", "numSucceededTasks", "numTaskRetries", "readIOGiB", "readIOps", "startTime", "url", "userCPUTime", "waitTime", "wallClockTime", "writeIOGiB", "writeIOps"];

/**
 * The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job.
 * @member {String} kernelCPUTime
 */
JobStatistics.prototype['kernelCPUTime'] = undefined;

/**
 * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
 * @member {Date} lastUpdateTime
 */
JobStatistics.prototype['lastUpdateTime'] = undefined;

/**
 * The total number of tasks in the job that failed during the given time range.
 * @member {Number} numFailedTasks
 */
JobStatistics.prototype['numFailedTasks'] = undefined;

/**
 * The total number of tasks successfully completed in the job during the given time range.
 * @member {Number} numSucceededTasks
 */
JobStatistics.prototype['numSucceededTasks'] = undefined;

/**
 * The total number of retries on all the tasks in the job during the given time range.
 * @member {Number} numTaskRetries
 */
JobStatistics.prototype['numTaskRetries'] = undefined;

/**
 * The total gibibytes read from disk by all tasks in the job.
 * @member {Number} readIOGiB
 */
JobStatistics.prototype['readIOGiB'] = undefined;

/**
 * The total number of disk read operations made by all tasks in the job.
 * @member {Number} readIOps
 */
JobStatistics.prototype['readIOps'] = undefined;

/**
 * The start time of the time range covered by the statistics.
 * @member {Date} startTime
 */
JobStatistics.prototype['startTime'] = undefined;

/**
 * The URL of the statistics.
 * @member {String} url
 */
JobStatistics.prototype['url'] = undefined;

/**
 * The total user mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job.
 * @member {String} userCPUTime
 */
JobStatistics.prototype['userCPUTime'] = undefined;

/**
 * The total wait time of all tasks in the job. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)
 * @member {String} waitTime
 */
JobStatistics.prototype['waitTime'] = undefined;

/**
 * The total wall clock time of all tasks in the job.
 * @member {String} wallClockTime
 */
JobStatistics.prototype['wallClockTime'] = undefined;

/**
 * The total gibibytes written to disk by all tasks in the job.
 * @member {Number} writeIOGiB
 */
JobStatistics.prototype['writeIOGiB'] = undefined;

/**
 * The total number of disk write operations made by all tasks in the job.
 * @member {Number} writeIOps
 */
JobStatistics.prototype['writeIOps'] = undefined;






export default JobStatistics;

