/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutoScaleRun from '../model/AutoScaleRun';
import BatchError from '../model/BatchError';
import CloudPool from '../model/CloudPool';
import CloudPoolListResult from '../model/CloudPoolListResult';
import PoolAddParameter from '../model/PoolAddParameter';
import PoolEnableAutoScaleParameter from '../model/PoolEnableAutoScaleParameter';
import PoolEvaluateAutoScaleParameter from '../model/PoolEvaluateAutoScaleParameter';
import PoolListPoolUsageMetricsResult from '../model/PoolListPoolUsageMetricsResult';
import PoolPatchParameter from '../model/PoolPatchParameter';
import PoolResizeParameter from '../model/PoolResizeParameter';
import PoolStatistics from '../model/PoolStatistics';
import PoolUpdatePropertiesParameter from '../model/PoolUpdatePropertiesParameter';
import PoolUpgradeOSParameter from '../model/PoolUpgradeOSParameter';

/**
* Pools service.
* @module api/PoolsApi
* @version 2016-02-01.3.0
*/
export default class PoolsApi {

    /**
    * Constructs a new PoolsApi. 
    * @alias module:api/PoolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the poolAdd operation.
     * @callback module:api/PoolsApi~poolAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a pool to the specified account.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/PoolAddParameter} poolAddParameter The pool to be added.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/PoolsApi~poolAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolAdd(apiVersion, poolAddParameter, opts, callback) {
      opts = opts || {};
      let postBody = poolAddParameter;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolAdd");
      }
      // verify the required parameter 'poolAddParameter' is set
      if (poolAddParameter === undefined || poolAddParameter === null) {
        throw new Error("Missing the required parameter 'poolAddParameter' when calling poolAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolDelete operation.
     * @callback module:api/PoolsApi~poolDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pool from the specified account.
     * @param {String} poolId The id of the pool to delete.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/PoolsApi~poolDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolDelete(poolId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolDelete");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolDisableAutoScale operation.
     * @callback module:api/PoolsApi~poolDisableAutoScaleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables automatic scaling for a pool.
     * @param {String} poolId The id of the pool on which to disable automatic scaling.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/PoolsApi~poolDisableAutoScaleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolDisableAutoScale(poolId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolDisableAutoScale");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolDisableAutoScale");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/disableautoscale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolEnableAutoScale operation.
     * @callback module:api/PoolsApi~poolEnableAutoScaleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables automatic scaling for a pool.
     * @param {String} poolId The id of the pool on which to enable automatic scaling.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/PoolEnableAutoScaleParameter} poolEnableAutoScaleParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/PoolsApi~poolEnableAutoScaleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolEnableAutoScale(poolId, apiVersion, poolEnableAutoScaleParameter, opts, callback) {
      opts = opts || {};
      let postBody = poolEnableAutoScaleParameter;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolEnableAutoScale");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolEnableAutoScale");
      }
      // verify the required parameter 'poolEnableAutoScaleParameter' is set
      if (poolEnableAutoScaleParameter === undefined || poolEnableAutoScaleParameter === null) {
        throw new Error("Missing the required parameter 'poolEnableAutoScaleParameter' when calling poolEnableAutoScale");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/enableautoscale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolEvaluateAutoScale operation.
     * @callback module:api/PoolsApi~poolEvaluateAutoScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoScaleRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the result of evaluating an automatic scaling formula on the pool.
     * @param {String} poolId The id of the pool on which to evaluate the automatic scaling formula.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/PoolEvaluateAutoScaleParameter} poolEvaluateAutoScaleParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/PoolsApi~poolEvaluateAutoScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoScaleRun}
     */
    poolEvaluateAutoScale(poolId, apiVersion, poolEvaluateAutoScaleParameter, opts, callback) {
      opts = opts || {};
      let postBody = poolEvaluateAutoScaleParameter;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolEvaluateAutoScale");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolEvaluateAutoScale");
      }
      // verify the required parameter 'poolEvaluateAutoScaleParameter' is set
      if (poolEvaluateAutoScaleParameter === undefined || poolEvaluateAutoScaleParameter === null) {
        throw new Error("Missing the required parameter 'poolEvaluateAutoScaleParameter' when calling poolEvaluateAutoScale");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = AutoScaleRun;
      return this.apiClient.callApi(
        '/pools/{poolId}/evaluateautoscale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolExists operation.
     * @callback module:api/PoolsApi~poolExistsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets basic properties of a pool.
     * @param {String} poolId The id of the pool to get.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/PoolsApi~poolExistsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolExists(poolId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolExists");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolExists");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolGet operation.
     * @callback module:api/PoolsApi~poolGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified pool.
     * @param {String} poolId The id of the pool to get.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] An OData $select clause.
     * @param {String} [expand] An OData $expand clause.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/PoolsApi~poolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudPool}
     */
    poolGet(poolId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolGet");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        '$select': opts['select'],
        '$expand': opts['expand'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudPool;
      return this.apiClient.callApi(
        '/pools/{poolId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolGetAllPoolsLifetimeStatistics operation.
     * @callback module:api/PoolsApi~poolGetAllPoolsLifetimeStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PoolStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/PoolsApi~poolGetAllPoolsLifetimeStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PoolStatistics}
     */
    poolGetAllPoolsLifetimeStatistics(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolGetAllPoolsLifetimeStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PoolStatistics;
      return this.apiClient.callApi(
        '/lifetimepoolstats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolList operation.
     * @callback module:api/PoolsApi~poolListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudPoolListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the pools in the specified account.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause.
     * @param {String} [select] An OData $select clause.
     * @param {String} [expand] An OData $expand clause.
     * @param {Number} [maxresults] The maximum number of items to return in the response.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/PoolsApi~poolListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudPoolListResult}
     */
    poolList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolList");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudPoolListResult;
      return this.apiClient.callApi(
        '/pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolListPoolUsageMetrics operation.
     * @callback module:api/PoolsApi~poolListPoolUsageMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PoolListPoolUsageMetricsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Date} [starttime] The earliest time from which to include metrics. This must be at least two and a half hours before the current time.
     * @param {Date} [endtime] The latest time from which to include metrics. This must be at least two hours before the current time.
     * @param {String} [filter] An OData $filter clause.
     * @param {Number} [maxresults] The maximum number of items to return in the response.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/PoolsApi~poolListPoolUsageMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PoolListPoolUsageMetricsResult}
     */
    poolListPoolUsageMetrics(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolListPoolUsageMetrics");
      }

      let pathParams = {
      };
      let queryParams = {
        'starttime': opts['starttime'],
        'endtime': opts['endtime'],
        '$filter': opts['filter'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PoolListPoolUsageMetricsResult;
      return this.apiClient.callApi(
        '/poolusagemetrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolPatch operation.
     * @callback module:api/PoolsApi~poolPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of a pool.
     * @param {String} poolId The id of the pool to update.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/PoolPatchParameter} poolPatchParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/PoolsApi~poolPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolPatch(poolId, apiVersion, poolPatchParameter, opts, callback) {
      opts = opts || {};
      let postBody = poolPatchParameter;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolPatch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolPatch");
      }
      // verify the required parameter 'poolPatchParameter' is set
      if (poolPatchParameter === undefined || poolPatchParameter === null) {
        throw new Error("Missing the required parameter 'poolPatchParameter' when calling poolPatch");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolResize operation.
     * @callback module:api/PoolsApi~poolResizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the number of compute nodes that are assigned to a pool.
     * @param {String} poolId The id of the pool to resize.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/PoolResizeParameter} poolResizeParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/PoolsApi~poolResizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolResize(poolId, apiVersion, poolResizeParameter, opts, callback) {
      opts = opts || {};
      let postBody = poolResizeParameter;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolResize");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolResize");
      }
      // verify the required parameter 'poolResizeParameter' is set
      if (poolResizeParameter === undefined || poolResizeParameter === null) {
        throw new Error("Missing the required parameter 'poolResizeParameter' when calling poolResize");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/resize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolStopResize operation.
     * @callback module:api/PoolsApi~poolStopResizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state.
     * @param {String} poolId The id of the pool whose resizing you want to stop.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/PoolsApi~poolStopResizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolStopResize(poolId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolStopResize");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolStopResize");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/stopresize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolUpdateProperties operation.
     * @callback module:api/PoolsApi~poolUpdatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of a pool.
     * @param {String} poolId The id of the pool to update.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/PoolUpdatePropertiesParameter} poolUpdatePropertiesParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/PoolsApi~poolUpdatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolUpdateProperties(poolId, apiVersion, poolUpdatePropertiesParameter, opts, callback) {
      opts = opts || {};
      let postBody = poolUpdatePropertiesParameter;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolUpdateProperties");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolUpdateProperties");
      }
      // verify the required parameter 'poolUpdatePropertiesParameter' is set
      if (poolUpdatePropertiesParameter === undefined || poolUpdatePropertiesParameter === null) {
        throw new Error("Missing the required parameter 'poolUpdatePropertiesParameter' when calling poolUpdateProperties");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/updateproperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolUpgradeOS operation.
     * @callback module:api/PoolsApi~poolUpgradeOSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrades the operating system of the specified pool.
     * @param {String} poolId The id of the pool to upgrade.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/PoolUpgradeOSParameter} poolUpgradeOSParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/PoolsApi~poolUpgradeOSCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolUpgradeOS(poolId, apiVersion, poolUpgradeOSParameter, opts, callback) {
      opts = opts || {};
      let postBody = poolUpgradeOSParameter;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling poolUpgradeOS");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolUpgradeOS");
      }
      // verify the required parameter 'poolUpgradeOSParameter' is set
      if (poolUpgradeOSParameter === undefined || poolUpgradeOSParameter === null) {
        throw new Error("Missing the required parameter 'poolUpgradeOSParameter' when calling poolUpgradeOS");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/upgradeos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
