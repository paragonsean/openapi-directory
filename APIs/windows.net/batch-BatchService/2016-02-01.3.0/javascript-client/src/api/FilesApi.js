/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchError from '../model/BatchError';
import NodeFileListResult from '../model/NodeFileListResult';

/**
* Files service.
* @module api/FilesApi
* @version 2016-02-01.3.0
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fileDeleteFromComputeNode operation.
     * @callback module:api/FilesApi~fileDeleteFromComputeNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified task file from the compute node.
     * @param {String} poolId The id of the pool that contains the compute node.
     * @param {String} nodeId The id of the compute node from which you want to delete the file.
     * @param {String} fileName The path to the file that you want to delete.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [recursive] Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set Recursive to true to delete the directory and all of the files and subdirectories in it. If Recursive is false then the directory must be empty or deletion will fail.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/FilesApi~fileDeleteFromComputeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fileDeleteFromComputeNode(poolId, nodeId, fileName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling fileDeleteFromComputeNode");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling fileDeleteFromComputeNode");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling fileDeleteFromComputeNode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileDeleteFromComputeNode");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId,
        'fileName': fileName
      };
      let queryParams = {
        'recursive': opts['recursive'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/files/{fileName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileDeleteFromTask operation.
     * @callback module:api/FilesApi~fileDeleteFromTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified task file from the compute node where the task ran.
     * @param {String} jobId The id of the job that contains the task.
     * @param {String} taskId The id of the task whose file you want to delete.
     * @param {String} fileName The path to the task file that you want to delete.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [recursive] Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set Recursive to true to delete the directory and all of the files and subdirectories in it. If Recursive is false then the directory must be empty or deletion will fail.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/FilesApi~fileDeleteFromTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fileDeleteFromTask(jobId, taskId, fileName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling fileDeleteFromTask");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling fileDeleteFromTask");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling fileDeleteFromTask");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileDeleteFromTask");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId,
        'fileName': fileName
      };
      let queryParams = {
        'recursive': opts['recursive'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/files/{fileName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileGetFromComputeNode operation.
     * @callback module:api/FilesApi~fileGetFromComputeNodeCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the content of the specified task file.
     * @param {String} poolId The id of the pool that contains the compute node.
     * @param {String} nodeId The id of the compute node that contains the file.
     * @param {String} fileName The path to the task file that you want to get the content of.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ocpRange] The byte range to be retrieved. The default is to retrieve the entire file. The format is startRange-endRange.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/FilesApi~fileGetFromComputeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    fileGetFromComputeNode(poolId, nodeId, fileName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling fileGetFromComputeNode");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling fileGetFromComputeNode");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling fileGetFromComputeNode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileGetFromComputeNode");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId,
        'fileName': fileName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'ocp-range': opts['ocpRange'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/files/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileGetFromTask operation.
     * @callback module:api/FilesApi~fileGetFromTaskCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the content of the specified task file.
     * @param {String} jobId The id of the job that contains the task.
     * @param {String} taskId The id of the task whose file you want to retrieve.
     * @param {String} fileName The path to the task file that you want to get the content of.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ocpRange] The byte range to be retrieved. The default is to retrieve the entire file. The format is startRange-endRange.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/FilesApi~fileGetFromTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    fileGetFromTask(jobId, taskId, fileName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling fileGetFromTask");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling fileGetFromTask");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling fileGetFromTask");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileGetFromTask");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId,
        'fileName': fileName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'ocp-range': opts['ocpRange'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/files/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileGetNodeFilePropertiesFromComputeNode operation.
     * @callback module:api/FilesApi~fileGetNodeFilePropertiesFromComputeNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties of the specified compute node file.
     * @param {String} poolId The id of the pool that contains the compute node.
     * @param {String} nodeId The id of the compute node that contains the file.
     * @param {String} fileName The path to the compute node file that you want to get the properties of.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/FilesApi~fileGetNodeFilePropertiesFromComputeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fileGetNodeFilePropertiesFromComputeNode(poolId, nodeId, fileName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling fileGetNodeFilePropertiesFromComputeNode");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling fileGetNodeFilePropertiesFromComputeNode");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling fileGetNodeFilePropertiesFromComputeNode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileGetNodeFilePropertiesFromComputeNode");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId,
        'fileName': fileName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/files/{fileName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileGetNodeFilePropertiesFromTask operation.
     * @callback module:api/FilesApi~fileGetNodeFilePropertiesFromTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties of the specified task file.
     * @param {String} jobId The id of the job that contains the task.
     * @param {String} taskId The id of the task whose file you want to get the properties of.
     * @param {String} fileName The path to the task file that you want to get the properties of.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/FilesApi~fileGetNodeFilePropertiesFromTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fileGetNodeFilePropertiesFromTask(jobId, taskId, fileName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling fileGetNodeFilePropertiesFromTask");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling fileGetNodeFilePropertiesFromTask");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling fileGetNodeFilePropertiesFromTask");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileGetNodeFilePropertiesFromTask");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId,
        'fileName': fileName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/files/{fileName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileListFromComputeNode operation.
     * @callback module:api/FilesApi~fileListFromComputeNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeFileListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the files in task directories on the specified compute node.
     * @param {String} poolId The id of the pool that contains the compute node.
     * @param {String} nodeId The id of the compute node whose files you want to list.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause.
     * @param {Boolean} [recursive] Whether to list children of a directory.
     * @param {Number} [maxresults] The maximum number of items to return in the response.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/FilesApi~fileListFromComputeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeFileListResult}
     */
    fileListFromComputeNode(poolId, nodeId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling fileListFromComputeNode");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling fileListFromComputeNode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileListFromComputeNode");
      }

      let pathParams = {
        'poolId': poolId,
        'nodeId': nodeId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'recursive': opts['recursive'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeFileListResult;
      return this.apiClient.callApi(
        '/pools/{poolId}/nodes/{nodeId}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileListFromTask operation.
     * @callback module:api/FilesApi~fileListFromTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeFileListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the files in a task's directory on its compute node.
     * @param {String} jobId The id of the job that contains the task.
     * @param {String} taskId The id of the task whose files you want to list.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause.
     * @param {Boolean} [recursive] Whether to list children of a directory.
     * @param {Number} [maxresults] The maximum number of items to return in the response.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Whether the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/FilesApi~fileListFromTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeFileListResult}
     */
    fileListFromTask(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling fileListFromTask");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling fileListFromTask");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling fileListFromTask");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'recursive': opts['recursive'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeFileListResult;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
