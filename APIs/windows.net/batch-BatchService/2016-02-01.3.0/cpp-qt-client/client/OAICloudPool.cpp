/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudPool::OAICloudPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudPool::OAICloudPool() {
    this->initializeModel();
}

OAICloudPool::~OAICloudPool() {}

void OAICloudPool::initializeModel() {

    m_allocation_state_isSet = false;
    m_allocation_state_isValid = false;

    m_allocation_state_transition_time_isSet = false;
    m_allocation_state_transition_time_isValid = false;

    m_application_package_references_isSet = false;
    m_application_package_references_isValid = false;

    m_auto_scale_evaluation_interval_isSet = false;
    m_auto_scale_evaluation_interval_isValid = false;

    m_auto_scale_formula_isSet = false;
    m_auto_scale_formula_isValid = false;

    m_auto_scale_run_isSet = false;
    m_auto_scale_run_isValid = false;

    m_certificate_references_isSet = false;
    m_certificate_references_isValid = false;

    m_cloud_service_configuration_isSet = false;
    m_cloud_service_configuration_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_current_dedicated_isSet = false;
    m_current_dedicated_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_enable_auto_scale_isSet = false;
    m_enable_auto_scale_isValid = false;

    m_enable_inter_node_communication_isSet = false;
    m_enable_inter_node_communication_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_max_tasks_per_node_isSet = false;
    m_max_tasks_per_node_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_resize_error_isSet = false;
    m_resize_error_isValid = false;

    m_resize_timeout_isSet = false;
    m_resize_timeout_isValid = false;

    m_start_task_isSet = false;
    m_start_task_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_transition_time_isSet = false;
    m_state_transition_time_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_target_dedicated_isSet = false;
    m_target_dedicated_isValid = false;

    m_task_scheduling_policy_isSet = false;
    m_task_scheduling_policy_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_virtual_machine_configuration_isSet = false;
    m_virtual_machine_configuration_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAICloudPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudPool::fromJsonObject(QJsonObject json) {

    m_allocation_state_isValid = ::OpenAPI::fromJsonValue(m_allocation_state, json[QString("allocationState")]);
    m_allocation_state_isSet = !json[QString("allocationState")].isNull() && m_allocation_state_isValid;

    m_allocation_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_allocation_state_transition_time, json[QString("allocationStateTransitionTime")]);
    m_allocation_state_transition_time_isSet = !json[QString("allocationStateTransitionTime")].isNull() && m_allocation_state_transition_time_isValid;

    m_application_package_references_isValid = ::OpenAPI::fromJsonValue(m_application_package_references, json[QString("applicationPackageReferences")]);
    m_application_package_references_isSet = !json[QString("applicationPackageReferences")].isNull() && m_application_package_references_isValid;

    m_auto_scale_evaluation_interval_isValid = ::OpenAPI::fromJsonValue(m_auto_scale_evaluation_interval, json[QString("autoScaleEvaluationInterval")]);
    m_auto_scale_evaluation_interval_isSet = !json[QString("autoScaleEvaluationInterval")].isNull() && m_auto_scale_evaluation_interval_isValid;

    m_auto_scale_formula_isValid = ::OpenAPI::fromJsonValue(m_auto_scale_formula, json[QString("autoScaleFormula")]);
    m_auto_scale_formula_isSet = !json[QString("autoScaleFormula")].isNull() && m_auto_scale_formula_isValid;

    m_auto_scale_run_isValid = ::OpenAPI::fromJsonValue(m_auto_scale_run, json[QString("autoScaleRun")]);
    m_auto_scale_run_isSet = !json[QString("autoScaleRun")].isNull() && m_auto_scale_run_isValid;

    m_certificate_references_isValid = ::OpenAPI::fromJsonValue(m_certificate_references, json[QString("certificateReferences")]);
    m_certificate_references_isSet = !json[QString("certificateReferences")].isNull() && m_certificate_references_isValid;

    m_cloud_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_cloud_service_configuration, json[QString("cloudServiceConfiguration")]);
    m_cloud_service_configuration_isSet = !json[QString("cloudServiceConfiguration")].isNull() && m_cloud_service_configuration_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_current_dedicated_isValid = ::OpenAPI::fromJsonValue(m_current_dedicated, json[QString("currentDedicated")]);
    m_current_dedicated_isSet = !json[QString("currentDedicated")].isNull() && m_current_dedicated_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("eTag")]);
    m_e_tag_isSet = !json[QString("eTag")].isNull() && m_e_tag_isValid;

    m_enable_auto_scale_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_scale, json[QString("enableAutoScale")]);
    m_enable_auto_scale_isSet = !json[QString("enableAutoScale")].isNull() && m_enable_auto_scale_isValid;

    m_enable_inter_node_communication_isValid = ::OpenAPI::fromJsonValue(m_enable_inter_node_communication, json[QString("enableInterNodeCommunication")]);
    m_enable_inter_node_communication_isSet = !json[QString("enableInterNodeCommunication")].isNull() && m_enable_inter_node_communication_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_max_tasks_per_node_isValid = ::OpenAPI::fromJsonValue(m_max_tasks_per_node, json[QString("maxTasksPerNode")]);
    m_max_tasks_per_node_isSet = !json[QString("maxTasksPerNode")].isNull() && m_max_tasks_per_node_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_resize_error_isValid = ::OpenAPI::fromJsonValue(m_resize_error, json[QString("resizeError")]);
    m_resize_error_isSet = !json[QString("resizeError")].isNull() && m_resize_error_isValid;

    m_resize_timeout_isValid = ::OpenAPI::fromJsonValue(m_resize_timeout, json[QString("resizeTimeout")]);
    m_resize_timeout_isSet = !json[QString("resizeTimeout")].isNull() && m_resize_timeout_isValid;

    m_start_task_isValid = ::OpenAPI::fromJsonValue(m_start_task, json[QString("startTask")]);
    m_start_task_isSet = !json[QString("startTask")].isNull() && m_start_task_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_state_transition_time, json[QString("stateTransitionTime")]);
    m_state_transition_time_isSet = !json[QString("stateTransitionTime")].isNull() && m_state_transition_time_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_target_dedicated_isValid = ::OpenAPI::fromJsonValue(m_target_dedicated, json[QString("targetDedicated")]);
    m_target_dedicated_isSet = !json[QString("targetDedicated")].isNull() && m_target_dedicated_isValid;

    m_task_scheduling_policy_isValid = ::OpenAPI::fromJsonValue(m_task_scheduling_policy, json[QString("taskSchedulingPolicy")]);
    m_task_scheduling_policy_isSet = !json[QString("taskSchedulingPolicy")].isNull() && m_task_scheduling_policy_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_virtual_machine_configuration_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_configuration, json[QString("virtualMachineConfiguration")]);
    m_virtual_machine_configuration_isSet = !json[QString("virtualMachineConfiguration")].isNull() && m_virtual_machine_configuration_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAICloudPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudPool::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_state_isSet) {
        obj.insert(QString("allocationState"), ::OpenAPI::toJsonValue(m_allocation_state));
    }
    if (m_allocation_state_transition_time_isSet) {
        obj.insert(QString("allocationStateTransitionTime"), ::OpenAPI::toJsonValue(m_allocation_state_transition_time));
    }
    if (m_application_package_references.size() > 0) {
        obj.insert(QString("applicationPackageReferences"), ::OpenAPI::toJsonValue(m_application_package_references));
    }
    if (m_auto_scale_evaluation_interval_isSet) {
        obj.insert(QString("autoScaleEvaluationInterval"), ::OpenAPI::toJsonValue(m_auto_scale_evaluation_interval));
    }
    if (m_auto_scale_formula_isSet) {
        obj.insert(QString("autoScaleFormula"), ::OpenAPI::toJsonValue(m_auto_scale_formula));
    }
    if (m_auto_scale_run.isSet()) {
        obj.insert(QString("autoScaleRun"), ::OpenAPI::toJsonValue(m_auto_scale_run));
    }
    if (m_certificate_references.size() > 0) {
        obj.insert(QString("certificateReferences"), ::OpenAPI::toJsonValue(m_certificate_references));
    }
    if (m_cloud_service_configuration.isSet()) {
        obj.insert(QString("cloudServiceConfiguration"), ::OpenAPI::toJsonValue(m_cloud_service_configuration));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_current_dedicated_isSet) {
        obj.insert(QString("currentDedicated"), ::OpenAPI::toJsonValue(m_current_dedicated));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("eTag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_enable_auto_scale_isSet) {
        obj.insert(QString("enableAutoScale"), ::OpenAPI::toJsonValue(m_enable_auto_scale));
    }
    if (m_enable_inter_node_communication_isSet) {
        obj.insert(QString("enableInterNodeCommunication"), ::OpenAPI::toJsonValue(m_enable_inter_node_communication));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_max_tasks_per_node_isSet) {
        obj.insert(QString("maxTasksPerNode"), ::OpenAPI::toJsonValue(m_max_tasks_per_node));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_resize_error.isSet()) {
        obj.insert(QString("resizeError"), ::OpenAPI::toJsonValue(m_resize_error));
    }
    if (m_resize_timeout_isSet) {
        obj.insert(QString("resizeTimeout"), ::OpenAPI::toJsonValue(m_resize_timeout));
    }
    if (m_start_task.isSet()) {
        obj.insert(QString("startTask"), ::OpenAPI::toJsonValue(m_start_task));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_transition_time_isSet) {
        obj.insert(QString("stateTransitionTime"), ::OpenAPI::toJsonValue(m_state_transition_time));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_target_dedicated_isSet) {
        obj.insert(QString("targetDedicated"), ::OpenAPI::toJsonValue(m_target_dedicated));
    }
    if (m_task_scheduling_policy.isSet()) {
        obj.insert(QString("taskSchedulingPolicy"), ::OpenAPI::toJsonValue(m_task_scheduling_policy));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_virtual_machine_configuration.isSet()) {
        obj.insert(QString("virtualMachineConfiguration"), ::OpenAPI::toJsonValue(m_virtual_machine_configuration));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

QString OAICloudPool::getAllocationState() const {
    return m_allocation_state;
}
void OAICloudPool::setAllocationState(const QString &allocation_state) {
    m_allocation_state = allocation_state;
    m_allocation_state_isSet = true;
}

bool OAICloudPool::is_allocation_state_Set() const{
    return m_allocation_state_isSet;
}

bool OAICloudPool::is_allocation_state_Valid() const{
    return m_allocation_state_isValid;
}

QDateTime OAICloudPool::getAllocationStateTransitionTime() const {
    return m_allocation_state_transition_time;
}
void OAICloudPool::setAllocationStateTransitionTime(const QDateTime &allocation_state_transition_time) {
    m_allocation_state_transition_time = allocation_state_transition_time;
    m_allocation_state_transition_time_isSet = true;
}

bool OAICloudPool::is_allocation_state_transition_time_Set() const{
    return m_allocation_state_transition_time_isSet;
}

bool OAICloudPool::is_allocation_state_transition_time_Valid() const{
    return m_allocation_state_transition_time_isValid;
}

QList<OAIApplicationPackageReference> OAICloudPool::getApplicationPackageReferences() const {
    return m_application_package_references;
}
void OAICloudPool::setApplicationPackageReferences(const QList<OAIApplicationPackageReference> &application_package_references) {
    m_application_package_references = application_package_references;
    m_application_package_references_isSet = true;
}

bool OAICloudPool::is_application_package_references_Set() const{
    return m_application_package_references_isSet;
}

bool OAICloudPool::is_application_package_references_Valid() const{
    return m_application_package_references_isValid;
}

QString OAICloudPool::getAutoScaleEvaluationInterval() const {
    return m_auto_scale_evaluation_interval;
}
void OAICloudPool::setAutoScaleEvaluationInterval(const QString &auto_scale_evaluation_interval) {
    m_auto_scale_evaluation_interval = auto_scale_evaluation_interval;
    m_auto_scale_evaluation_interval_isSet = true;
}

bool OAICloudPool::is_auto_scale_evaluation_interval_Set() const{
    return m_auto_scale_evaluation_interval_isSet;
}

bool OAICloudPool::is_auto_scale_evaluation_interval_Valid() const{
    return m_auto_scale_evaluation_interval_isValid;
}

QString OAICloudPool::getAutoScaleFormula() const {
    return m_auto_scale_formula;
}
void OAICloudPool::setAutoScaleFormula(const QString &auto_scale_formula) {
    m_auto_scale_formula = auto_scale_formula;
    m_auto_scale_formula_isSet = true;
}

bool OAICloudPool::is_auto_scale_formula_Set() const{
    return m_auto_scale_formula_isSet;
}

bool OAICloudPool::is_auto_scale_formula_Valid() const{
    return m_auto_scale_formula_isValid;
}

OAIAutoScaleRun OAICloudPool::getAutoScaleRun() const {
    return m_auto_scale_run;
}
void OAICloudPool::setAutoScaleRun(const OAIAutoScaleRun &auto_scale_run) {
    m_auto_scale_run = auto_scale_run;
    m_auto_scale_run_isSet = true;
}

bool OAICloudPool::is_auto_scale_run_Set() const{
    return m_auto_scale_run_isSet;
}

bool OAICloudPool::is_auto_scale_run_Valid() const{
    return m_auto_scale_run_isValid;
}

QList<OAICertificateReference> OAICloudPool::getCertificateReferences() const {
    return m_certificate_references;
}
void OAICloudPool::setCertificateReferences(const QList<OAICertificateReference> &certificate_references) {
    m_certificate_references = certificate_references;
    m_certificate_references_isSet = true;
}

bool OAICloudPool::is_certificate_references_Set() const{
    return m_certificate_references_isSet;
}

bool OAICloudPool::is_certificate_references_Valid() const{
    return m_certificate_references_isValid;
}

OAICloudServiceConfiguration OAICloudPool::getCloudServiceConfiguration() const {
    return m_cloud_service_configuration;
}
void OAICloudPool::setCloudServiceConfiguration(const OAICloudServiceConfiguration &cloud_service_configuration) {
    m_cloud_service_configuration = cloud_service_configuration;
    m_cloud_service_configuration_isSet = true;
}

bool OAICloudPool::is_cloud_service_configuration_Set() const{
    return m_cloud_service_configuration_isSet;
}

bool OAICloudPool::is_cloud_service_configuration_Valid() const{
    return m_cloud_service_configuration_isValid;
}

QDateTime OAICloudPool::getCreationTime() const {
    return m_creation_time;
}
void OAICloudPool::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICloudPool::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICloudPool::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

qint32 OAICloudPool::getCurrentDedicated() const {
    return m_current_dedicated;
}
void OAICloudPool::setCurrentDedicated(const qint32 &current_dedicated) {
    m_current_dedicated = current_dedicated;
    m_current_dedicated_isSet = true;
}

bool OAICloudPool::is_current_dedicated_Set() const{
    return m_current_dedicated_isSet;
}

bool OAICloudPool::is_current_dedicated_Valid() const{
    return m_current_dedicated_isValid;
}

QString OAICloudPool::getDisplayName() const {
    return m_display_name;
}
void OAICloudPool::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICloudPool::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICloudPool::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICloudPool::getETag() const {
    return m_e_tag;
}
void OAICloudPool::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAICloudPool::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAICloudPool::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

bool OAICloudPool::isEnableAutoScale() const {
    return m_enable_auto_scale;
}
void OAICloudPool::setEnableAutoScale(const bool &enable_auto_scale) {
    m_enable_auto_scale = enable_auto_scale;
    m_enable_auto_scale_isSet = true;
}

bool OAICloudPool::is_enable_auto_scale_Set() const{
    return m_enable_auto_scale_isSet;
}

bool OAICloudPool::is_enable_auto_scale_Valid() const{
    return m_enable_auto_scale_isValid;
}

bool OAICloudPool::isEnableInterNodeCommunication() const {
    return m_enable_inter_node_communication;
}
void OAICloudPool::setEnableInterNodeCommunication(const bool &enable_inter_node_communication) {
    m_enable_inter_node_communication = enable_inter_node_communication;
    m_enable_inter_node_communication_isSet = true;
}

bool OAICloudPool::is_enable_inter_node_communication_Set() const{
    return m_enable_inter_node_communication_isSet;
}

bool OAICloudPool::is_enable_inter_node_communication_Valid() const{
    return m_enable_inter_node_communication_isValid;
}

QString OAICloudPool::getId() const {
    return m_id;
}
void OAICloudPool::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICloudPool::is_id_Set() const{
    return m_id_isSet;
}

bool OAICloudPool::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICloudPool::getLastModified() const {
    return m_last_modified;
}
void OAICloudPool::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAICloudPool::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAICloudPool::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

qint32 OAICloudPool::getMaxTasksPerNode() const {
    return m_max_tasks_per_node;
}
void OAICloudPool::setMaxTasksPerNode(const qint32 &max_tasks_per_node) {
    m_max_tasks_per_node = max_tasks_per_node;
    m_max_tasks_per_node_isSet = true;
}

bool OAICloudPool::is_max_tasks_per_node_Set() const{
    return m_max_tasks_per_node_isSet;
}

bool OAICloudPool::is_max_tasks_per_node_Valid() const{
    return m_max_tasks_per_node_isValid;
}

QList<OAIMetadataItem> OAICloudPool::getMetadata() const {
    return m_metadata;
}
void OAICloudPool::setMetadata(const QList<OAIMetadataItem> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICloudPool::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICloudPool::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIResizeError OAICloudPool::getResizeError() const {
    return m_resize_error;
}
void OAICloudPool::setResizeError(const OAIResizeError &resize_error) {
    m_resize_error = resize_error;
    m_resize_error_isSet = true;
}

bool OAICloudPool::is_resize_error_Set() const{
    return m_resize_error_isSet;
}

bool OAICloudPool::is_resize_error_Valid() const{
    return m_resize_error_isValid;
}

QString OAICloudPool::getResizeTimeout() const {
    return m_resize_timeout;
}
void OAICloudPool::setResizeTimeout(const QString &resize_timeout) {
    m_resize_timeout = resize_timeout;
    m_resize_timeout_isSet = true;
}

bool OAICloudPool::is_resize_timeout_Set() const{
    return m_resize_timeout_isSet;
}

bool OAICloudPool::is_resize_timeout_Valid() const{
    return m_resize_timeout_isValid;
}

OAIStartTask OAICloudPool::getStartTask() const {
    return m_start_task;
}
void OAICloudPool::setStartTask(const OAIStartTask &start_task) {
    m_start_task = start_task;
    m_start_task_isSet = true;
}

bool OAICloudPool::is_start_task_Set() const{
    return m_start_task_isSet;
}

bool OAICloudPool::is_start_task_Valid() const{
    return m_start_task_isValid;
}

QString OAICloudPool::getState() const {
    return m_state;
}
void OAICloudPool::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICloudPool::is_state_Set() const{
    return m_state_isSet;
}

bool OAICloudPool::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICloudPool::getStateTransitionTime() const {
    return m_state_transition_time;
}
void OAICloudPool::setStateTransitionTime(const QDateTime &state_transition_time) {
    m_state_transition_time = state_transition_time;
    m_state_transition_time_isSet = true;
}

bool OAICloudPool::is_state_transition_time_Set() const{
    return m_state_transition_time_isSet;
}

bool OAICloudPool::is_state_transition_time_Valid() const{
    return m_state_transition_time_isValid;
}

OAIPoolStatistics OAICloudPool::getStats() const {
    return m_stats;
}
void OAICloudPool::setStats(const OAIPoolStatistics &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAICloudPool::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAICloudPool::is_stats_Valid() const{
    return m_stats_isValid;
}

qint32 OAICloudPool::getTargetDedicated() const {
    return m_target_dedicated;
}
void OAICloudPool::setTargetDedicated(const qint32 &target_dedicated) {
    m_target_dedicated = target_dedicated;
    m_target_dedicated_isSet = true;
}

bool OAICloudPool::is_target_dedicated_Set() const{
    return m_target_dedicated_isSet;
}

bool OAICloudPool::is_target_dedicated_Valid() const{
    return m_target_dedicated_isValid;
}

OAITaskSchedulingPolicy OAICloudPool::getTaskSchedulingPolicy() const {
    return m_task_scheduling_policy;
}
void OAICloudPool::setTaskSchedulingPolicy(const OAITaskSchedulingPolicy &task_scheduling_policy) {
    m_task_scheduling_policy = task_scheduling_policy;
    m_task_scheduling_policy_isSet = true;
}

bool OAICloudPool::is_task_scheduling_policy_Set() const{
    return m_task_scheduling_policy_isSet;
}

bool OAICloudPool::is_task_scheduling_policy_Valid() const{
    return m_task_scheduling_policy_isValid;
}

QString OAICloudPool::getUrl() const {
    return m_url;
}
void OAICloudPool::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICloudPool::is_url_Set() const{
    return m_url_isSet;
}

bool OAICloudPool::is_url_Valid() const{
    return m_url_isValid;
}

OAIVirtualMachineConfiguration OAICloudPool::getVirtualMachineConfiguration() const {
    return m_virtual_machine_configuration;
}
void OAICloudPool::setVirtualMachineConfiguration(const OAIVirtualMachineConfiguration &virtual_machine_configuration) {
    m_virtual_machine_configuration = virtual_machine_configuration;
    m_virtual_machine_configuration_isSet = true;
}

bool OAICloudPool::is_virtual_machine_configuration_Set() const{
    return m_virtual_machine_configuration_isSet;
}

bool OAICloudPool::is_virtual_machine_configuration_Valid() const{
    return m_virtual_machine_configuration_isValid;
}

QString OAICloudPool::getVmSize() const {
    return m_vm_size;
}
void OAICloudPool::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAICloudPool::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAICloudPool::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAICloudPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_package_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scale_evaluation_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scale_formula_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scale_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_dedicated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_auto_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_inter_node_communication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_tasks_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_dedicated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_scheduling_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
