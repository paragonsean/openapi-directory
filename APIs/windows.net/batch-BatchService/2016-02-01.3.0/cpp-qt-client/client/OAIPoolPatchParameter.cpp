/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoolPatchParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoolPatchParameter::OAIPoolPatchParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoolPatchParameter::OAIPoolPatchParameter() {
    this->initializeModel();
}

OAIPoolPatchParameter::~OAIPoolPatchParameter() {}

void OAIPoolPatchParameter::initializeModel() {

    m_application_package_references_isSet = false;
    m_application_package_references_isValid = false;

    m_certificate_references_isSet = false;
    m_certificate_references_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_start_task_isSet = false;
    m_start_task_isValid = false;
}

void OAIPoolPatchParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoolPatchParameter::fromJsonObject(QJsonObject json) {

    m_application_package_references_isValid = ::OpenAPI::fromJsonValue(m_application_package_references, json[QString("applicationPackageReferences")]);
    m_application_package_references_isSet = !json[QString("applicationPackageReferences")].isNull() && m_application_package_references_isValid;

    m_certificate_references_isValid = ::OpenAPI::fromJsonValue(m_certificate_references, json[QString("certificateReferences")]);
    m_certificate_references_isSet = !json[QString("certificateReferences")].isNull() && m_certificate_references_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_start_task_isValid = ::OpenAPI::fromJsonValue(m_start_task, json[QString("startTask")]);
    m_start_task_isSet = !json[QString("startTask")].isNull() && m_start_task_isValid;
}

QString OAIPoolPatchParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoolPatchParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_application_package_references.size() > 0) {
        obj.insert(QString("applicationPackageReferences"), ::OpenAPI::toJsonValue(m_application_package_references));
    }
    if (m_certificate_references.size() > 0) {
        obj.insert(QString("certificateReferences"), ::OpenAPI::toJsonValue(m_certificate_references));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_start_task.isSet()) {
        obj.insert(QString("startTask"), ::OpenAPI::toJsonValue(m_start_task));
    }
    return obj;
}

QList<OAIApplicationPackageReference> OAIPoolPatchParameter::getApplicationPackageReferences() const {
    return m_application_package_references;
}
void OAIPoolPatchParameter::setApplicationPackageReferences(const QList<OAIApplicationPackageReference> &application_package_references) {
    m_application_package_references = application_package_references;
    m_application_package_references_isSet = true;
}

bool OAIPoolPatchParameter::is_application_package_references_Set() const{
    return m_application_package_references_isSet;
}

bool OAIPoolPatchParameter::is_application_package_references_Valid() const{
    return m_application_package_references_isValid;
}

QList<OAICertificateReference> OAIPoolPatchParameter::getCertificateReferences() const {
    return m_certificate_references;
}
void OAIPoolPatchParameter::setCertificateReferences(const QList<OAICertificateReference> &certificate_references) {
    m_certificate_references = certificate_references;
    m_certificate_references_isSet = true;
}

bool OAIPoolPatchParameter::is_certificate_references_Set() const{
    return m_certificate_references_isSet;
}

bool OAIPoolPatchParameter::is_certificate_references_Valid() const{
    return m_certificate_references_isValid;
}

QList<OAIMetadataItem> OAIPoolPatchParameter::getMetadata() const {
    return m_metadata;
}
void OAIPoolPatchParameter::setMetadata(const QList<OAIMetadataItem> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPoolPatchParameter::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPoolPatchParameter::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIStartTask OAIPoolPatchParameter::getStartTask() const {
    return m_start_task;
}
void OAIPoolPatchParameter::setStartTask(const OAIStartTask &start_task) {
    m_start_task = start_task;
    m_start_task_isSet = true;
}

bool OAIPoolPatchParameter::is_start_task_Set() const{
    return m_start_task_isSet;
}

bool OAIPoolPatchParameter::is_start_task_Valid() const{
    return m_start_task_isValid;
}

bool OAIPoolPatchParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_package_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_task.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoolPatchParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
