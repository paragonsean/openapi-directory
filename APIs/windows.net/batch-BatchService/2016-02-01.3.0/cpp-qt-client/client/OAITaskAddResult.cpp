/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskAddResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskAddResult::OAITaskAddResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskAddResult::OAITaskAddResult() {
    this->initializeModel();
}

OAITaskAddResult::~OAITaskAddResult() {}

void OAITaskAddResult::initializeModel() {

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAITaskAddResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskAddResult::fromJsonObject(QJsonObject json) {

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("eTag")]);
    m_e_tag_isSet = !json[QString("eTag")].isNull() && m_e_tag_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;
}

QString OAITaskAddResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskAddResult::asJsonObject() const {
    QJsonObject obj;
    if (m_e_tag_isSet) {
        obj.insert(QString("eTag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

QString OAITaskAddResult::getETag() const {
    return m_e_tag;
}
void OAITaskAddResult::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAITaskAddResult::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAITaskAddResult::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

OAIBatchError OAITaskAddResult::getError() const {
    return m_error;
}
void OAITaskAddResult::setError(const OAIBatchError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAITaskAddResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAITaskAddResult::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAITaskAddResult::getLastModified() const {
    return m_last_modified;
}
void OAITaskAddResult::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAITaskAddResult::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAITaskAddResult::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAITaskAddResult::getLocation() const {
    return m_location;
}
void OAITaskAddResult::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITaskAddResult::is_location_Set() const{
    return m_location_isSet;
}

bool OAITaskAddResult::is_location_Valid() const{
    return m_location_isValid;
}

QString OAITaskAddResult::getStatus() const {
    return m_status;
}
void OAITaskAddResult::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskAddResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskAddResult::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITaskAddResult::getTaskId() const {
    return m_task_id;
}
void OAITaskAddResult::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAITaskAddResult::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAITaskAddResult::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAITaskAddResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskAddResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_task_id_isValid && true;
}

} // namespace OpenAPI
