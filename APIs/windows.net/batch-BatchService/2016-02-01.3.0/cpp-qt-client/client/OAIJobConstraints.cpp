/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobConstraints::OAIJobConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobConstraints::OAIJobConstraints() {
    this->initializeModel();
}

OAIJobConstraints::~OAIJobConstraints() {}

void OAIJobConstraints::initializeModel() {

    m_max_task_retry_count_isSet = false;
    m_max_task_retry_count_isValid = false;

    m_max_wall_clock_time_isSet = false;
    m_max_wall_clock_time_isValid = false;
}

void OAIJobConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobConstraints::fromJsonObject(QJsonObject json) {

    m_max_task_retry_count_isValid = ::OpenAPI::fromJsonValue(m_max_task_retry_count, json[QString("maxTaskRetryCount")]);
    m_max_task_retry_count_isSet = !json[QString("maxTaskRetryCount")].isNull() && m_max_task_retry_count_isValid;

    m_max_wall_clock_time_isValid = ::OpenAPI::fromJsonValue(m_max_wall_clock_time, json[QString("maxWallClockTime")]);
    m_max_wall_clock_time_isSet = !json[QString("maxWallClockTime")].isNull() && m_max_wall_clock_time_isValid;
}

QString OAIJobConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_max_task_retry_count_isSet) {
        obj.insert(QString("maxTaskRetryCount"), ::OpenAPI::toJsonValue(m_max_task_retry_count));
    }
    if (m_max_wall_clock_time_isSet) {
        obj.insert(QString("maxWallClockTime"), ::OpenAPI::toJsonValue(m_max_wall_clock_time));
    }
    return obj;
}

qint32 OAIJobConstraints::getMaxTaskRetryCount() const {
    return m_max_task_retry_count;
}
void OAIJobConstraints::setMaxTaskRetryCount(const qint32 &max_task_retry_count) {
    m_max_task_retry_count = max_task_retry_count;
    m_max_task_retry_count_isSet = true;
}

bool OAIJobConstraints::is_max_task_retry_count_Set() const{
    return m_max_task_retry_count_isSet;
}

bool OAIJobConstraints::is_max_task_retry_count_Valid() const{
    return m_max_task_retry_count_isValid;
}

QString OAIJobConstraints::getMaxWallClockTime() const {
    return m_max_wall_clock_time;
}
void OAIJobConstraints::setMaxWallClockTime(const QString &max_wall_clock_time) {
    m_max_wall_clock_time = max_wall_clock_time;
    m_max_wall_clock_time_isSet = true;
}

bool OAIJobConstraints::is_max_wall_clock_time_Set() const{
    return m_max_wall_clock_time_isSet;
}

bool OAIJobConstraints::is_max_wall_clock_time_Valid() const{
    return m_max_wall_clock_time_isValid;
}

bool OAIJobConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_task_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_wall_clock_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
