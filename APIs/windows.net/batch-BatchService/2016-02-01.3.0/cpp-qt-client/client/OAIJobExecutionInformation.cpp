/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-02-01.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobExecutionInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobExecutionInformation::OAIJobExecutionInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobExecutionInformation::OAIJobExecutionInformation() {
    this->initializeModel();
}

OAIJobExecutionInformation::~OAIJobExecutionInformation() {}

void OAIJobExecutionInformation::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_pool_id_isSet = false;
    m_pool_id_isValid = false;

    m_scheduling_error_isSet = false;
    m_scheduling_error_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_terminate_reason_isSet = false;
    m_terminate_reason_isValid = false;
}

void OAIJobExecutionInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobExecutionInformation::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_pool_id_isValid = ::OpenAPI::fromJsonValue(m_pool_id, json[QString("poolId")]);
    m_pool_id_isSet = !json[QString("poolId")].isNull() && m_pool_id_isValid;

    m_scheduling_error_isValid = ::OpenAPI::fromJsonValue(m_scheduling_error, json[QString("schedulingError")]);
    m_scheduling_error_isSet = !json[QString("schedulingError")].isNull() && m_scheduling_error_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_terminate_reason_isValid = ::OpenAPI::fromJsonValue(m_terminate_reason, json[QString("terminateReason")]);
    m_terminate_reason_isSet = !json[QString("terminateReason")].isNull() && m_terminate_reason_isValid;
}

QString OAIJobExecutionInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobExecutionInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_pool_id_isSet) {
        obj.insert(QString("poolId"), ::OpenAPI::toJsonValue(m_pool_id));
    }
    if (m_scheduling_error.isSet()) {
        obj.insert(QString("schedulingError"), ::OpenAPI::toJsonValue(m_scheduling_error));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_terminate_reason_isSet) {
        obj.insert(QString("terminateReason"), ::OpenAPI::toJsonValue(m_terminate_reason));
    }
    return obj;
}

QDateTime OAIJobExecutionInformation::getEndTime() const {
    return m_end_time;
}
void OAIJobExecutionInformation::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobExecutionInformation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobExecutionInformation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIJobExecutionInformation::getPoolId() const {
    return m_pool_id;
}
void OAIJobExecutionInformation::setPoolId(const QString &pool_id) {
    m_pool_id = pool_id;
    m_pool_id_isSet = true;
}

bool OAIJobExecutionInformation::is_pool_id_Set() const{
    return m_pool_id_isSet;
}

bool OAIJobExecutionInformation::is_pool_id_Valid() const{
    return m_pool_id_isValid;
}

OAIJobSchedulingError OAIJobExecutionInformation::getSchedulingError() const {
    return m_scheduling_error;
}
void OAIJobExecutionInformation::setSchedulingError(const OAIJobSchedulingError &scheduling_error) {
    m_scheduling_error = scheduling_error;
    m_scheduling_error_isSet = true;
}

bool OAIJobExecutionInformation::is_scheduling_error_Set() const{
    return m_scheduling_error_isSet;
}

bool OAIJobExecutionInformation::is_scheduling_error_Valid() const{
    return m_scheduling_error_isValid;
}

QDateTime OAIJobExecutionInformation::getStartTime() const {
    return m_start_time;
}
void OAIJobExecutionInformation::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobExecutionInformation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobExecutionInformation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJobExecutionInformation::getTerminateReason() const {
    return m_terminate_reason;
}
void OAIJobExecutionInformation::setTerminateReason(const QString &terminate_reason) {
    m_terminate_reason = terminate_reason;
    m_terminate_reason_isSet = true;
}

bool OAIJobExecutionInformation::is_terminate_reason_Set() const{
    return m_terminate_reason_isSet;
}

bool OAIJobExecutionInformation::is_terminate_reason_Valid() const{
    return m_terminate_reason_isValid;
}

bool OAIJobExecutionInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminate_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobExecutionInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_time_isValid && true;
}

} // namespace OpenAPI
