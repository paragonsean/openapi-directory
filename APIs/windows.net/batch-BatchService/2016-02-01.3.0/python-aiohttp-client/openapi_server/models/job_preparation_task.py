# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_constraints import TaskConstraints
from openapi_server import util


class JobPreparationTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_line: str=None, constraints: TaskConstraints=None, environment_settings: List[EnvironmentSetting]=None, id: str=None, rerun_on_node_reboot_after_success: bool=None, resource_files: List[ResourceFile]=None, run_elevated: bool=None, wait_for_success: bool=None):
        """JobPreparationTask - a model defined in OpenAPI

        :param command_line: The command_line of this JobPreparationTask.
        :param constraints: The constraints of this JobPreparationTask.
        :param environment_settings: The environment_settings of this JobPreparationTask.
        :param id: The id of this JobPreparationTask.
        :param rerun_on_node_reboot_after_success: The rerun_on_node_reboot_after_success of this JobPreparationTask.
        :param resource_files: The resource_files of this JobPreparationTask.
        :param run_elevated: The run_elevated of this JobPreparationTask.
        :param wait_for_success: The wait_for_success of this JobPreparationTask.
        """
        self.openapi_types = {
            'command_line': str,
            'constraints': TaskConstraints,
            'environment_settings': List[EnvironmentSetting],
            'id': str,
            'rerun_on_node_reboot_after_success': bool,
            'resource_files': List[ResourceFile],
            'run_elevated': bool,
            'wait_for_success': bool
        }

        self.attribute_map = {
            'command_line': 'commandLine',
            'constraints': 'constraints',
            'environment_settings': 'environmentSettings',
            'id': 'id',
            'rerun_on_node_reboot_after_success': 'rerunOnNodeRebootAfterSuccess',
            'resource_files': 'resourceFiles',
            'run_elevated': 'runElevated',
            'wait_for_success': 'waitForSuccess'
        }

        self._command_line = command_line
        self._constraints = constraints
        self._environment_settings = environment_settings
        self._id = id
        self._rerun_on_node_reboot_after_success = rerun_on_node_reboot_after_success
        self._resource_files = resource_files
        self._run_elevated = run_elevated
        self._wait_for_success = wait_for_success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobPreparationTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobPreparationTask of this JobPreparationTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_line(self):
        """Gets the command_line of this JobPreparationTask.

        The command line of the Job Preparation task.

        :return: The command_line of this JobPreparationTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this JobPreparationTask.

        The command line of the Job Preparation task.

        :param command_line: The command_line of this JobPreparationTask.
        :type command_line: str
        """

        self._command_line = command_line

    @property
    def constraints(self):
        """Gets the constraints of this JobPreparationTask.


        :return: The constraints of this JobPreparationTask.
        :rtype: TaskConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this JobPreparationTask.


        :param constraints: The constraints of this JobPreparationTask.
        :type constraints: TaskConstraints
        """

        self._constraints = constraints

    @property
    def environment_settings(self):
        """Gets the environment_settings of this JobPreparationTask.

        A list of environment variable settings for the Job Preparation task.

        :return: The environment_settings of this JobPreparationTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this JobPreparationTask.

        A list of environment variable settings for the Job Preparation task.

        :param environment_settings: The environment_settings of this JobPreparationTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def id(self):
        """Gets the id of this JobPreparationTask.

        A string that uniquely identifies the job preparation task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.

        :return: The id of this JobPreparationTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobPreparationTask.

        A string that uniquely identifies the job preparation task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.

        :param id: The id of this JobPreparationTask.
        :type id: str
        """

        self._id = id

    @property
    def rerun_on_node_reboot_after_success(self):
        """Gets the rerun_on_node_reboot_after_success of this JobPreparationTask.

        Whether the Batch service should rerun the Job Preparation task after a compute node reboots. Note that the Job Preparation task should still be written to be idempotent because it can be rerun if the compute node is rebooted while Job Preparation task is still running. The default value is true.

        :return: The rerun_on_node_reboot_after_success of this JobPreparationTask.
        :rtype: bool
        """
        return self._rerun_on_node_reboot_after_success

    @rerun_on_node_reboot_after_success.setter
    def rerun_on_node_reboot_after_success(self, rerun_on_node_reboot_after_success):
        """Sets the rerun_on_node_reboot_after_success of this JobPreparationTask.

        Whether the Batch service should rerun the Job Preparation task after a compute node reboots. Note that the Job Preparation task should still be written to be idempotent because it can be rerun if the compute node is rebooted while Job Preparation task is still running. The default value is true.

        :param rerun_on_node_reboot_after_success: The rerun_on_node_reboot_after_success of this JobPreparationTask.
        :type rerun_on_node_reboot_after_success: bool
        """

        self._rerun_on_node_reboot_after_success = rerun_on_node_reboot_after_success

    @property
    def resource_files(self):
        """Gets the resource_files of this JobPreparationTask.

        A list of files that the Batch service will download to the compute node before running the command line.

        :return: The resource_files of this JobPreparationTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this JobPreparationTask.

        A list of files that the Batch service will download to the compute node before running the command line.

        :param resource_files: The resource_files of this JobPreparationTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def run_elevated(self):
        """Gets the run_elevated of this JobPreparationTask.

        Whether to run the Job Preparation task in elevated mode. The default value is false.

        :return: The run_elevated of this JobPreparationTask.
        :rtype: bool
        """
        return self._run_elevated

    @run_elevated.setter
    def run_elevated(self, run_elevated):
        """Sets the run_elevated of this JobPreparationTask.

        Whether to run the Job Preparation task in elevated mode. The default value is false.

        :param run_elevated: The run_elevated of this JobPreparationTask.
        :type run_elevated: bool
        """

        self._run_elevated = run_elevated

    @property
    def wait_for_success(self):
        """Gets the wait_for_success of this JobPreparationTask.

        Whether the Batch service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node.

        :return: The wait_for_success of this JobPreparationTask.
        :rtype: bool
        """
        return self._wait_for_success

    @wait_for_success.setter
    def wait_for_success(self, wait_for_success):
        """Sets the wait_for_success of this JobPreparationTask.

        Whether the Batch service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node.

        :param wait_for_success: The wait_for_success of this JobPreparationTask.
        :type wait_for_success: bool
        """

        self._wait_for_success = wait_for_success
