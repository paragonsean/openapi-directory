# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeUpdateUserParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry_time: datetime=None, password: str=None, ssh_public_key: str=None):
        """NodeUpdateUserParameter - a model defined in OpenAPI

        :param expiry_time: The expiry_time of this NodeUpdateUserParameter.
        :param password: The password of this NodeUpdateUserParameter.
        :param ssh_public_key: The ssh_public_key of this NodeUpdateUserParameter.
        """
        self.openapi_types = {
            'expiry_time': datetime,
            'password': str,
            'ssh_public_key': str
        }

        self.attribute_map = {
            'expiry_time': 'expiryTime',
            'password': 'password',
            'ssh_public_key': 'sshPublicKey'
        }

        self._expiry_time = expiry_time
        self._password = password
        self._ssh_public_key = ssh_public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeUpdateUserParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeUpdateUserParameter of this NodeUpdateUserParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry_time(self):
        """Gets the expiry_time of this NodeUpdateUserParameter.

        The time at which the account should expire. If omitted, the default is 1 day from the current time.

        :return: The expiry_time of this NodeUpdateUserParameter.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this NodeUpdateUserParameter.

        The time at which the account should expire. If omitted, the default is 1 day from the current time.

        :param expiry_time: The expiry_time of this NodeUpdateUserParameter.
        :type expiry_time: datetime
        """

        self._expiry_time = expiry_time

    @property
    def password(self):
        """Gets the password of this NodeUpdateUserParameter.

        The password of the account.

        :return: The password of this NodeUpdateUserParameter.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NodeUpdateUserParameter.

        The password of the account.

        :param password: The password of this NodeUpdateUserParameter.
        :type password: str
        """

        self._password = password

    @property
    def ssh_public_key(self):
        """Gets the ssh_public_key of this NodeUpdateUserParameter.

        The SSH public key that can be used for remote login to the compute node.

        :return: The ssh_public_key of this NodeUpdateUserParameter.
        :rtype: str
        """
        return self._ssh_public_key

    @ssh_public_key.setter
    def ssh_public_key(self, ssh_public_key):
        """Sets the ssh_public_key of this NodeUpdateUserParameter.

        The SSH public key that can be used for remote login to the compute node.

        :param ssh_public_key: The ssh_public_key of this NodeUpdateUserParameter.
        :type ssh_public_key: str
        """

        self._ssh_public_key = ssh_public_key
