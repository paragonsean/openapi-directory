# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dedicated_core_time: str=None, last_update_time: datetime=None, start_time: datetime=None):
        """UsageStatistics - a model defined in OpenAPI

        :param dedicated_core_time: The dedicated_core_time of this UsageStatistics.
        :param last_update_time: The last_update_time of this UsageStatistics.
        :param start_time: The start_time of this UsageStatistics.
        """
        self.openapi_types = {
            'dedicated_core_time': str,
            'last_update_time': datetime,
            'start_time': datetime
        }

        self.attribute_map = {
            'dedicated_core_time': 'dedicatedCoreTime',
            'last_update_time': 'lastUpdateTime',
            'start_time': 'startTime'
        }

        self._dedicated_core_time = dedicated_core_time
        self._last_update_time = last_update_time
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageStatistics of this UsageStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dedicated_core_time(self):
        """Gets the dedicated_core_time of this UsageStatistics.

        The aggregated wall-clock time of the dedicated compute node cores being part of the pool.

        :return: The dedicated_core_time of this UsageStatistics.
        :rtype: str
        """
        return self._dedicated_core_time

    @dedicated_core_time.setter
    def dedicated_core_time(self, dedicated_core_time):
        """Sets the dedicated_core_time of this UsageStatistics.

        The aggregated wall-clock time of the dedicated compute node cores being part of the pool.

        :param dedicated_core_time: The dedicated_core_time of this UsageStatistics.
        :type dedicated_core_time: str
        """
        if dedicated_core_time is None:
            raise ValueError("Invalid value for `dedicated_core_time`, must not be `None`")

        self._dedicated_core_time = dedicated_core_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this UsageStatistics.

        The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.

        :return: The last_update_time of this UsageStatistics.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this UsageStatistics.

        The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.

        :param last_update_time: The last_update_time of this UsageStatistics.
        :type last_update_time: datetime
        """
        if last_update_time is None:
            raise ValueError("Invalid value for `last_update_time`, must not be `None`")

        self._last_update_time = last_update_time

    @property
    def start_time(self):
        """Gets the start_time of this UsageStatistics.

        The start time of the time range covered by the statistics.

        :return: The start_time of this UsageStatistics.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this UsageStatistics.

        The start time of the time range covered by the statistics.

        :param start_time: The start_time of this UsageStatistics.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time
