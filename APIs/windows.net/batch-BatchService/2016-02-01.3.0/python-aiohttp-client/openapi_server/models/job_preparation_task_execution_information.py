# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_scheduling_error import TaskSchedulingError
from openapi_server import util


class JobPreparationTaskExecutionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, exit_code: int=None, last_retry_time: datetime=None, retry_count: int=None, scheduling_error: TaskSchedulingError=None, start_time: datetime=None, state: str=None, task_root_directory: str=None, task_root_directory_url: str=None):
        """JobPreparationTaskExecutionInformation - a model defined in OpenAPI

        :param end_time: The end_time of this JobPreparationTaskExecutionInformation.
        :param exit_code: The exit_code of this JobPreparationTaskExecutionInformation.
        :param last_retry_time: The last_retry_time of this JobPreparationTaskExecutionInformation.
        :param retry_count: The retry_count of this JobPreparationTaskExecutionInformation.
        :param scheduling_error: The scheduling_error of this JobPreparationTaskExecutionInformation.
        :param start_time: The start_time of this JobPreparationTaskExecutionInformation.
        :param state: The state of this JobPreparationTaskExecutionInformation.
        :param task_root_directory: The task_root_directory of this JobPreparationTaskExecutionInformation.
        :param task_root_directory_url: The task_root_directory_url of this JobPreparationTaskExecutionInformation.
        """
        self.openapi_types = {
            'end_time': datetime,
            'exit_code': int,
            'last_retry_time': datetime,
            'retry_count': int,
            'scheduling_error': TaskSchedulingError,
            'start_time': datetime,
            'state': str,
            'task_root_directory': str,
            'task_root_directory_url': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'exit_code': 'exitCode',
            'last_retry_time': 'lastRetryTime',
            'retry_count': 'retryCount',
            'scheduling_error': 'schedulingError',
            'start_time': 'startTime',
            'state': 'state',
            'task_root_directory': 'taskRootDirectory',
            'task_root_directory_url': 'taskRootDirectoryUrl'
        }

        self._end_time = end_time
        self._exit_code = exit_code
        self._last_retry_time = last_retry_time
        self._retry_count = retry_count
        self._scheduling_error = scheduling_error
        self._start_time = start_time
        self._state = state
        self._task_root_directory = task_root_directory
        self._task_root_directory_url = task_root_directory_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobPreparationTaskExecutionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobPreparationTaskExecutionInformation of this JobPreparationTaskExecutionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this JobPreparationTaskExecutionInformation.

        The time at which the Job Preparation task completed. This property is set only if the task is in the Completed state.

        :return: The end_time of this JobPreparationTaskExecutionInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobPreparationTaskExecutionInformation.

        The time at which the Job Preparation task completed. This property is set only if the task is in the Completed state.

        :param end_time: The end_time of this JobPreparationTaskExecutionInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def exit_code(self):
        """Gets the exit_code of this JobPreparationTaskExecutionInformation.

        The exit code of the Job Preparation task. This property is set only if the task is in the Completed state.

        :return: The exit_code of this JobPreparationTaskExecutionInformation.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this JobPreparationTaskExecutionInformation.

        The exit code of the Job Preparation task. This property is set only if the task is in the Completed state.

        :param exit_code: The exit_code of this JobPreparationTaskExecutionInformation.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def last_retry_time(self):
        """Gets the last_retry_time of this JobPreparationTaskExecutionInformation.

        The most recent time at which a retry of the Job Preparation task started running. This property is set only if the task was retried (i.e. retryCount is nonzero).

        :return: The last_retry_time of this JobPreparationTaskExecutionInformation.
        :rtype: datetime
        """
        return self._last_retry_time

    @last_retry_time.setter
    def last_retry_time(self, last_retry_time):
        """Sets the last_retry_time of this JobPreparationTaskExecutionInformation.

        The most recent time at which a retry of the Job Preparation task started running. This property is set only if the task was retried (i.e. retryCount is nonzero).

        :param last_retry_time: The last_retry_time of this JobPreparationTaskExecutionInformation.
        :type last_retry_time: datetime
        """

        self._last_retry_time = last_retry_time

    @property
    def retry_count(self):
        """Gets the retry_count of this JobPreparationTaskExecutionInformation.

        The number of times the task has been retried by the Batch service. Every time the task exits with a non-zero exit code, it is deemed a task failure. The Batch service will retry the task up to the limit specified by the constraints.

        :return: The retry_count of this JobPreparationTaskExecutionInformation.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this JobPreparationTaskExecutionInformation.

        The number of times the task has been retried by the Batch service. Every time the task exits with a non-zero exit code, it is deemed a task failure. The Batch service will retry the task up to the limit specified by the constraints.

        :param retry_count: The retry_count of this JobPreparationTaskExecutionInformation.
        :type retry_count: int
        """
        if retry_count is None:
            raise ValueError("Invalid value for `retry_count`, must not be `None`")

        self._retry_count = retry_count

    @property
    def scheduling_error(self):
        """Gets the scheduling_error of this JobPreparationTaskExecutionInformation.


        :return: The scheduling_error of this JobPreparationTaskExecutionInformation.
        :rtype: TaskSchedulingError
        """
        return self._scheduling_error

    @scheduling_error.setter
    def scheduling_error(self, scheduling_error):
        """Sets the scheduling_error of this JobPreparationTaskExecutionInformation.


        :param scheduling_error: The scheduling_error of this JobPreparationTaskExecutionInformation.
        :type scheduling_error: TaskSchedulingError
        """

        self._scheduling_error = scheduling_error

    @property
    def start_time(self):
        """Gets the start_time of this JobPreparationTaskExecutionInformation.

        The time at which the task started running. Note that every time the task is restarted, this value is updated.

        :return: The start_time of this JobPreparationTaskExecutionInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobPreparationTaskExecutionInformation.

        The time at which the task started running. Note that every time the task is restarted, this value is updated.

        :param start_time: The start_time of this JobPreparationTaskExecutionInformation.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this JobPreparationTaskExecutionInformation.

        The current state of the Job Preparation task.

        :return: The state of this JobPreparationTaskExecutionInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobPreparationTaskExecutionInformation.

        The current state of the Job Preparation task.

        :param state: The state of this JobPreparationTaskExecutionInformation.
        :type state: str
        """
        allowed_values = ["running", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def task_root_directory(self):
        """Gets the task_root_directory of this JobPreparationTaskExecutionInformation.

        The root directory of the Job Preparation task on the compute node. You can use this path to retrieve files created by the task, such as log files.

        :return: The task_root_directory of this JobPreparationTaskExecutionInformation.
        :rtype: str
        """
        return self._task_root_directory

    @task_root_directory.setter
    def task_root_directory(self, task_root_directory):
        """Sets the task_root_directory of this JobPreparationTaskExecutionInformation.

        The root directory of the Job Preparation task on the compute node. You can use this path to retrieve files created by the task, such as log files.

        :param task_root_directory: The task_root_directory of this JobPreparationTaskExecutionInformation.
        :type task_root_directory: str
        """

        self._task_root_directory = task_root_directory

    @property
    def task_root_directory_url(self):
        """Gets the task_root_directory_url of this JobPreparationTaskExecutionInformation.

        The URL to the root directory of the Job Preparation task on the compute node.

        :return: The task_root_directory_url of this JobPreparationTaskExecutionInformation.
        :rtype: str
        """
        return self._task_root_directory_url

    @task_root_directory_url.setter
    def task_root_directory_url(self, task_root_directory_url):
        """Sets the task_root_directory_url of this JobPreparationTaskExecutionInformation.

        The URL to the root directory of the Job Preparation task on the compute node.

        :param task_root_directory_url: The task_root_directory_url of this JobPreparationTaskExecutionInformation.
        :type task_root_directory_url: str
        """

        self._task_root_directory_url = task_root_directory_url
