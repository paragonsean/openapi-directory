# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_cpu_percentage: float=None, avg_disk_gi_b: float=None, avg_memory_gi_b: float=None, disk_read_gi_b: float=None, disk_read_i_ops: int=None, disk_write_gi_b: float=None, disk_write_i_ops: int=None, last_update_time: datetime=None, network_read_gi_b: float=None, network_write_gi_b: float=None, peak_disk_gi_b: float=None, peak_memory_gi_b: float=None, start_time: datetime=None):
        """ResourceStatistics - a model defined in OpenAPI

        :param avg_cpu_percentage: The avg_cpu_percentage of this ResourceStatistics.
        :param avg_disk_gi_b: The avg_disk_gi_b of this ResourceStatistics.
        :param avg_memory_gi_b: The avg_memory_gi_b of this ResourceStatistics.
        :param disk_read_gi_b: The disk_read_gi_b of this ResourceStatistics.
        :param disk_read_i_ops: The disk_read_i_ops of this ResourceStatistics.
        :param disk_write_gi_b: The disk_write_gi_b of this ResourceStatistics.
        :param disk_write_i_ops: The disk_write_i_ops of this ResourceStatistics.
        :param last_update_time: The last_update_time of this ResourceStatistics.
        :param network_read_gi_b: The network_read_gi_b of this ResourceStatistics.
        :param network_write_gi_b: The network_write_gi_b of this ResourceStatistics.
        :param peak_disk_gi_b: The peak_disk_gi_b of this ResourceStatistics.
        :param peak_memory_gi_b: The peak_memory_gi_b of this ResourceStatistics.
        :param start_time: The start_time of this ResourceStatistics.
        """
        self.openapi_types = {
            'avg_cpu_percentage': float,
            'avg_disk_gi_b': float,
            'avg_memory_gi_b': float,
            'disk_read_gi_b': float,
            'disk_read_i_ops': int,
            'disk_write_gi_b': float,
            'disk_write_i_ops': int,
            'last_update_time': datetime,
            'network_read_gi_b': float,
            'network_write_gi_b': float,
            'peak_disk_gi_b': float,
            'peak_memory_gi_b': float,
            'start_time': datetime
        }

        self.attribute_map = {
            'avg_cpu_percentage': 'avgCPUPercentage',
            'avg_disk_gi_b': 'avgDiskGiB',
            'avg_memory_gi_b': 'avgMemoryGiB',
            'disk_read_gi_b': 'diskReadGiB',
            'disk_read_i_ops': 'diskReadIOps',
            'disk_write_gi_b': 'diskWriteGiB',
            'disk_write_i_ops': 'diskWriteIOps',
            'last_update_time': 'lastUpdateTime',
            'network_read_gi_b': 'networkReadGiB',
            'network_write_gi_b': 'networkWriteGiB',
            'peak_disk_gi_b': 'peakDiskGiB',
            'peak_memory_gi_b': 'peakMemoryGiB',
            'start_time': 'startTime'
        }

        self._avg_cpu_percentage = avg_cpu_percentage
        self._avg_disk_gi_b = avg_disk_gi_b
        self._avg_memory_gi_b = avg_memory_gi_b
        self._disk_read_gi_b = disk_read_gi_b
        self._disk_read_i_ops = disk_read_i_ops
        self._disk_write_gi_b = disk_write_gi_b
        self._disk_write_i_ops = disk_write_i_ops
        self._last_update_time = last_update_time
        self._network_read_gi_b = network_read_gi_b
        self._network_write_gi_b = network_write_gi_b
        self._peak_disk_gi_b = peak_disk_gi_b
        self._peak_memory_gi_b = peak_memory_gi_b
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceStatistics of this ResourceStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_cpu_percentage(self):
        """Gets the avg_cpu_percentage of this ResourceStatistics.

        The average CPU usage across all nodes in the pool (percentage per node).

        :return: The avg_cpu_percentage of this ResourceStatistics.
        :rtype: float
        """
        return self._avg_cpu_percentage

    @avg_cpu_percentage.setter
    def avg_cpu_percentage(self, avg_cpu_percentage):
        """Sets the avg_cpu_percentage of this ResourceStatistics.

        The average CPU usage across all nodes in the pool (percentage per node).

        :param avg_cpu_percentage: The avg_cpu_percentage of this ResourceStatistics.
        :type avg_cpu_percentage: float
        """
        if avg_cpu_percentage is None:
            raise ValueError("Invalid value for `avg_cpu_percentage`, must not be `None`")

        self._avg_cpu_percentage = avg_cpu_percentage

    @property
    def avg_disk_gi_b(self):
        """Gets the avg_disk_gi_b of this ResourceStatistics.

        The average used disk space in GiB across all nodes in the pool.

        :return: The avg_disk_gi_b of this ResourceStatistics.
        :rtype: float
        """
        return self._avg_disk_gi_b

    @avg_disk_gi_b.setter
    def avg_disk_gi_b(self, avg_disk_gi_b):
        """Sets the avg_disk_gi_b of this ResourceStatistics.

        The average used disk space in GiB across all nodes in the pool.

        :param avg_disk_gi_b: The avg_disk_gi_b of this ResourceStatistics.
        :type avg_disk_gi_b: float
        """
        if avg_disk_gi_b is None:
            raise ValueError("Invalid value for `avg_disk_gi_b`, must not be `None`")

        self._avg_disk_gi_b = avg_disk_gi_b

    @property
    def avg_memory_gi_b(self):
        """Gets the avg_memory_gi_b of this ResourceStatistics.

        The average memory usage in GiB across all nodes in the pool.

        :return: The avg_memory_gi_b of this ResourceStatistics.
        :rtype: float
        """
        return self._avg_memory_gi_b

    @avg_memory_gi_b.setter
    def avg_memory_gi_b(self, avg_memory_gi_b):
        """Sets the avg_memory_gi_b of this ResourceStatistics.

        The average memory usage in GiB across all nodes in the pool.

        :param avg_memory_gi_b: The avg_memory_gi_b of this ResourceStatistics.
        :type avg_memory_gi_b: float
        """
        if avg_memory_gi_b is None:
            raise ValueError("Invalid value for `avg_memory_gi_b`, must not be `None`")

        self._avg_memory_gi_b = avg_memory_gi_b

    @property
    def disk_read_gi_b(self):
        """Gets the disk_read_gi_b of this ResourceStatistics.

        The total amount of data in GiB of disk reads across all nodes in the pool.

        :return: The disk_read_gi_b of this ResourceStatistics.
        :rtype: float
        """
        return self._disk_read_gi_b

    @disk_read_gi_b.setter
    def disk_read_gi_b(self, disk_read_gi_b):
        """Sets the disk_read_gi_b of this ResourceStatistics.

        The total amount of data in GiB of disk reads across all nodes in the pool.

        :param disk_read_gi_b: The disk_read_gi_b of this ResourceStatistics.
        :type disk_read_gi_b: float
        """
        if disk_read_gi_b is None:
            raise ValueError("Invalid value for `disk_read_gi_b`, must not be `None`")

        self._disk_read_gi_b = disk_read_gi_b

    @property
    def disk_read_i_ops(self):
        """Gets the disk_read_i_ops of this ResourceStatistics.

        The total number of disk read operations across all nodes in the pool.

        :return: The disk_read_i_ops of this ResourceStatistics.
        :rtype: int
        """
        return self._disk_read_i_ops

    @disk_read_i_ops.setter
    def disk_read_i_ops(self, disk_read_i_ops):
        """Sets the disk_read_i_ops of this ResourceStatistics.

        The total number of disk read operations across all nodes in the pool.

        :param disk_read_i_ops: The disk_read_i_ops of this ResourceStatistics.
        :type disk_read_i_ops: int
        """
        if disk_read_i_ops is None:
            raise ValueError("Invalid value for `disk_read_i_ops`, must not be `None`")

        self._disk_read_i_ops = disk_read_i_ops

    @property
    def disk_write_gi_b(self):
        """Gets the disk_write_gi_b of this ResourceStatistics.

        The total amount of data in GiB of disk writes across all nodes in the pool.

        :return: The disk_write_gi_b of this ResourceStatistics.
        :rtype: float
        """
        return self._disk_write_gi_b

    @disk_write_gi_b.setter
    def disk_write_gi_b(self, disk_write_gi_b):
        """Sets the disk_write_gi_b of this ResourceStatistics.

        The total amount of data in GiB of disk writes across all nodes in the pool.

        :param disk_write_gi_b: The disk_write_gi_b of this ResourceStatistics.
        :type disk_write_gi_b: float
        """
        if disk_write_gi_b is None:
            raise ValueError("Invalid value for `disk_write_gi_b`, must not be `None`")

        self._disk_write_gi_b = disk_write_gi_b

    @property
    def disk_write_i_ops(self):
        """Gets the disk_write_i_ops of this ResourceStatistics.

        The total number of disk write operations across all nodes in the pool.

        :return: The disk_write_i_ops of this ResourceStatistics.
        :rtype: int
        """
        return self._disk_write_i_ops

    @disk_write_i_ops.setter
    def disk_write_i_ops(self, disk_write_i_ops):
        """Sets the disk_write_i_ops of this ResourceStatistics.

        The total number of disk write operations across all nodes in the pool.

        :param disk_write_i_ops: The disk_write_i_ops of this ResourceStatistics.
        :type disk_write_i_ops: int
        """
        if disk_write_i_ops is None:
            raise ValueError("Invalid value for `disk_write_i_ops`, must not be `None`")

        self._disk_write_i_ops = disk_write_i_ops

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ResourceStatistics.

        The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.

        :return: The last_update_time of this ResourceStatistics.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ResourceStatistics.

        The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.

        :param last_update_time: The last_update_time of this ResourceStatistics.
        :type last_update_time: datetime
        """
        if last_update_time is None:
            raise ValueError("Invalid value for `last_update_time`, must not be `None`")

        self._last_update_time = last_update_time

    @property
    def network_read_gi_b(self):
        """Gets the network_read_gi_b of this ResourceStatistics.

        The total amount of data in GiB of network reads across all nodes in the pool.

        :return: The network_read_gi_b of this ResourceStatistics.
        :rtype: float
        """
        return self._network_read_gi_b

    @network_read_gi_b.setter
    def network_read_gi_b(self, network_read_gi_b):
        """Sets the network_read_gi_b of this ResourceStatistics.

        The total amount of data in GiB of network reads across all nodes in the pool.

        :param network_read_gi_b: The network_read_gi_b of this ResourceStatistics.
        :type network_read_gi_b: float
        """
        if network_read_gi_b is None:
            raise ValueError("Invalid value for `network_read_gi_b`, must not be `None`")

        self._network_read_gi_b = network_read_gi_b

    @property
    def network_write_gi_b(self):
        """Gets the network_write_gi_b of this ResourceStatistics.

        The total amount of data in GiB of network writes across all nodes in the pool.

        :return: The network_write_gi_b of this ResourceStatistics.
        :rtype: float
        """
        return self._network_write_gi_b

    @network_write_gi_b.setter
    def network_write_gi_b(self, network_write_gi_b):
        """Sets the network_write_gi_b of this ResourceStatistics.

        The total amount of data in GiB of network writes across all nodes in the pool.

        :param network_write_gi_b: The network_write_gi_b of this ResourceStatistics.
        :type network_write_gi_b: float
        """
        if network_write_gi_b is None:
            raise ValueError("Invalid value for `network_write_gi_b`, must not be `None`")

        self._network_write_gi_b = network_write_gi_b

    @property
    def peak_disk_gi_b(self):
        """Gets the peak_disk_gi_b of this ResourceStatistics.

        The peak used disk space in GiB across all nodes in the pool.

        :return: The peak_disk_gi_b of this ResourceStatistics.
        :rtype: float
        """
        return self._peak_disk_gi_b

    @peak_disk_gi_b.setter
    def peak_disk_gi_b(self, peak_disk_gi_b):
        """Sets the peak_disk_gi_b of this ResourceStatistics.

        The peak used disk space in GiB across all nodes in the pool.

        :param peak_disk_gi_b: The peak_disk_gi_b of this ResourceStatistics.
        :type peak_disk_gi_b: float
        """
        if peak_disk_gi_b is None:
            raise ValueError("Invalid value for `peak_disk_gi_b`, must not be `None`")

        self._peak_disk_gi_b = peak_disk_gi_b

    @property
    def peak_memory_gi_b(self):
        """Gets the peak_memory_gi_b of this ResourceStatistics.

        The peak memory usage in GiB across all nodes in the pool.

        :return: The peak_memory_gi_b of this ResourceStatistics.
        :rtype: float
        """
        return self._peak_memory_gi_b

    @peak_memory_gi_b.setter
    def peak_memory_gi_b(self, peak_memory_gi_b):
        """Sets the peak_memory_gi_b of this ResourceStatistics.

        The peak memory usage in GiB across all nodes in the pool.

        :param peak_memory_gi_b: The peak_memory_gi_b of this ResourceStatistics.
        :type peak_memory_gi_b: float
        """
        if peak_memory_gi_b is None:
            raise ValueError("Invalid value for `peak_memory_gi_b`, must not be `None`")

        self._peak_memory_gi_b = peak_memory_gi_b

    @property
    def start_time(self):
        """Gets the start_time of this ResourceStatistics.

        The start time of the time range covered by the statistics.

        :return: The start_time of this ResourceStatistics.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ResourceStatistics.

        The start time of the time range covered by the statistics.

        :param start_time: The start_time of this ResourceStatistics.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time
