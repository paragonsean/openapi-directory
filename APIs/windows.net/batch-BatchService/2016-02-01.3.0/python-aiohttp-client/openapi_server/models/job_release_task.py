# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.resource_file import ResourceFile
from openapi_server import util


class JobReleaseTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_line: str=None, environment_settings: List[EnvironmentSetting]=None, id: str=None, max_wall_clock_time: str=None, resource_files: List[ResourceFile]=None, retention_time: str=None, run_elevated: bool=None):
        """JobReleaseTask - a model defined in OpenAPI

        :param command_line: The command_line of this JobReleaseTask.
        :param environment_settings: The environment_settings of this JobReleaseTask.
        :param id: The id of this JobReleaseTask.
        :param max_wall_clock_time: The max_wall_clock_time of this JobReleaseTask.
        :param resource_files: The resource_files of this JobReleaseTask.
        :param retention_time: The retention_time of this JobReleaseTask.
        :param run_elevated: The run_elevated of this JobReleaseTask.
        """
        self.openapi_types = {
            'command_line': str,
            'environment_settings': List[EnvironmentSetting],
            'id': str,
            'max_wall_clock_time': str,
            'resource_files': List[ResourceFile],
            'retention_time': str,
            'run_elevated': bool
        }

        self.attribute_map = {
            'command_line': 'commandLine',
            'environment_settings': 'environmentSettings',
            'id': 'id',
            'max_wall_clock_time': 'maxWallClockTime',
            'resource_files': 'resourceFiles',
            'retention_time': 'retentionTime',
            'run_elevated': 'runElevated'
        }

        self._command_line = command_line
        self._environment_settings = environment_settings
        self._id = id
        self._max_wall_clock_time = max_wall_clock_time
        self._resource_files = resource_files
        self._retention_time = retention_time
        self._run_elevated = run_elevated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobReleaseTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobReleaseTask of this JobReleaseTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_line(self):
        """Gets the command_line of this JobReleaseTask.

        The command line of the Job Release task.

        :return: The command_line of this JobReleaseTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this JobReleaseTask.

        The command line of the Job Release task.

        :param command_line: The command_line of this JobReleaseTask.
        :type command_line: str
        """

        self._command_line = command_line

    @property
    def environment_settings(self):
        """Gets the environment_settings of this JobReleaseTask.

        A list of environment variable settings for the Job Release task.

        :return: The environment_settings of this JobReleaseTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this JobReleaseTask.

        A list of environment variable settings for the Job Release task.

        :param environment_settings: The environment_settings of this JobReleaseTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def id(self):
        """Gets the id of this JobReleaseTask.

        A string that uniquely identifies the Job Release task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.

        :return: The id of this JobReleaseTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobReleaseTask.

        A string that uniquely identifies the Job Release task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.

        :param id: The id of this JobReleaseTask.
        :type id: str
        """

        self._id = id

    @property
    def max_wall_clock_time(self):
        """Gets the max_wall_clock_time of this JobReleaseTask.

        The maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.

        :return: The max_wall_clock_time of this JobReleaseTask.
        :rtype: str
        """
        return self._max_wall_clock_time

    @max_wall_clock_time.setter
    def max_wall_clock_time(self, max_wall_clock_time):
        """Sets the max_wall_clock_time of this JobReleaseTask.

        The maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.

        :param max_wall_clock_time: The max_wall_clock_time of this JobReleaseTask.
        :type max_wall_clock_time: str
        """

        self._max_wall_clock_time = max_wall_clock_time

    @property
    def resource_files(self):
        """Gets the resource_files of this JobReleaseTask.

        A list of files that the Batch service will download to the compute node before running the command line.

        :return: The resource_files of this JobReleaseTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this JobReleaseTask.

        A list of files that the Batch service will download to the compute node before running the command line.

        :param resource_files: The resource_files of this JobReleaseTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def retention_time(self):
        """Gets the retention_time of this JobReleaseTask.

        The minimum time to retain the working directory for the Job Release task on the compute node. After this time, the Batch service may delete the working directory and all its contents. The default is infinite.

        :return: The retention_time of this JobReleaseTask.
        :rtype: str
        """
        return self._retention_time

    @retention_time.setter
    def retention_time(self, retention_time):
        """Sets the retention_time of this JobReleaseTask.

        The minimum time to retain the working directory for the Job Release task on the compute node. After this time, the Batch service may delete the working directory and all its contents. The default is infinite.

        :param retention_time: The retention_time of this JobReleaseTask.
        :type retention_time: str
        """

        self._retention_time = retention_time

    @property
    def run_elevated(self):
        """Gets the run_elevated of this JobReleaseTask.

        Whether to run the Job Release task in elevated mode. The default value is false.

        :return: The run_elevated of this JobReleaseTask.
        :rtype: bool
        """
        return self._run_elevated

    @run_elevated.setter
    def run_elevated(self, run_elevated):
        """Sets the run_elevated of this JobReleaseTask.

        Whether to run the Job Release task in elevated mode. The default value is false.

        :param run_elevated: The run_elevated of this JobReleaseTask.
        :type run_elevated: bool
        """

        self._run_elevated = run_elevated
