# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_constraints import TaskConstraints
from openapi_server import util


class JobManagerTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_line: str=None, constraints: TaskConstraints=None, display_name: str=None, environment_settings: List[EnvironmentSetting]=None, id: str=None, kill_job_on_completion: bool=None, resource_files: List[ResourceFile]=None, run_elevated: bool=None, run_exclusive: bool=None):
        """JobManagerTask - a model defined in OpenAPI

        :param command_line: The command_line of this JobManagerTask.
        :param constraints: The constraints of this JobManagerTask.
        :param display_name: The display_name of this JobManagerTask.
        :param environment_settings: The environment_settings of this JobManagerTask.
        :param id: The id of this JobManagerTask.
        :param kill_job_on_completion: The kill_job_on_completion of this JobManagerTask.
        :param resource_files: The resource_files of this JobManagerTask.
        :param run_elevated: The run_elevated of this JobManagerTask.
        :param run_exclusive: The run_exclusive of this JobManagerTask.
        """
        self.openapi_types = {
            'command_line': str,
            'constraints': TaskConstraints,
            'display_name': str,
            'environment_settings': List[EnvironmentSetting],
            'id': str,
            'kill_job_on_completion': bool,
            'resource_files': List[ResourceFile],
            'run_elevated': bool,
            'run_exclusive': bool
        }

        self.attribute_map = {
            'command_line': 'commandLine',
            'constraints': 'constraints',
            'display_name': 'displayName',
            'environment_settings': 'environmentSettings',
            'id': 'id',
            'kill_job_on_completion': 'killJobOnCompletion',
            'resource_files': 'resourceFiles',
            'run_elevated': 'runElevated',
            'run_exclusive': 'runExclusive'
        }

        self._command_line = command_line
        self._constraints = constraints
        self._display_name = display_name
        self._environment_settings = environment_settings
        self._id = id
        self._kill_job_on_completion = kill_job_on_completion
        self._resource_files = resource_files
        self._run_elevated = run_elevated
        self._run_exclusive = run_exclusive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobManagerTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobManagerTask of this JobManagerTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_line(self):
        """Gets the command_line of this JobManagerTask.

        The command line of the Job Manager task.

        :return: The command_line of this JobManagerTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this JobManagerTask.

        The command line of the Job Manager task.

        :param command_line: The command_line of this JobManagerTask.
        :type command_line: str
        """

        self._command_line = command_line

    @property
    def constraints(self):
        """Gets the constraints of this JobManagerTask.


        :return: The constraints of this JobManagerTask.
        :rtype: TaskConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this JobManagerTask.


        :param constraints: The constraints of this JobManagerTask.
        :type constraints: TaskConstraints
        """

        self._constraints = constraints

    @property
    def display_name(self):
        """Gets the display_name of this JobManagerTask.

        The display name of the Job Manager task.

        :return: The display_name of this JobManagerTask.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this JobManagerTask.

        The display name of the Job Manager task.

        :param display_name: The display_name of this JobManagerTask.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def environment_settings(self):
        """Gets the environment_settings of this JobManagerTask.

        A list of environment variable settings for the Job Manager task.

        :return: The environment_settings of this JobManagerTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this JobManagerTask.

        A list of environment variable settings for the Job Manager task.

        :param environment_settings: The environment_settings of this JobManagerTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def id(self):
        """Gets the id of this JobManagerTask.

        A string that uniquely identifies the Job Manager task. A GUID is recommended.

        :return: The id of this JobManagerTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobManagerTask.

        A string that uniquely identifies the Job Manager task. A GUID is recommended.

        :param id: The id of this JobManagerTask.
        :type id: str
        """

        self._id = id

    @property
    def kill_job_on_completion(self):
        """Gets the kill_job_on_completion of this JobManagerTask.

        Whether completion of the Job Manager task signifies completion of the entire job.

        :return: The kill_job_on_completion of this JobManagerTask.
        :rtype: bool
        """
        return self._kill_job_on_completion

    @kill_job_on_completion.setter
    def kill_job_on_completion(self, kill_job_on_completion):
        """Sets the kill_job_on_completion of this JobManagerTask.

        Whether completion of the Job Manager task signifies completion of the entire job.

        :param kill_job_on_completion: The kill_job_on_completion of this JobManagerTask.
        :type kill_job_on_completion: bool
        """

        self._kill_job_on_completion = kill_job_on_completion

    @property
    def resource_files(self):
        """Gets the resource_files of this JobManagerTask.

        A list of files that the Batch service will download to the compute node before running the command line.

        :return: The resource_files of this JobManagerTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this JobManagerTask.

        A list of files that the Batch service will download to the compute node before running the command line.

        :param resource_files: The resource_files of this JobManagerTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def run_elevated(self):
        """Gets the run_elevated of this JobManagerTask.

        Whether to run the Job Manager task in elevated mode. The default value is false.

        :return: The run_elevated of this JobManagerTask.
        :rtype: bool
        """
        return self._run_elevated

    @run_elevated.setter
    def run_elevated(self, run_elevated):
        """Sets the run_elevated of this JobManagerTask.

        Whether to run the Job Manager task in elevated mode. The default value is false.

        :param run_elevated: The run_elevated of this JobManagerTask.
        :type run_elevated: bool
        """

        self._run_elevated = run_elevated

    @property
    def run_exclusive(self):
        """Gets the run_exclusive of this JobManagerTask.

        Whether the Job Manager task requires exclusive use of the compute node where it runs. If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. (The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks.)

        :return: The run_exclusive of this JobManagerTask.
        :rtype: bool
        """
        return self._run_exclusive

    @run_exclusive.setter
    def run_exclusive(self, run_exclusive):
        """Sets the run_exclusive of this JobManagerTask.

        Whether the Job Manager task requires exclusive use of the compute node where it runs. If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. (The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks.)

        :param run_exclusive: The run_exclusive of this JobManagerTask.
        :type run_exclusive: bool
        """

        self._run_exclusive = run_exclusive
