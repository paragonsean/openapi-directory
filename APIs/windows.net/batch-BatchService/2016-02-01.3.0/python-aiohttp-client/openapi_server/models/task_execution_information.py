# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_scheduling_error import TaskSchedulingError
from openapi_server import util


class TaskExecutionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, exit_code: int=None, last_requeue_time: datetime=None, last_retry_time: datetime=None, requeue_count: int=None, retry_count: int=None, scheduling_error: TaskSchedulingError=None, start_time: datetime=None):
        """TaskExecutionInformation - a model defined in OpenAPI

        :param end_time: The end_time of this TaskExecutionInformation.
        :param exit_code: The exit_code of this TaskExecutionInformation.
        :param last_requeue_time: The last_requeue_time of this TaskExecutionInformation.
        :param last_retry_time: The last_retry_time of this TaskExecutionInformation.
        :param requeue_count: The requeue_count of this TaskExecutionInformation.
        :param retry_count: The retry_count of this TaskExecutionInformation.
        :param scheduling_error: The scheduling_error of this TaskExecutionInformation.
        :param start_time: The start_time of this TaskExecutionInformation.
        """
        self.openapi_types = {
            'end_time': datetime,
            'exit_code': int,
            'last_requeue_time': datetime,
            'last_retry_time': datetime,
            'requeue_count': int,
            'retry_count': int,
            'scheduling_error': TaskSchedulingError,
            'start_time': datetime
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'exit_code': 'exitCode',
            'last_requeue_time': 'lastRequeueTime',
            'last_retry_time': 'lastRetryTime',
            'requeue_count': 'requeueCount',
            'retry_count': 'retryCount',
            'scheduling_error': 'schedulingError',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._exit_code = exit_code
        self._last_requeue_time = last_requeue_time
        self._last_retry_time = last_retry_time
        self._requeue_count = requeue_count
        self._retry_count = retry_count
        self._scheduling_error = scheduling_error
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskExecutionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskExecutionInformation of this TaskExecutionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this TaskExecutionInformation.

        The time at which the task completed. This property is set only if the task is in the Completed state.

        :return: The end_time of this TaskExecutionInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaskExecutionInformation.

        The time at which the task completed. This property is set only if the task is in the Completed state.

        :param end_time: The end_time of this TaskExecutionInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def exit_code(self):
        """Gets the exit_code of this TaskExecutionInformation.

        The exit code of the task. This property is set only if the task is in completed state.

        :return: The exit_code of this TaskExecutionInformation.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this TaskExecutionInformation.

        The exit code of the task. This property is set only if the task is in completed state.

        :param exit_code: The exit_code of this TaskExecutionInformation.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def last_requeue_time(self):
        """Gets the last_requeue_time of this TaskExecutionInformation.

        The most recent time at which the task has been requeued by the Batch service as the result of a user request.

        :return: The last_requeue_time of this TaskExecutionInformation.
        :rtype: datetime
        """
        return self._last_requeue_time

    @last_requeue_time.setter
    def last_requeue_time(self, last_requeue_time):
        """Sets the last_requeue_time of this TaskExecutionInformation.

        The most recent time at which the task has been requeued by the Batch service as the result of a user request.

        :param last_requeue_time: The last_requeue_time of this TaskExecutionInformation.
        :type last_requeue_time: datetime
        """

        self._last_requeue_time = last_requeue_time

    @property
    def last_retry_time(self):
        """Gets the last_retry_time of this TaskExecutionInformation.

        The most recent time at which a retry of the task started running.

        :return: The last_retry_time of this TaskExecutionInformation.
        :rtype: datetime
        """
        return self._last_retry_time

    @last_retry_time.setter
    def last_retry_time(self, last_retry_time):
        """Sets the last_retry_time of this TaskExecutionInformation.

        The most recent time at which a retry of the task started running.

        :param last_retry_time: The last_retry_time of this TaskExecutionInformation.
        :type last_retry_time: datetime
        """

        self._last_retry_time = last_retry_time

    @property
    def requeue_count(self):
        """Gets the requeue_count of this TaskExecutionInformation.

        The number of times the task has been requeued by the Batch service as the result of a user request.

        :return: The requeue_count of this TaskExecutionInformation.
        :rtype: int
        """
        return self._requeue_count

    @requeue_count.setter
    def requeue_count(self, requeue_count):
        """Sets the requeue_count of this TaskExecutionInformation.

        The number of times the task has been requeued by the Batch service as the result of a user request.

        :param requeue_count: The requeue_count of this TaskExecutionInformation.
        :type requeue_count: int
        """
        if requeue_count is None:
            raise ValueError("Invalid value for `requeue_count`, must not be `None`")

        self._requeue_count = requeue_count

    @property
    def retry_count(self):
        """Gets the retry_count of this TaskExecutionInformation.

        The number of times the task has been retried by the Batch service.

        :return: The retry_count of this TaskExecutionInformation.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this TaskExecutionInformation.

        The number of times the task has been retried by the Batch service.

        :param retry_count: The retry_count of this TaskExecutionInformation.
        :type retry_count: int
        """
        if retry_count is None:
            raise ValueError("Invalid value for `retry_count`, must not be `None`")

        self._retry_count = retry_count

    @property
    def scheduling_error(self):
        """Gets the scheduling_error of this TaskExecutionInformation.


        :return: The scheduling_error of this TaskExecutionInformation.
        :rtype: TaskSchedulingError
        """
        return self._scheduling_error

    @scheduling_error.setter
    def scheduling_error(self, scheduling_error):
        """Sets the scheduling_error of this TaskExecutionInformation.


        :param scheduling_error: The scheduling_error of this TaskExecutionInformation.
        :type scheduling_error: TaskSchedulingError
        """

        self._scheduling_error = scheduling_error

    @property
    def start_time(self):
        """Gets the start_time of this TaskExecutionInformation.

        The time at which the task started running. If the task has been restarted or retried, this is the most recent time at which the task started running.

        :return: The start_time of this TaskExecutionInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskExecutionInformation.

        The time at which the task started running. If the task has been restarted or retried, this is the most recent time at which the task started running.

        :param start_time: The start_time of this TaskExecutionInformation.
        :type start_time: datetime
        """

        self._start_time = start_time
