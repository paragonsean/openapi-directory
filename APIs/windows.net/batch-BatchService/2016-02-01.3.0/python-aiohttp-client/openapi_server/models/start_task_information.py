# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_scheduling_error import TaskSchedulingError
from openapi_server import util


class StartTaskInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, exit_code: int=None, last_retry_time: datetime=None, retry_count: int=None, scheduling_error: TaskSchedulingError=None, start_time: datetime=None, state: str=None):
        """StartTaskInformation - a model defined in OpenAPI

        :param end_time: The end_time of this StartTaskInformation.
        :param exit_code: The exit_code of this StartTaskInformation.
        :param last_retry_time: The last_retry_time of this StartTaskInformation.
        :param retry_count: The retry_count of this StartTaskInformation.
        :param scheduling_error: The scheduling_error of this StartTaskInformation.
        :param start_time: The start_time of this StartTaskInformation.
        :param state: The state of this StartTaskInformation.
        """
        self.openapi_types = {
            'end_time': datetime,
            'exit_code': int,
            'last_retry_time': datetime,
            'retry_count': int,
            'scheduling_error': TaskSchedulingError,
            'start_time': datetime,
            'state': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'exit_code': 'exitCode',
            'last_retry_time': 'lastRetryTime',
            'retry_count': 'retryCount',
            'scheduling_error': 'schedulingError',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._end_time = end_time
        self._exit_code = exit_code
        self._last_retry_time = last_retry_time
        self._retry_count = retry_count
        self._scheduling_error = scheduling_error
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTaskInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTaskInformation of this StartTaskInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this StartTaskInformation.

        The time at which the start task stopped running.

        :return: The end_time of this StartTaskInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this StartTaskInformation.

        The time at which the start task stopped running.

        :param end_time: The end_time of this StartTaskInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def exit_code(self):
        """Gets the exit_code of this StartTaskInformation.

        The exit code of the start task.

        :return: The exit_code of this StartTaskInformation.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this StartTaskInformation.

        The exit code of the start task.

        :param exit_code: The exit_code of this StartTaskInformation.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def last_retry_time(self):
        """Gets the last_retry_time of this StartTaskInformation.

        The most recent time at which a retry of the task started running.

        :return: The last_retry_time of this StartTaskInformation.
        :rtype: datetime
        """
        return self._last_retry_time

    @last_retry_time.setter
    def last_retry_time(self, last_retry_time):
        """Sets the last_retry_time of this StartTaskInformation.

        The most recent time at which a retry of the task started running.

        :param last_retry_time: The last_retry_time of this StartTaskInformation.
        :type last_retry_time: datetime
        """

        self._last_retry_time = last_retry_time

    @property
    def retry_count(self):
        """Gets the retry_count of this StartTaskInformation.

        The number of times the task has been retried by the Batch service.

        :return: The retry_count of this StartTaskInformation.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this StartTaskInformation.

        The number of times the task has been retried by the Batch service.

        :param retry_count: The retry_count of this StartTaskInformation.
        :type retry_count: int
        """
        if retry_count is None:
            raise ValueError("Invalid value for `retry_count`, must not be `None`")

        self._retry_count = retry_count

    @property
    def scheduling_error(self):
        """Gets the scheduling_error of this StartTaskInformation.


        :return: The scheduling_error of this StartTaskInformation.
        :rtype: TaskSchedulingError
        """
        return self._scheduling_error

    @scheduling_error.setter
    def scheduling_error(self, scheduling_error):
        """Sets the scheduling_error of this StartTaskInformation.


        :param scheduling_error: The scheduling_error of this StartTaskInformation.
        :type scheduling_error: TaskSchedulingError
        """

        self._scheduling_error = scheduling_error

    @property
    def start_time(self):
        """Gets the start_time of this StartTaskInformation.

        The time at which the start task started running.

        :return: The start_time of this StartTaskInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StartTaskInformation.

        The time at which the start task started running.

        :param start_time: The start_time of this StartTaskInformation.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this StartTaskInformation.

        The state of the start task on the compute node.

        :return: The state of this StartTaskInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StartTaskInformation.

        The state of the start task on the compute node.

        :param state: The state of this StartTaskInformation.
        :type state: str
        """
        allowed_values = ["running", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
