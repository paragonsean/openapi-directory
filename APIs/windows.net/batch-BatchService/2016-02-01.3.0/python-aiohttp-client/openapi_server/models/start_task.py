# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.resource_file import ResourceFile
from openapi_server import util


class StartTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_line: str=None, environment_settings: List[EnvironmentSetting]=None, max_task_retry_count: int=None, resource_files: List[ResourceFile]=None, run_elevated: bool=None, wait_for_success: bool=None):
        """StartTask - a model defined in OpenAPI

        :param command_line: The command_line of this StartTask.
        :param environment_settings: The environment_settings of this StartTask.
        :param max_task_retry_count: The max_task_retry_count of this StartTask.
        :param resource_files: The resource_files of this StartTask.
        :param run_elevated: The run_elevated of this StartTask.
        :param wait_for_success: The wait_for_success of this StartTask.
        """
        self.openapi_types = {
            'command_line': str,
            'environment_settings': List[EnvironmentSetting],
            'max_task_retry_count': int,
            'resource_files': List[ResourceFile],
            'run_elevated': bool,
            'wait_for_success': bool
        }

        self.attribute_map = {
            'command_line': 'commandLine',
            'environment_settings': 'environmentSettings',
            'max_task_retry_count': 'maxTaskRetryCount',
            'resource_files': 'resourceFiles',
            'run_elevated': 'runElevated',
            'wait_for_success': 'waitForSuccess'
        }

        self._command_line = command_line
        self._environment_settings = environment_settings
        self._max_task_retry_count = max_task_retry_count
        self._resource_files = resource_files
        self._run_elevated = run_elevated
        self._wait_for_success = wait_for_success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTask of this StartTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_line(self):
        """Gets the command_line of this StartTask.

        The command line of the start task.

        :return: The command_line of this StartTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this StartTask.

        The command line of the start task.

        :param command_line: The command_line of this StartTask.
        :type command_line: str
        """

        self._command_line = command_line

    @property
    def environment_settings(self):
        """Gets the environment_settings of this StartTask.

        A list of environment variable settings for the start task.

        :return: The environment_settings of this StartTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this StartTask.

        A list of environment variable settings for the start task.

        :param environment_settings: The environment_settings of this StartTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def max_task_retry_count(self):
        """Gets the max_task_retry_count of this StartTask.

        The maximum number of times the task may be retried.

        :return: The max_task_retry_count of this StartTask.
        :rtype: int
        """
        return self._max_task_retry_count

    @max_task_retry_count.setter
    def max_task_retry_count(self, max_task_retry_count):
        """Sets the max_task_retry_count of this StartTask.

        The maximum number of times the task may be retried.

        :param max_task_retry_count: The max_task_retry_count of this StartTask.
        :type max_task_retry_count: int
        """

        self._max_task_retry_count = max_task_retry_count

    @property
    def resource_files(self):
        """Gets the resource_files of this StartTask.

        A list of files that the Batch service will download to the compute node before running the command line.

        :return: The resource_files of this StartTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this StartTask.

        A list of files that the Batch service will download to the compute node before running the command line.

        :param resource_files: The resource_files of this StartTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def run_elevated(self):
        """Gets the run_elevated of this StartTask.

        Whether to run the start task in elevated mode. The default value is false.

        :return: The run_elevated of this StartTask.
        :rtype: bool
        """
        return self._run_elevated

    @run_elevated.setter
    def run_elevated(self, run_elevated):
        """Sets the run_elevated of this StartTask.

        Whether to run the start task in elevated mode. The default value is false.

        :param run_elevated: The run_elevated of this StartTask.
        :type run_elevated: bool
        """

        self._run_elevated = run_elevated

    @property
    def wait_for_success(self):
        """Gets the wait_for_success of this StartTask.

        Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.

        :return: The wait_for_success of this StartTask.
        :rtype: bool
        """
        return self._wait_for_success

    @wait_for_success.setter
    def wait_for_success(self, wait_for_success):
        """Sets the wait_for_success of this StartTask.

        Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.

        :param wait_for_success: The wait_for_success of this StartTask.
        :type wait_for_success: bool
        """

        self._wait_for_success = wait_for_success
