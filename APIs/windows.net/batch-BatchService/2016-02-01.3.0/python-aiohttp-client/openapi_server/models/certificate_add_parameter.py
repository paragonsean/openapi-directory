# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateAddParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_format: str=None, data: str=None, password: str=None, thumbprint: str=None, thumbprint_algorithm: str=None):
        """CertificateAddParameter - a model defined in OpenAPI

        :param certificate_format: The certificate_format of this CertificateAddParameter.
        :param data: The data of this CertificateAddParameter.
        :param password: The password of this CertificateAddParameter.
        :param thumbprint: The thumbprint of this CertificateAddParameter.
        :param thumbprint_algorithm: The thumbprint_algorithm of this CertificateAddParameter.
        """
        self.openapi_types = {
            'certificate_format': str,
            'data': str,
            'password': str,
            'thumbprint': str,
            'thumbprint_algorithm': str
        }

        self.attribute_map = {
            'certificate_format': 'certificateFormat',
            'data': 'data',
            'password': 'password',
            'thumbprint': 'thumbprint',
            'thumbprint_algorithm': 'thumbprintAlgorithm'
        }

        self._certificate_format = certificate_format
        self._data = data
        self._password = password
        self._thumbprint = thumbprint
        self._thumbprint_algorithm = thumbprint_algorithm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateAddParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateAddParameter of this CertificateAddParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_format(self):
        """Gets the certificate_format of this CertificateAddParameter.

        The format of the certificate data.

        :return: The certificate_format of this CertificateAddParameter.
        :rtype: str
        """
        return self._certificate_format

    @certificate_format.setter
    def certificate_format(self, certificate_format):
        """Sets the certificate_format of this CertificateAddParameter.

        The format of the certificate data.

        :param certificate_format: The certificate_format of this CertificateAddParameter.
        :type certificate_format: str
        """
        allowed_values = ["pfx", "cer", "unmapped"]  # noqa: E501
        if certificate_format not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_format` ({0}), must be one of {1}"
                .format(certificate_format, allowed_values)
            )

        self._certificate_format = certificate_format

    @property
    def data(self):
        """Gets the data of this CertificateAddParameter.

        The base64-encoded contents of the certificate. The maximum size is 10KB.

        :return: The data of this CertificateAddParameter.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CertificateAddParameter.

        The base64-encoded contents of the certificate. The maximum size is 10KB.

        :param data: The data of this CertificateAddParameter.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def password(self):
        """Gets the password of this CertificateAddParameter.

        The password to access the certificate's private key.

        :return: The password of this CertificateAddParameter.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CertificateAddParameter.

        The password to access the certificate's private key.

        :param password: The password of this CertificateAddParameter.
        :type password: str
        """

        self._password = password

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateAddParameter.

        The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).

        :return: The thumbprint of this CertificateAddParameter.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateAddParameter.

        The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).

        :param thumbprint: The thumbprint of this CertificateAddParameter.
        :type thumbprint: str
        """
        if thumbprint is None:
            raise ValueError("Invalid value for `thumbprint`, must not be `None`")

        self._thumbprint = thumbprint

    @property
    def thumbprint_algorithm(self):
        """Gets the thumbprint_algorithm of this CertificateAddParameter.

        The algorithm used to derive the thumbprint. This must be sha1.

        :return: The thumbprint_algorithm of this CertificateAddParameter.
        :rtype: str
        """
        return self._thumbprint_algorithm

    @thumbprint_algorithm.setter
    def thumbprint_algorithm(self, thumbprint_algorithm):
        """Sets the thumbprint_algorithm of this CertificateAddParameter.

        The algorithm used to derive the thumbprint. This must be sha1.

        :param thumbprint_algorithm: The thumbprint_algorithm of this CertificateAddParameter.
        :type thumbprint_algorithm: str
        """
        if thumbprint_algorithm is None:
            raise ValueError("Invalid value for `thumbprint_algorithm`, must not be `None`")

        self._thumbprint_algorithm = thumbprint_algorithm
