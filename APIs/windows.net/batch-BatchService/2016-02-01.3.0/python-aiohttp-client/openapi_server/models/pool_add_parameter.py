# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_package_reference import ApplicationPackageReference
from openapi_server.models.certificate_reference import CertificateReference
from openapi_server.models.cloud_service_configuration import CloudServiceConfiguration
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.start_task import StartTask
from openapi_server.models.task_scheduling_policy import TaskSchedulingPolicy
from openapi_server.models.virtual_machine_configuration import VirtualMachineConfiguration
from openapi_server import util


class PoolAddParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_package_references: List[ApplicationPackageReference]=None, auto_scale_evaluation_interval: str=None, auto_scale_formula: str=None, certificate_references: List[CertificateReference]=None, cloud_service_configuration: CloudServiceConfiguration=None, display_name: str=None, enable_auto_scale: bool=None, enable_inter_node_communication: bool=None, id: str=None, max_tasks_per_node: int=None, metadata: List[MetadataItem]=None, resize_timeout: str=None, start_task: StartTask=None, target_dedicated: int=None, task_scheduling_policy: TaskSchedulingPolicy=None, virtual_machine_configuration: VirtualMachineConfiguration=None, vm_size: str=None):
        """PoolAddParameter - a model defined in OpenAPI

        :param application_package_references: The application_package_references of this PoolAddParameter.
        :param auto_scale_evaluation_interval: The auto_scale_evaluation_interval of this PoolAddParameter.
        :param auto_scale_formula: The auto_scale_formula of this PoolAddParameter.
        :param certificate_references: The certificate_references of this PoolAddParameter.
        :param cloud_service_configuration: The cloud_service_configuration of this PoolAddParameter.
        :param display_name: The display_name of this PoolAddParameter.
        :param enable_auto_scale: The enable_auto_scale of this PoolAddParameter.
        :param enable_inter_node_communication: The enable_inter_node_communication of this PoolAddParameter.
        :param id: The id of this PoolAddParameter.
        :param max_tasks_per_node: The max_tasks_per_node of this PoolAddParameter.
        :param metadata: The metadata of this PoolAddParameter.
        :param resize_timeout: The resize_timeout of this PoolAddParameter.
        :param start_task: The start_task of this PoolAddParameter.
        :param target_dedicated: The target_dedicated of this PoolAddParameter.
        :param task_scheduling_policy: The task_scheduling_policy of this PoolAddParameter.
        :param virtual_machine_configuration: The virtual_machine_configuration of this PoolAddParameter.
        :param vm_size: The vm_size of this PoolAddParameter.
        """
        self.openapi_types = {
            'application_package_references': List[ApplicationPackageReference],
            'auto_scale_evaluation_interval': str,
            'auto_scale_formula': str,
            'certificate_references': List[CertificateReference],
            'cloud_service_configuration': CloudServiceConfiguration,
            'display_name': str,
            'enable_auto_scale': bool,
            'enable_inter_node_communication': bool,
            'id': str,
            'max_tasks_per_node': int,
            'metadata': List[MetadataItem],
            'resize_timeout': str,
            'start_task': StartTask,
            'target_dedicated': int,
            'task_scheduling_policy': TaskSchedulingPolicy,
            'virtual_machine_configuration': VirtualMachineConfiguration,
            'vm_size': str
        }

        self.attribute_map = {
            'application_package_references': 'applicationPackageReferences',
            'auto_scale_evaluation_interval': 'autoScaleEvaluationInterval',
            'auto_scale_formula': 'autoScaleFormula',
            'certificate_references': 'certificateReferences',
            'cloud_service_configuration': 'cloudServiceConfiguration',
            'display_name': 'displayName',
            'enable_auto_scale': 'enableAutoScale',
            'enable_inter_node_communication': 'enableInterNodeCommunication',
            'id': 'id',
            'max_tasks_per_node': 'maxTasksPerNode',
            'metadata': 'metadata',
            'resize_timeout': 'resizeTimeout',
            'start_task': 'startTask',
            'target_dedicated': 'targetDedicated',
            'task_scheduling_policy': 'taskSchedulingPolicy',
            'virtual_machine_configuration': 'virtualMachineConfiguration',
            'vm_size': 'vmSize'
        }

        self._application_package_references = application_package_references
        self._auto_scale_evaluation_interval = auto_scale_evaluation_interval
        self._auto_scale_formula = auto_scale_formula
        self._certificate_references = certificate_references
        self._cloud_service_configuration = cloud_service_configuration
        self._display_name = display_name
        self._enable_auto_scale = enable_auto_scale
        self._enable_inter_node_communication = enable_inter_node_communication
        self._id = id
        self._max_tasks_per_node = max_tasks_per_node
        self._metadata = metadata
        self._resize_timeout = resize_timeout
        self._start_task = start_task
        self._target_dedicated = target_dedicated
        self._task_scheduling_policy = task_scheduling_policy
        self._virtual_machine_configuration = virtual_machine_configuration
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PoolAddParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PoolAddParameter of this PoolAddParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_package_references(self):
        """Gets the application_package_references of this PoolAddParameter.

        The list of application packages to be installed on each compute node in the pool.

        :return: The application_package_references of this PoolAddParameter.
        :rtype: List[ApplicationPackageReference]
        """
        return self._application_package_references

    @application_package_references.setter
    def application_package_references(self, application_package_references):
        """Sets the application_package_references of this PoolAddParameter.

        The list of application packages to be installed on each compute node in the pool.

        :param application_package_references: The application_package_references of this PoolAddParameter.
        :type application_package_references: List[ApplicationPackageReference]
        """

        self._application_package_references = application_package_references

    @property
    def auto_scale_evaluation_interval(self):
        """Gets the auto_scale_evaluation_interval of this PoolAddParameter.

        A time interval for the desired autoscale evaluation period in the pool.

        :return: The auto_scale_evaluation_interval of this PoolAddParameter.
        :rtype: str
        """
        return self._auto_scale_evaluation_interval

    @auto_scale_evaluation_interval.setter
    def auto_scale_evaluation_interval(self, auto_scale_evaluation_interval):
        """Sets the auto_scale_evaluation_interval of this PoolAddParameter.

        A time interval for the desired autoscale evaluation period in the pool.

        :param auto_scale_evaluation_interval: The auto_scale_evaluation_interval of this PoolAddParameter.
        :type auto_scale_evaluation_interval: str
        """

        self._auto_scale_evaluation_interval = auto_scale_evaluation_interval

    @property
    def auto_scale_formula(self):
        """Gets the auto_scale_formula of this PoolAddParameter.

        A formula for the desired number of compute nodes in the pool.

        :return: The auto_scale_formula of this PoolAddParameter.
        :rtype: str
        """
        return self._auto_scale_formula

    @auto_scale_formula.setter
    def auto_scale_formula(self, auto_scale_formula):
        """Sets the auto_scale_formula of this PoolAddParameter.

        A formula for the desired number of compute nodes in the pool.

        :param auto_scale_formula: The auto_scale_formula of this PoolAddParameter.
        :type auto_scale_formula: str
        """

        self._auto_scale_formula = auto_scale_formula

    @property
    def certificate_references(self):
        """Gets the certificate_references of this PoolAddParameter.

        The list of certificates to be installed on each compute node in the pool.

        :return: The certificate_references of this PoolAddParameter.
        :rtype: List[CertificateReference]
        """
        return self._certificate_references

    @certificate_references.setter
    def certificate_references(self, certificate_references):
        """Sets the certificate_references of this PoolAddParameter.

        The list of certificates to be installed on each compute node in the pool.

        :param certificate_references: The certificate_references of this PoolAddParameter.
        :type certificate_references: List[CertificateReference]
        """

        self._certificate_references = certificate_references

    @property
    def cloud_service_configuration(self):
        """Gets the cloud_service_configuration of this PoolAddParameter.


        :return: The cloud_service_configuration of this PoolAddParameter.
        :rtype: CloudServiceConfiguration
        """
        return self._cloud_service_configuration

    @cloud_service_configuration.setter
    def cloud_service_configuration(self, cloud_service_configuration):
        """Sets the cloud_service_configuration of this PoolAddParameter.


        :param cloud_service_configuration: The cloud_service_configuration of this PoolAddParameter.
        :type cloud_service_configuration: CloudServiceConfiguration
        """

        self._cloud_service_configuration = cloud_service_configuration

    @property
    def display_name(self):
        """Gets the display_name of this PoolAddParameter.

        The display name for the pool.

        :return: The display_name of this PoolAddParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PoolAddParameter.

        The display name for the pool.

        :param display_name: The display_name of this PoolAddParameter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_auto_scale(self):
        """Gets the enable_auto_scale of this PoolAddParameter.

        Whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.

        :return: The enable_auto_scale of this PoolAddParameter.
        :rtype: bool
        """
        return self._enable_auto_scale

    @enable_auto_scale.setter
    def enable_auto_scale(self, enable_auto_scale):
        """Sets the enable_auto_scale of this PoolAddParameter.

        Whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.

        :param enable_auto_scale: The enable_auto_scale of this PoolAddParameter.
        :type enable_auto_scale: bool
        """

        self._enable_auto_scale = enable_auto_scale

    @property
    def enable_inter_node_communication(self):
        """Gets the enable_inter_node_communication of this PoolAddParameter.

        Whether the pool permits direct communication between nodes.

        :return: The enable_inter_node_communication of this PoolAddParameter.
        :rtype: bool
        """
        return self._enable_inter_node_communication

    @enable_inter_node_communication.setter
    def enable_inter_node_communication(self, enable_inter_node_communication):
        """Sets the enable_inter_node_communication of this PoolAddParameter.

        Whether the pool permits direct communication between nodes.

        :param enable_inter_node_communication: The enable_inter_node_communication of this PoolAddParameter.
        :type enable_inter_node_communication: bool
        """

        self._enable_inter_node_communication = enable_inter_node_communication

    @property
    def id(self):
        """Gets the id of this PoolAddParameter.

        A string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.

        :return: The id of this PoolAddParameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PoolAddParameter.

        A string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.

        :param id: The id of this PoolAddParameter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def max_tasks_per_node(self):
        """Gets the max_tasks_per_node of this PoolAddParameter.

        The maximum number of tasks that can run concurrently on a single compute node in the pool.

        :return: The max_tasks_per_node of this PoolAddParameter.
        :rtype: int
        """
        return self._max_tasks_per_node

    @max_tasks_per_node.setter
    def max_tasks_per_node(self, max_tasks_per_node):
        """Sets the max_tasks_per_node of this PoolAddParameter.

        The maximum number of tasks that can run concurrently on a single compute node in the pool.

        :param max_tasks_per_node: The max_tasks_per_node of this PoolAddParameter.
        :type max_tasks_per_node: int
        """

        self._max_tasks_per_node = max_tasks_per_node

    @property
    def metadata(self):
        """Gets the metadata of this PoolAddParameter.

        A list of name-value pairs associated with the pool as metadata.

        :return: The metadata of this PoolAddParameter.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PoolAddParameter.

        A list of name-value pairs associated with the pool as metadata.

        :param metadata: The metadata of this PoolAddParameter.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def resize_timeout(self):
        """Gets the resize_timeout of this PoolAddParameter.

        The timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.

        :return: The resize_timeout of this PoolAddParameter.
        :rtype: str
        """
        return self._resize_timeout

    @resize_timeout.setter
    def resize_timeout(self, resize_timeout):
        """Sets the resize_timeout of this PoolAddParameter.

        The timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.

        :param resize_timeout: The resize_timeout of this PoolAddParameter.
        :type resize_timeout: str
        """

        self._resize_timeout = resize_timeout

    @property
    def start_task(self):
        """Gets the start_task of this PoolAddParameter.


        :return: The start_task of this PoolAddParameter.
        :rtype: StartTask
        """
        return self._start_task

    @start_task.setter
    def start_task(self, start_task):
        """Sets the start_task of this PoolAddParameter.


        :param start_task: The start_task of this PoolAddParameter.
        :type start_task: StartTask
        """

        self._start_task = start_task

    @property
    def target_dedicated(self):
        """Gets the target_dedicated of this PoolAddParameter.

        The desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.

        :return: The target_dedicated of this PoolAddParameter.
        :rtype: int
        """
        return self._target_dedicated

    @target_dedicated.setter
    def target_dedicated(self, target_dedicated):
        """Sets the target_dedicated of this PoolAddParameter.

        The desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.

        :param target_dedicated: The target_dedicated of this PoolAddParameter.
        :type target_dedicated: int
        """

        self._target_dedicated = target_dedicated

    @property
    def task_scheduling_policy(self):
        """Gets the task_scheduling_policy of this PoolAddParameter.


        :return: The task_scheduling_policy of this PoolAddParameter.
        :rtype: TaskSchedulingPolicy
        """
        return self._task_scheduling_policy

    @task_scheduling_policy.setter
    def task_scheduling_policy(self, task_scheduling_policy):
        """Sets the task_scheduling_policy of this PoolAddParameter.


        :param task_scheduling_policy: The task_scheduling_policy of this PoolAddParameter.
        :type task_scheduling_policy: TaskSchedulingPolicy
        """

        self._task_scheduling_policy = task_scheduling_policy

    @property
    def virtual_machine_configuration(self):
        """Gets the virtual_machine_configuration of this PoolAddParameter.


        :return: The virtual_machine_configuration of this PoolAddParameter.
        :rtype: VirtualMachineConfiguration
        """
        return self._virtual_machine_configuration

    @virtual_machine_configuration.setter
    def virtual_machine_configuration(self, virtual_machine_configuration):
        """Sets the virtual_machine_configuration of this PoolAddParameter.


        :param virtual_machine_configuration: The virtual_machine_configuration of this PoolAddParameter.
        :type virtual_machine_configuration: VirtualMachineConfiguration
        """

        self._virtual_machine_configuration = virtual_machine_configuration

    @property
    def vm_size(self):
        """Gets the vm_size of this PoolAddParameter.

        The size of virtual machines in the pool. All virtual machines in a pool are the same size.

        :return: The vm_size of this PoolAddParameter.
        :rtype: str
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this PoolAddParameter.

        The size of virtual machines in the pool. All virtual machines in a pool are the same size.

        :param vm_size: The vm_size of this PoolAddParameter.
        :type vm_size: str
        """
        if vm_size is None:
            raise ValueError("Invalid value for `vm_size`, must not be `None`")

        self._vm_size = vm_size
