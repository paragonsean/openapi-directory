# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.affinity_information import AffinityInformation
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.multi_instance_settings import MultiInstanceSettings
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_constraints import TaskConstraints
from openapi_server.models.task_dependencies import TaskDependencies
from openapi_server import util


class TaskAddParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affinity_info: AffinityInformation=None, command_line: str=None, constraints: TaskConstraints=None, depends_on: TaskDependencies=None, display_name: str=None, environment_settings: List[EnvironmentSetting]=None, id: str=None, multi_instance_settings: MultiInstanceSettings=None, resource_files: List[ResourceFile]=None, run_elevated: bool=None):
        """TaskAddParameter - a model defined in OpenAPI

        :param affinity_info: The affinity_info of this TaskAddParameter.
        :param command_line: The command_line of this TaskAddParameter.
        :param constraints: The constraints of this TaskAddParameter.
        :param depends_on: The depends_on of this TaskAddParameter.
        :param display_name: The display_name of this TaskAddParameter.
        :param environment_settings: The environment_settings of this TaskAddParameter.
        :param id: The id of this TaskAddParameter.
        :param multi_instance_settings: The multi_instance_settings of this TaskAddParameter.
        :param resource_files: The resource_files of this TaskAddParameter.
        :param run_elevated: The run_elevated of this TaskAddParameter.
        """
        self.openapi_types = {
            'affinity_info': AffinityInformation,
            'command_line': str,
            'constraints': TaskConstraints,
            'depends_on': TaskDependencies,
            'display_name': str,
            'environment_settings': List[EnvironmentSetting],
            'id': str,
            'multi_instance_settings': MultiInstanceSettings,
            'resource_files': List[ResourceFile],
            'run_elevated': bool
        }

        self.attribute_map = {
            'affinity_info': 'affinityInfo',
            'command_line': 'commandLine',
            'constraints': 'constraints',
            'depends_on': 'dependsOn',
            'display_name': 'displayName',
            'environment_settings': 'environmentSettings',
            'id': 'id',
            'multi_instance_settings': 'multiInstanceSettings',
            'resource_files': 'resourceFiles',
            'run_elevated': 'runElevated'
        }

        self._affinity_info = affinity_info
        self._command_line = command_line
        self._constraints = constraints
        self._depends_on = depends_on
        self._display_name = display_name
        self._environment_settings = environment_settings
        self._id = id
        self._multi_instance_settings = multi_instance_settings
        self._resource_files = resource_files
        self._run_elevated = run_elevated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskAddParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskAddParameter of this TaskAddParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_info(self):
        """Gets the affinity_info of this TaskAddParameter.


        :return: The affinity_info of this TaskAddParameter.
        :rtype: AffinityInformation
        """
        return self._affinity_info

    @affinity_info.setter
    def affinity_info(self, affinity_info):
        """Sets the affinity_info of this TaskAddParameter.


        :param affinity_info: The affinity_info of this TaskAddParameter.
        :type affinity_info: AffinityInformation
        """

        self._affinity_info = affinity_info

    @property
    def command_line(self):
        """Gets the command_line of this TaskAddParameter.

        The command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line.

        :return: The command_line of this TaskAddParameter.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this TaskAddParameter.

        The command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line.

        :param command_line: The command_line of this TaskAddParameter.
        :type command_line: str
        """
        if command_line is None:
            raise ValueError("Invalid value for `command_line`, must not be `None`")

        self._command_line = command_line

    @property
    def constraints(self):
        """Gets the constraints of this TaskAddParameter.


        :return: The constraints of this TaskAddParameter.
        :rtype: TaskConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this TaskAddParameter.


        :param constraints: The constraints of this TaskAddParameter.
        :type constraints: TaskConstraints
        """

        self._constraints = constraints

    @property
    def depends_on(self):
        """Gets the depends_on of this TaskAddParameter.


        :return: The depends_on of this TaskAddParameter.
        :rtype: TaskDependencies
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this TaskAddParameter.


        :param depends_on: The depends_on of this TaskAddParameter.
        :type depends_on: TaskDependencies
        """

        self._depends_on = depends_on

    @property
    def display_name(self):
        """Gets the display_name of this TaskAddParameter.

        A display name for the task.

        :return: The display_name of this TaskAddParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TaskAddParameter.

        A display name for the task.

        :param display_name: The display_name of this TaskAddParameter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def environment_settings(self):
        """Gets the environment_settings of this TaskAddParameter.

        A list of environment variable settings for the task.

        :return: The environment_settings of this TaskAddParameter.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this TaskAddParameter.

        A list of environment variable settings for the task.

        :param environment_settings: The environment_settings of this TaskAddParameter.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def id(self):
        """Gets the id of this TaskAddParameter.

        A string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.

        :return: The id of this TaskAddParameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskAddParameter.

        A string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.

        :param id: The id of this TaskAddParameter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def multi_instance_settings(self):
        """Gets the multi_instance_settings of this TaskAddParameter.


        :return: The multi_instance_settings of this TaskAddParameter.
        :rtype: MultiInstanceSettings
        """
        return self._multi_instance_settings

    @multi_instance_settings.setter
    def multi_instance_settings(self, multi_instance_settings):
        """Sets the multi_instance_settings of this TaskAddParameter.


        :param multi_instance_settings: The multi_instance_settings of this TaskAddParameter.
        :type multi_instance_settings: MultiInstanceSettings
        """

        self._multi_instance_settings = multi_instance_settings

    @property
    def resource_files(self):
        """Gets the resource_files of this TaskAddParameter.

        A list of files that the Batch service will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed.

        :return: The resource_files of this TaskAddParameter.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this TaskAddParameter.

        A list of files that the Batch service will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed.

        :param resource_files: The resource_files of this TaskAddParameter.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def run_elevated(self):
        """Gets the run_elevated of this TaskAddParameter.

        Whether to run the task in elevated mode.

        :return: The run_elevated of this TaskAddParameter.
        :rtype: bool
        """
        return self._run_elevated

    @run_elevated.setter
    def run_elevated(self, run_elevated):
        """Sets the run_elevated of this TaskAddParameter.

        Whether to run the task in elevated mode.

        :param run_elevated: The run_elevated of this TaskAddParameter.
        :type run_elevated: bool
        """

        self._run_elevated = run_elevated
