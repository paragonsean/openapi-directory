# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, store_location: str=None, store_name: str=None, thumbprint: str=None, thumbprint_algorithm: str=None, visibility: List[str]=None):
        """CertificateReference - a model defined in OpenAPI

        :param store_location: The store_location of this CertificateReference.
        :param store_name: The store_name of this CertificateReference.
        :param thumbprint: The thumbprint of this CertificateReference.
        :param thumbprint_algorithm: The thumbprint_algorithm of this CertificateReference.
        :param visibility: The visibility of this CertificateReference.
        """
        self.openapi_types = {
            'store_location': str,
            'store_name': str,
            'thumbprint': str,
            'thumbprint_algorithm': str,
            'visibility': List[str]
        }

        self.attribute_map = {
            'store_location': 'storeLocation',
            'store_name': 'storeName',
            'thumbprint': 'thumbprint',
            'thumbprint_algorithm': 'thumbprintAlgorithm',
            'visibility': 'visibility'
        }

        self._store_location = store_location
        self._store_name = store_name
        self._thumbprint = thumbprint
        self._thumbprint_algorithm = thumbprint_algorithm
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateReference of this CertificateReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def store_location(self):
        """Gets the store_location of this CertificateReference.

        The location of the certificate store on the compute node into which to install the certificate. The default value is CurrentUser.

        :return: The store_location of this CertificateReference.
        :rtype: str
        """
        return self._store_location

    @store_location.setter
    def store_location(self, store_location):
        """Sets the store_location of this CertificateReference.

        The location of the certificate store on the compute node into which to install the certificate. The default value is CurrentUser.

        :param store_location: The store_location of this CertificateReference.
        :type store_location: str
        """
        allowed_values = ["currentuser", "localmachine", "unmapped"]  # noqa: E501
        if store_location not in allowed_values:
            raise ValueError(
                "Invalid value for `store_location` ({0}), must be one of {1}"
                .format(store_location, allowed_values)
            )

        self._store_location = store_location

    @property
    def store_name(self):
        """Gets the store_name of this CertificateReference.

        The name of the certificate store on the compute node into which to install the certificate. The default value is My.

        :return: The store_name of this CertificateReference.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this CertificateReference.

        The name of the certificate store on the compute node into which to install the certificate. The default value is My.

        :param store_name: The store_name of this CertificateReference.
        :type store_name: str
        """

        self._store_name = store_name

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateReference.

        The thumbprint of the certificate.

        :return: The thumbprint of this CertificateReference.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateReference.

        The thumbprint of the certificate.

        :param thumbprint: The thumbprint of this CertificateReference.
        :type thumbprint: str
        """
        if thumbprint is None:
            raise ValueError("Invalid value for `thumbprint`, must not be `None`")

        self._thumbprint = thumbprint

    @property
    def thumbprint_algorithm(self):
        """Gets the thumbprint_algorithm of this CertificateReference.

        The algorithm with which the thumbprint is associated. This must be sha1.

        :return: The thumbprint_algorithm of this CertificateReference.
        :rtype: str
        """
        return self._thumbprint_algorithm

    @thumbprint_algorithm.setter
    def thumbprint_algorithm(self, thumbprint_algorithm):
        """Sets the thumbprint_algorithm of this CertificateReference.

        The algorithm with which the thumbprint is associated. This must be sha1.

        :param thumbprint_algorithm: The thumbprint_algorithm of this CertificateReference.
        :type thumbprint_algorithm: str
        """
        if thumbprint_algorithm is None:
            raise ValueError("Invalid value for `thumbprint_algorithm`, must not be `None`")

        self._thumbprint_algorithm = thumbprint_algorithm

    @property
    def visibility(self):
        """Gets the visibility of this CertificateReference.

        Which user accounts on the compute node should have access to the private data of the certificate. This may be any subset of the values 'starttask', 'task' and 'remoteuser', separated by commas. The default is all accounts, corresponding to the string 'starttask,task,remoteuser'.

        :return: The visibility of this CertificateReference.
        :rtype: List[str]
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this CertificateReference.

        Which user accounts on the compute node should have access to the private data of the certificate. This may be any subset of the values 'starttask', 'task' and 'remoteuser', separated by commas. The default is all accounts, corresponding to the string 'starttask,task,remoteuser'.

        :param visibility: The visibility of this CertificateReference.
        :type visibility: List[str]
        """
        allowed_values = ["starttask", "task", "remoteuser", "unmapped"]  # noqa: E501
        if not set(visibility).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `visibility` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(visibility) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._visibility = visibility
