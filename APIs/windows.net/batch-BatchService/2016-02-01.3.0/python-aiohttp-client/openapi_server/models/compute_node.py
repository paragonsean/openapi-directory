# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_reference import CertificateReference
from openapi_server.models.compute_node_error import ComputeNodeError
from openapi_server.models.start_task import StartTask
from openapi_server.models.start_task_information import StartTaskInformation
from openapi_server.models.task_information import TaskInformation
from openapi_server import util


class ComputeNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affinity_id: str=None, allocation_time: datetime=None, certificate_references: List[CertificateReference]=None, errors: List[ComputeNodeError]=None, id: str=None, ip_address: str=None, last_boot_time: datetime=None, recent_tasks: List[TaskInformation]=None, running_tasks_count: int=None, scheduling_state: str=None, start_task: StartTask=None, start_task_info: StartTaskInformation=None, state: str=None, state_transition_time: datetime=None, total_tasks_run: int=None, total_tasks_succeeded: int=None, url: str=None, vm_size: str=None):
        """ComputeNode - a model defined in OpenAPI

        :param affinity_id: The affinity_id of this ComputeNode.
        :param allocation_time: The allocation_time of this ComputeNode.
        :param certificate_references: The certificate_references of this ComputeNode.
        :param errors: The errors of this ComputeNode.
        :param id: The id of this ComputeNode.
        :param ip_address: The ip_address of this ComputeNode.
        :param last_boot_time: The last_boot_time of this ComputeNode.
        :param recent_tasks: The recent_tasks of this ComputeNode.
        :param running_tasks_count: The running_tasks_count of this ComputeNode.
        :param scheduling_state: The scheduling_state of this ComputeNode.
        :param start_task: The start_task of this ComputeNode.
        :param start_task_info: The start_task_info of this ComputeNode.
        :param state: The state of this ComputeNode.
        :param state_transition_time: The state_transition_time of this ComputeNode.
        :param total_tasks_run: The total_tasks_run of this ComputeNode.
        :param total_tasks_succeeded: The total_tasks_succeeded of this ComputeNode.
        :param url: The url of this ComputeNode.
        :param vm_size: The vm_size of this ComputeNode.
        """
        self.openapi_types = {
            'affinity_id': str,
            'allocation_time': datetime,
            'certificate_references': List[CertificateReference],
            'errors': List[ComputeNodeError],
            'id': str,
            'ip_address': str,
            'last_boot_time': datetime,
            'recent_tasks': List[TaskInformation],
            'running_tasks_count': int,
            'scheduling_state': str,
            'start_task': StartTask,
            'start_task_info': StartTaskInformation,
            'state': str,
            'state_transition_time': datetime,
            'total_tasks_run': int,
            'total_tasks_succeeded': int,
            'url': str,
            'vm_size': str
        }

        self.attribute_map = {
            'affinity_id': 'affinityId',
            'allocation_time': 'allocationTime',
            'certificate_references': 'certificateReferences',
            'errors': 'errors',
            'id': 'id',
            'ip_address': 'ipAddress',
            'last_boot_time': 'lastBootTime',
            'recent_tasks': 'recentTasks',
            'running_tasks_count': 'runningTasksCount',
            'scheduling_state': 'schedulingState',
            'start_task': 'startTask',
            'start_task_info': 'startTaskInfo',
            'state': 'state',
            'state_transition_time': 'stateTransitionTime',
            'total_tasks_run': 'totalTasksRun',
            'total_tasks_succeeded': 'totalTasksSucceeded',
            'url': 'url',
            'vm_size': 'vmSize'
        }

        self._affinity_id = affinity_id
        self._allocation_time = allocation_time
        self._certificate_references = certificate_references
        self._errors = errors
        self._id = id
        self._ip_address = ip_address
        self._last_boot_time = last_boot_time
        self._recent_tasks = recent_tasks
        self._running_tasks_count = running_tasks_count
        self._scheduling_state = scheduling_state
        self._start_task = start_task
        self._start_task_info = start_task_info
        self._state = state
        self._state_transition_time = state_transition_time
        self._total_tasks_run = total_tasks_run
        self._total_tasks_succeeded = total_tasks_succeeded
        self._url = url
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeNode of this ComputeNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_id(self):
        """Gets the affinity_id of this ComputeNode.

        An identifier which can be passed in the Add Task API to request that the task be scheduled close to this compute node.

        :return: The affinity_id of this ComputeNode.
        :rtype: str
        """
        return self._affinity_id

    @affinity_id.setter
    def affinity_id(self, affinity_id):
        """Sets the affinity_id of this ComputeNode.

        An identifier which can be passed in the Add Task API to request that the task be scheduled close to this compute node.

        :param affinity_id: The affinity_id of this ComputeNode.
        :type affinity_id: str
        """

        self._affinity_id = affinity_id

    @property
    def allocation_time(self):
        """Gets the allocation_time of this ComputeNode.

        The time at which this compute node was allocated to the pool.

        :return: The allocation_time of this ComputeNode.
        :rtype: datetime
        """
        return self._allocation_time

    @allocation_time.setter
    def allocation_time(self, allocation_time):
        """Sets the allocation_time of this ComputeNode.

        The time at which this compute node was allocated to the pool.

        :param allocation_time: The allocation_time of this ComputeNode.
        :type allocation_time: datetime
        """

        self._allocation_time = allocation_time

    @property
    def certificate_references(self):
        """Gets the certificate_references of this ComputeNode.

        The list of certificates installed on the compute node.

        :return: The certificate_references of this ComputeNode.
        :rtype: List[CertificateReference]
        """
        return self._certificate_references

    @certificate_references.setter
    def certificate_references(self, certificate_references):
        """Sets the certificate_references of this ComputeNode.

        The list of certificates installed on the compute node.

        :param certificate_references: The certificate_references of this ComputeNode.
        :type certificate_references: List[CertificateReference]
        """

        self._certificate_references = certificate_references

    @property
    def errors(self):
        """Gets the errors of this ComputeNode.

        The list of errors that are currently being encountered by the compute node.

        :return: The errors of this ComputeNode.
        :rtype: List[ComputeNodeError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ComputeNode.

        The list of errors that are currently being encountered by the compute node.

        :param errors: The errors of this ComputeNode.
        :type errors: List[ComputeNodeError]
        """

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this ComputeNode.

        The id of the compute node.

        :return: The id of this ComputeNode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComputeNode.

        The id of the compute node.

        :param id: The id of this ComputeNode.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this ComputeNode.

        The IP address that other compute nodes can use to communicate with this compute node.

        :return: The ip_address of this ComputeNode.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ComputeNode.

        The IP address that other compute nodes can use to communicate with this compute node.

        :param ip_address: The ip_address of this ComputeNode.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def last_boot_time(self):
        """Gets the last_boot_time of this ComputeNode.

        The time at which the compute node was started.

        :return: The last_boot_time of this ComputeNode.
        :rtype: datetime
        """
        return self._last_boot_time

    @last_boot_time.setter
    def last_boot_time(self, last_boot_time):
        """Sets the last_boot_time of this ComputeNode.

        The time at which the compute node was started.

        :param last_boot_time: The last_boot_time of this ComputeNode.
        :type last_boot_time: datetime
        """

        self._last_boot_time = last_boot_time

    @property
    def recent_tasks(self):
        """Gets the recent_tasks of this ComputeNode.

        The list of tasks that are currently running on the compute node.

        :return: The recent_tasks of this ComputeNode.
        :rtype: List[TaskInformation]
        """
        return self._recent_tasks

    @recent_tasks.setter
    def recent_tasks(self, recent_tasks):
        """Sets the recent_tasks of this ComputeNode.

        The list of tasks that are currently running on the compute node.

        :param recent_tasks: The recent_tasks of this ComputeNode.
        :type recent_tasks: List[TaskInformation]
        """

        self._recent_tasks = recent_tasks

    @property
    def running_tasks_count(self):
        """Gets the running_tasks_count of this ComputeNode.

        The total number of currently running job tasks on the compute node. This includes Job Preparation, Job Release, and Job Manager tasks, but not the pool start task.

        :return: The running_tasks_count of this ComputeNode.
        :rtype: int
        """
        return self._running_tasks_count

    @running_tasks_count.setter
    def running_tasks_count(self, running_tasks_count):
        """Sets the running_tasks_count of this ComputeNode.

        The total number of currently running job tasks on the compute node. This includes Job Preparation, Job Release, and Job Manager tasks, but not the pool start task.

        :param running_tasks_count: The running_tasks_count of this ComputeNode.
        :type running_tasks_count: int
        """

        self._running_tasks_count = running_tasks_count

    @property
    def scheduling_state(self):
        """Gets the scheduling_state of this ComputeNode.

        Whether the compute node should be available for task scheduling.

        :return: The scheduling_state of this ComputeNode.
        :rtype: str
        """
        return self._scheduling_state

    @scheduling_state.setter
    def scheduling_state(self, scheduling_state):
        """Sets the scheduling_state of this ComputeNode.

        Whether the compute node should be available for task scheduling.

        :param scheduling_state: The scheduling_state of this ComputeNode.
        :type scheduling_state: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if scheduling_state not in allowed_values:
            raise ValueError(
                "Invalid value for `scheduling_state` ({0}), must be one of {1}"
                .format(scheduling_state, allowed_values)
            )

        self._scheduling_state = scheduling_state

    @property
    def start_task(self):
        """Gets the start_task of this ComputeNode.


        :return: The start_task of this ComputeNode.
        :rtype: StartTask
        """
        return self._start_task

    @start_task.setter
    def start_task(self, start_task):
        """Sets the start_task of this ComputeNode.


        :param start_task: The start_task of this ComputeNode.
        :type start_task: StartTask
        """

        self._start_task = start_task

    @property
    def start_task_info(self):
        """Gets the start_task_info of this ComputeNode.


        :return: The start_task_info of this ComputeNode.
        :rtype: StartTaskInformation
        """
        return self._start_task_info

    @start_task_info.setter
    def start_task_info(self, start_task_info):
        """Sets the start_task_info of this ComputeNode.


        :param start_task_info: The start_task_info of this ComputeNode.
        :type start_task_info: StartTaskInformation
        """

        self._start_task_info = start_task_info

    @property
    def state(self):
        """Gets the state of this ComputeNode.

        The current state of the compute node.

        :return: The state of this ComputeNode.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ComputeNode.

        The current state of the compute node.

        :param state: The state of this ComputeNode.
        :type state: str
        """
        allowed_values = ["idle", "rebooting", "reimaging", "running", "unusable", "creating", "starting", "waitingforstarttask", "starttaskfailed", "unknown", "leavingpool", "offline"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_transition_time(self):
        """Gets the state_transition_time of this ComputeNode.

        The time at which the compute node entered its current state.

        :return: The state_transition_time of this ComputeNode.
        :rtype: datetime
        """
        return self._state_transition_time

    @state_transition_time.setter
    def state_transition_time(self, state_transition_time):
        """Sets the state_transition_time of this ComputeNode.

        The time at which the compute node entered its current state.

        :param state_transition_time: The state_transition_time of this ComputeNode.
        :type state_transition_time: datetime
        """

        self._state_transition_time = state_transition_time

    @property
    def total_tasks_run(self):
        """Gets the total_tasks_run of this ComputeNode.

        The total number of job tasks completed on the compute node. This includes Job Preparation, Job Release and Job Manager tasks, but not the pool start task.

        :return: The total_tasks_run of this ComputeNode.
        :rtype: int
        """
        return self._total_tasks_run

    @total_tasks_run.setter
    def total_tasks_run(self, total_tasks_run):
        """Sets the total_tasks_run of this ComputeNode.

        The total number of job tasks completed on the compute node. This includes Job Preparation, Job Release and Job Manager tasks, but not the pool start task.

        :param total_tasks_run: The total_tasks_run of this ComputeNode.
        :type total_tasks_run: int
        """

        self._total_tasks_run = total_tasks_run

    @property
    def total_tasks_succeeded(self):
        """Gets the total_tasks_succeeded of this ComputeNode.

        The total number of job tasks which completed successfully (with exitCode 0) on the compute node. This includes Job Preparation, Job Release, and Job Manager tasks, but not the pool start task.

        :return: The total_tasks_succeeded of this ComputeNode.
        :rtype: int
        """
        return self._total_tasks_succeeded

    @total_tasks_succeeded.setter
    def total_tasks_succeeded(self, total_tasks_succeeded):
        """Sets the total_tasks_succeeded of this ComputeNode.

        The total number of job tasks which completed successfully (with exitCode 0) on the compute node. This includes Job Preparation, Job Release, and Job Manager tasks, but not the pool start task.

        :param total_tasks_succeeded: The total_tasks_succeeded of this ComputeNode.
        :type total_tasks_succeeded: int
        """

        self._total_tasks_succeeded = total_tasks_succeeded

    @property
    def url(self):
        """Gets the url of this ComputeNode.

        The URL of the compute node.

        :return: The url of this ComputeNode.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ComputeNode.

        The URL of the compute node.

        :param url: The url of this ComputeNode.
        :type url: str
        """

        self._url = url

    @property
    def vm_size(self):
        """Gets the vm_size of this ComputeNode.

        The size of the virtual machine hosting the compute node.

        :return: The vm_size of this ComputeNode.
        :rtype: str
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this ComputeNode.

        The size of the virtual machine hosting the compute node.

        :param vm_size: The vm_size of this ComputeNode.
        :type vm_size: str
        """

        self._vm_size = vm_size
