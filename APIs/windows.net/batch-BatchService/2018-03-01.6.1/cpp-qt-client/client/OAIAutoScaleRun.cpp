/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoScaleRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoScaleRun::OAIAutoScaleRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoScaleRun::OAIAutoScaleRun() {
    this->initializeModel();
}

OAIAutoScaleRun::~OAIAutoScaleRun() {}

void OAIAutoScaleRun::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIAutoScaleRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoScaleRun::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIAutoScaleRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoScaleRun::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_results_isSet) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIAutoScaleRunError OAIAutoScaleRun::getError() const {
    return m_error;
}
void OAIAutoScaleRun::setError(const OAIAutoScaleRunError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIAutoScaleRun::is_error_Set() const{
    return m_error_isSet;
}

bool OAIAutoScaleRun::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIAutoScaleRun::getResults() const {
    return m_results;
}
void OAIAutoScaleRun::setResults(const QString &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIAutoScaleRun::is_results_Set() const{
    return m_results_isSet;
}

bool OAIAutoScaleRun::is_results_Valid() const{
    return m_results_isValid;
}

QDateTime OAIAutoScaleRun::getTimestamp() const {
    return m_timestamp;
}
void OAIAutoScaleRun::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAutoScaleRun::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAutoScaleRun::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIAutoScaleRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoScaleRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamp_isValid && true;
}

} // namespace OpenAPI
